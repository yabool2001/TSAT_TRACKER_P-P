
TSAT_TRACKER_P-P.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004e44  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000016c  08004f00  08004f00  00014f00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800506c  0800506c  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  0800506c  0800506c  0001506c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005074  08005074  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005074  08005074  00015074  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005078  08005078  00015078  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  0800507c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002a0  20000010  0800508c  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002b0  0800508c  000202b0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY
 13 .debug_info   000161f2  00000000  00000000  0002007b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002776  00000000  00000000  0003626d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001470  00000000  00000000  000389e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001003  00000000  00000000  00039e58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001d3d3  00000000  00000000  0003ae5b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000159be  00000000  00000000  0005822e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000bff96  00000000  00000000  0006dbec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004bc8  00000000  00000000  0012db84  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000057  00000000  00000000  0013274c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000010 	.word	0x20000010
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08004ee8 	.word	0x08004ee8

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000014 	.word	0x20000014
 8000100:	08004ee8 	.word	0x08004ee8

08000104 <strlen>:
 8000104:	2300      	movs	r3, #0
 8000106:	5cc2      	ldrb	r2, [r0, r3]
 8000108:	3301      	adds	r3, #1
 800010a:	2a00      	cmp	r2, #0
 800010c:	d1fb      	bne.n	8000106 <strlen+0x2>
 800010e:	1e58      	subs	r0, r3, #1
 8000110:	4770      	bx	lr
	...

08000114 <__udivsi3>:
 8000114:	2200      	movs	r2, #0
 8000116:	0843      	lsrs	r3, r0, #1
 8000118:	428b      	cmp	r3, r1
 800011a:	d374      	bcc.n	8000206 <__udivsi3+0xf2>
 800011c:	0903      	lsrs	r3, r0, #4
 800011e:	428b      	cmp	r3, r1
 8000120:	d35f      	bcc.n	80001e2 <__udivsi3+0xce>
 8000122:	0a03      	lsrs	r3, r0, #8
 8000124:	428b      	cmp	r3, r1
 8000126:	d344      	bcc.n	80001b2 <__udivsi3+0x9e>
 8000128:	0b03      	lsrs	r3, r0, #12
 800012a:	428b      	cmp	r3, r1
 800012c:	d328      	bcc.n	8000180 <__udivsi3+0x6c>
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d30d      	bcc.n	8000150 <__udivsi3+0x3c>
 8000134:	22ff      	movs	r2, #255	; 0xff
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	ba12      	rev	r2, r2
 800013a:	0c03      	lsrs	r3, r0, #16
 800013c:	428b      	cmp	r3, r1
 800013e:	d302      	bcc.n	8000146 <__udivsi3+0x32>
 8000140:	1212      	asrs	r2, r2, #8
 8000142:	0209      	lsls	r1, r1, #8
 8000144:	d065      	beq.n	8000212 <__udivsi3+0xfe>
 8000146:	0b03      	lsrs	r3, r0, #12
 8000148:	428b      	cmp	r3, r1
 800014a:	d319      	bcc.n	8000180 <__udivsi3+0x6c>
 800014c:	e000      	b.n	8000150 <__udivsi3+0x3c>
 800014e:	0a09      	lsrs	r1, r1, #8
 8000150:	0bc3      	lsrs	r3, r0, #15
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x46>
 8000156:	03cb      	lsls	r3, r1, #15
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b83      	lsrs	r3, r0, #14
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x52>
 8000162:	038b      	lsls	r3, r1, #14
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b43      	lsrs	r3, r0, #13
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x5e>
 800016e:	034b      	lsls	r3, r1, #13
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b03      	lsrs	r3, r0, #12
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x6a>
 800017a:	030b      	lsls	r3, r1, #12
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0ac3      	lsrs	r3, r0, #11
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x76>
 8000186:	02cb      	lsls	r3, r1, #11
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a83      	lsrs	r3, r0, #10
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x82>
 8000192:	028b      	lsls	r3, r1, #10
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a43      	lsrs	r3, r0, #9
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x8e>
 800019e:	024b      	lsls	r3, r1, #9
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a03      	lsrs	r3, r0, #8
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x9a>
 80001aa:	020b      	lsls	r3, r1, #8
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	d2cd      	bcs.n	800014e <__udivsi3+0x3a>
 80001b2:	09c3      	lsrs	r3, r0, #7
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xa8>
 80001b8:	01cb      	lsls	r3, r1, #7
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0983      	lsrs	r3, r0, #6
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xb4>
 80001c4:	018b      	lsls	r3, r1, #6
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0943      	lsrs	r3, r0, #5
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xc0>
 80001d0:	014b      	lsls	r3, r1, #5
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0903      	lsrs	r3, r0, #4
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xcc>
 80001dc:	010b      	lsls	r3, r1, #4
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	08c3      	lsrs	r3, r0, #3
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xd8>
 80001e8:	00cb      	lsls	r3, r1, #3
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0883      	lsrs	r3, r0, #2
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xe4>
 80001f4:	008b      	lsls	r3, r1, #2
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	0843      	lsrs	r3, r0, #1
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xf0>
 8000200:	004b      	lsls	r3, r1, #1
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	1a41      	subs	r1, r0, r1
 8000208:	d200      	bcs.n	800020c <__udivsi3+0xf8>
 800020a:	4601      	mov	r1, r0
 800020c:	4152      	adcs	r2, r2
 800020e:	4610      	mov	r0, r2
 8000210:	4770      	bx	lr
 8000212:	e7ff      	b.n	8000214 <__udivsi3+0x100>
 8000214:	b501      	push	{r0, lr}
 8000216:	2000      	movs	r0, #0
 8000218:	f000 f8f0 	bl	80003fc <__aeabi_idiv0>
 800021c:	bd02      	pop	{r1, pc}
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uidivmod>:
 8000220:	2900      	cmp	r1, #0
 8000222:	d0f7      	beq.n	8000214 <__udivsi3+0x100>
 8000224:	e776      	b.n	8000114 <__udivsi3>
 8000226:	4770      	bx	lr

08000228 <__divsi3>:
 8000228:	4603      	mov	r3, r0
 800022a:	430b      	orrs	r3, r1
 800022c:	d47f      	bmi.n	800032e <__divsi3+0x106>
 800022e:	2200      	movs	r2, #0
 8000230:	0843      	lsrs	r3, r0, #1
 8000232:	428b      	cmp	r3, r1
 8000234:	d374      	bcc.n	8000320 <__divsi3+0xf8>
 8000236:	0903      	lsrs	r3, r0, #4
 8000238:	428b      	cmp	r3, r1
 800023a:	d35f      	bcc.n	80002fc <__divsi3+0xd4>
 800023c:	0a03      	lsrs	r3, r0, #8
 800023e:	428b      	cmp	r3, r1
 8000240:	d344      	bcc.n	80002cc <__divsi3+0xa4>
 8000242:	0b03      	lsrs	r3, r0, #12
 8000244:	428b      	cmp	r3, r1
 8000246:	d328      	bcc.n	800029a <__divsi3+0x72>
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d30d      	bcc.n	800026a <__divsi3+0x42>
 800024e:	22ff      	movs	r2, #255	; 0xff
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	ba12      	rev	r2, r2
 8000254:	0c03      	lsrs	r3, r0, #16
 8000256:	428b      	cmp	r3, r1
 8000258:	d302      	bcc.n	8000260 <__divsi3+0x38>
 800025a:	1212      	asrs	r2, r2, #8
 800025c:	0209      	lsls	r1, r1, #8
 800025e:	d065      	beq.n	800032c <__divsi3+0x104>
 8000260:	0b03      	lsrs	r3, r0, #12
 8000262:	428b      	cmp	r3, r1
 8000264:	d319      	bcc.n	800029a <__divsi3+0x72>
 8000266:	e000      	b.n	800026a <__divsi3+0x42>
 8000268:	0a09      	lsrs	r1, r1, #8
 800026a:	0bc3      	lsrs	r3, r0, #15
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x4c>
 8000270:	03cb      	lsls	r3, r1, #15
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b83      	lsrs	r3, r0, #14
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x58>
 800027c:	038b      	lsls	r3, r1, #14
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b43      	lsrs	r3, r0, #13
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x64>
 8000288:	034b      	lsls	r3, r1, #13
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0b03      	lsrs	r3, r0, #12
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x70>
 8000294:	030b      	lsls	r3, r1, #12
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0ac3      	lsrs	r3, r0, #11
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x7c>
 80002a0:	02cb      	lsls	r3, r1, #11
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a83      	lsrs	r3, r0, #10
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x88>
 80002ac:	028b      	lsls	r3, r1, #10
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a43      	lsrs	r3, r0, #9
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x94>
 80002b8:	024b      	lsls	r3, r1, #9
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0a03      	lsrs	r3, r0, #8
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0xa0>
 80002c4:	020b      	lsls	r3, r1, #8
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	d2cd      	bcs.n	8000268 <__divsi3+0x40>
 80002cc:	09c3      	lsrs	r3, r0, #7
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xae>
 80002d2:	01cb      	lsls	r3, r1, #7
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0983      	lsrs	r3, r0, #6
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xba>
 80002de:	018b      	lsls	r3, r1, #6
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0943      	lsrs	r3, r0, #5
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xc6>
 80002ea:	014b      	lsls	r3, r1, #5
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	0903      	lsrs	r3, r0, #4
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xd2>
 80002f6:	010b      	lsls	r3, r1, #4
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	08c3      	lsrs	r3, r0, #3
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xde>
 8000302:	00cb      	lsls	r3, r1, #3
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0883      	lsrs	r3, r0, #2
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xea>
 800030e:	008b      	lsls	r3, r1, #2
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	0843      	lsrs	r3, r0, #1
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xf6>
 800031a:	004b      	lsls	r3, r1, #1
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	1a41      	subs	r1, r0, r1
 8000322:	d200      	bcs.n	8000326 <__divsi3+0xfe>
 8000324:	4601      	mov	r1, r0
 8000326:	4152      	adcs	r2, r2
 8000328:	4610      	mov	r0, r2
 800032a:	4770      	bx	lr
 800032c:	e05d      	b.n	80003ea <__divsi3+0x1c2>
 800032e:	0fca      	lsrs	r2, r1, #31
 8000330:	d000      	beq.n	8000334 <__divsi3+0x10c>
 8000332:	4249      	negs	r1, r1
 8000334:	1003      	asrs	r3, r0, #32
 8000336:	d300      	bcc.n	800033a <__divsi3+0x112>
 8000338:	4240      	negs	r0, r0
 800033a:	4053      	eors	r3, r2
 800033c:	2200      	movs	r2, #0
 800033e:	469c      	mov	ip, r3
 8000340:	0903      	lsrs	r3, r0, #4
 8000342:	428b      	cmp	r3, r1
 8000344:	d32d      	bcc.n	80003a2 <__divsi3+0x17a>
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d312      	bcc.n	8000372 <__divsi3+0x14a>
 800034c:	22fc      	movs	r2, #252	; 0xfc
 800034e:	0189      	lsls	r1, r1, #6
 8000350:	ba12      	rev	r2, r2
 8000352:	0a03      	lsrs	r3, r0, #8
 8000354:	428b      	cmp	r3, r1
 8000356:	d30c      	bcc.n	8000372 <__divsi3+0x14a>
 8000358:	0189      	lsls	r1, r1, #6
 800035a:	1192      	asrs	r2, r2, #6
 800035c:	428b      	cmp	r3, r1
 800035e:	d308      	bcc.n	8000372 <__divsi3+0x14a>
 8000360:	0189      	lsls	r1, r1, #6
 8000362:	1192      	asrs	r2, r2, #6
 8000364:	428b      	cmp	r3, r1
 8000366:	d304      	bcc.n	8000372 <__divsi3+0x14a>
 8000368:	0189      	lsls	r1, r1, #6
 800036a:	d03a      	beq.n	80003e2 <__divsi3+0x1ba>
 800036c:	1192      	asrs	r2, r2, #6
 800036e:	e000      	b.n	8000372 <__divsi3+0x14a>
 8000370:	0989      	lsrs	r1, r1, #6
 8000372:	09c3      	lsrs	r3, r0, #7
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x154>
 8000378:	01cb      	lsls	r3, r1, #7
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0983      	lsrs	r3, r0, #6
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x160>
 8000384:	018b      	lsls	r3, r1, #6
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0943      	lsrs	r3, r0, #5
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x16c>
 8000390:	014b      	lsls	r3, r1, #5
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	0903      	lsrs	r3, r0, #4
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x178>
 800039c:	010b      	lsls	r3, r1, #4
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	08c3      	lsrs	r3, r0, #3
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x184>
 80003a8:	00cb      	lsls	r3, r1, #3
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	0883      	lsrs	r3, r0, #2
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x190>
 80003b4:	008b      	lsls	r3, r1, #2
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	d2d9      	bcs.n	8000370 <__divsi3+0x148>
 80003bc:	0843      	lsrs	r3, r0, #1
 80003be:	428b      	cmp	r3, r1
 80003c0:	d301      	bcc.n	80003c6 <__divsi3+0x19e>
 80003c2:	004b      	lsls	r3, r1, #1
 80003c4:	1ac0      	subs	r0, r0, r3
 80003c6:	4152      	adcs	r2, r2
 80003c8:	1a41      	subs	r1, r0, r1
 80003ca:	d200      	bcs.n	80003ce <__divsi3+0x1a6>
 80003cc:	4601      	mov	r1, r0
 80003ce:	4663      	mov	r3, ip
 80003d0:	4152      	adcs	r2, r2
 80003d2:	105b      	asrs	r3, r3, #1
 80003d4:	4610      	mov	r0, r2
 80003d6:	d301      	bcc.n	80003dc <__divsi3+0x1b4>
 80003d8:	4240      	negs	r0, r0
 80003da:	2b00      	cmp	r3, #0
 80003dc:	d500      	bpl.n	80003e0 <__divsi3+0x1b8>
 80003de:	4249      	negs	r1, r1
 80003e0:	4770      	bx	lr
 80003e2:	4663      	mov	r3, ip
 80003e4:	105b      	asrs	r3, r3, #1
 80003e6:	d300      	bcc.n	80003ea <__divsi3+0x1c2>
 80003e8:	4240      	negs	r0, r0
 80003ea:	b501      	push	{r0, lr}
 80003ec:	2000      	movs	r0, #0
 80003ee:	f000 f805 	bl	80003fc <__aeabi_idiv0>
 80003f2:	bd02      	pop	{r1, pc}

080003f4 <__aeabi_idivmod>:
 80003f4:	2900      	cmp	r1, #0
 80003f6:	d0f8      	beq.n	80003ea <__divsi3+0x1c2>
 80003f8:	e716      	b.n	8000228 <__divsi3>
 80003fa:	4770      	bx	lr

080003fc <__aeabi_idiv0>:
 80003fc:	4770      	bx	lr
 80003fe:	46c0      	nop			; (mov r8, r8)

08000400 <__aeabi_uldivmod>:
 8000400:	2b00      	cmp	r3, #0
 8000402:	d111      	bne.n	8000428 <__aeabi_uldivmod+0x28>
 8000404:	2a00      	cmp	r2, #0
 8000406:	d10f      	bne.n	8000428 <__aeabi_uldivmod+0x28>
 8000408:	2900      	cmp	r1, #0
 800040a:	d100      	bne.n	800040e <__aeabi_uldivmod+0xe>
 800040c:	2800      	cmp	r0, #0
 800040e:	d002      	beq.n	8000416 <__aeabi_uldivmod+0x16>
 8000410:	2100      	movs	r1, #0
 8000412:	43c9      	mvns	r1, r1
 8000414:	0008      	movs	r0, r1
 8000416:	b407      	push	{r0, r1, r2}
 8000418:	4802      	ldr	r0, [pc, #8]	; (8000424 <__aeabi_uldivmod+0x24>)
 800041a:	a102      	add	r1, pc, #8	; (adr r1, 8000424 <__aeabi_uldivmod+0x24>)
 800041c:	1840      	adds	r0, r0, r1
 800041e:	9002      	str	r0, [sp, #8]
 8000420:	bd03      	pop	{r0, r1, pc}
 8000422:	46c0      	nop			; (mov r8, r8)
 8000424:	ffffffd9 	.word	0xffffffd9
 8000428:	b403      	push	{r0, r1}
 800042a:	4668      	mov	r0, sp
 800042c:	b501      	push	{r0, lr}
 800042e:	9802      	ldr	r0, [sp, #8]
 8000430:	f000 f806 	bl	8000440 <__udivmoddi4>
 8000434:	9b01      	ldr	r3, [sp, #4]
 8000436:	469e      	mov	lr, r3
 8000438:	b002      	add	sp, #8
 800043a:	bc0c      	pop	{r2, r3}
 800043c:	4770      	bx	lr
 800043e:	46c0      	nop			; (mov r8, r8)

08000440 <__udivmoddi4>:
 8000440:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000442:	4657      	mov	r7, sl
 8000444:	464e      	mov	r6, r9
 8000446:	4645      	mov	r5, r8
 8000448:	46de      	mov	lr, fp
 800044a:	b5e0      	push	{r5, r6, r7, lr}
 800044c:	0004      	movs	r4, r0
 800044e:	000d      	movs	r5, r1
 8000450:	4692      	mov	sl, r2
 8000452:	4699      	mov	r9, r3
 8000454:	b083      	sub	sp, #12
 8000456:	428b      	cmp	r3, r1
 8000458:	d830      	bhi.n	80004bc <__udivmoddi4+0x7c>
 800045a:	d02d      	beq.n	80004b8 <__udivmoddi4+0x78>
 800045c:	4649      	mov	r1, r9
 800045e:	4650      	mov	r0, sl
 8000460:	f000 f8d8 	bl	8000614 <__clzdi2>
 8000464:	0029      	movs	r1, r5
 8000466:	0006      	movs	r6, r0
 8000468:	0020      	movs	r0, r4
 800046a:	f000 f8d3 	bl	8000614 <__clzdi2>
 800046e:	1a33      	subs	r3, r6, r0
 8000470:	4698      	mov	r8, r3
 8000472:	3b20      	subs	r3, #32
 8000474:	d434      	bmi.n	80004e0 <__udivmoddi4+0xa0>
 8000476:	469b      	mov	fp, r3
 8000478:	4653      	mov	r3, sl
 800047a:	465a      	mov	r2, fp
 800047c:	4093      	lsls	r3, r2
 800047e:	4642      	mov	r2, r8
 8000480:	001f      	movs	r7, r3
 8000482:	4653      	mov	r3, sl
 8000484:	4093      	lsls	r3, r2
 8000486:	001e      	movs	r6, r3
 8000488:	42af      	cmp	r7, r5
 800048a:	d83b      	bhi.n	8000504 <__udivmoddi4+0xc4>
 800048c:	42af      	cmp	r7, r5
 800048e:	d100      	bne.n	8000492 <__udivmoddi4+0x52>
 8000490:	e079      	b.n	8000586 <__udivmoddi4+0x146>
 8000492:	465b      	mov	r3, fp
 8000494:	1ba4      	subs	r4, r4, r6
 8000496:	41bd      	sbcs	r5, r7
 8000498:	2b00      	cmp	r3, #0
 800049a:	da00      	bge.n	800049e <__udivmoddi4+0x5e>
 800049c:	e076      	b.n	800058c <__udivmoddi4+0x14c>
 800049e:	2200      	movs	r2, #0
 80004a0:	2300      	movs	r3, #0
 80004a2:	9200      	str	r2, [sp, #0]
 80004a4:	9301      	str	r3, [sp, #4]
 80004a6:	2301      	movs	r3, #1
 80004a8:	465a      	mov	r2, fp
 80004aa:	4093      	lsls	r3, r2
 80004ac:	9301      	str	r3, [sp, #4]
 80004ae:	2301      	movs	r3, #1
 80004b0:	4642      	mov	r2, r8
 80004b2:	4093      	lsls	r3, r2
 80004b4:	9300      	str	r3, [sp, #0]
 80004b6:	e029      	b.n	800050c <__udivmoddi4+0xcc>
 80004b8:	4282      	cmp	r2, r0
 80004ba:	d9cf      	bls.n	800045c <__udivmoddi4+0x1c>
 80004bc:	2200      	movs	r2, #0
 80004be:	2300      	movs	r3, #0
 80004c0:	9200      	str	r2, [sp, #0]
 80004c2:	9301      	str	r3, [sp, #4]
 80004c4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80004c6:	2b00      	cmp	r3, #0
 80004c8:	d001      	beq.n	80004ce <__udivmoddi4+0x8e>
 80004ca:	601c      	str	r4, [r3, #0]
 80004cc:	605d      	str	r5, [r3, #4]
 80004ce:	9800      	ldr	r0, [sp, #0]
 80004d0:	9901      	ldr	r1, [sp, #4]
 80004d2:	b003      	add	sp, #12
 80004d4:	bcf0      	pop	{r4, r5, r6, r7}
 80004d6:	46bb      	mov	fp, r7
 80004d8:	46b2      	mov	sl, r6
 80004da:	46a9      	mov	r9, r5
 80004dc:	46a0      	mov	r8, r4
 80004de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004e0:	4642      	mov	r2, r8
 80004e2:	469b      	mov	fp, r3
 80004e4:	2320      	movs	r3, #32
 80004e6:	1a9b      	subs	r3, r3, r2
 80004e8:	4652      	mov	r2, sl
 80004ea:	40da      	lsrs	r2, r3
 80004ec:	4641      	mov	r1, r8
 80004ee:	0013      	movs	r3, r2
 80004f0:	464a      	mov	r2, r9
 80004f2:	408a      	lsls	r2, r1
 80004f4:	0017      	movs	r7, r2
 80004f6:	4642      	mov	r2, r8
 80004f8:	431f      	orrs	r7, r3
 80004fa:	4653      	mov	r3, sl
 80004fc:	4093      	lsls	r3, r2
 80004fe:	001e      	movs	r6, r3
 8000500:	42af      	cmp	r7, r5
 8000502:	d9c3      	bls.n	800048c <__udivmoddi4+0x4c>
 8000504:	2200      	movs	r2, #0
 8000506:	2300      	movs	r3, #0
 8000508:	9200      	str	r2, [sp, #0]
 800050a:	9301      	str	r3, [sp, #4]
 800050c:	4643      	mov	r3, r8
 800050e:	2b00      	cmp	r3, #0
 8000510:	d0d8      	beq.n	80004c4 <__udivmoddi4+0x84>
 8000512:	07fb      	lsls	r3, r7, #31
 8000514:	0872      	lsrs	r2, r6, #1
 8000516:	431a      	orrs	r2, r3
 8000518:	4646      	mov	r6, r8
 800051a:	087b      	lsrs	r3, r7, #1
 800051c:	e00e      	b.n	800053c <__udivmoddi4+0xfc>
 800051e:	42ab      	cmp	r3, r5
 8000520:	d101      	bne.n	8000526 <__udivmoddi4+0xe6>
 8000522:	42a2      	cmp	r2, r4
 8000524:	d80c      	bhi.n	8000540 <__udivmoddi4+0x100>
 8000526:	1aa4      	subs	r4, r4, r2
 8000528:	419d      	sbcs	r5, r3
 800052a:	2001      	movs	r0, #1
 800052c:	1924      	adds	r4, r4, r4
 800052e:	416d      	adcs	r5, r5
 8000530:	2100      	movs	r1, #0
 8000532:	3e01      	subs	r6, #1
 8000534:	1824      	adds	r4, r4, r0
 8000536:	414d      	adcs	r5, r1
 8000538:	2e00      	cmp	r6, #0
 800053a:	d006      	beq.n	800054a <__udivmoddi4+0x10a>
 800053c:	42ab      	cmp	r3, r5
 800053e:	d9ee      	bls.n	800051e <__udivmoddi4+0xde>
 8000540:	3e01      	subs	r6, #1
 8000542:	1924      	adds	r4, r4, r4
 8000544:	416d      	adcs	r5, r5
 8000546:	2e00      	cmp	r6, #0
 8000548:	d1f8      	bne.n	800053c <__udivmoddi4+0xfc>
 800054a:	9800      	ldr	r0, [sp, #0]
 800054c:	9901      	ldr	r1, [sp, #4]
 800054e:	465b      	mov	r3, fp
 8000550:	1900      	adds	r0, r0, r4
 8000552:	4169      	adcs	r1, r5
 8000554:	2b00      	cmp	r3, #0
 8000556:	db24      	blt.n	80005a2 <__udivmoddi4+0x162>
 8000558:	002b      	movs	r3, r5
 800055a:	465a      	mov	r2, fp
 800055c:	4644      	mov	r4, r8
 800055e:	40d3      	lsrs	r3, r2
 8000560:	002a      	movs	r2, r5
 8000562:	40e2      	lsrs	r2, r4
 8000564:	001c      	movs	r4, r3
 8000566:	465b      	mov	r3, fp
 8000568:	0015      	movs	r5, r2
 800056a:	2b00      	cmp	r3, #0
 800056c:	db2a      	blt.n	80005c4 <__udivmoddi4+0x184>
 800056e:	0026      	movs	r6, r4
 8000570:	409e      	lsls	r6, r3
 8000572:	0033      	movs	r3, r6
 8000574:	0026      	movs	r6, r4
 8000576:	4647      	mov	r7, r8
 8000578:	40be      	lsls	r6, r7
 800057a:	0032      	movs	r2, r6
 800057c:	1a80      	subs	r0, r0, r2
 800057e:	4199      	sbcs	r1, r3
 8000580:	9000      	str	r0, [sp, #0]
 8000582:	9101      	str	r1, [sp, #4]
 8000584:	e79e      	b.n	80004c4 <__udivmoddi4+0x84>
 8000586:	42a3      	cmp	r3, r4
 8000588:	d8bc      	bhi.n	8000504 <__udivmoddi4+0xc4>
 800058a:	e782      	b.n	8000492 <__udivmoddi4+0x52>
 800058c:	4642      	mov	r2, r8
 800058e:	2320      	movs	r3, #32
 8000590:	2100      	movs	r1, #0
 8000592:	1a9b      	subs	r3, r3, r2
 8000594:	2200      	movs	r2, #0
 8000596:	9100      	str	r1, [sp, #0]
 8000598:	9201      	str	r2, [sp, #4]
 800059a:	2201      	movs	r2, #1
 800059c:	40da      	lsrs	r2, r3
 800059e:	9201      	str	r2, [sp, #4]
 80005a0:	e785      	b.n	80004ae <__udivmoddi4+0x6e>
 80005a2:	4642      	mov	r2, r8
 80005a4:	2320      	movs	r3, #32
 80005a6:	1a9b      	subs	r3, r3, r2
 80005a8:	002a      	movs	r2, r5
 80005aa:	4646      	mov	r6, r8
 80005ac:	409a      	lsls	r2, r3
 80005ae:	0023      	movs	r3, r4
 80005b0:	40f3      	lsrs	r3, r6
 80005b2:	4644      	mov	r4, r8
 80005b4:	4313      	orrs	r3, r2
 80005b6:	002a      	movs	r2, r5
 80005b8:	40e2      	lsrs	r2, r4
 80005ba:	001c      	movs	r4, r3
 80005bc:	465b      	mov	r3, fp
 80005be:	0015      	movs	r5, r2
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	dad4      	bge.n	800056e <__udivmoddi4+0x12e>
 80005c4:	4642      	mov	r2, r8
 80005c6:	002f      	movs	r7, r5
 80005c8:	2320      	movs	r3, #32
 80005ca:	0026      	movs	r6, r4
 80005cc:	4097      	lsls	r7, r2
 80005ce:	1a9b      	subs	r3, r3, r2
 80005d0:	40de      	lsrs	r6, r3
 80005d2:	003b      	movs	r3, r7
 80005d4:	4333      	orrs	r3, r6
 80005d6:	e7cd      	b.n	8000574 <__udivmoddi4+0x134>

080005d8 <__clzsi2>:
 80005d8:	211c      	movs	r1, #28
 80005da:	2301      	movs	r3, #1
 80005dc:	041b      	lsls	r3, r3, #16
 80005de:	4298      	cmp	r0, r3
 80005e0:	d301      	bcc.n	80005e6 <__clzsi2+0xe>
 80005e2:	0c00      	lsrs	r0, r0, #16
 80005e4:	3910      	subs	r1, #16
 80005e6:	0a1b      	lsrs	r3, r3, #8
 80005e8:	4298      	cmp	r0, r3
 80005ea:	d301      	bcc.n	80005f0 <__clzsi2+0x18>
 80005ec:	0a00      	lsrs	r0, r0, #8
 80005ee:	3908      	subs	r1, #8
 80005f0:	091b      	lsrs	r3, r3, #4
 80005f2:	4298      	cmp	r0, r3
 80005f4:	d301      	bcc.n	80005fa <__clzsi2+0x22>
 80005f6:	0900      	lsrs	r0, r0, #4
 80005f8:	3904      	subs	r1, #4
 80005fa:	a202      	add	r2, pc, #8	; (adr r2, 8000604 <__clzsi2+0x2c>)
 80005fc:	5c10      	ldrb	r0, [r2, r0]
 80005fe:	1840      	adds	r0, r0, r1
 8000600:	4770      	bx	lr
 8000602:	46c0      	nop			; (mov r8, r8)
 8000604:	02020304 	.word	0x02020304
 8000608:	01010101 	.word	0x01010101
	...

08000614 <__clzdi2>:
 8000614:	b510      	push	{r4, lr}
 8000616:	2900      	cmp	r1, #0
 8000618:	d103      	bne.n	8000622 <__clzdi2+0xe>
 800061a:	f7ff ffdd 	bl	80005d8 <__clzsi2>
 800061e:	3020      	adds	r0, #32
 8000620:	e002      	b.n	8000628 <__clzdi2+0x14>
 8000622:	0008      	movs	r0, r1
 8000624:	f7ff ffd8 	bl	80005d8 <__clzsi2>
 8000628:	bd10      	pop	{r4, pc}
 800062a:	46c0      	nop			; (mov r8, r8)

0800062c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800062c:	b5b0      	push	{r4, r5, r7, lr}
 800062e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000630:	f000 fd80 	bl	8001134 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000634:	f000 f886 	bl	8000744 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000638:	f000 fa18 	bl	8000a6c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800063c:	f000 f946 	bl	80008cc <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000640:	f000 f992 	bl	8000968 <MX_USART3_UART_Init>
  MX_USART5_UART_Init();
 8000644:	f000 f9de 	bl	8000a04 <MX_USART5_UART_Init>
  MX_SPI1_Init();
 8000648:	f000 f8c4 	bl	80007d4 <MX_SPI1_Init>
  MX_TIM6_Init();
 800064c:	f000 f900 	bl	8000850 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Transmit ( HUART_DBG , (uint8_t*) hello , strlen ( hello ) , UART_TIMEOUT ) ;
 8000650:	4b2e      	ldr	r3, [pc, #184]	; (800070c <main+0xe0>)
 8000652:	681c      	ldr	r4, [r3, #0]
 8000654:	4b2d      	ldr	r3, [pc, #180]	; (800070c <main+0xe0>)
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	0018      	movs	r0, r3
 800065a:	f7ff fd53 	bl	8000104 <strlen>
 800065e:	0003      	movs	r3, r0
 8000660:	b29a      	uxth	r2, r3
 8000662:	23fa      	movs	r3, #250	; 0xfa
 8000664:	009b      	lsls	r3, r3, #2
 8000666:	482a      	ldr	r0, [pc, #168]	; (8000710 <main+0xe4>)
 8000668:	0021      	movs	r1, r4
 800066a:	f003 f911 	bl	8003890 <HAL_UART_Transmit>
  __HAL_TIM_CLEAR_IT ( &htim6 , TIM_IT_UPDATE ) ;
 800066e:	4b29      	ldr	r3, [pc, #164]	; (8000714 <main+0xe8>)
 8000670:	681b      	ldr	r3, [r3, #0]
 8000672:	2202      	movs	r2, #2
 8000674:	4252      	negs	r2, r2
 8000676:	611a      	str	r2, [r3, #16]
    // ACC INIT
  send_debug_logs ( "LIS2DW12 test started." ) ;
 8000678:	4b27      	ldr	r3, [pc, #156]	; (8000718 <main+0xec>)
 800067a:	0018      	movs	r0, r3
 800067c:	f000 fab6 	bl	8000bec <send_debug_logs>
  my_acc_ctx.write_reg = my_lis2dw12_platform_write ;
 8000680:	4b26      	ldr	r3, [pc, #152]	; (800071c <main+0xf0>)
 8000682:	4a27      	ldr	r2, [pc, #156]	; (8000720 <main+0xf4>)
 8000684:	601a      	str	r2, [r3, #0]
  my_acc_ctx.read_reg = my_lis2dw12_platform_read ;
 8000686:	4b25      	ldr	r3, [pc, #148]	; (800071c <main+0xf0>)
 8000688:	4a26      	ldr	r2, [pc, #152]	; (8000724 <main+0xf8>)
 800068a:	605a      	str	r2, [r3, #4]
  my_acc_ctx.handle = HACC ;
 800068c:	4b23      	ldr	r3, [pc, #140]	; (800071c <main+0xf0>)
 800068e:	4a26      	ldr	r2, [pc, #152]	; (8000728 <main+0xfc>)
 8000690:	60da      	str	r2, [r3, #12]
  if ( my_lis2dw12_init ( &my_acc_ctx ) )
 8000692:	4b22      	ldr	r3, [pc, #136]	; (800071c <main+0xf0>)
 8000694:	0018      	movs	r0, r3
 8000696:	f004 fb87 	bl	8004da8 <my_lis2dw12_init>
 800069a:	1e03      	subs	r3, r0, #0
 800069c:	d004      	beq.n	80006a8 <main+0x7c>
  {
	  send_debug_logs ( "LIS2DW12 has been initialized." ) ;
 800069e:	4b23      	ldr	r3, [pc, #140]	; (800072c <main+0x100>)
 80006a0:	0018      	movs	r0, r3
 80006a2:	f000 faa3 	bl	8000bec <send_debug_logs>
 80006a6:	e003      	b.n	80006b0 <main+0x84>
  }
  else
  {
	  send_debug_logs ( "LIS2DW12 has been not initialized." ) ;
 80006a8:	4b21      	ldr	r3, [pc, #132]	; (8000730 <main+0x104>)
 80006aa:	0018      	movs	r0, r3
 80006ac:	f000 fa9e 	bl	8000bec <send_debug_logs>
  }
  my_lis2dw12_int1_wu_enable ( &my_acc_ctx ) ;
 80006b0:	4b1a      	ldr	r3, [pc, #104]	; (800071c <main+0xf0>)
 80006b2:	0018      	movs	r0, r3
 80006b4:	f004 fbd1 	bl	8004e5a <my_lis2dw12_int1_wu_enable>
  while ( !test )
 80006b8:	e00f      	b.n	80006da <main+0xae>
  {
	  if ( HAL_GPIO_ReadPin ( ACC_INT1_GPIO_Port , ACC_INT1_Pin ) == GPIO_PIN_SET )
 80006ba:	23a0      	movs	r3, #160	; 0xa0
 80006bc:	05db      	lsls	r3, r3, #23
 80006be:	2101      	movs	r1, #1
 80006c0:	0018      	movs	r0, r3
 80006c2:	f001 f82b 	bl	800171c <HAL_GPIO_ReadPin>
 80006c6:	0003      	movs	r3, r0
 80006c8:	2b01      	cmp	r3, #1
 80006ca:	d106      	bne.n	80006da <main+0xae>
	  {
		  test = true ;
 80006cc:	4b19      	ldr	r3, [pc, #100]	; (8000734 <main+0x108>)
 80006ce:	2201      	movs	r2, #1
 80006d0:	701a      	strb	r2, [r3, #0]
		  send_debug_logs ( "" ) ;
 80006d2:	4b19      	ldr	r3, [pc, #100]	; (8000738 <main+0x10c>)
 80006d4:	0018      	movs	r0, r3
 80006d6:	f000 fa89 	bl	8000bec <send_debug_logs>
  while ( !test )
 80006da:	4b16      	ldr	r3, [pc, #88]	; (8000734 <main+0x108>)
 80006dc:	781b      	ldrb	r3, [r3, #0]
 80006de:	2201      	movs	r2, #1
 80006e0:	4053      	eors	r3, r2
 80006e2:	b2db      	uxtb	r3, r3
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d1e8      	bne.n	80006ba <main+0x8e>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  my_gnss_on () ;
 80006e8:	f000 fb22 	bl	8000d30 <my_gnss_on>
  while (1)
  {
	  HAL_UART_Receive	( HUART_GNSS, &c , 1 , UART_TIMEOUT ) ;
 80006ec:	23fa      	movs	r3, #250	; 0xfa
 80006ee:	009b      	lsls	r3, r3, #2
 80006f0:	4912      	ldr	r1, [pc, #72]	; (800073c <main+0x110>)
 80006f2:	4813      	ldr	r0, [pc, #76]	; (8000740 <main+0x114>)
 80006f4:	2201      	movs	r2, #1
 80006f6:	f003 f967 	bl	80039c8 <HAL_UART_Receive>
	  HAL_UART_Transmit ( HUART_DBG, &c , 1 , UART_TIMEOUT ) ;
 80006fa:	23fa      	movs	r3, #250	; 0xfa
 80006fc:	009b      	lsls	r3, r3, #2
 80006fe:	490f      	ldr	r1, [pc, #60]	; (800073c <main+0x110>)
 8000700:	4803      	ldr	r0, [pc, #12]	; (8000710 <main+0xe4>)
 8000702:	2201      	movs	r2, #1
 8000704:	f003 f8c4 	bl	8003890 <HAL_UART_Transmit>
	  HAL_UART_Receive	( HUART_GNSS, &c , 1 , UART_TIMEOUT ) ;
 8000708:	e7f0      	b.n	80006ec <main+0xc0>
 800070a:	46c0      	nop			; (mov r8, r8)
 800070c:	20000000 	.word	0x20000000
 8000710:	200000dc 	.word	0x200000dc
 8000714:	20000090 	.word	0x20000090
 8000718:	08004f30 	.word	0x08004f30
 800071c:	2000029c 	.word	0x2000029c
 8000720:	08000c4d 	.word	0x08000c4d
 8000724:	08000cb7 	.word	0x08000cb7
 8000728:	2000002c 	.word	0x2000002c
 800072c:	08004f48 	.word	0x08004f48
 8000730:	08004f68 	.word	0x08004f68
 8000734:	20000299 	.word	0x20000299
 8000738:	08004f8c 	.word	0x08004f8c
 800073c:	20000298 	.word	0x20000298
 8000740:	20000204 	.word	0x20000204

08000744 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000744:	b590      	push	{r4, r7, lr}
 8000746:	b095      	sub	sp, #84	; 0x54
 8000748:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800074a:	2414      	movs	r4, #20
 800074c:	193b      	adds	r3, r7, r4
 800074e:	0018      	movs	r0, r3
 8000750:	233c      	movs	r3, #60	; 0x3c
 8000752:	001a      	movs	r2, r3
 8000754:	2100      	movs	r1, #0
 8000756:	f004 fb9b 	bl	8004e90 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800075a:	1d3b      	adds	r3, r7, #4
 800075c:	0018      	movs	r0, r3
 800075e:	2310      	movs	r3, #16
 8000760:	001a      	movs	r2, r3
 8000762:	2100      	movs	r1, #0
 8000764:	f004 fb94 	bl	8004e90 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000768:	2380      	movs	r3, #128	; 0x80
 800076a:	009b      	lsls	r3, r3, #2
 800076c:	0018      	movs	r0, r3
 800076e:	f001 f84d 	bl	800180c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000772:	193b      	adds	r3, r7, r4
 8000774:	2202      	movs	r2, #2
 8000776:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000778:	193b      	adds	r3, r7, r4
 800077a:	2280      	movs	r2, #128	; 0x80
 800077c:	0052      	lsls	r2, r2, #1
 800077e:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000780:	193b      	adds	r3, r7, r4
 8000782:	2200      	movs	r2, #0
 8000784:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000786:	193b      	adds	r3, r7, r4
 8000788:	2240      	movs	r2, #64	; 0x40
 800078a:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800078c:	193b      	adds	r3, r7, r4
 800078e:	2200      	movs	r2, #0
 8000790:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000792:	193b      	adds	r3, r7, r4
 8000794:	0018      	movs	r0, r3
 8000796:	f001 f885 	bl	80018a4 <HAL_RCC_OscConfig>
 800079a:	1e03      	subs	r3, r0, #0
 800079c:	d001      	beq.n	80007a2 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 800079e:	f000 fadf 	bl	8000d60 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007a2:	1d3b      	adds	r3, r7, #4
 80007a4:	2207      	movs	r2, #7
 80007a6:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80007a8:	1d3b      	adds	r3, r7, #4
 80007aa:	2200      	movs	r2, #0
 80007ac:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007ae:	1d3b      	adds	r3, r7, #4
 80007b0:	2200      	movs	r2, #0
 80007b2:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007b4:	1d3b      	adds	r3, r7, #4
 80007b6:	2200      	movs	r2, #0
 80007b8:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80007ba:	1d3b      	adds	r3, r7, #4
 80007bc:	2100      	movs	r1, #0
 80007be:	0018      	movs	r0, r3
 80007c0:	f001 fbd0 	bl	8001f64 <HAL_RCC_ClockConfig>
 80007c4:	1e03      	subs	r3, r0, #0
 80007c6:	d001      	beq.n	80007cc <SystemClock_Config+0x88>
  {
    Error_Handler();
 80007c8:	f000 faca 	bl	8000d60 <Error_Handler>
  }
}
 80007cc:	46c0      	nop			; (mov r8, r8)
 80007ce:	46bd      	mov	sp, r7
 80007d0:	b015      	add	sp, #84	; 0x54
 80007d2:	bd90      	pop	{r4, r7, pc}

080007d4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80007d8:	4b1b      	ldr	r3, [pc, #108]	; (8000848 <MX_SPI1_Init+0x74>)
 80007da:	4a1c      	ldr	r2, [pc, #112]	; (800084c <MX_SPI1_Init+0x78>)
 80007dc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80007de:	4b1a      	ldr	r3, [pc, #104]	; (8000848 <MX_SPI1_Init+0x74>)
 80007e0:	2282      	movs	r2, #130	; 0x82
 80007e2:	0052      	lsls	r2, r2, #1
 80007e4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80007e6:	4b18      	ldr	r3, [pc, #96]	; (8000848 <MX_SPI1_Init+0x74>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80007ec:	4b16      	ldr	r3, [pc, #88]	; (8000848 <MX_SPI1_Init+0x74>)
 80007ee:	22e0      	movs	r2, #224	; 0xe0
 80007f0:	00d2      	lsls	r2, r2, #3
 80007f2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80007f4:	4b14      	ldr	r3, [pc, #80]	; (8000848 <MX_SPI1_Init+0x74>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80007fa:	4b13      	ldr	r3, [pc, #76]	; (8000848 <MX_SPI1_Init+0x74>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000800:	4b11      	ldr	r3, [pc, #68]	; (8000848 <MX_SPI1_Init+0x74>)
 8000802:	2280      	movs	r2, #128	; 0x80
 8000804:	0092      	lsls	r2, r2, #2
 8000806:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000808:	4b0f      	ldr	r3, [pc, #60]	; (8000848 <MX_SPI1_Init+0x74>)
 800080a:	2210      	movs	r2, #16
 800080c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800080e:	4b0e      	ldr	r3, [pc, #56]	; (8000848 <MX_SPI1_Init+0x74>)
 8000810:	2200      	movs	r2, #0
 8000812:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000814:	4b0c      	ldr	r3, [pc, #48]	; (8000848 <MX_SPI1_Init+0x74>)
 8000816:	2200      	movs	r2, #0
 8000818:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800081a:	4b0b      	ldr	r3, [pc, #44]	; (8000848 <MX_SPI1_Init+0x74>)
 800081c:	2200      	movs	r2, #0
 800081e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000820:	4b09      	ldr	r3, [pc, #36]	; (8000848 <MX_SPI1_Init+0x74>)
 8000822:	2207      	movs	r2, #7
 8000824:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000826:	4b08      	ldr	r3, [pc, #32]	; (8000848 <MX_SPI1_Init+0x74>)
 8000828:	2200      	movs	r2, #0
 800082a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800082c:	4b06      	ldr	r3, [pc, #24]	; (8000848 <MX_SPI1_Init+0x74>)
 800082e:	2208      	movs	r2, #8
 8000830:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000832:	4b05      	ldr	r3, [pc, #20]	; (8000848 <MX_SPI1_Init+0x74>)
 8000834:	0018      	movs	r0, r3
 8000836:	f001 ff7b 	bl	8002730 <HAL_SPI_Init>
 800083a:	1e03      	subs	r3, r0, #0
 800083c:	d001      	beq.n	8000842 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800083e:	f000 fa8f 	bl	8000d60 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000842:	46c0      	nop			; (mov r8, r8)
 8000844:	46bd      	mov	sp, r7
 8000846:	bd80      	pop	{r7, pc}
 8000848:	2000002c 	.word	0x2000002c
 800084c:	40013000 	.word	0x40013000

08000850 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b084      	sub	sp, #16
 8000854:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000856:	1d3b      	adds	r3, r7, #4
 8000858:	0018      	movs	r0, r3
 800085a:	230c      	movs	r3, #12
 800085c:	001a      	movs	r2, r3
 800085e:	2100      	movs	r1, #0
 8000860:	f004 fb16 	bl	8004e90 <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000864:	4b15      	ldr	r3, [pc, #84]	; (80008bc <MX_TIM6_Init+0x6c>)
 8000866:	4a16      	ldr	r2, [pc, #88]	; (80008c0 <MX_TIM6_Init+0x70>)
 8000868:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 16000-1;
 800086a:	4b14      	ldr	r3, [pc, #80]	; (80008bc <MX_TIM6_Init+0x6c>)
 800086c:	4a15      	ldr	r2, [pc, #84]	; (80008c4 <MX_TIM6_Init+0x74>)
 800086e:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000870:	4b12      	ldr	r3, [pc, #72]	; (80008bc <MX_TIM6_Init+0x6c>)
 8000872:	2200      	movs	r2, #0
 8000874:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000-1;
 8000876:	4b11      	ldr	r3, [pc, #68]	; (80008bc <MX_TIM6_Init+0x6c>)
 8000878:	4a13      	ldr	r2, [pc, #76]	; (80008c8 <MX_TIM6_Init+0x78>)
 800087a:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800087c:	4b0f      	ldr	r3, [pc, #60]	; (80008bc <MX_TIM6_Init+0x6c>)
 800087e:	2200      	movs	r2, #0
 8000880:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000882:	4b0e      	ldr	r3, [pc, #56]	; (80008bc <MX_TIM6_Init+0x6c>)
 8000884:	0018      	movs	r0, r3
 8000886:	f002 fe55 	bl	8003534 <HAL_TIM_Base_Init>
 800088a:	1e03      	subs	r3, r0, #0
 800088c:	d001      	beq.n	8000892 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 800088e:	f000 fa67 	bl	8000d60 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000892:	1d3b      	adds	r3, r7, #4
 8000894:	2200      	movs	r2, #0
 8000896:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000898:	1d3b      	adds	r3, r7, #4
 800089a:	2200      	movs	r2, #0
 800089c:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800089e:	1d3a      	adds	r2, r7, #4
 80008a0:	4b06      	ldr	r3, [pc, #24]	; (80008bc <MX_TIM6_Init+0x6c>)
 80008a2:	0011      	movs	r1, r2
 80008a4:	0018      	movs	r0, r3
 80008a6:	f002 ff27 	bl	80036f8 <HAL_TIMEx_MasterConfigSynchronization>
 80008aa:	1e03      	subs	r3, r0, #0
 80008ac:	d001      	beq.n	80008b2 <MX_TIM6_Init+0x62>
  {
    Error_Handler();
 80008ae:	f000 fa57 	bl	8000d60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80008b2:	46c0      	nop			; (mov r8, r8)
 80008b4:	46bd      	mov	sp, r7
 80008b6:	b004      	add	sp, #16
 80008b8:	bd80      	pop	{r7, pc}
 80008ba:	46c0      	nop			; (mov r8, r8)
 80008bc:	20000090 	.word	0x20000090
 80008c0:	40001000 	.word	0x40001000
 80008c4:	00003e7f 	.word	0x00003e7f
 80008c8:	000003e7 	.word	0x000003e7

080008cc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80008d0:	4b23      	ldr	r3, [pc, #140]	; (8000960 <MX_USART2_UART_Init+0x94>)
 80008d2:	4a24      	ldr	r2, [pc, #144]	; (8000964 <MX_USART2_UART_Init+0x98>)
 80008d4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80008d6:	4b22      	ldr	r3, [pc, #136]	; (8000960 <MX_USART2_UART_Init+0x94>)
 80008d8:	22e1      	movs	r2, #225	; 0xe1
 80008da:	0252      	lsls	r2, r2, #9
 80008dc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80008de:	4b20      	ldr	r3, [pc, #128]	; (8000960 <MX_USART2_UART_Init+0x94>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80008e4:	4b1e      	ldr	r3, [pc, #120]	; (8000960 <MX_USART2_UART_Init+0x94>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80008ea:	4b1d      	ldr	r3, [pc, #116]	; (8000960 <MX_USART2_UART_Init+0x94>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80008f0:	4b1b      	ldr	r3, [pc, #108]	; (8000960 <MX_USART2_UART_Init+0x94>)
 80008f2:	220c      	movs	r2, #12
 80008f4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008f6:	4b1a      	ldr	r3, [pc, #104]	; (8000960 <MX_USART2_UART_Init+0x94>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80008fc:	4b18      	ldr	r3, [pc, #96]	; (8000960 <MX_USART2_UART_Init+0x94>)
 80008fe:	2200      	movs	r2, #0
 8000900:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000902:	4b17      	ldr	r3, [pc, #92]	; (8000960 <MX_USART2_UART_Init+0x94>)
 8000904:	2200      	movs	r2, #0
 8000906:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000908:	4b15      	ldr	r3, [pc, #84]	; (8000960 <MX_USART2_UART_Init+0x94>)
 800090a:	2200      	movs	r2, #0
 800090c:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800090e:	4b14      	ldr	r3, [pc, #80]	; (8000960 <MX_USART2_UART_Init+0x94>)
 8000910:	2200      	movs	r2, #0
 8000912:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000914:	4b12      	ldr	r3, [pc, #72]	; (8000960 <MX_USART2_UART_Init+0x94>)
 8000916:	0018      	movs	r0, r3
 8000918:	f002 ff64 	bl	80037e4 <HAL_UART_Init>
 800091c:	1e03      	subs	r3, r0, #0
 800091e:	d001      	beq.n	8000924 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000920:	f000 fa1e 	bl	8000d60 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000924:	4b0e      	ldr	r3, [pc, #56]	; (8000960 <MX_USART2_UART_Init+0x94>)
 8000926:	2100      	movs	r1, #0
 8000928:	0018      	movs	r0, r3
 800092a:	f003 fe89 	bl	8004640 <HAL_UARTEx_SetTxFifoThreshold>
 800092e:	1e03      	subs	r3, r0, #0
 8000930:	d001      	beq.n	8000936 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000932:	f000 fa15 	bl	8000d60 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000936:	4b0a      	ldr	r3, [pc, #40]	; (8000960 <MX_USART2_UART_Init+0x94>)
 8000938:	2100      	movs	r1, #0
 800093a:	0018      	movs	r0, r3
 800093c:	f003 fec0 	bl	80046c0 <HAL_UARTEx_SetRxFifoThreshold>
 8000940:	1e03      	subs	r3, r0, #0
 8000942:	d001      	beq.n	8000948 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000944:	f000 fa0c 	bl	8000d60 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000948:	4b05      	ldr	r3, [pc, #20]	; (8000960 <MX_USART2_UART_Init+0x94>)
 800094a:	0018      	movs	r0, r3
 800094c:	f003 fe3e 	bl	80045cc <HAL_UARTEx_DisableFifoMode>
 8000950:	1e03      	subs	r3, r0, #0
 8000952:	d001      	beq.n	8000958 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000954:	f000 fa04 	bl	8000d60 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000958:	46c0      	nop			; (mov r8, r8)
 800095a:	46bd      	mov	sp, r7
 800095c:	bd80      	pop	{r7, pc}
 800095e:	46c0      	nop			; (mov r8, r8)
 8000960:	200000dc 	.word	0x200000dc
 8000964:	40004400 	.word	0x40004400

08000968 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800096c:	4b23      	ldr	r3, [pc, #140]	; (80009fc <MX_USART3_UART_Init+0x94>)
 800096e:	4a24      	ldr	r2, [pc, #144]	; (8000a00 <MX_USART3_UART_Init+0x98>)
 8000970:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8000972:	4b22      	ldr	r3, [pc, #136]	; (80009fc <MX_USART3_UART_Init+0x94>)
 8000974:	2296      	movs	r2, #150	; 0x96
 8000976:	0192      	lsls	r2, r2, #6
 8000978:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800097a:	4b20      	ldr	r3, [pc, #128]	; (80009fc <MX_USART3_UART_Init+0x94>)
 800097c:	2200      	movs	r2, #0
 800097e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000980:	4b1e      	ldr	r3, [pc, #120]	; (80009fc <MX_USART3_UART_Init+0x94>)
 8000982:	2200      	movs	r2, #0
 8000984:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000986:	4b1d      	ldr	r3, [pc, #116]	; (80009fc <MX_USART3_UART_Init+0x94>)
 8000988:	2200      	movs	r2, #0
 800098a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800098c:	4b1b      	ldr	r3, [pc, #108]	; (80009fc <MX_USART3_UART_Init+0x94>)
 800098e:	220c      	movs	r2, #12
 8000990:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000992:	4b1a      	ldr	r3, [pc, #104]	; (80009fc <MX_USART3_UART_Init+0x94>)
 8000994:	2200      	movs	r2, #0
 8000996:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000998:	4b18      	ldr	r3, [pc, #96]	; (80009fc <MX_USART3_UART_Init+0x94>)
 800099a:	2200      	movs	r2, #0
 800099c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800099e:	4b17      	ldr	r3, [pc, #92]	; (80009fc <MX_USART3_UART_Init+0x94>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80009a4:	4b15      	ldr	r3, [pc, #84]	; (80009fc <MX_USART3_UART_Init+0x94>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009aa:	4b14      	ldr	r3, [pc, #80]	; (80009fc <MX_USART3_UART_Init+0x94>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80009b0:	4b12      	ldr	r3, [pc, #72]	; (80009fc <MX_USART3_UART_Init+0x94>)
 80009b2:	0018      	movs	r0, r3
 80009b4:	f002 ff16 	bl	80037e4 <HAL_UART_Init>
 80009b8:	1e03      	subs	r3, r0, #0
 80009ba:	d001      	beq.n	80009c0 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80009bc:	f000 f9d0 	bl	8000d60 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009c0:	4b0e      	ldr	r3, [pc, #56]	; (80009fc <MX_USART3_UART_Init+0x94>)
 80009c2:	2100      	movs	r1, #0
 80009c4:	0018      	movs	r0, r3
 80009c6:	f003 fe3b 	bl	8004640 <HAL_UARTEx_SetTxFifoThreshold>
 80009ca:	1e03      	subs	r3, r0, #0
 80009cc:	d001      	beq.n	80009d2 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80009ce:	f000 f9c7 	bl	8000d60 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009d2:	4b0a      	ldr	r3, [pc, #40]	; (80009fc <MX_USART3_UART_Init+0x94>)
 80009d4:	2100      	movs	r1, #0
 80009d6:	0018      	movs	r0, r3
 80009d8:	f003 fe72 	bl	80046c0 <HAL_UARTEx_SetRxFifoThreshold>
 80009dc:	1e03      	subs	r3, r0, #0
 80009de:	d001      	beq.n	80009e4 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80009e0:	f000 f9be 	bl	8000d60 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80009e4:	4b05      	ldr	r3, [pc, #20]	; (80009fc <MX_USART3_UART_Init+0x94>)
 80009e6:	0018      	movs	r0, r3
 80009e8:	f003 fdf0 	bl	80045cc <HAL_UARTEx_DisableFifoMode>
 80009ec:	1e03      	subs	r3, r0, #0
 80009ee:	d001      	beq.n	80009f4 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80009f0:	f000 f9b6 	bl	8000d60 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80009f4:	46c0      	nop			; (mov r8, r8)
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bd80      	pop	{r7, pc}
 80009fa:	46c0      	nop			; (mov r8, r8)
 80009fc:	20000170 	.word	0x20000170
 8000a00:	40004800 	.word	0x40004800

08000a04 <MX_USART5_UART_Init>:
  * @brief USART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART5_UART_Init(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	af00      	add	r7, sp, #0
  /* USER CODE END USART5_Init 0 */

  /* USER CODE BEGIN USART5_Init 1 */

  /* USER CODE END USART5_Init 1 */
  huart5.Instance = USART5;
 8000a08:	4b16      	ldr	r3, [pc, #88]	; (8000a64 <MX_USART5_UART_Init+0x60>)
 8000a0a:	4a17      	ldr	r2, [pc, #92]	; (8000a68 <MX_USART5_UART_Init+0x64>)
 8000a0c:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 9600;
 8000a0e:	4b15      	ldr	r3, [pc, #84]	; (8000a64 <MX_USART5_UART_Init+0x60>)
 8000a10:	2296      	movs	r2, #150	; 0x96
 8000a12:	0192      	lsls	r2, r2, #6
 8000a14:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8000a16:	4b13      	ldr	r3, [pc, #76]	; (8000a64 <MX_USART5_UART_Init+0x60>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8000a1c:	4b11      	ldr	r3, [pc, #68]	; (8000a64 <MX_USART5_UART_Init+0x60>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8000a22:	4b10      	ldr	r3, [pc, #64]	; (8000a64 <MX_USART5_UART_Init+0x60>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8000a28:	4b0e      	ldr	r3, [pc, #56]	; (8000a64 <MX_USART5_UART_Init+0x60>)
 8000a2a:	220c      	movs	r2, #12
 8000a2c:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a2e:	4b0d      	ldr	r3, [pc, #52]	; (8000a64 <MX_USART5_UART_Init+0x60>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a34:	4b0b      	ldr	r3, [pc, #44]	; (8000a64 <MX_USART5_UART_Init+0x60>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a3a:	4b0a      	ldr	r3, [pc, #40]	; (8000a64 <MX_USART5_UART_Init+0x60>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	621a      	str	r2, [r3, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a40:	4b08      	ldr	r3, [pc, #32]	; (8000a64 <MX_USART5_UART_Init+0x60>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	625a      	str	r2, [r3, #36]	; 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a46:	4b07      	ldr	r3, [pc, #28]	; (8000a64 <MX_USART5_UART_Init+0x60>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8000a4c:	4b05      	ldr	r3, [pc, #20]	; (8000a64 <MX_USART5_UART_Init+0x60>)
 8000a4e:	0018      	movs	r0, r3
 8000a50:	f002 fec8 	bl	80037e4 <HAL_UART_Init>
 8000a54:	1e03      	subs	r3, r0, #0
 8000a56:	d001      	beq.n	8000a5c <MX_USART5_UART_Init+0x58>
  {
    Error_Handler();
 8000a58:	f000 f982 	bl	8000d60 <Error_Handler>
  }
  /* USER CODE BEGIN USART5_Init 2 */

  /* USER CODE END USART5_Init 2 */

}
 8000a5c:	46c0      	nop			; (mov r8, r8)
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	bd80      	pop	{r7, pc}
 8000a62:	46c0      	nop			; (mov r8, r8)
 8000a64:	20000204 	.word	0x20000204
 8000a68:	40005000 	.word	0x40005000

08000a6c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a6c:	b590      	push	{r4, r7, lr}
 8000a6e:	b08b      	sub	sp, #44	; 0x2c
 8000a70:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a72:	2414      	movs	r4, #20
 8000a74:	193b      	adds	r3, r7, r4
 8000a76:	0018      	movs	r0, r3
 8000a78:	2314      	movs	r3, #20
 8000a7a:	001a      	movs	r2, r3
 8000a7c:	2100      	movs	r1, #0
 8000a7e:	f004 fa07 	bl	8004e90 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a82:	4b57      	ldr	r3, [pc, #348]	; (8000be0 <MX_GPIO_Init+0x174>)
 8000a84:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000a86:	4b56      	ldr	r3, [pc, #344]	; (8000be0 <MX_GPIO_Init+0x174>)
 8000a88:	2104      	movs	r1, #4
 8000a8a:	430a      	orrs	r2, r1
 8000a8c:	635a      	str	r2, [r3, #52]	; 0x34
 8000a8e:	4b54      	ldr	r3, [pc, #336]	; (8000be0 <MX_GPIO_Init+0x174>)
 8000a90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a92:	2204      	movs	r2, #4
 8000a94:	4013      	ands	r3, r2
 8000a96:	613b      	str	r3, [r7, #16]
 8000a98:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000a9a:	4b51      	ldr	r3, [pc, #324]	; (8000be0 <MX_GPIO_Init+0x174>)
 8000a9c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000a9e:	4b50      	ldr	r3, [pc, #320]	; (8000be0 <MX_GPIO_Init+0x174>)
 8000aa0:	2120      	movs	r1, #32
 8000aa2:	430a      	orrs	r2, r1
 8000aa4:	635a      	str	r2, [r3, #52]	; 0x34
 8000aa6:	4b4e      	ldr	r3, [pc, #312]	; (8000be0 <MX_GPIO_Init+0x174>)
 8000aa8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000aaa:	2220      	movs	r2, #32
 8000aac:	4013      	ands	r3, r2
 8000aae:	60fb      	str	r3, [r7, #12]
 8000ab0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ab2:	4b4b      	ldr	r3, [pc, #300]	; (8000be0 <MX_GPIO_Init+0x174>)
 8000ab4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000ab6:	4b4a      	ldr	r3, [pc, #296]	; (8000be0 <MX_GPIO_Init+0x174>)
 8000ab8:	2101      	movs	r1, #1
 8000aba:	430a      	orrs	r2, r1
 8000abc:	635a      	str	r2, [r3, #52]	; 0x34
 8000abe:	4b48      	ldr	r3, [pc, #288]	; (8000be0 <MX_GPIO_Init+0x174>)
 8000ac0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ac2:	2201      	movs	r2, #1
 8000ac4:	4013      	ands	r3, r2
 8000ac6:	60bb      	str	r3, [r7, #8]
 8000ac8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aca:	4b45      	ldr	r3, [pc, #276]	; (8000be0 <MX_GPIO_Init+0x174>)
 8000acc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000ace:	4b44      	ldr	r3, [pc, #272]	; (8000be0 <MX_GPIO_Init+0x174>)
 8000ad0:	2102      	movs	r1, #2
 8000ad2:	430a      	orrs	r2, r1
 8000ad4:	635a      	str	r2, [r3, #52]	; 0x34
 8000ad6:	4b42      	ldr	r3, [pc, #264]	; (8000be0 <MX_GPIO_Init+0x174>)
 8000ad8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ada:	2202      	movs	r2, #2
 8000adc:	4013      	ands	r3, r2
 8000ade:	607b      	str	r3, [r7, #4]
 8000ae0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ae2:	4b3f      	ldr	r3, [pc, #252]	; (8000be0 <MX_GPIO_Init+0x174>)
 8000ae4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000ae6:	4b3e      	ldr	r3, [pc, #248]	; (8000be0 <MX_GPIO_Init+0x174>)
 8000ae8:	2108      	movs	r1, #8
 8000aea:	430a      	orrs	r2, r1
 8000aec:	635a      	str	r2, [r3, #52]	; 0x34
 8000aee:	4b3c      	ldr	r3, [pc, #240]	; (8000be0 <MX_GPIO_Init+0x174>)
 8000af0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000af2:	2208      	movs	r2, #8
 8000af4:	4013      	ands	r3, r2
 8000af6:	603b      	str	r3, [r7, #0]
 8000af8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ACC_CS_Pin|LDG_Pin, GPIO_PIN_RESET);
 8000afa:	23a0      	movs	r3, #160	; 0xa0
 8000afc:	05db      	lsls	r3, r3, #23
 8000afe:	2200      	movs	r2, #0
 8000b00:	2130      	movs	r1, #48	; 0x30
 8000b02:	0018      	movs	r0, r3
 8000b04:	f000 fe27 	bl	8001756 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ASTRO_WKUP_Pin|ASTRO_RST_Pin|GNSS_RST_Pin|GNSS_PWR_SW_Pin, GPIO_PIN_RESET);
 8000b08:	4936      	ldr	r1, [pc, #216]	; (8000be4 <MX_GPIO_Init+0x178>)
 8000b0a:	4b37      	ldr	r3, [pc, #220]	; (8000be8 <MX_GPIO_Init+0x17c>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	0018      	movs	r0, r3
 8000b10:	f000 fe21 	bl	8001756 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ACC_INT1_Pin ACC_INT2_Pin */
  GPIO_InitStruct.Pin = ACC_INT1_Pin|ACC_INT2_Pin;
 8000b14:	193b      	adds	r3, r7, r4
 8000b16:	2203      	movs	r2, #3
 8000b18:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b1a:	193b      	adds	r3, r7, r4
 8000b1c:	2288      	movs	r2, #136	; 0x88
 8000b1e:	0352      	lsls	r2, r2, #13
 8000b20:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b22:	193b      	adds	r3, r7, r4
 8000b24:	2200      	movs	r2, #0
 8000b26:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b28:	193a      	adds	r2, r7, r4
 8000b2a:	23a0      	movs	r3, #160	; 0xa0
 8000b2c:	05db      	lsls	r3, r3, #23
 8000b2e:	0011      	movs	r1, r2
 8000b30:	0018      	movs	r0, r3
 8000b32:	f000 fc87 	bl	8001444 <HAL_GPIO_Init>

  /*Configure GPIO pins : ACC_CS_Pin LDG_Pin */
  GPIO_InitStruct.Pin = ACC_CS_Pin|LDG_Pin;
 8000b36:	193b      	adds	r3, r7, r4
 8000b38:	2230      	movs	r2, #48	; 0x30
 8000b3a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b3c:	193b      	adds	r3, r7, r4
 8000b3e:	2201      	movs	r2, #1
 8000b40:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b42:	193b      	adds	r3, r7, r4
 8000b44:	2200      	movs	r2, #0
 8000b46:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b48:	193b      	adds	r3, r7, r4
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b4e:	193a      	adds	r2, r7, r4
 8000b50:	23a0      	movs	r3, #160	; 0xa0
 8000b52:	05db      	lsls	r3, r3, #23
 8000b54:	0011      	movs	r1, r2
 8000b56:	0018      	movs	r0, r3
 8000b58:	f000 fc74 	bl	8001444 <HAL_GPIO_Init>

  /*Configure GPIO pins : ASTRO_WKUP_Pin ASTRO_RST_Pin GNSS_RST_Pin GNSS_PWR_SW_Pin */
  GPIO_InitStruct.Pin = ASTRO_WKUP_Pin|ASTRO_RST_Pin|GNSS_RST_Pin|GNSS_PWR_SW_Pin;
 8000b5c:	193b      	adds	r3, r7, r4
 8000b5e:	4a21      	ldr	r2, [pc, #132]	; (8000be4 <MX_GPIO_Init+0x178>)
 8000b60:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b62:	193b      	adds	r3, r7, r4
 8000b64:	2201      	movs	r2, #1
 8000b66:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b68:	193b      	adds	r3, r7, r4
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b6e:	193b      	adds	r3, r7, r4
 8000b70:	2200      	movs	r2, #0
 8000b72:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b74:	193b      	adds	r3, r7, r4
 8000b76:	4a1c      	ldr	r2, [pc, #112]	; (8000be8 <MX_GPIO_Init+0x17c>)
 8000b78:	0019      	movs	r1, r3
 8000b7a:	0010      	movs	r0, r2
 8000b7c:	f000 fc62 	bl	8001444 <HAL_GPIO_Init>

  /*Configure GPIO pins : ASTRO_EVT_Pin GNSS_3DFIX_Pin GNSS_JAM_Pin */
  GPIO_InitStruct.Pin = ASTRO_EVT_Pin|GNSS_3DFIX_Pin|GNSS_JAM_Pin;
 8000b80:	0021      	movs	r1, r4
 8000b82:	187b      	adds	r3, r7, r1
 8000b84:	2264      	movs	r2, #100	; 0x64
 8000b86:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b88:	187b      	adds	r3, r7, r1
 8000b8a:	2288      	movs	r2, #136	; 0x88
 8000b8c:	0352      	lsls	r2, r2, #13
 8000b8e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b90:	187b      	adds	r3, r7, r1
 8000b92:	2200      	movs	r2, #0
 8000b94:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b96:	000c      	movs	r4, r1
 8000b98:	187b      	adds	r3, r7, r1
 8000b9a:	4a13      	ldr	r2, [pc, #76]	; (8000be8 <MX_GPIO_Init+0x17c>)
 8000b9c:	0019      	movs	r1, r3
 8000b9e:	0010      	movs	r0, r2
 8000ba0:	f000 fc50 	bl	8001444 <HAL_GPIO_Init>

  /*Configure GPIO pin : GNSS_GEOF_Pin */
  GPIO_InitStruct.Pin = GNSS_GEOF_Pin;
 8000ba4:	0021      	movs	r1, r4
 8000ba6:	187b      	adds	r3, r7, r1
 8000ba8:	2280      	movs	r2, #128	; 0x80
 8000baa:	00d2      	lsls	r2, r2, #3
 8000bac:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bae:	187b      	adds	r3, r7, r1
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb4:	187b      	adds	r3, r7, r1
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GNSS_GEOF_GPIO_Port, &GPIO_InitStruct);
 8000bba:	187b      	adds	r3, r7, r1
 8000bbc:	4a0a      	ldr	r2, [pc, #40]	; (8000be8 <MX_GPIO_Init+0x17c>)
 8000bbe:	0019      	movs	r1, r3
 8000bc0:	0010      	movs	r0, r2
 8000bc2:	f000 fc3f 	bl	8001444 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 3, 0);
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	2103      	movs	r1, #3
 8000bca:	2005      	movs	r0, #5
 8000bcc:	f000 fc08 	bl	80013e0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 8000bd0:	2005      	movs	r0, #5
 8000bd2:	f000 fc1a 	bl	800140a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000bd6:	46c0      	nop			; (mov r8, r8)
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	b00b      	add	sp, #44	; 0x2c
 8000bdc:	bd90      	pop	{r4, r7, pc}
 8000bde:	46c0      	nop			; (mov r8, r8)
 8000be0:	40021000 	.word	0x40021000
 8000be4:	0000a003 	.word	0x0000a003
 8000be8:	50000400 	.word	0x50000400

08000bec <send_debug_logs>:
/* USER CODE BEGIN 4 */


// FUNCTIONS REQUIRED BY astronode-stm32-example-asset library
void send_debug_logs ( char* p_tx_buffer )
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b084      	sub	sp, #16
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
    uint32_t length = strlen ( p_tx_buffer ) ;
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	0018      	movs	r0, r3
 8000bf8:	f7ff fa84 	bl	8000104 <strlen>
 8000bfc:	0003      	movs	r3, r0
 8000bfe:	60fb      	str	r3, [r7, #12]

    if ( length > UART_TX_MAX_BUFF_SIZE )
 8000c00:	68fb      	ldr	r3, [r7, #12]
 8000c02:	2bfa      	cmp	r3, #250	; 0xfa
 8000c04:	d908      	bls.n	8000c18 <send_debug_logs+0x2c>
    {
        HAL_UART_Transmit ( HUART_DBG , ( uint8_t* ) "[ERROR] UART buffer reached max length.\n" , 42 , UART_TIMEOUT ) ;
 8000c06:	23fa      	movs	r3, #250	; 0xfa
 8000c08:	009b      	lsls	r3, r3, #2
 8000c0a:	490d      	ldr	r1, [pc, #52]	; (8000c40 <send_debug_logs+0x54>)
 8000c0c:	480d      	ldr	r0, [pc, #52]	; (8000c44 <send_debug_logs+0x58>)
 8000c0e:	222a      	movs	r2, #42	; 0x2a
 8000c10:	f002 fe3e 	bl	8003890 <HAL_UART_Transmit>
        length = UART_TX_MAX_BUFF_SIZE;
 8000c14:	23fa      	movs	r3, #250	; 0xfa
 8000c16:	60fb      	str	r3, [r7, #12]
    }

    HAL_UART_Transmit ( HUART_DBG , ( uint8_t* ) p_tx_buffer , length , UART_TIMEOUT ) ;
 8000c18:	68fb      	ldr	r3, [r7, #12]
 8000c1a:	b29a      	uxth	r2, r3
 8000c1c:	23fa      	movs	r3, #250	; 0xfa
 8000c1e:	009b      	lsls	r3, r3, #2
 8000c20:	6879      	ldr	r1, [r7, #4]
 8000c22:	4808      	ldr	r0, [pc, #32]	; (8000c44 <send_debug_logs+0x58>)
 8000c24:	f002 fe34 	bl	8003890 <HAL_UART_Transmit>
    HAL_UART_Transmit ( HUART_DBG , ( uint8_t* ) "\n" , 1 , UART_TIMEOUT ) ;
 8000c28:	23fa      	movs	r3, #250	; 0xfa
 8000c2a:	009b      	lsls	r3, r3, #2
 8000c2c:	4906      	ldr	r1, [pc, #24]	; (8000c48 <send_debug_logs+0x5c>)
 8000c2e:	4805      	ldr	r0, [pc, #20]	; (8000c44 <send_debug_logs+0x58>)
 8000c30:	2201      	movs	r2, #1
 8000c32:	f002 fe2d 	bl	8003890 <HAL_UART_Transmit>
}
 8000c36:	46c0      	nop			; (mov r8, r8)
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	b004      	add	sp, #16
 8000c3c:	bd80      	pop	{r7, pc}
 8000c3e:	46c0      	nop			; (mov r8, r8)
 8000c40:	08004f90 	.word	0x08004f90
 8000c44:	200000dc 	.word	0x200000dc
 8000c48:	08004fbc 	.word	0x08004fbc

08000c4c <my_lis2dw12_platform_write>:

// ACC LL Function

int32_t my_lis2dw12_platform_write ( void *handle , uint8_t reg , const uint8_t *bufp , uint16_t len )
{
 8000c4c:	b5b0      	push	{r4, r5, r7, lr}
 8000c4e:	b084      	sub	sp, #16
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	60f8      	str	r0, [r7, #12]
 8000c54:	0008      	movs	r0, r1
 8000c56:	607a      	str	r2, [r7, #4]
 8000c58:	0019      	movs	r1, r3
 8000c5a:	240b      	movs	r4, #11
 8000c5c:	193b      	adds	r3, r7, r4
 8000c5e:	1c02      	adds	r2, r0, #0
 8000c60:	701a      	strb	r2, [r3, #0]
 8000c62:	2508      	movs	r5, #8
 8000c64:	197b      	adds	r3, r7, r5
 8000c66:	1c0a      	adds	r2, r1, #0
 8000c68:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_WritePin	( GPIOA , ACC_CS_Pin , GPIO_PIN_RESET ) ;
 8000c6a:	23a0      	movs	r3, #160	; 0xa0
 8000c6c:	05db      	lsls	r3, r3, #23
 8000c6e:	2200      	movs	r2, #0
 8000c70:	2110      	movs	r1, #16
 8000c72:	0018      	movs	r0, r3
 8000c74:	f000 fd6f 	bl	8001756 <HAL_GPIO_WritePin>
	HAL_Delay ( 20 ) ;
 8000c78:	2014      	movs	r0, #20
 8000c7a:	f000 fae1 	bl	8001240 <HAL_Delay>
	HAL_SPI_Transmit	( handle , &reg , 1 , 1000 ) ;
 8000c7e:	23fa      	movs	r3, #250	; 0xfa
 8000c80:	009b      	lsls	r3, r3, #2
 8000c82:	1939      	adds	r1, r7, r4
 8000c84:	68f8      	ldr	r0, [r7, #12]
 8000c86:	2201      	movs	r2, #1
 8000c88:	f001 fe0a 	bl	80028a0 <HAL_SPI_Transmit>
	HAL_SPI_Transmit	( handle , (uint8_t*) bufp , len , 1000 ) ;
 8000c8c:	23fa      	movs	r3, #250	; 0xfa
 8000c8e:	009c      	lsls	r4, r3, #2
 8000c90:	197b      	adds	r3, r7, r5
 8000c92:	881a      	ldrh	r2, [r3, #0]
 8000c94:	6879      	ldr	r1, [r7, #4]
 8000c96:	68f8      	ldr	r0, [r7, #12]
 8000c98:	0023      	movs	r3, r4
 8000c9a:	f001 fe01 	bl	80028a0 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin	( GPIOA , ACC_CS_Pin , GPIO_PIN_SET) ;
 8000c9e:	23a0      	movs	r3, #160	; 0xa0
 8000ca0:	05db      	lsls	r3, r3, #23
 8000ca2:	2201      	movs	r2, #1
 8000ca4:	2110      	movs	r1, #16
 8000ca6:	0018      	movs	r0, r3
 8000ca8:	f000 fd55 	bl	8001756 <HAL_GPIO_WritePin>

	return 0;
 8000cac:	2300      	movs	r3, #0
}
 8000cae:	0018      	movs	r0, r3
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	b004      	add	sp, #16
 8000cb4:	bdb0      	pop	{r4, r5, r7, pc}

08000cb6 <my_lis2dw12_platform_read>:

int32_t my_lis2dw12_platform_read ( void *handle , uint8_t reg , uint8_t *bufp , uint16_t len )
{
 8000cb6:	b5b0      	push	{r4, r5, r7, lr}
 8000cb8:	b084      	sub	sp, #16
 8000cba:	af00      	add	r7, sp, #0
 8000cbc:	60f8      	str	r0, [r7, #12]
 8000cbe:	0008      	movs	r0, r1
 8000cc0:	607a      	str	r2, [r7, #4]
 8000cc2:	0019      	movs	r1, r3
 8000cc4:	240b      	movs	r4, #11
 8000cc6:	193b      	adds	r3, r7, r4
 8000cc8:	1c02      	adds	r2, r0, #0
 8000cca:	701a      	strb	r2, [r3, #0]
 8000ccc:	2508      	movs	r5, #8
 8000cce:	197b      	adds	r3, r7, r5
 8000cd0:	1c0a      	adds	r2, r1, #0
 8000cd2:	801a      	strh	r2, [r3, #0]
	reg |= 0x80;
 8000cd4:	193b      	adds	r3, r7, r4
 8000cd6:	781b      	ldrb	r3, [r3, #0]
 8000cd8:	2280      	movs	r2, #128	; 0x80
 8000cda:	4252      	negs	r2, r2
 8000cdc:	4313      	orrs	r3, r2
 8000cde:	b2da      	uxtb	r2, r3
 8000ce0:	193b      	adds	r3, r7, r4
 8000ce2:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin ( GPIOA , ACC_CS_Pin , GPIO_PIN_RESET) ;
 8000ce4:	23a0      	movs	r3, #160	; 0xa0
 8000ce6:	05db      	lsls	r3, r3, #23
 8000ce8:	2200      	movs	r2, #0
 8000cea:	2110      	movs	r1, #16
 8000cec:	0018      	movs	r0, r3
 8000cee:	f000 fd32 	bl	8001756 <HAL_GPIO_WritePin>
	HAL_Delay ( 20 ) ;
 8000cf2:	2014      	movs	r0, #20
 8000cf4:	f000 faa4 	bl	8001240 <HAL_Delay>
	HAL_SPI_Transmit ( handle , &reg , 1 , 1000 ) ;
 8000cf8:	23fa      	movs	r3, #250	; 0xfa
 8000cfa:	009b      	lsls	r3, r3, #2
 8000cfc:	1939      	adds	r1, r7, r4
 8000cfe:	68f8      	ldr	r0, [r7, #12]
 8000d00:	2201      	movs	r2, #1
 8000d02:	f001 fdcd 	bl	80028a0 <HAL_SPI_Transmit>
	HAL_SPI_Receive ( handle , bufp , len , 1000 ) ;
 8000d06:	23fa      	movs	r3, #250	; 0xfa
 8000d08:	009c      	lsls	r4, r3, #2
 8000d0a:	197b      	adds	r3, r7, r5
 8000d0c:	881a      	ldrh	r2, [r3, #0]
 8000d0e:	6879      	ldr	r1, [r7, #4]
 8000d10:	68f8      	ldr	r0, [r7, #12]
 8000d12:	0023      	movs	r3, r4
 8000d14:	f001 ff1c 	bl	8002b50 <HAL_SPI_Receive>
	HAL_GPIO_WritePin ( GPIOA , ACC_CS_Pin , GPIO_PIN_SET) ;
 8000d18:	23a0      	movs	r3, #160	; 0xa0
 8000d1a:	05db      	lsls	r3, r3, #23
 8000d1c:	2201      	movs	r2, #1
 8000d1e:	2110      	movs	r1, #16
 8000d20:	0018      	movs	r0, r3
 8000d22:	f000 fd18 	bl	8001756 <HAL_GPIO_WritePin>

	return 0;
 8000d26:	2300      	movs	r3, #0
}
 8000d28:	0018      	movs	r0, r3
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	b004      	add	sp, #16
 8000d2e:	bdb0      	pop	{r4, r5, r7, pc}

08000d30 <my_gnss_on>:

// GNSS LL Function
void my_gnss_on ( void )
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin ( GPIOB , GNSS_PWR_SW_Pin , GPIO_PIN_SET ) ;
 8000d34:	2380      	movs	r3, #128	; 0x80
 8000d36:	021b      	lsls	r3, r3, #8
 8000d38:	4808      	ldr	r0, [pc, #32]	; (8000d5c <my_gnss_on+0x2c>)
 8000d3a:	2201      	movs	r2, #1
 8000d3c:	0019      	movs	r1, r3
 8000d3e:	f000 fd0a 	bl	8001756 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin ( GPIOB , GNSS_RST_Pin , GPIO_PIN_SET ) ;
 8000d42:	2380      	movs	r3, #128	; 0x80
 8000d44:	019b      	lsls	r3, r3, #6
 8000d46:	4805      	ldr	r0, [pc, #20]	; (8000d5c <my_gnss_on+0x2c>)
 8000d48:	2201      	movs	r2, #1
 8000d4a:	0019      	movs	r1, r3
 8000d4c:	f000 fd03 	bl	8001756 <HAL_GPIO_WritePin>
	MX_USART3_UART_Init () ;
 8000d50:	f7ff fe0a 	bl	8000968 <MX_USART3_UART_Init>
}
 8000d54:	46c0      	nop			; (mov r8, r8)
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}
 8000d5a:	46c0      	nop			; (mov r8, r8)
 8000d5c:	50000400 	.word	0x50000400

08000d60 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d64:	b672      	cpsid	i
}
 8000d66:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d68:	e7fe      	b.n	8000d68 <Error_Handler+0x8>
	...

08000d6c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b082      	sub	sp, #8
 8000d70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d72:	4b0f      	ldr	r3, [pc, #60]	; (8000db0 <HAL_MspInit+0x44>)
 8000d74:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000d76:	4b0e      	ldr	r3, [pc, #56]	; (8000db0 <HAL_MspInit+0x44>)
 8000d78:	2101      	movs	r1, #1
 8000d7a:	430a      	orrs	r2, r1
 8000d7c:	641a      	str	r2, [r3, #64]	; 0x40
 8000d7e:	4b0c      	ldr	r3, [pc, #48]	; (8000db0 <HAL_MspInit+0x44>)
 8000d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d82:	2201      	movs	r2, #1
 8000d84:	4013      	ands	r3, r2
 8000d86:	607b      	str	r3, [r7, #4]
 8000d88:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d8a:	4b09      	ldr	r3, [pc, #36]	; (8000db0 <HAL_MspInit+0x44>)
 8000d8c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000d8e:	4b08      	ldr	r3, [pc, #32]	; (8000db0 <HAL_MspInit+0x44>)
 8000d90:	2180      	movs	r1, #128	; 0x80
 8000d92:	0549      	lsls	r1, r1, #21
 8000d94:	430a      	orrs	r2, r1
 8000d96:	63da      	str	r2, [r3, #60]	; 0x3c
 8000d98:	4b05      	ldr	r3, [pc, #20]	; (8000db0 <HAL_MspInit+0x44>)
 8000d9a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000d9c:	2380      	movs	r3, #128	; 0x80
 8000d9e:	055b      	lsls	r3, r3, #21
 8000da0:	4013      	ands	r3, r2
 8000da2:	603b      	str	r3, [r7, #0]
 8000da4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000da6:	46c0      	nop			; (mov r8, r8)
 8000da8:	46bd      	mov	sp, r7
 8000daa:	b002      	add	sp, #8
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	46c0      	nop			; (mov r8, r8)
 8000db0:	40021000 	.word	0x40021000

08000db4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000db4:	b590      	push	{r4, r7, lr}
 8000db6:	b08b      	sub	sp, #44	; 0x2c
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dbc:	2414      	movs	r4, #20
 8000dbe:	193b      	adds	r3, r7, r4
 8000dc0:	0018      	movs	r0, r3
 8000dc2:	2314      	movs	r3, #20
 8000dc4:	001a      	movs	r2, r3
 8000dc6:	2100      	movs	r1, #0
 8000dc8:	f004 f862 	bl	8004e90 <memset>
  if(hspi->Instance==SPI1)
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	4a2c      	ldr	r2, [pc, #176]	; (8000e84 <HAL_SPI_MspInit+0xd0>)
 8000dd2:	4293      	cmp	r3, r2
 8000dd4:	d152      	bne.n	8000e7c <HAL_SPI_MspInit+0xc8>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000dd6:	4b2c      	ldr	r3, [pc, #176]	; (8000e88 <HAL_SPI_MspInit+0xd4>)
 8000dd8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000dda:	4b2b      	ldr	r3, [pc, #172]	; (8000e88 <HAL_SPI_MspInit+0xd4>)
 8000ddc:	2180      	movs	r1, #128	; 0x80
 8000dde:	0149      	lsls	r1, r1, #5
 8000de0:	430a      	orrs	r2, r1
 8000de2:	641a      	str	r2, [r3, #64]	; 0x40
 8000de4:	4b28      	ldr	r3, [pc, #160]	; (8000e88 <HAL_SPI_MspInit+0xd4>)
 8000de6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000de8:	2380      	movs	r3, #128	; 0x80
 8000dea:	015b      	lsls	r3, r3, #5
 8000dec:	4013      	ands	r3, r2
 8000dee:	613b      	str	r3, [r7, #16]
 8000df0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000df2:	4b25      	ldr	r3, [pc, #148]	; (8000e88 <HAL_SPI_MspInit+0xd4>)
 8000df4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000df6:	4b24      	ldr	r3, [pc, #144]	; (8000e88 <HAL_SPI_MspInit+0xd4>)
 8000df8:	2101      	movs	r1, #1
 8000dfa:	430a      	orrs	r2, r1
 8000dfc:	635a      	str	r2, [r3, #52]	; 0x34
 8000dfe:	4b22      	ldr	r3, [pc, #136]	; (8000e88 <HAL_SPI_MspInit+0xd4>)
 8000e00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e02:	2201      	movs	r2, #1
 8000e04:	4013      	ands	r3, r2
 8000e06:	60fb      	str	r3, [r7, #12]
 8000e08:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e0a:	4b1f      	ldr	r3, [pc, #124]	; (8000e88 <HAL_SPI_MspInit+0xd4>)
 8000e0c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000e0e:	4b1e      	ldr	r3, [pc, #120]	; (8000e88 <HAL_SPI_MspInit+0xd4>)
 8000e10:	2108      	movs	r1, #8
 8000e12:	430a      	orrs	r2, r1
 8000e14:	635a      	str	r2, [r3, #52]	; 0x34
 8000e16:	4b1c      	ldr	r3, [pc, #112]	; (8000e88 <HAL_SPI_MspInit+0xd4>)
 8000e18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e1a:	2208      	movs	r2, #8
 8000e1c:	4013      	ands	r3, r2
 8000e1e:	60bb      	str	r3, [r7, #8]
 8000e20:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PD8     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = ACC_MISO_Pin|ACC_MOSI_Pin;
 8000e22:	193b      	adds	r3, r7, r4
 8000e24:	22c0      	movs	r2, #192	; 0xc0
 8000e26:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e28:	193b      	adds	r3, r7, r4
 8000e2a:	2202      	movs	r2, #2
 8000e2c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e2e:	193b      	adds	r3, r7, r4
 8000e30:	2200      	movs	r2, #0
 8000e32:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e34:	193b      	adds	r3, r7, r4
 8000e36:	2200      	movs	r2, #0
 8000e38:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8000e3a:	193b      	adds	r3, r7, r4
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e40:	193a      	adds	r2, r7, r4
 8000e42:	23a0      	movs	r3, #160	; 0xa0
 8000e44:	05db      	lsls	r3, r3, #23
 8000e46:	0011      	movs	r1, r2
 8000e48:	0018      	movs	r0, r3
 8000e4a:	f000 fafb 	bl	8001444 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ACC_SCK_Pin;
 8000e4e:	0021      	movs	r1, r4
 8000e50:	187b      	adds	r3, r7, r1
 8000e52:	2280      	movs	r2, #128	; 0x80
 8000e54:	0052      	lsls	r2, r2, #1
 8000e56:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e58:	187b      	adds	r3, r7, r1
 8000e5a:	2202      	movs	r2, #2
 8000e5c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e5e:	187b      	adds	r3, r7, r1
 8000e60:	2200      	movs	r2, #0
 8000e62:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e64:	187b      	adds	r3, r7, r1
 8000e66:	2200      	movs	r2, #0
 8000e68:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_SPI1;
 8000e6a:	187b      	adds	r3, r7, r1
 8000e6c:	2201      	movs	r2, #1
 8000e6e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(ACC_SCK_GPIO_Port, &GPIO_InitStruct);
 8000e70:	187b      	adds	r3, r7, r1
 8000e72:	4a06      	ldr	r2, [pc, #24]	; (8000e8c <HAL_SPI_MspInit+0xd8>)
 8000e74:	0019      	movs	r1, r3
 8000e76:	0010      	movs	r0, r2
 8000e78:	f000 fae4 	bl	8001444 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000e7c:	46c0      	nop			; (mov r8, r8)
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	b00b      	add	sp, #44	; 0x2c
 8000e82:	bd90      	pop	{r4, r7, pc}
 8000e84:	40013000 	.word	0x40013000
 8000e88:	40021000 	.word	0x40021000
 8000e8c:	50000c00 	.word	0x50000c00

08000e90 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b084      	sub	sp, #16
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	4a09      	ldr	r2, [pc, #36]	; (8000ec4 <HAL_TIM_Base_MspInit+0x34>)
 8000e9e:	4293      	cmp	r3, r2
 8000ea0:	d10b      	bne.n	8000eba <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000ea2:	4b09      	ldr	r3, [pc, #36]	; (8000ec8 <HAL_TIM_Base_MspInit+0x38>)
 8000ea4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000ea6:	4b08      	ldr	r3, [pc, #32]	; (8000ec8 <HAL_TIM_Base_MspInit+0x38>)
 8000ea8:	2110      	movs	r1, #16
 8000eaa:	430a      	orrs	r2, r1
 8000eac:	63da      	str	r2, [r3, #60]	; 0x3c
 8000eae:	4b06      	ldr	r3, [pc, #24]	; (8000ec8 <HAL_TIM_Base_MspInit+0x38>)
 8000eb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000eb2:	2210      	movs	r2, #16
 8000eb4:	4013      	ands	r3, r2
 8000eb6:	60fb      	str	r3, [r7, #12]
 8000eb8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8000eba:	46c0      	nop			; (mov r8, r8)
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	b004      	add	sp, #16
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	46c0      	nop			; (mov r8, r8)
 8000ec4:	40001000 	.word	0x40001000
 8000ec8:	40021000 	.word	0x40021000

08000ecc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ecc:	b590      	push	{r4, r7, lr}
 8000ece:	b0a1      	sub	sp, #132	; 0x84
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ed4:	236c      	movs	r3, #108	; 0x6c
 8000ed6:	18fb      	adds	r3, r7, r3
 8000ed8:	0018      	movs	r0, r3
 8000eda:	2314      	movs	r3, #20
 8000edc:	001a      	movs	r2, r3
 8000ede:	2100      	movs	r1, #0
 8000ee0:	f003 ffd6 	bl	8004e90 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ee4:	2420      	movs	r4, #32
 8000ee6:	193b      	adds	r3, r7, r4
 8000ee8:	0018      	movs	r0, r3
 8000eea:	234c      	movs	r3, #76	; 0x4c
 8000eec:	001a      	movs	r2, r3
 8000eee:	2100      	movs	r1, #0
 8000ef0:	f003 ffce 	bl	8004e90 <memset>
  if(huart->Instance==USART2)
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	4a60      	ldr	r2, [pc, #384]	; (800107c <HAL_UART_MspInit+0x1b0>)
 8000efa:	4293      	cmp	r3, r2
 8000efc:	d13f      	bne.n	8000f7e <HAL_UART_MspInit+0xb2>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000efe:	193b      	adds	r3, r7, r4
 8000f00:	2202      	movs	r2, #2
 8000f02:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000f04:	193b      	adds	r3, r7, r4
 8000f06:	2200      	movs	r2, #0
 8000f08:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f0a:	193b      	adds	r3, r7, r4
 8000f0c:	0018      	movs	r0, r3
 8000f0e:	f001 f9d3 	bl	80022b8 <HAL_RCCEx_PeriphCLKConfig>
 8000f12:	1e03      	subs	r3, r0, #0
 8000f14:	d001      	beq.n	8000f1a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000f16:	f7ff ff23 	bl	8000d60 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000f1a:	4b59      	ldr	r3, [pc, #356]	; (8001080 <HAL_UART_MspInit+0x1b4>)
 8000f1c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000f1e:	4b58      	ldr	r3, [pc, #352]	; (8001080 <HAL_UART_MspInit+0x1b4>)
 8000f20:	2180      	movs	r1, #128	; 0x80
 8000f22:	0289      	lsls	r1, r1, #10
 8000f24:	430a      	orrs	r2, r1
 8000f26:	63da      	str	r2, [r3, #60]	; 0x3c
 8000f28:	4b55      	ldr	r3, [pc, #340]	; (8001080 <HAL_UART_MspInit+0x1b4>)
 8000f2a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000f2c:	2380      	movs	r3, #128	; 0x80
 8000f2e:	029b      	lsls	r3, r3, #10
 8000f30:	4013      	ands	r3, r2
 8000f32:	61fb      	str	r3, [r7, #28]
 8000f34:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f36:	4b52      	ldr	r3, [pc, #328]	; (8001080 <HAL_UART_MspInit+0x1b4>)
 8000f38:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000f3a:	4b51      	ldr	r3, [pc, #324]	; (8001080 <HAL_UART_MspInit+0x1b4>)
 8000f3c:	2101      	movs	r1, #1
 8000f3e:	430a      	orrs	r2, r1
 8000f40:	635a      	str	r2, [r3, #52]	; 0x34
 8000f42:	4b4f      	ldr	r3, [pc, #316]	; (8001080 <HAL_UART_MspInit+0x1b4>)
 8000f44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f46:	2201      	movs	r2, #1
 8000f48:	4013      	ands	r3, r2
 8000f4a:	61bb      	str	r3, [r7, #24]
 8000f4c:	69bb      	ldr	r3, [r7, #24]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = DBG_TX_Pin|DBG_RX_Pin;
 8000f4e:	216c      	movs	r1, #108	; 0x6c
 8000f50:	187b      	adds	r3, r7, r1
 8000f52:	220c      	movs	r2, #12
 8000f54:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f56:	187b      	adds	r3, r7, r1
 8000f58:	2202      	movs	r2, #2
 8000f5a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f5c:	187b      	adds	r3, r7, r1
 8000f5e:	2200      	movs	r2, #0
 8000f60:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f62:	187b      	adds	r3, r7, r1
 8000f64:	2200      	movs	r2, #0
 8000f66:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000f68:	187b      	adds	r3, r7, r1
 8000f6a:	2201      	movs	r2, #1
 8000f6c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f6e:	187a      	adds	r2, r7, r1
 8000f70:	23a0      	movs	r3, #160	; 0xa0
 8000f72:	05db      	lsls	r3, r3, #23
 8000f74:	0011      	movs	r1, r2
 8000f76:	0018      	movs	r0, r3
 8000f78:	f000 fa64 	bl	8001444 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART5_MspInit 1 */

  /* USER CODE END USART5_MspInit 1 */
  }

}
 8000f7c:	e07a      	b.n	8001074 <HAL_UART_MspInit+0x1a8>
  else if(huart->Instance==USART3)
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	4a40      	ldr	r2, [pc, #256]	; (8001084 <HAL_UART_MspInit+0x1b8>)
 8000f84:	4293      	cmp	r3, r2
 8000f86:	d140      	bne.n	800100a <HAL_UART_MspInit+0x13e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000f88:	2120      	movs	r1, #32
 8000f8a:	187b      	adds	r3, r7, r1
 8000f8c:	2204      	movs	r2, #4
 8000f8e:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000f90:	187b      	adds	r3, r7, r1
 8000f92:	2200      	movs	r2, #0
 8000f94:	60da      	str	r2, [r3, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f96:	187b      	adds	r3, r7, r1
 8000f98:	0018      	movs	r0, r3
 8000f9a:	f001 f98d 	bl	80022b8 <HAL_RCCEx_PeriphCLKConfig>
 8000f9e:	1e03      	subs	r3, r0, #0
 8000fa0:	d001      	beq.n	8000fa6 <HAL_UART_MspInit+0xda>
      Error_Handler();
 8000fa2:	f7ff fedd 	bl	8000d60 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000fa6:	4b36      	ldr	r3, [pc, #216]	; (8001080 <HAL_UART_MspInit+0x1b4>)
 8000fa8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000faa:	4b35      	ldr	r3, [pc, #212]	; (8001080 <HAL_UART_MspInit+0x1b4>)
 8000fac:	2180      	movs	r1, #128	; 0x80
 8000fae:	02c9      	lsls	r1, r1, #11
 8000fb0:	430a      	orrs	r2, r1
 8000fb2:	63da      	str	r2, [r3, #60]	; 0x3c
 8000fb4:	4b32      	ldr	r3, [pc, #200]	; (8001080 <HAL_UART_MspInit+0x1b4>)
 8000fb6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000fb8:	2380      	movs	r3, #128	; 0x80
 8000fba:	02db      	lsls	r3, r3, #11
 8000fbc:	4013      	ands	r3, r2
 8000fbe:	617b      	str	r3, [r7, #20]
 8000fc0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fc2:	4b2f      	ldr	r3, [pc, #188]	; (8001080 <HAL_UART_MspInit+0x1b4>)
 8000fc4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000fc6:	4b2e      	ldr	r3, [pc, #184]	; (8001080 <HAL_UART_MspInit+0x1b4>)
 8000fc8:	2102      	movs	r1, #2
 8000fca:	430a      	orrs	r2, r1
 8000fcc:	635a      	str	r2, [r3, #52]	; 0x34
 8000fce:	4b2c      	ldr	r3, [pc, #176]	; (8001080 <HAL_UART_MspInit+0x1b4>)
 8000fd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000fd2:	2202      	movs	r2, #2
 8000fd4:	4013      	ands	r3, r2
 8000fd6:	613b      	str	r3, [r7, #16]
 8000fd8:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ASTRO_TX_Pin|ASTRO_RX_Pin;
 8000fda:	216c      	movs	r1, #108	; 0x6c
 8000fdc:	187b      	adds	r3, r7, r1
 8000fde:	22c0      	movs	r2, #192	; 0xc0
 8000fe0:	0092      	lsls	r2, r2, #2
 8000fe2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fe4:	187b      	adds	r3, r7, r1
 8000fe6:	2202      	movs	r2, #2
 8000fe8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fea:	187b      	adds	r3, r7, r1
 8000fec:	2200      	movs	r2, #0
 8000fee:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ff0:	187b      	adds	r3, r7, r1
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART3;
 8000ff6:	187b      	adds	r3, r7, r1
 8000ff8:	2204      	movs	r2, #4
 8000ffa:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ffc:	187b      	adds	r3, r7, r1
 8000ffe:	4a22      	ldr	r2, [pc, #136]	; (8001088 <HAL_UART_MspInit+0x1bc>)
 8001000:	0019      	movs	r1, r3
 8001002:	0010      	movs	r0, r2
 8001004:	f000 fa1e 	bl	8001444 <HAL_GPIO_Init>
}
 8001008:	e034      	b.n	8001074 <HAL_UART_MspInit+0x1a8>
  else if(huart->Instance==USART5)
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	4a1f      	ldr	r2, [pc, #124]	; (800108c <HAL_UART_MspInit+0x1c0>)
 8001010:	4293      	cmp	r3, r2
 8001012:	d12f      	bne.n	8001074 <HAL_UART_MspInit+0x1a8>
    __HAL_RCC_USART5_CLK_ENABLE();
 8001014:	4b1a      	ldr	r3, [pc, #104]	; (8001080 <HAL_UART_MspInit+0x1b4>)
 8001016:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001018:	4b19      	ldr	r3, [pc, #100]	; (8001080 <HAL_UART_MspInit+0x1b4>)
 800101a:	2180      	movs	r1, #128	; 0x80
 800101c:	0049      	lsls	r1, r1, #1
 800101e:	430a      	orrs	r2, r1
 8001020:	63da      	str	r2, [r3, #60]	; 0x3c
 8001022:	4b17      	ldr	r3, [pc, #92]	; (8001080 <HAL_UART_MspInit+0x1b4>)
 8001024:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001026:	2380      	movs	r3, #128	; 0x80
 8001028:	005b      	lsls	r3, r3, #1
 800102a:	4013      	ands	r3, r2
 800102c:	60fb      	str	r3, [r7, #12]
 800102e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001030:	4b13      	ldr	r3, [pc, #76]	; (8001080 <HAL_UART_MspInit+0x1b4>)
 8001032:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001034:	4b12      	ldr	r3, [pc, #72]	; (8001080 <HAL_UART_MspInit+0x1b4>)
 8001036:	2102      	movs	r1, #2
 8001038:	430a      	orrs	r2, r1
 800103a:	635a      	str	r2, [r3, #52]	; 0x34
 800103c:	4b10      	ldr	r3, [pc, #64]	; (8001080 <HAL_UART_MspInit+0x1b4>)
 800103e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001040:	2202      	movs	r2, #2
 8001042:	4013      	ands	r3, r2
 8001044:	60bb      	str	r3, [r7, #8]
 8001046:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GNSS_TX_Pin|GNSS_RX_Pin;
 8001048:	216c      	movs	r1, #108	; 0x6c
 800104a:	187b      	adds	r3, r7, r1
 800104c:	2218      	movs	r2, #24
 800104e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001050:	187b      	adds	r3, r7, r1
 8001052:	2202      	movs	r2, #2
 8001054:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001056:	187b      	adds	r3, r7, r1
 8001058:	2200      	movs	r2, #0
 800105a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800105c:	187b      	adds	r3, r7, r1
 800105e:	2200      	movs	r2, #0
 8001060:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF3_USART5;
 8001062:	187b      	adds	r3, r7, r1
 8001064:	2203      	movs	r2, #3
 8001066:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001068:	187b      	adds	r3, r7, r1
 800106a:	4a07      	ldr	r2, [pc, #28]	; (8001088 <HAL_UART_MspInit+0x1bc>)
 800106c:	0019      	movs	r1, r3
 800106e:	0010      	movs	r0, r2
 8001070:	f000 f9e8 	bl	8001444 <HAL_GPIO_Init>
}
 8001074:	46c0      	nop			; (mov r8, r8)
 8001076:	46bd      	mov	sp, r7
 8001078:	b021      	add	sp, #132	; 0x84
 800107a:	bd90      	pop	{r4, r7, pc}
 800107c:	40004400 	.word	0x40004400
 8001080:	40021000 	.word	0x40021000
 8001084:	40004800 	.word	0x40004800
 8001088:	50000400 	.word	0x50000400
 800108c:	40005000 	.word	0x40005000

08001090 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001094:	e7fe      	b.n	8001094 <NMI_Handler+0x4>

08001096 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001096:	b580      	push	{r7, lr}
 8001098:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800109a:	e7fe      	b.n	800109a <HardFault_Handler+0x4>

0800109c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80010a0:	46c0      	nop			; (mov r8, r8)
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}

080010a6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010a6:	b580      	push	{r7, lr}
 80010a8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010aa:	46c0      	nop			; (mov r8, r8)
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bd80      	pop	{r7, pc}

080010b0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010b4:	f000 f8a8 	bl	8001208 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010b8:	46c0      	nop			; (mov r8, r8)
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}

080010be <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and line 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 80010be:	b580      	push	{r7, lr}
 80010c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ACC_INT1_Pin);
 80010c2:	2001      	movs	r0, #1
 80010c4:	f000 fb64 	bl	8001790 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ACC_INT2_Pin);
 80010c8:	2002      	movs	r0, #2
 80010ca:	f000 fb61 	bl	8001790 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 80010ce:	46c0      	nop			; (mov r8, r8)
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd80      	pop	{r7, pc}

080010d4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80010d8:	46c0      	nop			; (mov r8, r8)
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}
	...

080010e0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80010e0:	480d      	ldr	r0, [pc, #52]	; (8001118 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80010e2:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80010e4:	f7ff fff6 	bl	80010d4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80010e8:	480c      	ldr	r0, [pc, #48]	; (800111c <LoopForever+0x6>)
  ldr r1, =_edata
 80010ea:	490d      	ldr	r1, [pc, #52]	; (8001120 <LoopForever+0xa>)
  ldr r2, =_sidata
 80010ec:	4a0d      	ldr	r2, [pc, #52]	; (8001124 <LoopForever+0xe>)
  movs r3, #0
 80010ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010f0:	e002      	b.n	80010f8 <LoopCopyDataInit>

080010f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010f6:	3304      	adds	r3, #4

080010f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010fc:	d3f9      	bcc.n	80010f2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010fe:	4a0a      	ldr	r2, [pc, #40]	; (8001128 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001100:	4c0a      	ldr	r4, [pc, #40]	; (800112c <LoopForever+0x16>)
  movs r3, #0
 8001102:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001104:	e001      	b.n	800110a <LoopFillZerobss>

08001106 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001106:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001108:	3204      	adds	r2, #4

0800110a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800110a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800110c:	d3fb      	bcc.n	8001106 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800110e:	f003 fec7 	bl	8004ea0 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8001112:	f7ff fa8b 	bl	800062c <main>

08001116 <LoopForever>:

LoopForever:
  b LoopForever
 8001116:	e7fe      	b.n	8001116 <LoopForever>
  ldr   r0, =_estack
 8001118:	20024000 	.word	0x20024000
  ldr r0, =_sdata
 800111c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001120:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001124:	0800507c 	.word	0x0800507c
  ldr r2, =_sbss
 8001128:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 800112c:	200002b0 	.word	0x200002b0

08001130 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001130:	e7fe      	b.n	8001130 <ADC1_COMP_IRQHandler>
	...

08001134 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b082      	sub	sp, #8
 8001138:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800113a:	1dfb      	adds	r3, r7, #7
 800113c:	2200      	movs	r2, #0
 800113e:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001140:	4b0b      	ldr	r3, [pc, #44]	; (8001170 <HAL_Init+0x3c>)
 8001142:	681a      	ldr	r2, [r3, #0]
 8001144:	4b0a      	ldr	r3, [pc, #40]	; (8001170 <HAL_Init+0x3c>)
 8001146:	2180      	movs	r1, #128	; 0x80
 8001148:	0049      	lsls	r1, r1, #1
 800114a:	430a      	orrs	r2, r1
 800114c:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800114e:	2000      	movs	r0, #0
 8001150:	f000 f810 	bl	8001174 <HAL_InitTick>
 8001154:	1e03      	subs	r3, r0, #0
 8001156:	d003      	beq.n	8001160 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8001158:	1dfb      	adds	r3, r7, #7
 800115a:	2201      	movs	r2, #1
 800115c:	701a      	strb	r2, [r3, #0]
 800115e:	e001      	b.n	8001164 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8001160:	f7ff fe04 	bl	8000d6c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001164:	1dfb      	adds	r3, r7, #7
 8001166:	781b      	ldrb	r3, [r3, #0]
}
 8001168:	0018      	movs	r0, r3
 800116a:	46bd      	mov	sp, r7
 800116c:	b002      	add	sp, #8
 800116e:	bd80      	pop	{r7, pc}
 8001170:	40022000 	.word	0x40022000

08001174 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001174:	b590      	push	{r4, r7, lr}
 8001176:	b085      	sub	sp, #20
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800117c:	230f      	movs	r3, #15
 800117e:	18fb      	adds	r3, r7, r3
 8001180:	2200      	movs	r2, #0
 8001182:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8001184:	4b1d      	ldr	r3, [pc, #116]	; (80011fc <HAL_InitTick+0x88>)
 8001186:	781b      	ldrb	r3, [r3, #0]
 8001188:	2b00      	cmp	r3, #0
 800118a:	d02b      	beq.n	80011e4 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 800118c:	4b1c      	ldr	r3, [pc, #112]	; (8001200 <HAL_InitTick+0x8c>)
 800118e:	681c      	ldr	r4, [r3, #0]
 8001190:	4b1a      	ldr	r3, [pc, #104]	; (80011fc <HAL_InitTick+0x88>)
 8001192:	781b      	ldrb	r3, [r3, #0]
 8001194:	0019      	movs	r1, r3
 8001196:	23fa      	movs	r3, #250	; 0xfa
 8001198:	0098      	lsls	r0, r3, #2
 800119a:	f7fe ffbb 	bl	8000114 <__udivsi3>
 800119e:	0003      	movs	r3, r0
 80011a0:	0019      	movs	r1, r3
 80011a2:	0020      	movs	r0, r4
 80011a4:	f7fe ffb6 	bl	8000114 <__udivsi3>
 80011a8:	0003      	movs	r3, r0
 80011aa:	0018      	movs	r0, r3
 80011ac:	f000 f93d 	bl	800142a <HAL_SYSTICK_Config>
 80011b0:	1e03      	subs	r3, r0, #0
 80011b2:	d112      	bne.n	80011da <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	2b03      	cmp	r3, #3
 80011b8:	d80a      	bhi.n	80011d0 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011ba:	6879      	ldr	r1, [r7, #4]
 80011bc:	2301      	movs	r3, #1
 80011be:	425b      	negs	r3, r3
 80011c0:	2200      	movs	r2, #0
 80011c2:	0018      	movs	r0, r3
 80011c4:	f000 f90c 	bl	80013e0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80011c8:	4b0e      	ldr	r3, [pc, #56]	; (8001204 <HAL_InitTick+0x90>)
 80011ca:	687a      	ldr	r2, [r7, #4]
 80011cc:	601a      	str	r2, [r3, #0]
 80011ce:	e00d      	b.n	80011ec <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 80011d0:	230f      	movs	r3, #15
 80011d2:	18fb      	adds	r3, r7, r3
 80011d4:	2201      	movs	r2, #1
 80011d6:	701a      	strb	r2, [r3, #0]
 80011d8:	e008      	b.n	80011ec <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 80011da:	230f      	movs	r3, #15
 80011dc:	18fb      	adds	r3, r7, r3
 80011de:	2201      	movs	r2, #1
 80011e0:	701a      	strb	r2, [r3, #0]
 80011e2:	e003      	b.n	80011ec <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80011e4:	230f      	movs	r3, #15
 80011e6:	18fb      	adds	r3, r7, r3
 80011e8:	2201      	movs	r2, #1
 80011ea:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80011ec:	230f      	movs	r3, #15
 80011ee:	18fb      	adds	r3, r7, r3
 80011f0:	781b      	ldrb	r3, [r3, #0]
}
 80011f2:	0018      	movs	r0, r3
 80011f4:	46bd      	mov	sp, r7
 80011f6:	b005      	add	sp, #20
 80011f8:	bd90      	pop	{r4, r7, pc}
 80011fa:	46c0      	nop			; (mov r8, r8)
 80011fc:	2000000c 	.word	0x2000000c
 8001200:	20000004 	.word	0x20000004
 8001204:	20000008 	.word	0x20000008

08001208 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800120c:	4b05      	ldr	r3, [pc, #20]	; (8001224 <HAL_IncTick+0x1c>)
 800120e:	781b      	ldrb	r3, [r3, #0]
 8001210:	001a      	movs	r2, r3
 8001212:	4b05      	ldr	r3, [pc, #20]	; (8001228 <HAL_IncTick+0x20>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	18d2      	adds	r2, r2, r3
 8001218:	4b03      	ldr	r3, [pc, #12]	; (8001228 <HAL_IncTick+0x20>)
 800121a:	601a      	str	r2, [r3, #0]
}
 800121c:	46c0      	nop			; (mov r8, r8)
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}
 8001222:	46c0      	nop			; (mov r8, r8)
 8001224:	2000000c 	.word	0x2000000c
 8001228:	200002ac 	.word	0x200002ac

0800122c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	af00      	add	r7, sp, #0
  return uwTick;
 8001230:	4b02      	ldr	r3, [pc, #8]	; (800123c <HAL_GetTick+0x10>)
 8001232:	681b      	ldr	r3, [r3, #0]
}
 8001234:	0018      	movs	r0, r3
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}
 800123a:	46c0      	nop			; (mov r8, r8)
 800123c:	200002ac 	.word	0x200002ac

08001240 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b084      	sub	sp, #16
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001248:	f7ff fff0 	bl	800122c <HAL_GetTick>
 800124c:	0003      	movs	r3, r0
 800124e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	3301      	adds	r3, #1
 8001258:	d005      	beq.n	8001266 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800125a:	4b0a      	ldr	r3, [pc, #40]	; (8001284 <HAL_Delay+0x44>)
 800125c:	781b      	ldrb	r3, [r3, #0]
 800125e:	001a      	movs	r2, r3
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	189b      	adds	r3, r3, r2
 8001264:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001266:	46c0      	nop			; (mov r8, r8)
 8001268:	f7ff ffe0 	bl	800122c <HAL_GetTick>
 800126c:	0002      	movs	r2, r0
 800126e:	68bb      	ldr	r3, [r7, #8]
 8001270:	1ad3      	subs	r3, r2, r3
 8001272:	68fa      	ldr	r2, [r7, #12]
 8001274:	429a      	cmp	r2, r3
 8001276:	d8f7      	bhi.n	8001268 <HAL_Delay+0x28>
  {
  }
}
 8001278:	46c0      	nop			; (mov r8, r8)
 800127a:	46c0      	nop			; (mov r8, r8)
 800127c:	46bd      	mov	sp, r7
 800127e:	b004      	add	sp, #16
 8001280:	bd80      	pop	{r7, pc}
 8001282:	46c0      	nop			; (mov r8, r8)
 8001284:	2000000c 	.word	0x2000000c

08001288 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b082      	sub	sp, #8
 800128c:	af00      	add	r7, sp, #0
 800128e:	0002      	movs	r2, r0
 8001290:	1dfb      	adds	r3, r7, #7
 8001292:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001294:	1dfb      	adds	r3, r7, #7
 8001296:	781b      	ldrb	r3, [r3, #0]
 8001298:	2b7f      	cmp	r3, #127	; 0x7f
 800129a:	d809      	bhi.n	80012b0 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800129c:	1dfb      	adds	r3, r7, #7
 800129e:	781b      	ldrb	r3, [r3, #0]
 80012a0:	001a      	movs	r2, r3
 80012a2:	231f      	movs	r3, #31
 80012a4:	401a      	ands	r2, r3
 80012a6:	4b04      	ldr	r3, [pc, #16]	; (80012b8 <__NVIC_EnableIRQ+0x30>)
 80012a8:	2101      	movs	r1, #1
 80012aa:	4091      	lsls	r1, r2
 80012ac:	000a      	movs	r2, r1
 80012ae:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 80012b0:	46c0      	nop			; (mov r8, r8)
 80012b2:	46bd      	mov	sp, r7
 80012b4:	b002      	add	sp, #8
 80012b6:	bd80      	pop	{r7, pc}
 80012b8:	e000e100 	.word	0xe000e100

080012bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012bc:	b590      	push	{r4, r7, lr}
 80012be:	b083      	sub	sp, #12
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	0002      	movs	r2, r0
 80012c4:	6039      	str	r1, [r7, #0]
 80012c6:	1dfb      	adds	r3, r7, #7
 80012c8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80012ca:	1dfb      	adds	r3, r7, #7
 80012cc:	781b      	ldrb	r3, [r3, #0]
 80012ce:	2b7f      	cmp	r3, #127	; 0x7f
 80012d0:	d828      	bhi.n	8001324 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80012d2:	4a2f      	ldr	r2, [pc, #188]	; (8001390 <__NVIC_SetPriority+0xd4>)
 80012d4:	1dfb      	adds	r3, r7, #7
 80012d6:	781b      	ldrb	r3, [r3, #0]
 80012d8:	b25b      	sxtb	r3, r3
 80012da:	089b      	lsrs	r3, r3, #2
 80012dc:	33c0      	adds	r3, #192	; 0xc0
 80012de:	009b      	lsls	r3, r3, #2
 80012e0:	589b      	ldr	r3, [r3, r2]
 80012e2:	1dfa      	adds	r2, r7, #7
 80012e4:	7812      	ldrb	r2, [r2, #0]
 80012e6:	0011      	movs	r1, r2
 80012e8:	2203      	movs	r2, #3
 80012ea:	400a      	ands	r2, r1
 80012ec:	00d2      	lsls	r2, r2, #3
 80012ee:	21ff      	movs	r1, #255	; 0xff
 80012f0:	4091      	lsls	r1, r2
 80012f2:	000a      	movs	r2, r1
 80012f4:	43d2      	mvns	r2, r2
 80012f6:	401a      	ands	r2, r3
 80012f8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80012fa:	683b      	ldr	r3, [r7, #0]
 80012fc:	019b      	lsls	r3, r3, #6
 80012fe:	22ff      	movs	r2, #255	; 0xff
 8001300:	401a      	ands	r2, r3
 8001302:	1dfb      	adds	r3, r7, #7
 8001304:	781b      	ldrb	r3, [r3, #0]
 8001306:	0018      	movs	r0, r3
 8001308:	2303      	movs	r3, #3
 800130a:	4003      	ands	r3, r0
 800130c:	00db      	lsls	r3, r3, #3
 800130e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001310:	481f      	ldr	r0, [pc, #124]	; (8001390 <__NVIC_SetPriority+0xd4>)
 8001312:	1dfb      	adds	r3, r7, #7
 8001314:	781b      	ldrb	r3, [r3, #0]
 8001316:	b25b      	sxtb	r3, r3
 8001318:	089b      	lsrs	r3, r3, #2
 800131a:	430a      	orrs	r2, r1
 800131c:	33c0      	adds	r3, #192	; 0xc0
 800131e:	009b      	lsls	r3, r3, #2
 8001320:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001322:	e031      	b.n	8001388 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001324:	4a1b      	ldr	r2, [pc, #108]	; (8001394 <__NVIC_SetPriority+0xd8>)
 8001326:	1dfb      	adds	r3, r7, #7
 8001328:	781b      	ldrb	r3, [r3, #0]
 800132a:	0019      	movs	r1, r3
 800132c:	230f      	movs	r3, #15
 800132e:	400b      	ands	r3, r1
 8001330:	3b08      	subs	r3, #8
 8001332:	089b      	lsrs	r3, r3, #2
 8001334:	3306      	adds	r3, #6
 8001336:	009b      	lsls	r3, r3, #2
 8001338:	18d3      	adds	r3, r2, r3
 800133a:	3304      	adds	r3, #4
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	1dfa      	adds	r2, r7, #7
 8001340:	7812      	ldrb	r2, [r2, #0]
 8001342:	0011      	movs	r1, r2
 8001344:	2203      	movs	r2, #3
 8001346:	400a      	ands	r2, r1
 8001348:	00d2      	lsls	r2, r2, #3
 800134a:	21ff      	movs	r1, #255	; 0xff
 800134c:	4091      	lsls	r1, r2
 800134e:	000a      	movs	r2, r1
 8001350:	43d2      	mvns	r2, r2
 8001352:	401a      	ands	r2, r3
 8001354:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001356:	683b      	ldr	r3, [r7, #0]
 8001358:	019b      	lsls	r3, r3, #6
 800135a:	22ff      	movs	r2, #255	; 0xff
 800135c:	401a      	ands	r2, r3
 800135e:	1dfb      	adds	r3, r7, #7
 8001360:	781b      	ldrb	r3, [r3, #0]
 8001362:	0018      	movs	r0, r3
 8001364:	2303      	movs	r3, #3
 8001366:	4003      	ands	r3, r0
 8001368:	00db      	lsls	r3, r3, #3
 800136a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800136c:	4809      	ldr	r0, [pc, #36]	; (8001394 <__NVIC_SetPriority+0xd8>)
 800136e:	1dfb      	adds	r3, r7, #7
 8001370:	781b      	ldrb	r3, [r3, #0]
 8001372:	001c      	movs	r4, r3
 8001374:	230f      	movs	r3, #15
 8001376:	4023      	ands	r3, r4
 8001378:	3b08      	subs	r3, #8
 800137a:	089b      	lsrs	r3, r3, #2
 800137c:	430a      	orrs	r2, r1
 800137e:	3306      	adds	r3, #6
 8001380:	009b      	lsls	r3, r3, #2
 8001382:	18c3      	adds	r3, r0, r3
 8001384:	3304      	adds	r3, #4
 8001386:	601a      	str	r2, [r3, #0]
}
 8001388:	46c0      	nop			; (mov r8, r8)
 800138a:	46bd      	mov	sp, r7
 800138c:	b003      	add	sp, #12
 800138e:	bd90      	pop	{r4, r7, pc}
 8001390:	e000e100 	.word	0xe000e100
 8001394:	e000ed00 	.word	0xe000ed00

08001398 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b082      	sub	sp, #8
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	1e5a      	subs	r2, r3, #1
 80013a4:	2380      	movs	r3, #128	; 0x80
 80013a6:	045b      	lsls	r3, r3, #17
 80013a8:	429a      	cmp	r2, r3
 80013aa:	d301      	bcc.n	80013b0 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013ac:	2301      	movs	r3, #1
 80013ae:	e010      	b.n	80013d2 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013b0:	4b0a      	ldr	r3, [pc, #40]	; (80013dc <SysTick_Config+0x44>)
 80013b2:	687a      	ldr	r2, [r7, #4]
 80013b4:	3a01      	subs	r2, #1
 80013b6:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013b8:	2301      	movs	r3, #1
 80013ba:	425b      	negs	r3, r3
 80013bc:	2103      	movs	r1, #3
 80013be:	0018      	movs	r0, r3
 80013c0:	f7ff ff7c 	bl	80012bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013c4:	4b05      	ldr	r3, [pc, #20]	; (80013dc <SysTick_Config+0x44>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013ca:	4b04      	ldr	r3, [pc, #16]	; (80013dc <SysTick_Config+0x44>)
 80013cc:	2207      	movs	r2, #7
 80013ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013d0:	2300      	movs	r3, #0
}
 80013d2:	0018      	movs	r0, r3
 80013d4:	46bd      	mov	sp, r7
 80013d6:	b002      	add	sp, #8
 80013d8:	bd80      	pop	{r7, pc}
 80013da:	46c0      	nop			; (mov r8, r8)
 80013dc:	e000e010 	.word	0xe000e010

080013e0 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b084      	sub	sp, #16
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	60b9      	str	r1, [r7, #8]
 80013e8:	607a      	str	r2, [r7, #4]
 80013ea:	210f      	movs	r1, #15
 80013ec:	187b      	adds	r3, r7, r1
 80013ee:	1c02      	adds	r2, r0, #0
 80013f0:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 80013f2:	68ba      	ldr	r2, [r7, #8]
 80013f4:	187b      	adds	r3, r7, r1
 80013f6:	781b      	ldrb	r3, [r3, #0]
 80013f8:	b25b      	sxtb	r3, r3
 80013fa:	0011      	movs	r1, r2
 80013fc:	0018      	movs	r0, r3
 80013fe:	f7ff ff5d 	bl	80012bc <__NVIC_SetPriority>
}
 8001402:	46c0      	nop			; (mov r8, r8)
 8001404:	46bd      	mov	sp, r7
 8001406:	b004      	add	sp, #16
 8001408:	bd80      	pop	{r7, pc}

0800140a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800140a:	b580      	push	{r7, lr}
 800140c:	b082      	sub	sp, #8
 800140e:	af00      	add	r7, sp, #0
 8001410:	0002      	movs	r2, r0
 8001412:	1dfb      	adds	r3, r7, #7
 8001414:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001416:	1dfb      	adds	r3, r7, #7
 8001418:	781b      	ldrb	r3, [r3, #0]
 800141a:	b25b      	sxtb	r3, r3
 800141c:	0018      	movs	r0, r3
 800141e:	f7ff ff33 	bl	8001288 <__NVIC_EnableIRQ>
}
 8001422:	46c0      	nop			; (mov r8, r8)
 8001424:	46bd      	mov	sp, r7
 8001426:	b002      	add	sp, #8
 8001428:	bd80      	pop	{r7, pc}

0800142a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800142a:	b580      	push	{r7, lr}
 800142c:	b082      	sub	sp, #8
 800142e:	af00      	add	r7, sp, #0
 8001430:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	0018      	movs	r0, r3
 8001436:	f7ff ffaf 	bl	8001398 <SysTick_Config>
 800143a:	0003      	movs	r3, r0
}
 800143c:	0018      	movs	r0, r3
 800143e:	46bd      	mov	sp, r7
 8001440:	b002      	add	sp, #8
 8001442:	bd80      	pop	{r7, pc}

08001444 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b086      	sub	sp, #24
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
 800144c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800144e:	2300      	movs	r3, #0
 8001450:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001452:	e14d      	b.n	80016f0 <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	2101      	movs	r1, #1
 800145a:	697a      	ldr	r2, [r7, #20]
 800145c:	4091      	lsls	r1, r2
 800145e:	000a      	movs	r2, r1
 8001460:	4013      	ands	r3, r2
 8001462:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	2b00      	cmp	r3, #0
 8001468:	d100      	bne.n	800146c <HAL_GPIO_Init+0x28>
 800146a:	e13e      	b.n	80016ea <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	685b      	ldr	r3, [r3, #4]
 8001470:	2203      	movs	r2, #3
 8001472:	4013      	ands	r3, r2
 8001474:	2b01      	cmp	r3, #1
 8001476:	d005      	beq.n	8001484 <HAL_GPIO_Init+0x40>
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	685b      	ldr	r3, [r3, #4]
 800147c:	2203      	movs	r2, #3
 800147e:	4013      	ands	r3, r2
 8001480:	2b02      	cmp	r3, #2
 8001482:	d130      	bne.n	80014e6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	689b      	ldr	r3, [r3, #8]
 8001488:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800148a:	697b      	ldr	r3, [r7, #20]
 800148c:	005b      	lsls	r3, r3, #1
 800148e:	2203      	movs	r2, #3
 8001490:	409a      	lsls	r2, r3
 8001492:	0013      	movs	r3, r2
 8001494:	43da      	mvns	r2, r3
 8001496:	693b      	ldr	r3, [r7, #16]
 8001498:	4013      	ands	r3, r2
 800149a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800149c:	683b      	ldr	r3, [r7, #0]
 800149e:	68da      	ldr	r2, [r3, #12]
 80014a0:	697b      	ldr	r3, [r7, #20]
 80014a2:	005b      	lsls	r3, r3, #1
 80014a4:	409a      	lsls	r2, r3
 80014a6:	0013      	movs	r3, r2
 80014a8:	693a      	ldr	r2, [r7, #16]
 80014aa:	4313      	orrs	r3, r2
 80014ac:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	693a      	ldr	r2, [r7, #16]
 80014b2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	685b      	ldr	r3, [r3, #4]
 80014b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80014ba:	2201      	movs	r2, #1
 80014bc:	697b      	ldr	r3, [r7, #20]
 80014be:	409a      	lsls	r2, r3
 80014c0:	0013      	movs	r3, r2
 80014c2:	43da      	mvns	r2, r3
 80014c4:	693b      	ldr	r3, [r7, #16]
 80014c6:	4013      	ands	r3, r2
 80014c8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80014ca:	683b      	ldr	r3, [r7, #0]
 80014cc:	685b      	ldr	r3, [r3, #4]
 80014ce:	091b      	lsrs	r3, r3, #4
 80014d0:	2201      	movs	r2, #1
 80014d2:	401a      	ands	r2, r3
 80014d4:	697b      	ldr	r3, [r7, #20]
 80014d6:	409a      	lsls	r2, r3
 80014d8:	0013      	movs	r3, r2
 80014da:	693a      	ldr	r2, [r7, #16]
 80014dc:	4313      	orrs	r3, r2
 80014de:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	693a      	ldr	r2, [r7, #16]
 80014e4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80014e6:	683b      	ldr	r3, [r7, #0]
 80014e8:	685b      	ldr	r3, [r3, #4]
 80014ea:	2203      	movs	r2, #3
 80014ec:	4013      	ands	r3, r2
 80014ee:	2b03      	cmp	r3, #3
 80014f0:	d017      	beq.n	8001522 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	68db      	ldr	r3, [r3, #12]
 80014f6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80014f8:	697b      	ldr	r3, [r7, #20]
 80014fa:	005b      	lsls	r3, r3, #1
 80014fc:	2203      	movs	r2, #3
 80014fe:	409a      	lsls	r2, r3
 8001500:	0013      	movs	r3, r2
 8001502:	43da      	mvns	r2, r3
 8001504:	693b      	ldr	r3, [r7, #16]
 8001506:	4013      	ands	r3, r2
 8001508:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800150a:	683b      	ldr	r3, [r7, #0]
 800150c:	689a      	ldr	r2, [r3, #8]
 800150e:	697b      	ldr	r3, [r7, #20]
 8001510:	005b      	lsls	r3, r3, #1
 8001512:	409a      	lsls	r2, r3
 8001514:	0013      	movs	r3, r2
 8001516:	693a      	ldr	r2, [r7, #16]
 8001518:	4313      	orrs	r3, r2
 800151a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	693a      	ldr	r2, [r7, #16]
 8001520:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001522:	683b      	ldr	r3, [r7, #0]
 8001524:	685b      	ldr	r3, [r3, #4]
 8001526:	2203      	movs	r2, #3
 8001528:	4013      	ands	r3, r2
 800152a:	2b02      	cmp	r3, #2
 800152c:	d123      	bne.n	8001576 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800152e:	697b      	ldr	r3, [r7, #20]
 8001530:	08da      	lsrs	r2, r3, #3
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	3208      	adds	r2, #8
 8001536:	0092      	lsls	r2, r2, #2
 8001538:	58d3      	ldr	r3, [r2, r3]
 800153a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800153c:	697b      	ldr	r3, [r7, #20]
 800153e:	2207      	movs	r2, #7
 8001540:	4013      	ands	r3, r2
 8001542:	009b      	lsls	r3, r3, #2
 8001544:	220f      	movs	r2, #15
 8001546:	409a      	lsls	r2, r3
 8001548:	0013      	movs	r3, r2
 800154a:	43da      	mvns	r2, r3
 800154c:	693b      	ldr	r3, [r7, #16]
 800154e:	4013      	ands	r3, r2
 8001550:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001552:	683b      	ldr	r3, [r7, #0]
 8001554:	691a      	ldr	r2, [r3, #16]
 8001556:	697b      	ldr	r3, [r7, #20]
 8001558:	2107      	movs	r1, #7
 800155a:	400b      	ands	r3, r1
 800155c:	009b      	lsls	r3, r3, #2
 800155e:	409a      	lsls	r2, r3
 8001560:	0013      	movs	r3, r2
 8001562:	693a      	ldr	r2, [r7, #16]
 8001564:	4313      	orrs	r3, r2
 8001566:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001568:	697b      	ldr	r3, [r7, #20]
 800156a:	08da      	lsrs	r2, r3, #3
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	3208      	adds	r2, #8
 8001570:	0092      	lsls	r2, r2, #2
 8001572:	6939      	ldr	r1, [r7, #16]
 8001574:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800157c:	697b      	ldr	r3, [r7, #20]
 800157e:	005b      	lsls	r3, r3, #1
 8001580:	2203      	movs	r2, #3
 8001582:	409a      	lsls	r2, r3
 8001584:	0013      	movs	r3, r2
 8001586:	43da      	mvns	r2, r3
 8001588:	693b      	ldr	r3, [r7, #16]
 800158a:	4013      	ands	r3, r2
 800158c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800158e:	683b      	ldr	r3, [r7, #0]
 8001590:	685b      	ldr	r3, [r3, #4]
 8001592:	2203      	movs	r2, #3
 8001594:	401a      	ands	r2, r3
 8001596:	697b      	ldr	r3, [r7, #20]
 8001598:	005b      	lsls	r3, r3, #1
 800159a:	409a      	lsls	r2, r3
 800159c:	0013      	movs	r3, r2
 800159e:	693a      	ldr	r2, [r7, #16]
 80015a0:	4313      	orrs	r3, r2
 80015a2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	693a      	ldr	r2, [r7, #16]
 80015a8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80015aa:	683b      	ldr	r3, [r7, #0]
 80015ac:	685a      	ldr	r2, [r3, #4]
 80015ae:	23c0      	movs	r3, #192	; 0xc0
 80015b0:	029b      	lsls	r3, r3, #10
 80015b2:	4013      	ands	r3, r2
 80015b4:	d100      	bne.n	80015b8 <HAL_GPIO_Init+0x174>
 80015b6:	e098      	b.n	80016ea <HAL_GPIO_Init+0x2a6>
      {
        temp = EXTI->EXTICR[position >> 2u];
 80015b8:	4a53      	ldr	r2, [pc, #332]	; (8001708 <HAL_GPIO_Init+0x2c4>)
 80015ba:	697b      	ldr	r3, [r7, #20]
 80015bc:	089b      	lsrs	r3, r3, #2
 80015be:	3318      	adds	r3, #24
 80015c0:	009b      	lsls	r3, r3, #2
 80015c2:	589b      	ldr	r3, [r3, r2]
 80015c4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80015c6:	697b      	ldr	r3, [r7, #20]
 80015c8:	2203      	movs	r2, #3
 80015ca:	4013      	ands	r3, r2
 80015cc:	00db      	lsls	r3, r3, #3
 80015ce:	220f      	movs	r2, #15
 80015d0:	409a      	lsls	r2, r3
 80015d2:	0013      	movs	r3, r2
 80015d4:	43da      	mvns	r2, r3
 80015d6:	693b      	ldr	r3, [r7, #16]
 80015d8:	4013      	ands	r3, r2
 80015da:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80015dc:	687a      	ldr	r2, [r7, #4]
 80015de:	23a0      	movs	r3, #160	; 0xa0
 80015e0:	05db      	lsls	r3, r3, #23
 80015e2:	429a      	cmp	r2, r3
 80015e4:	d019      	beq.n	800161a <HAL_GPIO_Init+0x1d6>
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	4a48      	ldr	r2, [pc, #288]	; (800170c <HAL_GPIO_Init+0x2c8>)
 80015ea:	4293      	cmp	r3, r2
 80015ec:	d013      	beq.n	8001616 <HAL_GPIO_Init+0x1d2>
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	4a47      	ldr	r2, [pc, #284]	; (8001710 <HAL_GPIO_Init+0x2cc>)
 80015f2:	4293      	cmp	r3, r2
 80015f4:	d00d      	beq.n	8001612 <HAL_GPIO_Init+0x1ce>
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	4a46      	ldr	r2, [pc, #280]	; (8001714 <HAL_GPIO_Init+0x2d0>)
 80015fa:	4293      	cmp	r3, r2
 80015fc:	d007      	beq.n	800160e <HAL_GPIO_Init+0x1ca>
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	4a45      	ldr	r2, [pc, #276]	; (8001718 <HAL_GPIO_Init+0x2d4>)
 8001602:	4293      	cmp	r3, r2
 8001604:	d101      	bne.n	800160a <HAL_GPIO_Init+0x1c6>
 8001606:	2304      	movs	r3, #4
 8001608:	e008      	b.n	800161c <HAL_GPIO_Init+0x1d8>
 800160a:	2305      	movs	r3, #5
 800160c:	e006      	b.n	800161c <HAL_GPIO_Init+0x1d8>
 800160e:	2303      	movs	r3, #3
 8001610:	e004      	b.n	800161c <HAL_GPIO_Init+0x1d8>
 8001612:	2302      	movs	r3, #2
 8001614:	e002      	b.n	800161c <HAL_GPIO_Init+0x1d8>
 8001616:	2301      	movs	r3, #1
 8001618:	e000      	b.n	800161c <HAL_GPIO_Init+0x1d8>
 800161a:	2300      	movs	r3, #0
 800161c:	697a      	ldr	r2, [r7, #20]
 800161e:	2103      	movs	r1, #3
 8001620:	400a      	ands	r2, r1
 8001622:	00d2      	lsls	r2, r2, #3
 8001624:	4093      	lsls	r3, r2
 8001626:	693a      	ldr	r2, [r7, #16]
 8001628:	4313      	orrs	r3, r2
 800162a:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 800162c:	4936      	ldr	r1, [pc, #216]	; (8001708 <HAL_GPIO_Init+0x2c4>)
 800162e:	697b      	ldr	r3, [r7, #20]
 8001630:	089b      	lsrs	r3, r3, #2
 8001632:	3318      	adds	r3, #24
 8001634:	009b      	lsls	r3, r3, #2
 8001636:	693a      	ldr	r2, [r7, #16]
 8001638:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800163a:	4b33      	ldr	r3, [pc, #204]	; (8001708 <HAL_GPIO_Init+0x2c4>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	43da      	mvns	r2, r3
 8001644:	693b      	ldr	r3, [r7, #16]
 8001646:	4013      	ands	r3, r2
 8001648:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800164a:	683b      	ldr	r3, [r7, #0]
 800164c:	685a      	ldr	r2, [r3, #4]
 800164e:	2380      	movs	r3, #128	; 0x80
 8001650:	035b      	lsls	r3, r3, #13
 8001652:	4013      	ands	r3, r2
 8001654:	d003      	beq.n	800165e <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8001656:	693a      	ldr	r2, [r7, #16]
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	4313      	orrs	r3, r2
 800165c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800165e:	4b2a      	ldr	r3, [pc, #168]	; (8001708 <HAL_GPIO_Init+0x2c4>)
 8001660:	693a      	ldr	r2, [r7, #16]
 8001662:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8001664:	4b28      	ldr	r3, [pc, #160]	; (8001708 <HAL_GPIO_Init+0x2c4>)
 8001666:	685b      	ldr	r3, [r3, #4]
 8001668:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	43da      	mvns	r2, r3
 800166e:	693b      	ldr	r3, [r7, #16]
 8001670:	4013      	ands	r3, r2
 8001672:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001674:	683b      	ldr	r3, [r7, #0]
 8001676:	685a      	ldr	r2, [r3, #4]
 8001678:	2380      	movs	r3, #128	; 0x80
 800167a:	039b      	lsls	r3, r3, #14
 800167c:	4013      	ands	r3, r2
 800167e:	d003      	beq.n	8001688 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 8001680:	693a      	ldr	r2, [r7, #16]
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	4313      	orrs	r3, r2
 8001686:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001688:	4b1f      	ldr	r3, [pc, #124]	; (8001708 <HAL_GPIO_Init+0x2c4>)
 800168a:	693a      	ldr	r2, [r7, #16]
 800168c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800168e:	4a1e      	ldr	r2, [pc, #120]	; (8001708 <HAL_GPIO_Init+0x2c4>)
 8001690:	2384      	movs	r3, #132	; 0x84
 8001692:	58d3      	ldr	r3, [r2, r3]
 8001694:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	43da      	mvns	r2, r3
 800169a:	693b      	ldr	r3, [r7, #16]
 800169c:	4013      	ands	r3, r2
 800169e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80016a0:	683b      	ldr	r3, [r7, #0]
 80016a2:	685a      	ldr	r2, [r3, #4]
 80016a4:	2380      	movs	r3, #128	; 0x80
 80016a6:	029b      	lsls	r3, r3, #10
 80016a8:	4013      	ands	r3, r2
 80016aa:	d003      	beq.n	80016b4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80016ac:	693a      	ldr	r2, [r7, #16]
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	4313      	orrs	r3, r2
 80016b2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80016b4:	4914      	ldr	r1, [pc, #80]	; (8001708 <HAL_GPIO_Init+0x2c4>)
 80016b6:	2284      	movs	r2, #132	; 0x84
 80016b8:	693b      	ldr	r3, [r7, #16]
 80016ba:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 80016bc:	4a12      	ldr	r2, [pc, #72]	; (8001708 <HAL_GPIO_Init+0x2c4>)
 80016be:	2380      	movs	r3, #128	; 0x80
 80016c0:	58d3      	ldr	r3, [r2, r3]
 80016c2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	43da      	mvns	r2, r3
 80016c8:	693b      	ldr	r3, [r7, #16]
 80016ca:	4013      	ands	r3, r2
 80016cc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80016ce:	683b      	ldr	r3, [r7, #0]
 80016d0:	685a      	ldr	r2, [r3, #4]
 80016d2:	2380      	movs	r3, #128	; 0x80
 80016d4:	025b      	lsls	r3, r3, #9
 80016d6:	4013      	ands	r3, r2
 80016d8:	d003      	beq.n	80016e2 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 80016da:	693a      	ldr	r2, [r7, #16]
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	4313      	orrs	r3, r2
 80016e0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80016e2:	4909      	ldr	r1, [pc, #36]	; (8001708 <HAL_GPIO_Init+0x2c4>)
 80016e4:	2280      	movs	r2, #128	; 0x80
 80016e6:	693b      	ldr	r3, [r7, #16]
 80016e8:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 80016ea:	697b      	ldr	r3, [r7, #20]
 80016ec:	3301      	adds	r3, #1
 80016ee:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016f0:	683b      	ldr	r3, [r7, #0]
 80016f2:	681a      	ldr	r2, [r3, #0]
 80016f4:	697b      	ldr	r3, [r7, #20]
 80016f6:	40da      	lsrs	r2, r3
 80016f8:	1e13      	subs	r3, r2, #0
 80016fa:	d000      	beq.n	80016fe <HAL_GPIO_Init+0x2ba>
 80016fc:	e6aa      	b.n	8001454 <HAL_GPIO_Init+0x10>
  }
}
 80016fe:	46c0      	nop			; (mov r8, r8)
 8001700:	46c0      	nop			; (mov r8, r8)
 8001702:	46bd      	mov	sp, r7
 8001704:	b006      	add	sp, #24
 8001706:	bd80      	pop	{r7, pc}
 8001708:	40021800 	.word	0x40021800
 800170c:	50000400 	.word	0x50000400
 8001710:	50000800 	.word	0x50000800
 8001714:	50000c00 	.word	0x50000c00
 8001718:	50001000 	.word	0x50001000

0800171c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b084      	sub	sp, #16
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
 8001724:	000a      	movs	r2, r1
 8001726:	1cbb      	adds	r3, r7, #2
 8001728:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	691b      	ldr	r3, [r3, #16]
 800172e:	1cba      	adds	r2, r7, #2
 8001730:	8812      	ldrh	r2, [r2, #0]
 8001732:	4013      	ands	r3, r2
 8001734:	d004      	beq.n	8001740 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8001736:	230f      	movs	r3, #15
 8001738:	18fb      	adds	r3, r7, r3
 800173a:	2201      	movs	r2, #1
 800173c:	701a      	strb	r2, [r3, #0]
 800173e:	e003      	b.n	8001748 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001740:	230f      	movs	r3, #15
 8001742:	18fb      	adds	r3, r7, r3
 8001744:	2200      	movs	r2, #0
 8001746:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8001748:	230f      	movs	r3, #15
 800174a:	18fb      	adds	r3, r7, r3
 800174c:	781b      	ldrb	r3, [r3, #0]
}
 800174e:	0018      	movs	r0, r3
 8001750:	46bd      	mov	sp, r7
 8001752:	b004      	add	sp, #16
 8001754:	bd80      	pop	{r7, pc}

08001756 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001756:	b580      	push	{r7, lr}
 8001758:	b082      	sub	sp, #8
 800175a:	af00      	add	r7, sp, #0
 800175c:	6078      	str	r0, [r7, #4]
 800175e:	0008      	movs	r0, r1
 8001760:	0011      	movs	r1, r2
 8001762:	1cbb      	adds	r3, r7, #2
 8001764:	1c02      	adds	r2, r0, #0
 8001766:	801a      	strh	r2, [r3, #0]
 8001768:	1c7b      	adds	r3, r7, #1
 800176a:	1c0a      	adds	r2, r1, #0
 800176c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800176e:	1c7b      	adds	r3, r7, #1
 8001770:	781b      	ldrb	r3, [r3, #0]
 8001772:	2b00      	cmp	r3, #0
 8001774:	d004      	beq.n	8001780 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001776:	1cbb      	adds	r3, r7, #2
 8001778:	881a      	ldrh	r2, [r3, #0]
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800177e:	e003      	b.n	8001788 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001780:	1cbb      	adds	r3, r7, #2
 8001782:	881a      	ldrh	r2, [r3, #0]
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001788:	46c0      	nop			; (mov r8, r8)
 800178a:	46bd      	mov	sp, r7
 800178c:	b002      	add	sp, #8
 800178e:	bd80      	pop	{r7, pc}

08001790 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b082      	sub	sp, #8
 8001794:	af00      	add	r7, sp, #0
 8001796:	0002      	movs	r2, r0
 8001798:	1dbb      	adds	r3, r7, #6
 800179a:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 800179c:	4b10      	ldr	r3, [pc, #64]	; (80017e0 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 800179e:	68db      	ldr	r3, [r3, #12]
 80017a0:	1dba      	adds	r2, r7, #6
 80017a2:	8812      	ldrh	r2, [r2, #0]
 80017a4:	4013      	ands	r3, r2
 80017a6:	d008      	beq.n	80017ba <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 80017a8:	4b0d      	ldr	r3, [pc, #52]	; (80017e0 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80017aa:	1dba      	adds	r2, r7, #6
 80017ac:	8812      	ldrh	r2, [r2, #0]
 80017ae:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 80017b0:	1dbb      	adds	r3, r7, #6
 80017b2:	881b      	ldrh	r3, [r3, #0]
 80017b4:	0018      	movs	r0, r3
 80017b6:	f000 f815 	bl	80017e4 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 80017ba:	4b09      	ldr	r3, [pc, #36]	; (80017e0 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80017bc:	691b      	ldr	r3, [r3, #16]
 80017be:	1dba      	adds	r2, r7, #6
 80017c0:	8812      	ldrh	r2, [r2, #0]
 80017c2:	4013      	ands	r3, r2
 80017c4:	d008      	beq.n	80017d8 <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 80017c6:	4b06      	ldr	r3, [pc, #24]	; (80017e0 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80017c8:	1dba      	adds	r2, r7, #6
 80017ca:	8812      	ldrh	r2, [r2, #0]
 80017cc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 80017ce:	1dbb      	adds	r3, r7, #6
 80017d0:	881b      	ldrh	r3, [r3, #0]
 80017d2:	0018      	movs	r0, r3
 80017d4:	f000 f810 	bl	80017f8 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 80017d8:	46c0      	nop			; (mov r8, r8)
 80017da:	46bd      	mov	sp, r7
 80017dc:	b002      	add	sp, #8
 80017de:	bd80      	pop	{r7, pc}
 80017e0:	40021800 	.word	0x40021800

080017e4 <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b082      	sub	sp, #8
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	0002      	movs	r2, r0
 80017ec:	1dbb      	adds	r3, r7, #6
 80017ee:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 80017f0:	46c0      	nop			; (mov r8, r8)
 80017f2:	46bd      	mov	sp, r7
 80017f4:	b002      	add	sp, #8
 80017f6:	bd80      	pop	{r7, pc}

080017f8 <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b082      	sub	sp, #8
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	0002      	movs	r2, r0
 8001800:	1dbb      	adds	r3, r7, #6
 8001802:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 8001804:	46c0      	nop			; (mov r8, r8)
 8001806:	46bd      	mov	sp, r7
 8001808:	b002      	add	sp, #8
 800180a:	bd80      	pop	{r7, pc}

0800180c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b084      	sub	sp, #16
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001814:	4b19      	ldr	r3, [pc, #100]	; (800187c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	4a19      	ldr	r2, [pc, #100]	; (8001880 <HAL_PWREx_ControlVoltageScaling+0x74>)
 800181a:	4013      	ands	r3, r2
 800181c:	0019      	movs	r1, r3
 800181e:	4b17      	ldr	r3, [pc, #92]	; (800187c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001820:	687a      	ldr	r2, [r7, #4]
 8001822:	430a      	orrs	r2, r1
 8001824:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001826:	687a      	ldr	r2, [r7, #4]
 8001828:	2380      	movs	r3, #128	; 0x80
 800182a:	009b      	lsls	r3, r3, #2
 800182c:	429a      	cmp	r2, r3
 800182e:	d11f      	bne.n	8001870 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8001830:	4b14      	ldr	r3, [pc, #80]	; (8001884 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8001832:	681a      	ldr	r2, [r3, #0]
 8001834:	0013      	movs	r3, r2
 8001836:	005b      	lsls	r3, r3, #1
 8001838:	189b      	adds	r3, r3, r2
 800183a:	005b      	lsls	r3, r3, #1
 800183c:	4912      	ldr	r1, [pc, #72]	; (8001888 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 800183e:	0018      	movs	r0, r3
 8001840:	f7fe fc68 	bl	8000114 <__udivsi3>
 8001844:	0003      	movs	r3, r0
 8001846:	3301      	adds	r3, #1
 8001848:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800184a:	e008      	b.n	800185e <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	2b00      	cmp	r3, #0
 8001850:	d003      	beq.n	800185a <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	3b01      	subs	r3, #1
 8001856:	60fb      	str	r3, [r7, #12]
 8001858:	e001      	b.n	800185e <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 800185a:	2303      	movs	r3, #3
 800185c:	e009      	b.n	8001872 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800185e:	4b07      	ldr	r3, [pc, #28]	; (800187c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001860:	695a      	ldr	r2, [r3, #20]
 8001862:	2380      	movs	r3, #128	; 0x80
 8001864:	00db      	lsls	r3, r3, #3
 8001866:	401a      	ands	r2, r3
 8001868:	2380      	movs	r3, #128	; 0x80
 800186a:	00db      	lsls	r3, r3, #3
 800186c:	429a      	cmp	r2, r3
 800186e:	d0ed      	beq.n	800184c <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8001870:	2300      	movs	r3, #0
}
 8001872:	0018      	movs	r0, r3
 8001874:	46bd      	mov	sp, r7
 8001876:	b004      	add	sp, #16
 8001878:	bd80      	pop	{r7, pc}
 800187a:	46c0      	nop			; (mov r8, r8)
 800187c:	40007000 	.word	0x40007000
 8001880:	fffff9ff 	.word	0xfffff9ff
 8001884:	20000004 	.word	0x20000004
 8001888:	000f4240 	.word	0x000f4240

0800188c <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8001890:	4b03      	ldr	r3, [pc, #12]	; (80018a0 <LL_RCC_GetAPB1Prescaler+0x14>)
 8001892:	689a      	ldr	r2, [r3, #8]
 8001894:	23e0      	movs	r3, #224	; 0xe0
 8001896:	01db      	lsls	r3, r3, #7
 8001898:	4013      	ands	r3, r2
}
 800189a:	0018      	movs	r0, r3
 800189c:	46bd      	mov	sp, r7
 800189e:	bd80      	pop	{r7, pc}
 80018a0:	40021000 	.word	0x40021000

080018a4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b088      	sub	sp, #32
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d102      	bne.n	80018b8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80018b2:	2301      	movs	r3, #1
 80018b4:	f000 fb50 	bl	8001f58 <HAL_RCC_OscConfig+0x6b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	2201      	movs	r2, #1
 80018be:	4013      	ands	r3, r2
 80018c0:	d100      	bne.n	80018c4 <HAL_RCC_OscConfig+0x20>
 80018c2:	e07c      	b.n	80019be <HAL_RCC_OscConfig+0x11a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80018c4:	4bc3      	ldr	r3, [pc, #780]	; (8001bd4 <HAL_RCC_OscConfig+0x330>)
 80018c6:	689b      	ldr	r3, [r3, #8]
 80018c8:	2238      	movs	r2, #56	; 0x38
 80018ca:	4013      	ands	r3, r2
 80018cc:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80018ce:	4bc1      	ldr	r3, [pc, #772]	; (8001bd4 <HAL_RCC_OscConfig+0x330>)
 80018d0:	68db      	ldr	r3, [r3, #12]
 80018d2:	2203      	movs	r2, #3
 80018d4:	4013      	ands	r3, r2
 80018d6:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80018d8:	69bb      	ldr	r3, [r7, #24]
 80018da:	2b10      	cmp	r3, #16
 80018dc:	d102      	bne.n	80018e4 <HAL_RCC_OscConfig+0x40>
 80018de:	697b      	ldr	r3, [r7, #20]
 80018e0:	2b03      	cmp	r3, #3
 80018e2:	d002      	beq.n	80018ea <HAL_RCC_OscConfig+0x46>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 80018e4:	69bb      	ldr	r3, [r7, #24]
 80018e6:	2b08      	cmp	r3, #8
 80018e8:	d10b      	bne.n	8001902 <HAL_RCC_OscConfig+0x5e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018ea:	4bba      	ldr	r3, [pc, #744]	; (8001bd4 <HAL_RCC_OscConfig+0x330>)
 80018ec:	681a      	ldr	r2, [r3, #0]
 80018ee:	2380      	movs	r3, #128	; 0x80
 80018f0:	029b      	lsls	r3, r3, #10
 80018f2:	4013      	ands	r3, r2
 80018f4:	d062      	beq.n	80019bc <HAL_RCC_OscConfig+0x118>
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	685b      	ldr	r3, [r3, #4]
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d15e      	bne.n	80019bc <HAL_RCC_OscConfig+0x118>
      {
        return HAL_ERROR;
 80018fe:	2301      	movs	r3, #1
 8001900:	e32a      	b.n	8001f58 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	685a      	ldr	r2, [r3, #4]
 8001906:	2380      	movs	r3, #128	; 0x80
 8001908:	025b      	lsls	r3, r3, #9
 800190a:	429a      	cmp	r2, r3
 800190c:	d107      	bne.n	800191e <HAL_RCC_OscConfig+0x7a>
 800190e:	4bb1      	ldr	r3, [pc, #708]	; (8001bd4 <HAL_RCC_OscConfig+0x330>)
 8001910:	681a      	ldr	r2, [r3, #0]
 8001912:	4bb0      	ldr	r3, [pc, #704]	; (8001bd4 <HAL_RCC_OscConfig+0x330>)
 8001914:	2180      	movs	r1, #128	; 0x80
 8001916:	0249      	lsls	r1, r1, #9
 8001918:	430a      	orrs	r2, r1
 800191a:	601a      	str	r2, [r3, #0]
 800191c:	e020      	b.n	8001960 <HAL_RCC_OscConfig+0xbc>
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	685a      	ldr	r2, [r3, #4]
 8001922:	23a0      	movs	r3, #160	; 0xa0
 8001924:	02db      	lsls	r3, r3, #11
 8001926:	429a      	cmp	r2, r3
 8001928:	d10e      	bne.n	8001948 <HAL_RCC_OscConfig+0xa4>
 800192a:	4baa      	ldr	r3, [pc, #680]	; (8001bd4 <HAL_RCC_OscConfig+0x330>)
 800192c:	681a      	ldr	r2, [r3, #0]
 800192e:	4ba9      	ldr	r3, [pc, #676]	; (8001bd4 <HAL_RCC_OscConfig+0x330>)
 8001930:	2180      	movs	r1, #128	; 0x80
 8001932:	02c9      	lsls	r1, r1, #11
 8001934:	430a      	orrs	r2, r1
 8001936:	601a      	str	r2, [r3, #0]
 8001938:	4ba6      	ldr	r3, [pc, #664]	; (8001bd4 <HAL_RCC_OscConfig+0x330>)
 800193a:	681a      	ldr	r2, [r3, #0]
 800193c:	4ba5      	ldr	r3, [pc, #660]	; (8001bd4 <HAL_RCC_OscConfig+0x330>)
 800193e:	2180      	movs	r1, #128	; 0x80
 8001940:	0249      	lsls	r1, r1, #9
 8001942:	430a      	orrs	r2, r1
 8001944:	601a      	str	r2, [r3, #0]
 8001946:	e00b      	b.n	8001960 <HAL_RCC_OscConfig+0xbc>
 8001948:	4ba2      	ldr	r3, [pc, #648]	; (8001bd4 <HAL_RCC_OscConfig+0x330>)
 800194a:	681a      	ldr	r2, [r3, #0]
 800194c:	4ba1      	ldr	r3, [pc, #644]	; (8001bd4 <HAL_RCC_OscConfig+0x330>)
 800194e:	49a2      	ldr	r1, [pc, #648]	; (8001bd8 <HAL_RCC_OscConfig+0x334>)
 8001950:	400a      	ands	r2, r1
 8001952:	601a      	str	r2, [r3, #0]
 8001954:	4b9f      	ldr	r3, [pc, #636]	; (8001bd4 <HAL_RCC_OscConfig+0x330>)
 8001956:	681a      	ldr	r2, [r3, #0]
 8001958:	4b9e      	ldr	r3, [pc, #632]	; (8001bd4 <HAL_RCC_OscConfig+0x330>)
 800195a:	49a0      	ldr	r1, [pc, #640]	; (8001bdc <HAL_RCC_OscConfig+0x338>)
 800195c:	400a      	ands	r2, r1
 800195e:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	685b      	ldr	r3, [r3, #4]
 8001964:	2b00      	cmp	r3, #0
 8001966:	d014      	beq.n	8001992 <HAL_RCC_OscConfig+0xee>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001968:	f7ff fc60 	bl	800122c <HAL_GetTick>
 800196c:	0003      	movs	r3, r0
 800196e:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001970:	e008      	b.n	8001984 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001972:	f7ff fc5b 	bl	800122c <HAL_GetTick>
 8001976:	0002      	movs	r2, r0
 8001978:	693b      	ldr	r3, [r7, #16]
 800197a:	1ad3      	subs	r3, r2, r3
 800197c:	2b64      	cmp	r3, #100	; 0x64
 800197e:	d901      	bls.n	8001984 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 8001980:	2303      	movs	r3, #3
 8001982:	e2e9      	b.n	8001f58 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001984:	4b93      	ldr	r3, [pc, #588]	; (8001bd4 <HAL_RCC_OscConfig+0x330>)
 8001986:	681a      	ldr	r2, [r3, #0]
 8001988:	2380      	movs	r3, #128	; 0x80
 800198a:	029b      	lsls	r3, r3, #10
 800198c:	4013      	ands	r3, r2
 800198e:	d0f0      	beq.n	8001972 <HAL_RCC_OscConfig+0xce>
 8001990:	e015      	b.n	80019be <HAL_RCC_OscConfig+0x11a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001992:	f7ff fc4b 	bl	800122c <HAL_GetTick>
 8001996:	0003      	movs	r3, r0
 8001998:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800199a:	e008      	b.n	80019ae <HAL_RCC_OscConfig+0x10a>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800199c:	f7ff fc46 	bl	800122c <HAL_GetTick>
 80019a0:	0002      	movs	r2, r0
 80019a2:	693b      	ldr	r3, [r7, #16]
 80019a4:	1ad3      	subs	r3, r2, r3
 80019a6:	2b64      	cmp	r3, #100	; 0x64
 80019a8:	d901      	bls.n	80019ae <HAL_RCC_OscConfig+0x10a>
          {
            return HAL_TIMEOUT;
 80019aa:	2303      	movs	r3, #3
 80019ac:	e2d4      	b.n	8001f58 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80019ae:	4b89      	ldr	r3, [pc, #548]	; (8001bd4 <HAL_RCC_OscConfig+0x330>)
 80019b0:	681a      	ldr	r2, [r3, #0]
 80019b2:	2380      	movs	r3, #128	; 0x80
 80019b4:	029b      	lsls	r3, r3, #10
 80019b6:	4013      	ands	r3, r2
 80019b8:	d1f0      	bne.n	800199c <HAL_RCC_OscConfig+0xf8>
 80019ba:	e000      	b.n	80019be <HAL_RCC_OscConfig+0x11a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019bc:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	2202      	movs	r2, #2
 80019c4:	4013      	ands	r3, r2
 80019c6:	d100      	bne.n	80019ca <HAL_RCC_OscConfig+0x126>
 80019c8:	e099      	b.n	8001afe <HAL_RCC_OscConfig+0x25a>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80019ca:	4b82      	ldr	r3, [pc, #520]	; (8001bd4 <HAL_RCC_OscConfig+0x330>)
 80019cc:	689b      	ldr	r3, [r3, #8]
 80019ce:	2238      	movs	r2, #56	; 0x38
 80019d0:	4013      	ands	r3, r2
 80019d2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80019d4:	4b7f      	ldr	r3, [pc, #508]	; (8001bd4 <HAL_RCC_OscConfig+0x330>)
 80019d6:	68db      	ldr	r3, [r3, #12]
 80019d8:	2203      	movs	r2, #3
 80019da:	4013      	ands	r3, r2
 80019dc:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 80019de:	69bb      	ldr	r3, [r7, #24]
 80019e0:	2b10      	cmp	r3, #16
 80019e2:	d102      	bne.n	80019ea <HAL_RCC_OscConfig+0x146>
 80019e4:	697b      	ldr	r3, [r7, #20]
 80019e6:	2b02      	cmp	r3, #2
 80019e8:	d002      	beq.n	80019f0 <HAL_RCC_OscConfig+0x14c>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 80019ea:	69bb      	ldr	r3, [r7, #24]
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d135      	bne.n	8001a5c <HAL_RCC_OscConfig+0x1b8>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80019f0:	4b78      	ldr	r3, [pc, #480]	; (8001bd4 <HAL_RCC_OscConfig+0x330>)
 80019f2:	681a      	ldr	r2, [r3, #0]
 80019f4:	2380      	movs	r3, #128	; 0x80
 80019f6:	00db      	lsls	r3, r3, #3
 80019f8:	4013      	ands	r3, r2
 80019fa:	d005      	beq.n	8001a08 <HAL_RCC_OscConfig+0x164>
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	68db      	ldr	r3, [r3, #12]
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d101      	bne.n	8001a08 <HAL_RCC_OscConfig+0x164>
      {
        return HAL_ERROR;
 8001a04:	2301      	movs	r3, #1
 8001a06:	e2a7      	b.n	8001f58 <HAL_RCC_OscConfig+0x6b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a08:	4b72      	ldr	r3, [pc, #456]	; (8001bd4 <HAL_RCC_OscConfig+0x330>)
 8001a0a:	685b      	ldr	r3, [r3, #4]
 8001a0c:	4a74      	ldr	r2, [pc, #464]	; (8001be0 <HAL_RCC_OscConfig+0x33c>)
 8001a0e:	4013      	ands	r3, r2
 8001a10:	0019      	movs	r1, r3
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	695b      	ldr	r3, [r3, #20]
 8001a16:	021a      	lsls	r2, r3, #8
 8001a18:	4b6e      	ldr	r3, [pc, #440]	; (8001bd4 <HAL_RCC_OscConfig+0x330>)
 8001a1a:	430a      	orrs	r2, r1
 8001a1c:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001a1e:	69bb      	ldr	r3, [r7, #24]
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d112      	bne.n	8001a4a <HAL_RCC_OscConfig+0x1a6>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001a24:	4b6b      	ldr	r3, [pc, #428]	; (8001bd4 <HAL_RCC_OscConfig+0x330>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	4a6e      	ldr	r2, [pc, #440]	; (8001be4 <HAL_RCC_OscConfig+0x340>)
 8001a2a:	4013      	ands	r3, r2
 8001a2c:	0019      	movs	r1, r3
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	691a      	ldr	r2, [r3, #16]
 8001a32:	4b68      	ldr	r3, [pc, #416]	; (8001bd4 <HAL_RCC_OscConfig+0x330>)
 8001a34:	430a      	orrs	r2, r1
 8001a36:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8001a38:	4b66      	ldr	r3, [pc, #408]	; (8001bd4 <HAL_RCC_OscConfig+0x330>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	0adb      	lsrs	r3, r3, #11
 8001a3e:	2207      	movs	r2, #7
 8001a40:	4013      	ands	r3, r2
 8001a42:	4a69      	ldr	r2, [pc, #420]	; (8001be8 <HAL_RCC_OscConfig+0x344>)
 8001a44:	40da      	lsrs	r2, r3
 8001a46:	4b69      	ldr	r3, [pc, #420]	; (8001bec <HAL_RCC_OscConfig+0x348>)
 8001a48:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001a4a:	4b69      	ldr	r3, [pc, #420]	; (8001bf0 <HAL_RCC_OscConfig+0x34c>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	0018      	movs	r0, r3
 8001a50:	f7ff fb90 	bl	8001174 <HAL_InitTick>
 8001a54:	1e03      	subs	r3, r0, #0
 8001a56:	d051      	beq.n	8001afc <HAL_RCC_OscConfig+0x258>
        {
          return HAL_ERROR;
 8001a58:	2301      	movs	r3, #1
 8001a5a:	e27d      	b.n	8001f58 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	68db      	ldr	r3, [r3, #12]
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d030      	beq.n	8001ac6 <HAL_RCC_OscConfig+0x222>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001a64:	4b5b      	ldr	r3, [pc, #364]	; (8001bd4 <HAL_RCC_OscConfig+0x330>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	4a5e      	ldr	r2, [pc, #376]	; (8001be4 <HAL_RCC_OscConfig+0x340>)
 8001a6a:	4013      	ands	r3, r2
 8001a6c:	0019      	movs	r1, r3
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	691a      	ldr	r2, [r3, #16]
 8001a72:	4b58      	ldr	r3, [pc, #352]	; (8001bd4 <HAL_RCC_OscConfig+0x330>)
 8001a74:	430a      	orrs	r2, r1
 8001a76:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8001a78:	4b56      	ldr	r3, [pc, #344]	; (8001bd4 <HAL_RCC_OscConfig+0x330>)
 8001a7a:	681a      	ldr	r2, [r3, #0]
 8001a7c:	4b55      	ldr	r3, [pc, #340]	; (8001bd4 <HAL_RCC_OscConfig+0x330>)
 8001a7e:	2180      	movs	r1, #128	; 0x80
 8001a80:	0049      	lsls	r1, r1, #1
 8001a82:	430a      	orrs	r2, r1
 8001a84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a86:	f7ff fbd1 	bl	800122c <HAL_GetTick>
 8001a8a:	0003      	movs	r3, r0
 8001a8c:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a8e:	e008      	b.n	8001aa2 <HAL_RCC_OscConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a90:	f7ff fbcc 	bl	800122c <HAL_GetTick>
 8001a94:	0002      	movs	r2, r0
 8001a96:	693b      	ldr	r3, [r7, #16]
 8001a98:	1ad3      	subs	r3, r2, r3
 8001a9a:	2b02      	cmp	r3, #2
 8001a9c:	d901      	bls.n	8001aa2 <HAL_RCC_OscConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 8001a9e:	2303      	movs	r3, #3
 8001aa0:	e25a      	b.n	8001f58 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001aa2:	4b4c      	ldr	r3, [pc, #304]	; (8001bd4 <HAL_RCC_OscConfig+0x330>)
 8001aa4:	681a      	ldr	r2, [r3, #0]
 8001aa6:	2380      	movs	r3, #128	; 0x80
 8001aa8:	00db      	lsls	r3, r3, #3
 8001aaa:	4013      	ands	r3, r2
 8001aac:	d0f0      	beq.n	8001a90 <HAL_RCC_OscConfig+0x1ec>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001aae:	4b49      	ldr	r3, [pc, #292]	; (8001bd4 <HAL_RCC_OscConfig+0x330>)
 8001ab0:	685b      	ldr	r3, [r3, #4]
 8001ab2:	4a4b      	ldr	r2, [pc, #300]	; (8001be0 <HAL_RCC_OscConfig+0x33c>)
 8001ab4:	4013      	ands	r3, r2
 8001ab6:	0019      	movs	r1, r3
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	695b      	ldr	r3, [r3, #20]
 8001abc:	021a      	lsls	r2, r3, #8
 8001abe:	4b45      	ldr	r3, [pc, #276]	; (8001bd4 <HAL_RCC_OscConfig+0x330>)
 8001ac0:	430a      	orrs	r2, r1
 8001ac2:	605a      	str	r2, [r3, #4]
 8001ac4:	e01b      	b.n	8001afe <HAL_RCC_OscConfig+0x25a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8001ac6:	4b43      	ldr	r3, [pc, #268]	; (8001bd4 <HAL_RCC_OscConfig+0x330>)
 8001ac8:	681a      	ldr	r2, [r3, #0]
 8001aca:	4b42      	ldr	r3, [pc, #264]	; (8001bd4 <HAL_RCC_OscConfig+0x330>)
 8001acc:	4949      	ldr	r1, [pc, #292]	; (8001bf4 <HAL_RCC_OscConfig+0x350>)
 8001ace:	400a      	ands	r2, r1
 8001ad0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ad2:	f7ff fbab 	bl	800122c <HAL_GetTick>
 8001ad6:	0003      	movs	r3, r0
 8001ad8:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001ada:	e008      	b.n	8001aee <HAL_RCC_OscConfig+0x24a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001adc:	f7ff fba6 	bl	800122c <HAL_GetTick>
 8001ae0:	0002      	movs	r2, r0
 8001ae2:	693b      	ldr	r3, [r7, #16]
 8001ae4:	1ad3      	subs	r3, r2, r3
 8001ae6:	2b02      	cmp	r3, #2
 8001ae8:	d901      	bls.n	8001aee <HAL_RCC_OscConfig+0x24a>
          {
            return HAL_TIMEOUT;
 8001aea:	2303      	movs	r3, #3
 8001aec:	e234      	b.n	8001f58 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001aee:	4b39      	ldr	r3, [pc, #228]	; (8001bd4 <HAL_RCC_OscConfig+0x330>)
 8001af0:	681a      	ldr	r2, [r3, #0]
 8001af2:	2380      	movs	r3, #128	; 0x80
 8001af4:	00db      	lsls	r3, r3, #3
 8001af6:	4013      	ands	r3, r2
 8001af8:	d1f0      	bne.n	8001adc <HAL_RCC_OscConfig+0x238>
 8001afa:	e000      	b.n	8001afe <HAL_RCC_OscConfig+0x25a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001afc:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	2208      	movs	r2, #8
 8001b04:	4013      	ands	r3, r2
 8001b06:	d047      	beq.n	8001b98 <HAL_RCC_OscConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001b08:	4b32      	ldr	r3, [pc, #200]	; (8001bd4 <HAL_RCC_OscConfig+0x330>)
 8001b0a:	689b      	ldr	r3, [r3, #8]
 8001b0c:	2238      	movs	r2, #56	; 0x38
 8001b0e:	4013      	ands	r3, r2
 8001b10:	2b18      	cmp	r3, #24
 8001b12:	d10a      	bne.n	8001b2a <HAL_RCC_OscConfig+0x286>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8001b14:	4b2f      	ldr	r3, [pc, #188]	; (8001bd4 <HAL_RCC_OscConfig+0x330>)
 8001b16:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b18:	2202      	movs	r2, #2
 8001b1a:	4013      	ands	r3, r2
 8001b1c:	d03c      	beq.n	8001b98 <HAL_RCC_OscConfig+0x2f4>
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	699b      	ldr	r3, [r3, #24]
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d138      	bne.n	8001b98 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 8001b26:	2301      	movs	r3, #1
 8001b28:	e216      	b.n	8001f58 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	699b      	ldr	r3, [r3, #24]
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d019      	beq.n	8001b66 <HAL_RCC_OscConfig+0x2c2>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8001b32:	4b28      	ldr	r3, [pc, #160]	; (8001bd4 <HAL_RCC_OscConfig+0x330>)
 8001b34:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001b36:	4b27      	ldr	r3, [pc, #156]	; (8001bd4 <HAL_RCC_OscConfig+0x330>)
 8001b38:	2101      	movs	r1, #1
 8001b3a:	430a      	orrs	r2, r1
 8001b3c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b3e:	f7ff fb75 	bl	800122c <HAL_GetTick>
 8001b42:	0003      	movs	r3, r0
 8001b44:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001b46:	e008      	b.n	8001b5a <HAL_RCC_OscConfig+0x2b6>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b48:	f7ff fb70 	bl	800122c <HAL_GetTick>
 8001b4c:	0002      	movs	r2, r0
 8001b4e:	693b      	ldr	r3, [r7, #16]
 8001b50:	1ad3      	subs	r3, r2, r3
 8001b52:	2b02      	cmp	r3, #2
 8001b54:	d901      	bls.n	8001b5a <HAL_RCC_OscConfig+0x2b6>
          {
            return HAL_TIMEOUT;
 8001b56:	2303      	movs	r3, #3
 8001b58:	e1fe      	b.n	8001f58 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001b5a:	4b1e      	ldr	r3, [pc, #120]	; (8001bd4 <HAL_RCC_OscConfig+0x330>)
 8001b5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b5e:	2202      	movs	r2, #2
 8001b60:	4013      	ands	r3, r2
 8001b62:	d0f1      	beq.n	8001b48 <HAL_RCC_OscConfig+0x2a4>
 8001b64:	e018      	b.n	8001b98 <HAL_RCC_OscConfig+0x2f4>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8001b66:	4b1b      	ldr	r3, [pc, #108]	; (8001bd4 <HAL_RCC_OscConfig+0x330>)
 8001b68:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001b6a:	4b1a      	ldr	r3, [pc, #104]	; (8001bd4 <HAL_RCC_OscConfig+0x330>)
 8001b6c:	2101      	movs	r1, #1
 8001b6e:	438a      	bics	r2, r1
 8001b70:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b72:	f7ff fb5b 	bl	800122c <HAL_GetTick>
 8001b76:	0003      	movs	r3, r0
 8001b78:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001b7a:	e008      	b.n	8001b8e <HAL_RCC_OscConfig+0x2ea>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b7c:	f7ff fb56 	bl	800122c <HAL_GetTick>
 8001b80:	0002      	movs	r2, r0
 8001b82:	693b      	ldr	r3, [r7, #16]
 8001b84:	1ad3      	subs	r3, r2, r3
 8001b86:	2b02      	cmp	r3, #2
 8001b88:	d901      	bls.n	8001b8e <HAL_RCC_OscConfig+0x2ea>
          {
            return HAL_TIMEOUT;
 8001b8a:	2303      	movs	r3, #3
 8001b8c:	e1e4      	b.n	8001f58 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001b8e:	4b11      	ldr	r3, [pc, #68]	; (8001bd4 <HAL_RCC_OscConfig+0x330>)
 8001b90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b92:	2202      	movs	r2, #2
 8001b94:	4013      	ands	r3, r2
 8001b96:	d1f1      	bne.n	8001b7c <HAL_RCC_OscConfig+0x2d8>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	2204      	movs	r2, #4
 8001b9e:	4013      	ands	r3, r2
 8001ba0:	d100      	bne.n	8001ba4 <HAL_RCC_OscConfig+0x300>
 8001ba2:	e0c7      	b.n	8001d34 <HAL_RCC_OscConfig+0x490>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ba4:	231f      	movs	r3, #31
 8001ba6:	18fb      	adds	r3, r7, r3
 8001ba8:	2200      	movs	r2, #0
 8001baa:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001bac:	4b09      	ldr	r3, [pc, #36]	; (8001bd4 <HAL_RCC_OscConfig+0x330>)
 8001bae:	689b      	ldr	r3, [r3, #8]
 8001bb0:	2238      	movs	r2, #56	; 0x38
 8001bb2:	4013      	ands	r3, r2
 8001bb4:	2b20      	cmp	r3, #32
 8001bb6:	d11f      	bne.n	8001bf8 <HAL_RCC_OscConfig+0x354>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8001bb8:	4b06      	ldr	r3, [pc, #24]	; (8001bd4 <HAL_RCC_OscConfig+0x330>)
 8001bba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bbc:	2202      	movs	r2, #2
 8001bbe:	4013      	ands	r3, r2
 8001bc0:	d100      	bne.n	8001bc4 <HAL_RCC_OscConfig+0x320>
 8001bc2:	e0b7      	b.n	8001d34 <HAL_RCC_OscConfig+0x490>
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	689b      	ldr	r3, [r3, #8]
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d000      	beq.n	8001bce <HAL_RCC_OscConfig+0x32a>
 8001bcc:	e0b2      	b.n	8001d34 <HAL_RCC_OscConfig+0x490>
      {
        return HAL_ERROR;
 8001bce:	2301      	movs	r3, #1
 8001bd0:	e1c2      	b.n	8001f58 <HAL_RCC_OscConfig+0x6b4>
 8001bd2:	46c0      	nop			; (mov r8, r8)
 8001bd4:	40021000 	.word	0x40021000
 8001bd8:	fffeffff 	.word	0xfffeffff
 8001bdc:	fffbffff 	.word	0xfffbffff
 8001be0:	ffff80ff 	.word	0xffff80ff
 8001be4:	ffffc7ff 	.word	0xffffc7ff
 8001be8:	00f42400 	.word	0x00f42400
 8001bec:	20000004 	.word	0x20000004
 8001bf0:	20000008 	.word	0x20000008
 8001bf4:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001bf8:	4bb5      	ldr	r3, [pc, #724]	; (8001ed0 <HAL_RCC_OscConfig+0x62c>)
 8001bfa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001bfc:	2380      	movs	r3, #128	; 0x80
 8001bfe:	055b      	lsls	r3, r3, #21
 8001c00:	4013      	ands	r3, r2
 8001c02:	d101      	bne.n	8001c08 <HAL_RCC_OscConfig+0x364>
 8001c04:	2301      	movs	r3, #1
 8001c06:	e000      	b.n	8001c0a <HAL_RCC_OscConfig+0x366>
 8001c08:	2300      	movs	r3, #0
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d011      	beq.n	8001c32 <HAL_RCC_OscConfig+0x38e>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8001c0e:	4bb0      	ldr	r3, [pc, #704]	; (8001ed0 <HAL_RCC_OscConfig+0x62c>)
 8001c10:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001c12:	4baf      	ldr	r3, [pc, #700]	; (8001ed0 <HAL_RCC_OscConfig+0x62c>)
 8001c14:	2180      	movs	r1, #128	; 0x80
 8001c16:	0549      	lsls	r1, r1, #21
 8001c18:	430a      	orrs	r2, r1
 8001c1a:	63da      	str	r2, [r3, #60]	; 0x3c
 8001c1c:	4bac      	ldr	r3, [pc, #688]	; (8001ed0 <HAL_RCC_OscConfig+0x62c>)
 8001c1e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001c20:	2380      	movs	r3, #128	; 0x80
 8001c22:	055b      	lsls	r3, r3, #21
 8001c24:	4013      	ands	r3, r2
 8001c26:	60fb      	str	r3, [r7, #12]
 8001c28:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8001c2a:	231f      	movs	r3, #31
 8001c2c:	18fb      	adds	r3, r7, r3
 8001c2e:	2201      	movs	r2, #1
 8001c30:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c32:	4ba8      	ldr	r3, [pc, #672]	; (8001ed4 <HAL_RCC_OscConfig+0x630>)
 8001c34:	681a      	ldr	r2, [r3, #0]
 8001c36:	2380      	movs	r3, #128	; 0x80
 8001c38:	005b      	lsls	r3, r3, #1
 8001c3a:	4013      	ands	r3, r2
 8001c3c:	d11a      	bne.n	8001c74 <HAL_RCC_OscConfig+0x3d0>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001c3e:	4ba5      	ldr	r3, [pc, #660]	; (8001ed4 <HAL_RCC_OscConfig+0x630>)
 8001c40:	681a      	ldr	r2, [r3, #0]
 8001c42:	4ba4      	ldr	r3, [pc, #656]	; (8001ed4 <HAL_RCC_OscConfig+0x630>)
 8001c44:	2180      	movs	r1, #128	; 0x80
 8001c46:	0049      	lsls	r1, r1, #1
 8001c48:	430a      	orrs	r2, r1
 8001c4a:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8001c4c:	f7ff faee 	bl	800122c <HAL_GetTick>
 8001c50:	0003      	movs	r3, r0
 8001c52:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c54:	e008      	b.n	8001c68 <HAL_RCC_OscConfig+0x3c4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c56:	f7ff fae9 	bl	800122c <HAL_GetTick>
 8001c5a:	0002      	movs	r2, r0
 8001c5c:	693b      	ldr	r3, [r7, #16]
 8001c5e:	1ad3      	subs	r3, r2, r3
 8001c60:	2b02      	cmp	r3, #2
 8001c62:	d901      	bls.n	8001c68 <HAL_RCC_OscConfig+0x3c4>
          {
            return HAL_TIMEOUT;
 8001c64:	2303      	movs	r3, #3
 8001c66:	e177      	b.n	8001f58 <HAL_RCC_OscConfig+0x6b4>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c68:	4b9a      	ldr	r3, [pc, #616]	; (8001ed4 <HAL_RCC_OscConfig+0x630>)
 8001c6a:	681a      	ldr	r2, [r3, #0]
 8001c6c:	2380      	movs	r3, #128	; 0x80
 8001c6e:	005b      	lsls	r3, r3, #1
 8001c70:	4013      	ands	r3, r2
 8001c72:	d0f0      	beq.n	8001c56 <HAL_RCC_OscConfig+0x3b2>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	689b      	ldr	r3, [r3, #8]
 8001c78:	2b01      	cmp	r3, #1
 8001c7a:	d106      	bne.n	8001c8a <HAL_RCC_OscConfig+0x3e6>
 8001c7c:	4b94      	ldr	r3, [pc, #592]	; (8001ed0 <HAL_RCC_OscConfig+0x62c>)
 8001c7e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001c80:	4b93      	ldr	r3, [pc, #588]	; (8001ed0 <HAL_RCC_OscConfig+0x62c>)
 8001c82:	2101      	movs	r1, #1
 8001c84:	430a      	orrs	r2, r1
 8001c86:	65da      	str	r2, [r3, #92]	; 0x5c
 8001c88:	e01c      	b.n	8001cc4 <HAL_RCC_OscConfig+0x420>
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	689b      	ldr	r3, [r3, #8]
 8001c8e:	2b05      	cmp	r3, #5
 8001c90:	d10c      	bne.n	8001cac <HAL_RCC_OscConfig+0x408>
 8001c92:	4b8f      	ldr	r3, [pc, #572]	; (8001ed0 <HAL_RCC_OscConfig+0x62c>)
 8001c94:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001c96:	4b8e      	ldr	r3, [pc, #568]	; (8001ed0 <HAL_RCC_OscConfig+0x62c>)
 8001c98:	2104      	movs	r1, #4
 8001c9a:	430a      	orrs	r2, r1
 8001c9c:	65da      	str	r2, [r3, #92]	; 0x5c
 8001c9e:	4b8c      	ldr	r3, [pc, #560]	; (8001ed0 <HAL_RCC_OscConfig+0x62c>)
 8001ca0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001ca2:	4b8b      	ldr	r3, [pc, #556]	; (8001ed0 <HAL_RCC_OscConfig+0x62c>)
 8001ca4:	2101      	movs	r1, #1
 8001ca6:	430a      	orrs	r2, r1
 8001ca8:	65da      	str	r2, [r3, #92]	; 0x5c
 8001caa:	e00b      	b.n	8001cc4 <HAL_RCC_OscConfig+0x420>
 8001cac:	4b88      	ldr	r3, [pc, #544]	; (8001ed0 <HAL_RCC_OscConfig+0x62c>)
 8001cae:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001cb0:	4b87      	ldr	r3, [pc, #540]	; (8001ed0 <HAL_RCC_OscConfig+0x62c>)
 8001cb2:	2101      	movs	r1, #1
 8001cb4:	438a      	bics	r2, r1
 8001cb6:	65da      	str	r2, [r3, #92]	; 0x5c
 8001cb8:	4b85      	ldr	r3, [pc, #532]	; (8001ed0 <HAL_RCC_OscConfig+0x62c>)
 8001cba:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001cbc:	4b84      	ldr	r3, [pc, #528]	; (8001ed0 <HAL_RCC_OscConfig+0x62c>)
 8001cbe:	2104      	movs	r1, #4
 8001cc0:	438a      	bics	r2, r1
 8001cc2:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	689b      	ldr	r3, [r3, #8]
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d014      	beq.n	8001cf6 <HAL_RCC_OscConfig+0x452>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ccc:	f7ff faae 	bl	800122c <HAL_GetTick>
 8001cd0:	0003      	movs	r3, r0
 8001cd2:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001cd4:	e009      	b.n	8001cea <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cd6:	f7ff faa9 	bl	800122c <HAL_GetTick>
 8001cda:	0002      	movs	r2, r0
 8001cdc:	693b      	ldr	r3, [r7, #16]
 8001cde:	1ad3      	subs	r3, r2, r3
 8001ce0:	4a7d      	ldr	r2, [pc, #500]	; (8001ed8 <HAL_RCC_OscConfig+0x634>)
 8001ce2:	4293      	cmp	r3, r2
 8001ce4:	d901      	bls.n	8001cea <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 8001ce6:	2303      	movs	r3, #3
 8001ce8:	e136      	b.n	8001f58 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001cea:	4b79      	ldr	r3, [pc, #484]	; (8001ed0 <HAL_RCC_OscConfig+0x62c>)
 8001cec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cee:	2202      	movs	r2, #2
 8001cf0:	4013      	ands	r3, r2
 8001cf2:	d0f0      	beq.n	8001cd6 <HAL_RCC_OscConfig+0x432>
 8001cf4:	e013      	b.n	8001d1e <HAL_RCC_OscConfig+0x47a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cf6:	f7ff fa99 	bl	800122c <HAL_GetTick>
 8001cfa:	0003      	movs	r3, r0
 8001cfc:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001cfe:	e009      	b.n	8001d14 <HAL_RCC_OscConfig+0x470>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d00:	f7ff fa94 	bl	800122c <HAL_GetTick>
 8001d04:	0002      	movs	r2, r0
 8001d06:	693b      	ldr	r3, [r7, #16]
 8001d08:	1ad3      	subs	r3, r2, r3
 8001d0a:	4a73      	ldr	r2, [pc, #460]	; (8001ed8 <HAL_RCC_OscConfig+0x634>)
 8001d0c:	4293      	cmp	r3, r2
 8001d0e:	d901      	bls.n	8001d14 <HAL_RCC_OscConfig+0x470>
          {
            return HAL_TIMEOUT;
 8001d10:	2303      	movs	r3, #3
 8001d12:	e121      	b.n	8001f58 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001d14:	4b6e      	ldr	r3, [pc, #440]	; (8001ed0 <HAL_RCC_OscConfig+0x62c>)
 8001d16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d18:	2202      	movs	r2, #2
 8001d1a:	4013      	ands	r3, r2
 8001d1c:	d1f0      	bne.n	8001d00 <HAL_RCC_OscConfig+0x45c>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8001d1e:	231f      	movs	r3, #31
 8001d20:	18fb      	adds	r3, r7, r3
 8001d22:	781b      	ldrb	r3, [r3, #0]
 8001d24:	2b01      	cmp	r3, #1
 8001d26:	d105      	bne.n	8001d34 <HAL_RCC_OscConfig+0x490>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8001d28:	4b69      	ldr	r3, [pc, #420]	; (8001ed0 <HAL_RCC_OscConfig+0x62c>)
 8001d2a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001d2c:	4b68      	ldr	r3, [pc, #416]	; (8001ed0 <HAL_RCC_OscConfig+0x62c>)
 8001d2e:	496b      	ldr	r1, [pc, #428]	; (8001edc <HAL_RCC_OscConfig+0x638>)
 8001d30:	400a      	ands	r2, r1
 8001d32:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	2220      	movs	r2, #32
 8001d3a:	4013      	ands	r3, r2
 8001d3c:	d039      	beq.n	8001db2 <HAL_RCC_OscConfig+0x50e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	69db      	ldr	r3, [r3, #28]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d01b      	beq.n	8001d7e <HAL_RCC_OscConfig+0x4da>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001d46:	4b62      	ldr	r3, [pc, #392]	; (8001ed0 <HAL_RCC_OscConfig+0x62c>)
 8001d48:	681a      	ldr	r2, [r3, #0]
 8001d4a:	4b61      	ldr	r3, [pc, #388]	; (8001ed0 <HAL_RCC_OscConfig+0x62c>)
 8001d4c:	2180      	movs	r1, #128	; 0x80
 8001d4e:	03c9      	lsls	r1, r1, #15
 8001d50:	430a      	orrs	r2, r1
 8001d52:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d54:	f7ff fa6a 	bl	800122c <HAL_GetTick>
 8001d58:	0003      	movs	r3, r0
 8001d5a:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8001d5c:	e008      	b.n	8001d70 <HAL_RCC_OscConfig+0x4cc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001d5e:	f7ff fa65 	bl	800122c <HAL_GetTick>
 8001d62:	0002      	movs	r2, r0
 8001d64:	693b      	ldr	r3, [r7, #16]
 8001d66:	1ad3      	subs	r3, r2, r3
 8001d68:	2b02      	cmp	r3, #2
 8001d6a:	d901      	bls.n	8001d70 <HAL_RCC_OscConfig+0x4cc>
        {
          return HAL_TIMEOUT;
 8001d6c:	2303      	movs	r3, #3
 8001d6e:	e0f3      	b.n	8001f58 <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8001d70:	4b57      	ldr	r3, [pc, #348]	; (8001ed0 <HAL_RCC_OscConfig+0x62c>)
 8001d72:	681a      	ldr	r2, [r3, #0]
 8001d74:	2380      	movs	r3, #128	; 0x80
 8001d76:	041b      	lsls	r3, r3, #16
 8001d78:	4013      	ands	r3, r2
 8001d7a:	d0f0      	beq.n	8001d5e <HAL_RCC_OscConfig+0x4ba>
 8001d7c:	e019      	b.n	8001db2 <HAL_RCC_OscConfig+0x50e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001d7e:	4b54      	ldr	r3, [pc, #336]	; (8001ed0 <HAL_RCC_OscConfig+0x62c>)
 8001d80:	681a      	ldr	r2, [r3, #0]
 8001d82:	4b53      	ldr	r3, [pc, #332]	; (8001ed0 <HAL_RCC_OscConfig+0x62c>)
 8001d84:	4956      	ldr	r1, [pc, #344]	; (8001ee0 <HAL_RCC_OscConfig+0x63c>)
 8001d86:	400a      	ands	r2, r1
 8001d88:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d8a:	f7ff fa4f 	bl	800122c <HAL_GetTick>
 8001d8e:	0003      	movs	r3, r0
 8001d90:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8001d92:	e008      	b.n	8001da6 <HAL_RCC_OscConfig+0x502>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001d94:	f7ff fa4a 	bl	800122c <HAL_GetTick>
 8001d98:	0002      	movs	r2, r0
 8001d9a:	693b      	ldr	r3, [r7, #16]
 8001d9c:	1ad3      	subs	r3, r2, r3
 8001d9e:	2b02      	cmp	r3, #2
 8001da0:	d901      	bls.n	8001da6 <HAL_RCC_OscConfig+0x502>
        {
          return HAL_TIMEOUT;
 8001da2:	2303      	movs	r3, #3
 8001da4:	e0d8      	b.n	8001f58 <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8001da6:	4b4a      	ldr	r3, [pc, #296]	; (8001ed0 <HAL_RCC_OscConfig+0x62c>)
 8001da8:	681a      	ldr	r2, [r3, #0]
 8001daa:	2380      	movs	r3, #128	; 0x80
 8001dac:	041b      	lsls	r3, r3, #16
 8001dae:	4013      	ands	r3, r2
 8001db0:	d1f0      	bne.n	8001d94 <HAL_RCC_OscConfig+0x4f0>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	6a1b      	ldr	r3, [r3, #32]
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d100      	bne.n	8001dbc <HAL_RCC_OscConfig+0x518>
 8001dba:	e0cc      	b.n	8001f56 <HAL_RCC_OscConfig+0x6b2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001dbc:	4b44      	ldr	r3, [pc, #272]	; (8001ed0 <HAL_RCC_OscConfig+0x62c>)
 8001dbe:	689b      	ldr	r3, [r3, #8]
 8001dc0:	2238      	movs	r2, #56	; 0x38
 8001dc2:	4013      	ands	r3, r2
 8001dc4:	2b10      	cmp	r3, #16
 8001dc6:	d100      	bne.n	8001dca <HAL_RCC_OscConfig+0x526>
 8001dc8:	e07b      	b.n	8001ec2 <HAL_RCC_OscConfig+0x61e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	6a1b      	ldr	r3, [r3, #32]
 8001dce:	2b02      	cmp	r3, #2
 8001dd0:	d156      	bne.n	8001e80 <HAL_RCC_OscConfig+0x5dc>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001dd2:	4b3f      	ldr	r3, [pc, #252]	; (8001ed0 <HAL_RCC_OscConfig+0x62c>)
 8001dd4:	681a      	ldr	r2, [r3, #0]
 8001dd6:	4b3e      	ldr	r3, [pc, #248]	; (8001ed0 <HAL_RCC_OscConfig+0x62c>)
 8001dd8:	4942      	ldr	r1, [pc, #264]	; (8001ee4 <HAL_RCC_OscConfig+0x640>)
 8001dda:	400a      	ands	r2, r1
 8001ddc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dde:	f7ff fa25 	bl	800122c <HAL_GetTick>
 8001de2:	0003      	movs	r3, r0
 8001de4:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001de6:	e008      	b.n	8001dfa <HAL_RCC_OscConfig+0x556>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001de8:	f7ff fa20 	bl	800122c <HAL_GetTick>
 8001dec:	0002      	movs	r2, r0
 8001dee:	693b      	ldr	r3, [r7, #16]
 8001df0:	1ad3      	subs	r3, r2, r3
 8001df2:	2b02      	cmp	r3, #2
 8001df4:	d901      	bls.n	8001dfa <HAL_RCC_OscConfig+0x556>
          {
            return HAL_TIMEOUT;
 8001df6:	2303      	movs	r3, #3
 8001df8:	e0ae      	b.n	8001f58 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001dfa:	4b35      	ldr	r3, [pc, #212]	; (8001ed0 <HAL_RCC_OscConfig+0x62c>)
 8001dfc:	681a      	ldr	r2, [r3, #0]
 8001dfe:	2380      	movs	r3, #128	; 0x80
 8001e00:	049b      	lsls	r3, r3, #18
 8001e02:	4013      	ands	r3, r2
 8001e04:	d1f0      	bne.n	8001de8 <HAL_RCC_OscConfig+0x544>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e06:	4b32      	ldr	r3, [pc, #200]	; (8001ed0 <HAL_RCC_OscConfig+0x62c>)
 8001e08:	68db      	ldr	r3, [r3, #12]
 8001e0a:	4a37      	ldr	r2, [pc, #220]	; (8001ee8 <HAL_RCC_OscConfig+0x644>)
 8001e0c:	4013      	ands	r3, r2
 8001e0e:	0019      	movs	r1, r3
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e18:	431a      	orrs	r2, r3
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e1e:	021b      	lsls	r3, r3, #8
 8001e20:	431a      	orrs	r2, r3
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e26:	431a      	orrs	r2, r3
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e2c:	431a      	orrs	r2, r3
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e32:	431a      	orrs	r2, r3
 8001e34:	4b26      	ldr	r3, [pc, #152]	; (8001ed0 <HAL_RCC_OscConfig+0x62c>)
 8001e36:	430a      	orrs	r2, r1
 8001e38:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e3a:	4b25      	ldr	r3, [pc, #148]	; (8001ed0 <HAL_RCC_OscConfig+0x62c>)
 8001e3c:	681a      	ldr	r2, [r3, #0]
 8001e3e:	4b24      	ldr	r3, [pc, #144]	; (8001ed0 <HAL_RCC_OscConfig+0x62c>)
 8001e40:	2180      	movs	r1, #128	; 0x80
 8001e42:	0449      	lsls	r1, r1, #17
 8001e44:	430a      	orrs	r2, r1
 8001e46:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8001e48:	4b21      	ldr	r3, [pc, #132]	; (8001ed0 <HAL_RCC_OscConfig+0x62c>)
 8001e4a:	68da      	ldr	r2, [r3, #12]
 8001e4c:	4b20      	ldr	r3, [pc, #128]	; (8001ed0 <HAL_RCC_OscConfig+0x62c>)
 8001e4e:	2180      	movs	r1, #128	; 0x80
 8001e50:	0549      	lsls	r1, r1, #21
 8001e52:	430a      	orrs	r2, r1
 8001e54:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e56:	f7ff f9e9 	bl	800122c <HAL_GetTick>
 8001e5a:	0003      	movs	r3, r0
 8001e5c:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e5e:	e008      	b.n	8001e72 <HAL_RCC_OscConfig+0x5ce>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e60:	f7ff f9e4 	bl	800122c <HAL_GetTick>
 8001e64:	0002      	movs	r2, r0
 8001e66:	693b      	ldr	r3, [r7, #16]
 8001e68:	1ad3      	subs	r3, r2, r3
 8001e6a:	2b02      	cmp	r3, #2
 8001e6c:	d901      	bls.n	8001e72 <HAL_RCC_OscConfig+0x5ce>
          {
            return HAL_TIMEOUT;
 8001e6e:	2303      	movs	r3, #3
 8001e70:	e072      	b.n	8001f58 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e72:	4b17      	ldr	r3, [pc, #92]	; (8001ed0 <HAL_RCC_OscConfig+0x62c>)
 8001e74:	681a      	ldr	r2, [r3, #0]
 8001e76:	2380      	movs	r3, #128	; 0x80
 8001e78:	049b      	lsls	r3, r3, #18
 8001e7a:	4013      	ands	r3, r2
 8001e7c:	d0f0      	beq.n	8001e60 <HAL_RCC_OscConfig+0x5bc>
 8001e7e:	e06a      	b.n	8001f56 <HAL_RCC_OscConfig+0x6b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e80:	4b13      	ldr	r3, [pc, #76]	; (8001ed0 <HAL_RCC_OscConfig+0x62c>)
 8001e82:	681a      	ldr	r2, [r3, #0]
 8001e84:	4b12      	ldr	r3, [pc, #72]	; (8001ed0 <HAL_RCC_OscConfig+0x62c>)
 8001e86:	4917      	ldr	r1, [pc, #92]	; (8001ee4 <HAL_RCC_OscConfig+0x640>)
 8001e88:	400a      	ands	r2, r1
 8001e8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e8c:	f7ff f9ce 	bl	800122c <HAL_GetTick>
 8001e90:	0003      	movs	r3, r0
 8001e92:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e94:	e008      	b.n	8001ea8 <HAL_RCC_OscConfig+0x604>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e96:	f7ff f9c9 	bl	800122c <HAL_GetTick>
 8001e9a:	0002      	movs	r2, r0
 8001e9c:	693b      	ldr	r3, [r7, #16]
 8001e9e:	1ad3      	subs	r3, r2, r3
 8001ea0:	2b02      	cmp	r3, #2
 8001ea2:	d901      	bls.n	8001ea8 <HAL_RCC_OscConfig+0x604>
          {
            return HAL_TIMEOUT;
 8001ea4:	2303      	movs	r3, #3
 8001ea6:	e057      	b.n	8001f58 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ea8:	4b09      	ldr	r3, [pc, #36]	; (8001ed0 <HAL_RCC_OscConfig+0x62c>)
 8001eaa:	681a      	ldr	r2, [r3, #0]
 8001eac:	2380      	movs	r3, #128	; 0x80
 8001eae:	049b      	lsls	r3, r3, #18
 8001eb0:	4013      	ands	r3, r2
 8001eb2:	d1f0      	bne.n	8001e96 <HAL_RCC_OscConfig+0x5f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8001eb4:	4b06      	ldr	r3, [pc, #24]	; (8001ed0 <HAL_RCC_OscConfig+0x62c>)
 8001eb6:	68da      	ldr	r2, [r3, #12]
 8001eb8:	4b05      	ldr	r3, [pc, #20]	; (8001ed0 <HAL_RCC_OscConfig+0x62c>)
 8001eba:	490c      	ldr	r1, [pc, #48]	; (8001eec <HAL_RCC_OscConfig+0x648>)
 8001ebc:	400a      	ands	r2, r1
 8001ebe:	60da      	str	r2, [r3, #12]
 8001ec0:	e049      	b.n	8001f56 <HAL_RCC_OscConfig+0x6b2>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	6a1b      	ldr	r3, [r3, #32]
 8001ec6:	2b01      	cmp	r3, #1
 8001ec8:	d112      	bne.n	8001ef0 <HAL_RCC_OscConfig+0x64c>
      {
        return HAL_ERROR;
 8001eca:	2301      	movs	r3, #1
 8001ecc:	e044      	b.n	8001f58 <HAL_RCC_OscConfig+0x6b4>
 8001ece:	46c0      	nop			; (mov r8, r8)
 8001ed0:	40021000 	.word	0x40021000
 8001ed4:	40007000 	.word	0x40007000
 8001ed8:	00001388 	.word	0x00001388
 8001edc:	efffffff 	.word	0xefffffff
 8001ee0:	ffbfffff 	.word	0xffbfffff
 8001ee4:	feffffff 	.word	0xfeffffff
 8001ee8:	11c1808c 	.word	0x11c1808c
 8001eec:	eefefffc 	.word	0xeefefffc
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8001ef0:	4b1b      	ldr	r3, [pc, #108]	; (8001f60 <HAL_RCC_OscConfig+0x6bc>)
 8001ef2:	68db      	ldr	r3, [r3, #12]
 8001ef4:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ef6:	697b      	ldr	r3, [r7, #20]
 8001ef8:	2203      	movs	r2, #3
 8001efa:	401a      	ands	r2, r3
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f00:	429a      	cmp	r2, r3
 8001f02:	d126      	bne.n	8001f52 <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001f04:	697b      	ldr	r3, [r7, #20]
 8001f06:	2270      	movs	r2, #112	; 0x70
 8001f08:	401a      	ands	r2, r3
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f0e:	429a      	cmp	r2, r3
 8001f10:	d11f      	bne.n	8001f52 <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001f12:	697a      	ldr	r2, [r7, #20]
 8001f14:	23fe      	movs	r3, #254	; 0xfe
 8001f16:	01db      	lsls	r3, r3, #7
 8001f18:	401a      	ands	r2, r3
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f1e:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001f20:	429a      	cmp	r2, r3
 8001f22:	d116      	bne.n	8001f52 <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001f24:	697a      	ldr	r2, [r7, #20]
 8001f26:	23f8      	movs	r3, #248	; 0xf8
 8001f28:	039b      	lsls	r3, r3, #14
 8001f2a:	401a      	ands	r2, r3
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001f30:	429a      	cmp	r2, r3
 8001f32:	d10e      	bne.n	8001f52 <HAL_RCC_OscConfig+0x6ae>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001f34:	697a      	ldr	r2, [r7, #20]
 8001f36:	23e0      	movs	r3, #224	; 0xe0
 8001f38:	051b      	lsls	r3, r3, #20
 8001f3a:	401a      	ands	r2, r3
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001f40:	429a      	cmp	r2, r3
 8001f42:	d106      	bne.n	8001f52 <HAL_RCC_OscConfig+0x6ae>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8001f44:	697b      	ldr	r3, [r7, #20]
 8001f46:	0f5b      	lsrs	r3, r3, #29
 8001f48:	075a      	lsls	r2, r3, #29
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001f4e:	429a      	cmp	r2, r3
 8001f50:	d001      	beq.n	8001f56 <HAL_RCC_OscConfig+0x6b2>
        {
          return HAL_ERROR;
 8001f52:	2301      	movs	r3, #1
 8001f54:	e000      	b.n	8001f58 <HAL_RCC_OscConfig+0x6b4>
        }
      }
    }
  }
  return HAL_OK;
 8001f56:	2300      	movs	r3, #0
}
 8001f58:	0018      	movs	r0, r3
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	b008      	add	sp, #32
 8001f5e:	bd80      	pop	{r7, pc}
 8001f60:	40021000 	.word	0x40021000

08001f64 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b084      	sub	sp, #16
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
 8001f6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d101      	bne.n	8001f78 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f74:	2301      	movs	r3, #1
 8001f76:	e0e9      	b.n	800214c <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001f78:	4b76      	ldr	r3, [pc, #472]	; (8002154 <HAL_RCC_ClockConfig+0x1f0>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	2207      	movs	r2, #7
 8001f7e:	4013      	ands	r3, r2
 8001f80:	683a      	ldr	r2, [r7, #0]
 8001f82:	429a      	cmp	r2, r3
 8001f84:	d91e      	bls.n	8001fc4 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f86:	4b73      	ldr	r3, [pc, #460]	; (8002154 <HAL_RCC_ClockConfig+0x1f0>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	2207      	movs	r2, #7
 8001f8c:	4393      	bics	r3, r2
 8001f8e:	0019      	movs	r1, r3
 8001f90:	4b70      	ldr	r3, [pc, #448]	; (8002154 <HAL_RCC_ClockConfig+0x1f0>)
 8001f92:	683a      	ldr	r2, [r7, #0]
 8001f94:	430a      	orrs	r2, r1
 8001f96:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001f98:	f7ff f948 	bl	800122c <HAL_GetTick>
 8001f9c:	0003      	movs	r3, r0
 8001f9e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001fa0:	e009      	b.n	8001fb6 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fa2:	f7ff f943 	bl	800122c <HAL_GetTick>
 8001fa6:	0002      	movs	r2, r0
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	1ad3      	subs	r3, r2, r3
 8001fac:	4a6a      	ldr	r2, [pc, #424]	; (8002158 <HAL_RCC_ClockConfig+0x1f4>)
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	d901      	bls.n	8001fb6 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001fb2:	2303      	movs	r3, #3
 8001fb4:	e0ca      	b.n	800214c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001fb6:	4b67      	ldr	r3, [pc, #412]	; (8002154 <HAL_RCC_ClockConfig+0x1f0>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	2207      	movs	r2, #7
 8001fbc:	4013      	ands	r3, r2
 8001fbe:	683a      	ldr	r2, [r7, #0]
 8001fc0:	429a      	cmp	r2, r3
 8001fc2:	d1ee      	bne.n	8001fa2 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	2202      	movs	r2, #2
 8001fca:	4013      	ands	r3, r2
 8001fcc:	d015      	beq.n	8001ffa <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	2204      	movs	r2, #4
 8001fd4:	4013      	ands	r3, r2
 8001fd6:	d006      	beq.n	8001fe6 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001fd8:	4b60      	ldr	r3, [pc, #384]	; (800215c <HAL_RCC_ClockConfig+0x1f8>)
 8001fda:	689a      	ldr	r2, [r3, #8]
 8001fdc:	4b5f      	ldr	r3, [pc, #380]	; (800215c <HAL_RCC_ClockConfig+0x1f8>)
 8001fde:	21e0      	movs	r1, #224	; 0xe0
 8001fe0:	01c9      	lsls	r1, r1, #7
 8001fe2:	430a      	orrs	r2, r1
 8001fe4:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001fe6:	4b5d      	ldr	r3, [pc, #372]	; (800215c <HAL_RCC_ClockConfig+0x1f8>)
 8001fe8:	689b      	ldr	r3, [r3, #8]
 8001fea:	4a5d      	ldr	r2, [pc, #372]	; (8002160 <HAL_RCC_ClockConfig+0x1fc>)
 8001fec:	4013      	ands	r3, r2
 8001fee:	0019      	movs	r1, r3
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	689a      	ldr	r2, [r3, #8]
 8001ff4:	4b59      	ldr	r3, [pc, #356]	; (800215c <HAL_RCC_ClockConfig+0x1f8>)
 8001ff6:	430a      	orrs	r2, r1
 8001ff8:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	2201      	movs	r2, #1
 8002000:	4013      	ands	r3, r2
 8002002:	d057      	beq.n	80020b4 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	685b      	ldr	r3, [r3, #4]
 8002008:	2b01      	cmp	r3, #1
 800200a:	d107      	bne.n	800201c <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800200c:	4b53      	ldr	r3, [pc, #332]	; (800215c <HAL_RCC_ClockConfig+0x1f8>)
 800200e:	681a      	ldr	r2, [r3, #0]
 8002010:	2380      	movs	r3, #128	; 0x80
 8002012:	029b      	lsls	r3, r3, #10
 8002014:	4013      	ands	r3, r2
 8002016:	d12b      	bne.n	8002070 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002018:	2301      	movs	r3, #1
 800201a:	e097      	b.n	800214c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	685b      	ldr	r3, [r3, #4]
 8002020:	2b02      	cmp	r3, #2
 8002022:	d107      	bne.n	8002034 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002024:	4b4d      	ldr	r3, [pc, #308]	; (800215c <HAL_RCC_ClockConfig+0x1f8>)
 8002026:	681a      	ldr	r2, [r3, #0]
 8002028:	2380      	movs	r3, #128	; 0x80
 800202a:	049b      	lsls	r3, r3, #18
 800202c:	4013      	ands	r3, r2
 800202e:	d11f      	bne.n	8002070 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002030:	2301      	movs	r3, #1
 8002032:	e08b      	b.n	800214c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	685b      	ldr	r3, [r3, #4]
 8002038:	2b00      	cmp	r3, #0
 800203a:	d107      	bne.n	800204c <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800203c:	4b47      	ldr	r3, [pc, #284]	; (800215c <HAL_RCC_ClockConfig+0x1f8>)
 800203e:	681a      	ldr	r2, [r3, #0]
 8002040:	2380      	movs	r3, #128	; 0x80
 8002042:	00db      	lsls	r3, r3, #3
 8002044:	4013      	ands	r3, r2
 8002046:	d113      	bne.n	8002070 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002048:	2301      	movs	r3, #1
 800204a:	e07f      	b.n	800214c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	685b      	ldr	r3, [r3, #4]
 8002050:	2b03      	cmp	r3, #3
 8002052:	d106      	bne.n	8002062 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002054:	4b41      	ldr	r3, [pc, #260]	; (800215c <HAL_RCC_ClockConfig+0x1f8>)
 8002056:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002058:	2202      	movs	r2, #2
 800205a:	4013      	ands	r3, r2
 800205c:	d108      	bne.n	8002070 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800205e:	2301      	movs	r3, #1
 8002060:	e074      	b.n	800214c <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002062:	4b3e      	ldr	r3, [pc, #248]	; (800215c <HAL_RCC_ClockConfig+0x1f8>)
 8002064:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002066:	2202      	movs	r2, #2
 8002068:	4013      	ands	r3, r2
 800206a:	d101      	bne.n	8002070 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800206c:	2301      	movs	r3, #1
 800206e:	e06d      	b.n	800214c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002070:	4b3a      	ldr	r3, [pc, #232]	; (800215c <HAL_RCC_ClockConfig+0x1f8>)
 8002072:	689b      	ldr	r3, [r3, #8]
 8002074:	2207      	movs	r2, #7
 8002076:	4393      	bics	r3, r2
 8002078:	0019      	movs	r1, r3
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	685a      	ldr	r2, [r3, #4]
 800207e:	4b37      	ldr	r3, [pc, #220]	; (800215c <HAL_RCC_ClockConfig+0x1f8>)
 8002080:	430a      	orrs	r2, r1
 8002082:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002084:	f7ff f8d2 	bl	800122c <HAL_GetTick>
 8002088:	0003      	movs	r3, r0
 800208a:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800208c:	e009      	b.n	80020a2 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800208e:	f7ff f8cd 	bl	800122c <HAL_GetTick>
 8002092:	0002      	movs	r2, r0
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	1ad3      	subs	r3, r2, r3
 8002098:	4a2f      	ldr	r2, [pc, #188]	; (8002158 <HAL_RCC_ClockConfig+0x1f4>)
 800209a:	4293      	cmp	r3, r2
 800209c:	d901      	bls.n	80020a2 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 800209e:	2303      	movs	r3, #3
 80020a0:	e054      	b.n	800214c <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020a2:	4b2e      	ldr	r3, [pc, #184]	; (800215c <HAL_RCC_ClockConfig+0x1f8>)
 80020a4:	689b      	ldr	r3, [r3, #8]
 80020a6:	2238      	movs	r2, #56	; 0x38
 80020a8:	401a      	ands	r2, r3
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	685b      	ldr	r3, [r3, #4]
 80020ae:	00db      	lsls	r3, r3, #3
 80020b0:	429a      	cmp	r2, r3
 80020b2:	d1ec      	bne.n	800208e <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80020b4:	4b27      	ldr	r3, [pc, #156]	; (8002154 <HAL_RCC_ClockConfig+0x1f0>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	2207      	movs	r2, #7
 80020ba:	4013      	ands	r3, r2
 80020bc:	683a      	ldr	r2, [r7, #0]
 80020be:	429a      	cmp	r2, r3
 80020c0:	d21e      	bcs.n	8002100 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020c2:	4b24      	ldr	r3, [pc, #144]	; (8002154 <HAL_RCC_ClockConfig+0x1f0>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	2207      	movs	r2, #7
 80020c8:	4393      	bics	r3, r2
 80020ca:	0019      	movs	r1, r3
 80020cc:	4b21      	ldr	r3, [pc, #132]	; (8002154 <HAL_RCC_ClockConfig+0x1f0>)
 80020ce:	683a      	ldr	r2, [r7, #0]
 80020d0:	430a      	orrs	r2, r1
 80020d2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80020d4:	f7ff f8aa 	bl	800122c <HAL_GetTick>
 80020d8:	0003      	movs	r3, r0
 80020da:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80020dc:	e009      	b.n	80020f2 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020de:	f7ff f8a5 	bl	800122c <HAL_GetTick>
 80020e2:	0002      	movs	r2, r0
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	1ad3      	subs	r3, r2, r3
 80020e8:	4a1b      	ldr	r2, [pc, #108]	; (8002158 <HAL_RCC_ClockConfig+0x1f4>)
 80020ea:	4293      	cmp	r3, r2
 80020ec:	d901      	bls.n	80020f2 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80020ee:	2303      	movs	r3, #3
 80020f0:	e02c      	b.n	800214c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80020f2:	4b18      	ldr	r3, [pc, #96]	; (8002154 <HAL_RCC_ClockConfig+0x1f0>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	2207      	movs	r2, #7
 80020f8:	4013      	ands	r3, r2
 80020fa:	683a      	ldr	r2, [r7, #0]
 80020fc:	429a      	cmp	r2, r3
 80020fe:	d1ee      	bne.n	80020de <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	2204      	movs	r2, #4
 8002106:	4013      	ands	r3, r2
 8002108:	d009      	beq.n	800211e <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800210a:	4b14      	ldr	r3, [pc, #80]	; (800215c <HAL_RCC_ClockConfig+0x1f8>)
 800210c:	689b      	ldr	r3, [r3, #8]
 800210e:	4a15      	ldr	r2, [pc, #84]	; (8002164 <HAL_RCC_ClockConfig+0x200>)
 8002110:	4013      	ands	r3, r2
 8002112:	0019      	movs	r1, r3
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	68da      	ldr	r2, [r3, #12]
 8002118:	4b10      	ldr	r3, [pc, #64]	; (800215c <HAL_RCC_ClockConfig+0x1f8>)
 800211a:	430a      	orrs	r2, r1
 800211c:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800211e:	f000 f829 	bl	8002174 <HAL_RCC_GetSysClockFreq>
 8002122:	0001      	movs	r1, r0
 8002124:	4b0d      	ldr	r3, [pc, #52]	; (800215c <HAL_RCC_ClockConfig+0x1f8>)
 8002126:	689b      	ldr	r3, [r3, #8]
 8002128:	0a1b      	lsrs	r3, r3, #8
 800212a:	220f      	movs	r2, #15
 800212c:	401a      	ands	r2, r3
 800212e:	4b0e      	ldr	r3, [pc, #56]	; (8002168 <HAL_RCC_ClockConfig+0x204>)
 8002130:	0092      	lsls	r2, r2, #2
 8002132:	58d3      	ldr	r3, [r2, r3]
 8002134:	221f      	movs	r2, #31
 8002136:	4013      	ands	r3, r2
 8002138:	000a      	movs	r2, r1
 800213a:	40da      	lsrs	r2, r3
 800213c:	4b0b      	ldr	r3, [pc, #44]	; (800216c <HAL_RCC_ClockConfig+0x208>)
 800213e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002140:	4b0b      	ldr	r3, [pc, #44]	; (8002170 <HAL_RCC_ClockConfig+0x20c>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	0018      	movs	r0, r3
 8002146:	f7ff f815 	bl	8001174 <HAL_InitTick>
 800214a:	0003      	movs	r3, r0
}
 800214c:	0018      	movs	r0, r3
 800214e:	46bd      	mov	sp, r7
 8002150:	b004      	add	sp, #16
 8002152:	bd80      	pop	{r7, pc}
 8002154:	40022000 	.word	0x40022000
 8002158:	00001388 	.word	0x00001388
 800215c:	40021000 	.word	0x40021000
 8002160:	fffff0ff 	.word	0xfffff0ff
 8002164:	ffff8fff 	.word	0xffff8fff
 8002168:	08004fe4 	.word	0x08004fe4
 800216c:	20000004 	.word	0x20000004
 8002170:	20000008 	.word	0x20000008

08002174 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b086      	sub	sp, #24
 8002178:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800217a:	4b3c      	ldr	r3, [pc, #240]	; (800226c <HAL_RCC_GetSysClockFreq+0xf8>)
 800217c:	689b      	ldr	r3, [r3, #8]
 800217e:	2238      	movs	r2, #56	; 0x38
 8002180:	4013      	ands	r3, r2
 8002182:	d10f      	bne.n	80021a4 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8002184:	4b39      	ldr	r3, [pc, #228]	; (800226c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	0adb      	lsrs	r3, r3, #11
 800218a:	2207      	movs	r2, #7
 800218c:	4013      	ands	r3, r2
 800218e:	2201      	movs	r2, #1
 8002190:	409a      	lsls	r2, r3
 8002192:	0013      	movs	r3, r2
 8002194:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8002196:	6839      	ldr	r1, [r7, #0]
 8002198:	4835      	ldr	r0, [pc, #212]	; (8002270 <HAL_RCC_GetSysClockFreq+0xfc>)
 800219a:	f7fd ffbb 	bl	8000114 <__udivsi3>
 800219e:	0003      	movs	r3, r0
 80021a0:	613b      	str	r3, [r7, #16]
 80021a2:	e05d      	b.n	8002260 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80021a4:	4b31      	ldr	r3, [pc, #196]	; (800226c <HAL_RCC_GetSysClockFreq+0xf8>)
 80021a6:	689b      	ldr	r3, [r3, #8]
 80021a8:	2238      	movs	r2, #56	; 0x38
 80021aa:	4013      	ands	r3, r2
 80021ac:	2b08      	cmp	r3, #8
 80021ae:	d102      	bne.n	80021b6 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80021b0:	4b30      	ldr	r3, [pc, #192]	; (8002274 <HAL_RCC_GetSysClockFreq+0x100>)
 80021b2:	613b      	str	r3, [r7, #16]
 80021b4:	e054      	b.n	8002260 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80021b6:	4b2d      	ldr	r3, [pc, #180]	; (800226c <HAL_RCC_GetSysClockFreq+0xf8>)
 80021b8:	689b      	ldr	r3, [r3, #8]
 80021ba:	2238      	movs	r2, #56	; 0x38
 80021bc:	4013      	ands	r3, r2
 80021be:	2b10      	cmp	r3, #16
 80021c0:	d138      	bne.n	8002234 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80021c2:	4b2a      	ldr	r3, [pc, #168]	; (800226c <HAL_RCC_GetSysClockFreq+0xf8>)
 80021c4:	68db      	ldr	r3, [r3, #12]
 80021c6:	2203      	movs	r2, #3
 80021c8:	4013      	ands	r3, r2
 80021ca:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80021cc:	4b27      	ldr	r3, [pc, #156]	; (800226c <HAL_RCC_GetSysClockFreq+0xf8>)
 80021ce:	68db      	ldr	r3, [r3, #12]
 80021d0:	091b      	lsrs	r3, r3, #4
 80021d2:	2207      	movs	r2, #7
 80021d4:	4013      	ands	r3, r2
 80021d6:	3301      	adds	r3, #1
 80021d8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	2b03      	cmp	r3, #3
 80021de:	d10d      	bne.n	80021fc <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80021e0:	68b9      	ldr	r1, [r7, #8]
 80021e2:	4824      	ldr	r0, [pc, #144]	; (8002274 <HAL_RCC_GetSysClockFreq+0x100>)
 80021e4:	f7fd ff96 	bl	8000114 <__udivsi3>
 80021e8:	0003      	movs	r3, r0
 80021ea:	0019      	movs	r1, r3
 80021ec:	4b1f      	ldr	r3, [pc, #124]	; (800226c <HAL_RCC_GetSysClockFreq+0xf8>)
 80021ee:	68db      	ldr	r3, [r3, #12]
 80021f0:	0a1b      	lsrs	r3, r3, #8
 80021f2:	227f      	movs	r2, #127	; 0x7f
 80021f4:	4013      	ands	r3, r2
 80021f6:	434b      	muls	r3, r1
 80021f8:	617b      	str	r3, [r7, #20]
        break;
 80021fa:	e00d      	b.n	8002218 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80021fc:	68b9      	ldr	r1, [r7, #8]
 80021fe:	481c      	ldr	r0, [pc, #112]	; (8002270 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002200:	f7fd ff88 	bl	8000114 <__udivsi3>
 8002204:	0003      	movs	r3, r0
 8002206:	0019      	movs	r1, r3
 8002208:	4b18      	ldr	r3, [pc, #96]	; (800226c <HAL_RCC_GetSysClockFreq+0xf8>)
 800220a:	68db      	ldr	r3, [r3, #12]
 800220c:	0a1b      	lsrs	r3, r3, #8
 800220e:	227f      	movs	r2, #127	; 0x7f
 8002210:	4013      	ands	r3, r2
 8002212:	434b      	muls	r3, r1
 8002214:	617b      	str	r3, [r7, #20]
        break;
 8002216:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8002218:	4b14      	ldr	r3, [pc, #80]	; (800226c <HAL_RCC_GetSysClockFreq+0xf8>)
 800221a:	68db      	ldr	r3, [r3, #12]
 800221c:	0f5b      	lsrs	r3, r3, #29
 800221e:	2207      	movs	r2, #7
 8002220:	4013      	ands	r3, r2
 8002222:	3301      	adds	r3, #1
 8002224:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8002226:	6879      	ldr	r1, [r7, #4]
 8002228:	6978      	ldr	r0, [r7, #20]
 800222a:	f7fd ff73 	bl	8000114 <__udivsi3>
 800222e:	0003      	movs	r3, r0
 8002230:	613b      	str	r3, [r7, #16]
 8002232:	e015      	b.n	8002260 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002234:	4b0d      	ldr	r3, [pc, #52]	; (800226c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002236:	689b      	ldr	r3, [r3, #8]
 8002238:	2238      	movs	r2, #56	; 0x38
 800223a:	4013      	ands	r3, r2
 800223c:	2b20      	cmp	r3, #32
 800223e:	d103      	bne.n	8002248 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8002240:	2380      	movs	r3, #128	; 0x80
 8002242:	021b      	lsls	r3, r3, #8
 8002244:	613b      	str	r3, [r7, #16]
 8002246:	e00b      	b.n	8002260 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002248:	4b08      	ldr	r3, [pc, #32]	; (800226c <HAL_RCC_GetSysClockFreq+0xf8>)
 800224a:	689b      	ldr	r3, [r3, #8]
 800224c:	2238      	movs	r2, #56	; 0x38
 800224e:	4013      	ands	r3, r2
 8002250:	2b18      	cmp	r3, #24
 8002252:	d103      	bne.n	800225c <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8002254:	23fa      	movs	r3, #250	; 0xfa
 8002256:	01db      	lsls	r3, r3, #7
 8002258:	613b      	str	r3, [r7, #16]
 800225a:	e001      	b.n	8002260 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 800225c:	2300      	movs	r3, #0
 800225e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002260:	693b      	ldr	r3, [r7, #16]
}
 8002262:	0018      	movs	r0, r3
 8002264:	46bd      	mov	sp, r7
 8002266:	b006      	add	sp, #24
 8002268:	bd80      	pop	{r7, pc}
 800226a:	46c0      	nop			; (mov r8, r8)
 800226c:	40021000 	.word	0x40021000
 8002270:	00f42400 	.word	0x00f42400
 8002274:	007a1200 	.word	0x007a1200

08002278 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800227c:	4b02      	ldr	r3, [pc, #8]	; (8002288 <HAL_RCC_GetHCLKFreq+0x10>)
 800227e:	681b      	ldr	r3, [r3, #0]
}
 8002280:	0018      	movs	r0, r3
 8002282:	46bd      	mov	sp, r7
 8002284:	bd80      	pop	{r7, pc}
 8002286:	46c0      	nop			; (mov r8, r8)
 8002288:	20000004 	.word	0x20000004

0800228c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800228c:	b5b0      	push	{r4, r5, r7, lr}
 800228e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8002290:	f7ff fff2 	bl	8002278 <HAL_RCC_GetHCLKFreq>
 8002294:	0004      	movs	r4, r0
 8002296:	f7ff faf9 	bl	800188c <LL_RCC_GetAPB1Prescaler>
 800229a:	0003      	movs	r3, r0
 800229c:	0b1a      	lsrs	r2, r3, #12
 800229e:	4b05      	ldr	r3, [pc, #20]	; (80022b4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80022a0:	0092      	lsls	r2, r2, #2
 80022a2:	58d3      	ldr	r3, [r2, r3]
 80022a4:	221f      	movs	r2, #31
 80022a6:	4013      	ands	r3, r2
 80022a8:	40dc      	lsrs	r4, r3
 80022aa:	0023      	movs	r3, r4
}
 80022ac:	0018      	movs	r0, r3
 80022ae:	46bd      	mov	sp, r7
 80022b0:	bdb0      	pop	{r4, r5, r7, pc}
 80022b2:	46c0      	nop			; (mov r8, r8)
 80022b4:	08005024 	.word	0x08005024

080022b8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b086      	sub	sp, #24
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 80022c0:	2313      	movs	r3, #19
 80022c2:	18fb      	adds	r3, r7, r3
 80022c4:	2200      	movs	r2, #0
 80022c6:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80022c8:	2312      	movs	r3, #18
 80022ca:	18fb      	adds	r3, r7, r3
 80022cc:	2200      	movs	r2, #0
 80022ce:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681a      	ldr	r2, [r3, #0]
 80022d4:	2380      	movs	r3, #128	; 0x80
 80022d6:	029b      	lsls	r3, r3, #10
 80022d8:	4013      	ands	r3, r2
 80022da:	d100      	bne.n	80022de <HAL_RCCEx_PeriphCLKConfig+0x26>
 80022dc:	e0ad      	b.n	800243a <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    FlagStatus       pwrclkchanged = RESET;
 80022de:	2011      	movs	r0, #17
 80022e0:	183b      	adds	r3, r7, r0
 80022e2:	2200      	movs	r2, #0
 80022e4:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80022e6:	4b47      	ldr	r3, [pc, #284]	; (8002404 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80022e8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80022ea:	2380      	movs	r3, #128	; 0x80
 80022ec:	055b      	lsls	r3, r3, #21
 80022ee:	4013      	ands	r3, r2
 80022f0:	d110      	bne.n	8002314 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022f2:	4b44      	ldr	r3, [pc, #272]	; (8002404 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80022f4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80022f6:	4b43      	ldr	r3, [pc, #268]	; (8002404 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80022f8:	2180      	movs	r1, #128	; 0x80
 80022fa:	0549      	lsls	r1, r1, #21
 80022fc:	430a      	orrs	r2, r1
 80022fe:	63da      	str	r2, [r3, #60]	; 0x3c
 8002300:	4b40      	ldr	r3, [pc, #256]	; (8002404 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002302:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002304:	2380      	movs	r3, #128	; 0x80
 8002306:	055b      	lsls	r3, r3, #21
 8002308:	4013      	ands	r3, r2
 800230a:	60bb      	str	r3, [r7, #8]
 800230c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800230e:	183b      	adds	r3, r7, r0
 8002310:	2201      	movs	r2, #1
 8002312:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002314:	4b3c      	ldr	r3, [pc, #240]	; (8002408 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8002316:	681a      	ldr	r2, [r3, #0]
 8002318:	4b3b      	ldr	r3, [pc, #236]	; (8002408 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 800231a:	2180      	movs	r1, #128	; 0x80
 800231c:	0049      	lsls	r1, r1, #1
 800231e:	430a      	orrs	r2, r1
 8002320:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002322:	f7fe ff83 	bl	800122c <HAL_GetTick>
 8002326:	0003      	movs	r3, r0
 8002328:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800232a:	e00b      	b.n	8002344 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800232c:	f7fe ff7e 	bl	800122c <HAL_GetTick>
 8002330:	0002      	movs	r2, r0
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	1ad3      	subs	r3, r2, r3
 8002336:	2b02      	cmp	r3, #2
 8002338:	d904      	bls.n	8002344 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 800233a:	2313      	movs	r3, #19
 800233c:	18fb      	adds	r3, r7, r3
 800233e:	2203      	movs	r2, #3
 8002340:	701a      	strb	r2, [r3, #0]
        break;
 8002342:	e005      	b.n	8002350 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002344:	4b30      	ldr	r3, [pc, #192]	; (8002408 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8002346:	681a      	ldr	r2, [r3, #0]
 8002348:	2380      	movs	r3, #128	; 0x80
 800234a:	005b      	lsls	r3, r3, #1
 800234c:	4013      	ands	r3, r2
 800234e:	d0ed      	beq.n	800232c <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8002350:	2313      	movs	r3, #19
 8002352:	18fb      	adds	r3, r7, r3
 8002354:	781b      	ldrb	r3, [r3, #0]
 8002356:	2b00      	cmp	r3, #0
 8002358:	d15e      	bne.n	8002418 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800235a:	4b2a      	ldr	r3, [pc, #168]	; (8002404 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800235c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800235e:	23c0      	movs	r3, #192	; 0xc0
 8002360:	009b      	lsls	r3, r3, #2
 8002362:	4013      	ands	r3, r2
 8002364:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002366:	697b      	ldr	r3, [r7, #20]
 8002368:	2b00      	cmp	r3, #0
 800236a:	d019      	beq.n	80023a0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002370:	697a      	ldr	r2, [r7, #20]
 8002372:	429a      	cmp	r2, r3
 8002374:	d014      	beq.n	80023a0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002376:	4b23      	ldr	r3, [pc, #140]	; (8002404 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002378:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800237a:	4a24      	ldr	r2, [pc, #144]	; (800240c <HAL_RCCEx_PeriphCLKConfig+0x154>)
 800237c:	4013      	ands	r3, r2
 800237e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002380:	4b20      	ldr	r3, [pc, #128]	; (8002404 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002382:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002384:	4b1f      	ldr	r3, [pc, #124]	; (8002404 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002386:	2180      	movs	r1, #128	; 0x80
 8002388:	0249      	lsls	r1, r1, #9
 800238a:	430a      	orrs	r2, r1
 800238c:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 800238e:	4b1d      	ldr	r3, [pc, #116]	; (8002404 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002390:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002392:	4b1c      	ldr	r3, [pc, #112]	; (8002404 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002394:	491e      	ldr	r1, [pc, #120]	; (8002410 <HAL_RCCEx_PeriphCLKConfig+0x158>)
 8002396:	400a      	ands	r2, r1
 8002398:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800239a:	4b1a      	ldr	r3, [pc, #104]	; (8002404 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800239c:	697a      	ldr	r2, [r7, #20]
 800239e:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80023a0:	697b      	ldr	r3, [r7, #20]
 80023a2:	2201      	movs	r2, #1
 80023a4:	4013      	ands	r3, r2
 80023a6:	d016      	beq.n	80023d6 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023a8:	f7fe ff40 	bl	800122c <HAL_GetTick>
 80023ac:	0003      	movs	r3, r0
 80023ae:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80023b0:	e00c      	b.n	80023cc <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023b2:	f7fe ff3b 	bl	800122c <HAL_GetTick>
 80023b6:	0002      	movs	r2, r0
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	1ad3      	subs	r3, r2, r3
 80023bc:	4a15      	ldr	r2, [pc, #84]	; (8002414 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80023be:	4293      	cmp	r3, r2
 80023c0:	d904      	bls.n	80023cc <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 80023c2:	2313      	movs	r3, #19
 80023c4:	18fb      	adds	r3, r7, r3
 80023c6:	2203      	movs	r2, #3
 80023c8:	701a      	strb	r2, [r3, #0]
            break;
 80023ca:	e004      	b.n	80023d6 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80023cc:	4b0d      	ldr	r3, [pc, #52]	; (8002404 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80023ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023d0:	2202      	movs	r2, #2
 80023d2:	4013      	ands	r3, r2
 80023d4:	d0ed      	beq.n	80023b2 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 80023d6:	2313      	movs	r3, #19
 80023d8:	18fb      	adds	r3, r7, r3
 80023da:	781b      	ldrb	r3, [r3, #0]
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d10a      	bne.n	80023f6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80023e0:	4b08      	ldr	r3, [pc, #32]	; (8002404 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80023e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023e4:	4a09      	ldr	r2, [pc, #36]	; (800240c <HAL_RCCEx_PeriphCLKConfig+0x154>)
 80023e6:	4013      	ands	r3, r2
 80023e8:	0019      	movs	r1, r3
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80023ee:	4b05      	ldr	r3, [pc, #20]	; (8002404 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80023f0:	430a      	orrs	r2, r1
 80023f2:	65da      	str	r2, [r3, #92]	; 0x5c
 80023f4:	e016      	b.n	8002424 <HAL_RCCEx_PeriphCLKConfig+0x16c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80023f6:	2312      	movs	r3, #18
 80023f8:	18fb      	adds	r3, r7, r3
 80023fa:	2213      	movs	r2, #19
 80023fc:	18ba      	adds	r2, r7, r2
 80023fe:	7812      	ldrb	r2, [r2, #0]
 8002400:	701a      	strb	r2, [r3, #0]
 8002402:	e00f      	b.n	8002424 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8002404:	40021000 	.word	0x40021000
 8002408:	40007000 	.word	0x40007000
 800240c:	fffffcff 	.word	0xfffffcff
 8002410:	fffeffff 	.word	0xfffeffff
 8002414:	00001388 	.word	0x00001388
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002418:	2312      	movs	r3, #18
 800241a:	18fb      	adds	r3, r7, r3
 800241c:	2213      	movs	r2, #19
 800241e:	18ba      	adds	r2, r7, r2
 8002420:	7812      	ldrb	r2, [r2, #0]
 8002422:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002424:	2311      	movs	r3, #17
 8002426:	18fb      	adds	r3, r7, r3
 8002428:	781b      	ldrb	r3, [r3, #0]
 800242a:	2b01      	cmp	r3, #1
 800242c:	d105      	bne.n	800243a <HAL_RCCEx_PeriphCLKConfig+0x182>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800242e:	4bb6      	ldr	r3, [pc, #728]	; (8002708 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002430:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002432:	4bb5      	ldr	r3, [pc, #724]	; (8002708 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002434:	49b5      	ldr	r1, [pc, #724]	; (800270c <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8002436:	400a      	ands	r2, r1
 8002438:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	2201      	movs	r2, #1
 8002440:	4013      	ands	r3, r2
 8002442:	d009      	beq.n	8002458 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002444:	4bb0      	ldr	r3, [pc, #704]	; (8002708 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002446:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002448:	2203      	movs	r2, #3
 800244a:	4393      	bics	r3, r2
 800244c:	0019      	movs	r1, r3
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	685a      	ldr	r2, [r3, #4]
 8002452:	4bad      	ldr	r3, [pc, #692]	; (8002708 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002454:	430a      	orrs	r2, r1
 8002456:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	2202      	movs	r2, #2
 800245e:	4013      	ands	r3, r2
 8002460:	d009      	beq.n	8002476 <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002462:	4ba9      	ldr	r3, [pc, #676]	; (8002708 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002464:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002466:	220c      	movs	r2, #12
 8002468:	4393      	bics	r3, r2
 800246a:	0019      	movs	r1, r3
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	689a      	ldr	r2, [r3, #8]
 8002470:	4ba5      	ldr	r3, [pc, #660]	; (8002708 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002472:	430a      	orrs	r2, r1
 8002474:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART2SEL */

#if defined(RCC_CCIPR_USART3SEL)
  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	2204      	movs	r2, #4
 800247c:	4013      	ands	r3, r2
 800247e:	d009      	beq.n	8002494 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002480:	4ba1      	ldr	r3, [pc, #644]	; (8002708 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002482:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002484:	2230      	movs	r2, #48	; 0x30
 8002486:	4393      	bics	r3, r2
 8002488:	0019      	movs	r1, r3
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	68da      	ldr	r2, [r3, #12]
 800248e:	4b9e      	ldr	r3, [pc, #632]	; (8002708 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002490:	430a      	orrs	r2, r1
 8002492:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	2210      	movs	r2, #16
 800249a:	4013      	ands	r3, r2
 800249c:	d009      	beq.n	80024b2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800249e:	4b9a      	ldr	r3, [pc, #616]	; (8002708 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80024a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024a2:	4a9b      	ldr	r2, [pc, #620]	; (8002710 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80024a4:	4013      	ands	r3, r2
 80024a6:	0019      	movs	r1, r3
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	691a      	ldr	r2, [r3, #16]
 80024ac:	4b96      	ldr	r3, [pc, #600]	; (8002708 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80024ae:	430a      	orrs	r2, r1
 80024b0:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART1 */

#if defined(LPUART2)
  /*-------------------------- LPUART2 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART2) == RCC_PERIPHCLK_LPUART2)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681a      	ldr	r2, [r3, #0]
 80024b6:	2380      	movs	r3, #128	; 0x80
 80024b8:	015b      	lsls	r3, r3, #5
 80024ba:	4013      	ands	r3, r2
 80024bc:	d009      	beq.n	80024d2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART2CLKSOURCE(PeriphClkInit->Lpuart2ClockSelection));

    /* Configure the LPUART clock source */
    __HAL_RCC_LPUART2_CONFIG(PeriphClkInit->Lpuart2ClockSelection);
 80024be:	4b92      	ldr	r3, [pc, #584]	; (8002708 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80024c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024c2:	4a94      	ldr	r2, [pc, #592]	; (8002714 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80024c4:	4013      	ands	r3, r2
 80024c6:	0019      	movs	r1, r3
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	695a      	ldr	r2, [r3, #20]
 80024cc:	4b8e      	ldr	r3, [pc, #568]	; (8002708 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80024ce:	430a      	orrs	r2, r1
 80024d0:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681a      	ldr	r2, [r3, #0]
 80024d6:	2380      	movs	r3, #128	; 0x80
 80024d8:	009b      	lsls	r3, r3, #2
 80024da:	4013      	ands	r3, r2
 80024dc:	d009      	beq.n	80024f2 <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80024de:	4b8a      	ldr	r3, [pc, #552]	; (8002708 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80024e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024e2:	4a8d      	ldr	r2, [pc, #564]	; (8002718 <HAL_RCCEx_PeriphCLKConfig+0x460>)
 80024e4:	4013      	ands	r3, r2
 80024e6:	0019      	movs	r1, r3
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80024ec:	4b86      	ldr	r3, [pc, #536]	; (8002708 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80024ee:	430a      	orrs	r2, r1
 80024f0:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681a      	ldr	r2, [r3, #0]
 80024f6:	2380      	movs	r3, #128	; 0x80
 80024f8:	00db      	lsls	r3, r3, #3
 80024fa:	4013      	ands	r3, r2
 80024fc:	d009      	beq.n	8002512 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80024fe:	4b82      	ldr	r3, [pc, #520]	; (8002708 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002500:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002502:	4a86      	ldr	r2, [pc, #536]	; (800271c <HAL_RCCEx_PeriphCLKConfig+0x464>)
 8002504:	4013      	ands	r3, r2
 8002506:	0019      	movs	r1, r3
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800250c:	4b7e      	ldr	r3, [pc, #504]	; (8002708 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800250e:	430a      	orrs	r2, r1
 8002510:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	2220      	movs	r2, #32
 8002518:	4013      	ands	r3, r2
 800251a:	d009      	beq.n	8002530 <HAL_RCCEx_PeriphCLKConfig+0x278>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800251c:	4b7a      	ldr	r3, [pc, #488]	; (8002708 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800251e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002520:	4a7f      	ldr	r2, [pc, #508]	; (8002720 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8002522:	4013      	ands	r3, r2
 8002524:	0019      	movs	r1, r3
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	699a      	ldr	r2, [r3, #24]
 800252a:	4b77      	ldr	r3, [pc, #476]	; (8002708 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800252c:	430a      	orrs	r2, r1
 800252e:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_I2C2SEL)
  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	2240      	movs	r2, #64	; 0x40
 8002536:	4013      	ands	r3, r2
 8002538:	d009      	beq.n	800254e <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800253a:	4b73      	ldr	r3, [pc, #460]	; (8002708 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800253c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800253e:	4a79      	ldr	r2, [pc, #484]	; (8002724 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 8002540:	4013      	ands	r3, r2
 8002542:	0019      	movs	r1, r3
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	69da      	ldr	r2, [r3, #28]
 8002548:	4b6f      	ldr	r3, [pc, #444]	; (8002708 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800254a:	430a      	orrs	r2, r1
 800254c:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681a      	ldr	r2, [r3, #0]
 8002552:	2380      	movs	r3, #128	; 0x80
 8002554:	01db      	lsls	r3, r3, #7
 8002556:	4013      	ands	r3, r2
 8002558:	d015      	beq.n	8002586 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800255a:	4b6b      	ldr	r3, [pc, #428]	; (8002708 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800255c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800255e:	009b      	lsls	r3, r3, #2
 8002560:	0899      	lsrs	r1, r3, #2
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002566:	4b68      	ldr	r3, [pc, #416]	; (8002708 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002568:	430a      	orrs	r2, r1
 800256a:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002570:	2380      	movs	r3, #128	; 0x80
 8002572:	05db      	lsls	r3, r3, #23
 8002574:	429a      	cmp	r2, r3
 8002576:	d106      	bne.n	8002586 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002578:	4b63      	ldr	r3, [pc, #396]	; (8002708 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800257a:	68da      	ldr	r2, [r3, #12]
 800257c:	4b62      	ldr	r3, [pc, #392]	; (8002708 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800257e:	2180      	movs	r1, #128	; 0x80
 8002580:	0249      	lsls	r1, r1, #9
 8002582:	430a      	orrs	r2, r1
 8002584:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681a      	ldr	r2, [r3, #0]
 800258a:	2380      	movs	r3, #128	; 0x80
 800258c:	031b      	lsls	r3, r3, #12
 800258e:	4013      	ands	r3, r2
 8002590:	d009      	beq.n	80025a6 <HAL_RCCEx_PeriphCLKConfig+0x2ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002592:	4b5d      	ldr	r3, [pc, #372]	; (8002708 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002594:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002596:	2240      	movs	r2, #64	; 0x40
 8002598:	4393      	bics	r3, r2
 800259a:	0019      	movs	r1, r3
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80025a0:	4b59      	ldr	r3, [pc, #356]	; (8002708 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80025a2:	430a      	orrs	r2, r1
 80025a4:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681a      	ldr	r2, [r3, #0]
 80025aa:	2380      	movs	r3, #128	; 0x80
 80025ac:	039b      	lsls	r3, r3, #14
 80025ae:	4013      	ands	r3, r2
 80025b0:	d016      	beq.n	80025e0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80025b2:	4b55      	ldr	r3, [pc, #340]	; (8002708 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80025b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025b6:	4a5c      	ldr	r2, [pc, #368]	; (8002728 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 80025b8:	4013      	ands	r3, r2
 80025ba:	0019      	movs	r1, r3
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80025c0:	4b51      	ldr	r3, [pc, #324]	; (8002708 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80025c2:	430a      	orrs	r2, r1
 80025c4:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80025ca:	2380      	movs	r3, #128	; 0x80
 80025cc:	03db      	lsls	r3, r3, #15
 80025ce:	429a      	cmp	r2, r3
 80025d0:	d106      	bne.n	80025e0 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80025d2:	4b4d      	ldr	r3, [pc, #308]	; (8002708 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80025d4:	68da      	ldr	r2, [r3, #12]
 80025d6:	4b4c      	ldr	r3, [pc, #304]	; (8002708 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80025d8:	2180      	movs	r1, #128	; 0x80
 80025da:	0449      	lsls	r1, r1, #17
 80025dc:	430a      	orrs	r2, r1
 80025de:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681a      	ldr	r2, [r3, #0]
 80025e4:	2380      	movs	r3, #128	; 0x80
 80025e6:	03db      	lsls	r3, r3, #15
 80025e8:	4013      	ands	r3, r2
 80025ea:	d016      	beq.n	800261a <HAL_RCCEx_PeriphCLKConfig+0x362>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80025ec:	4b46      	ldr	r3, [pc, #280]	; (8002708 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80025ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025f0:	4a4e      	ldr	r2, [pc, #312]	; (800272c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80025f2:	4013      	ands	r3, r2
 80025f4:	0019      	movs	r1, r3
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80025fa:	4b43      	ldr	r3, [pc, #268]	; (8002708 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80025fc:	430a      	orrs	r2, r1
 80025fe:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002604:	2380      	movs	r3, #128	; 0x80
 8002606:	045b      	lsls	r3, r3, #17
 8002608:	429a      	cmp	r2, r3
 800260a:	d106      	bne.n	800261a <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800260c:	4b3e      	ldr	r3, [pc, #248]	; (8002708 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800260e:	68da      	ldr	r2, [r3, #12]
 8002610:	4b3d      	ldr	r3, [pc, #244]	; (8002708 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002612:	2180      	movs	r1, #128	; 0x80
 8002614:	0449      	lsls	r1, r1, #17
 8002616:	430a      	orrs	r2, r1
 8002618:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681a      	ldr	r2, [r3, #0]
 800261e:	2380      	movs	r3, #128	; 0x80
 8002620:	011b      	lsls	r3, r3, #4
 8002622:	4013      	ands	r3, r2
 8002624:	d014      	beq.n	8002650 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8002626:	4b38      	ldr	r3, [pc, #224]	; (8002708 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002628:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800262a:	2203      	movs	r2, #3
 800262c:	4393      	bics	r3, r2
 800262e:	0019      	movs	r1, r3
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6a1a      	ldr	r2, [r3, #32]
 8002634:	4b34      	ldr	r3, [pc, #208]	; (8002708 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002636:	430a      	orrs	r2, r1
 8002638:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6a1b      	ldr	r3, [r3, #32]
 800263e:	2b01      	cmp	r3, #1
 8002640:	d106      	bne.n	8002650 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002642:	4b31      	ldr	r3, [pc, #196]	; (8002708 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002644:	68da      	ldr	r2, [r3, #12]
 8002646:	4b30      	ldr	r3, [pc, #192]	; (8002708 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002648:	2180      	movs	r1, #128	; 0x80
 800264a:	0249      	lsls	r1, r1, #9
 800264c:	430a      	orrs	r2, r1
 800264e:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(RCC_CCIPR2_I2S2SEL)
  /*-------------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681a      	ldr	r2, [r3, #0]
 8002654:	2380      	movs	r3, #128	; 0x80
 8002656:	019b      	lsls	r3, r3, #6
 8002658:	4013      	ands	r3, r2
 800265a:	d014      	beq.n	8002686 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 800265c:	4b2a      	ldr	r3, [pc, #168]	; (8002708 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800265e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002660:	220c      	movs	r2, #12
 8002662:	4393      	bics	r3, r2
 8002664:	0019      	movs	r1, r3
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800266a:	4b27      	ldr	r3, [pc, #156]	; (8002708 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800266c:	430a      	orrs	r2, r1
 800266e:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002674:	2b04      	cmp	r3, #4
 8002676:	d106      	bne.n	8002686 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002678:	4b23      	ldr	r3, [pc, #140]	; (8002708 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800267a:	68da      	ldr	r2, [r3, #12]
 800267c:	4b22      	ldr	r3, [pc, #136]	; (8002708 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800267e:	2180      	movs	r1, #128	; 0x80
 8002680:	0249      	lsls	r1, r1, #9
 8002682:	430a      	orrs	r2, r1
 8002684:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR2_I2S2SEL */

#if defined(STM32G0C1xx) || defined(STM32G0B1xx)  || defined(STM32G0B0xx)
  /*-------------------------- USB clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681a      	ldr	r2, [r3, #0]
 800268a:	2380      	movs	r3, #128	; 0x80
 800268c:	045b      	lsls	r3, r3, #17
 800268e:	4013      	ands	r3, r2
 8002690:	d016      	beq.n	80026c0 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002692:	4b1d      	ldr	r3, [pc, #116]	; (8002708 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002694:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002696:	4a22      	ldr	r2, [pc, #136]	; (8002720 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8002698:	4013      	ands	r3, r2
 800269a:	0019      	movs	r1, r3
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80026a0:	4b19      	ldr	r3, [pc, #100]	; (8002708 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80026a2:	430a      	orrs	r2, r1
 80026a4:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80026aa:	2380      	movs	r3, #128	; 0x80
 80026ac:	019b      	lsls	r3, r3, #6
 80026ae:	429a      	cmp	r2, r3
 80026b0:	d106      	bne.n	80026c0 <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80026b2:	4b15      	ldr	r3, [pc, #84]	; (8002708 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80026b4:	68da      	ldr	r2, [r3, #12]
 80026b6:	4b14      	ldr	r3, [pc, #80]	; (8002708 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80026b8:	2180      	movs	r1, #128	; 0x80
 80026ba:	0449      	lsls	r1, r1, #17
 80026bc:	430a      	orrs	r2, r1
 80026be:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32G0C1xx || STM32G0B1xx || STM32G0B0xx */

#if defined(FDCAN1) || defined(FDCAN2)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681a      	ldr	r2, [r3, #0]
 80026c4:	2380      	movs	r3, #128	; 0x80
 80026c6:	049b      	lsls	r3, r3, #18
 80026c8:	4013      	ands	r3, r2
 80026ca:	d016      	beq.n	80026fa <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80026cc:	4b0e      	ldr	r3, [pc, #56]	; (8002708 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80026ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026d0:	4a10      	ldr	r2, [pc, #64]	; (8002714 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80026d2:	4013      	ands	r3, r2
 80026d4:	0019      	movs	r1, r3
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80026da:	4b0b      	ldr	r3, [pc, #44]	; (8002708 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80026dc:	430a      	orrs	r2, r1
 80026de:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80026e4:	2380      	movs	r3, #128	; 0x80
 80026e6:	005b      	lsls	r3, r3, #1
 80026e8:	429a      	cmp	r2, r3
 80026ea:	d106      	bne.n	80026fa <HAL_RCCEx_PeriphCLKConfig+0x442>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80026ec:	4b06      	ldr	r3, [pc, #24]	; (8002708 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80026ee:	68da      	ldr	r2, [r3, #12]
 80026f0:	4b05      	ldr	r3, [pc, #20]	; (8002708 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80026f2:	2180      	movs	r1, #128	; 0x80
 80026f4:	0449      	lsls	r1, r1, #17
 80026f6:	430a      	orrs	r2, r1
 80026f8:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 80026fa:	2312      	movs	r3, #18
 80026fc:	18fb      	adds	r3, r7, r3
 80026fe:	781b      	ldrb	r3, [r3, #0]
}
 8002700:	0018      	movs	r0, r3
 8002702:	46bd      	mov	sp, r7
 8002704:	b006      	add	sp, #24
 8002706:	bd80      	pop	{r7, pc}
 8002708:	40021000 	.word	0x40021000
 800270c:	efffffff 	.word	0xefffffff
 8002710:	fffff3ff 	.word	0xfffff3ff
 8002714:	fffffcff 	.word	0xfffffcff
 8002718:	fff3ffff 	.word	0xfff3ffff
 800271c:	ffcfffff 	.word	0xffcfffff
 8002720:	ffffcfff 	.word	0xffffcfff
 8002724:	ffff3fff 	.word	0xffff3fff
 8002728:	ffbfffff 	.word	0xffbfffff
 800272c:	feffffff 	.word	0xfeffffff

08002730 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b084      	sub	sp, #16
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	2b00      	cmp	r3, #0
 800273c:	d101      	bne.n	8002742 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800273e:	2301      	movs	r3, #1
 8002740:	e0a8      	b.n	8002894 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002746:	2b00      	cmp	r3, #0
 8002748:	d109      	bne.n	800275e <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	685a      	ldr	r2, [r3, #4]
 800274e:	2382      	movs	r3, #130	; 0x82
 8002750:	005b      	lsls	r3, r3, #1
 8002752:	429a      	cmp	r2, r3
 8002754:	d009      	beq.n	800276a <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	2200      	movs	r2, #0
 800275a:	61da      	str	r2, [r3, #28]
 800275c:	e005      	b.n	800276a <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	2200      	movs	r2, #0
 8002762:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	2200      	movs	r2, #0
 8002768:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	2200      	movs	r2, #0
 800276e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	225d      	movs	r2, #93	; 0x5d
 8002774:	5c9b      	ldrb	r3, [r3, r2]
 8002776:	b2db      	uxtb	r3, r3
 8002778:	2b00      	cmp	r3, #0
 800277a:	d107      	bne.n	800278c <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	225c      	movs	r2, #92	; 0x5c
 8002780:	2100      	movs	r1, #0
 8002782:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	0018      	movs	r0, r3
 8002788:	f7fe fb14 	bl	8000db4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	225d      	movs	r2, #93	; 0x5d
 8002790:	2102      	movs	r1, #2
 8002792:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	681a      	ldr	r2, [r3, #0]
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	2140      	movs	r1, #64	; 0x40
 80027a0:	438a      	bics	r2, r1
 80027a2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	68da      	ldr	r2, [r3, #12]
 80027a8:	23e0      	movs	r3, #224	; 0xe0
 80027aa:	00db      	lsls	r3, r3, #3
 80027ac:	429a      	cmp	r2, r3
 80027ae:	d902      	bls.n	80027b6 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80027b0:	2300      	movs	r3, #0
 80027b2:	60fb      	str	r3, [r7, #12]
 80027b4:	e002      	b.n	80027bc <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80027b6:	2380      	movs	r3, #128	; 0x80
 80027b8:	015b      	lsls	r3, r3, #5
 80027ba:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	68da      	ldr	r2, [r3, #12]
 80027c0:	23f0      	movs	r3, #240	; 0xf0
 80027c2:	011b      	lsls	r3, r3, #4
 80027c4:	429a      	cmp	r2, r3
 80027c6:	d008      	beq.n	80027da <HAL_SPI_Init+0xaa>
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	68da      	ldr	r2, [r3, #12]
 80027cc:	23e0      	movs	r3, #224	; 0xe0
 80027ce:	00db      	lsls	r3, r3, #3
 80027d0:	429a      	cmp	r2, r3
 80027d2:	d002      	beq.n	80027da <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2200      	movs	r2, #0
 80027d8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	685a      	ldr	r2, [r3, #4]
 80027de:	2382      	movs	r3, #130	; 0x82
 80027e0:	005b      	lsls	r3, r3, #1
 80027e2:	401a      	ands	r2, r3
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6899      	ldr	r1, [r3, #8]
 80027e8:	2384      	movs	r3, #132	; 0x84
 80027ea:	021b      	lsls	r3, r3, #8
 80027ec:	400b      	ands	r3, r1
 80027ee:	431a      	orrs	r2, r3
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	691b      	ldr	r3, [r3, #16]
 80027f4:	2102      	movs	r1, #2
 80027f6:	400b      	ands	r3, r1
 80027f8:	431a      	orrs	r2, r3
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	695b      	ldr	r3, [r3, #20]
 80027fe:	2101      	movs	r1, #1
 8002800:	400b      	ands	r3, r1
 8002802:	431a      	orrs	r2, r3
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6999      	ldr	r1, [r3, #24]
 8002808:	2380      	movs	r3, #128	; 0x80
 800280a:	009b      	lsls	r3, r3, #2
 800280c:	400b      	ands	r3, r1
 800280e:	431a      	orrs	r2, r3
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	69db      	ldr	r3, [r3, #28]
 8002814:	2138      	movs	r1, #56	; 0x38
 8002816:	400b      	ands	r3, r1
 8002818:	431a      	orrs	r2, r3
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6a1b      	ldr	r3, [r3, #32]
 800281e:	2180      	movs	r1, #128	; 0x80
 8002820:	400b      	ands	r3, r1
 8002822:	431a      	orrs	r2, r3
 8002824:	0011      	movs	r1, r2
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800282a:	2380      	movs	r3, #128	; 0x80
 800282c:	019b      	lsls	r3, r3, #6
 800282e:	401a      	ands	r2, r3
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	430a      	orrs	r2, r1
 8002836:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	699b      	ldr	r3, [r3, #24]
 800283c:	0c1b      	lsrs	r3, r3, #16
 800283e:	2204      	movs	r2, #4
 8002840:	401a      	ands	r2, r3
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002846:	2110      	movs	r1, #16
 8002848:	400b      	ands	r3, r1
 800284a:	431a      	orrs	r2, r3
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002850:	2108      	movs	r1, #8
 8002852:	400b      	ands	r3, r1
 8002854:	431a      	orrs	r2, r3
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	68d9      	ldr	r1, [r3, #12]
 800285a:	23f0      	movs	r3, #240	; 0xf0
 800285c:	011b      	lsls	r3, r3, #4
 800285e:	400b      	ands	r3, r1
 8002860:	431a      	orrs	r2, r3
 8002862:	0011      	movs	r1, r2
 8002864:	68fa      	ldr	r2, [r7, #12]
 8002866:	2380      	movs	r3, #128	; 0x80
 8002868:	015b      	lsls	r3, r3, #5
 800286a:	401a      	ands	r2, r3
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	430a      	orrs	r2, r1
 8002872:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	69da      	ldr	r2, [r3, #28]
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	4907      	ldr	r1, [pc, #28]	; (800289c <HAL_SPI_Init+0x16c>)
 8002880:	400a      	ands	r2, r1
 8002882:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2200      	movs	r2, #0
 8002888:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	225d      	movs	r2, #93	; 0x5d
 800288e:	2101      	movs	r1, #1
 8002890:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002892:	2300      	movs	r3, #0
}
 8002894:	0018      	movs	r0, r3
 8002896:	46bd      	mov	sp, r7
 8002898:	b004      	add	sp, #16
 800289a:	bd80      	pop	{r7, pc}
 800289c:	fffff7ff 	.word	0xfffff7ff

080028a0 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b088      	sub	sp, #32
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	60f8      	str	r0, [r7, #12]
 80028a8:	60b9      	str	r1, [r7, #8]
 80028aa:	603b      	str	r3, [r7, #0]
 80028ac:	1dbb      	adds	r3, r7, #6
 80028ae:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80028b0:	231f      	movs	r3, #31
 80028b2:	18fb      	adds	r3, r7, r3
 80028b4:	2200      	movs	r2, #0
 80028b6:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	225c      	movs	r2, #92	; 0x5c
 80028bc:	5c9b      	ldrb	r3, [r3, r2]
 80028be:	2b01      	cmp	r3, #1
 80028c0:	d101      	bne.n	80028c6 <HAL_SPI_Transmit+0x26>
 80028c2:	2302      	movs	r3, #2
 80028c4:	e140      	b.n	8002b48 <HAL_SPI_Transmit+0x2a8>
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	225c      	movs	r2, #92	; 0x5c
 80028ca:	2101      	movs	r1, #1
 80028cc:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80028ce:	f7fe fcad 	bl	800122c <HAL_GetTick>
 80028d2:	0003      	movs	r3, r0
 80028d4:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80028d6:	2316      	movs	r3, #22
 80028d8:	18fb      	adds	r3, r7, r3
 80028da:	1dba      	adds	r2, r7, #6
 80028dc:	8812      	ldrh	r2, [r2, #0]
 80028de:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	225d      	movs	r2, #93	; 0x5d
 80028e4:	5c9b      	ldrb	r3, [r3, r2]
 80028e6:	b2db      	uxtb	r3, r3
 80028e8:	2b01      	cmp	r3, #1
 80028ea:	d004      	beq.n	80028f6 <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 80028ec:	231f      	movs	r3, #31
 80028ee:	18fb      	adds	r3, r7, r3
 80028f0:	2202      	movs	r2, #2
 80028f2:	701a      	strb	r2, [r3, #0]
    goto error;
 80028f4:	e11d      	b.n	8002b32 <HAL_SPI_Transmit+0x292>
  }

  if ((pData == NULL) || (Size == 0U))
 80028f6:	68bb      	ldr	r3, [r7, #8]
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d003      	beq.n	8002904 <HAL_SPI_Transmit+0x64>
 80028fc:	1dbb      	adds	r3, r7, #6
 80028fe:	881b      	ldrh	r3, [r3, #0]
 8002900:	2b00      	cmp	r3, #0
 8002902:	d104      	bne.n	800290e <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8002904:	231f      	movs	r3, #31
 8002906:	18fb      	adds	r3, r7, r3
 8002908:	2201      	movs	r2, #1
 800290a:	701a      	strb	r2, [r3, #0]
    goto error;
 800290c:	e111      	b.n	8002b32 <HAL_SPI_Transmit+0x292>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	225d      	movs	r2, #93	; 0x5d
 8002912:	2103      	movs	r1, #3
 8002914:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	2200      	movs	r2, #0
 800291a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	68ba      	ldr	r2, [r7, #8]
 8002920:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	1dba      	adds	r2, r7, #6
 8002926:	8812      	ldrh	r2, [r2, #0]
 8002928:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	1dba      	adds	r2, r7, #6
 800292e:	8812      	ldrh	r2, [r2, #0]
 8002930:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	2200      	movs	r2, #0
 8002936:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	2244      	movs	r2, #68	; 0x44
 800293c:	2100      	movs	r1, #0
 800293e:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	2246      	movs	r2, #70	; 0x46
 8002944:	2100      	movs	r1, #0
 8002946:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	2200      	movs	r2, #0
 800294c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	2200      	movs	r2, #0
 8002952:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	689a      	ldr	r2, [r3, #8]
 8002958:	2380      	movs	r3, #128	; 0x80
 800295a:	021b      	lsls	r3, r3, #8
 800295c:	429a      	cmp	r2, r3
 800295e:	d110      	bne.n	8002982 <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	681a      	ldr	r2, [r3, #0]
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	2140      	movs	r1, #64	; 0x40
 800296c:	438a      	bics	r2, r1
 800296e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	681a      	ldr	r2, [r3, #0]
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	2180      	movs	r1, #128	; 0x80
 800297c:	01c9      	lsls	r1, r1, #7
 800297e:	430a      	orrs	r2, r1
 8002980:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	2240      	movs	r2, #64	; 0x40
 800298a:	4013      	ands	r3, r2
 800298c:	2b40      	cmp	r3, #64	; 0x40
 800298e:	d007      	beq.n	80029a0 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	681a      	ldr	r2, [r3, #0]
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	2140      	movs	r1, #64	; 0x40
 800299c:	430a      	orrs	r2, r1
 800299e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	68da      	ldr	r2, [r3, #12]
 80029a4:	23e0      	movs	r3, #224	; 0xe0
 80029a6:	00db      	lsls	r3, r3, #3
 80029a8:	429a      	cmp	r2, r3
 80029aa:	d94e      	bls.n	8002a4a <HAL_SPI_Transmit+0x1aa>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	685b      	ldr	r3, [r3, #4]
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d004      	beq.n	80029be <HAL_SPI_Transmit+0x11e>
 80029b4:	2316      	movs	r3, #22
 80029b6:	18fb      	adds	r3, r7, r3
 80029b8:	881b      	ldrh	r3, [r3, #0]
 80029ba:	2b01      	cmp	r3, #1
 80029bc:	d13f      	bne.n	8002a3e <HAL_SPI_Transmit+0x19e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029c2:	881a      	ldrh	r2, [r3, #0]
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029ce:	1c9a      	adds	r2, r3, #2
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80029d8:	b29b      	uxth	r3, r3
 80029da:	3b01      	subs	r3, #1
 80029dc:	b29a      	uxth	r2, r3
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80029e2:	e02c      	b.n	8002a3e <HAL_SPI_Transmit+0x19e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	689b      	ldr	r3, [r3, #8]
 80029ea:	2202      	movs	r2, #2
 80029ec:	4013      	ands	r3, r2
 80029ee:	2b02      	cmp	r3, #2
 80029f0:	d112      	bne.n	8002a18 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029f6:	881a      	ldrh	r2, [r3, #0]
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a02:	1c9a      	adds	r2, r3, #2
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a0c:	b29b      	uxth	r3, r3
 8002a0e:	3b01      	subs	r3, #1
 8002a10:	b29a      	uxth	r2, r3
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002a16:	e012      	b.n	8002a3e <HAL_SPI_Transmit+0x19e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002a18:	f7fe fc08 	bl	800122c <HAL_GetTick>
 8002a1c:	0002      	movs	r2, r0
 8002a1e:	69bb      	ldr	r3, [r7, #24]
 8002a20:	1ad3      	subs	r3, r2, r3
 8002a22:	683a      	ldr	r2, [r7, #0]
 8002a24:	429a      	cmp	r2, r3
 8002a26:	d802      	bhi.n	8002a2e <HAL_SPI_Transmit+0x18e>
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	3301      	adds	r3, #1
 8002a2c:	d102      	bne.n	8002a34 <HAL_SPI_Transmit+0x194>
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d104      	bne.n	8002a3e <HAL_SPI_Transmit+0x19e>
        {
          errorcode = HAL_TIMEOUT;
 8002a34:	231f      	movs	r3, #31
 8002a36:	18fb      	adds	r3, r7, r3
 8002a38:	2203      	movs	r2, #3
 8002a3a:	701a      	strb	r2, [r3, #0]
          goto error;
 8002a3c:	e079      	b.n	8002b32 <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a42:	b29b      	uxth	r3, r3
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d1cd      	bne.n	80029e4 <HAL_SPI_Transmit+0x144>
 8002a48:	e04f      	b.n	8002aea <HAL_SPI_Transmit+0x24a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	685b      	ldr	r3, [r3, #4]
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d004      	beq.n	8002a5c <HAL_SPI_Transmit+0x1bc>
 8002a52:	2316      	movs	r3, #22
 8002a54:	18fb      	adds	r3, r7, r3
 8002a56:	881b      	ldrh	r3, [r3, #0]
 8002a58:	2b01      	cmp	r3, #1
 8002a5a:	d141      	bne.n	8002ae0 <HAL_SPI_Transmit+0x240>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	330c      	adds	r3, #12
 8002a66:	7812      	ldrb	r2, [r2, #0]
 8002a68:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a6e:	1c5a      	adds	r2, r3, #1
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a78:	b29b      	uxth	r3, r3
 8002a7a:	3b01      	subs	r3, #1
 8002a7c:	b29a      	uxth	r2, r3
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while (hspi->TxXferCount > 0U)
 8002a82:	e02d      	b.n	8002ae0 <HAL_SPI_Transmit+0x240>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	689b      	ldr	r3, [r3, #8]
 8002a8a:	2202      	movs	r2, #2
 8002a8c:	4013      	ands	r3, r2
 8002a8e:	2b02      	cmp	r3, #2
 8002a90:	d113      	bne.n	8002aba <HAL_SPI_Transmit+0x21a>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	330c      	adds	r3, #12
 8002a9c:	7812      	ldrb	r2, [r2, #0]
 8002a9e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002aa4:	1c5a      	adds	r2, r3, #1
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002aae:	b29b      	uxth	r3, r3
 8002ab0:	3b01      	subs	r3, #1
 8002ab2:	b29a      	uxth	r2, r3
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002ab8:	e012      	b.n	8002ae0 <HAL_SPI_Transmit+0x240>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002aba:	f7fe fbb7 	bl	800122c <HAL_GetTick>
 8002abe:	0002      	movs	r2, r0
 8002ac0:	69bb      	ldr	r3, [r7, #24]
 8002ac2:	1ad3      	subs	r3, r2, r3
 8002ac4:	683a      	ldr	r2, [r7, #0]
 8002ac6:	429a      	cmp	r2, r3
 8002ac8:	d802      	bhi.n	8002ad0 <HAL_SPI_Transmit+0x230>
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	3301      	adds	r3, #1
 8002ace:	d102      	bne.n	8002ad6 <HAL_SPI_Transmit+0x236>
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d104      	bne.n	8002ae0 <HAL_SPI_Transmit+0x240>
        {
          errorcode = HAL_TIMEOUT;
 8002ad6:	231f      	movs	r3, #31
 8002ad8:	18fb      	adds	r3, r7, r3
 8002ada:	2203      	movs	r2, #3
 8002adc:	701a      	strb	r2, [r3, #0]
          goto error;
 8002ade:	e028      	b.n	8002b32 <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ae4:	b29b      	uxth	r3, r3
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d1cc      	bne.n	8002a84 <HAL_SPI_Transmit+0x1e4>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002aea:	69ba      	ldr	r2, [r7, #24]
 8002aec:	6839      	ldr	r1, [r7, #0]
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	0018      	movs	r0, r3
 8002af2:	f000 fcd9 	bl	80034a8 <SPI_EndRxTxTransaction>
 8002af6:	1e03      	subs	r3, r0, #0
 8002af8:	d002      	beq.n	8002b00 <HAL_SPI_Transmit+0x260>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	2220      	movs	r2, #32
 8002afe:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	689b      	ldr	r3, [r3, #8]
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d10a      	bne.n	8002b1e <HAL_SPI_Transmit+0x27e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002b08:	2300      	movs	r3, #0
 8002b0a:	613b      	str	r3, [r7, #16]
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	68db      	ldr	r3, [r3, #12]
 8002b12:	613b      	str	r3, [r7, #16]
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	689b      	ldr	r3, [r3, #8]
 8002b1a:	613b      	str	r3, [r7, #16]
 8002b1c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d004      	beq.n	8002b30 <HAL_SPI_Transmit+0x290>
  {
    errorcode = HAL_ERROR;
 8002b26:	231f      	movs	r3, #31
 8002b28:	18fb      	adds	r3, r7, r3
 8002b2a:	2201      	movs	r2, #1
 8002b2c:	701a      	strb	r2, [r3, #0]
 8002b2e:	e000      	b.n	8002b32 <HAL_SPI_Transmit+0x292>
  }

error:
 8002b30:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	225d      	movs	r2, #93	; 0x5d
 8002b36:	2101      	movs	r1, #1
 8002b38:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	225c      	movs	r2, #92	; 0x5c
 8002b3e:	2100      	movs	r1, #0
 8002b40:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8002b42:	231f      	movs	r3, #31
 8002b44:	18fb      	adds	r3, r7, r3
 8002b46:	781b      	ldrb	r3, [r3, #0]
}
 8002b48:	0018      	movs	r0, r3
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	b008      	add	sp, #32
 8002b4e:	bd80      	pop	{r7, pc}

08002b50 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b50:	b590      	push	{r4, r7, lr}
 8002b52:	b089      	sub	sp, #36	; 0x24
 8002b54:	af02      	add	r7, sp, #8
 8002b56:	60f8      	str	r0, [r7, #12]
 8002b58:	60b9      	str	r1, [r7, #8]
 8002b5a:	603b      	str	r3, [r7, #0]
 8002b5c:	1dbb      	adds	r3, r7, #6
 8002b5e:	801a      	strh	r2, [r3, #0]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002b60:	2317      	movs	r3, #23
 8002b62:	18fb      	adds	r3, r7, r3
 8002b64:	2200      	movs	r2, #0
 8002b66:	701a      	strb	r2, [r3, #0]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	685a      	ldr	r2, [r3, #4]
 8002b6c:	2382      	movs	r3, #130	; 0x82
 8002b6e:	005b      	lsls	r3, r3, #1
 8002b70:	429a      	cmp	r2, r3
 8002b72:	d113      	bne.n	8002b9c <HAL_SPI_Receive+0x4c>
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	689b      	ldr	r3, [r3, #8]
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d10f      	bne.n	8002b9c <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	225d      	movs	r2, #93	; 0x5d
 8002b80:	2104      	movs	r1, #4
 8002b82:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002b84:	1dbb      	adds	r3, r7, #6
 8002b86:	881c      	ldrh	r4, [r3, #0]
 8002b88:	68ba      	ldr	r2, [r7, #8]
 8002b8a:	68b9      	ldr	r1, [r7, #8]
 8002b8c:	68f8      	ldr	r0, [r7, #12]
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	9300      	str	r3, [sp, #0]
 8002b92:	0023      	movs	r3, r4
 8002b94:	f000 f928 	bl	8002de8 <HAL_SPI_TransmitReceive>
 8002b98:	0003      	movs	r3, r0
 8002b9a:	e11c      	b.n	8002dd6 <HAL_SPI_Receive+0x286>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	225c      	movs	r2, #92	; 0x5c
 8002ba0:	5c9b      	ldrb	r3, [r3, r2]
 8002ba2:	2b01      	cmp	r3, #1
 8002ba4:	d101      	bne.n	8002baa <HAL_SPI_Receive+0x5a>
 8002ba6:	2302      	movs	r3, #2
 8002ba8:	e115      	b.n	8002dd6 <HAL_SPI_Receive+0x286>
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	225c      	movs	r2, #92	; 0x5c
 8002bae:	2101      	movs	r1, #1
 8002bb0:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002bb2:	f7fe fb3b 	bl	800122c <HAL_GetTick>
 8002bb6:	0003      	movs	r3, r0
 8002bb8:	613b      	str	r3, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	225d      	movs	r2, #93	; 0x5d
 8002bbe:	5c9b      	ldrb	r3, [r3, r2]
 8002bc0:	b2db      	uxtb	r3, r3
 8002bc2:	2b01      	cmp	r3, #1
 8002bc4:	d004      	beq.n	8002bd0 <HAL_SPI_Receive+0x80>
  {
    errorcode = HAL_BUSY;
 8002bc6:	2317      	movs	r3, #23
 8002bc8:	18fb      	adds	r3, r7, r3
 8002bca:	2202      	movs	r2, #2
 8002bcc:	701a      	strb	r2, [r3, #0]
    goto error;
 8002bce:	e0f7      	b.n	8002dc0 <HAL_SPI_Receive+0x270>
  }

  if ((pData == NULL) || (Size == 0U))
 8002bd0:	68bb      	ldr	r3, [r7, #8]
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d003      	beq.n	8002bde <HAL_SPI_Receive+0x8e>
 8002bd6:	1dbb      	adds	r3, r7, #6
 8002bd8:	881b      	ldrh	r3, [r3, #0]
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d104      	bne.n	8002be8 <HAL_SPI_Receive+0x98>
  {
    errorcode = HAL_ERROR;
 8002bde:	2317      	movs	r3, #23
 8002be0:	18fb      	adds	r3, r7, r3
 8002be2:	2201      	movs	r2, #1
 8002be4:	701a      	strb	r2, [r3, #0]
    goto error;
 8002be6:	e0eb      	b.n	8002dc0 <HAL_SPI_Receive+0x270>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	225d      	movs	r2, #93	; 0x5d
 8002bec:	2104      	movs	r1, #4
 8002bee:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	68ba      	ldr	r2, [r7, #8]
 8002bfa:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	1dba      	adds	r2, r7, #6
 8002c00:	2144      	movs	r1, #68	; 0x44
 8002c02:	8812      	ldrh	r2, [r2, #0]
 8002c04:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	1dba      	adds	r2, r7, #6
 8002c0a:	2146      	movs	r1, #70	; 0x46
 8002c0c:	8812      	ldrh	r2, [r2, #0]
 8002c0e:	525a      	strh	r2, [r3, r1]

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	2200      	movs	r2, #0
 8002c14:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	2200      	movs	r2, #0
 8002c1a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	2200      	movs	r2, #0
 8002c20:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	2200      	movs	r2, #0
 8002c26:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	68da      	ldr	r2, [r3, #12]
 8002c32:	23e0      	movs	r3, #224	; 0xe0
 8002c34:	00db      	lsls	r3, r3, #3
 8002c36:	429a      	cmp	r2, r3
 8002c38:	d908      	bls.n	8002c4c <HAL_SPI_Receive+0xfc>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	685a      	ldr	r2, [r3, #4]
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	4966      	ldr	r1, [pc, #408]	; (8002de0 <HAL_SPI_Receive+0x290>)
 8002c46:	400a      	ands	r2, r1
 8002c48:	605a      	str	r2, [r3, #4]
 8002c4a:	e008      	b.n	8002c5e <HAL_SPI_Receive+0x10e>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	685a      	ldr	r2, [r3, #4]
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	2180      	movs	r1, #128	; 0x80
 8002c58:	0149      	lsls	r1, r1, #5
 8002c5a:	430a      	orrs	r2, r1
 8002c5c:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	689a      	ldr	r2, [r3, #8]
 8002c62:	2380      	movs	r3, #128	; 0x80
 8002c64:	021b      	lsls	r3, r3, #8
 8002c66:	429a      	cmp	r2, r3
 8002c68:	d10f      	bne.n	8002c8a <HAL_SPI_Receive+0x13a>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	681a      	ldr	r2, [r3, #0]
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	2140      	movs	r1, #64	; 0x40
 8002c76:	438a      	bics	r2, r1
 8002c78:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	681a      	ldr	r2, [r3, #0]
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	4957      	ldr	r1, [pc, #348]	; (8002de4 <HAL_SPI_Receive+0x294>)
 8002c86:	400a      	ands	r2, r1
 8002c88:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	2240      	movs	r2, #64	; 0x40
 8002c92:	4013      	ands	r3, r2
 8002c94:	2b40      	cmp	r3, #64	; 0x40
 8002c96:	d007      	beq.n	8002ca8 <HAL_SPI_Receive+0x158>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	681a      	ldr	r2, [r3, #0]
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	2140      	movs	r1, #64	; 0x40
 8002ca4:	430a      	orrs	r2, r1
 8002ca6:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	68da      	ldr	r2, [r3, #12]
 8002cac:	23e0      	movs	r3, #224	; 0xe0
 8002cae:	00db      	lsls	r3, r3, #3
 8002cb0:	429a      	cmp	r2, r3
 8002cb2:	d900      	bls.n	8002cb6 <HAL_SPI_Receive+0x166>
 8002cb4:	e069      	b.n	8002d8a <HAL_SPI_Receive+0x23a>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002cb6:	e031      	b.n	8002d1c <HAL_SPI_Receive+0x1cc>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	689b      	ldr	r3, [r3, #8]
 8002cbe:	2201      	movs	r2, #1
 8002cc0:	4013      	ands	r3, r2
 8002cc2:	2b01      	cmp	r3, #1
 8002cc4:	d117      	bne.n	8002cf6 <HAL_SPI_Receive+0x1a6>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	330c      	adds	r3, #12
 8002ccc:	001a      	movs	r2, r3
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cd2:	7812      	ldrb	r2, [r2, #0]
 8002cd4:	b2d2      	uxtb	r2, r2
 8002cd6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cdc:	1c5a      	adds	r2, r3, #1
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	2246      	movs	r2, #70	; 0x46
 8002ce6:	5a9b      	ldrh	r3, [r3, r2]
 8002ce8:	b29b      	uxth	r3, r3
 8002cea:	3b01      	subs	r3, #1
 8002cec:	b299      	uxth	r1, r3
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	2246      	movs	r2, #70	; 0x46
 8002cf2:	5299      	strh	r1, [r3, r2]
 8002cf4:	e012      	b.n	8002d1c <HAL_SPI_Receive+0x1cc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002cf6:	f7fe fa99 	bl	800122c <HAL_GetTick>
 8002cfa:	0002      	movs	r2, r0
 8002cfc:	693b      	ldr	r3, [r7, #16]
 8002cfe:	1ad3      	subs	r3, r2, r3
 8002d00:	683a      	ldr	r2, [r7, #0]
 8002d02:	429a      	cmp	r2, r3
 8002d04:	d802      	bhi.n	8002d0c <HAL_SPI_Receive+0x1bc>
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	3301      	adds	r3, #1
 8002d0a:	d102      	bne.n	8002d12 <HAL_SPI_Receive+0x1c2>
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d104      	bne.n	8002d1c <HAL_SPI_Receive+0x1cc>
        {
          errorcode = HAL_TIMEOUT;
 8002d12:	2317      	movs	r3, #23
 8002d14:	18fb      	adds	r3, r7, r3
 8002d16:	2203      	movs	r2, #3
 8002d18:	701a      	strb	r2, [r3, #0]
          goto error;
 8002d1a:	e051      	b.n	8002dc0 <HAL_SPI_Receive+0x270>
    while (hspi->RxXferCount > 0U)
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	2246      	movs	r2, #70	; 0x46
 8002d20:	5a9b      	ldrh	r3, [r3, r2]
 8002d22:	b29b      	uxth	r3, r3
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d1c7      	bne.n	8002cb8 <HAL_SPI_Receive+0x168>
 8002d28:	e035      	b.n	8002d96 <HAL_SPI_Receive+0x246>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	689b      	ldr	r3, [r3, #8]
 8002d30:	2201      	movs	r2, #1
 8002d32:	4013      	ands	r3, r2
 8002d34:	2b01      	cmp	r3, #1
 8002d36:	d115      	bne.n	8002d64 <HAL_SPI_Receive+0x214>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	68da      	ldr	r2, [r3, #12]
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d42:	b292      	uxth	r2, r2
 8002d44:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d4a:	1c9a      	adds	r2, r3, #2
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	2246      	movs	r2, #70	; 0x46
 8002d54:	5a9b      	ldrh	r3, [r3, r2]
 8002d56:	b29b      	uxth	r3, r3
 8002d58:	3b01      	subs	r3, #1
 8002d5a:	b299      	uxth	r1, r3
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	2246      	movs	r2, #70	; 0x46
 8002d60:	5299      	strh	r1, [r3, r2]
 8002d62:	e012      	b.n	8002d8a <HAL_SPI_Receive+0x23a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002d64:	f7fe fa62 	bl	800122c <HAL_GetTick>
 8002d68:	0002      	movs	r2, r0
 8002d6a:	693b      	ldr	r3, [r7, #16]
 8002d6c:	1ad3      	subs	r3, r2, r3
 8002d6e:	683a      	ldr	r2, [r7, #0]
 8002d70:	429a      	cmp	r2, r3
 8002d72:	d802      	bhi.n	8002d7a <HAL_SPI_Receive+0x22a>
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	3301      	adds	r3, #1
 8002d78:	d102      	bne.n	8002d80 <HAL_SPI_Receive+0x230>
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d104      	bne.n	8002d8a <HAL_SPI_Receive+0x23a>
        {
          errorcode = HAL_TIMEOUT;
 8002d80:	2317      	movs	r3, #23
 8002d82:	18fb      	adds	r3, r7, r3
 8002d84:	2203      	movs	r2, #3
 8002d86:	701a      	strb	r2, [r3, #0]
          goto error;
 8002d88:	e01a      	b.n	8002dc0 <HAL_SPI_Receive+0x270>
    while (hspi->RxXferCount > 0U)
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	2246      	movs	r2, #70	; 0x46
 8002d8e:	5a9b      	ldrh	r3, [r3, r2]
 8002d90:	b29b      	uxth	r3, r3
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d1c9      	bne.n	8002d2a <HAL_SPI_Receive+0x1da>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002d96:	693a      	ldr	r2, [r7, #16]
 8002d98:	6839      	ldr	r1, [r7, #0]
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	0018      	movs	r0, r3
 8002d9e:	f000 fb25 	bl	80033ec <SPI_EndRxTransaction>
 8002da2:	1e03      	subs	r3, r0, #0
 8002da4:	d002      	beq.n	8002dac <HAL_SPI_Receive+0x25c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	2220      	movs	r2, #32
 8002daa:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d004      	beq.n	8002dbe <HAL_SPI_Receive+0x26e>
  {
    errorcode = HAL_ERROR;
 8002db4:	2317      	movs	r3, #23
 8002db6:	18fb      	adds	r3, r7, r3
 8002db8:	2201      	movs	r2, #1
 8002dba:	701a      	strb	r2, [r3, #0]
 8002dbc:	e000      	b.n	8002dc0 <HAL_SPI_Receive+0x270>
  }

error :
 8002dbe:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	225d      	movs	r2, #93	; 0x5d
 8002dc4:	2101      	movs	r1, #1
 8002dc6:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	225c      	movs	r2, #92	; 0x5c
 8002dcc:	2100      	movs	r1, #0
 8002dce:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8002dd0:	2317      	movs	r3, #23
 8002dd2:	18fb      	adds	r3, r7, r3
 8002dd4:	781b      	ldrb	r3, [r3, #0]
}
 8002dd6:	0018      	movs	r0, r3
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	b007      	add	sp, #28
 8002ddc:	bd90      	pop	{r4, r7, pc}
 8002dde:	46c0      	nop			; (mov r8, r8)
 8002de0:	ffffefff 	.word	0xffffefff
 8002de4:	ffffbfff 	.word	0xffffbfff

08002de8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b08a      	sub	sp, #40	; 0x28
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	60f8      	str	r0, [r7, #12]
 8002df0:	60b9      	str	r1, [r7, #8]
 8002df2:	607a      	str	r2, [r7, #4]
 8002df4:	001a      	movs	r2, r3
 8002df6:	1cbb      	adds	r3, r7, #2
 8002df8:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002dfa:	2301      	movs	r3, #1
 8002dfc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002dfe:	2323      	movs	r3, #35	; 0x23
 8002e00:	18fb      	adds	r3, r7, r3
 8002e02:	2200      	movs	r2, #0
 8002e04:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	225c      	movs	r2, #92	; 0x5c
 8002e0a:	5c9b      	ldrb	r3, [r3, r2]
 8002e0c:	2b01      	cmp	r3, #1
 8002e0e:	d101      	bne.n	8002e14 <HAL_SPI_TransmitReceive+0x2c>
 8002e10:	2302      	movs	r3, #2
 8002e12:	e1b5      	b.n	8003180 <HAL_SPI_TransmitReceive+0x398>
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	225c      	movs	r2, #92	; 0x5c
 8002e18:	2101      	movs	r1, #1
 8002e1a:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002e1c:	f7fe fa06 	bl	800122c <HAL_GetTick>
 8002e20:	0003      	movs	r3, r0
 8002e22:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002e24:	201b      	movs	r0, #27
 8002e26:	183b      	adds	r3, r7, r0
 8002e28:	68fa      	ldr	r2, [r7, #12]
 8002e2a:	215d      	movs	r1, #93	; 0x5d
 8002e2c:	5c52      	ldrb	r2, [r2, r1]
 8002e2e:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	685b      	ldr	r3, [r3, #4]
 8002e34:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8002e36:	2312      	movs	r3, #18
 8002e38:	18fb      	adds	r3, r7, r3
 8002e3a:	1cba      	adds	r2, r7, #2
 8002e3c:	8812      	ldrh	r2, [r2, #0]
 8002e3e:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002e40:	183b      	adds	r3, r7, r0
 8002e42:	781b      	ldrb	r3, [r3, #0]
 8002e44:	2b01      	cmp	r3, #1
 8002e46:	d011      	beq.n	8002e6c <HAL_SPI_TransmitReceive+0x84>
 8002e48:	697a      	ldr	r2, [r7, #20]
 8002e4a:	2382      	movs	r3, #130	; 0x82
 8002e4c:	005b      	lsls	r3, r3, #1
 8002e4e:	429a      	cmp	r2, r3
 8002e50:	d107      	bne.n	8002e62 <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	689b      	ldr	r3, [r3, #8]
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d103      	bne.n	8002e62 <HAL_SPI_TransmitReceive+0x7a>
 8002e5a:	183b      	adds	r3, r7, r0
 8002e5c:	781b      	ldrb	r3, [r3, #0]
 8002e5e:	2b04      	cmp	r3, #4
 8002e60:	d004      	beq.n	8002e6c <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 8002e62:	2323      	movs	r3, #35	; 0x23
 8002e64:	18fb      	adds	r3, r7, r3
 8002e66:	2202      	movs	r2, #2
 8002e68:	701a      	strb	r2, [r3, #0]
    goto error;
 8002e6a:	e17e      	b.n	800316a <HAL_SPI_TransmitReceive+0x382>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002e6c:	68bb      	ldr	r3, [r7, #8]
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d006      	beq.n	8002e80 <HAL_SPI_TransmitReceive+0x98>
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d003      	beq.n	8002e80 <HAL_SPI_TransmitReceive+0x98>
 8002e78:	1cbb      	adds	r3, r7, #2
 8002e7a:	881b      	ldrh	r3, [r3, #0]
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d104      	bne.n	8002e8a <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 8002e80:	2323      	movs	r3, #35	; 0x23
 8002e82:	18fb      	adds	r3, r7, r3
 8002e84:	2201      	movs	r2, #1
 8002e86:	701a      	strb	r2, [r3, #0]
    goto error;
 8002e88:	e16f      	b.n	800316a <HAL_SPI_TransmitReceive+0x382>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	225d      	movs	r2, #93	; 0x5d
 8002e8e:	5c9b      	ldrb	r3, [r3, r2]
 8002e90:	b2db      	uxtb	r3, r3
 8002e92:	2b04      	cmp	r3, #4
 8002e94:	d003      	beq.n	8002e9e <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	225d      	movs	r2, #93	; 0x5d
 8002e9a:	2105      	movs	r1, #5
 8002e9c:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	687a      	ldr	r2, [r7, #4]
 8002ea8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	1cba      	adds	r2, r7, #2
 8002eae:	2146      	movs	r1, #70	; 0x46
 8002eb0:	8812      	ldrh	r2, [r2, #0]
 8002eb2:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	1cba      	adds	r2, r7, #2
 8002eb8:	2144      	movs	r1, #68	; 0x44
 8002eba:	8812      	ldrh	r2, [r2, #0]
 8002ebc:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	68ba      	ldr	r2, [r7, #8]
 8002ec2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	1cba      	adds	r2, r7, #2
 8002ec8:	8812      	ldrh	r2, [r2, #0]
 8002eca:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	1cba      	adds	r2, r7, #2
 8002ed0:	8812      	ldrh	r2, [r2, #0]
 8002ed2:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	2200      	movs	r2, #0
 8002ede:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	68da      	ldr	r2, [r3, #12]
 8002ee4:	23e0      	movs	r3, #224	; 0xe0
 8002ee6:	00db      	lsls	r3, r3, #3
 8002ee8:	429a      	cmp	r2, r3
 8002eea:	d908      	bls.n	8002efe <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	685a      	ldr	r2, [r3, #4]
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	49a4      	ldr	r1, [pc, #656]	; (8003188 <HAL_SPI_TransmitReceive+0x3a0>)
 8002ef8:	400a      	ands	r2, r1
 8002efa:	605a      	str	r2, [r3, #4]
 8002efc:	e008      	b.n	8002f10 <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	685a      	ldr	r2, [r3, #4]
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	2180      	movs	r1, #128	; 0x80
 8002f0a:	0149      	lsls	r1, r1, #5
 8002f0c:	430a      	orrs	r2, r1
 8002f0e:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	2240      	movs	r2, #64	; 0x40
 8002f18:	4013      	ands	r3, r2
 8002f1a:	2b40      	cmp	r3, #64	; 0x40
 8002f1c:	d007      	beq.n	8002f2e <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	681a      	ldr	r2, [r3, #0]
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	2140      	movs	r1, #64	; 0x40
 8002f2a:	430a      	orrs	r2, r1
 8002f2c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	68da      	ldr	r2, [r3, #12]
 8002f32:	23e0      	movs	r3, #224	; 0xe0
 8002f34:	00db      	lsls	r3, r3, #3
 8002f36:	429a      	cmp	r2, r3
 8002f38:	d800      	bhi.n	8002f3c <HAL_SPI_TransmitReceive+0x154>
 8002f3a:	e07f      	b.n	800303c <HAL_SPI_TransmitReceive+0x254>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	685b      	ldr	r3, [r3, #4]
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d005      	beq.n	8002f50 <HAL_SPI_TransmitReceive+0x168>
 8002f44:	2312      	movs	r3, #18
 8002f46:	18fb      	adds	r3, r7, r3
 8002f48:	881b      	ldrh	r3, [r3, #0]
 8002f4a:	2b01      	cmp	r3, #1
 8002f4c:	d000      	beq.n	8002f50 <HAL_SPI_TransmitReceive+0x168>
 8002f4e:	e069      	b.n	8003024 <HAL_SPI_TransmitReceive+0x23c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f54:	881a      	ldrh	r2, [r3, #0]
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f60:	1c9a      	adds	r2, r3, #2
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f6a:	b29b      	uxth	r3, r3
 8002f6c:	3b01      	subs	r3, #1
 8002f6e:	b29a      	uxth	r2, r3
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002f74:	e056      	b.n	8003024 <HAL_SPI_TransmitReceive+0x23c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	689b      	ldr	r3, [r3, #8]
 8002f7c:	2202      	movs	r2, #2
 8002f7e:	4013      	ands	r3, r2
 8002f80:	2b02      	cmp	r3, #2
 8002f82:	d11b      	bne.n	8002fbc <HAL_SPI_TransmitReceive+0x1d4>
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f88:	b29b      	uxth	r3, r3
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d016      	beq.n	8002fbc <HAL_SPI_TransmitReceive+0x1d4>
 8002f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f90:	2b01      	cmp	r3, #1
 8002f92:	d113      	bne.n	8002fbc <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f98:	881a      	ldrh	r2, [r3, #0]
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fa4:	1c9a      	adds	r2, r3, #2
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002fae:	b29b      	uxth	r3, r3
 8002fb0:	3b01      	subs	r3, #1
 8002fb2:	b29a      	uxth	r2, r3
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002fb8:	2300      	movs	r3, #0
 8002fba:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	689b      	ldr	r3, [r3, #8]
 8002fc2:	2201      	movs	r2, #1
 8002fc4:	4013      	ands	r3, r2
 8002fc6:	2b01      	cmp	r3, #1
 8002fc8:	d11c      	bne.n	8003004 <HAL_SPI_TransmitReceive+0x21c>
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	2246      	movs	r2, #70	; 0x46
 8002fce:	5a9b      	ldrh	r3, [r3, r2]
 8002fd0:	b29b      	uxth	r3, r3
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d016      	beq.n	8003004 <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	68da      	ldr	r2, [r3, #12]
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fe0:	b292      	uxth	r2, r2
 8002fe2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fe8:	1c9a      	adds	r2, r3, #2
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	2246      	movs	r2, #70	; 0x46
 8002ff2:	5a9b      	ldrh	r3, [r3, r2]
 8002ff4:	b29b      	uxth	r3, r3
 8002ff6:	3b01      	subs	r3, #1
 8002ff8:	b299      	uxth	r1, r3
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	2246      	movs	r2, #70	; 0x46
 8002ffe:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003000:	2301      	movs	r3, #1
 8003002:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003004:	f7fe f912 	bl	800122c <HAL_GetTick>
 8003008:	0002      	movs	r2, r0
 800300a:	69fb      	ldr	r3, [r7, #28]
 800300c:	1ad3      	subs	r3, r2, r3
 800300e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003010:	429a      	cmp	r2, r3
 8003012:	d807      	bhi.n	8003024 <HAL_SPI_TransmitReceive+0x23c>
 8003014:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003016:	3301      	adds	r3, #1
 8003018:	d004      	beq.n	8003024 <HAL_SPI_TransmitReceive+0x23c>
      {
        errorcode = HAL_TIMEOUT;
 800301a:	2323      	movs	r3, #35	; 0x23
 800301c:	18fb      	adds	r3, r7, r3
 800301e:	2203      	movs	r2, #3
 8003020:	701a      	strb	r2, [r3, #0]
        goto error;
 8003022:	e0a2      	b.n	800316a <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003028:	b29b      	uxth	r3, r3
 800302a:	2b00      	cmp	r3, #0
 800302c:	d1a3      	bne.n	8002f76 <HAL_SPI_TransmitReceive+0x18e>
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	2246      	movs	r2, #70	; 0x46
 8003032:	5a9b      	ldrh	r3, [r3, r2]
 8003034:	b29b      	uxth	r3, r3
 8003036:	2b00      	cmp	r3, #0
 8003038:	d19d      	bne.n	8002f76 <HAL_SPI_TransmitReceive+0x18e>
 800303a:	e085      	b.n	8003148 <HAL_SPI_TransmitReceive+0x360>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	685b      	ldr	r3, [r3, #4]
 8003040:	2b00      	cmp	r3, #0
 8003042:	d005      	beq.n	8003050 <HAL_SPI_TransmitReceive+0x268>
 8003044:	2312      	movs	r3, #18
 8003046:	18fb      	adds	r3, r7, r3
 8003048:	881b      	ldrh	r3, [r3, #0]
 800304a:	2b01      	cmp	r3, #1
 800304c:	d000      	beq.n	8003050 <HAL_SPI_TransmitReceive+0x268>
 800304e:	e070      	b.n	8003132 <HAL_SPI_TransmitReceive+0x34a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	330c      	adds	r3, #12
 800305a:	7812      	ldrb	r2, [r2, #0]
 800305c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003062:	1c5a      	adds	r2, r3, #1
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800306c:	b29b      	uxth	r3, r3
 800306e:	3b01      	subs	r3, #1
 8003070:	b29a      	uxth	r2, r3
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003076:	e05c      	b.n	8003132 <HAL_SPI_TransmitReceive+0x34a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	689b      	ldr	r3, [r3, #8]
 800307e:	2202      	movs	r2, #2
 8003080:	4013      	ands	r3, r2
 8003082:	2b02      	cmp	r3, #2
 8003084:	d11c      	bne.n	80030c0 <HAL_SPI_TransmitReceive+0x2d8>
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800308a:	b29b      	uxth	r3, r3
 800308c:	2b00      	cmp	r3, #0
 800308e:	d017      	beq.n	80030c0 <HAL_SPI_TransmitReceive+0x2d8>
 8003090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003092:	2b01      	cmp	r3, #1
 8003094:	d114      	bne.n	80030c0 <HAL_SPI_TransmitReceive+0x2d8>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	330c      	adds	r3, #12
 80030a0:	7812      	ldrb	r2, [r2, #0]
 80030a2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030a8:	1c5a      	adds	r2, r3, #1
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80030b2:	b29b      	uxth	r3, r3
 80030b4:	3b01      	subs	r3, #1
 80030b6:	b29a      	uxth	r2, r3
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80030bc:	2300      	movs	r3, #0
 80030be:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	689b      	ldr	r3, [r3, #8]
 80030c6:	2201      	movs	r2, #1
 80030c8:	4013      	ands	r3, r2
 80030ca:	2b01      	cmp	r3, #1
 80030cc:	d11e      	bne.n	800310c <HAL_SPI_TransmitReceive+0x324>
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	2246      	movs	r2, #70	; 0x46
 80030d2:	5a9b      	ldrh	r3, [r3, r2]
 80030d4:	b29b      	uxth	r3, r3
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d018      	beq.n	800310c <HAL_SPI_TransmitReceive+0x324>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	330c      	adds	r3, #12
 80030e0:	001a      	movs	r2, r3
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030e6:	7812      	ldrb	r2, [r2, #0]
 80030e8:	b2d2      	uxtb	r2, r2
 80030ea:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030f0:	1c5a      	adds	r2, r3, #1
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	2246      	movs	r2, #70	; 0x46
 80030fa:	5a9b      	ldrh	r3, [r3, r2]
 80030fc:	b29b      	uxth	r3, r3
 80030fe:	3b01      	subs	r3, #1
 8003100:	b299      	uxth	r1, r3
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	2246      	movs	r2, #70	; 0x46
 8003106:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003108:	2301      	movs	r3, #1
 800310a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800310c:	f7fe f88e 	bl	800122c <HAL_GetTick>
 8003110:	0002      	movs	r2, r0
 8003112:	69fb      	ldr	r3, [r7, #28]
 8003114:	1ad3      	subs	r3, r2, r3
 8003116:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003118:	429a      	cmp	r2, r3
 800311a:	d802      	bhi.n	8003122 <HAL_SPI_TransmitReceive+0x33a>
 800311c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800311e:	3301      	adds	r3, #1
 8003120:	d102      	bne.n	8003128 <HAL_SPI_TransmitReceive+0x340>
 8003122:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003124:	2b00      	cmp	r3, #0
 8003126:	d104      	bne.n	8003132 <HAL_SPI_TransmitReceive+0x34a>
      {
        errorcode = HAL_TIMEOUT;
 8003128:	2323      	movs	r3, #35	; 0x23
 800312a:	18fb      	adds	r3, r7, r3
 800312c:	2203      	movs	r2, #3
 800312e:	701a      	strb	r2, [r3, #0]
        goto error;
 8003130:	e01b      	b.n	800316a <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003136:	b29b      	uxth	r3, r3
 8003138:	2b00      	cmp	r3, #0
 800313a:	d19d      	bne.n	8003078 <HAL_SPI_TransmitReceive+0x290>
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	2246      	movs	r2, #70	; 0x46
 8003140:	5a9b      	ldrh	r3, [r3, r2]
 8003142:	b29b      	uxth	r3, r3
 8003144:	2b00      	cmp	r3, #0
 8003146:	d197      	bne.n	8003078 <HAL_SPI_TransmitReceive+0x290>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003148:	69fa      	ldr	r2, [r7, #28]
 800314a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	0018      	movs	r0, r3
 8003150:	f000 f9aa 	bl	80034a8 <SPI_EndRxTxTransaction>
 8003154:	1e03      	subs	r3, r0, #0
 8003156:	d007      	beq.n	8003168 <HAL_SPI_TransmitReceive+0x380>
  {
    errorcode = HAL_ERROR;
 8003158:	2323      	movs	r3, #35	; 0x23
 800315a:	18fb      	adds	r3, r7, r3
 800315c:	2201      	movs	r2, #1
 800315e:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	2220      	movs	r2, #32
 8003164:	661a      	str	r2, [r3, #96]	; 0x60
 8003166:	e000      	b.n	800316a <HAL_SPI_TransmitReceive+0x382>
  }

error :
 8003168:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	225d      	movs	r2, #93	; 0x5d
 800316e:	2101      	movs	r1, #1
 8003170:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	225c      	movs	r2, #92	; 0x5c
 8003176:	2100      	movs	r1, #0
 8003178:	5499      	strb	r1, [r3, r2]
  return errorcode;
 800317a:	2323      	movs	r3, #35	; 0x23
 800317c:	18fb      	adds	r3, r7, r3
 800317e:	781b      	ldrb	r3, [r3, #0]
}
 8003180:	0018      	movs	r0, r3
 8003182:	46bd      	mov	sp, r7
 8003184:	b00a      	add	sp, #40	; 0x28
 8003186:	bd80      	pop	{r7, pc}
 8003188:	ffffefff 	.word	0xffffefff

0800318c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800318c:	b580      	push	{r7, lr}
 800318e:	b088      	sub	sp, #32
 8003190:	af00      	add	r7, sp, #0
 8003192:	60f8      	str	r0, [r7, #12]
 8003194:	60b9      	str	r1, [r7, #8]
 8003196:	603b      	str	r3, [r7, #0]
 8003198:	1dfb      	adds	r3, r7, #7
 800319a:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800319c:	f7fe f846 	bl	800122c <HAL_GetTick>
 80031a0:	0002      	movs	r2, r0
 80031a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031a4:	1a9b      	subs	r3, r3, r2
 80031a6:	683a      	ldr	r2, [r7, #0]
 80031a8:	18d3      	adds	r3, r2, r3
 80031aa:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80031ac:	f7fe f83e 	bl	800122c <HAL_GetTick>
 80031b0:	0003      	movs	r3, r0
 80031b2:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80031b4:	4b3a      	ldr	r3, [pc, #232]	; (80032a0 <SPI_WaitFlagStateUntilTimeout+0x114>)
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	015b      	lsls	r3, r3, #5
 80031ba:	0d1b      	lsrs	r3, r3, #20
 80031bc:	69fa      	ldr	r2, [r7, #28]
 80031be:	4353      	muls	r3, r2
 80031c0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80031c2:	e058      	b.n	8003276 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	3301      	adds	r3, #1
 80031c8:	d055      	beq.n	8003276 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80031ca:	f7fe f82f 	bl	800122c <HAL_GetTick>
 80031ce:	0002      	movs	r2, r0
 80031d0:	69bb      	ldr	r3, [r7, #24]
 80031d2:	1ad3      	subs	r3, r2, r3
 80031d4:	69fa      	ldr	r2, [r7, #28]
 80031d6:	429a      	cmp	r2, r3
 80031d8:	d902      	bls.n	80031e0 <SPI_WaitFlagStateUntilTimeout+0x54>
 80031da:	69fb      	ldr	r3, [r7, #28]
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d142      	bne.n	8003266 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	685a      	ldr	r2, [r3, #4]
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	21e0      	movs	r1, #224	; 0xe0
 80031ec:	438a      	bics	r2, r1
 80031ee:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	685a      	ldr	r2, [r3, #4]
 80031f4:	2382      	movs	r3, #130	; 0x82
 80031f6:	005b      	lsls	r3, r3, #1
 80031f8:	429a      	cmp	r2, r3
 80031fa:	d113      	bne.n	8003224 <SPI_WaitFlagStateUntilTimeout+0x98>
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	689a      	ldr	r2, [r3, #8]
 8003200:	2380      	movs	r3, #128	; 0x80
 8003202:	021b      	lsls	r3, r3, #8
 8003204:	429a      	cmp	r2, r3
 8003206:	d005      	beq.n	8003214 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	689a      	ldr	r2, [r3, #8]
 800320c:	2380      	movs	r3, #128	; 0x80
 800320e:	00db      	lsls	r3, r3, #3
 8003210:	429a      	cmp	r2, r3
 8003212:	d107      	bne.n	8003224 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	681a      	ldr	r2, [r3, #0]
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	2140      	movs	r1, #64	; 0x40
 8003220:	438a      	bics	r2, r1
 8003222:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003228:	2380      	movs	r3, #128	; 0x80
 800322a:	019b      	lsls	r3, r3, #6
 800322c:	429a      	cmp	r2, r3
 800322e:	d110      	bne.n	8003252 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	681a      	ldr	r2, [r3, #0]
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	491a      	ldr	r1, [pc, #104]	; (80032a4 <SPI_WaitFlagStateUntilTimeout+0x118>)
 800323c:	400a      	ands	r2, r1
 800323e:	601a      	str	r2, [r3, #0]
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	681a      	ldr	r2, [r3, #0]
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	2180      	movs	r1, #128	; 0x80
 800324c:	0189      	lsls	r1, r1, #6
 800324e:	430a      	orrs	r2, r1
 8003250:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	225d      	movs	r2, #93	; 0x5d
 8003256:	2101      	movs	r1, #1
 8003258:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	225c      	movs	r2, #92	; 0x5c
 800325e:	2100      	movs	r1, #0
 8003260:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003262:	2303      	movs	r3, #3
 8003264:	e017      	b.n	8003296 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003266:	697b      	ldr	r3, [r7, #20]
 8003268:	2b00      	cmp	r3, #0
 800326a:	d101      	bne.n	8003270 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 800326c:	2300      	movs	r3, #0
 800326e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003270:	697b      	ldr	r3, [r7, #20]
 8003272:	3b01      	subs	r3, #1
 8003274:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	689b      	ldr	r3, [r3, #8]
 800327c:	68ba      	ldr	r2, [r7, #8]
 800327e:	4013      	ands	r3, r2
 8003280:	68ba      	ldr	r2, [r7, #8]
 8003282:	1ad3      	subs	r3, r2, r3
 8003284:	425a      	negs	r2, r3
 8003286:	4153      	adcs	r3, r2
 8003288:	b2db      	uxtb	r3, r3
 800328a:	001a      	movs	r2, r3
 800328c:	1dfb      	adds	r3, r7, #7
 800328e:	781b      	ldrb	r3, [r3, #0]
 8003290:	429a      	cmp	r2, r3
 8003292:	d197      	bne.n	80031c4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003294:	2300      	movs	r3, #0
}
 8003296:	0018      	movs	r0, r3
 8003298:	46bd      	mov	sp, r7
 800329a:	b008      	add	sp, #32
 800329c:	bd80      	pop	{r7, pc}
 800329e:	46c0      	nop			; (mov r8, r8)
 80032a0:	20000004 	.word	0x20000004
 80032a4:	ffffdfff 	.word	0xffffdfff

080032a8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b08a      	sub	sp, #40	; 0x28
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	60f8      	str	r0, [r7, #12]
 80032b0:	60b9      	str	r1, [r7, #8]
 80032b2:	607a      	str	r2, [r7, #4]
 80032b4:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80032b6:	2317      	movs	r3, #23
 80032b8:	18fb      	adds	r3, r7, r3
 80032ba:	2200      	movs	r2, #0
 80032bc:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80032be:	f7fd ffb5 	bl	800122c <HAL_GetTick>
 80032c2:	0002      	movs	r2, r0
 80032c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032c6:	1a9b      	subs	r3, r3, r2
 80032c8:	683a      	ldr	r2, [r7, #0]
 80032ca:	18d3      	adds	r3, r2, r3
 80032cc:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80032ce:	f7fd ffad 	bl	800122c <HAL_GetTick>
 80032d2:	0003      	movs	r3, r0
 80032d4:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	330c      	adds	r3, #12
 80032dc:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80032de:	4b41      	ldr	r3, [pc, #260]	; (80033e4 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 80032e0:	681a      	ldr	r2, [r3, #0]
 80032e2:	0013      	movs	r3, r2
 80032e4:	009b      	lsls	r3, r3, #2
 80032e6:	189b      	adds	r3, r3, r2
 80032e8:	00da      	lsls	r2, r3, #3
 80032ea:	1ad3      	subs	r3, r2, r3
 80032ec:	0d1b      	lsrs	r3, r3, #20
 80032ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032f0:	4353      	muls	r3, r2
 80032f2:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80032f4:	e068      	b.n	80033c8 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80032f6:	68ba      	ldr	r2, [r7, #8]
 80032f8:	23c0      	movs	r3, #192	; 0xc0
 80032fa:	00db      	lsls	r3, r3, #3
 80032fc:	429a      	cmp	r2, r3
 80032fe:	d10a      	bne.n	8003316 <SPI_WaitFifoStateUntilTimeout+0x6e>
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2b00      	cmp	r3, #0
 8003304:	d107      	bne.n	8003316 <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003306:	69fb      	ldr	r3, [r7, #28]
 8003308:	781b      	ldrb	r3, [r3, #0]
 800330a:	b2da      	uxtb	r2, r3
 800330c:	2117      	movs	r1, #23
 800330e:	187b      	adds	r3, r7, r1
 8003310:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003312:	187b      	adds	r3, r7, r1
 8003314:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	3301      	adds	r3, #1
 800331a:	d055      	beq.n	80033c8 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800331c:	f7fd ff86 	bl	800122c <HAL_GetTick>
 8003320:	0002      	movs	r2, r0
 8003322:	6a3b      	ldr	r3, [r7, #32]
 8003324:	1ad3      	subs	r3, r2, r3
 8003326:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003328:	429a      	cmp	r2, r3
 800332a:	d902      	bls.n	8003332 <SPI_WaitFifoStateUntilTimeout+0x8a>
 800332c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800332e:	2b00      	cmp	r3, #0
 8003330:	d142      	bne.n	80033b8 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	685a      	ldr	r2, [r3, #4]
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	21e0      	movs	r1, #224	; 0xe0
 800333e:	438a      	bics	r2, r1
 8003340:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	685a      	ldr	r2, [r3, #4]
 8003346:	2382      	movs	r3, #130	; 0x82
 8003348:	005b      	lsls	r3, r3, #1
 800334a:	429a      	cmp	r2, r3
 800334c:	d113      	bne.n	8003376 <SPI_WaitFifoStateUntilTimeout+0xce>
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	689a      	ldr	r2, [r3, #8]
 8003352:	2380      	movs	r3, #128	; 0x80
 8003354:	021b      	lsls	r3, r3, #8
 8003356:	429a      	cmp	r2, r3
 8003358:	d005      	beq.n	8003366 <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	689a      	ldr	r2, [r3, #8]
 800335e:	2380      	movs	r3, #128	; 0x80
 8003360:	00db      	lsls	r3, r3, #3
 8003362:	429a      	cmp	r2, r3
 8003364:	d107      	bne.n	8003376 <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	681a      	ldr	r2, [r3, #0]
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	2140      	movs	r1, #64	; 0x40
 8003372:	438a      	bics	r2, r1
 8003374:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800337a:	2380      	movs	r3, #128	; 0x80
 800337c:	019b      	lsls	r3, r3, #6
 800337e:	429a      	cmp	r2, r3
 8003380:	d110      	bne.n	80033a4 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	681a      	ldr	r2, [r3, #0]
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	4916      	ldr	r1, [pc, #88]	; (80033e8 <SPI_WaitFifoStateUntilTimeout+0x140>)
 800338e:	400a      	ands	r2, r1
 8003390:	601a      	str	r2, [r3, #0]
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	681a      	ldr	r2, [r3, #0]
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	2180      	movs	r1, #128	; 0x80
 800339e:	0189      	lsls	r1, r1, #6
 80033a0:	430a      	orrs	r2, r1
 80033a2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	225d      	movs	r2, #93	; 0x5d
 80033a8:	2101      	movs	r1, #1
 80033aa:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	225c      	movs	r2, #92	; 0x5c
 80033b0:	2100      	movs	r1, #0
 80033b2:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80033b4:	2303      	movs	r3, #3
 80033b6:	e010      	b.n	80033da <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80033b8:	69bb      	ldr	r3, [r7, #24]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d101      	bne.n	80033c2 <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 80033be:	2300      	movs	r3, #0
 80033c0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 80033c2:	69bb      	ldr	r3, [r7, #24]
 80033c4:	3b01      	subs	r3, #1
 80033c6:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	689b      	ldr	r3, [r3, #8]
 80033ce:	68ba      	ldr	r2, [r7, #8]
 80033d0:	4013      	ands	r3, r2
 80033d2:	687a      	ldr	r2, [r7, #4]
 80033d4:	429a      	cmp	r2, r3
 80033d6:	d18e      	bne.n	80032f6 <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 80033d8:	2300      	movs	r3, #0
}
 80033da:	0018      	movs	r0, r3
 80033dc:	46bd      	mov	sp, r7
 80033de:	b00a      	add	sp, #40	; 0x28
 80033e0:	bd80      	pop	{r7, pc}
 80033e2:	46c0      	nop			; (mov r8, r8)
 80033e4:	20000004 	.word	0x20000004
 80033e8:	ffffdfff 	.word	0xffffdfff

080033ec <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b086      	sub	sp, #24
 80033f0:	af02      	add	r7, sp, #8
 80033f2:	60f8      	str	r0, [r7, #12]
 80033f4:	60b9      	str	r1, [r7, #8]
 80033f6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	685a      	ldr	r2, [r3, #4]
 80033fc:	2382      	movs	r3, #130	; 0x82
 80033fe:	005b      	lsls	r3, r3, #1
 8003400:	429a      	cmp	r2, r3
 8003402:	d113      	bne.n	800342c <SPI_EndRxTransaction+0x40>
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	689a      	ldr	r2, [r3, #8]
 8003408:	2380      	movs	r3, #128	; 0x80
 800340a:	021b      	lsls	r3, r3, #8
 800340c:	429a      	cmp	r2, r3
 800340e:	d005      	beq.n	800341c <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	689a      	ldr	r2, [r3, #8]
 8003414:	2380      	movs	r3, #128	; 0x80
 8003416:	00db      	lsls	r3, r3, #3
 8003418:	429a      	cmp	r2, r3
 800341a:	d107      	bne.n	800342c <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	681a      	ldr	r2, [r3, #0]
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	2140      	movs	r1, #64	; 0x40
 8003428:	438a      	bics	r2, r1
 800342a:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800342c:	68ba      	ldr	r2, [r7, #8]
 800342e:	68f8      	ldr	r0, [r7, #12]
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	9300      	str	r3, [sp, #0]
 8003434:	0013      	movs	r3, r2
 8003436:	2200      	movs	r2, #0
 8003438:	2180      	movs	r1, #128	; 0x80
 800343a:	f7ff fea7 	bl	800318c <SPI_WaitFlagStateUntilTimeout>
 800343e:	1e03      	subs	r3, r0, #0
 8003440:	d007      	beq.n	8003452 <SPI_EndRxTransaction+0x66>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003446:	2220      	movs	r2, #32
 8003448:	431a      	orrs	r2, r3
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800344e:	2303      	movs	r3, #3
 8003450:	e026      	b.n	80034a0 <SPI_EndRxTransaction+0xb4>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	685a      	ldr	r2, [r3, #4]
 8003456:	2382      	movs	r3, #130	; 0x82
 8003458:	005b      	lsls	r3, r3, #1
 800345a:	429a      	cmp	r2, r3
 800345c:	d11f      	bne.n	800349e <SPI_EndRxTransaction+0xb2>
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	689a      	ldr	r2, [r3, #8]
 8003462:	2380      	movs	r3, #128	; 0x80
 8003464:	021b      	lsls	r3, r3, #8
 8003466:	429a      	cmp	r2, r3
 8003468:	d005      	beq.n	8003476 <SPI_EndRxTransaction+0x8a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	689a      	ldr	r2, [r3, #8]
 800346e:	2380      	movs	r3, #128	; 0x80
 8003470:	00db      	lsls	r3, r3, #3
 8003472:	429a      	cmp	r2, r3
 8003474:	d113      	bne.n	800349e <SPI_EndRxTransaction+0xb2>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003476:	68ba      	ldr	r2, [r7, #8]
 8003478:	23c0      	movs	r3, #192	; 0xc0
 800347a:	00d9      	lsls	r1, r3, #3
 800347c:	68f8      	ldr	r0, [r7, #12]
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	9300      	str	r3, [sp, #0]
 8003482:	0013      	movs	r3, r2
 8003484:	2200      	movs	r2, #0
 8003486:	f7ff ff0f 	bl	80032a8 <SPI_WaitFifoStateUntilTimeout>
 800348a:	1e03      	subs	r3, r0, #0
 800348c:	d007      	beq.n	800349e <SPI_EndRxTransaction+0xb2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003492:	2220      	movs	r2, #32
 8003494:	431a      	orrs	r2, r3
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800349a:	2303      	movs	r3, #3
 800349c:	e000      	b.n	80034a0 <SPI_EndRxTransaction+0xb4>
    }
  }
  return HAL_OK;
 800349e:	2300      	movs	r3, #0
}
 80034a0:	0018      	movs	r0, r3
 80034a2:	46bd      	mov	sp, r7
 80034a4:	b004      	add	sp, #16
 80034a6:	bd80      	pop	{r7, pc}

080034a8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b086      	sub	sp, #24
 80034ac:	af02      	add	r7, sp, #8
 80034ae:	60f8      	str	r0, [r7, #12]
 80034b0:	60b9      	str	r1, [r7, #8]
 80034b2:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80034b4:	68ba      	ldr	r2, [r7, #8]
 80034b6:	23c0      	movs	r3, #192	; 0xc0
 80034b8:	0159      	lsls	r1, r3, #5
 80034ba:	68f8      	ldr	r0, [r7, #12]
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	9300      	str	r3, [sp, #0]
 80034c0:	0013      	movs	r3, r2
 80034c2:	2200      	movs	r2, #0
 80034c4:	f7ff fef0 	bl	80032a8 <SPI_WaitFifoStateUntilTimeout>
 80034c8:	1e03      	subs	r3, r0, #0
 80034ca:	d007      	beq.n	80034dc <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034d0:	2220      	movs	r2, #32
 80034d2:	431a      	orrs	r2, r3
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80034d8:	2303      	movs	r3, #3
 80034da:	e027      	b.n	800352c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80034dc:	68ba      	ldr	r2, [r7, #8]
 80034de:	68f8      	ldr	r0, [r7, #12]
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	9300      	str	r3, [sp, #0]
 80034e4:	0013      	movs	r3, r2
 80034e6:	2200      	movs	r2, #0
 80034e8:	2180      	movs	r1, #128	; 0x80
 80034ea:	f7ff fe4f 	bl	800318c <SPI_WaitFlagStateUntilTimeout>
 80034ee:	1e03      	subs	r3, r0, #0
 80034f0:	d007      	beq.n	8003502 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034f6:	2220      	movs	r2, #32
 80034f8:	431a      	orrs	r2, r3
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80034fe:	2303      	movs	r3, #3
 8003500:	e014      	b.n	800352c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003502:	68ba      	ldr	r2, [r7, #8]
 8003504:	23c0      	movs	r3, #192	; 0xc0
 8003506:	00d9      	lsls	r1, r3, #3
 8003508:	68f8      	ldr	r0, [r7, #12]
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	9300      	str	r3, [sp, #0]
 800350e:	0013      	movs	r3, r2
 8003510:	2200      	movs	r2, #0
 8003512:	f7ff fec9 	bl	80032a8 <SPI_WaitFifoStateUntilTimeout>
 8003516:	1e03      	subs	r3, r0, #0
 8003518:	d007      	beq.n	800352a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800351e:	2220      	movs	r2, #32
 8003520:	431a      	orrs	r2, r3
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003526:	2303      	movs	r3, #3
 8003528:	e000      	b.n	800352c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800352a:	2300      	movs	r3, #0
}
 800352c:	0018      	movs	r0, r3
 800352e:	46bd      	mov	sp, r7
 8003530:	b004      	add	sp, #16
 8003532:	bd80      	pop	{r7, pc}

08003534 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003534:	b580      	push	{r7, lr}
 8003536:	b082      	sub	sp, #8
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2b00      	cmp	r3, #0
 8003540:	d101      	bne.n	8003546 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003542:	2301      	movs	r3, #1
 8003544:	e04a      	b.n	80035dc <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	223d      	movs	r2, #61	; 0x3d
 800354a:	5c9b      	ldrb	r3, [r3, r2]
 800354c:	b2db      	uxtb	r3, r3
 800354e:	2b00      	cmp	r3, #0
 8003550:	d107      	bne.n	8003562 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	223c      	movs	r2, #60	; 0x3c
 8003556:	2100      	movs	r1, #0
 8003558:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	0018      	movs	r0, r3
 800355e:	f7fd fc97 	bl	8000e90 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	223d      	movs	r2, #61	; 0x3d
 8003566:	2102      	movs	r1, #2
 8003568:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681a      	ldr	r2, [r3, #0]
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	3304      	adds	r3, #4
 8003572:	0019      	movs	r1, r3
 8003574:	0010      	movs	r0, r2
 8003576:	f000 f835 	bl	80035e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	2248      	movs	r2, #72	; 0x48
 800357e:	2101      	movs	r1, #1
 8003580:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	223e      	movs	r2, #62	; 0x3e
 8003586:	2101      	movs	r1, #1
 8003588:	5499      	strb	r1, [r3, r2]
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	223f      	movs	r2, #63	; 0x3f
 800358e:	2101      	movs	r1, #1
 8003590:	5499      	strb	r1, [r3, r2]
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	2240      	movs	r2, #64	; 0x40
 8003596:	2101      	movs	r1, #1
 8003598:	5499      	strb	r1, [r3, r2]
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	2241      	movs	r2, #65	; 0x41
 800359e:	2101      	movs	r1, #1
 80035a0:	5499      	strb	r1, [r3, r2]
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	2242      	movs	r2, #66	; 0x42
 80035a6:	2101      	movs	r1, #1
 80035a8:	5499      	strb	r1, [r3, r2]
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	2243      	movs	r2, #67	; 0x43
 80035ae:	2101      	movs	r1, #1
 80035b0:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	2244      	movs	r2, #68	; 0x44
 80035b6:	2101      	movs	r1, #1
 80035b8:	5499      	strb	r1, [r3, r2]
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	2245      	movs	r2, #69	; 0x45
 80035be:	2101      	movs	r1, #1
 80035c0:	5499      	strb	r1, [r3, r2]
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	2246      	movs	r2, #70	; 0x46
 80035c6:	2101      	movs	r1, #1
 80035c8:	5499      	strb	r1, [r3, r2]
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	2247      	movs	r2, #71	; 0x47
 80035ce:	2101      	movs	r1, #1
 80035d0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	223d      	movs	r2, #61	; 0x3d
 80035d6:	2101      	movs	r1, #1
 80035d8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80035da:	2300      	movs	r3, #0
}
 80035dc:	0018      	movs	r0, r3
 80035de:	46bd      	mov	sp, r7
 80035e0:	b002      	add	sp, #8
 80035e2:	bd80      	pop	{r7, pc}

080035e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	b084      	sub	sp, #16
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
 80035ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	4a38      	ldr	r2, [pc, #224]	; (80036d8 <TIM_Base_SetConfig+0xf4>)
 80035f8:	4293      	cmp	r3, r2
 80035fa:	d00c      	beq.n	8003616 <TIM_Base_SetConfig+0x32>
 80035fc:	687a      	ldr	r2, [r7, #4]
 80035fe:	2380      	movs	r3, #128	; 0x80
 8003600:	05db      	lsls	r3, r3, #23
 8003602:	429a      	cmp	r2, r3
 8003604:	d007      	beq.n	8003616 <TIM_Base_SetConfig+0x32>
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	4a34      	ldr	r2, [pc, #208]	; (80036dc <TIM_Base_SetConfig+0xf8>)
 800360a:	4293      	cmp	r3, r2
 800360c:	d003      	beq.n	8003616 <TIM_Base_SetConfig+0x32>
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	4a33      	ldr	r2, [pc, #204]	; (80036e0 <TIM_Base_SetConfig+0xfc>)
 8003612:	4293      	cmp	r3, r2
 8003614:	d108      	bne.n	8003628 <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	2270      	movs	r2, #112	; 0x70
 800361a:	4393      	bics	r3, r2
 800361c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	685b      	ldr	r3, [r3, #4]
 8003622:	68fa      	ldr	r2, [r7, #12]
 8003624:	4313      	orrs	r3, r2
 8003626:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	4a2b      	ldr	r2, [pc, #172]	; (80036d8 <TIM_Base_SetConfig+0xf4>)
 800362c:	4293      	cmp	r3, r2
 800362e:	d01c      	beq.n	800366a <TIM_Base_SetConfig+0x86>
 8003630:	687a      	ldr	r2, [r7, #4]
 8003632:	2380      	movs	r3, #128	; 0x80
 8003634:	05db      	lsls	r3, r3, #23
 8003636:	429a      	cmp	r2, r3
 8003638:	d017      	beq.n	800366a <TIM_Base_SetConfig+0x86>
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	4a27      	ldr	r2, [pc, #156]	; (80036dc <TIM_Base_SetConfig+0xf8>)
 800363e:	4293      	cmp	r3, r2
 8003640:	d013      	beq.n	800366a <TIM_Base_SetConfig+0x86>
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	4a26      	ldr	r2, [pc, #152]	; (80036e0 <TIM_Base_SetConfig+0xfc>)
 8003646:	4293      	cmp	r3, r2
 8003648:	d00f      	beq.n	800366a <TIM_Base_SetConfig+0x86>
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	4a25      	ldr	r2, [pc, #148]	; (80036e4 <TIM_Base_SetConfig+0x100>)
 800364e:	4293      	cmp	r3, r2
 8003650:	d00b      	beq.n	800366a <TIM_Base_SetConfig+0x86>
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	4a24      	ldr	r2, [pc, #144]	; (80036e8 <TIM_Base_SetConfig+0x104>)
 8003656:	4293      	cmp	r3, r2
 8003658:	d007      	beq.n	800366a <TIM_Base_SetConfig+0x86>
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	4a23      	ldr	r2, [pc, #140]	; (80036ec <TIM_Base_SetConfig+0x108>)
 800365e:	4293      	cmp	r3, r2
 8003660:	d003      	beq.n	800366a <TIM_Base_SetConfig+0x86>
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	4a22      	ldr	r2, [pc, #136]	; (80036f0 <TIM_Base_SetConfig+0x10c>)
 8003666:	4293      	cmp	r3, r2
 8003668:	d108      	bne.n	800367c <TIM_Base_SetConfig+0x98>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	4a21      	ldr	r2, [pc, #132]	; (80036f4 <TIM_Base_SetConfig+0x110>)
 800366e:	4013      	ands	r3, r2
 8003670:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003672:	683b      	ldr	r3, [r7, #0]
 8003674:	68db      	ldr	r3, [r3, #12]
 8003676:	68fa      	ldr	r2, [r7, #12]
 8003678:	4313      	orrs	r3, r2
 800367a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	2280      	movs	r2, #128	; 0x80
 8003680:	4393      	bics	r3, r2
 8003682:	001a      	movs	r2, r3
 8003684:	683b      	ldr	r3, [r7, #0]
 8003686:	695b      	ldr	r3, [r3, #20]
 8003688:	4313      	orrs	r3, r2
 800368a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	68fa      	ldr	r2, [r7, #12]
 8003690:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003692:	683b      	ldr	r3, [r7, #0]
 8003694:	689a      	ldr	r2, [r3, #8]
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800369a:	683b      	ldr	r3, [r7, #0]
 800369c:	681a      	ldr	r2, [r3, #0]
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	4a0c      	ldr	r2, [pc, #48]	; (80036d8 <TIM_Base_SetConfig+0xf4>)
 80036a6:	4293      	cmp	r3, r2
 80036a8:	d00b      	beq.n	80036c2 <TIM_Base_SetConfig+0xde>
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	4a0e      	ldr	r2, [pc, #56]	; (80036e8 <TIM_Base_SetConfig+0x104>)
 80036ae:	4293      	cmp	r3, r2
 80036b0:	d007      	beq.n	80036c2 <TIM_Base_SetConfig+0xde>
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	4a0d      	ldr	r2, [pc, #52]	; (80036ec <TIM_Base_SetConfig+0x108>)
 80036b6:	4293      	cmp	r3, r2
 80036b8:	d003      	beq.n	80036c2 <TIM_Base_SetConfig+0xde>
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	4a0c      	ldr	r2, [pc, #48]	; (80036f0 <TIM_Base_SetConfig+0x10c>)
 80036be:	4293      	cmp	r3, r2
 80036c0:	d103      	bne.n	80036ca <TIM_Base_SetConfig+0xe6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80036c2:	683b      	ldr	r3, [r7, #0]
 80036c4:	691a      	ldr	r2, [r3, #16]
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	2201      	movs	r2, #1
 80036ce:	615a      	str	r2, [r3, #20]
}
 80036d0:	46c0      	nop			; (mov r8, r8)
 80036d2:	46bd      	mov	sp, r7
 80036d4:	b004      	add	sp, #16
 80036d6:	bd80      	pop	{r7, pc}
 80036d8:	40012c00 	.word	0x40012c00
 80036dc:	40000400 	.word	0x40000400
 80036e0:	40000800 	.word	0x40000800
 80036e4:	40002000 	.word	0x40002000
 80036e8:	40014000 	.word	0x40014000
 80036ec:	40014400 	.word	0x40014400
 80036f0:	40014800 	.word	0x40014800
 80036f4:	fffffcff 	.word	0xfffffcff

080036f8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b084      	sub	sp, #16
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
 8003700:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	223c      	movs	r2, #60	; 0x3c
 8003706:	5c9b      	ldrb	r3, [r3, r2]
 8003708:	2b01      	cmp	r3, #1
 800370a:	d101      	bne.n	8003710 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800370c:	2302      	movs	r3, #2
 800370e:	e05a      	b.n	80037c6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	223c      	movs	r2, #60	; 0x3c
 8003714:	2101      	movs	r1, #1
 8003716:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	223d      	movs	r2, #61	; 0x3d
 800371c:	2102      	movs	r1, #2
 800371e:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	685b      	ldr	r3, [r3, #4]
 8003726:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	689b      	ldr	r3, [r3, #8]
 800372e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	4a26      	ldr	r2, [pc, #152]	; (80037d0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003736:	4293      	cmp	r3, r2
 8003738:	d108      	bne.n	800374c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	4a25      	ldr	r2, [pc, #148]	; (80037d4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800373e:	4013      	ands	r3, r2
 8003740:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003742:	683b      	ldr	r3, [r7, #0]
 8003744:	685b      	ldr	r3, [r3, #4]
 8003746:	68fa      	ldr	r2, [r7, #12]
 8003748:	4313      	orrs	r3, r2
 800374a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	2270      	movs	r2, #112	; 0x70
 8003750:	4393      	bics	r3, r2
 8003752:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003754:	683b      	ldr	r3, [r7, #0]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	68fa      	ldr	r2, [r7, #12]
 800375a:	4313      	orrs	r3, r2
 800375c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	68fa      	ldr	r2, [r7, #12]
 8003764:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	4a19      	ldr	r2, [pc, #100]	; (80037d0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800376c:	4293      	cmp	r3, r2
 800376e:	d014      	beq.n	800379a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681a      	ldr	r2, [r3, #0]
 8003774:	2380      	movs	r3, #128	; 0x80
 8003776:	05db      	lsls	r3, r3, #23
 8003778:	429a      	cmp	r2, r3
 800377a:	d00e      	beq.n	800379a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	4a15      	ldr	r2, [pc, #84]	; (80037d8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003782:	4293      	cmp	r3, r2
 8003784:	d009      	beq.n	800379a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	4a14      	ldr	r2, [pc, #80]	; (80037dc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800378c:	4293      	cmp	r3, r2
 800378e:	d004      	beq.n	800379a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	4a12      	ldr	r2, [pc, #72]	; (80037e0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003796:	4293      	cmp	r3, r2
 8003798:	d10c      	bne.n	80037b4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800379a:	68bb      	ldr	r3, [r7, #8]
 800379c:	2280      	movs	r2, #128	; 0x80
 800379e:	4393      	bics	r3, r2
 80037a0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80037a2:	683b      	ldr	r3, [r7, #0]
 80037a4:	689b      	ldr	r3, [r3, #8]
 80037a6:	68ba      	ldr	r2, [r7, #8]
 80037a8:	4313      	orrs	r3, r2
 80037aa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	68ba      	ldr	r2, [r7, #8]
 80037b2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	223d      	movs	r2, #61	; 0x3d
 80037b8:	2101      	movs	r1, #1
 80037ba:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	223c      	movs	r2, #60	; 0x3c
 80037c0:	2100      	movs	r1, #0
 80037c2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80037c4:	2300      	movs	r3, #0
}
 80037c6:	0018      	movs	r0, r3
 80037c8:	46bd      	mov	sp, r7
 80037ca:	b004      	add	sp, #16
 80037cc:	bd80      	pop	{r7, pc}
 80037ce:	46c0      	nop			; (mov r8, r8)
 80037d0:	40012c00 	.word	0x40012c00
 80037d4:	ff0fffff 	.word	0xff0fffff
 80037d8:	40000400 	.word	0x40000400
 80037dc:	40000800 	.word	0x40000800
 80037e0:	40014000 	.word	0x40014000

080037e4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b082      	sub	sp, #8
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d101      	bne.n	80037f6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80037f2:	2301      	movs	r3, #1
 80037f4:	e046      	b.n	8003884 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	2288      	movs	r2, #136	; 0x88
 80037fa:	589b      	ldr	r3, [r3, r2]
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d107      	bne.n	8003810 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2284      	movs	r2, #132	; 0x84
 8003804:	2100      	movs	r1, #0
 8003806:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	0018      	movs	r0, r3
 800380c:	f7fd fb5e 	bl	8000ecc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2288      	movs	r2, #136	; 0x88
 8003814:	2124      	movs	r1, #36	; 0x24
 8003816:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	681a      	ldr	r2, [r3, #0]
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	2101      	movs	r1, #1
 8003824:	438a      	bics	r2, r1
 8003826:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	0018      	movs	r0, r3
 800382c:	f000 f9ae 	bl	8003b8c <UART_SetConfig>
 8003830:	0003      	movs	r3, r0
 8003832:	2b01      	cmp	r3, #1
 8003834:	d101      	bne.n	800383a <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 8003836:	2301      	movs	r3, #1
 8003838:	e024      	b.n	8003884 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800383e:	2b00      	cmp	r3, #0
 8003840:	d003      	beq.n	800384a <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	0018      	movs	r0, r3
 8003846:	f000 fcf7 	bl	8004238 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	685a      	ldr	r2, [r3, #4]
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	490d      	ldr	r1, [pc, #52]	; (800388c <HAL_UART_Init+0xa8>)
 8003856:	400a      	ands	r2, r1
 8003858:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	689a      	ldr	r2, [r3, #8]
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	212a      	movs	r1, #42	; 0x2a
 8003866:	438a      	bics	r2, r1
 8003868:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	681a      	ldr	r2, [r3, #0]
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	2101      	movs	r1, #1
 8003876:	430a      	orrs	r2, r1
 8003878:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	0018      	movs	r0, r3
 800387e:	f000 fd8f 	bl	80043a0 <UART_CheckIdleState>
 8003882:	0003      	movs	r3, r0
}
 8003884:	0018      	movs	r0, r3
 8003886:	46bd      	mov	sp, r7
 8003888:	b002      	add	sp, #8
 800388a:	bd80      	pop	{r7, pc}
 800388c:	ffffb7ff 	.word	0xffffb7ff

08003890 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003890:	b580      	push	{r7, lr}
 8003892:	b08a      	sub	sp, #40	; 0x28
 8003894:	af02      	add	r7, sp, #8
 8003896:	60f8      	str	r0, [r7, #12]
 8003898:	60b9      	str	r1, [r7, #8]
 800389a:	603b      	str	r3, [r7, #0]
 800389c:	1dbb      	adds	r3, r7, #6
 800389e:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	2288      	movs	r2, #136	; 0x88
 80038a4:	589b      	ldr	r3, [r3, r2]
 80038a6:	2b20      	cmp	r3, #32
 80038a8:	d000      	beq.n	80038ac <HAL_UART_Transmit+0x1c>
 80038aa:	e088      	b.n	80039be <HAL_UART_Transmit+0x12e>
  {
    if ((pData == NULL) || (Size == 0U))
 80038ac:	68bb      	ldr	r3, [r7, #8]
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d003      	beq.n	80038ba <HAL_UART_Transmit+0x2a>
 80038b2:	1dbb      	adds	r3, r7, #6
 80038b4:	881b      	ldrh	r3, [r3, #0]
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d101      	bne.n	80038be <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 80038ba:	2301      	movs	r3, #1
 80038bc:	e080      	b.n	80039c0 <HAL_UART_Transmit+0x130>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	689a      	ldr	r2, [r3, #8]
 80038c2:	2380      	movs	r3, #128	; 0x80
 80038c4:	015b      	lsls	r3, r3, #5
 80038c6:	429a      	cmp	r2, r3
 80038c8:	d109      	bne.n	80038de <HAL_UART_Transmit+0x4e>
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	691b      	ldr	r3, [r3, #16]
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d105      	bne.n	80038de <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80038d2:	68bb      	ldr	r3, [r7, #8]
 80038d4:	2201      	movs	r2, #1
 80038d6:	4013      	ands	r3, r2
 80038d8:	d001      	beq.n	80038de <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 80038da:	2301      	movs	r3, #1
 80038dc:	e070      	b.n	80039c0 <HAL_UART_Transmit+0x130>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	2290      	movs	r2, #144	; 0x90
 80038e2:	2100      	movs	r1, #0
 80038e4:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	2288      	movs	r2, #136	; 0x88
 80038ea:	2121      	movs	r1, #33	; 0x21
 80038ec:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80038ee:	f7fd fc9d 	bl	800122c <HAL_GetTick>
 80038f2:	0003      	movs	r3, r0
 80038f4:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	1dba      	adds	r2, r7, #6
 80038fa:	2154      	movs	r1, #84	; 0x54
 80038fc:	8812      	ldrh	r2, [r2, #0]
 80038fe:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	1dba      	adds	r2, r7, #6
 8003904:	2156      	movs	r1, #86	; 0x56
 8003906:	8812      	ldrh	r2, [r2, #0]
 8003908:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	689a      	ldr	r2, [r3, #8]
 800390e:	2380      	movs	r3, #128	; 0x80
 8003910:	015b      	lsls	r3, r3, #5
 8003912:	429a      	cmp	r2, r3
 8003914:	d108      	bne.n	8003928 <HAL_UART_Transmit+0x98>
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	691b      	ldr	r3, [r3, #16]
 800391a:	2b00      	cmp	r3, #0
 800391c:	d104      	bne.n	8003928 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 800391e:	2300      	movs	r3, #0
 8003920:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003922:	68bb      	ldr	r3, [r7, #8]
 8003924:	61bb      	str	r3, [r7, #24]
 8003926:	e003      	b.n	8003930 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8003928:	68bb      	ldr	r3, [r7, #8]
 800392a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800392c:	2300      	movs	r3, #0
 800392e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003930:	e02c      	b.n	800398c <HAL_UART_Transmit+0xfc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003932:	697a      	ldr	r2, [r7, #20]
 8003934:	68f8      	ldr	r0, [r7, #12]
 8003936:	683b      	ldr	r3, [r7, #0]
 8003938:	9300      	str	r3, [sp, #0]
 800393a:	0013      	movs	r3, r2
 800393c:	2200      	movs	r2, #0
 800393e:	2180      	movs	r1, #128	; 0x80
 8003940:	f000 fd7c 	bl	800443c <UART_WaitOnFlagUntilTimeout>
 8003944:	1e03      	subs	r3, r0, #0
 8003946:	d001      	beq.n	800394c <HAL_UART_Transmit+0xbc>
      {
        return HAL_TIMEOUT;
 8003948:	2303      	movs	r3, #3
 800394a:	e039      	b.n	80039c0 <HAL_UART_Transmit+0x130>
      }
      if (pdata8bits == NULL)
 800394c:	69fb      	ldr	r3, [r7, #28]
 800394e:	2b00      	cmp	r3, #0
 8003950:	d10b      	bne.n	800396a <HAL_UART_Transmit+0xda>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003952:	69bb      	ldr	r3, [r7, #24]
 8003954:	881b      	ldrh	r3, [r3, #0]
 8003956:	001a      	movs	r2, r3
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	05d2      	lsls	r2, r2, #23
 800395e:	0dd2      	lsrs	r2, r2, #23
 8003960:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003962:	69bb      	ldr	r3, [r7, #24]
 8003964:	3302      	adds	r3, #2
 8003966:	61bb      	str	r3, [r7, #24]
 8003968:	e007      	b.n	800397a <HAL_UART_Transmit+0xea>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800396a:	69fb      	ldr	r3, [r7, #28]
 800396c:	781a      	ldrb	r2, [r3, #0]
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003974:	69fb      	ldr	r3, [r7, #28]
 8003976:	3301      	adds	r3, #1
 8003978:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	2256      	movs	r2, #86	; 0x56
 800397e:	5a9b      	ldrh	r3, [r3, r2]
 8003980:	b29b      	uxth	r3, r3
 8003982:	3b01      	subs	r3, #1
 8003984:	b299      	uxth	r1, r3
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	2256      	movs	r2, #86	; 0x56
 800398a:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	2256      	movs	r2, #86	; 0x56
 8003990:	5a9b      	ldrh	r3, [r3, r2]
 8003992:	b29b      	uxth	r3, r3
 8003994:	2b00      	cmp	r3, #0
 8003996:	d1cc      	bne.n	8003932 <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003998:	697a      	ldr	r2, [r7, #20]
 800399a:	68f8      	ldr	r0, [r7, #12]
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	9300      	str	r3, [sp, #0]
 80039a0:	0013      	movs	r3, r2
 80039a2:	2200      	movs	r2, #0
 80039a4:	2140      	movs	r1, #64	; 0x40
 80039a6:	f000 fd49 	bl	800443c <UART_WaitOnFlagUntilTimeout>
 80039aa:	1e03      	subs	r3, r0, #0
 80039ac:	d001      	beq.n	80039b2 <HAL_UART_Transmit+0x122>
    {
      return HAL_TIMEOUT;
 80039ae:	2303      	movs	r3, #3
 80039b0:	e006      	b.n	80039c0 <HAL_UART_Transmit+0x130>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	2288      	movs	r2, #136	; 0x88
 80039b6:	2120      	movs	r1, #32
 80039b8:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 80039ba:	2300      	movs	r3, #0
 80039bc:	e000      	b.n	80039c0 <HAL_UART_Transmit+0x130>
  }
  else
  {
    return HAL_BUSY;
 80039be:	2302      	movs	r3, #2
  }
}
 80039c0:	0018      	movs	r0, r3
 80039c2:	46bd      	mov	sp, r7
 80039c4:	b008      	add	sp, #32
 80039c6:	bd80      	pop	{r7, pc}

080039c8 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b08a      	sub	sp, #40	; 0x28
 80039cc:	af02      	add	r7, sp, #8
 80039ce:	60f8      	str	r0, [r7, #12]
 80039d0:	60b9      	str	r1, [r7, #8]
 80039d2:	603b      	str	r3, [r7, #0]
 80039d4:	1dbb      	adds	r3, r7, #6
 80039d6:	801a      	strh	r2, [r3, #0]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	228c      	movs	r2, #140	; 0x8c
 80039dc:	589b      	ldr	r3, [r3, r2]
 80039de:	2b20      	cmp	r3, #32
 80039e0:	d000      	beq.n	80039e4 <HAL_UART_Receive+0x1c>
 80039e2:	e0cc      	b.n	8003b7e <HAL_UART_Receive+0x1b6>
  {
    if ((pData == NULL) || (Size == 0U))
 80039e4:	68bb      	ldr	r3, [r7, #8]
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d003      	beq.n	80039f2 <HAL_UART_Receive+0x2a>
 80039ea:	1dbb      	adds	r3, r7, #6
 80039ec:	881b      	ldrh	r3, [r3, #0]
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d101      	bne.n	80039f6 <HAL_UART_Receive+0x2e>
    {
      return  HAL_ERROR;
 80039f2:	2301      	movs	r3, #1
 80039f4:	e0c4      	b.n	8003b80 <HAL_UART_Receive+0x1b8>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	689a      	ldr	r2, [r3, #8]
 80039fa:	2380      	movs	r3, #128	; 0x80
 80039fc:	015b      	lsls	r3, r3, #5
 80039fe:	429a      	cmp	r2, r3
 8003a00:	d109      	bne.n	8003a16 <HAL_UART_Receive+0x4e>
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	691b      	ldr	r3, [r3, #16]
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d105      	bne.n	8003a16 <HAL_UART_Receive+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8003a0a:	68bb      	ldr	r3, [r7, #8]
 8003a0c:	2201      	movs	r2, #1
 8003a0e:	4013      	ands	r3, r2
 8003a10:	d001      	beq.n	8003a16 <HAL_UART_Receive+0x4e>
      {
        return  HAL_ERROR;
 8003a12:	2301      	movs	r3, #1
 8003a14:	e0b4      	b.n	8003b80 <HAL_UART_Receive+0x1b8>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	2290      	movs	r2, #144	; 0x90
 8003a1a:	2100      	movs	r1, #0
 8003a1c:	5099      	str	r1, [r3, r2]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	228c      	movs	r2, #140	; 0x8c
 8003a22:	2122      	movs	r1, #34	; 0x22
 8003a24:	5099      	str	r1, [r3, r2]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	2200      	movs	r2, #0
 8003a2a:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003a2c:	f7fd fbfe 	bl	800122c <HAL_GetTick>
 8003a30:	0003      	movs	r3, r0
 8003a32:	617b      	str	r3, [r7, #20]

    huart->RxXferSize  = Size;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	1dba      	adds	r2, r7, #6
 8003a38:	215c      	movs	r1, #92	; 0x5c
 8003a3a:	8812      	ldrh	r2, [r2, #0]
 8003a3c:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	1dba      	adds	r2, r7, #6
 8003a42:	215e      	movs	r1, #94	; 0x5e
 8003a44:	8812      	ldrh	r2, [r2, #0]
 8003a46:	525a      	strh	r2, [r3, r1]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	689a      	ldr	r2, [r3, #8]
 8003a4c:	2380      	movs	r3, #128	; 0x80
 8003a4e:	015b      	lsls	r3, r3, #5
 8003a50:	429a      	cmp	r2, r3
 8003a52:	d10d      	bne.n	8003a70 <HAL_UART_Receive+0xa8>
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	691b      	ldr	r3, [r3, #16]
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d104      	bne.n	8003a66 <HAL_UART_Receive+0x9e>
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	2260      	movs	r2, #96	; 0x60
 8003a60:	4949      	ldr	r1, [pc, #292]	; (8003b88 <HAL_UART_Receive+0x1c0>)
 8003a62:	5299      	strh	r1, [r3, r2]
 8003a64:	e02e      	b.n	8003ac4 <HAL_UART_Receive+0xfc>
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	2260      	movs	r2, #96	; 0x60
 8003a6a:	21ff      	movs	r1, #255	; 0xff
 8003a6c:	5299      	strh	r1, [r3, r2]
 8003a6e:	e029      	b.n	8003ac4 <HAL_UART_Receive+0xfc>
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	689b      	ldr	r3, [r3, #8]
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d10d      	bne.n	8003a94 <HAL_UART_Receive+0xcc>
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	691b      	ldr	r3, [r3, #16]
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d104      	bne.n	8003a8a <HAL_UART_Receive+0xc2>
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	2260      	movs	r2, #96	; 0x60
 8003a84:	21ff      	movs	r1, #255	; 0xff
 8003a86:	5299      	strh	r1, [r3, r2]
 8003a88:	e01c      	b.n	8003ac4 <HAL_UART_Receive+0xfc>
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	2260      	movs	r2, #96	; 0x60
 8003a8e:	217f      	movs	r1, #127	; 0x7f
 8003a90:	5299      	strh	r1, [r3, r2]
 8003a92:	e017      	b.n	8003ac4 <HAL_UART_Receive+0xfc>
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	689a      	ldr	r2, [r3, #8]
 8003a98:	2380      	movs	r3, #128	; 0x80
 8003a9a:	055b      	lsls	r3, r3, #21
 8003a9c:	429a      	cmp	r2, r3
 8003a9e:	d10d      	bne.n	8003abc <HAL_UART_Receive+0xf4>
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	691b      	ldr	r3, [r3, #16]
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d104      	bne.n	8003ab2 <HAL_UART_Receive+0xea>
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	2260      	movs	r2, #96	; 0x60
 8003aac:	217f      	movs	r1, #127	; 0x7f
 8003aae:	5299      	strh	r1, [r3, r2]
 8003ab0:	e008      	b.n	8003ac4 <HAL_UART_Receive+0xfc>
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	2260      	movs	r2, #96	; 0x60
 8003ab6:	213f      	movs	r1, #63	; 0x3f
 8003ab8:	5299      	strh	r1, [r3, r2]
 8003aba:	e003      	b.n	8003ac4 <HAL_UART_Receive+0xfc>
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	2260      	movs	r2, #96	; 0x60
 8003ac0:	2100      	movs	r1, #0
 8003ac2:	5299      	strh	r1, [r3, r2]
    uhMask = huart->Mask;
 8003ac4:	2312      	movs	r3, #18
 8003ac6:	18fb      	adds	r3, r7, r3
 8003ac8:	68fa      	ldr	r2, [r7, #12]
 8003aca:	2160      	movs	r1, #96	; 0x60
 8003acc:	5a52      	ldrh	r2, [r2, r1]
 8003ace:	801a      	strh	r2, [r3, #0]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	689a      	ldr	r2, [r3, #8]
 8003ad4:	2380      	movs	r3, #128	; 0x80
 8003ad6:	015b      	lsls	r3, r3, #5
 8003ad8:	429a      	cmp	r2, r3
 8003ada:	d108      	bne.n	8003aee <HAL_UART_Receive+0x126>
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	691b      	ldr	r3, [r3, #16]
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d104      	bne.n	8003aee <HAL_UART_Receive+0x126>
    {
      pdata8bits  = NULL;
 8003ae4:	2300      	movs	r3, #0
 8003ae6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003ae8:	68bb      	ldr	r3, [r7, #8]
 8003aea:	61bb      	str	r3, [r7, #24]
 8003aec:	e003      	b.n	8003af6 <HAL_UART_Receive+0x12e>
    }
    else
    {
      pdata8bits  = pData;
 8003aee:	68bb      	ldr	r3, [r7, #8]
 8003af0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003af2:	2300      	movs	r3, #0
 8003af4:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8003af6:	e036      	b.n	8003b66 <HAL_UART_Receive+0x19e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003af8:	697a      	ldr	r2, [r7, #20]
 8003afa:	68f8      	ldr	r0, [r7, #12]
 8003afc:	683b      	ldr	r3, [r7, #0]
 8003afe:	9300      	str	r3, [sp, #0]
 8003b00:	0013      	movs	r3, r2
 8003b02:	2200      	movs	r2, #0
 8003b04:	2120      	movs	r1, #32
 8003b06:	f000 fc99 	bl	800443c <UART_WaitOnFlagUntilTimeout>
 8003b0a:	1e03      	subs	r3, r0, #0
 8003b0c:	d001      	beq.n	8003b12 <HAL_UART_Receive+0x14a>
      {
        return HAL_TIMEOUT;
 8003b0e:	2303      	movs	r3, #3
 8003b10:	e036      	b.n	8003b80 <HAL_UART_Receive+0x1b8>
      }
      if (pdata8bits == NULL)
 8003b12:	69fb      	ldr	r3, [r7, #28]
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d10e      	bne.n	8003b36 <HAL_UART_Receive+0x16e>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b1e:	b29b      	uxth	r3, r3
 8003b20:	2212      	movs	r2, #18
 8003b22:	18ba      	adds	r2, r7, r2
 8003b24:	8812      	ldrh	r2, [r2, #0]
 8003b26:	4013      	ands	r3, r2
 8003b28:	b29a      	uxth	r2, r3
 8003b2a:	69bb      	ldr	r3, [r7, #24]
 8003b2c:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003b2e:	69bb      	ldr	r3, [r7, #24]
 8003b30:	3302      	adds	r3, #2
 8003b32:	61bb      	str	r3, [r7, #24]
 8003b34:	e00e      	b.n	8003b54 <HAL_UART_Receive+0x18c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b3c:	b2db      	uxtb	r3, r3
 8003b3e:	2212      	movs	r2, #18
 8003b40:	18ba      	adds	r2, r7, r2
 8003b42:	8812      	ldrh	r2, [r2, #0]
 8003b44:	b2d2      	uxtb	r2, r2
 8003b46:	4013      	ands	r3, r2
 8003b48:	b2da      	uxtb	r2, r3
 8003b4a:	69fb      	ldr	r3, [r7, #28]
 8003b4c:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8003b4e:	69fb      	ldr	r3, [r7, #28]
 8003b50:	3301      	adds	r3, #1
 8003b52:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	225e      	movs	r2, #94	; 0x5e
 8003b58:	5a9b      	ldrh	r3, [r3, r2]
 8003b5a:	b29b      	uxth	r3, r3
 8003b5c:	3b01      	subs	r3, #1
 8003b5e:	b299      	uxth	r1, r3
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	225e      	movs	r2, #94	; 0x5e
 8003b64:	5299      	strh	r1, [r3, r2]
    while (huart->RxXferCount > 0U)
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	225e      	movs	r2, #94	; 0x5e
 8003b6a:	5a9b      	ldrh	r3, [r3, r2]
 8003b6c:	b29b      	uxth	r3, r3
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d1c2      	bne.n	8003af8 <HAL_UART_Receive+0x130>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	228c      	movs	r2, #140	; 0x8c
 8003b76:	2120      	movs	r1, #32
 8003b78:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	e000      	b.n	8003b80 <HAL_UART_Receive+0x1b8>
  }
  else
  {
    return HAL_BUSY;
 8003b7e:	2302      	movs	r3, #2
  }
}
 8003b80:	0018      	movs	r0, r3
 8003b82:	46bd      	mov	sp, r7
 8003b84:	b008      	add	sp, #32
 8003b86:	bd80      	pop	{r7, pc}
 8003b88:	000001ff 	.word	0x000001ff

08003b8c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003b8c:	b5b0      	push	{r4, r5, r7, lr}
 8003b8e:	b090      	sub	sp, #64	; 0x40
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003b94:	231a      	movs	r3, #26
 8003b96:	2220      	movs	r2, #32
 8003b98:	189b      	adds	r3, r3, r2
 8003b9a:	19db      	adds	r3, r3, r7
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ba2:	689a      	ldr	r2, [r3, #8]
 8003ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ba6:	691b      	ldr	r3, [r3, #16]
 8003ba8:	431a      	orrs	r2, r3
 8003baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bac:	695b      	ldr	r3, [r3, #20]
 8003bae:	431a      	orrs	r2, r3
 8003bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bb2:	69db      	ldr	r3, [r3, #28]
 8003bb4:	4313      	orrs	r3, r2
 8003bb6:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	4ac1      	ldr	r2, [pc, #772]	; (8003ec4 <UART_SetConfig+0x338>)
 8003bc0:	4013      	ands	r3, r2
 8003bc2:	0019      	movs	r1, r3
 8003bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bc6:	681a      	ldr	r2, [r3, #0]
 8003bc8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003bca:	430b      	orrs	r3, r1
 8003bcc:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	685b      	ldr	r3, [r3, #4]
 8003bd4:	4abc      	ldr	r2, [pc, #752]	; (8003ec8 <UART_SetConfig+0x33c>)
 8003bd6:	4013      	ands	r3, r2
 8003bd8:	0018      	movs	r0, r3
 8003bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bdc:	68d9      	ldr	r1, [r3, #12]
 8003bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003be0:	681a      	ldr	r2, [r3, #0]
 8003be2:	0003      	movs	r3, r0
 8003be4:	430b      	orrs	r3, r1
 8003be6:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bea:	699b      	ldr	r3, [r3, #24]
 8003bec:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	4ab6      	ldr	r2, [pc, #728]	; (8003ecc <UART_SetConfig+0x340>)
 8003bf4:	4293      	cmp	r3, r2
 8003bf6:	d009      	beq.n	8003c0c <UART_SetConfig+0x80>
 8003bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	4ab4      	ldr	r2, [pc, #720]	; (8003ed0 <UART_SetConfig+0x344>)
 8003bfe:	4293      	cmp	r3, r2
 8003c00:	d004      	beq.n	8003c0c <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c04:	6a1b      	ldr	r3, [r3, #32]
 8003c06:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003c08:	4313      	orrs	r3, r2
 8003c0a:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003c0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	689b      	ldr	r3, [r3, #8]
 8003c12:	4ab0      	ldr	r2, [pc, #704]	; (8003ed4 <UART_SetConfig+0x348>)
 8003c14:	4013      	ands	r3, r2
 8003c16:	0019      	movs	r1, r3
 8003c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c1a:	681a      	ldr	r2, [r3, #0]
 8003c1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c1e:	430b      	orrs	r3, r1
 8003c20:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c28:	220f      	movs	r2, #15
 8003c2a:	4393      	bics	r3, r2
 8003c2c:	0018      	movs	r0, r3
 8003c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c30:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c34:	681a      	ldr	r2, [r3, #0]
 8003c36:	0003      	movs	r3, r0
 8003c38:	430b      	orrs	r3, r1
 8003c3a:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	4aa5      	ldr	r2, [pc, #660]	; (8003ed8 <UART_SetConfig+0x34c>)
 8003c42:	4293      	cmp	r3, r2
 8003c44:	d131      	bne.n	8003caa <UART_SetConfig+0x11e>
 8003c46:	4ba5      	ldr	r3, [pc, #660]	; (8003edc <UART_SetConfig+0x350>)
 8003c48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c4a:	2203      	movs	r2, #3
 8003c4c:	4013      	ands	r3, r2
 8003c4e:	2b03      	cmp	r3, #3
 8003c50:	d01d      	beq.n	8003c8e <UART_SetConfig+0x102>
 8003c52:	d823      	bhi.n	8003c9c <UART_SetConfig+0x110>
 8003c54:	2b02      	cmp	r3, #2
 8003c56:	d00c      	beq.n	8003c72 <UART_SetConfig+0xe6>
 8003c58:	d820      	bhi.n	8003c9c <UART_SetConfig+0x110>
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d002      	beq.n	8003c64 <UART_SetConfig+0xd8>
 8003c5e:	2b01      	cmp	r3, #1
 8003c60:	d00e      	beq.n	8003c80 <UART_SetConfig+0xf4>
 8003c62:	e01b      	b.n	8003c9c <UART_SetConfig+0x110>
 8003c64:	231b      	movs	r3, #27
 8003c66:	2220      	movs	r2, #32
 8003c68:	189b      	adds	r3, r3, r2
 8003c6a:	19db      	adds	r3, r3, r7
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	701a      	strb	r2, [r3, #0]
 8003c70:	e154      	b.n	8003f1c <UART_SetConfig+0x390>
 8003c72:	231b      	movs	r3, #27
 8003c74:	2220      	movs	r2, #32
 8003c76:	189b      	adds	r3, r3, r2
 8003c78:	19db      	adds	r3, r3, r7
 8003c7a:	2202      	movs	r2, #2
 8003c7c:	701a      	strb	r2, [r3, #0]
 8003c7e:	e14d      	b.n	8003f1c <UART_SetConfig+0x390>
 8003c80:	231b      	movs	r3, #27
 8003c82:	2220      	movs	r2, #32
 8003c84:	189b      	adds	r3, r3, r2
 8003c86:	19db      	adds	r3, r3, r7
 8003c88:	2204      	movs	r2, #4
 8003c8a:	701a      	strb	r2, [r3, #0]
 8003c8c:	e146      	b.n	8003f1c <UART_SetConfig+0x390>
 8003c8e:	231b      	movs	r3, #27
 8003c90:	2220      	movs	r2, #32
 8003c92:	189b      	adds	r3, r3, r2
 8003c94:	19db      	adds	r3, r3, r7
 8003c96:	2208      	movs	r2, #8
 8003c98:	701a      	strb	r2, [r3, #0]
 8003c9a:	e13f      	b.n	8003f1c <UART_SetConfig+0x390>
 8003c9c:	231b      	movs	r3, #27
 8003c9e:	2220      	movs	r2, #32
 8003ca0:	189b      	adds	r3, r3, r2
 8003ca2:	19db      	adds	r3, r3, r7
 8003ca4:	2210      	movs	r2, #16
 8003ca6:	701a      	strb	r2, [r3, #0]
 8003ca8:	e138      	b.n	8003f1c <UART_SetConfig+0x390>
 8003caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	4a8c      	ldr	r2, [pc, #560]	; (8003ee0 <UART_SetConfig+0x354>)
 8003cb0:	4293      	cmp	r3, r2
 8003cb2:	d131      	bne.n	8003d18 <UART_SetConfig+0x18c>
 8003cb4:	4b89      	ldr	r3, [pc, #548]	; (8003edc <UART_SetConfig+0x350>)
 8003cb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cb8:	220c      	movs	r2, #12
 8003cba:	4013      	ands	r3, r2
 8003cbc:	2b0c      	cmp	r3, #12
 8003cbe:	d01d      	beq.n	8003cfc <UART_SetConfig+0x170>
 8003cc0:	d823      	bhi.n	8003d0a <UART_SetConfig+0x17e>
 8003cc2:	2b08      	cmp	r3, #8
 8003cc4:	d00c      	beq.n	8003ce0 <UART_SetConfig+0x154>
 8003cc6:	d820      	bhi.n	8003d0a <UART_SetConfig+0x17e>
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d002      	beq.n	8003cd2 <UART_SetConfig+0x146>
 8003ccc:	2b04      	cmp	r3, #4
 8003cce:	d00e      	beq.n	8003cee <UART_SetConfig+0x162>
 8003cd0:	e01b      	b.n	8003d0a <UART_SetConfig+0x17e>
 8003cd2:	231b      	movs	r3, #27
 8003cd4:	2220      	movs	r2, #32
 8003cd6:	189b      	adds	r3, r3, r2
 8003cd8:	19db      	adds	r3, r3, r7
 8003cda:	2200      	movs	r2, #0
 8003cdc:	701a      	strb	r2, [r3, #0]
 8003cde:	e11d      	b.n	8003f1c <UART_SetConfig+0x390>
 8003ce0:	231b      	movs	r3, #27
 8003ce2:	2220      	movs	r2, #32
 8003ce4:	189b      	adds	r3, r3, r2
 8003ce6:	19db      	adds	r3, r3, r7
 8003ce8:	2202      	movs	r2, #2
 8003cea:	701a      	strb	r2, [r3, #0]
 8003cec:	e116      	b.n	8003f1c <UART_SetConfig+0x390>
 8003cee:	231b      	movs	r3, #27
 8003cf0:	2220      	movs	r2, #32
 8003cf2:	189b      	adds	r3, r3, r2
 8003cf4:	19db      	adds	r3, r3, r7
 8003cf6:	2204      	movs	r2, #4
 8003cf8:	701a      	strb	r2, [r3, #0]
 8003cfa:	e10f      	b.n	8003f1c <UART_SetConfig+0x390>
 8003cfc:	231b      	movs	r3, #27
 8003cfe:	2220      	movs	r2, #32
 8003d00:	189b      	adds	r3, r3, r2
 8003d02:	19db      	adds	r3, r3, r7
 8003d04:	2208      	movs	r2, #8
 8003d06:	701a      	strb	r2, [r3, #0]
 8003d08:	e108      	b.n	8003f1c <UART_SetConfig+0x390>
 8003d0a:	231b      	movs	r3, #27
 8003d0c:	2220      	movs	r2, #32
 8003d0e:	189b      	adds	r3, r3, r2
 8003d10:	19db      	adds	r3, r3, r7
 8003d12:	2210      	movs	r2, #16
 8003d14:	701a      	strb	r2, [r3, #0]
 8003d16:	e101      	b.n	8003f1c <UART_SetConfig+0x390>
 8003d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	4a71      	ldr	r2, [pc, #452]	; (8003ee4 <UART_SetConfig+0x358>)
 8003d1e:	4293      	cmp	r3, r2
 8003d20:	d131      	bne.n	8003d86 <UART_SetConfig+0x1fa>
 8003d22:	4b6e      	ldr	r3, [pc, #440]	; (8003edc <UART_SetConfig+0x350>)
 8003d24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d26:	2230      	movs	r2, #48	; 0x30
 8003d28:	4013      	ands	r3, r2
 8003d2a:	2b30      	cmp	r3, #48	; 0x30
 8003d2c:	d01d      	beq.n	8003d6a <UART_SetConfig+0x1de>
 8003d2e:	d823      	bhi.n	8003d78 <UART_SetConfig+0x1ec>
 8003d30:	2b20      	cmp	r3, #32
 8003d32:	d00c      	beq.n	8003d4e <UART_SetConfig+0x1c2>
 8003d34:	d820      	bhi.n	8003d78 <UART_SetConfig+0x1ec>
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d002      	beq.n	8003d40 <UART_SetConfig+0x1b4>
 8003d3a:	2b10      	cmp	r3, #16
 8003d3c:	d00e      	beq.n	8003d5c <UART_SetConfig+0x1d0>
 8003d3e:	e01b      	b.n	8003d78 <UART_SetConfig+0x1ec>
 8003d40:	231b      	movs	r3, #27
 8003d42:	2220      	movs	r2, #32
 8003d44:	189b      	adds	r3, r3, r2
 8003d46:	19db      	adds	r3, r3, r7
 8003d48:	2200      	movs	r2, #0
 8003d4a:	701a      	strb	r2, [r3, #0]
 8003d4c:	e0e6      	b.n	8003f1c <UART_SetConfig+0x390>
 8003d4e:	231b      	movs	r3, #27
 8003d50:	2220      	movs	r2, #32
 8003d52:	189b      	adds	r3, r3, r2
 8003d54:	19db      	adds	r3, r3, r7
 8003d56:	2202      	movs	r2, #2
 8003d58:	701a      	strb	r2, [r3, #0]
 8003d5a:	e0df      	b.n	8003f1c <UART_SetConfig+0x390>
 8003d5c:	231b      	movs	r3, #27
 8003d5e:	2220      	movs	r2, #32
 8003d60:	189b      	adds	r3, r3, r2
 8003d62:	19db      	adds	r3, r3, r7
 8003d64:	2204      	movs	r2, #4
 8003d66:	701a      	strb	r2, [r3, #0]
 8003d68:	e0d8      	b.n	8003f1c <UART_SetConfig+0x390>
 8003d6a:	231b      	movs	r3, #27
 8003d6c:	2220      	movs	r2, #32
 8003d6e:	189b      	adds	r3, r3, r2
 8003d70:	19db      	adds	r3, r3, r7
 8003d72:	2208      	movs	r2, #8
 8003d74:	701a      	strb	r2, [r3, #0]
 8003d76:	e0d1      	b.n	8003f1c <UART_SetConfig+0x390>
 8003d78:	231b      	movs	r3, #27
 8003d7a:	2220      	movs	r2, #32
 8003d7c:	189b      	adds	r3, r3, r2
 8003d7e:	19db      	adds	r3, r3, r7
 8003d80:	2210      	movs	r2, #16
 8003d82:	701a      	strb	r2, [r3, #0]
 8003d84:	e0ca      	b.n	8003f1c <UART_SetConfig+0x390>
 8003d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	4a57      	ldr	r2, [pc, #348]	; (8003ee8 <UART_SetConfig+0x35c>)
 8003d8c:	4293      	cmp	r3, r2
 8003d8e:	d106      	bne.n	8003d9e <UART_SetConfig+0x212>
 8003d90:	231b      	movs	r3, #27
 8003d92:	2220      	movs	r2, #32
 8003d94:	189b      	adds	r3, r3, r2
 8003d96:	19db      	adds	r3, r3, r7
 8003d98:	2200      	movs	r2, #0
 8003d9a:	701a      	strb	r2, [r3, #0]
 8003d9c:	e0be      	b.n	8003f1c <UART_SetConfig+0x390>
 8003d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	4a52      	ldr	r2, [pc, #328]	; (8003eec <UART_SetConfig+0x360>)
 8003da4:	4293      	cmp	r3, r2
 8003da6:	d106      	bne.n	8003db6 <UART_SetConfig+0x22a>
 8003da8:	231b      	movs	r3, #27
 8003daa:	2220      	movs	r2, #32
 8003dac:	189b      	adds	r3, r3, r2
 8003dae:	19db      	adds	r3, r3, r7
 8003db0:	2200      	movs	r2, #0
 8003db2:	701a      	strb	r2, [r3, #0]
 8003db4:	e0b2      	b.n	8003f1c <UART_SetConfig+0x390>
 8003db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	4a4d      	ldr	r2, [pc, #308]	; (8003ef0 <UART_SetConfig+0x364>)
 8003dbc:	4293      	cmp	r3, r2
 8003dbe:	d106      	bne.n	8003dce <UART_SetConfig+0x242>
 8003dc0:	231b      	movs	r3, #27
 8003dc2:	2220      	movs	r2, #32
 8003dc4:	189b      	adds	r3, r3, r2
 8003dc6:	19db      	adds	r3, r3, r7
 8003dc8:	2200      	movs	r2, #0
 8003dca:	701a      	strb	r2, [r3, #0]
 8003dcc:	e0a6      	b.n	8003f1c <UART_SetConfig+0x390>
 8003dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	4a3e      	ldr	r2, [pc, #248]	; (8003ecc <UART_SetConfig+0x340>)
 8003dd4:	4293      	cmp	r3, r2
 8003dd6:	d13e      	bne.n	8003e56 <UART_SetConfig+0x2ca>
 8003dd8:	4b40      	ldr	r3, [pc, #256]	; (8003edc <UART_SetConfig+0x350>)
 8003dda:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003ddc:	23c0      	movs	r3, #192	; 0xc0
 8003dde:	011b      	lsls	r3, r3, #4
 8003de0:	4013      	ands	r3, r2
 8003de2:	22c0      	movs	r2, #192	; 0xc0
 8003de4:	0112      	lsls	r2, r2, #4
 8003de6:	4293      	cmp	r3, r2
 8003de8:	d027      	beq.n	8003e3a <UART_SetConfig+0x2ae>
 8003dea:	22c0      	movs	r2, #192	; 0xc0
 8003dec:	0112      	lsls	r2, r2, #4
 8003dee:	4293      	cmp	r3, r2
 8003df0:	d82a      	bhi.n	8003e48 <UART_SetConfig+0x2bc>
 8003df2:	2280      	movs	r2, #128	; 0x80
 8003df4:	0112      	lsls	r2, r2, #4
 8003df6:	4293      	cmp	r3, r2
 8003df8:	d011      	beq.n	8003e1e <UART_SetConfig+0x292>
 8003dfa:	2280      	movs	r2, #128	; 0x80
 8003dfc:	0112      	lsls	r2, r2, #4
 8003dfe:	4293      	cmp	r3, r2
 8003e00:	d822      	bhi.n	8003e48 <UART_SetConfig+0x2bc>
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d004      	beq.n	8003e10 <UART_SetConfig+0x284>
 8003e06:	2280      	movs	r2, #128	; 0x80
 8003e08:	00d2      	lsls	r2, r2, #3
 8003e0a:	4293      	cmp	r3, r2
 8003e0c:	d00e      	beq.n	8003e2c <UART_SetConfig+0x2a0>
 8003e0e:	e01b      	b.n	8003e48 <UART_SetConfig+0x2bc>
 8003e10:	231b      	movs	r3, #27
 8003e12:	2220      	movs	r2, #32
 8003e14:	189b      	adds	r3, r3, r2
 8003e16:	19db      	adds	r3, r3, r7
 8003e18:	2200      	movs	r2, #0
 8003e1a:	701a      	strb	r2, [r3, #0]
 8003e1c:	e07e      	b.n	8003f1c <UART_SetConfig+0x390>
 8003e1e:	231b      	movs	r3, #27
 8003e20:	2220      	movs	r2, #32
 8003e22:	189b      	adds	r3, r3, r2
 8003e24:	19db      	adds	r3, r3, r7
 8003e26:	2202      	movs	r2, #2
 8003e28:	701a      	strb	r2, [r3, #0]
 8003e2a:	e077      	b.n	8003f1c <UART_SetConfig+0x390>
 8003e2c:	231b      	movs	r3, #27
 8003e2e:	2220      	movs	r2, #32
 8003e30:	189b      	adds	r3, r3, r2
 8003e32:	19db      	adds	r3, r3, r7
 8003e34:	2204      	movs	r2, #4
 8003e36:	701a      	strb	r2, [r3, #0]
 8003e38:	e070      	b.n	8003f1c <UART_SetConfig+0x390>
 8003e3a:	231b      	movs	r3, #27
 8003e3c:	2220      	movs	r2, #32
 8003e3e:	189b      	adds	r3, r3, r2
 8003e40:	19db      	adds	r3, r3, r7
 8003e42:	2208      	movs	r2, #8
 8003e44:	701a      	strb	r2, [r3, #0]
 8003e46:	e069      	b.n	8003f1c <UART_SetConfig+0x390>
 8003e48:	231b      	movs	r3, #27
 8003e4a:	2220      	movs	r2, #32
 8003e4c:	189b      	adds	r3, r3, r2
 8003e4e:	19db      	adds	r3, r3, r7
 8003e50:	2210      	movs	r2, #16
 8003e52:	701a      	strb	r2, [r3, #0]
 8003e54:	e062      	b.n	8003f1c <UART_SetConfig+0x390>
 8003e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	4a1d      	ldr	r2, [pc, #116]	; (8003ed0 <UART_SetConfig+0x344>)
 8003e5c:	4293      	cmp	r3, r2
 8003e5e:	d157      	bne.n	8003f10 <UART_SetConfig+0x384>
 8003e60:	4b1e      	ldr	r3, [pc, #120]	; (8003edc <UART_SetConfig+0x350>)
 8003e62:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003e64:	23c0      	movs	r3, #192	; 0xc0
 8003e66:	009b      	lsls	r3, r3, #2
 8003e68:	4013      	ands	r3, r2
 8003e6a:	22c0      	movs	r2, #192	; 0xc0
 8003e6c:	0092      	lsls	r2, r2, #2
 8003e6e:	4293      	cmp	r3, r2
 8003e70:	d040      	beq.n	8003ef4 <UART_SetConfig+0x368>
 8003e72:	22c0      	movs	r2, #192	; 0xc0
 8003e74:	0092      	lsls	r2, r2, #2
 8003e76:	4293      	cmp	r3, r2
 8003e78:	d843      	bhi.n	8003f02 <UART_SetConfig+0x376>
 8003e7a:	2280      	movs	r2, #128	; 0x80
 8003e7c:	0092      	lsls	r2, r2, #2
 8003e7e:	4293      	cmp	r3, r2
 8003e80:	d011      	beq.n	8003ea6 <UART_SetConfig+0x31a>
 8003e82:	2280      	movs	r2, #128	; 0x80
 8003e84:	0092      	lsls	r2, r2, #2
 8003e86:	4293      	cmp	r3, r2
 8003e88:	d83b      	bhi.n	8003f02 <UART_SetConfig+0x376>
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d004      	beq.n	8003e98 <UART_SetConfig+0x30c>
 8003e8e:	2280      	movs	r2, #128	; 0x80
 8003e90:	0052      	lsls	r2, r2, #1
 8003e92:	4293      	cmp	r3, r2
 8003e94:	d00e      	beq.n	8003eb4 <UART_SetConfig+0x328>
 8003e96:	e034      	b.n	8003f02 <UART_SetConfig+0x376>
 8003e98:	231b      	movs	r3, #27
 8003e9a:	2220      	movs	r2, #32
 8003e9c:	189b      	adds	r3, r3, r2
 8003e9e:	19db      	adds	r3, r3, r7
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	701a      	strb	r2, [r3, #0]
 8003ea4:	e03a      	b.n	8003f1c <UART_SetConfig+0x390>
 8003ea6:	231b      	movs	r3, #27
 8003ea8:	2220      	movs	r2, #32
 8003eaa:	189b      	adds	r3, r3, r2
 8003eac:	19db      	adds	r3, r3, r7
 8003eae:	2202      	movs	r2, #2
 8003eb0:	701a      	strb	r2, [r3, #0]
 8003eb2:	e033      	b.n	8003f1c <UART_SetConfig+0x390>
 8003eb4:	231b      	movs	r3, #27
 8003eb6:	2220      	movs	r2, #32
 8003eb8:	189b      	adds	r3, r3, r2
 8003eba:	19db      	adds	r3, r3, r7
 8003ebc:	2204      	movs	r2, #4
 8003ebe:	701a      	strb	r2, [r3, #0]
 8003ec0:	e02c      	b.n	8003f1c <UART_SetConfig+0x390>
 8003ec2:	46c0      	nop			; (mov r8, r8)
 8003ec4:	cfff69f3 	.word	0xcfff69f3
 8003ec8:	ffffcfff 	.word	0xffffcfff
 8003ecc:	40008000 	.word	0x40008000
 8003ed0:	40008400 	.word	0x40008400
 8003ed4:	11fff4ff 	.word	0x11fff4ff
 8003ed8:	40013800 	.word	0x40013800
 8003edc:	40021000 	.word	0x40021000
 8003ee0:	40004400 	.word	0x40004400
 8003ee4:	40004800 	.word	0x40004800
 8003ee8:	40004c00 	.word	0x40004c00
 8003eec:	40005000 	.word	0x40005000
 8003ef0:	40013c00 	.word	0x40013c00
 8003ef4:	231b      	movs	r3, #27
 8003ef6:	2220      	movs	r2, #32
 8003ef8:	189b      	adds	r3, r3, r2
 8003efa:	19db      	adds	r3, r3, r7
 8003efc:	2208      	movs	r2, #8
 8003efe:	701a      	strb	r2, [r3, #0]
 8003f00:	e00c      	b.n	8003f1c <UART_SetConfig+0x390>
 8003f02:	231b      	movs	r3, #27
 8003f04:	2220      	movs	r2, #32
 8003f06:	189b      	adds	r3, r3, r2
 8003f08:	19db      	adds	r3, r3, r7
 8003f0a:	2210      	movs	r2, #16
 8003f0c:	701a      	strb	r2, [r3, #0]
 8003f0e:	e005      	b.n	8003f1c <UART_SetConfig+0x390>
 8003f10:	231b      	movs	r3, #27
 8003f12:	2220      	movs	r2, #32
 8003f14:	189b      	adds	r3, r3, r2
 8003f16:	19db      	adds	r3, r3, r7
 8003f18:	2210      	movs	r2, #16
 8003f1a:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	4ac1      	ldr	r2, [pc, #772]	; (8004228 <UART_SetConfig+0x69c>)
 8003f22:	4293      	cmp	r3, r2
 8003f24:	d005      	beq.n	8003f32 <UART_SetConfig+0x3a6>
 8003f26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	4ac0      	ldr	r2, [pc, #768]	; (800422c <UART_SetConfig+0x6a0>)
 8003f2c:	4293      	cmp	r3, r2
 8003f2e:	d000      	beq.n	8003f32 <UART_SetConfig+0x3a6>
 8003f30:	e093      	b.n	800405a <UART_SetConfig+0x4ce>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003f32:	231b      	movs	r3, #27
 8003f34:	2220      	movs	r2, #32
 8003f36:	189b      	adds	r3, r3, r2
 8003f38:	19db      	adds	r3, r3, r7
 8003f3a:	781b      	ldrb	r3, [r3, #0]
 8003f3c:	2b08      	cmp	r3, #8
 8003f3e:	d015      	beq.n	8003f6c <UART_SetConfig+0x3e0>
 8003f40:	dc18      	bgt.n	8003f74 <UART_SetConfig+0x3e8>
 8003f42:	2b04      	cmp	r3, #4
 8003f44:	d00d      	beq.n	8003f62 <UART_SetConfig+0x3d6>
 8003f46:	dc15      	bgt.n	8003f74 <UART_SetConfig+0x3e8>
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d002      	beq.n	8003f52 <UART_SetConfig+0x3c6>
 8003f4c:	2b02      	cmp	r3, #2
 8003f4e:	d005      	beq.n	8003f5c <UART_SetConfig+0x3d0>
 8003f50:	e010      	b.n	8003f74 <UART_SetConfig+0x3e8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003f52:	f7fe f99b 	bl	800228c <HAL_RCC_GetPCLK1Freq>
 8003f56:	0003      	movs	r3, r0
 8003f58:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003f5a:	e014      	b.n	8003f86 <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003f5c:	4bb4      	ldr	r3, [pc, #720]	; (8004230 <UART_SetConfig+0x6a4>)
 8003f5e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003f60:	e011      	b.n	8003f86 <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003f62:	f7fe f907 	bl	8002174 <HAL_RCC_GetSysClockFreq>
 8003f66:	0003      	movs	r3, r0
 8003f68:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003f6a:	e00c      	b.n	8003f86 <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003f6c:	2380      	movs	r3, #128	; 0x80
 8003f6e:	021b      	lsls	r3, r3, #8
 8003f70:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003f72:	e008      	b.n	8003f86 <UART_SetConfig+0x3fa>
      default:
        pclk = 0U;
 8003f74:	2300      	movs	r3, #0
 8003f76:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8003f78:	231a      	movs	r3, #26
 8003f7a:	2220      	movs	r2, #32
 8003f7c:	189b      	adds	r3, r3, r2
 8003f7e:	19db      	adds	r3, r3, r7
 8003f80:	2201      	movs	r2, #1
 8003f82:	701a      	strb	r2, [r3, #0]
        break;
 8003f84:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003f86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d100      	bne.n	8003f8e <UART_SetConfig+0x402>
 8003f8c:	e135      	b.n	80041fa <UART_SetConfig+0x66e>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f90:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003f92:	4ba8      	ldr	r3, [pc, #672]	; (8004234 <UART_SetConfig+0x6a8>)
 8003f94:	0052      	lsls	r2, r2, #1
 8003f96:	5ad3      	ldrh	r3, [r2, r3]
 8003f98:	0019      	movs	r1, r3
 8003f9a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003f9c:	f7fc f8ba 	bl	8000114 <__udivsi3>
 8003fa0:	0003      	movs	r3, r0
 8003fa2:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fa6:	685a      	ldr	r2, [r3, #4]
 8003fa8:	0013      	movs	r3, r2
 8003faa:	005b      	lsls	r3, r3, #1
 8003fac:	189b      	adds	r3, r3, r2
 8003fae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003fb0:	429a      	cmp	r2, r3
 8003fb2:	d305      	bcc.n	8003fc0 <UART_SetConfig+0x434>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003fb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fb6:	685b      	ldr	r3, [r3, #4]
 8003fb8:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003fba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003fbc:	429a      	cmp	r2, r3
 8003fbe:	d906      	bls.n	8003fce <UART_SetConfig+0x442>
      {
        ret = HAL_ERROR;
 8003fc0:	231a      	movs	r3, #26
 8003fc2:	2220      	movs	r2, #32
 8003fc4:	189b      	adds	r3, r3, r2
 8003fc6:	19db      	adds	r3, r3, r7
 8003fc8:	2201      	movs	r2, #1
 8003fca:	701a      	strb	r2, [r3, #0]
 8003fcc:	e044      	b.n	8004058 <UART_SetConfig+0x4cc>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003fce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003fd0:	61bb      	str	r3, [r7, #24]
 8003fd2:	2300      	movs	r3, #0
 8003fd4:	61fb      	str	r3, [r7, #28]
 8003fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fd8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003fda:	4b96      	ldr	r3, [pc, #600]	; (8004234 <UART_SetConfig+0x6a8>)
 8003fdc:	0052      	lsls	r2, r2, #1
 8003fde:	5ad3      	ldrh	r3, [r2, r3]
 8003fe0:	613b      	str	r3, [r7, #16]
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	617b      	str	r3, [r7, #20]
 8003fe6:	693a      	ldr	r2, [r7, #16]
 8003fe8:	697b      	ldr	r3, [r7, #20]
 8003fea:	69b8      	ldr	r0, [r7, #24]
 8003fec:	69f9      	ldr	r1, [r7, #28]
 8003fee:	f7fc fa07 	bl	8000400 <__aeabi_uldivmod>
 8003ff2:	0002      	movs	r2, r0
 8003ff4:	000b      	movs	r3, r1
 8003ff6:	0e11      	lsrs	r1, r2, #24
 8003ff8:	021d      	lsls	r5, r3, #8
 8003ffa:	430d      	orrs	r5, r1
 8003ffc:	0214      	lsls	r4, r2, #8
 8003ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004000:	685b      	ldr	r3, [r3, #4]
 8004002:	085b      	lsrs	r3, r3, #1
 8004004:	60bb      	str	r3, [r7, #8]
 8004006:	2300      	movs	r3, #0
 8004008:	60fb      	str	r3, [r7, #12]
 800400a:	68b8      	ldr	r0, [r7, #8]
 800400c:	68f9      	ldr	r1, [r7, #12]
 800400e:	1900      	adds	r0, r0, r4
 8004010:	4169      	adcs	r1, r5
 8004012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004014:	685b      	ldr	r3, [r3, #4]
 8004016:	603b      	str	r3, [r7, #0]
 8004018:	2300      	movs	r3, #0
 800401a:	607b      	str	r3, [r7, #4]
 800401c:	683a      	ldr	r2, [r7, #0]
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	f7fc f9ee 	bl	8000400 <__aeabi_uldivmod>
 8004024:	0002      	movs	r2, r0
 8004026:	000b      	movs	r3, r1
 8004028:	0013      	movs	r3, r2
 800402a:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800402c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800402e:	23c0      	movs	r3, #192	; 0xc0
 8004030:	009b      	lsls	r3, r3, #2
 8004032:	429a      	cmp	r2, r3
 8004034:	d309      	bcc.n	800404a <UART_SetConfig+0x4be>
 8004036:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004038:	2380      	movs	r3, #128	; 0x80
 800403a:	035b      	lsls	r3, r3, #13
 800403c:	429a      	cmp	r2, r3
 800403e:	d204      	bcs.n	800404a <UART_SetConfig+0x4be>
        {
          huart->Instance->BRR = usartdiv;
 8004040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004046:	60da      	str	r2, [r3, #12]
 8004048:	e006      	b.n	8004058 <UART_SetConfig+0x4cc>
        }
        else
        {
          ret = HAL_ERROR;
 800404a:	231a      	movs	r3, #26
 800404c:	2220      	movs	r2, #32
 800404e:	189b      	adds	r3, r3, r2
 8004050:	19db      	adds	r3, r3, r7
 8004052:	2201      	movs	r2, #1
 8004054:	701a      	strb	r2, [r3, #0]
    if (pclk != 0U)
 8004056:	e0d0      	b.n	80041fa <UART_SetConfig+0x66e>
 8004058:	e0cf      	b.n	80041fa <UART_SetConfig+0x66e>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800405a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800405c:	69da      	ldr	r2, [r3, #28]
 800405e:	2380      	movs	r3, #128	; 0x80
 8004060:	021b      	lsls	r3, r3, #8
 8004062:	429a      	cmp	r2, r3
 8004064:	d000      	beq.n	8004068 <UART_SetConfig+0x4dc>
 8004066:	e070      	b.n	800414a <UART_SetConfig+0x5be>
  {
    switch (clocksource)
 8004068:	231b      	movs	r3, #27
 800406a:	2220      	movs	r2, #32
 800406c:	189b      	adds	r3, r3, r2
 800406e:	19db      	adds	r3, r3, r7
 8004070:	781b      	ldrb	r3, [r3, #0]
 8004072:	2b08      	cmp	r3, #8
 8004074:	d015      	beq.n	80040a2 <UART_SetConfig+0x516>
 8004076:	dc18      	bgt.n	80040aa <UART_SetConfig+0x51e>
 8004078:	2b04      	cmp	r3, #4
 800407a:	d00d      	beq.n	8004098 <UART_SetConfig+0x50c>
 800407c:	dc15      	bgt.n	80040aa <UART_SetConfig+0x51e>
 800407e:	2b00      	cmp	r3, #0
 8004080:	d002      	beq.n	8004088 <UART_SetConfig+0x4fc>
 8004082:	2b02      	cmp	r3, #2
 8004084:	d005      	beq.n	8004092 <UART_SetConfig+0x506>
 8004086:	e010      	b.n	80040aa <UART_SetConfig+0x51e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004088:	f7fe f900 	bl	800228c <HAL_RCC_GetPCLK1Freq>
 800408c:	0003      	movs	r3, r0
 800408e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004090:	e014      	b.n	80040bc <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004092:	4b67      	ldr	r3, [pc, #412]	; (8004230 <UART_SetConfig+0x6a4>)
 8004094:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004096:	e011      	b.n	80040bc <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004098:	f7fe f86c 	bl	8002174 <HAL_RCC_GetSysClockFreq>
 800409c:	0003      	movs	r3, r0
 800409e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80040a0:	e00c      	b.n	80040bc <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80040a2:	2380      	movs	r3, #128	; 0x80
 80040a4:	021b      	lsls	r3, r3, #8
 80040a6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80040a8:	e008      	b.n	80040bc <UART_SetConfig+0x530>
      default:
        pclk = 0U;
 80040aa:	2300      	movs	r3, #0
 80040ac:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 80040ae:	231a      	movs	r3, #26
 80040b0:	2220      	movs	r2, #32
 80040b2:	189b      	adds	r3, r3, r2
 80040b4:	19db      	adds	r3, r3, r7
 80040b6:	2201      	movs	r2, #1
 80040b8:	701a      	strb	r2, [r3, #0]
        break;
 80040ba:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80040bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d100      	bne.n	80040c4 <UART_SetConfig+0x538>
 80040c2:	e09a      	b.n	80041fa <UART_SetConfig+0x66e>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80040c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040c6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80040c8:	4b5a      	ldr	r3, [pc, #360]	; (8004234 <UART_SetConfig+0x6a8>)
 80040ca:	0052      	lsls	r2, r2, #1
 80040cc:	5ad3      	ldrh	r3, [r2, r3]
 80040ce:	0019      	movs	r1, r3
 80040d0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80040d2:	f7fc f81f 	bl	8000114 <__udivsi3>
 80040d6:	0003      	movs	r3, r0
 80040d8:	005a      	lsls	r2, r3, #1
 80040da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040dc:	685b      	ldr	r3, [r3, #4]
 80040de:	085b      	lsrs	r3, r3, #1
 80040e0:	18d2      	adds	r2, r2, r3
 80040e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040e4:	685b      	ldr	r3, [r3, #4]
 80040e6:	0019      	movs	r1, r3
 80040e8:	0010      	movs	r0, r2
 80040ea:	f7fc f813 	bl	8000114 <__udivsi3>
 80040ee:	0003      	movs	r3, r0
 80040f0:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80040f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040f4:	2b0f      	cmp	r3, #15
 80040f6:	d921      	bls.n	800413c <UART_SetConfig+0x5b0>
 80040f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80040fa:	2380      	movs	r3, #128	; 0x80
 80040fc:	025b      	lsls	r3, r3, #9
 80040fe:	429a      	cmp	r2, r3
 8004100:	d21c      	bcs.n	800413c <UART_SetConfig+0x5b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004102:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004104:	b29a      	uxth	r2, r3
 8004106:	200e      	movs	r0, #14
 8004108:	2420      	movs	r4, #32
 800410a:	1903      	adds	r3, r0, r4
 800410c:	19db      	adds	r3, r3, r7
 800410e:	210f      	movs	r1, #15
 8004110:	438a      	bics	r2, r1
 8004112:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004114:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004116:	085b      	lsrs	r3, r3, #1
 8004118:	b29b      	uxth	r3, r3
 800411a:	2207      	movs	r2, #7
 800411c:	4013      	ands	r3, r2
 800411e:	b299      	uxth	r1, r3
 8004120:	1903      	adds	r3, r0, r4
 8004122:	19db      	adds	r3, r3, r7
 8004124:	1902      	adds	r2, r0, r4
 8004126:	19d2      	adds	r2, r2, r7
 8004128:	8812      	ldrh	r2, [r2, #0]
 800412a:	430a      	orrs	r2, r1
 800412c:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800412e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	1902      	adds	r2, r0, r4
 8004134:	19d2      	adds	r2, r2, r7
 8004136:	8812      	ldrh	r2, [r2, #0]
 8004138:	60da      	str	r2, [r3, #12]
 800413a:	e05e      	b.n	80041fa <UART_SetConfig+0x66e>
      }
      else
      {
        ret = HAL_ERROR;
 800413c:	231a      	movs	r3, #26
 800413e:	2220      	movs	r2, #32
 8004140:	189b      	adds	r3, r3, r2
 8004142:	19db      	adds	r3, r3, r7
 8004144:	2201      	movs	r2, #1
 8004146:	701a      	strb	r2, [r3, #0]
 8004148:	e057      	b.n	80041fa <UART_SetConfig+0x66e>
      }
    }
  }
  else
  {
    switch (clocksource)
 800414a:	231b      	movs	r3, #27
 800414c:	2220      	movs	r2, #32
 800414e:	189b      	adds	r3, r3, r2
 8004150:	19db      	adds	r3, r3, r7
 8004152:	781b      	ldrb	r3, [r3, #0]
 8004154:	2b08      	cmp	r3, #8
 8004156:	d015      	beq.n	8004184 <UART_SetConfig+0x5f8>
 8004158:	dc18      	bgt.n	800418c <UART_SetConfig+0x600>
 800415a:	2b04      	cmp	r3, #4
 800415c:	d00d      	beq.n	800417a <UART_SetConfig+0x5ee>
 800415e:	dc15      	bgt.n	800418c <UART_SetConfig+0x600>
 8004160:	2b00      	cmp	r3, #0
 8004162:	d002      	beq.n	800416a <UART_SetConfig+0x5de>
 8004164:	2b02      	cmp	r3, #2
 8004166:	d005      	beq.n	8004174 <UART_SetConfig+0x5e8>
 8004168:	e010      	b.n	800418c <UART_SetConfig+0x600>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800416a:	f7fe f88f 	bl	800228c <HAL_RCC_GetPCLK1Freq>
 800416e:	0003      	movs	r3, r0
 8004170:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004172:	e014      	b.n	800419e <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004174:	4b2e      	ldr	r3, [pc, #184]	; (8004230 <UART_SetConfig+0x6a4>)
 8004176:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004178:	e011      	b.n	800419e <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800417a:	f7fd fffb 	bl	8002174 <HAL_RCC_GetSysClockFreq>
 800417e:	0003      	movs	r3, r0
 8004180:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004182:	e00c      	b.n	800419e <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004184:	2380      	movs	r3, #128	; 0x80
 8004186:	021b      	lsls	r3, r3, #8
 8004188:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800418a:	e008      	b.n	800419e <UART_SetConfig+0x612>
      default:
        pclk = 0U;
 800418c:	2300      	movs	r3, #0
 800418e:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8004190:	231a      	movs	r3, #26
 8004192:	2220      	movs	r2, #32
 8004194:	189b      	adds	r3, r3, r2
 8004196:	19db      	adds	r3, r3, r7
 8004198:	2201      	movs	r2, #1
 800419a:	701a      	strb	r2, [r3, #0]
        break;
 800419c:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 800419e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d02a      	beq.n	80041fa <UART_SetConfig+0x66e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80041a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041a6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80041a8:	4b22      	ldr	r3, [pc, #136]	; (8004234 <UART_SetConfig+0x6a8>)
 80041aa:	0052      	lsls	r2, r2, #1
 80041ac:	5ad3      	ldrh	r3, [r2, r3]
 80041ae:	0019      	movs	r1, r3
 80041b0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80041b2:	f7fb ffaf 	bl	8000114 <__udivsi3>
 80041b6:	0003      	movs	r3, r0
 80041b8:	001a      	movs	r2, r3
 80041ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041bc:	685b      	ldr	r3, [r3, #4]
 80041be:	085b      	lsrs	r3, r3, #1
 80041c0:	18d2      	adds	r2, r2, r3
 80041c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041c4:	685b      	ldr	r3, [r3, #4]
 80041c6:	0019      	movs	r1, r3
 80041c8:	0010      	movs	r0, r2
 80041ca:	f7fb ffa3 	bl	8000114 <__udivsi3>
 80041ce:	0003      	movs	r3, r0
 80041d0:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80041d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041d4:	2b0f      	cmp	r3, #15
 80041d6:	d90a      	bls.n	80041ee <UART_SetConfig+0x662>
 80041d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80041da:	2380      	movs	r3, #128	; 0x80
 80041dc:	025b      	lsls	r3, r3, #9
 80041de:	429a      	cmp	r2, r3
 80041e0:	d205      	bcs.n	80041ee <UART_SetConfig+0x662>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80041e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041e4:	b29a      	uxth	r2, r3
 80041e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	60da      	str	r2, [r3, #12]
 80041ec:	e005      	b.n	80041fa <UART_SetConfig+0x66e>
      }
      else
      {
        ret = HAL_ERROR;
 80041ee:	231a      	movs	r3, #26
 80041f0:	2220      	movs	r2, #32
 80041f2:	189b      	adds	r3, r3, r2
 80041f4:	19db      	adds	r3, r3, r7
 80041f6:	2201      	movs	r2, #1
 80041f8:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80041fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041fc:	226a      	movs	r2, #106	; 0x6a
 80041fe:	2101      	movs	r1, #1
 8004200:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8004202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004204:	2268      	movs	r2, #104	; 0x68
 8004206:	2101      	movs	r1, #1
 8004208:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800420a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800420c:	2200      	movs	r2, #0
 800420e:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8004210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004212:	2200      	movs	r2, #0
 8004214:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8004216:	231a      	movs	r3, #26
 8004218:	2220      	movs	r2, #32
 800421a:	189b      	adds	r3, r3, r2
 800421c:	19db      	adds	r3, r3, r7
 800421e:	781b      	ldrb	r3, [r3, #0]
}
 8004220:	0018      	movs	r0, r3
 8004222:	46bd      	mov	sp, r7
 8004224:	b010      	add	sp, #64	; 0x40
 8004226:	bdb0      	pop	{r4, r5, r7, pc}
 8004228:	40008000 	.word	0x40008000
 800422c:	40008400 	.word	0x40008400
 8004230:	00f42400 	.word	0x00f42400
 8004234:	08005044 	.word	0x08005044

08004238 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004238:	b580      	push	{r7, lr}
 800423a:	b082      	sub	sp, #8
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004244:	2201      	movs	r2, #1
 8004246:	4013      	ands	r3, r2
 8004248:	d00b      	beq.n	8004262 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	685b      	ldr	r3, [r3, #4]
 8004250:	4a4a      	ldr	r2, [pc, #296]	; (800437c <UART_AdvFeatureConfig+0x144>)
 8004252:	4013      	ands	r3, r2
 8004254:	0019      	movs	r1, r3
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	430a      	orrs	r2, r1
 8004260:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004266:	2202      	movs	r2, #2
 8004268:	4013      	ands	r3, r2
 800426a:	d00b      	beq.n	8004284 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	685b      	ldr	r3, [r3, #4]
 8004272:	4a43      	ldr	r2, [pc, #268]	; (8004380 <UART_AdvFeatureConfig+0x148>)
 8004274:	4013      	ands	r3, r2
 8004276:	0019      	movs	r1, r3
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	430a      	orrs	r2, r1
 8004282:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004288:	2204      	movs	r2, #4
 800428a:	4013      	ands	r3, r2
 800428c:	d00b      	beq.n	80042a6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	685b      	ldr	r3, [r3, #4]
 8004294:	4a3b      	ldr	r2, [pc, #236]	; (8004384 <UART_AdvFeatureConfig+0x14c>)
 8004296:	4013      	ands	r3, r2
 8004298:	0019      	movs	r1, r3
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	430a      	orrs	r2, r1
 80042a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042aa:	2208      	movs	r2, #8
 80042ac:	4013      	ands	r3, r2
 80042ae:	d00b      	beq.n	80042c8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	685b      	ldr	r3, [r3, #4]
 80042b6:	4a34      	ldr	r2, [pc, #208]	; (8004388 <UART_AdvFeatureConfig+0x150>)
 80042b8:	4013      	ands	r3, r2
 80042ba:	0019      	movs	r1, r3
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	430a      	orrs	r2, r1
 80042c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042cc:	2210      	movs	r2, #16
 80042ce:	4013      	ands	r3, r2
 80042d0:	d00b      	beq.n	80042ea <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	689b      	ldr	r3, [r3, #8]
 80042d8:	4a2c      	ldr	r2, [pc, #176]	; (800438c <UART_AdvFeatureConfig+0x154>)
 80042da:	4013      	ands	r3, r2
 80042dc:	0019      	movs	r1, r3
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	430a      	orrs	r2, r1
 80042e8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042ee:	2220      	movs	r2, #32
 80042f0:	4013      	ands	r3, r2
 80042f2:	d00b      	beq.n	800430c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	689b      	ldr	r3, [r3, #8]
 80042fa:	4a25      	ldr	r2, [pc, #148]	; (8004390 <UART_AdvFeatureConfig+0x158>)
 80042fc:	4013      	ands	r3, r2
 80042fe:	0019      	movs	r1, r3
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	430a      	orrs	r2, r1
 800430a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004310:	2240      	movs	r2, #64	; 0x40
 8004312:	4013      	ands	r3, r2
 8004314:	d01d      	beq.n	8004352 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	685b      	ldr	r3, [r3, #4]
 800431c:	4a1d      	ldr	r2, [pc, #116]	; (8004394 <UART_AdvFeatureConfig+0x15c>)
 800431e:	4013      	ands	r3, r2
 8004320:	0019      	movs	r1, r3
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	430a      	orrs	r2, r1
 800432c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004332:	2380      	movs	r3, #128	; 0x80
 8004334:	035b      	lsls	r3, r3, #13
 8004336:	429a      	cmp	r2, r3
 8004338:	d10b      	bne.n	8004352 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	685b      	ldr	r3, [r3, #4]
 8004340:	4a15      	ldr	r2, [pc, #84]	; (8004398 <UART_AdvFeatureConfig+0x160>)
 8004342:	4013      	ands	r3, r2
 8004344:	0019      	movs	r1, r3
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	430a      	orrs	r2, r1
 8004350:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004356:	2280      	movs	r2, #128	; 0x80
 8004358:	4013      	ands	r3, r2
 800435a:	d00b      	beq.n	8004374 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	685b      	ldr	r3, [r3, #4]
 8004362:	4a0e      	ldr	r2, [pc, #56]	; (800439c <UART_AdvFeatureConfig+0x164>)
 8004364:	4013      	ands	r3, r2
 8004366:	0019      	movs	r1, r3
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	430a      	orrs	r2, r1
 8004372:	605a      	str	r2, [r3, #4]
  }
}
 8004374:	46c0      	nop			; (mov r8, r8)
 8004376:	46bd      	mov	sp, r7
 8004378:	b002      	add	sp, #8
 800437a:	bd80      	pop	{r7, pc}
 800437c:	fffdffff 	.word	0xfffdffff
 8004380:	fffeffff 	.word	0xfffeffff
 8004384:	fffbffff 	.word	0xfffbffff
 8004388:	ffff7fff 	.word	0xffff7fff
 800438c:	ffffefff 	.word	0xffffefff
 8004390:	ffffdfff 	.word	0xffffdfff
 8004394:	ffefffff 	.word	0xffefffff
 8004398:	ff9fffff 	.word	0xff9fffff
 800439c:	fff7ffff 	.word	0xfff7ffff

080043a0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80043a0:	b580      	push	{r7, lr}
 80043a2:	b086      	sub	sp, #24
 80043a4:	af02      	add	r7, sp, #8
 80043a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2290      	movs	r2, #144	; 0x90
 80043ac:	2100      	movs	r1, #0
 80043ae:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80043b0:	f7fc ff3c 	bl	800122c <HAL_GetTick>
 80043b4:	0003      	movs	r3, r0
 80043b6:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	2208      	movs	r2, #8
 80043c0:	4013      	ands	r3, r2
 80043c2:	2b08      	cmp	r3, #8
 80043c4:	d10c      	bne.n	80043e0 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	2280      	movs	r2, #128	; 0x80
 80043ca:	0391      	lsls	r1, r2, #14
 80043cc:	6878      	ldr	r0, [r7, #4]
 80043ce:	4a1a      	ldr	r2, [pc, #104]	; (8004438 <UART_CheckIdleState+0x98>)
 80043d0:	9200      	str	r2, [sp, #0]
 80043d2:	2200      	movs	r2, #0
 80043d4:	f000 f832 	bl	800443c <UART_WaitOnFlagUntilTimeout>
 80043d8:	1e03      	subs	r3, r0, #0
 80043da:	d001      	beq.n	80043e0 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80043dc:	2303      	movs	r3, #3
 80043de:	e026      	b.n	800442e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	2204      	movs	r2, #4
 80043e8:	4013      	ands	r3, r2
 80043ea:	2b04      	cmp	r3, #4
 80043ec:	d10c      	bne.n	8004408 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	2280      	movs	r2, #128	; 0x80
 80043f2:	03d1      	lsls	r1, r2, #15
 80043f4:	6878      	ldr	r0, [r7, #4]
 80043f6:	4a10      	ldr	r2, [pc, #64]	; (8004438 <UART_CheckIdleState+0x98>)
 80043f8:	9200      	str	r2, [sp, #0]
 80043fa:	2200      	movs	r2, #0
 80043fc:	f000 f81e 	bl	800443c <UART_WaitOnFlagUntilTimeout>
 8004400:	1e03      	subs	r3, r0, #0
 8004402:	d001      	beq.n	8004408 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004404:	2303      	movs	r3, #3
 8004406:	e012      	b.n	800442e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2288      	movs	r2, #136	; 0x88
 800440c:	2120      	movs	r1, #32
 800440e:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	228c      	movs	r2, #140	; 0x8c
 8004414:	2120      	movs	r1, #32
 8004416:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	2200      	movs	r2, #0
 800441c:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	2200      	movs	r2, #0
 8004422:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2284      	movs	r2, #132	; 0x84
 8004428:	2100      	movs	r1, #0
 800442a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800442c:	2300      	movs	r3, #0
}
 800442e:	0018      	movs	r0, r3
 8004430:	46bd      	mov	sp, r7
 8004432:	b004      	add	sp, #16
 8004434:	bd80      	pop	{r7, pc}
 8004436:	46c0      	nop			; (mov r8, r8)
 8004438:	01ffffff 	.word	0x01ffffff

0800443c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800443c:	b580      	push	{r7, lr}
 800443e:	b094      	sub	sp, #80	; 0x50
 8004440:	af00      	add	r7, sp, #0
 8004442:	60f8      	str	r0, [r7, #12]
 8004444:	60b9      	str	r1, [r7, #8]
 8004446:	603b      	str	r3, [r7, #0]
 8004448:	1dfb      	adds	r3, r7, #7
 800444a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800444c:	e0a7      	b.n	800459e <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800444e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004450:	3301      	adds	r3, #1
 8004452:	d100      	bne.n	8004456 <UART_WaitOnFlagUntilTimeout+0x1a>
 8004454:	e0a3      	b.n	800459e <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004456:	f7fc fee9 	bl	800122c <HAL_GetTick>
 800445a:	0002      	movs	r2, r0
 800445c:	683b      	ldr	r3, [r7, #0]
 800445e:	1ad3      	subs	r3, r2, r3
 8004460:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004462:	429a      	cmp	r2, r3
 8004464:	d302      	bcc.n	800446c <UART_WaitOnFlagUntilTimeout+0x30>
 8004466:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004468:	2b00      	cmp	r3, #0
 800446a:	d13f      	bne.n	80044ec <UART_WaitOnFlagUntilTimeout+0xb0>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800446c:	f3ef 8310 	mrs	r3, PRIMASK
 8004470:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8004472:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004474:	647b      	str	r3, [r7, #68]	; 0x44
 8004476:	2301      	movs	r3, #1
 8004478:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800447a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800447c:	f383 8810 	msr	PRIMASK, r3
}
 8004480:	46c0      	nop			; (mov r8, r8)
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	681a      	ldr	r2, [r3, #0]
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	494e      	ldr	r1, [pc, #312]	; (80045c8 <UART_WaitOnFlagUntilTimeout+0x18c>)
 800448e:	400a      	ands	r2, r1
 8004490:	601a      	str	r2, [r3, #0]
 8004492:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004494:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004496:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004498:	f383 8810 	msr	PRIMASK, r3
}
 800449c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800449e:	f3ef 8310 	mrs	r3, PRIMASK
 80044a2:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 80044a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044a6:	643b      	str	r3, [r7, #64]	; 0x40
 80044a8:	2301      	movs	r3, #1
 80044aa:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80044ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044ae:	f383 8810 	msr	PRIMASK, r3
}
 80044b2:	46c0      	nop			; (mov r8, r8)
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	689a      	ldr	r2, [r3, #8]
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	2101      	movs	r1, #1
 80044c0:	438a      	bics	r2, r1
 80044c2:	609a      	str	r2, [r3, #8]
 80044c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80044c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80044c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80044ca:	f383 8810 	msr	PRIMASK, r3
}
 80044ce:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	2288      	movs	r2, #136	; 0x88
 80044d4:	2120      	movs	r1, #32
 80044d6:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	228c      	movs	r2, #140	; 0x8c
 80044dc:	2120      	movs	r1, #32
 80044de:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	2284      	movs	r2, #132	; 0x84
 80044e4:	2100      	movs	r1, #0
 80044e6:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80044e8:	2303      	movs	r3, #3
 80044ea:	e069      	b.n	80045c0 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	2204      	movs	r2, #4
 80044f4:	4013      	ands	r3, r2
 80044f6:	d052      	beq.n	800459e <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	69da      	ldr	r2, [r3, #28]
 80044fe:	2380      	movs	r3, #128	; 0x80
 8004500:	011b      	lsls	r3, r3, #4
 8004502:	401a      	ands	r2, r3
 8004504:	2380      	movs	r3, #128	; 0x80
 8004506:	011b      	lsls	r3, r3, #4
 8004508:	429a      	cmp	r2, r3
 800450a:	d148      	bne.n	800459e <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	2280      	movs	r2, #128	; 0x80
 8004512:	0112      	lsls	r2, r2, #4
 8004514:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004516:	f3ef 8310 	mrs	r3, PRIMASK
 800451a:	613b      	str	r3, [r7, #16]
  return(result);
 800451c:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800451e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004520:	2301      	movs	r3, #1
 8004522:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004524:	697b      	ldr	r3, [r7, #20]
 8004526:	f383 8810 	msr	PRIMASK, r3
}
 800452a:	46c0      	nop			; (mov r8, r8)
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	681a      	ldr	r2, [r3, #0]
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	4924      	ldr	r1, [pc, #144]	; (80045c8 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8004538:	400a      	ands	r2, r1
 800453a:	601a      	str	r2, [r3, #0]
 800453c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800453e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004540:	69bb      	ldr	r3, [r7, #24]
 8004542:	f383 8810 	msr	PRIMASK, r3
}
 8004546:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004548:	f3ef 8310 	mrs	r3, PRIMASK
 800454c:	61fb      	str	r3, [r7, #28]
  return(result);
 800454e:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004550:	64bb      	str	r3, [r7, #72]	; 0x48
 8004552:	2301      	movs	r3, #1
 8004554:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004556:	6a3b      	ldr	r3, [r7, #32]
 8004558:	f383 8810 	msr	PRIMASK, r3
}
 800455c:	46c0      	nop			; (mov r8, r8)
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	689a      	ldr	r2, [r3, #8]
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	2101      	movs	r1, #1
 800456a:	438a      	bics	r2, r1
 800456c:	609a      	str	r2, [r3, #8]
 800456e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004570:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004574:	f383 8810 	msr	PRIMASK, r3
}
 8004578:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	2288      	movs	r2, #136	; 0x88
 800457e:	2120      	movs	r1, #32
 8004580:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	228c      	movs	r2, #140	; 0x8c
 8004586:	2120      	movs	r1, #32
 8004588:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	2290      	movs	r2, #144	; 0x90
 800458e:	2120      	movs	r1, #32
 8004590:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	2284      	movs	r2, #132	; 0x84
 8004596:	2100      	movs	r1, #0
 8004598:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800459a:	2303      	movs	r3, #3
 800459c:	e010      	b.n	80045c0 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	69db      	ldr	r3, [r3, #28]
 80045a4:	68ba      	ldr	r2, [r7, #8]
 80045a6:	4013      	ands	r3, r2
 80045a8:	68ba      	ldr	r2, [r7, #8]
 80045aa:	1ad3      	subs	r3, r2, r3
 80045ac:	425a      	negs	r2, r3
 80045ae:	4153      	adcs	r3, r2
 80045b0:	b2db      	uxtb	r3, r3
 80045b2:	001a      	movs	r2, r3
 80045b4:	1dfb      	adds	r3, r7, #7
 80045b6:	781b      	ldrb	r3, [r3, #0]
 80045b8:	429a      	cmp	r2, r3
 80045ba:	d100      	bne.n	80045be <UART_WaitOnFlagUntilTimeout+0x182>
 80045bc:	e747      	b.n	800444e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80045be:	2300      	movs	r3, #0
}
 80045c0:	0018      	movs	r0, r3
 80045c2:	46bd      	mov	sp, r7
 80045c4:	b014      	add	sp, #80	; 0x50
 80045c6:	bd80      	pop	{r7, pc}
 80045c8:	fffffe5f 	.word	0xfffffe5f

080045cc <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80045cc:	b580      	push	{r7, lr}
 80045ce:	b084      	sub	sp, #16
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2284      	movs	r2, #132	; 0x84
 80045d8:	5c9b      	ldrb	r3, [r3, r2]
 80045da:	2b01      	cmp	r3, #1
 80045dc:	d101      	bne.n	80045e2 <HAL_UARTEx_DisableFifoMode+0x16>
 80045de:	2302      	movs	r3, #2
 80045e0:	e027      	b.n	8004632 <HAL_UARTEx_DisableFifoMode+0x66>
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	2284      	movs	r2, #132	; 0x84
 80045e6:	2101      	movs	r1, #1
 80045e8:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	2288      	movs	r2, #136	; 0x88
 80045ee:	2124      	movs	r1, #36	; 0x24
 80045f0:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	681a      	ldr	r2, [r3, #0]
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	2101      	movs	r1, #1
 8004606:	438a      	bics	r2, r1
 8004608:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	4a0b      	ldr	r2, [pc, #44]	; (800463c <HAL_UARTEx_DisableFifoMode+0x70>)
 800460e:	4013      	ands	r3, r2
 8004610:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	2200      	movs	r2, #0
 8004616:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	68fa      	ldr	r2, [r7, #12]
 800461e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2288      	movs	r2, #136	; 0x88
 8004624:	2120      	movs	r1, #32
 8004626:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2284      	movs	r2, #132	; 0x84
 800462c:	2100      	movs	r1, #0
 800462e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004630:	2300      	movs	r3, #0
}
 8004632:	0018      	movs	r0, r3
 8004634:	46bd      	mov	sp, r7
 8004636:	b004      	add	sp, #16
 8004638:	bd80      	pop	{r7, pc}
 800463a:	46c0      	nop			; (mov r8, r8)
 800463c:	dfffffff 	.word	0xdfffffff

08004640 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004640:	b580      	push	{r7, lr}
 8004642:	b084      	sub	sp, #16
 8004644:	af00      	add	r7, sp, #0
 8004646:	6078      	str	r0, [r7, #4]
 8004648:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	2284      	movs	r2, #132	; 0x84
 800464e:	5c9b      	ldrb	r3, [r3, r2]
 8004650:	2b01      	cmp	r3, #1
 8004652:	d101      	bne.n	8004658 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004654:	2302      	movs	r3, #2
 8004656:	e02e      	b.n	80046b6 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2284      	movs	r2, #132	; 0x84
 800465c:	2101      	movs	r1, #1
 800465e:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2288      	movs	r2, #136	; 0x88
 8004664:	2124      	movs	r1, #36	; 0x24
 8004666:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	681a      	ldr	r2, [r3, #0]
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	2101      	movs	r1, #1
 800467c:	438a      	bics	r2, r1
 800467e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	689b      	ldr	r3, [r3, #8]
 8004686:	00db      	lsls	r3, r3, #3
 8004688:	08d9      	lsrs	r1, r3, #3
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	683a      	ldr	r2, [r7, #0]
 8004690:	430a      	orrs	r2, r1
 8004692:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	0018      	movs	r0, r3
 8004698:	f000 f854 	bl	8004744 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	68fa      	ldr	r2, [r7, #12]
 80046a2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2288      	movs	r2, #136	; 0x88
 80046a8:	2120      	movs	r1, #32
 80046aa:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2284      	movs	r2, #132	; 0x84
 80046b0:	2100      	movs	r1, #0
 80046b2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80046b4:	2300      	movs	r3, #0
}
 80046b6:	0018      	movs	r0, r3
 80046b8:	46bd      	mov	sp, r7
 80046ba:	b004      	add	sp, #16
 80046bc:	bd80      	pop	{r7, pc}
	...

080046c0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80046c0:	b580      	push	{r7, lr}
 80046c2:	b084      	sub	sp, #16
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
 80046c8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	2284      	movs	r2, #132	; 0x84
 80046ce:	5c9b      	ldrb	r3, [r3, r2]
 80046d0:	2b01      	cmp	r3, #1
 80046d2:	d101      	bne.n	80046d8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80046d4:	2302      	movs	r3, #2
 80046d6:	e02f      	b.n	8004738 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2284      	movs	r2, #132	; 0x84
 80046dc:	2101      	movs	r1, #1
 80046de:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2288      	movs	r2, #136	; 0x88
 80046e4:	2124      	movs	r1, #36	; 0x24
 80046e6:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	681a      	ldr	r2, [r3, #0]
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	2101      	movs	r1, #1
 80046fc:	438a      	bics	r2, r1
 80046fe:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	689b      	ldr	r3, [r3, #8]
 8004706:	4a0e      	ldr	r2, [pc, #56]	; (8004740 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8004708:	4013      	ands	r3, r2
 800470a:	0019      	movs	r1, r3
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	683a      	ldr	r2, [r7, #0]
 8004712:	430a      	orrs	r2, r1
 8004714:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	0018      	movs	r0, r3
 800471a:	f000 f813 	bl	8004744 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	68fa      	ldr	r2, [r7, #12]
 8004724:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	2288      	movs	r2, #136	; 0x88
 800472a:	2120      	movs	r1, #32
 800472c:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	2284      	movs	r2, #132	; 0x84
 8004732:	2100      	movs	r1, #0
 8004734:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004736:	2300      	movs	r3, #0
}
 8004738:	0018      	movs	r0, r3
 800473a:	46bd      	mov	sp, r7
 800473c:	b004      	add	sp, #16
 800473e:	bd80      	pop	{r7, pc}
 8004740:	f1ffffff 	.word	0xf1ffffff

08004744 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004744:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004746:	b085      	sub	sp, #20
 8004748:	af00      	add	r7, sp, #0
 800474a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004750:	2b00      	cmp	r3, #0
 8004752:	d108      	bne.n	8004766 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	226a      	movs	r2, #106	; 0x6a
 8004758:	2101      	movs	r1, #1
 800475a:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2268      	movs	r2, #104	; 0x68
 8004760:	2101      	movs	r1, #1
 8004762:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004764:	e043      	b.n	80047ee <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004766:	260f      	movs	r6, #15
 8004768:	19bb      	adds	r3, r7, r6
 800476a:	2208      	movs	r2, #8
 800476c:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800476e:	200e      	movs	r0, #14
 8004770:	183b      	adds	r3, r7, r0
 8004772:	2208      	movs	r2, #8
 8004774:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	689b      	ldr	r3, [r3, #8]
 800477c:	0e5b      	lsrs	r3, r3, #25
 800477e:	b2da      	uxtb	r2, r3
 8004780:	240d      	movs	r4, #13
 8004782:	193b      	adds	r3, r7, r4
 8004784:	2107      	movs	r1, #7
 8004786:	400a      	ands	r2, r1
 8004788:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	689b      	ldr	r3, [r3, #8]
 8004790:	0f5b      	lsrs	r3, r3, #29
 8004792:	b2da      	uxtb	r2, r3
 8004794:	250c      	movs	r5, #12
 8004796:	197b      	adds	r3, r7, r5
 8004798:	2107      	movs	r1, #7
 800479a:	400a      	ands	r2, r1
 800479c:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800479e:	183b      	adds	r3, r7, r0
 80047a0:	781b      	ldrb	r3, [r3, #0]
 80047a2:	197a      	adds	r2, r7, r5
 80047a4:	7812      	ldrb	r2, [r2, #0]
 80047a6:	4914      	ldr	r1, [pc, #80]	; (80047f8 <UARTEx_SetNbDataToProcess+0xb4>)
 80047a8:	5c8a      	ldrb	r2, [r1, r2]
 80047aa:	435a      	muls	r2, r3
 80047ac:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 80047ae:	197b      	adds	r3, r7, r5
 80047b0:	781b      	ldrb	r3, [r3, #0]
 80047b2:	4a12      	ldr	r2, [pc, #72]	; (80047fc <UARTEx_SetNbDataToProcess+0xb8>)
 80047b4:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80047b6:	0019      	movs	r1, r3
 80047b8:	f7fb fd36 	bl	8000228 <__divsi3>
 80047bc:	0003      	movs	r3, r0
 80047be:	b299      	uxth	r1, r3
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	226a      	movs	r2, #106	; 0x6a
 80047c4:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80047c6:	19bb      	adds	r3, r7, r6
 80047c8:	781b      	ldrb	r3, [r3, #0]
 80047ca:	193a      	adds	r2, r7, r4
 80047cc:	7812      	ldrb	r2, [r2, #0]
 80047ce:	490a      	ldr	r1, [pc, #40]	; (80047f8 <UARTEx_SetNbDataToProcess+0xb4>)
 80047d0:	5c8a      	ldrb	r2, [r1, r2]
 80047d2:	435a      	muls	r2, r3
 80047d4:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 80047d6:	193b      	adds	r3, r7, r4
 80047d8:	781b      	ldrb	r3, [r3, #0]
 80047da:	4a08      	ldr	r2, [pc, #32]	; (80047fc <UARTEx_SetNbDataToProcess+0xb8>)
 80047dc:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80047de:	0019      	movs	r1, r3
 80047e0:	f7fb fd22 	bl	8000228 <__divsi3>
 80047e4:	0003      	movs	r3, r0
 80047e6:	b299      	uxth	r1, r3
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2268      	movs	r2, #104	; 0x68
 80047ec:	5299      	strh	r1, [r3, r2]
}
 80047ee:	46c0      	nop			; (mov r8, r8)
 80047f0:	46bd      	mov	sp, r7
 80047f2:	b005      	add	sp, #20
 80047f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80047f6:	46c0      	nop			; (mov r8, r8)
 80047f8:	0800505c 	.word	0x0800505c
 80047fc:	08005064 	.word	0x08005064

08004800 <lis2dw12_read_reg>:
  *
  */
int32_t __weak lis2dw12_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                 uint8_t *data,
                                 uint16_t len)
{
 8004800:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004802:	b087      	sub	sp, #28
 8004804:	af00      	add	r7, sp, #0
 8004806:	60f8      	str	r0, [r7, #12]
 8004808:	0008      	movs	r0, r1
 800480a:	607a      	str	r2, [r7, #4]
 800480c:	0019      	movs	r1, r3
 800480e:	260b      	movs	r6, #11
 8004810:	19bb      	adds	r3, r7, r6
 8004812:	1c02      	adds	r2, r0, #0
 8004814:	701a      	strb	r2, [r3, #0]
 8004816:	2508      	movs	r5, #8
 8004818:	197b      	adds	r3, r7, r5
 800481a:	1c0a      	adds	r2, r1, #0
 800481c:	801a      	strh	r2, [r3, #0]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	685c      	ldr	r4, [r3, #4]
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	68d8      	ldr	r0, [r3, #12]
 8004826:	197b      	adds	r3, r7, r5
 8004828:	881d      	ldrh	r5, [r3, #0]
 800482a:	687a      	ldr	r2, [r7, #4]
 800482c:	19bb      	adds	r3, r7, r6
 800482e:	7819      	ldrb	r1, [r3, #0]
 8004830:	002b      	movs	r3, r5
 8004832:	47a0      	blx	r4
 8004834:	0003      	movs	r3, r0
 8004836:	617b      	str	r3, [r7, #20]

  return ret;
 8004838:	697b      	ldr	r3, [r7, #20]
}
 800483a:	0018      	movs	r0, r3
 800483c:	46bd      	mov	sp, r7
 800483e:	b007      	add	sp, #28
 8004840:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004842 <lis2dw12_write_reg>:
  *
  */
int32_t __weak lis2dw12_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                  uint8_t *data,
                                  uint16_t len)
{
 8004842:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004844:	b087      	sub	sp, #28
 8004846:	af00      	add	r7, sp, #0
 8004848:	60f8      	str	r0, [r7, #12]
 800484a:	0008      	movs	r0, r1
 800484c:	607a      	str	r2, [r7, #4]
 800484e:	0019      	movs	r1, r3
 8004850:	260b      	movs	r6, #11
 8004852:	19bb      	adds	r3, r7, r6
 8004854:	1c02      	adds	r2, r0, #0
 8004856:	701a      	strb	r2, [r3, #0]
 8004858:	2508      	movs	r5, #8
 800485a:	197b      	adds	r3, r7, r5
 800485c:	1c0a      	adds	r2, r1, #0
 800485e:	801a      	strh	r2, [r3, #0]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	681c      	ldr	r4, [r3, #0]
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	68d8      	ldr	r0, [r3, #12]
 8004868:	197b      	adds	r3, r7, r5
 800486a:	881d      	ldrh	r5, [r3, #0]
 800486c:	687a      	ldr	r2, [r7, #4]
 800486e:	19bb      	adds	r3, r7, r6
 8004870:	7819      	ldrb	r1, [r3, #0]
 8004872:	002b      	movs	r3, r5
 8004874:	47a0      	blx	r4
 8004876:	0003      	movs	r3, r0
 8004878:	617b      	str	r3, [r7, #20]

  return ret;
 800487a:	697b      	ldr	r3, [r7, #20]
}
 800487c:	0018      	movs	r0, r3
 800487e:	46bd      	mov	sp, r7
 8004880:	b007      	add	sp, #28
 8004882:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004884 <lis2dw12_power_mode_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_power_mode_set(stmdev_ctx_t *ctx,
                                lis2dw12_mode_t val)
{
 8004884:	b590      	push	{r4, r7, lr}
 8004886:	b087      	sub	sp, #28
 8004888:	af00      	add	r7, sp, #0
 800488a:	6078      	str	r0, [r7, #4]
 800488c:	000a      	movs	r2, r1
 800488e:	1cfb      	adds	r3, r7, #3
 8004890:	701a      	strb	r2, [r3, #0]
  lis2dw12_ctrl1_t ctrl1;
  lis2dw12_ctrl6_t ctrl6;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 8004892:	2410      	movs	r4, #16
 8004894:	193a      	adds	r2, r7, r4
 8004896:	6878      	ldr	r0, [r7, #4]
 8004898:	2301      	movs	r3, #1
 800489a:	2120      	movs	r1, #32
 800489c:	f7ff ffb0 	bl	8004800 <lis2dw12_read_reg>
 80048a0:	0003      	movs	r3, r0
 80048a2:	617b      	str	r3, [r7, #20]

  if (ret == 0)
 80048a4:	697b      	ldr	r3, [r7, #20]
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d129      	bne.n	80048fe <lis2dw12_power_mode_set+0x7a>
  {
    ctrl1.mode = ((uint8_t) val & 0x0CU) >> 2;
 80048aa:	1cfb      	adds	r3, r7, #3
 80048ac:	781b      	ldrb	r3, [r3, #0]
 80048ae:	089b      	lsrs	r3, r3, #2
 80048b0:	1c1a      	adds	r2, r3, #0
 80048b2:	2303      	movs	r3, #3
 80048b4:	4013      	ands	r3, r2
 80048b6:	b2da      	uxtb	r2, r3
 80048b8:	193b      	adds	r3, r7, r4
 80048ba:	2103      	movs	r1, #3
 80048bc:	400a      	ands	r2, r1
 80048be:	0090      	lsls	r0, r2, #2
 80048c0:	781a      	ldrb	r2, [r3, #0]
 80048c2:	210c      	movs	r1, #12
 80048c4:	438a      	bics	r2, r1
 80048c6:	1c11      	adds	r1, r2, #0
 80048c8:	1c02      	adds	r2, r0, #0
 80048ca:	430a      	orrs	r2, r1
 80048cc:	701a      	strb	r2, [r3, #0]
    ctrl1.lp_mode = (uint8_t) val & 0x03U ;
 80048ce:	1cfb      	adds	r3, r7, #3
 80048d0:	781b      	ldrb	r3, [r3, #0]
 80048d2:	2203      	movs	r2, #3
 80048d4:	4013      	ands	r3, r2
 80048d6:	b2da      	uxtb	r2, r3
 80048d8:	193b      	adds	r3, r7, r4
 80048da:	2103      	movs	r1, #3
 80048dc:	400a      	ands	r2, r1
 80048de:	0010      	movs	r0, r2
 80048e0:	781a      	ldrb	r2, [r3, #0]
 80048e2:	2103      	movs	r1, #3
 80048e4:	438a      	bics	r2, r1
 80048e6:	1c11      	adds	r1, r2, #0
 80048e8:	1c02      	adds	r2, r0, #0
 80048ea:	430a      	orrs	r2, r1
 80048ec:	701a      	strb	r2, [r3, #0]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 80048ee:	193a      	adds	r2, r7, r4
 80048f0:	6878      	ldr	r0, [r7, #4]
 80048f2:	2301      	movs	r3, #1
 80048f4:	2120      	movs	r1, #32
 80048f6:	f7ff ffa4 	bl	8004842 <lis2dw12_write_reg>
 80048fa:	0003      	movs	r3, r0
 80048fc:	617b      	str	r3, [r7, #20]
  }

  if (ret == 0)
 80048fe:	697b      	ldr	r3, [r7, #20]
 8004900:	2b00      	cmp	r3, #0
 8004902:	d108      	bne.n	8004916 <lis2dw12_power_mode_set+0x92>
  {
    ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &ctrl6, 1);
 8004904:	230c      	movs	r3, #12
 8004906:	18fa      	adds	r2, r7, r3
 8004908:	6878      	ldr	r0, [r7, #4]
 800490a:	2301      	movs	r3, #1
 800490c:	2125      	movs	r1, #37	; 0x25
 800490e:	f7ff ff77 	bl	8004800 <lis2dw12_read_reg>
 8004912:	0003      	movs	r3, r0
 8004914:	617b      	str	r3, [r7, #20]
  }

  if (ret == 0)
 8004916:	697b      	ldr	r3, [r7, #20]
 8004918:	2b00      	cmp	r3, #0
 800491a:	d11a      	bne.n	8004952 <lis2dw12_power_mode_set+0xce>
  {
    ctrl6.low_noise = ((uint8_t) val & 0x10U) >> 4;
 800491c:	1cfb      	adds	r3, r7, #3
 800491e:	781b      	ldrb	r3, [r3, #0]
 8004920:	091b      	lsrs	r3, r3, #4
 8004922:	1c1a      	adds	r2, r3, #0
 8004924:	2301      	movs	r3, #1
 8004926:	4013      	ands	r3, r2
 8004928:	b2da      	uxtb	r2, r3
 800492a:	240c      	movs	r4, #12
 800492c:	193b      	adds	r3, r7, r4
 800492e:	2101      	movs	r1, #1
 8004930:	400a      	ands	r2, r1
 8004932:	0090      	lsls	r0, r2, #2
 8004934:	781a      	ldrb	r2, [r3, #0]
 8004936:	2104      	movs	r1, #4
 8004938:	438a      	bics	r2, r1
 800493a:	1c11      	adds	r1, r2, #0
 800493c:	1c02      	adds	r2, r0, #0
 800493e:	430a      	orrs	r2, r1
 8004940:	701a      	strb	r2, [r3, #0]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &ctrl6, 1);
 8004942:	193a      	adds	r2, r7, r4
 8004944:	6878      	ldr	r0, [r7, #4]
 8004946:	2301      	movs	r3, #1
 8004948:	2125      	movs	r1, #37	; 0x25
 800494a:	f7ff ff7a 	bl	8004842 <lis2dw12_write_reg>
 800494e:	0003      	movs	r3, r0
 8004950:	617b      	str	r3, [r7, #20]
  }

  return ret;
 8004952:	697b      	ldr	r3, [r7, #20]
}
 8004954:	0018      	movs	r0, r3
 8004956:	46bd      	mov	sp, r7
 8004958:	b007      	add	sp, #28
 800495a:	bd90      	pop	{r4, r7, pc}

0800495c <lis2dw12_data_rate_set>:
  * @param  val      change the values of odr in reg CTRL1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_data_rate_set(stmdev_ctx_t *ctx, lis2dw12_odr_t val)
{
 800495c:	b590      	push	{r4, r7, lr}
 800495e:	b087      	sub	sp, #28
 8004960:	af00      	add	r7, sp, #0
 8004962:	6078      	str	r0, [r7, #4]
 8004964:	000a      	movs	r2, r1
 8004966:	1cfb      	adds	r3, r7, #3
 8004968:	701a      	strb	r2, [r3, #0]
  lis2dw12_ctrl1_t ctrl1;
  lis2dw12_ctrl3_t ctrl3;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 800496a:	2410      	movs	r4, #16
 800496c:	193a      	adds	r2, r7, r4
 800496e:	6878      	ldr	r0, [r7, #4]
 8004970:	2301      	movs	r3, #1
 8004972:	2120      	movs	r1, #32
 8004974:	f7ff ff44 	bl	8004800 <lis2dw12_read_reg>
 8004978:	0003      	movs	r3, r0
 800497a:	617b      	str	r3, [r7, #20]

  if (ret == 0)
 800497c:	697b      	ldr	r3, [r7, #20]
 800497e:	2b00      	cmp	r3, #0
 8004980:	d115      	bne.n	80049ae <lis2dw12_data_rate_set+0x52>
  {
    ctrl1.odr = (uint8_t) val;
 8004982:	1cfb      	adds	r3, r7, #3
 8004984:	781b      	ldrb	r3, [r3, #0]
 8004986:	220f      	movs	r2, #15
 8004988:	4013      	ands	r3, r2
 800498a:	b2da      	uxtb	r2, r3
 800498c:	193b      	adds	r3, r7, r4
 800498e:	0110      	lsls	r0, r2, #4
 8004990:	781a      	ldrb	r2, [r3, #0]
 8004992:	210f      	movs	r1, #15
 8004994:	400a      	ands	r2, r1
 8004996:	1c11      	adds	r1, r2, #0
 8004998:	1c02      	adds	r2, r0, #0
 800499a:	430a      	orrs	r2, r1
 800499c:	701a      	strb	r2, [r3, #0]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 800499e:	193a      	adds	r2, r7, r4
 80049a0:	6878      	ldr	r0, [r7, #4]
 80049a2:	2301      	movs	r3, #1
 80049a4:	2120      	movs	r1, #32
 80049a6:	f7ff ff4c 	bl	8004842 <lis2dw12_write_reg>
 80049aa:	0003      	movs	r3, r0
 80049ac:	617b      	str	r3, [r7, #20]
  }

  if (ret == 0)
 80049ae:	697b      	ldr	r3, [r7, #20]
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d108      	bne.n	80049c6 <lis2dw12_data_rate_set+0x6a>
  {
    ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL3, (uint8_t *) &ctrl3, 1);
 80049b4:	230c      	movs	r3, #12
 80049b6:	18fa      	adds	r2, r7, r3
 80049b8:	6878      	ldr	r0, [r7, #4]
 80049ba:	2301      	movs	r3, #1
 80049bc:	2122      	movs	r1, #34	; 0x22
 80049be:	f7ff ff1f 	bl	8004800 <lis2dw12_read_reg>
 80049c2:	0003      	movs	r3, r0
 80049c4:	617b      	str	r3, [r7, #20]
  }

  if (ret == 0)
 80049c6:	697b      	ldr	r3, [r7, #20]
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d11a      	bne.n	8004a02 <lis2dw12_data_rate_set+0xa6>
  {
    ctrl3.slp_mode = ((uint8_t) val & 0x30U) >> 4;
 80049cc:	1cfb      	adds	r3, r7, #3
 80049ce:	781b      	ldrb	r3, [r3, #0]
 80049d0:	091b      	lsrs	r3, r3, #4
 80049d2:	1c1a      	adds	r2, r3, #0
 80049d4:	2303      	movs	r3, #3
 80049d6:	4013      	ands	r3, r2
 80049d8:	b2da      	uxtb	r2, r3
 80049da:	240c      	movs	r4, #12
 80049dc:	193b      	adds	r3, r7, r4
 80049de:	2103      	movs	r1, #3
 80049e0:	400a      	ands	r2, r1
 80049e2:	0010      	movs	r0, r2
 80049e4:	781a      	ldrb	r2, [r3, #0]
 80049e6:	2103      	movs	r1, #3
 80049e8:	438a      	bics	r2, r1
 80049ea:	1c11      	adds	r1, r2, #0
 80049ec:	1c02      	adds	r2, r0, #0
 80049ee:	430a      	orrs	r2, r1
 80049f0:	701a      	strb	r2, [r3, #0]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL3, (uint8_t *) &ctrl3, 1);
 80049f2:	193a      	adds	r2, r7, r4
 80049f4:	6878      	ldr	r0, [r7, #4]
 80049f6:	2301      	movs	r3, #1
 80049f8:	2122      	movs	r1, #34	; 0x22
 80049fa:	f7ff ff22 	bl	8004842 <lis2dw12_write_reg>
 80049fe:	0003      	movs	r3, r0
 8004a00:	617b      	str	r3, [r7, #20]
  }

  return ret;
 8004a02:	697b      	ldr	r3, [r7, #20]
}
 8004a04:	0018      	movs	r0, r3
 8004a06:	46bd      	mov	sp, r7
 8004a08:	b007      	add	sp, #28
 8004a0a:	bd90      	pop	{r4, r7, pc}

08004a0c <lis2dw12_full_scale_set>:
  * @param  val      change the values of fs in reg CTRL6
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_full_scale_set(stmdev_ctx_t *ctx, lis2dw12_fs_t val)
{
 8004a0c:	b590      	push	{r4, r7, lr}
 8004a0e:	b085      	sub	sp, #20
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	6078      	str	r0, [r7, #4]
 8004a14:	000a      	movs	r2, r1
 8004a16:	1cfb      	adds	r3, r7, #3
 8004a18:	701a      	strb	r2, [r3, #0]
  lis2dw12_ctrl6_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &reg, 1);
 8004a1a:	2408      	movs	r4, #8
 8004a1c:	193a      	adds	r2, r7, r4
 8004a1e:	6878      	ldr	r0, [r7, #4]
 8004a20:	2301      	movs	r3, #1
 8004a22:	2125      	movs	r1, #37	; 0x25
 8004a24:	f7ff feec 	bl	8004800 <lis2dw12_read_reg>
 8004a28:	0003      	movs	r3, r0
 8004a2a:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d117      	bne.n	8004a62 <lis2dw12_full_scale_set+0x56>
  {
    reg.fs = (uint8_t) val;
 8004a32:	1cfb      	adds	r3, r7, #3
 8004a34:	781b      	ldrb	r3, [r3, #0]
 8004a36:	2203      	movs	r2, #3
 8004a38:	4013      	ands	r3, r2
 8004a3a:	b2da      	uxtb	r2, r3
 8004a3c:	193b      	adds	r3, r7, r4
 8004a3e:	2103      	movs	r1, #3
 8004a40:	400a      	ands	r2, r1
 8004a42:	0110      	lsls	r0, r2, #4
 8004a44:	781a      	ldrb	r2, [r3, #0]
 8004a46:	2130      	movs	r1, #48	; 0x30
 8004a48:	438a      	bics	r2, r1
 8004a4a:	1c11      	adds	r1, r2, #0
 8004a4c:	1c02      	adds	r2, r0, #0
 8004a4e:	430a      	orrs	r2, r1
 8004a50:	701a      	strb	r2, [r3, #0]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &reg, 1);
 8004a52:	193a      	adds	r2, r7, r4
 8004a54:	6878      	ldr	r0, [r7, #4]
 8004a56:	2301      	movs	r3, #1
 8004a58:	2125      	movs	r1, #37	; 0x25
 8004a5a:	f7ff fef2 	bl	8004842 <lis2dw12_write_reg>
 8004a5e:	0003      	movs	r3, r0
 8004a60:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8004a62:	68fb      	ldr	r3, [r7, #12]
}
 8004a64:	0018      	movs	r0, r3
 8004a66:	46bd      	mov	sp, r7
 8004a68:	b005      	add	sp, #20
 8004a6a:	bd90      	pop	{r4, r7, pc}

08004a6c <lis2dw12_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8004a6c:	b580      	push	{r7, lr}
 8004a6e:	b084      	sub	sp, #16
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]
 8004a74:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_WHO_AM_I, buff, 1);
 8004a76:	683a      	ldr	r2, [r7, #0]
 8004a78:	6878      	ldr	r0, [r7, #4]
 8004a7a:	2301      	movs	r3, #1
 8004a7c:	210f      	movs	r1, #15
 8004a7e:	f7ff febf 	bl	8004800 <lis2dw12_read_reg>
 8004a82:	0003      	movs	r3, r0
 8004a84:	60fb      	str	r3, [r7, #12]

  return ret;
 8004a86:	68fb      	ldr	r3, [r7, #12]
}
 8004a88:	0018      	movs	r0, r3
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	b004      	add	sp, #16
 8004a8e:	bd80      	pop	{r7, pc}

08004a90 <lis2dw12_reset_set>:
  * @param  val      change the values of soft_reset in reg CTRL2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_reset_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8004a90:	b590      	push	{r4, r7, lr}
 8004a92:	b085      	sub	sp, #20
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	6078      	str	r0, [r7, #4]
 8004a98:	000a      	movs	r2, r1
 8004a9a:	1cfb      	adds	r3, r7, #3
 8004a9c:	701a      	strb	r2, [r3, #0]
  lis2dw12_ctrl2_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL2, (uint8_t *) &reg, 1);
 8004a9e:	2408      	movs	r4, #8
 8004aa0:	193a      	adds	r2, r7, r4
 8004aa2:	6878      	ldr	r0, [r7, #4]
 8004aa4:	2301      	movs	r3, #1
 8004aa6:	2121      	movs	r1, #33	; 0x21
 8004aa8:	f7ff feaa 	bl	8004800 <lis2dw12_read_reg>
 8004aac:	0003      	movs	r3, r0
 8004aae:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d117      	bne.n	8004ae6 <lis2dw12_reset_set+0x56>
  {
    reg.soft_reset = val;
 8004ab6:	1cfb      	adds	r3, r7, #3
 8004ab8:	781b      	ldrb	r3, [r3, #0]
 8004aba:	2201      	movs	r2, #1
 8004abc:	4013      	ands	r3, r2
 8004abe:	b2da      	uxtb	r2, r3
 8004ac0:	193b      	adds	r3, r7, r4
 8004ac2:	2101      	movs	r1, #1
 8004ac4:	400a      	ands	r2, r1
 8004ac6:	0190      	lsls	r0, r2, #6
 8004ac8:	781a      	ldrb	r2, [r3, #0]
 8004aca:	2140      	movs	r1, #64	; 0x40
 8004acc:	438a      	bics	r2, r1
 8004ace:	1c11      	adds	r1, r2, #0
 8004ad0:	1c02      	adds	r2, r0, #0
 8004ad2:	430a      	orrs	r2, r1
 8004ad4:	701a      	strb	r2, [r3, #0]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL2, (uint8_t *) &reg, 1);
 8004ad6:	193a      	adds	r2, r7, r4
 8004ad8:	6878      	ldr	r0, [r7, #4]
 8004ada:	2301      	movs	r3, #1
 8004adc:	2121      	movs	r1, #33	; 0x21
 8004ade:	f7ff feb0 	bl	8004842 <lis2dw12_write_reg>
 8004ae2:	0003      	movs	r3, r0
 8004ae4:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8004ae6:	68fb      	ldr	r3, [r7, #12]
}
 8004ae8:	0018      	movs	r0, r3
 8004aea:	46bd      	mov	sp, r7
 8004aec:	b005      	add	sp, #20
 8004aee:	bd90      	pop	{r4, r7, pc}

08004af0 <lis2dw12_reset_get>:
  * @param  val      change the values of soft_reset in reg CTRL2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_reset_get(stmdev_ctx_t *ctx, uint8_t *val)
{
 8004af0:	b590      	push	{r4, r7, lr}
 8004af2:	b085      	sub	sp, #20
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]
 8004af8:	6039      	str	r1, [r7, #0]
  lis2dw12_ctrl2_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL2, (uint8_t *) &reg, 1);
 8004afa:	2408      	movs	r4, #8
 8004afc:	193a      	adds	r2, r7, r4
 8004afe:	6878      	ldr	r0, [r7, #4]
 8004b00:	2301      	movs	r3, #1
 8004b02:	2121      	movs	r1, #33	; 0x21
 8004b04:	f7ff fe7c 	bl	8004800 <lis2dw12_read_reg>
 8004b08:	0003      	movs	r3, r0
 8004b0a:	60fb      	str	r3, [r7, #12]
  *val = reg.soft_reset;
 8004b0c:	193b      	adds	r3, r7, r4
 8004b0e:	781b      	ldrb	r3, [r3, #0]
 8004b10:	065b      	lsls	r3, r3, #25
 8004b12:	0fdb      	lsrs	r3, r3, #31
 8004b14:	b2db      	uxtb	r3, r3
 8004b16:	001a      	movs	r2, r3
 8004b18:	683b      	ldr	r3, [r7, #0]
 8004b1a:	701a      	strb	r2, [r3, #0]

  return ret;
 8004b1c:	68fb      	ldr	r3, [r7, #12]
}
 8004b1e:	0018      	movs	r0, r3
 8004b20:	46bd      	mov	sp, r7
 8004b22:	b005      	add	sp, #20
 8004b24:	bd90      	pop	{r4, r7, pc}

08004b26 <lis2dw12_filter_path_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_filter_path_set(stmdev_ctx_t *ctx,
                                 lis2dw12_fds_t val)
{
 8004b26:	b590      	push	{r4, r7, lr}
 8004b28:	b087      	sub	sp, #28
 8004b2a:	af00      	add	r7, sp, #0
 8004b2c:	6078      	str	r0, [r7, #4]
 8004b2e:	000a      	movs	r2, r1
 8004b30:	1cfb      	adds	r3, r7, #3
 8004b32:	701a      	strb	r2, [r3, #0]
  lis2dw12_ctrl6_t ctrl6;
  lis2dw12_ctrl_reg7_t ctrl_reg7;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &ctrl6, 1);
 8004b34:	2410      	movs	r4, #16
 8004b36:	193a      	adds	r2, r7, r4
 8004b38:	6878      	ldr	r0, [r7, #4]
 8004b3a:	2301      	movs	r3, #1
 8004b3c:	2125      	movs	r1, #37	; 0x25
 8004b3e:	f7ff fe5f 	bl	8004800 <lis2dw12_read_reg>
 8004b42:	0003      	movs	r3, r0
 8004b44:	617b      	str	r3, [r7, #20]

  if (ret == 0)
 8004b46:	697b      	ldr	r3, [r7, #20]
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d119      	bne.n	8004b80 <lis2dw12_filter_path_set+0x5a>
  {
    ctrl6.fds = ((uint8_t) val & 0x10U) >> 4;
 8004b4c:	1cfb      	adds	r3, r7, #3
 8004b4e:	781b      	ldrb	r3, [r3, #0]
 8004b50:	091b      	lsrs	r3, r3, #4
 8004b52:	1c1a      	adds	r2, r3, #0
 8004b54:	2301      	movs	r3, #1
 8004b56:	4013      	ands	r3, r2
 8004b58:	b2da      	uxtb	r2, r3
 8004b5a:	193b      	adds	r3, r7, r4
 8004b5c:	2101      	movs	r1, #1
 8004b5e:	400a      	ands	r2, r1
 8004b60:	00d0      	lsls	r0, r2, #3
 8004b62:	781a      	ldrb	r2, [r3, #0]
 8004b64:	2108      	movs	r1, #8
 8004b66:	438a      	bics	r2, r1
 8004b68:	1c11      	adds	r1, r2, #0
 8004b6a:	1c02      	adds	r2, r0, #0
 8004b6c:	430a      	orrs	r2, r1
 8004b6e:	701a      	strb	r2, [r3, #0]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &ctrl6, 1);
 8004b70:	193a      	adds	r2, r7, r4
 8004b72:	6878      	ldr	r0, [r7, #4]
 8004b74:	2301      	movs	r3, #1
 8004b76:	2125      	movs	r1, #37	; 0x25
 8004b78:	f7ff fe63 	bl	8004842 <lis2dw12_write_reg>
 8004b7c:	0003      	movs	r3, r0
 8004b7e:	617b      	str	r3, [r7, #20]
  }

  if (ret == 0)
 8004b80:	697b      	ldr	r3, [r7, #20]
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d108      	bne.n	8004b98 <lis2dw12_filter_path_set+0x72>
  {
    ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL_REG7,
 8004b86:	230c      	movs	r3, #12
 8004b88:	18fa      	adds	r2, r7, r3
 8004b8a:	6878      	ldr	r0, [r7, #4]
 8004b8c:	2301      	movs	r3, #1
 8004b8e:	213f      	movs	r1, #63	; 0x3f
 8004b90:	f7ff fe36 	bl	8004800 <lis2dw12_read_reg>
 8004b94:	0003      	movs	r3, r0
 8004b96:	617b      	str	r3, [r7, #20]
                            (uint8_t *) &ctrl_reg7, 1);
  }

  if (ret == 0)
 8004b98:	697b      	ldr	r3, [r7, #20]
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d118      	bne.n	8004bd0 <lis2dw12_filter_path_set+0xaa>
  {
    ctrl_reg7.usr_off_on_out = (uint8_t) val & 0x01U;
 8004b9e:	1cfb      	adds	r3, r7, #3
 8004ba0:	781b      	ldrb	r3, [r3, #0]
 8004ba2:	2201      	movs	r2, #1
 8004ba4:	4013      	ands	r3, r2
 8004ba6:	b2da      	uxtb	r2, r3
 8004ba8:	240c      	movs	r4, #12
 8004baa:	193b      	adds	r3, r7, r4
 8004bac:	2101      	movs	r1, #1
 8004bae:	400a      	ands	r2, r1
 8004bb0:	0110      	lsls	r0, r2, #4
 8004bb2:	781a      	ldrb	r2, [r3, #0]
 8004bb4:	2110      	movs	r1, #16
 8004bb6:	438a      	bics	r2, r1
 8004bb8:	1c11      	adds	r1, r2, #0
 8004bba:	1c02      	adds	r2, r0, #0
 8004bbc:	430a      	orrs	r2, r1
 8004bbe:	701a      	strb	r2, [r3, #0]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL_REG7,
 8004bc0:	193a      	adds	r2, r7, r4
 8004bc2:	6878      	ldr	r0, [r7, #4]
 8004bc4:	2301      	movs	r3, #1
 8004bc6:	213f      	movs	r1, #63	; 0x3f
 8004bc8:	f7ff fe3b 	bl	8004842 <lis2dw12_write_reg>
 8004bcc:	0003      	movs	r3, r0
 8004bce:	617b      	str	r3, [r7, #20]
                             (uint8_t *) &ctrl_reg7, 1);
  }

  return ret;
 8004bd0:	697b      	ldr	r3, [r7, #20]
}
 8004bd2:	0018      	movs	r0, r3
 8004bd4:	46bd      	mov	sp, r7
 8004bd6:	b007      	add	sp, #28
 8004bd8:	bd90      	pop	{r4, r7, pc}

08004bda <lis2dw12_pin_int1_route_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_pin_int1_route_set(stmdev_ctx_t *ctx,
                                    lis2dw12_ctrl4_int1_pad_ctrl_t *val)
{
 8004bda:	b580      	push	{r7, lr}
 8004bdc:	b086      	sub	sp, #24
 8004bde:	af00      	add	r7, sp, #0
 8004be0:	6078      	str	r0, [r7, #4]
 8004be2:	6039      	str	r1, [r7, #0]
  lis2dw12_ctrl5_int2_pad_ctrl_t ctrl5_int2_pad_ctrl;
  lis2dw12_ctrl_reg7_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL5_INT2_PAD_CTRL,
 8004be4:	2310      	movs	r3, #16
 8004be6:	18fa      	adds	r2, r7, r3
 8004be8:	6878      	ldr	r0, [r7, #4]
 8004bea:	2301      	movs	r3, #1
 8004bec:	2124      	movs	r1, #36	; 0x24
 8004bee:	f7ff fe07 	bl	8004800 <lis2dw12_read_reg>
 8004bf2:	0003      	movs	r3, r0
 8004bf4:	617b      	str	r3, [r7, #20]
                          (uint8_t *)&ctrl5_int2_pad_ctrl, 1);

  if (ret == 0)
 8004bf6:	697b      	ldr	r3, [r7, #20]
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d108      	bne.n	8004c0e <lis2dw12_pin_int1_route_set+0x34>
  {
    ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL_REG7, (uint8_t *) &reg, 1);
 8004bfc:	230c      	movs	r3, #12
 8004bfe:	18fa      	adds	r2, r7, r3
 8004c00:	6878      	ldr	r0, [r7, #4]
 8004c02:	2301      	movs	r3, #1
 8004c04:	213f      	movs	r1, #63	; 0x3f
 8004c06:	f7ff fdfb 	bl	8004800 <lis2dw12_read_reg>
 8004c0a:	0003      	movs	r3, r0
 8004c0c:	617b      	str	r3, [r7, #20]
  }

  if (ret == 0)
 8004c0e:	697b      	ldr	r3, [r7, #20]
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d146      	bne.n	8004ca2 <lis2dw12_pin_int1_route_set+0xc8>
  {
    if ((val->int1_tap |
 8004c14:	683b      	ldr	r3, [r7, #0]
 8004c16:	781b      	ldrb	r3, [r3, #0]
 8004c18:	071b      	lsls	r3, r3, #28
 8004c1a:	0fdb      	lsrs	r3, r3, #31
 8004c1c:	b2da      	uxtb	r2, r3
         val->int1_ff |
 8004c1e:	683b      	ldr	r3, [r7, #0]
 8004c20:	781b      	ldrb	r3, [r3, #0]
 8004c22:	06db      	lsls	r3, r3, #27
 8004c24:	0fdb      	lsrs	r3, r3, #31
 8004c26:	b2db      	uxtb	r3, r3
    if ((val->int1_tap |
 8004c28:	4313      	orrs	r3, r2
 8004c2a:	b2da      	uxtb	r2, r3
         val->int1_wu |
 8004c2c:	683b      	ldr	r3, [r7, #0]
 8004c2e:	781b      	ldrb	r3, [r3, #0]
 8004c30:	069b      	lsls	r3, r3, #26
 8004c32:	0fdb      	lsrs	r3, r3, #31
 8004c34:	b2db      	uxtb	r3, r3
         val->int1_ff |
 8004c36:	4313      	orrs	r3, r2
 8004c38:	b2da      	uxtb	r2, r3
         val->int1_single_tap |
 8004c3a:	683b      	ldr	r3, [r7, #0]
 8004c3c:	781b      	ldrb	r3, [r3, #0]
 8004c3e:	065b      	lsls	r3, r3, #25
 8004c40:	0fdb      	lsrs	r3, r3, #31
 8004c42:	b2db      	uxtb	r3, r3
         val->int1_wu |
 8004c44:	4313      	orrs	r3, r2
 8004c46:	b2da      	uxtb	r2, r3
         val->int1_6d |
 8004c48:	683b      	ldr	r3, [r7, #0]
 8004c4a:	781b      	ldrb	r3, [r3, #0]
 8004c4c:	061b      	lsls	r3, r3, #24
 8004c4e:	0fdb      	lsrs	r3, r3, #31
 8004c50:	b2db      	uxtb	r3, r3
         val->int1_single_tap |
 8004c52:	4313      	orrs	r3, r2
 8004c54:	b2da      	uxtb	r2, r3
         ctrl5_int2_pad_ctrl.int2_sleep_state |
 8004c56:	2110      	movs	r1, #16
 8004c58:	187b      	adds	r3, r7, r1
 8004c5a:	781b      	ldrb	r3, [r3, #0]
 8004c5c:	061b      	lsls	r3, r3, #24
 8004c5e:	0fdb      	lsrs	r3, r3, #31
 8004c60:	b2db      	uxtb	r3, r3
         val->int1_6d |
 8004c62:	4313      	orrs	r3, r2
 8004c64:	b2da      	uxtb	r2, r3
         ctrl5_int2_pad_ctrl.int2_sleep_chg) != PROPERTY_DISABLE)
 8004c66:	187b      	adds	r3, r7, r1
 8004c68:	781b      	ldrb	r3, [r3, #0]
 8004c6a:	065b      	lsls	r3, r3, #25
 8004c6c:	0fdb      	lsrs	r3, r3, #31
 8004c6e:	b2db      	uxtb	r3, r3
         ctrl5_int2_pad_ctrl.int2_sleep_state |
 8004c70:	4313      	orrs	r3, r2
 8004c72:	b2db      	uxtb	r3, r3
    if ((val->int1_tap |
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d006      	beq.n	8004c86 <lis2dw12_pin_int1_route_set+0xac>
    {
      reg.interrupts_enable = PROPERTY_ENABLE;
 8004c78:	230c      	movs	r3, #12
 8004c7a:	18fb      	adds	r3, r7, r3
 8004c7c:	781a      	ldrb	r2, [r3, #0]
 8004c7e:	2120      	movs	r1, #32
 8004c80:	430a      	orrs	r2, r1
 8004c82:	701a      	strb	r2, [r3, #0]
 8004c84:	e005      	b.n	8004c92 <lis2dw12_pin_int1_route_set+0xb8>
    }

    else
    {
      reg.interrupts_enable = PROPERTY_DISABLE;
 8004c86:	230c      	movs	r3, #12
 8004c88:	18fb      	adds	r3, r7, r3
 8004c8a:	781a      	ldrb	r2, [r3, #0]
 8004c8c:	2120      	movs	r1, #32
 8004c8e:	438a      	bics	r2, r1
 8004c90:	701a      	strb	r2, [r3, #0]
    }

    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL4_INT1_PAD_CTRL,
 8004c92:	683a      	ldr	r2, [r7, #0]
 8004c94:	6878      	ldr	r0, [r7, #4]
 8004c96:	2301      	movs	r3, #1
 8004c98:	2123      	movs	r1, #35	; 0x23
 8004c9a:	f7ff fdd2 	bl	8004842 <lis2dw12_write_reg>
 8004c9e:	0003      	movs	r3, r0
 8004ca0:	617b      	str	r3, [r7, #20]
                             (uint8_t *) val, 1);
  }

  if (ret == 0)
 8004ca2:	697b      	ldr	r3, [r7, #20]
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d108      	bne.n	8004cba <lis2dw12_pin_int1_route_set+0xe0>
  {
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL_REG7, (uint8_t *) &reg, 1);
 8004ca8:	230c      	movs	r3, #12
 8004caa:	18fa      	adds	r2, r7, r3
 8004cac:	6878      	ldr	r0, [r7, #4]
 8004cae:	2301      	movs	r3, #1
 8004cb0:	213f      	movs	r1, #63	; 0x3f
 8004cb2:	f7ff fdc6 	bl	8004842 <lis2dw12_write_reg>
 8004cb6:	0003      	movs	r3, r0
 8004cb8:	617b      	str	r3, [r7, #20]
  }

  return ret;
 8004cba:	697b      	ldr	r3, [r7, #20]
}
 8004cbc:	0018      	movs	r0, r3
 8004cbe:	46bd      	mov	sp, r7
 8004cc0:	b006      	add	sp, #24
 8004cc2:	bd80      	pop	{r7, pc}

08004cc4 <lis2dw12_pin_int1_route_get>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_pin_int1_route_get(stmdev_ctx_t *ctx,
                                    lis2dw12_ctrl4_int1_pad_ctrl_t *val)
{
 8004cc4:	b580      	push	{r7, lr}
 8004cc6:	b084      	sub	sp, #16
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	6078      	str	r0, [r7, #4]
 8004ccc:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL4_INT1_PAD_CTRL,
 8004cce:	683a      	ldr	r2, [r7, #0]
 8004cd0:	6878      	ldr	r0, [r7, #4]
 8004cd2:	2301      	movs	r3, #1
 8004cd4:	2123      	movs	r1, #35	; 0x23
 8004cd6:	f7ff fd93 	bl	8004800 <lis2dw12_read_reg>
 8004cda:	0003      	movs	r3, r0
 8004cdc:	60fb      	str	r3, [r7, #12]
                          (uint8_t *) val, 1);

  return ret;
 8004cde:	68fb      	ldr	r3, [r7, #12]
}
 8004ce0:	0018      	movs	r0, r3
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	b004      	add	sp, #16
 8004ce6:	bd80      	pop	{r7, pc}

08004ce8 <lis2dw12_wkup_threshold_set>:
  * @param  val      change the values of wk_ths in reg WAKE_UP_THS
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_wkup_threshold_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8004ce8:	b590      	push	{r4, r7, lr}
 8004cea:	b085      	sub	sp, #20
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	6078      	str	r0, [r7, #4]
 8004cf0:	000a      	movs	r2, r1
 8004cf2:	1cfb      	adds	r3, r7, #3
 8004cf4:	701a      	strb	r2, [r3, #0]
  lis2dw12_wake_up_ths_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_WAKE_UP_THS, (uint8_t *) &reg, 1);
 8004cf6:	2408      	movs	r4, #8
 8004cf8:	193a      	adds	r2, r7, r4
 8004cfa:	6878      	ldr	r0, [r7, #4]
 8004cfc:	2301      	movs	r3, #1
 8004cfe:	2134      	movs	r1, #52	; 0x34
 8004d00:	f7ff fd7e 	bl	8004800 <lis2dw12_read_reg>
 8004d04:	0003      	movs	r3, r0
 8004d06:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d117      	bne.n	8004d3e <lis2dw12_wkup_threshold_set+0x56>
  {
    reg.wk_ths = val;
 8004d0e:	1cfb      	adds	r3, r7, #3
 8004d10:	781b      	ldrb	r3, [r3, #0]
 8004d12:	223f      	movs	r2, #63	; 0x3f
 8004d14:	4013      	ands	r3, r2
 8004d16:	b2da      	uxtb	r2, r3
 8004d18:	193b      	adds	r3, r7, r4
 8004d1a:	213f      	movs	r1, #63	; 0x3f
 8004d1c:	400a      	ands	r2, r1
 8004d1e:	0010      	movs	r0, r2
 8004d20:	781a      	ldrb	r2, [r3, #0]
 8004d22:	213f      	movs	r1, #63	; 0x3f
 8004d24:	438a      	bics	r2, r1
 8004d26:	1c11      	adds	r1, r2, #0
 8004d28:	1c02      	adds	r2, r0, #0
 8004d2a:	430a      	orrs	r2, r1
 8004d2c:	701a      	strb	r2, [r3, #0]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_WAKE_UP_THS, (uint8_t *) &reg, 1);
 8004d2e:	193a      	adds	r2, r7, r4
 8004d30:	6878      	ldr	r0, [r7, #4]
 8004d32:	2301      	movs	r3, #1
 8004d34:	2134      	movs	r1, #52	; 0x34
 8004d36:	f7ff fd84 	bl	8004842 <lis2dw12_write_reg>
 8004d3a:	0003      	movs	r3, r0
 8004d3c:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8004d3e:	68fb      	ldr	r3, [r7, #12]
}
 8004d40:	0018      	movs	r0, r3
 8004d42:	46bd      	mov	sp, r7
 8004d44:	b005      	add	sp, #20
 8004d46:	bd90      	pop	{r4, r7, pc}

08004d48 <lis2dw12_wkup_dur_set>:
  * @param  val      change the values of wake_dur in reg WAKE_UP_DUR
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_wkup_dur_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8004d48:	b590      	push	{r4, r7, lr}
 8004d4a:	b085      	sub	sp, #20
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	6078      	str	r0, [r7, #4]
 8004d50:	000a      	movs	r2, r1
 8004d52:	1cfb      	adds	r3, r7, #3
 8004d54:	701a      	strb	r2, [r3, #0]
  lis2dw12_wake_up_dur_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_WAKE_UP_DUR, (uint8_t *) &reg, 1);
 8004d56:	2408      	movs	r4, #8
 8004d58:	193a      	adds	r2, r7, r4
 8004d5a:	6878      	ldr	r0, [r7, #4]
 8004d5c:	2301      	movs	r3, #1
 8004d5e:	2135      	movs	r1, #53	; 0x35
 8004d60:	f7ff fd4e 	bl	8004800 <lis2dw12_read_reg>
 8004d64:	0003      	movs	r3, r0
 8004d66:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d117      	bne.n	8004d9e <lis2dw12_wkup_dur_set+0x56>
  {
    reg.wake_dur = val;
 8004d6e:	1cfb      	adds	r3, r7, #3
 8004d70:	781b      	ldrb	r3, [r3, #0]
 8004d72:	2203      	movs	r2, #3
 8004d74:	4013      	ands	r3, r2
 8004d76:	b2da      	uxtb	r2, r3
 8004d78:	193b      	adds	r3, r7, r4
 8004d7a:	2103      	movs	r1, #3
 8004d7c:	400a      	ands	r2, r1
 8004d7e:	0150      	lsls	r0, r2, #5
 8004d80:	781a      	ldrb	r2, [r3, #0]
 8004d82:	2160      	movs	r1, #96	; 0x60
 8004d84:	438a      	bics	r2, r1
 8004d86:	1c11      	adds	r1, r2, #0
 8004d88:	1c02      	adds	r2, r0, #0
 8004d8a:	430a      	orrs	r2, r1
 8004d8c:	701a      	strb	r2, [r3, #0]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_WAKE_UP_DUR, (uint8_t *) &reg, 1);
 8004d8e:	193a      	adds	r2, r7, r4
 8004d90:	6878      	ldr	r0, [r7, #4]
 8004d92:	2301      	movs	r3, #1
 8004d94:	2135      	movs	r1, #53	; 0x35
 8004d96:	f7ff fd54 	bl	8004842 <lis2dw12_write_reg>
 8004d9a:	0003      	movs	r3, r0
 8004d9c:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8004d9e:	68fb      	ldr	r3, [r7, #12]
}
 8004da0:	0018      	movs	r0, r3
 8004da2:	46bd      	mov	sp, r7
 8004da4:	b005      	add	sp, #20
 8004da6:	bd90      	pop	{r4, r7, pc}

08004da8 <my_lis2dw12_init>:
 */

#include "my_lis2dw12.h"

bool my_lis2dw12_init ( stmdev_ctx_t* ctx )
{
 8004da8:	b590      	push	{r4, r7, lr}
 8004daa:	b085      	sub	sp, #20
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	6078      	str	r0, [r7, #4]
	uint8_t rst = 1 ;
 8004db0:	230f      	movs	r3, #15
 8004db2:	18fb      	adds	r3, r7, r3
 8004db4:	2201      	movs	r2, #1
 8004db6:	701a      	strb	r2, [r3, #0]

	/*Restore default configuration */
	lis2dw12_reset_set ( ctx , PROPERTY_ENABLE ) ;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2101      	movs	r1, #1
 8004dbc:	0018      	movs	r0, r3
 8004dbe:	f7ff fe67 	bl	8004a90 <lis2dw12_reset_set>
	do {
		lis2dw12_reset_get ( ctx, &rst ) ;
 8004dc2:	240f      	movs	r4, #15
 8004dc4:	193a      	adds	r2, r7, r4
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	0011      	movs	r1, r2
 8004dca:	0018      	movs	r0, r3
 8004dcc:	f7ff fe90 	bl	8004af0 <lis2dw12_reset_get>
	} while ( rst ) ;
 8004dd0:	193b      	adds	r3, r7, r4
 8004dd2:	781b      	ldrb	r3, [r3, #0]
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d1f4      	bne.n	8004dc2 <my_lis2dw12_init+0x1a>

	if ( my_lis2dw12_get_id ( ctx ) == LIS2DW12_ID )
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	0018      	movs	r0, r3
 8004ddc:	f000 f828 	bl	8004e30 <my_lis2dw12_get_id>
 8004de0:	0003      	movs	r3, r0
 8004de2:	2b44      	cmp	r3, #68	; 0x44
 8004de4:	d11f      	bne.n	8004e26 <my_lis2dw12_init+0x7e>
	{
		lis2dw12_full_scale_set 	( ctx , LIS2DW12_2g ) ;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	2100      	movs	r1, #0
 8004dea:	0018      	movs	r0, r3
 8004dec:	f7ff fe0e 	bl	8004a0c <lis2dw12_full_scale_set>
		lis2dw12_power_mode_set 	( ctx , LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit ) ;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	2110      	movs	r1, #16
 8004df4:	0018      	movs	r0, r3
 8004df6:	f7ff fd45 	bl	8004884 <lis2dw12_power_mode_set>
		lis2dw12_data_rate_set 		( ctx , LIS2DW12_XL_ODR_200Hz ) ;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	2106      	movs	r1, #6
 8004dfe:	0018      	movs	r0, r3
 8004e00:	f7ff fdac 	bl	800495c <lis2dw12_data_rate_set>
		lis2dw12_filter_path_set 	( ctx , LIS2DW12_HIGH_PASS_ON_OUT ) ;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2110      	movs	r1, #16
 8004e08:	0018      	movs	r0, r3
 8004e0a:	f7ff fe8c 	bl	8004b26 <lis2dw12_filter_path_set>
		lis2dw12_wkup_dur_set		( ctx , 0 ) ;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	2100      	movs	r1, #0
 8004e12:	0018      	movs	r0, r3
 8004e14:	f7ff ff98 	bl	8004d48 <lis2dw12_wkup_dur_set>
		lis2dw12_wkup_threshold_set	( ctx, 2 ) ;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	2102      	movs	r1, #2
 8004e1c:	0018      	movs	r0, r3
 8004e1e:	f7ff ff63 	bl	8004ce8 <lis2dw12_wkup_threshold_set>
		return true ;
 8004e22:	2301      	movs	r3, #1
 8004e24:	e000      	b.n	8004e28 <my_lis2dw12_init+0x80>
	}

	return false ;
 8004e26:	2300      	movs	r3, #0

}
 8004e28:	0018      	movs	r0, r3
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	b005      	add	sp, #20
 8004e2e:	bd90      	pop	{r4, r7, pc}

08004e30 <my_lis2dw12_get_id>:

uint8_t my_lis2dw12_get_id ( stmdev_ctx_t* ctx )
{
 8004e30:	b590      	push	{r4, r7, lr}
 8004e32:	b085      	sub	sp, #20
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	6078      	str	r0, [r7, #4]
	uint8_t id = 0 ;
 8004e38:	210f      	movs	r1, #15
 8004e3a:	187b      	adds	r3, r7, r1
 8004e3c:	2200      	movs	r2, #0
 8004e3e:	701a      	strb	r2, [r3, #0]
	lis2dw12_device_id_get ( ctx , &id ) ;
 8004e40:	000c      	movs	r4, r1
 8004e42:	187a      	adds	r2, r7, r1
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	0011      	movs	r1, r2
 8004e48:	0018      	movs	r0, r3
 8004e4a:	f7ff fe0f 	bl	8004a6c <lis2dw12_device_id_get>
	return id ;
 8004e4e:	193b      	adds	r3, r7, r4
 8004e50:	781b      	ldrb	r3, [r3, #0]
}
 8004e52:	0018      	movs	r0, r3
 8004e54:	46bd      	mov	sp, r7
 8004e56:	b005      	add	sp, #20
 8004e58:	bd90      	pop	{r4, r7, pc}

08004e5a <my_lis2dw12_int1_wu_enable>:

void my_lis2dw12_int1_wu_enable ( stmdev_ctx_t* ctx )
{
 8004e5a:	b590      	push	{r4, r7, lr}
 8004e5c:	b085      	sub	sp, #20
 8004e5e:	af00      	add	r7, sp, #0
 8004e60:	6078      	str	r0, [r7, #4]
	lis2dw12_reg_t int_route ;
	lis2dw12_pin_int1_route_get	( ctx, &int_route.ctrl4_int1_pad_ctrl ) ;
 8004e62:	240c      	movs	r4, #12
 8004e64:	193a      	adds	r2, r7, r4
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	0011      	movs	r1, r2
 8004e6a:	0018      	movs	r0, r3
 8004e6c:	f7ff ff2a 	bl	8004cc4 <lis2dw12_pin_int1_route_get>
	int_route.ctrl4_int1_pad_ctrl.int1_wu = PROPERTY_ENABLE ;
 8004e70:	0020      	movs	r0, r4
 8004e72:	183b      	adds	r3, r7, r0
 8004e74:	781a      	ldrb	r2, [r3, #0]
 8004e76:	2120      	movs	r1, #32
 8004e78:	430a      	orrs	r2, r1
 8004e7a:	701a      	strb	r2, [r3, #0]
	lis2dw12_pin_int1_route_set	( ctx , &int_route.ctrl4_int1_pad_ctrl ) ;
 8004e7c:	183a      	adds	r2, r7, r0
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	0011      	movs	r1, r2
 8004e82:	0018      	movs	r0, r3
 8004e84:	f7ff fea9 	bl	8004bda <lis2dw12_pin_int1_route_set>
}
 8004e88:	46c0      	nop			; (mov r8, r8)
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	b005      	add	sp, #20
 8004e8e:	bd90      	pop	{r4, r7, pc}

08004e90 <memset>:
 8004e90:	0003      	movs	r3, r0
 8004e92:	1882      	adds	r2, r0, r2
 8004e94:	4293      	cmp	r3, r2
 8004e96:	d100      	bne.n	8004e9a <memset+0xa>
 8004e98:	4770      	bx	lr
 8004e9a:	7019      	strb	r1, [r3, #0]
 8004e9c:	3301      	adds	r3, #1
 8004e9e:	e7f9      	b.n	8004e94 <memset+0x4>

08004ea0 <__libc_init_array>:
 8004ea0:	b570      	push	{r4, r5, r6, lr}
 8004ea2:	2600      	movs	r6, #0
 8004ea4:	4c0c      	ldr	r4, [pc, #48]	; (8004ed8 <__libc_init_array+0x38>)
 8004ea6:	4d0d      	ldr	r5, [pc, #52]	; (8004edc <__libc_init_array+0x3c>)
 8004ea8:	1b64      	subs	r4, r4, r5
 8004eaa:	10a4      	asrs	r4, r4, #2
 8004eac:	42a6      	cmp	r6, r4
 8004eae:	d109      	bne.n	8004ec4 <__libc_init_array+0x24>
 8004eb0:	2600      	movs	r6, #0
 8004eb2:	f000 f819 	bl	8004ee8 <_init>
 8004eb6:	4c0a      	ldr	r4, [pc, #40]	; (8004ee0 <__libc_init_array+0x40>)
 8004eb8:	4d0a      	ldr	r5, [pc, #40]	; (8004ee4 <__libc_init_array+0x44>)
 8004eba:	1b64      	subs	r4, r4, r5
 8004ebc:	10a4      	asrs	r4, r4, #2
 8004ebe:	42a6      	cmp	r6, r4
 8004ec0:	d105      	bne.n	8004ece <__libc_init_array+0x2e>
 8004ec2:	bd70      	pop	{r4, r5, r6, pc}
 8004ec4:	00b3      	lsls	r3, r6, #2
 8004ec6:	58eb      	ldr	r3, [r5, r3]
 8004ec8:	4798      	blx	r3
 8004eca:	3601      	adds	r6, #1
 8004ecc:	e7ee      	b.n	8004eac <__libc_init_array+0xc>
 8004ece:	00b3      	lsls	r3, r6, #2
 8004ed0:	58eb      	ldr	r3, [r5, r3]
 8004ed2:	4798      	blx	r3
 8004ed4:	3601      	adds	r6, #1
 8004ed6:	e7f2      	b.n	8004ebe <__libc_init_array+0x1e>
 8004ed8:	08005074 	.word	0x08005074
 8004edc:	08005074 	.word	0x08005074
 8004ee0:	08005078 	.word	0x08005078
 8004ee4:	08005074 	.word	0x08005074

08004ee8 <_init>:
 8004ee8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004eea:	46c0      	nop			; (mov r8, r8)
 8004eec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004eee:	bc08      	pop	{r3}
 8004ef0:	469e      	mov	lr, r3
 8004ef2:	4770      	bx	lr

08004ef4 <_fini>:
 8004ef4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ef6:	46c0      	nop			; (mov r8, r8)
 8004ef8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004efa:	bc08      	pop	{r3}
 8004efc:	469e      	mov	lr, r3
 8004efe:	4770      	bx	lr
