
TSAT_TRACKER_P-P.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003034  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a4  080030f0  080030f0  000130f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003194  08003194  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08003194  08003194  00013194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800319c  0800319c  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800319c  0800319c  0001319c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080031a0  080031a0  000131a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080031a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000014c  20000010  080031b4  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000015c  080031b4  0002015c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000af51  00000000  00000000  0002007b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001a32  00000000  00000000  0002afcc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000008b0  00000000  00000000  0002ca00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000006b6  00000000  00000000  0002d2b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001afcd  00000000  00000000  0002d966  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000b4ac  00000000  00000000  00048933  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000af9f6  00000000  00000000  00053ddf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001e28  00000000  00000000  001037d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000057  00000000  00000000  00105600  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000010 	.word	0x20000010
 80000dc:	00000000 	.word	0x00000000
 80000e0:	080030d8 	.word	0x080030d8

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000014 	.word	0x20000014
 8000100:	080030d8 	.word	0x080030d8

08000104 <strlen>:
 8000104:	2300      	movs	r3, #0
 8000106:	5cc2      	ldrb	r2, [r0, r3]
 8000108:	3301      	adds	r3, #1
 800010a:	2a00      	cmp	r2, #0
 800010c:	d1fb      	bne.n	8000106 <strlen+0x2>
 800010e:	1e58      	subs	r0, r3, #1
 8000110:	4770      	bx	lr
	...

08000114 <__udivsi3>:
 8000114:	2200      	movs	r2, #0
 8000116:	0843      	lsrs	r3, r0, #1
 8000118:	428b      	cmp	r3, r1
 800011a:	d374      	bcc.n	8000206 <__udivsi3+0xf2>
 800011c:	0903      	lsrs	r3, r0, #4
 800011e:	428b      	cmp	r3, r1
 8000120:	d35f      	bcc.n	80001e2 <__udivsi3+0xce>
 8000122:	0a03      	lsrs	r3, r0, #8
 8000124:	428b      	cmp	r3, r1
 8000126:	d344      	bcc.n	80001b2 <__udivsi3+0x9e>
 8000128:	0b03      	lsrs	r3, r0, #12
 800012a:	428b      	cmp	r3, r1
 800012c:	d328      	bcc.n	8000180 <__udivsi3+0x6c>
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d30d      	bcc.n	8000150 <__udivsi3+0x3c>
 8000134:	22ff      	movs	r2, #255	; 0xff
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	ba12      	rev	r2, r2
 800013a:	0c03      	lsrs	r3, r0, #16
 800013c:	428b      	cmp	r3, r1
 800013e:	d302      	bcc.n	8000146 <__udivsi3+0x32>
 8000140:	1212      	asrs	r2, r2, #8
 8000142:	0209      	lsls	r1, r1, #8
 8000144:	d065      	beq.n	8000212 <__udivsi3+0xfe>
 8000146:	0b03      	lsrs	r3, r0, #12
 8000148:	428b      	cmp	r3, r1
 800014a:	d319      	bcc.n	8000180 <__udivsi3+0x6c>
 800014c:	e000      	b.n	8000150 <__udivsi3+0x3c>
 800014e:	0a09      	lsrs	r1, r1, #8
 8000150:	0bc3      	lsrs	r3, r0, #15
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x46>
 8000156:	03cb      	lsls	r3, r1, #15
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b83      	lsrs	r3, r0, #14
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x52>
 8000162:	038b      	lsls	r3, r1, #14
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b43      	lsrs	r3, r0, #13
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x5e>
 800016e:	034b      	lsls	r3, r1, #13
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b03      	lsrs	r3, r0, #12
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x6a>
 800017a:	030b      	lsls	r3, r1, #12
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0ac3      	lsrs	r3, r0, #11
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x76>
 8000186:	02cb      	lsls	r3, r1, #11
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a83      	lsrs	r3, r0, #10
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x82>
 8000192:	028b      	lsls	r3, r1, #10
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a43      	lsrs	r3, r0, #9
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x8e>
 800019e:	024b      	lsls	r3, r1, #9
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a03      	lsrs	r3, r0, #8
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x9a>
 80001aa:	020b      	lsls	r3, r1, #8
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	d2cd      	bcs.n	800014e <__udivsi3+0x3a>
 80001b2:	09c3      	lsrs	r3, r0, #7
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xa8>
 80001b8:	01cb      	lsls	r3, r1, #7
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0983      	lsrs	r3, r0, #6
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xb4>
 80001c4:	018b      	lsls	r3, r1, #6
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0943      	lsrs	r3, r0, #5
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xc0>
 80001d0:	014b      	lsls	r3, r1, #5
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0903      	lsrs	r3, r0, #4
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xcc>
 80001dc:	010b      	lsls	r3, r1, #4
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	08c3      	lsrs	r3, r0, #3
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xd8>
 80001e8:	00cb      	lsls	r3, r1, #3
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0883      	lsrs	r3, r0, #2
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xe4>
 80001f4:	008b      	lsls	r3, r1, #2
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	0843      	lsrs	r3, r0, #1
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xf0>
 8000200:	004b      	lsls	r3, r1, #1
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	1a41      	subs	r1, r0, r1
 8000208:	d200      	bcs.n	800020c <__udivsi3+0xf8>
 800020a:	4601      	mov	r1, r0
 800020c:	4152      	adcs	r2, r2
 800020e:	4610      	mov	r0, r2
 8000210:	4770      	bx	lr
 8000212:	e7ff      	b.n	8000214 <__udivsi3+0x100>
 8000214:	b501      	push	{r0, lr}
 8000216:	2000      	movs	r0, #0
 8000218:	f000 f8f0 	bl	80003fc <__aeabi_idiv0>
 800021c:	bd02      	pop	{r1, pc}
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uidivmod>:
 8000220:	2900      	cmp	r1, #0
 8000222:	d0f7      	beq.n	8000214 <__udivsi3+0x100>
 8000224:	e776      	b.n	8000114 <__udivsi3>
 8000226:	4770      	bx	lr

08000228 <__divsi3>:
 8000228:	4603      	mov	r3, r0
 800022a:	430b      	orrs	r3, r1
 800022c:	d47f      	bmi.n	800032e <__divsi3+0x106>
 800022e:	2200      	movs	r2, #0
 8000230:	0843      	lsrs	r3, r0, #1
 8000232:	428b      	cmp	r3, r1
 8000234:	d374      	bcc.n	8000320 <__divsi3+0xf8>
 8000236:	0903      	lsrs	r3, r0, #4
 8000238:	428b      	cmp	r3, r1
 800023a:	d35f      	bcc.n	80002fc <__divsi3+0xd4>
 800023c:	0a03      	lsrs	r3, r0, #8
 800023e:	428b      	cmp	r3, r1
 8000240:	d344      	bcc.n	80002cc <__divsi3+0xa4>
 8000242:	0b03      	lsrs	r3, r0, #12
 8000244:	428b      	cmp	r3, r1
 8000246:	d328      	bcc.n	800029a <__divsi3+0x72>
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d30d      	bcc.n	800026a <__divsi3+0x42>
 800024e:	22ff      	movs	r2, #255	; 0xff
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	ba12      	rev	r2, r2
 8000254:	0c03      	lsrs	r3, r0, #16
 8000256:	428b      	cmp	r3, r1
 8000258:	d302      	bcc.n	8000260 <__divsi3+0x38>
 800025a:	1212      	asrs	r2, r2, #8
 800025c:	0209      	lsls	r1, r1, #8
 800025e:	d065      	beq.n	800032c <__divsi3+0x104>
 8000260:	0b03      	lsrs	r3, r0, #12
 8000262:	428b      	cmp	r3, r1
 8000264:	d319      	bcc.n	800029a <__divsi3+0x72>
 8000266:	e000      	b.n	800026a <__divsi3+0x42>
 8000268:	0a09      	lsrs	r1, r1, #8
 800026a:	0bc3      	lsrs	r3, r0, #15
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x4c>
 8000270:	03cb      	lsls	r3, r1, #15
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b83      	lsrs	r3, r0, #14
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x58>
 800027c:	038b      	lsls	r3, r1, #14
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b43      	lsrs	r3, r0, #13
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x64>
 8000288:	034b      	lsls	r3, r1, #13
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0b03      	lsrs	r3, r0, #12
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x70>
 8000294:	030b      	lsls	r3, r1, #12
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0ac3      	lsrs	r3, r0, #11
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x7c>
 80002a0:	02cb      	lsls	r3, r1, #11
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a83      	lsrs	r3, r0, #10
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x88>
 80002ac:	028b      	lsls	r3, r1, #10
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a43      	lsrs	r3, r0, #9
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x94>
 80002b8:	024b      	lsls	r3, r1, #9
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0a03      	lsrs	r3, r0, #8
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0xa0>
 80002c4:	020b      	lsls	r3, r1, #8
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	d2cd      	bcs.n	8000268 <__divsi3+0x40>
 80002cc:	09c3      	lsrs	r3, r0, #7
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xae>
 80002d2:	01cb      	lsls	r3, r1, #7
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0983      	lsrs	r3, r0, #6
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xba>
 80002de:	018b      	lsls	r3, r1, #6
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0943      	lsrs	r3, r0, #5
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xc6>
 80002ea:	014b      	lsls	r3, r1, #5
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	0903      	lsrs	r3, r0, #4
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xd2>
 80002f6:	010b      	lsls	r3, r1, #4
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	08c3      	lsrs	r3, r0, #3
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xde>
 8000302:	00cb      	lsls	r3, r1, #3
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0883      	lsrs	r3, r0, #2
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xea>
 800030e:	008b      	lsls	r3, r1, #2
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	0843      	lsrs	r3, r0, #1
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xf6>
 800031a:	004b      	lsls	r3, r1, #1
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	1a41      	subs	r1, r0, r1
 8000322:	d200      	bcs.n	8000326 <__divsi3+0xfe>
 8000324:	4601      	mov	r1, r0
 8000326:	4152      	adcs	r2, r2
 8000328:	4610      	mov	r0, r2
 800032a:	4770      	bx	lr
 800032c:	e05d      	b.n	80003ea <__divsi3+0x1c2>
 800032e:	0fca      	lsrs	r2, r1, #31
 8000330:	d000      	beq.n	8000334 <__divsi3+0x10c>
 8000332:	4249      	negs	r1, r1
 8000334:	1003      	asrs	r3, r0, #32
 8000336:	d300      	bcc.n	800033a <__divsi3+0x112>
 8000338:	4240      	negs	r0, r0
 800033a:	4053      	eors	r3, r2
 800033c:	2200      	movs	r2, #0
 800033e:	469c      	mov	ip, r3
 8000340:	0903      	lsrs	r3, r0, #4
 8000342:	428b      	cmp	r3, r1
 8000344:	d32d      	bcc.n	80003a2 <__divsi3+0x17a>
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d312      	bcc.n	8000372 <__divsi3+0x14a>
 800034c:	22fc      	movs	r2, #252	; 0xfc
 800034e:	0189      	lsls	r1, r1, #6
 8000350:	ba12      	rev	r2, r2
 8000352:	0a03      	lsrs	r3, r0, #8
 8000354:	428b      	cmp	r3, r1
 8000356:	d30c      	bcc.n	8000372 <__divsi3+0x14a>
 8000358:	0189      	lsls	r1, r1, #6
 800035a:	1192      	asrs	r2, r2, #6
 800035c:	428b      	cmp	r3, r1
 800035e:	d308      	bcc.n	8000372 <__divsi3+0x14a>
 8000360:	0189      	lsls	r1, r1, #6
 8000362:	1192      	asrs	r2, r2, #6
 8000364:	428b      	cmp	r3, r1
 8000366:	d304      	bcc.n	8000372 <__divsi3+0x14a>
 8000368:	0189      	lsls	r1, r1, #6
 800036a:	d03a      	beq.n	80003e2 <__divsi3+0x1ba>
 800036c:	1192      	asrs	r2, r2, #6
 800036e:	e000      	b.n	8000372 <__divsi3+0x14a>
 8000370:	0989      	lsrs	r1, r1, #6
 8000372:	09c3      	lsrs	r3, r0, #7
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x154>
 8000378:	01cb      	lsls	r3, r1, #7
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0983      	lsrs	r3, r0, #6
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x160>
 8000384:	018b      	lsls	r3, r1, #6
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0943      	lsrs	r3, r0, #5
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x16c>
 8000390:	014b      	lsls	r3, r1, #5
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	0903      	lsrs	r3, r0, #4
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x178>
 800039c:	010b      	lsls	r3, r1, #4
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	08c3      	lsrs	r3, r0, #3
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x184>
 80003a8:	00cb      	lsls	r3, r1, #3
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	0883      	lsrs	r3, r0, #2
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x190>
 80003b4:	008b      	lsls	r3, r1, #2
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	d2d9      	bcs.n	8000370 <__divsi3+0x148>
 80003bc:	0843      	lsrs	r3, r0, #1
 80003be:	428b      	cmp	r3, r1
 80003c0:	d301      	bcc.n	80003c6 <__divsi3+0x19e>
 80003c2:	004b      	lsls	r3, r1, #1
 80003c4:	1ac0      	subs	r0, r0, r3
 80003c6:	4152      	adcs	r2, r2
 80003c8:	1a41      	subs	r1, r0, r1
 80003ca:	d200      	bcs.n	80003ce <__divsi3+0x1a6>
 80003cc:	4601      	mov	r1, r0
 80003ce:	4663      	mov	r3, ip
 80003d0:	4152      	adcs	r2, r2
 80003d2:	105b      	asrs	r3, r3, #1
 80003d4:	4610      	mov	r0, r2
 80003d6:	d301      	bcc.n	80003dc <__divsi3+0x1b4>
 80003d8:	4240      	negs	r0, r0
 80003da:	2b00      	cmp	r3, #0
 80003dc:	d500      	bpl.n	80003e0 <__divsi3+0x1b8>
 80003de:	4249      	negs	r1, r1
 80003e0:	4770      	bx	lr
 80003e2:	4663      	mov	r3, ip
 80003e4:	105b      	asrs	r3, r3, #1
 80003e6:	d300      	bcc.n	80003ea <__divsi3+0x1c2>
 80003e8:	4240      	negs	r0, r0
 80003ea:	b501      	push	{r0, lr}
 80003ec:	2000      	movs	r0, #0
 80003ee:	f000 f805 	bl	80003fc <__aeabi_idiv0>
 80003f2:	bd02      	pop	{r1, pc}

080003f4 <__aeabi_idivmod>:
 80003f4:	2900      	cmp	r1, #0
 80003f6:	d0f8      	beq.n	80003ea <__divsi3+0x1c2>
 80003f8:	e716      	b.n	8000228 <__divsi3>
 80003fa:	4770      	bx	lr

080003fc <__aeabi_idiv0>:
 80003fc:	4770      	bx	lr
 80003fe:	46c0      	nop			; (mov r8, r8)

08000400 <__aeabi_uldivmod>:
 8000400:	2b00      	cmp	r3, #0
 8000402:	d111      	bne.n	8000428 <__aeabi_uldivmod+0x28>
 8000404:	2a00      	cmp	r2, #0
 8000406:	d10f      	bne.n	8000428 <__aeabi_uldivmod+0x28>
 8000408:	2900      	cmp	r1, #0
 800040a:	d100      	bne.n	800040e <__aeabi_uldivmod+0xe>
 800040c:	2800      	cmp	r0, #0
 800040e:	d002      	beq.n	8000416 <__aeabi_uldivmod+0x16>
 8000410:	2100      	movs	r1, #0
 8000412:	43c9      	mvns	r1, r1
 8000414:	0008      	movs	r0, r1
 8000416:	b407      	push	{r0, r1, r2}
 8000418:	4802      	ldr	r0, [pc, #8]	; (8000424 <__aeabi_uldivmod+0x24>)
 800041a:	a102      	add	r1, pc, #8	; (adr r1, 8000424 <__aeabi_uldivmod+0x24>)
 800041c:	1840      	adds	r0, r0, r1
 800041e:	9002      	str	r0, [sp, #8]
 8000420:	bd03      	pop	{r0, r1, pc}
 8000422:	46c0      	nop			; (mov r8, r8)
 8000424:	ffffffd9 	.word	0xffffffd9
 8000428:	b403      	push	{r0, r1}
 800042a:	4668      	mov	r0, sp
 800042c:	b501      	push	{r0, lr}
 800042e:	9802      	ldr	r0, [sp, #8]
 8000430:	f000 f806 	bl	8000440 <__udivmoddi4>
 8000434:	9b01      	ldr	r3, [sp, #4]
 8000436:	469e      	mov	lr, r3
 8000438:	b002      	add	sp, #8
 800043a:	bc0c      	pop	{r2, r3}
 800043c:	4770      	bx	lr
 800043e:	46c0      	nop			; (mov r8, r8)

08000440 <__udivmoddi4>:
 8000440:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000442:	4657      	mov	r7, sl
 8000444:	464e      	mov	r6, r9
 8000446:	4645      	mov	r5, r8
 8000448:	46de      	mov	lr, fp
 800044a:	b5e0      	push	{r5, r6, r7, lr}
 800044c:	0004      	movs	r4, r0
 800044e:	000d      	movs	r5, r1
 8000450:	4692      	mov	sl, r2
 8000452:	4699      	mov	r9, r3
 8000454:	b083      	sub	sp, #12
 8000456:	428b      	cmp	r3, r1
 8000458:	d830      	bhi.n	80004bc <__udivmoddi4+0x7c>
 800045a:	d02d      	beq.n	80004b8 <__udivmoddi4+0x78>
 800045c:	4649      	mov	r1, r9
 800045e:	4650      	mov	r0, sl
 8000460:	f000 f8ba 	bl	80005d8 <__clzdi2>
 8000464:	0029      	movs	r1, r5
 8000466:	0006      	movs	r6, r0
 8000468:	0020      	movs	r0, r4
 800046a:	f000 f8b5 	bl	80005d8 <__clzdi2>
 800046e:	1a33      	subs	r3, r6, r0
 8000470:	4698      	mov	r8, r3
 8000472:	3b20      	subs	r3, #32
 8000474:	d434      	bmi.n	80004e0 <__udivmoddi4+0xa0>
 8000476:	469b      	mov	fp, r3
 8000478:	4653      	mov	r3, sl
 800047a:	465a      	mov	r2, fp
 800047c:	4093      	lsls	r3, r2
 800047e:	4642      	mov	r2, r8
 8000480:	001f      	movs	r7, r3
 8000482:	4653      	mov	r3, sl
 8000484:	4093      	lsls	r3, r2
 8000486:	001e      	movs	r6, r3
 8000488:	42af      	cmp	r7, r5
 800048a:	d83b      	bhi.n	8000504 <__udivmoddi4+0xc4>
 800048c:	42af      	cmp	r7, r5
 800048e:	d100      	bne.n	8000492 <__udivmoddi4+0x52>
 8000490:	e079      	b.n	8000586 <__udivmoddi4+0x146>
 8000492:	465b      	mov	r3, fp
 8000494:	1ba4      	subs	r4, r4, r6
 8000496:	41bd      	sbcs	r5, r7
 8000498:	2b00      	cmp	r3, #0
 800049a:	da00      	bge.n	800049e <__udivmoddi4+0x5e>
 800049c:	e076      	b.n	800058c <__udivmoddi4+0x14c>
 800049e:	2200      	movs	r2, #0
 80004a0:	2300      	movs	r3, #0
 80004a2:	9200      	str	r2, [sp, #0]
 80004a4:	9301      	str	r3, [sp, #4]
 80004a6:	2301      	movs	r3, #1
 80004a8:	465a      	mov	r2, fp
 80004aa:	4093      	lsls	r3, r2
 80004ac:	9301      	str	r3, [sp, #4]
 80004ae:	2301      	movs	r3, #1
 80004b0:	4642      	mov	r2, r8
 80004b2:	4093      	lsls	r3, r2
 80004b4:	9300      	str	r3, [sp, #0]
 80004b6:	e029      	b.n	800050c <__udivmoddi4+0xcc>
 80004b8:	4282      	cmp	r2, r0
 80004ba:	d9cf      	bls.n	800045c <__udivmoddi4+0x1c>
 80004bc:	2200      	movs	r2, #0
 80004be:	2300      	movs	r3, #0
 80004c0:	9200      	str	r2, [sp, #0]
 80004c2:	9301      	str	r3, [sp, #4]
 80004c4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80004c6:	2b00      	cmp	r3, #0
 80004c8:	d001      	beq.n	80004ce <__udivmoddi4+0x8e>
 80004ca:	601c      	str	r4, [r3, #0]
 80004cc:	605d      	str	r5, [r3, #4]
 80004ce:	9800      	ldr	r0, [sp, #0]
 80004d0:	9901      	ldr	r1, [sp, #4]
 80004d2:	b003      	add	sp, #12
 80004d4:	bcf0      	pop	{r4, r5, r6, r7}
 80004d6:	46bb      	mov	fp, r7
 80004d8:	46b2      	mov	sl, r6
 80004da:	46a9      	mov	r9, r5
 80004dc:	46a0      	mov	r8, r4
 80004de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004e0:	4642      	mov	r2, r8
 80004e2:	469b      	mov	fp, r3
 80004e4:	2320      	movs	r3, #32
 80004e6:	1a9b      	subs	r3, r3, r2
 80004e8:	4652      	mov	r2, sl
 80004ea:	40da      	lsrs	r2, r3
 80004ec:	4641      	mov	r1, r8
 80004ee:	0013      	movs	r3, r2
 80004f0:	464a      	mov	r2, r9
 80004f2:	408a      	lsls	r2, r1
 80004f4:	0017      	movs	r7, r2
 80004f6:	4642      	mov	r2, r8
 80004f8:	431f      	orrs	r7, r3
 80004fa:	4653      	mov	r3, sl
 80004fc:	4093      	lsls	r3, r2
 80004fe:	001e      	movs	r6, r3
 8000500:	42af      	cmp	r7, r5
 8000502:	d9c3      	bls.n	800048c <__udivmoddi4+0x4c>
 8000504:	2200      	movs	r2, #0
 8000506:	2300      	movs	r3, #0
 8000508:	9200      	str	r2, [sp, #0]
 800050a:	9301      	str	r3, [sp, #4]
 800050c:	4643      	mov	r3, r8
 800050e:	2b00      	cmp	r3, #0
 8000510:	d0d8      	beq.n	80004c4 <__udivmoddi4+0x84>
 8000512:	07fb      	lsls	r3, r7, #31
 8000514:	0872      	lsrs	r2, r6, #1
 8000516:	431a      	orrs	r2, r3
 8000518:	4646      	mov	r6, r8
 800051a:	087b      	lsrs	r3, r7, #1
 800051c:	e00e      	b.n	800053c <__udivmoddi4+0xfc>
 800051e:	42ab      	cmp	r3, r5
 8000520:	d101      	bne.n	8000526 <__udivmoddi4+0xe6>
 8000522:	42a2      	cmp	r2, r4
 8000524:	d80c      	bhi.n	8000540 <__udivmoddi4+0x100>
 8000526:	1aa4      	subs	r4, r4, r2
 8000528:	419d      	sbcs	r5, r3
 800052a:	2001      	movs	r0, #1
 800052c:	1924      	adds	r4, r4, r4
 800052e:	416d      	adcs	r5, r5
 8000530:	2100      	movs	r1, #0
 8000532:	3e01      	subs	r6, #1
 8000534:	1824      	adds	r4, r4, r0
 8000536:	414d      	adcs	r5, r1
 8000538:	2e00      	cmp	r6, #0
 800053a:	d006      	beq.n	800054a <__udivmoddi4+0x10a>
 800053c:	42ab      	cmp	r3, r5
 800053e:	d9ee      	bls.n	800051e <__udivmoddi4+0xde>
 8000540:	3e01      	subs	r6, #1
 8000542:	1924      	adds	r4, r4, r4
 8000544:	416d      	adcs	r5, r5
 8000546:	2e00      	cmp	r6, #0
 8000548:	d1f8      	bne.n	800053c <__udivmoddi4+0xfc>
 800054a:	9800      	ldr	r0, [sp, #0]
 800054c:	9901      	ldr	r1, [sp, #4]
 800054e:	465b      	mov	r3, fp
 8000550:	1900      	adds	r0, r0, r4
 8000552:	4169      	adcs	r1, r5
 8000554:	2b00      	cmp	r3, #0
 8000556:	db24      	blt.n	80005a2 <__udivmoddi4+0x162>
 8000558:	002b      	movs	r3, r5
 800055a:	465a      	mov	r2, fp
 800055c:	4644      	mov	r4, r8
 800055e:	40d3      	lsrs	r3, r2
 8000560:	002a      	movs	r2, r5
 8000562:	40e2      	lsrs	r2, r4
 8000564:	001c      	movs	r4, r3
 8000566:	465b      	mov	r3, fp
 8000568:	0015      	movs	r5, r2
 800056a:	2b00      	cmp	r3, #0
 800056c:	db2a      	blt.n	80005c4 <__udivmoddi4+0x184>
 800056e:	0026      	movs	r6, r4
 8000570:	409e      	lsls	r6, r3
 8000572:	0033      	movs	r3, r6
 8000574:	0026      	movs	r6, r4
 8000576:	4647      	mov	r7, r8
 8000578:	40be      	lsls	r6, r7
 800057a:	0032      	movs	r2, r6
 800057c:	1a80      	subs	r0, r0, r2
 800057e:	4199      	sbcs	r1, r3
 8000580:	9000      	str	r0, [sp, #0]
 8000582:	9101      	str	r1, [sp, #4]
 8000584:	e79e      	b.n	80004c4 <__udivmoddi4+0x84>
 8000586:	42a3      	cmp	r3, r4
 8000588:	d8bc      	bhi.n	8000504 <__udivmoddi4+0xc4>
 800058a:	e782      	b.n	8000492 <__udivmoddi4+0x52>
 800058c:	4642      	mov	r2, r8
 800058e:	2320      	movs	r3, #32
 8000590:	2100      	movs	r1, #0
 8000592:	1a9b      	subs	r3, r3, r2
 8000594:	2200      	movs	r2, #0
 8000596:	9100      	str	r1, [sp, #0]
 8000598:	9201      	str	r2, [sp, #4]
 800059a:	2201      	movs	r2, #1
 800059c:	40da      	lsrs	r2, r3
 800059e:	9201      	str	r2, [sp, #4]
 80005a0:	e785      	b.n	80004ae <__udivmoddi4+0x6e>
 80005a2:	4642      	mov	r2, r8
 80005a4:	2320      	movs	r3, #32
 80005a6:	1a9b      	subs	r3, r3, r2
 80005a8:	002a      	movs	r2, r5
 80005aa:	4646      	mov	r6, r8
 80005ac:	409a      	lsls	r2, r3
 80005ae:	0023      	movs	r3, r4
 80005b0:	40f3      	lsrs	r3, r6
 80005b2:	4644      	mov	r4, r8
 80005b4:	4313      	orrs	r3, r2
 80005b6:	002a      	movs	r2, r5
 80005b8:	40e2      	lsrs	r2, r4
 80005ba:	001c      	movs	r4, r3
 80005bc:	465b      	mov	r3, fp
 80005be:	0015      	movs	r5, r2
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	dad4      	bge.n	800056e <__udivmoddi4+0x12e>
 80005c4:	4642      	mov	r2, r8
 80005c6:	002f      	movs	r7, r5
 80005c8:	2320      	movs	r3, #32
 80005ca:	0026      	movs	r6, r4
 80005cc:	4097      	lsls	r7, r2
 80005ce:	1a9b      	subs	r3, r3, r2
 80005d0:	40de      	lsrs	r6, r3
 80005d2:	003b      	movs	r3, r7
 80005d4:	4333      	orrs	r3, r6
 80005d6:	e7cd      	b.n	8000574 <__udivmoddi4+0x134>

080005d8 <__clzdi2>:
 80005d8:	b510      	push	{r4, lr}
 80005da:	2900      	cmp	r1, #0
 80005dc:	d103      	bne.n	80005e6 <__clzdi2+0xe>
 80005de:	f000 f807 	bl	80005f0 <__clzsi2>
 80005e2:	3020      	adds	r0, #32
 80005e4:	e002      	b.n	80005ec <__clzdi2+0x14>
 80005e6:	0008      	movs	r0, r1
 80005e8:	f000 f802 	bl	80005f0 <__clzsi2>
 80005ec:	bd10      	pop	{r4, pc}
 80005ee:	46c0      	nop			; (mov r8, r8)

080005f0 <__clzsi2>:
 80005f0:	211c      	movs	r1, #28
 80005f2:	2301      	movs	r3, #1
 80005f4:	041b      	lsls	r3, r3, #16
 80005f6:	4298      	cmp	r0, r3
 80005f8:	d301      	bcc.n	80005fe <__clzsi2+0xe>
 80005fa:	0c00      	lsrs	r0, r0, #16
 80005fc:	3910      	subs	r1, #16
 80005fe:	0a1b      	lsrs	r3, r3, #8
 8000600:	4298      	cmp	r0, r3
 8000602:	d301      	bcc.n	8000608 <__clzsi2+0x18>
 8000604:	0a00      	lsrs	r0, r0, #8
 8000606:	3908      	subs	r1, #8
 8000608:	091b      	lsrs	r3, r3, #4
 800060a:	4298      	cmp	r0, r3
 800060c:	d301      	bcc.n	8000612 <__clzsi2+0x22>
 800060e:	0900      	lsrs	r0, r0, #4
 8000610:	3904      	subs	r1, #4
 8000612:	a202      	add	r2, pc, #8	; (adr r2, 800061c <__clzsi2+0x2c>)
 8000614:	5c10      	ldrb	r0, [r2, r0]
 8000616:	1840      	adds	r0, r0, r1
 8000618:	4770      	bx	lr
 800061a:	46c0      	nop			; (mov r8, r8)
 800061c:	02020304 	.word	0x02020304
 8000620:	01010101 	.word	0x01010101
	...

0800062c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800062c:	b5b0      	push	{r4, r5, r7, lr}
 800062e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000630:	f000 fac2 	bl	8000bb8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000634:	f000 f836 	bl	80006a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000638:	f000 f918 	bl	800086c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800063c:	f000 f87a 	bl	8000734 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000640:	f000 f8c6 	bl	80007d0 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Transmit ( HUART_DBG , (uint8_t*) hello , strlen ( hello ) , UART_TIMEOUT ) ;
 8000644:	4b12      	ldr	r3, [pc, #72]	; (8000690 <main+0x64>)
 8000646:	681c      	ldr	r4, [r3, #0]
 8000648:	4b11      	ldr	r3, [pc, #68]	; (8000690 <main+0x64>)
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	0018      	movs	r0, r3
 800064e:	f7ff fd59 	bl	8000104 <strlen>
 8000652:	0003      	movs	r3, r0
 8000654:	b29a      	uxth	r2, r3
 8000656:	23fa      	movs	r3, #250	; 0xfa
 8000658:	009b      	lsls	r3, r3, #2
 800065a:	480e      	ldr	r0, [pc, #56]	; (8000694 <main+0x68>)
 800065c:	0021      	movs	r1, r4
 800065e:	f001 fd57 	bl	8002110 <HAL_UART_Transmit>
  HAL_GPIO_WritePin ( GNSS_PWR_SW_GPIO_Port , GNSS_PWR_SW_Pin , GPIO_PIN_SET ) ;
 8000662:	2380      	movs	r3, #128	; 0x80
 8000664:	021b      	lsls	r3, r3, #8
 8000666:	480c      	ldr	r0, [pc, #48]	; (8000698 <main+0x6c>)
 8000668:	2201      	movs	r2, #1
 800066a:	0019      	movs	r1, r3
 800066c:	f000 fd4a 	bl	8001104 <HAL_GPIO_WritePin>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_UART_Receive	( HUART_GNSS, &c , 1 , UART_TIMEOUT ) ;
 8000670:	23fa      	movs	r3, #250	; 0xfa
 8000672:	009b      	lsls	r3, r3, #2
 8000674:	4909      	ldr	r1, [pc, #36]	; (800069c <main+0x70>)
 8000676:	480a      	ldr	r0, [pc, #40]	; (80006a0 <main+0x74>)
 8000678:	2201      	movs	r2, #1
 800067a:	f001 fde5 	bl	8002248 <HAL_UART_Receive>
	  HAL_UART_Transmit ( HUART_DBG, &c , 1 , UART_TIMEOUT ) ;
 800067e:	23fa      	movs	r3, #250	; 0xfa
 8000680:	009b      	lsls	r3, r3, #2
 8000682:	4906      	ldr	r1, [pc, #24]	; (800069c <main+0x70>)
 8000684:	4803      	ldr	r0, [pc, #12]	; (8000694 <main+0x68>)
 8000686:	2201      	movs	r2, #1
 8000688:	f001 fd42 	bl	8002110 <HAL_UART_Transmit>
	  HAL_UART_Receive	( HUART_GNSS, &c , 1 , UART_TIMEOUT ) ;
 800068c:	e7f0      	b.n	8000670 <main+0x44>
 800068e:	46c0      	nop			; (mov r8, r8)
 8000690:	20000000 	.word	0x20000000
 8000694:	2000002c 	.word	0x2000002c
 8000698:	50000400 	.word	0x50000400
 800069c:	20000154 	.word	0x20000154
 80006a0:	200000c0 	.word	0x200000c0

080006a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006a4:	b590      	push	{r4, r7, lr}
 80006a6:	b095      	sub	sp, #84	; 0x54
 80006a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006aa:	2414      	movs	r4, #20
 80006ac:	193b      	adds	r3, r7, r4
 80006ae:	0018      	movs	r0, r3
 80006b0:	233c      	movs	r3, #60	; 0x3c
 80006b2:	001a      	movs	r2, r3
 80006b4:	2100      	movs	r1, #0
 80006b6:	f002 fce3 	bl	8003080 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006ba:	1d3b      	adds	r3, r7, #4
 80006bc:	0018      	movs	r0, r3
 80006be:	2310      	movs	r3, #16
 80006c0:	001a      	movs	r2, r3
 80006c2:	2100      	movs	r1, #0
 80006c4:	f002 fcdc 	bl	8003080 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006c8:	2380      	movs	r3, #128	; 0x80
 80006ca:	009b      	lsls	r3, r3, #2
 80006cc:	0018      	movs	r0, r3
 80006ce:	f000 fd37 	bl	8001140 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006d2:	193b      	adds	r3, r7, r4
 80006d4:	2202      	movs	r2, #2
 80006d6:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006d8:	193b      	adds	r3, r7, r4
 80006da:	2280      	movs	r2, #128	; 0x80
 80006dc:	0052      	lsls	r2, r2, #1
 80006de:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80006e0:	193b      	adds	r3, r7, r4
 80006e2:	2200      	movs	r2, #0
 80006e4:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006e6:	193b      	adds	r3, r7, r4
 80006e8:	2240      	movs	r2, #64	; 0x40
 80006ea:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80006ec:	193b      	adds	r3, r7, r4
 80006ee:	2200      	movs	r2, #0
 80006f0:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006f2:	193b      	adds	r3, r7, r4
 80006f4:	0018      	movs	r0, r3
 80006f6:	f000 fd6f 	bl	80011d8 <HAL_RCC_OscConfig>
 80006fa:	1e03      	subs	r3, r0, #0
 80006fc:	d001      	beq.n	8000702 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80006fe:	f000 f941 	bl	8000984 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000702:	1d3b      	adds	r3, r7, #4
 8000704:	2207      	movs	r2, #7
 8000706:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000708:	1d3b      	adds	r3, r7, #4
 800070a:	2200      	movs	r2, #0
 800070c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800070e:	1d3b      	adds	r3, r7, #4
 8000710:	2200      	movs	r2, #0
 8000712:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000714:	1d3b      	adds	r3, r7, #4
 8000716:	2200      	movs	r2, #0
 8000718:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800071a:	1d3b      	adds	r3, r7, #4
 800071c:	2100      	movs	r1, #0
 800071e:	0018      	movs	r0, r3
 8000720:	f001 f8ba 	bl	8001898 <HAL_RCC_ClockConfig>
 8000724:	1e03      	subs	r3, r0, #0
 8000726:	d001      	beq.n	800072c <SystemClock_Config+0x88>
  {
    Error_Handler();
 8000728:	f000 f92c 	bl	8000984 <Error_Handler>
  }
}
 800072c:	46c0      	nop			; (mov r8, r8)
 800072e:	46bd      	mov	sp, r7
 8000730:	b015      	add	sp, #84	; 0x54
 8000732:	bd90      	pop	{r4, r7, pc}

08000734 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000738:	4b23      	ldr	r3, [pc, #140]	; (80007c8 <MX_USART2_UART_Init+0x94>)
 800073a:	4a24      	ldr	r2, [pc, #144]	; (80007cc <MX_USART2_UART_Init+0x98>)
 800073c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800073e:	4b22      	ldr	r3, [pc, #136]	; (80007c8 <MX_USART2_UART_Init+0x94>)
 8000740:	22e1      	movs	r2, #225	; 0xe1
 8000742:	0252      	lsls	r2, r2, #9
 8000744:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000746:	4b20      	ldr	r3, [pc, #128]	; (80007c8 <MX_USART2_UART_Init+0x94>)
 8000748:	2200      	movs	r2, #0
 800074a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800074c:	4b1e      	ldr	r3, [pc, #120]	; (80007c8 <MX_USART2_UART_Init+0x94>)
 800074e:	2200      	movs	r2, #0
 8000750:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000752:	4b1d      	ldr	r3, [pc, #116]	; (80007c8 <MX_USART2_UART_Init+0x94>)
 8000754:	2200      	movs	r2, #0
 8000756:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000758:	4b1b      	ldr	r3, [pc, #108]	; (80007c8 <MX_USART2_UART_Init+0x94>)
 800075a:	220c      	movs	r2, #12
 800075c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800075e:	4b1a      	ldr	r3, [pc, #104]	; (80007c8 <MX_USART2_UART_Init+0x94>)
 8000760:	2200      	movs	r2, #0
 8000762:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000764:	4b18      	ldr	r3, [pc, #96]	; (80007c8 <MX_USART2_UART_Init+0x94>)
 8000766:	2200      	movs	r2, #0
 8000768:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800076a:	4b17      	ldr	r3, [pc, #92]	; (80007c8 <MX_USART2_UART_Init+0x94>)
 800076c:	2200      	movs	r2, #0
 800076e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000770:	4b15      	ldr	r3, [pc, #84]	; (80007c8 <MX_USART2_UART_Init+0x94>)
 8000772:	2200      	movs	r2, #0
 8000774:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000776:	4b14      	ldr	r3, [pc, #80]	; (80007c8 <MX_USART2_UART_Init+0x94>)
 8000778:	2200      	movs	r2, #0
 800077a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800077c:	4b12      	ldr	r3, [pc, #72]	; (80007c8 <MX_USART2_UART_Init+0x94>)
 800077e:	0018      	movs	r0, r3
 8000780:	f001 fc70 	bl	8002064 <HAL_UART_Init>
 8000784:	1e03      	subs	r3, r0, #0
 8000786:	d001      	beq.n	800078c <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000788:	f000 f8fc 	bl	8000984 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800078c:	4b0e      	ldr	r3, [pc, #56]	; (80007c8 <MX_USART2_UART_Init+0x94>)
 800078e:	2100      	movs	r1, #0
 8000790:	0018      	movs	r0, r3
 8000792:	f002 fb95 	bl	8002ec0 <HAL_UARTEx_SetTxFifoThreshold>
 8000796:	1e03      	subs	r3, r0, #0
 8000798:	d001      	beq.n	800079e <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800079a:	f000 f8f3 	bl	8000984 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800079e:	4b0a      	ldr	r3, [pc, #40]	; (80007c8 <MX_USART2_UART_Init+0x94>)
 80007a0:	2100      	movs	r1, #0
 80007a2:	0018      	movs	r0, r3
 80007a4:	f002 fbcc 	bl	8002f40 <HAL_UARTEx_SetRxFifoThreshold>
 80007a8:	1e03      	subs	r3, r0, #0
 80007aa:	d001      	beq.n	80007b0 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80007ac:	f000 f8ea 	bl	8000984 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80007b0:	4b05      	ldr	r3, [pc, #20]	; (80007c8 <MX_USART2_UART_Init+0x94>)
 80007b2:	0018      	movs	r0, r3
 80007b4:	f002 fb4a 	bl	8002e4c <HAL_UARTEx_DisableFifoMode>
 80007b8:	1e03      	subs	r3, r0, #0
 80007ba:	d001      	beq.n	80007c0 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80007bc:	f000 f8e2 	bl	8000984 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007c0:	46c0      	nop			; (mov r8, r8)
 80007c2:	46bd      	mov	sp, r7
 80007c4:	bd80      	pop	{r7, pc}
 80007c6:	46c0      	nop			; (mov r8, r8)
 80007c8:	2000002c 	.word	0x2000002c
 80007cc:	40004400 	.word	0x40004400

080007d0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80007d4:	4b23      	ldr	r3, [pc, #140]	; (8000864 <MX_USART3_UART_Init+0x94>)
 80007d6:	4a24      	ldr	r2, [pc, #144]	; (8000868 <MX_USART3_UART_Init+0x98>)
 80007d8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 80007da:	4b22      	ldr	r3, [pc, #136]	; (8000864 <MX_USART3_UART_Init+0x94>)
 80007dc:	2296      	movs	r2, #150	; 0x96
 80007de:	0192      	lsls	r2, r2, #6
 80007e0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80007e2:	4b20      	ldr	r3, [pc, #128]	; (8000864 <MX_USART3_UART_Init+0x94>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80007e8:	4b1e      	ldr	r3, [pc, #120]	; (8000864 <MX_USART3_UART_Init+0x94>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80007ee:	4b1d      	ldr	r3, [pc, #116]	; (8000864 <MX_USART3_UART_Init+0x94>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80007f4:	4b1b      	ldr	r3, [pc, #108]	; (8000864 <MX_USART3_UART_Init+0x94>)
 80007f6:	220c      	movs	r2, #12
 80007f8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007fa:	4b1a      	ldr	r3, [pc, #104]	; (8000864 <MX_USART3_UART_Init+0x94>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000800:	4b18      	ldr	r3, [pc, #96]	; (8000864 <MX_USART3_UART_Init+0x94>)
 8000802:	2200      	movs	r2, #0
 8000804:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000806:	4b17      	ldr	r3, [pc, #92]	; (8000864 <MX_USART3_UART_Init+0x94>)
 8000808:	2200      	movs	r2, #0
 800080a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800080c:	4b15      	ldr	r3, [pc, #84]	; (8000864 <MX_USART3_UART_Init+0x94>)
 800080e:	2200      	movs	r2, #0
 8000810:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000812:	4b14      	ldr	r3, [pc, #80]	; (8000864 <MX_USART3_UART_Init+0x94>)
 8000814:	2200      	movs	r2, #0
 8000816:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000818:	4b12      	ldr	r3, [pc, #72]	; (8000864 <MX_USART3_UART_Init+0x94>)
 800081a:	0018      	movs	r0, r3
 800081c:	f001 fc22 	bl	8002064 <HAL_UART_Init>
 8000820:	1e03      	subs	r3, r0, #0
 8000822:	d001      	beq.n	8000828 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000824:	f000 f8ae 	bl	8000984 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000828:	4b0e      	ldr	r3, [pc, #56]	; (8000864 <MX_USART3_UART_Init+0x94>)
 800082a:	2100      	movs	r1, #0
 800082c:	0018      	movs	r0, r3
 800082e:	f002 fb47 	bl	8002ec0 <HAL_UARTEx_SetTxFifoThreshold>
 8000832:	1e03      	subs	r3, r0, #0
 8000834:	d001      	beq.n	800083a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000836:	f000 f8a5 	bl	8000984 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800083a:	4b0a      	ldr	r3, [pc, #40]	; (8000864 <MX_USART3_UART_Init+0x94>)
 800083c:	2100      	movs	r1, #0
 800083e:	0018      	movs	r0, r3
 8000840:	f002 fb7e 	bl	8002f40 <HAL_UARTEx_SetRxFifoThreshold>
 8000844:	1e03      	subs	r3, r0, #0
 8000846:	d001      	beq.n	800084c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000848:	f000 f89c 	bl	8000984 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 800084c:	4b05      	ldr	r3, [pc, #20]	; (8000864 <MX_USART3_UART_Init+0x94>)
 800084e:	0018      	movs	r0, r3
 8000850:	f002 fafc 	bl	8002e4c <HAL_UARTEx_DisableFifoMode>
 8000854:	1e03      	subs	r3, r0, #0
 8000856:	d001      	beq.n	800085c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000858:	f000 f894 	bl	8000984 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800085c:	46c0      	nop			; (mov r8, r8)
 800085e:	46bd      	mov	sp, r7
 8000860:	bd80      	pop	{r7, pc}
 8000862:	46c0      	nop			; (mov r8, r8)
 8000864:	200000c0 	.word	0x200000c0
 8000868:	40004800 	.word	0x40004800

0800086c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800086c:	b590      	push	{r4, r7, lr}
 800086e:	b08b      	sub	sp, #44	; 0x2c
 8000870:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000872:	2414      	movs	r4, #20
 8000874:	193b      	adds	r3, r7, r4
 8000876:	0018      	movs	r0, r3
 8000878:	2314      	movs	r3, #20
 800087a:	001a      	movs	r2, r3
 800087c:	2100      	movs	r1, #0
 800087e:	f002 fbff 	bl	8003080 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000882:	4b3e      	ldr	r3, [pc, #248]	; (800097c <MX_GPIO_Init+0x110>)
 8000884:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000886:	4b3d      	ldr	r3, [pc, #244]	; (800097c <MX_GPIO_Init+0x110>)
 8000888:	2104      	movs	r1, #4
 800088a:	430a      	orrs	r2, r1
 800088c:	635a      	str	r2, [r3, #52]	; 0x34
 800088e:	4b3b      	ldr	r3, [pc, #236]	; (800097c <MX_GPIO_Init+0x110>)
 8000890:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000892:	2204      	movs	r2, #4
 8000894:	4013      	ands	r3, r2
 8000896:	613b      	str	r3, [r7, #16]
 8000898:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800089a:	4b38      	ldr	r3, [pc, #224]	; (800097c <MX_GPIO_Init+0x110>)
 800089c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800089e:	4b37      	ldr	r3, [pc, #220]	; (800097c <MX_GPIO_Init+0x110>)
 80008a0:	2120      	movs	r1, #32
 80008a2:	430a      	orrs	r2, r1
 80008a4:	635a      	str	r2, [r3, #52]	; 0x34
 80008a6:	4b35      	ldr	r3, [pc, #212]	; (800097c <MX_GPIO_Init+0x110>)
 80008a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80008aa:	2220      	movs	r2, #32
 80008ac:	4013      	ands	r3, r2
 80008ae:	60fb      	str	r3, [r7, #12]
 80008b0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008b2:	4b32      	ldr	r3, [pc, #200]	; (800097c <MX_GPIO_Init+0x110>)
 80008b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80008b6:	4b31      	ldr	r3, [pc, #196]	; (800097c <MX_GPIO_Init+0x110>)
 80008b8:	2101      	movs	r1, #1
 80008ba:	430a      	orrs	r2, r1
 80008bc:	635a      	str	r2, [r3, #52]	; 0x34
 80008be:	4b2f      	ldr	r3, [pc, #188]	; (800097c <MX_GPIO_Init+0x110>)
 80008c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80008c2:	2201      	movs	r2, #1
 80008c4:	4013      	ands	r3, r2
 80008c6:	60bb      	str	r3, [r7, #8]
 80008c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008ca:	4b2c      	ldr	r3, [pc, #176]	; (800097c <MX_GPIO_Init+0x110>)
 80008cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80008ce:	4b2b      	ldr	r3, [pc, #172]	; (800097c <MX_GPIO_Init+0x110>)
 80008d0:	2102      	movs	r1, #2
 80008d2:	430a      	orrs	r2, r1
 80008d4:	635a      	str	r2, [r3, #52]	; 0x34
 80008d6:	4b29      	ldr	r3, [pc, #164]	; (800097c <MX_GPIO_Init+0x110>)
 80008d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80008da:	2202      	movs	r2, #2
 80008dc:	4013      	ands	r3, r2
 80008de:	607b      	str	r3, [r7, #4]
 80008e0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ACC_CS_Pin|LDG_Pin, GPIO_PIN_RESET);
 80008e2:	23a0      	movs	r3, #160	; 0xa0
 80008e4:	05db      	lsls	r3, r3, #23
 80008e6:	2200      	movs	r2, #0
 80008e8:	2130      	movs	r1, #48	; 0x30
 80008ea:	0018      	movs	r0, r3
 80008ec:	f000 fc0a 	bl	8001104 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GNSS_RST_Pin|GNSS_PWR_SW_Pin, GPIO_PIN_RESET);
 80008f0:	23a0      	movs	r3, #160	; 0xa0
 80008f2:	021b      	lsls	r3, r3, #8
 80008f4:	4822      	ldr	r0, [pc, #136]	; (8000980 <MX_GPIO_Init+0x114>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	0019      	movs	r1, r3
 80008fa:	f000 fc03 	bl	8001104 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : ACC_CS_Pin */
  GPIO_InitStruct.Pin = ACC_CS_Pin;
 80008fe:	193b      	adds	r3, r7, r4
 8000900:	2210      	movs	r2, #16
 8000902:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000904:	193b      	adds	r3, r7, r4
 8000906:	2201      	movs	r2, #1
 8000908:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090a:	193b      	adds	r3, r7, r4
 800090c:	2200      	movs	r2, #0
 800090e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000910:	193b      	adds	r3, r7, r4
 8000912:	2200      	movs	r2, #0
 8000914:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(ACC_CS_GPIO_Port, &GPIO_InitStruct);
 8000916:	193a      	adds	r2, r7, r4
 8000918:	23a0      	movs	r3, #160	; 0xa0
 800091a:	05db      	lsls	r3, r3, #23
 800091c:	0011      	movs	r1, r2
 800091e:	0018      	movs	r0, r3
 8000920:	f000 fa84 	bl	8000e2c <HAL_GPIO_Init>

  /*Configure GPIO pin : LDG_Pin */
  GPIO_InitStruct.Pin = LDG_Pin;
 8000924:	193b      	adds	r3, r7, r4
 8000926:	2220      	movs	r2, #32
 8000928:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800092a:	193b      	adds	r3, r7, r4
 800092c:	2201      	movs	r2, #1
 800092e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000930:	193b      	adds	r3, r7, r4
 8000932:	2200      	movs	r2, #0
 8000934:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000936:	193b      	adds	r3, r7, r4
 8000938:	2202      	movs	r2, #2
 800093a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LDG_GPIO_Port, &GPIO_InitStruct);
 800093c:	193a      	adds	r2, r7, r4
 800093e:	23a0      	movs	r3, #160	; 0xa0
 8000940:	05db      	lsls	r3, r3, #23
 8000942:	0011      	movs	r1, r2
 8000944:	0018      	movs	r0, r3
 8000946:	f000 fa71 	bl	8000e2c <HAL_GPIO_Init>

  /*Configure GPIO pins : GNSS_RST_Pin GNSS_PWR_SW_Pin */
  GPIO_InitStruct.Pin = GNSS_RST_Pin|GNSS_PWR_SW_Pin;
 800094a:	0021      	movs	r1, r4
 800094c:	187b      	adds	r3, r7, r1
 800094e:	22a0      	movs	r2, #160	; 0xa0
 8000950:	0212      	lsls	r2, r2, #8
 8000952:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000954:	187b      	adds	r3, r7, r1
 8000956:	2201      	movs	r2, #1
 8000958:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095a:	187b      	adds	r3, r7, r1
 800095c:	2200      	movs	r2, #0
 800095e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000960:	187b      	adds	r3, r7, r1
 8000962:	2200      	movs	r2, #0
 8000964:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000966:	187b      	adds	r3, r7, r1
 8000968:	4a05      	ldr	r2, [pc, #20]	; (8000980 <MX_GPIO_Init+0x114>)
 800096a:	0019      	movs	r1, r3
 800096c:	0010      	movs	r0, r2
 800096e:	f000 fa5d 	bl	8000e2c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000972:	46c0      	nop			; (mov r8, r8)
 8000974:	46bd      	mov	sp, r7
 8000976:	b00b      	add	sp, #44	; 0x2c
 8000978:	bd90      	pop	{r4, r7, pc}
 800097a:	46c0      	nop			; (mov r8, r8)
 800097c:	40021000 	.word	0x40021000
 8000980:	50000400 	.word	0x50000400

08000984 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000988:	b672      	cpsid	i
}
 800098a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800098c:	e7fe      	b.n	800098c <Error_Handler+0x8>
	...

08000990 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b082      	sub	sp, #8
 8000994:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000996:	4b0f      	ldr	r3, [pc, #60]	; (80009d4 <HAL_MspInit+0x44>)
 8000998:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800099a:	4b0e      	ldr	r3, [pc, #56]	; (80009d4 <HAL_MspInit+0x44>)
 800099c:	2101      	movs	r1, #1
 800099e:	430a      	orrs	r2, r1
 80009a0:	641a      	str	r2, [r3, #64]	; 0x40
 80009a2:	4b0c      	ldr	r3, [pc, #48]	; (80009d4 <HAL_MspInit+0x44>)
 80009a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009a6:	2201      	movs	r2, #1
 80009a8:	4013      	ands	r3, r2
 80009aa:	607b      	str	r3, [r7, #4]
 80009ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009ae:	4b09      	ldr	r3, [pc, #36]	; (80009d4 <HAL_MspInit+0x44>)
 80009b0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80009b2:	4b08      	ldr	r3, [pc, #32]	; (80009d4 <HAL_MspInit+0x44>)
 80009b4:	2180      	movs	r1, #128	; 0x80
 80009b6:	0549      	lsls	r1, r1, #21
 80009b8:	430a      	orrs	r2, r1
 80009ba:	63da      	str	r2, [r3, #60]	; 0x3c
 80009bc:	4b05      	ldr	r3, [pc, #20]	; (80009d4 <HAL_MspInit+0x44>)
 80009be:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80009c0:	2380      	movs	r3, #128	; 0x80
 80009c2:	055b      	lsls	r3, r3, #21
 80009c4:	4013      	ands	r3, r2
 80009c6:	603b      	str	r3, [r7, #0]
 80009c8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009ca:	46c0      	nop			; (mov r8, r8)
 80009cc:	46bd      	mov	sp, r7
 80009ce:	b002      	add	sp, #8
 80009d0:	bd80      	pop	{r7, pc}
 80009d2:	46c0      	nop			; (mov r8, r8)
 80009d4:	40021000 	.word	0x40021000

080009d8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009d8:	b590      	push	{r4, r7, lr}
 80009da:	b09f      	sub	sp, #124	; 0x7c
 80009dc:	af00      	add	r7, sp, #0
 80009de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009e0:	2364      	movs	r3, #100	; 0x64
 80009e2:	18fb      	adds	r3, r7, r3
 80009e4:	0018      	movs	r0, r3
 80009e6:	2314      	movs	r3, #20
 80009e8:	001a      	movs	r2, r3
 80009ea:	2100      	movs	r1, #0
 80009ec:	f002 fb48 	bl	8003080 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80009f0:	2418      	movs	r4, #24
 80009f2:	193b      	adds	r3, r7, r4
 80009f4:	0018      	movs	r0, r3
 80009f6:	234c      	movs	r3, #76	; 0x4c
 80009f8:	001a      	movs	r2, r3
 80009fa:	2100      	movs	r1, #0
 80009fc:	f002 fb40 	bl	8003080 <memset>
  if(huart->Instance==USART2)
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	4a45      	ldr	r2, [pc, #276]	; (8000b1c <HAL_UART_MspInit+0x144>)
 8000a06:	4293      	cmp	r3, r2
 8000a08:	d13f      	bne.n	8000a8a <HAL_UART_MspInit+0xb2>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000a0a:	193b      	adds	r3, r7, r4
 8000a0c:	2202      	movs	r2, #2
 8000a0e:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000a10:	193b      	adds	r3, r7, r4
 8000a12:	2200      	movs	r2, #0
 8000a14:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a16:	193b      	adds	r3, r7, r4
 8000a18:	0018      	movs	r0, r3
 8000a1a:	f001 f8e7 	bl	8001bec <HAL_RCCEx_PeriphCLKConfig>
 8000a1e:	1e03      	subs	r3, r0, #0
 8000a20:	d001      	beq.n	8000a26 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000a22:	f7ff ffaf 	bl	8000984 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a26:	4b3e      	ldr	r3, [pc, #248]	; (8000b20 <HAL_UART_MspInit+0x148>)
 8000a28:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000a2a:	4b3d      	ldr	r3, [pc, #244]	; (8000b20 <HAL_UART_MspInit+0x148>)
 8000a2c:	2180      	movs	r1, #128	; 0x80
 8000a2e:	0289      	lsls	r1, r1, #10
 8000a30:	430a      	orrs	r2, r1
 8000a32:	63da      	str	r2, [r3, #60]	; 0x3c
 8000a34:	4b3a      	ldr	r3, [pc, #232]	; (8000b20 <HAL_UART_MspInit+0x148>)
 8000a36:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000a38:	2380      	movs	r3, #128	; 0x80
 8000a3a:	029b      	lsls	r3, r3, #10
 8000a3c:	4013      	ands	r3, r2
 8000a3e:	617b      	str	r3, [r7, #20]
 8000a40:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a42:	4b37      	ldr	r3, [pc, #220]	; (8000b20 <HAL_UART_MspInit+0x148>)
 8000a44:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000a46:	4b36      	ldr	r3, [pc, #216]	; (8000b20 <HAL_UART_MspInit+0x148>)
 8000a48:	2101      	movs	r1, #1
 8000a4a:	430a      	orrs	r2, r1
 8000a4c:	635a      	str	r2, [r3, #52]	; 0x34
 8000a4e:	4b34      	ldr	r3, [pc, #208]	; (8000b20 <HAL_UART_MspInit+0x148>)
 8000a50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a52:	2201      	movs	r2, #1
 8000a54:	4013      	ands	r3, r2
 8000a56:	613b      	str	r3, [r7, #16]
 8000a58:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = DBG_TX_Pin|DBG_RX_Pin;
 8000a5a:	2164      	movs	r1, #100	; 0x64
 8000a5c:	187b      	adds	r3, r7, r1
 8000a5e:	220c      	movs	r2, #12
 8000a60:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a62:	187b      	adds	r3, r7, r1
 8000a64:	2202      	movs	r2, #2
 8000a66:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a68:	187b      	adds	r3, r7, r1
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a6e:	187b      	adds	r3, r7, r1
 8000a70:	2200      	movs	r2, #0
 8000a72:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000a74:	187b      	adds	r3, r7, r1
 8000a76:	2201      	movs	r2, #1
 8000a78:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a7a:	187a      	adds	r2, r7, r1
 8000a7c:	23a0      	movs	r3, #160	; 0xa0
 8000a7e:	05db      	lsls	r3, r3, #23
 8000a80:	0011      	movs	r1, r2
 8000a82:	0018      	movs	r0, r3
 8000a84:	f000 f9d2 	bl	8000e2c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000a88:	e044      	b.n	8000b14 <HAL_UART_MspInit+0x13c>
  else if(huart->Instance==USART3)
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	4a25      	ldr	r2, [pc, #148]	; (8000b24 <HAL_UART_MspInit+0x14c>)
 8000a90:	4293      	cmp	r3, r2
 8000a92:	d13f      	bne.n	8000b14 <HAL_UART_MspInit+0x13c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000a94:	2118      	movs	r1, #24
 8000a96:	187b      	adds	r3, r7, r1
 8000a98:	2204      	movs	r2, #4
 8000a9a:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000a9c:	187b      	adds	r3, r7, r1
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	60da      	str	r2, [r3, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000aa2:	187b      	adds	r3, r7, r1
 8000aa4:	0018      	movs	r0, r3
 8000aa6:	f001 f8a1 	bl	8001bec <HAL_RCCEx_PeriphCLKConfig>
 8000aaa:	1e03      	subs	r3, r0, #0
 8000aac:	d001      	beq.n	8000ab2 <HAL_UART_MspInit+0xda>
      Error_Handler();
 8000aae:	f7ff ff69 	bl	8000984 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000ab2:	4b1b      	ldr	r3, [pc, #108]	; (8000b20 <HAL_UART_MspInit+0x148>)
 8000ab4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000ab6:	4b1a      	ldr	r3, [pc, #104]	; (8000b20 <HAL_UART_MspInit+0x148>)
 8000ab8:	2180      	movs	r1, #128	; 0x80
 8000aba:	02c9      	lsls	r1, r1, #11
 8000abc:	430a      	orrs	r2, r1
 8000abe:	63da      	str	r2, [r3, #60]	; 0x3c
 8000ac0:	4b17      	ldr	r3, [pc, #92]	; (8000b20 <HAL_UART_MspInit+0x148>)
 8000ac2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000ac4:	2380      	movs	r3, #128	; 0x80
 8000ac6:	02db      	lsls	r3, r3, #11
 8000ac8:	4013      	ands	r3, r2
 8000aca:	60fb      	str	r3, [r7, #12]
 8000acc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ace:	4b14      	ldr	r3, [pc, #80]	; (8000b20 <HAL_UART_MspInit+0x148>)
 8000ad0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000ad2:	4b13      	ldr	r3, [pc, #76]	; (8000b20 <HAL_UART_MspInit+0x148>)
 8000ad4:	2102      	movs	r1, #2
 8000ad6:	430a      	orrs	r2, r1
 8000ad8:	635a      	str	r2, [r3, #52]	; 0x34
 8000ada:	4b11      	ldr	r3, [pc, #68]	; (8000b20 <HAL_UART_MspInit+0x148>)
 8000adc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ade:	2202      	movs	r2, #2
 8000ae0:	4013      	ands	r3, r2
 8000ae2:	60bb      	str	r3, [r7, #8]
 8000ae4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GNSS_TX_Pin|GNSS_RX_Pin;
 8000ae6:	2164      	movs	r1, #100	; 0x64
 8000ae8:	187b      	adds	r3, r7, r1
 8000aea:	22c0      	movs	r2, #192	; 0xc0
 8000aec:	0092      	lsls	r2, r2, #2
 8000aee:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000af0:	187b      	adds	r3, r7, r1
 8000af2:	2202      	movs	r2, #2
 8000af4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af6:	187b      	adds	r3, r7, r1
 8000af8:	2200      	movs	r2, #0
 8000afa:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000afc:	187b      	adds	r3, r7, r1
 8000afe:	2200      	movs	r2, #0
 8000b00:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART3;
 8000b02:	187b      	adds	r3, r7, r1
 8000b04:	2204      	movs	r2, #4
 8000b06:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b08:	187b      	adds	r3, r7, r1
 8000b0a:	4a07      	ldr	r2, [pc, #28]	; (8000b28 <HAL_UART_MspInit+0x150>)
 8000b0c:	0019      	movs	r1, r3
 8000b0e:	0010      	movs	r0, r2
 8000b10:	f000 f98c 	bl	8000e2c <HAL_GPIO_Init>
}
 8000b14:	46c0      	nop			; (mov r8, r8)
 8000b16:	46bd      	mov	sp, r7
 8000b18:	b01f      	add	sp, #124	; 0x7c
 8000b1a:	bd90      	pop	{r4, r7, pc}
 8000b1c:	40004400 	.word	0x40004400
 8000b20:	40021000 	.word	0x40021000
 8000b24:	40004800 	.word	0x40004800
 8000b28:	50000400 	.word	0x50000400

08000b2c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b30:	e7fe      	b.n	8000b30 <NMI_Handler+0x4>

08000b32 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b32:	b580      	push	{r7, lr}
 8000b34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b36:	e7fe      	b.n	8000b36 <HardFault_Handler+0x4>

08000b38 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000b3c:	46c0      	nop			; (mov r8, r8)
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bd80      	pop	{r7, pc}

08000b42 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b42:	b580      	push	{r7, lr}
 8000b44:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b46:	46c0      	nop			; (mov r8, r8)
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	bd80      	pop	{r7, pc}

08000b4c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b50:	f000 f89c 	bl	8000c8c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b54:	46c0      	nop			; (mov r8, r8)
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bd80      	pop	{r7, pc}

08000b5a <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b5a:	b580      	push	{r7, lr}
 8000b5c:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b5e:	46c0      	nop			; (mov r8, r8)
 8000b60:	46bd      	mov	sp, r7
 8000b62:	bd80      	pop	{r7, pc}

08000b64 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000b64:	480d      	ldr	r0, [pc, #52]	; (8000b9c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000b66:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000b68:	f7ff fff7 	bl	8000b5a <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b6c:	480c      	ldr	r0, [pc, #48]	; (8000ba0 <LoopForever+0x6>)
  ldr r1, =_edata
 8000b6e:	490d      	ldr	r1, [pc, #52]	; (8000ba4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b70:	4a0d      	ldr	r2, [pc, #52]	; (8000ba8 <LoopForever+0xe>)
  movs r3, #0
 8000b72:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b74:	e002      	b.n	8000b7c <LoopCopyDataInit>

08000b76 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b76:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b78:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b7a:	3304      	adds	r3, #4

08000b7c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b7c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b7e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b80:	d3f9      	bcc.n	8000b76 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b82:	4a0a      	ldr	r2, [pc, #40]	; (8000bac <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b84:	4c0a      	ldr	r4, [pc, #40]	; (8000bb0 <LoopForever+0x16>)
  movs r3, #0
 8000b86:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b88:	e001      	b.n	8000b8e <LoopFillZerobss>

08000b8a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b8a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b8c:	3204      	adds	r2, #4

08000b8e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b8e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b90:	d3fb      	bcc.n	8000b8a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000b92:	f002 fa7d 	bl	8003090 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000b96:	f7ff fd49 	bl	800062c <main>

08000b9a <LoopForever>:

LoopForever:
  b LoopForever
 8000b9a:	e7fe      	b.n	8000b9a <LoopForever>
  ldr   r0, =_estack
 8000b9c:	20024000 	.word	0x20024000
  ldr r0, =_sdata
 8000ba0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ba4:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000ba8:	080031a4 	.word	0x080031a4
  ldr r2, =_sbss
 8000bac:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000bb0:	2000015c 	.word	0x2000015c

08000bb4 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000bb4:	e7fe      	b.n	8000bb4 <ADC1_COMP_IRQHandler>
	...

08000bb8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b082      	sub	sp, #8
 8000bbc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000bbe:	1dfb      	adds	r3, r7, #7
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bc4:	4b0b      	ldr	r3, [pc, #44]	; (8000bf4 <HAL_Init+0x3c>)
 8000bc6:	681a      	ldr	r2, [r3, #0]
 8000bc8:	4b0a      	ldr	r3, [pc, #40]	; (8000bf4 <HAL_Init+0x3c>)
 8000bca:	2180      	movs	r1, #128	; 0x80
 8000bcc:	0049      	lsls	r1, r1, #1
 8000bce:	430a      	orrs	r2, r1
 8000bd0:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000bd2:	2000      	movs	r0, #0
 8000bd4:	f000 f810 	bl	8000bf8 <HAL_InitTick>
 8000bd8:	1e03      	subs	r3, r0, #0
 8000bda:	d003      	beq.n	8000be4 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000bdc:	1dfb      	adds	r3, r7, #7
 8000bde:	2201      	movs	r2, #1
 8000be0:	701a      	strb	r2, [r3, #0]
 8000be2:	e001      	b.n	8000be8 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000be4:	f7ff fed4 	bl	8000990 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000be8:	1dfb      	adds	r3, r7, #7
 8000bea:	781b      	ldrb	r3, [r3, #0]
}
 8000bec:	0018      	movs	r0, r3
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	b002      	add	sp, #8
 8000bf2:	bd80      	pop	{r7, pc}
 8000bf4:	40022000 	.word	0x40022000

08000bf8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bf8:	b590      	push	{r4, r7, lr}
 8000bfa:	b085      	sub	sp, #20
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000c00:	230f      	movs	r3, #15
 8000c02:	18fb      	adds	r3, r7, r3
 8000c04:	2200      	movs	r2, #0
 8000c06:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000c08:	4b1d      	ldr	r3, [pc, #116]	; (8000c80 <HAL_InitTick+0x88>)
 8000c0a:	781b      	ldrb	r3, [r3, #0]
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d02b      	beq.n	8000c68 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000c10:	4b1c      	ldr	r3, [pc, #112]	; (8000c84 <HAL_InitTick+0x8c>)
 8000c12:	681c      	ldr	r4, [r3, #0]
 8000c14:	4b1a      	ldr	r3, [pc, #104]	; (8000c80 <HAL_InitTick+0x88>)
 8000c16:	781b      	ldrb	r3, [r3, #0]
 8000c18:	0019      	movs	r1, r3
 8000c1a:	23fa      	movs	r3, #250	; 0xfa
 8000c1c:	0098      	lsls	r0, r3, #2
 8000c1e:	f7ff fa79 	bl	8000114 <__udivsi3>
 8000c22:	0003      	movs	r3, r0
 8000c24:	0019      	movs	r1, r3
 8000c26:	0020      	movs	r0, r4
 8000c28:	f7ff fa74 	bl	8000114 <__udivsi3>
 8000c2c:	0003      	movs	r3, r0
 8000c2e:	0018      	movs	r0, r3
 8000c30:	f000 f8ef 	bl	8000e12 <HAL_SYSTICK_Config>
 8000c34:	1e03      	subs	r3, r0, #0
 8000c36:	d112      	bne.n	8000c5e <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	2b03      	cmp	r3, #3
 8000c3c:	d80a      	bhi.n	8000c54 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c3e:	6879      	ldr	r1, [r7, #4]
 8000c40:	2301      	movs	r3, #1
 8000c42:	425b      	negs	r3, r3
 8000c44:	2200      	movs	r2, #0
 8000c46:	0018      	movs	r0, r3
 8000c48:	f000 f8ce 	bl	8000de8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c4c:	4b0e      	ldr	r3, [pc, #56]	; (8000c88 <HAL_InitTick+0x90>)
 8000c4e:	687a      	ldr	r2, [r7, #4]
 8000c50:	601a      	str	r2, [r3, #0]
 8000c52:	e00d      	b.n	8000c70 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000c54:	230f      	movs	r3, #15
 8000c56:	18fb      	adds	r3, r7, r3
 8000c58:	2201      	movs	r2, #1
 8000c5a:	701a      	strb	r2, [r3, #0]
 8000c5c:	e008      	b.n	8000c70 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000c5e:	230f      	movs	r3, #15
 8000c60:	18fb      	adds	r3, r7, r3
 8000c62:	2201      	movs	r2, #1
 8000c64:	701a      	strb	r2, [r3, #0]
 8000c66:	e003      	b.n	8000c70 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000c68:	230f      	movs	r3, #15
 8000c6a:	18fb      	adds	r3, r7, r3
 8000c6c:	2201      	movs	r2, #1
 8000c6e:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000c70:	230f      	movs	r3, #15
 8000c72:	18fb      	adds	r3, r7, r3
 8000c74:	781b      	ldrb	r3, [r3, #0]
}
 8000c76:	0018      	movs	r0, r3
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	b005      	add	sp, #20
 8000c7c:	bd90      	pop	{r4, r7, pc}
 8000c7e:	46c0      	nop			; (mov r8, r8)
 8000c80:	2000000c 	.word	0x2000000c
 8000c84:	20000004 	.word	0x20000004
 8000c88:	20000008 	.word	0x20000008

08000c8c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000c90:	4b05      	ldr	r3, [pc, #20]	; (8000ca8 <HAL_IncTick+0x1c>)
 8000c92:	781b      	ldrb	r3, [r3, #0]
 8000c94:	001a      	movs	r2, r3
 8000c96:	4b05      	ldr	r3, [pc, #20]	; (8000cac <HAL_IncTick+0x20>)
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	18d2      	adds	r2, r2, r3
 8000c9c:	4b03      	ldr	r3, [pc, #12]	; (8000cac <HAL_IncTick+0x20>)
 8000c9e:	601a      	str	r2, [r3, #0]
}
 8000ca0:	46c0      	nop			; (mov r8, r8)
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}
 8000ca6:	46c0      	nop			; (mov r8, r8)
 8000ca8:	2000000c 	.word	0x2000000c
 8000cac:	20000158 	.word	0x20000158

08000cb0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	af00      	add	r7, sp, #0
  return uwTick;
 8000cb4:	4b02      	ldr	r3, [pc, #8]	; (8000cc0 <HAL_GetTick+0x10>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
}
 8000cb8:	0018      	movs	r0, r3
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bd80      	pop	{r7, pc}
 8000cbe:	46c0      	nop			; (mov r8, r8)
 8000cc0:	20000158 	.word	0x20000158

08000cc4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cc4:	b590      	push	{r4, r7, lr}
 8000cc6:	b083      	sub	sp, #12
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	0002      	movs	r2, r0
 8000ccc:	6039      	str	r1, [r7, #0]
 8000cce:	1dfb      	adds	r3, r7, #7
 8000cd0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000cd2:	1dfb      	adds	r3, r7, #7
 8000cd4:	781b      	ldrb	r3, [r3, #0]
 8000cd6:	2b7f      	cmp	r3, #127	; 0x7f
 8000cd8:	d828      	bhi.n	8000d2c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000cda:	4a2f      	ldr	r2, [pc, #188]	; (8000d98 <__NVIC_SetPriority+0xd4>)
 8000cdc:	1dfb      	adds	r3, r7, #7
 8000cde:	781b      	ldrb	r3, [r3, #0]
 8000ce0:	b25b      	sxtb	r3, r3
 8000ce2:	089b      	lsrs	r3, r3, #2
 8000ce4:	33c0      	adds	r3, #192	; 0xc0
 8000ce6:	009b      	lsls	r3, r3, #2
 8000ce8:	589b      	ldr	r3, [r3, r2]
 8000cea:	1dfa      	adds	r2, r7, #7
 8000cec:	7812      	ldrb	r2, [r2, #0]
 8000cee:	0011      	movs	r1, r2
 8000cf0:	2203      	movs	r2, #3
 8000cf2:	400a      	ands	r2, r1
 8000cf4:	00d2      	lsls	r2, r2, #3
 8000cf6:	21ff      	movs	r1, #255	; 0xff
 8000cf8:	4091      	lsls	r1, r2
 8000cfa:	000a      	movs	r2, r1
 8000cfc:	43d2      	mvns	r2, r2
 8000cfe:	401a      	ands	r2, r3
 8000d00:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000d02:	683b      	ldr	r3, [r7, #0]
 8000d04:	019b      	lsls	r3, r3, #6
 8000d06:	22ff      	movs	r2, #255	; 0xff
 8000d08:	401a      	ands	r2, r3
 8000d0a:	1dfb      	adds	r3, r7, #7
 8000d0c:	781b      	ldrb	r3, [r3, #0]
 8000d0e:	0018      	movs	r0, r3
 8000d10:	2303      	movs	r3, #3
 8000d12:	4003      	ands	r3, r0
 8000d14:	00db      	lsls	r3, r3, #3
 8000d16:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d18:	481f      	ldr	r0, [pc, #124]	; (8000d98 <__NVIC_SetPriority+0xd4>)
 8000d1a:	1dfb      	adds	r3, r7, #7
 8000d1c:	781b      	ldrb	r3, [r3, #0]
 8000d1e:	b25b      	sxtb	r3, r3
 8000d20:	089b      	lsrs	r3, r3, #2
 8000d22:	430a      	orrs	r2, r1
 8000d24:	33c0      	adds	r3, #192	; 0xc0
 8000d26:	009b      	lsls	r3, r3, #2
 8000d28:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000d2a:	e031      	b.n	8000d90 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d2c:	4a1b      	ldr	r2, [pc, #108]	; (8000d9c <__NVIC_SetPriority+0xd8>)
 8000d2e:	1dfb      	adds	r3, r7, #7
 8000d30:	781b      	ldrb	r3, [r3, #0]
 8000d32:	0019      	movs	r1, r3
 8000d34:	230f      	movs	r3, #15
 8000d36:	400b      	ands	r3, r1
 8000d38:	3b08      	subs	r3, #8
 8000d3a:	089b      	lsrs	r3, r3, #2
 8000d3c:	3306      	adds	r3, #6
 8000d3e:	009b      	lsls	r3, r3, #2
 8000d40:	18d3      	adds	r3, r2, r3
 8000d42:	3304      	adds	r3, #4
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	1dfa      	adds	r2, r7, #7
 8000d48:	7812      	ldrb	r2, [r2, #0]
 8000d4a:	0011      	movs	r1, r2
 8000d4c:	2203      	movs	r2, #3
 8000d4e:	400a      	ands	r2, r1
 8000d50:	00d2      	lsls	r2, r2, #3
 8000d52:	21ff      	movs	r1, #255	; 0xff
 8000d54:	4091      	lsls	r1, r2
 8000d56:	000a      	movs	r2, r1
 8000d58:	43d2      	mvns	r2, r2
 8000d5a:	401a      	ands	r2, r3
 8000d5c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000d5e:	683b      	ldr	r3, [r7, #0]
 8000d60:	019b      	lsls	r3, r3, #6
 8000d62:	22ff      	movs	r2, #255	; 0xff
 8000d64:	401a      	ands	r2, r3
 8000d66:	1dfb      	adds	r3, r7, #7
 8000d68:	781b      	ldrb	r3, [r3, #0]
 8000d6a:	0018      	movs	r0, r3
 8000d6c:	2303      	movs	r3, #3
 8000d6e:	4003      	ands	r3, r0
 8000d70:	00db      	lsls	r3, r3, #3
 8000d72:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d74:	4809      	ldr	r0, [pc, #36]	; (8000d9c <__NVIC_SetPriority+0xd8>)
 8000d76:	1dfb      	adds	r3, r7, #7
 8000d78:	781b      	ldrb	r3, [r3, #0]
 8000d7a:	001c      	movs	r4, r3
 8000d7c:	230f      	movs	r3, #15
 8000d7e:	4023      	ands	r3, r4
 8000d80:	3b08      	subs	r3, #8
 8000d82:	089b      	lsrs	r3, r3, #2
 8000d84:	430a      	orrs	r2, r1
 8000d86:	3306      	adds	r3, #6
 8000d88:	009b      	lsls	r3, r3, #2
 8000d8a:	18c3      	adds	r3, r0, r3
 8000d8c:	3304      	adds	r3, #4
 8000d8e:	601a      	str	r2, [r3, #0]
}
 8000d90:	46c0      	nop			; (mov r8, r8)
 8000d92:	46bd      	mov	sp, r7
 8000d94:	b003      	add	sp, #12
 8000d96:	bd90      	pop	{r4, r7, pc}
 8000d98:	e000e100 	.word	0xe000e100
 8000d9c:	e000ed00 	.word	0xe000ed00

08000da0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b082      	sub	sp, #8
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	1e5a      	subs	r2, r3, #1
 8000dac:	2380      	movs	r3, #128	; 0x80
 8000dae:	045b      	lsls	r3, r3, #17
 8000db0:	429a      	cmp	r2, r3
 8000db2:	d301      	bcc.n	8000db8 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000db4:	2301      	movs	r3, #1
 8000db6:	e010      	b.n	8000dda <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000db8:	4b0a      	ldr	r3, [pc, #40]	; (8000de4 <SysTick_Config+0x44>)
 8000dba:	687a      	ldr	r2, [r7, #4]
 8000dbc:	3a01      	subs	r2, #1
 8000dbe:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000dc0:	2301      	movs	r3, #1
 8000dc2:	425b      	negs	r3, r3
 8000dc4:	2103      	movs	r1, #3
 8000dc6:	0018      	movs	r0, r3
 8000dc8:	f7ff ff7c 	bl	8000cc4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000dcc:	4b05      	ldr	r3, [pc, #20]	; (8000de4 <SysTick_Config+0x44>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000dd2:	4b04      	ldr	r3, [pc, #16]	; (8000de4 <SysTick_Config+0x44>)
 8000dd4:	2207      	movs	r2, #7
 8000dd6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000dd8:	2300      	movs	r3, #0
}
 8000dda:	0018      	movs	r0, r3
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	b002      	add	sp, #8
 8000de0:	bd80      	pop	{r7, pc}
 8000de2:	46c0      	nop			; (mov r8, r8)
 8000de4:	e000e010 	.word	0xe000e010

08000de8 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b084      	sub	sp, #16
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	60b9      	str	r1, [r7, #8]
 8000df0:	607a      	str	r2, [r7, #4]
 8000df2:	210f      	movs	r1, #15
 8000df4:	187b      	adds	r3, r7, r1
 8000df6:	1c02      	adds	r2, r0, #0
 8000df8:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8000dfa:	68ba      	ldr	r2, [r7, #8]
 8000dfc:	187b      	adds	r3, r7, r1
 8000dfe:	781b      	ldrb	r3, [r3, #0]
 8000e00:	b25b      	sxtb	r3, r3
 8000e02:	0011      	movs	r1, r2
 8000e04:	0018      	movs	r0, r3
 8000e06:	f7ff ff5d 	bl	8000cc4 <__NVIC_SetPriority>
}
 8000e0a:	46c0      	nop			; (mov r8, r8)
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	b004      	add	sp, #16
 8000e10:	bd80      	pop	{r7, pc}

08000e12 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e12:	b580      	push	{r7, lr}
 8000e14:	b082      	sub	sp, #8
 8000e16:	af00      	add	r7, sp, #0
 8000e18:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	0018      	movs	r0, r3
 8000e1e:	f7ff ffbf 	bl	8000da0 <SysTick_Config>
 8000e22:	0003      	movs	r3, r0
}
 8000e24:	0018      	movs	r0, r3
 8000e26:	46bd      	mov	sp, r7
 8000e28:	b002      	add	sp, #8
 8000e2a:	bd80      	pop	{r7, pc}

08000e2c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b086      	sub	sp, #24
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
 8000e34:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000e36:	2300      	movs	r3, #0
 8000e38:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e3a:	e14d      	b.n	80010d8 <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000e3c:	683b      	ldr	r3, [r7, #0]
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	2101      	movs	r1, #1
 8000e42:	697a      	ldr	r2, [r7, #20]
 8000e44:	4091      	lsls	r1, r2
 8000e46:	000a      	movs	r2, r1
 8000e48:	4013      	ands	r3, r2
 8000e4a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000e4c:	68fb      	ldr	r3, [r7, #12]
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d100      	bne.n	8000e54 <HAL_GPIO_Init+0x28>
 8000e52:	e13e      	b.n	80010d2 <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000e54:	683b      	ldr	r3, [r7, #0]
 8000e56:	685b      	ldr	r3, [r3, #4]
 8000e58:	2203      	movs	r2, #3
 8000e5a:	4013      	ands	r3, r2
 8000e5c:	2b01      	cmp	r3, #1
 8000e5e:	d005      	beq.n	8000e6c <HAL_GPIO_Init+0x40>
 8000e60:	683b      	ldr	r3, [r7, #0]
 8000e62:	685b      	ldr	r3, [r3, #4]
 8000e64:	2203      	movs	r2, #3
 8000e66:	4013      	ands	r3, r2
 8000e68:	2b02      	cmp	r3, #2
 8000e6a:	d130      	bne.n	8000ece <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	689b      	ldr	r3, [r3, #8]
 8000e70:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000e72:	697b      	ldr	r3, [r7, #20]
 8000e74:	005b      	lsls	r3, r3, #1
 8000e76:	2203      	movs	r2, #3
 8000e78:	409a      	lsls	r2, r3
 8000e7a:	0013      	movs	r3, r2
 8000e7c:	43da      	mvns	r2, r3
 8000e7e:	693b      	ldr	r3, [r7, #16]
 8000e80:	4013      	ands	r3, r2
 8000e82:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000e84:	683b      	ldr	r3, [r7, #0]
 8000e86:	68da      	ldr	r2, [r3, #12]
 8000e88:	697b      	ldr	r3, [r7, #20]
 8000e8a:	005b      	lsls	r3, r3, #1
 8000e8c:	409a      	lsls	r2, r3
 8000e8e:	0013      	movs	r3, r2
 8000e90:	693a      	ldr	r2, [r7, #16]
 8000e92:	4313      	orrs	r3, r2
 8000e94:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	693a      	ldr	r2, [r7, #16]
 8000e9a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	685b      	ldr	r3, [r3, #4]
 8000ea0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000ea2:	2201      	movs	r2, #1
 8000ea4:	697b      	ldr	r3, [r7, #20]
 8000ea6:	409a      	lsls	r2, r3
 8000ea8:	0013      	movs	r3, r2
 8000eaa:	43da      	mvns	r2, r3
 8000eac:	693b      	ldr	r3, [r7, #16]
 8000eae:	4013      	ands	r3, r2
 8000eb0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000eb2:	683b      	ldr	r3, [r7, #0]
 8000eb4:	685b      	ldr	r3, [r3, #4]
 8000eb6:	091b      	lsrs	r3, r3, #4
 8000eb8:	2201      	movs	r2, #1
 8000eba:	401a      	ands	r2, r3
 8000ebc:	697b      	ldr	r3, [r7, #20]
 8000ebe:	409a      	lsls	r2, r3
 8000ec0:	0013      	movs	r3, r2
 8000ec2:	693a      	ldr	r2, [r7, #16]
 8000ec4:	4313      	orrs	r3, r2
 8000ec6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	693a      	ldr	r2, [r7, #16]
 8000ecc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ece:	683b      	ldr	r3, [r7, #0]
 8000ed0:	685b      	ldr	r3, [r3, #4]
 8000ed2:	2203      	movs	r2, #3
 8000ed4:	4013      	ands	r3, r2
 8000ed6:	2b03      	cmp	r3, #3
 8000ed8:	d017      	beq.n	8000f0a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	68db      	ldr	r3, [r3, #12]
 8000ede:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000ee0:	697b      	ldr	r3, [r7, #20]
 8000ee2:	005b      	lsls	r3, r3, #1
 8000ee4:	2203      	movs	r2, #3
 8000ee6:	409a      	lsls	r2, r3
 8000ee8:	0013      	movs	r3, r2
 8000eea:	43da      	mvns	r2, r3
 8000eec:	693b      	ldr	r3, [r7, #16]
 8000eee:	4013      	ands	r3, r2
 8000ef0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000ef2:	683b      	ldr	r3, [r7, #0]
 8000ef4:	689a      	ldr	r2, [r3, #8]
 8000ef6:	697b      	ldr	r3, [r7, #20]
 8000ef8:	005b      	lsls	r3, r3, #1
 8000efa:	409a      	lsls	r2, r3
 8000efc:	0013      	movs	r3, r2
 8000efe:	693a      	ldr	r2, [r7, #16]
 8000f00:	4313      	orrs	r3, r2
 8000f02:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	693a      	ldr	r2, [r7, #16]
 8000f08:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f0a:	683b      	ldr	r3, [r7, #0]
 8000f0c:	685b      	ldr	r3, [r3, #4]
 8000f0e:	2203      	movs	r2, #3
 8000f10:	4013      	ands	r3, r2
 8000f12:	2b02      	cmp	r3, #2
 8000f14:	d123      	bne.n	8000f5e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000f16:	697b      	ldr	r3, [r7, #20]
 8000f18:	08da      	lsrs	r2, r3, #3
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	3208      	adds	r2, #8
 8000f1e:	0092      	lsls	r2, r2, #2
 8000f20:	58d3      	ldr	r3, [r2, r3]
 8000f22:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000f24:	697b      	ldr	r3, [r7, #20]
 8000f26:	2207      	movs	r2, #7
 8000f28:	4013      	ands	r3, r2
 8000f2a:	009b      	lsls	r3, r3, #2
 8000f2c:	220f      	movs	r2, #15
 8000f2e:	409a      	lsls	r2, r3
 8000f30:	0013      	movs	r3, r2
 8000f32:	43da      	mvns	r2, r3
 8000f34:	693b      	ldr	r3, [r7, #16]
 8000f36:	4013      	ands	r3, r2
 8000f38:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000f3a:	683b      	ldr	r3, [r7, #0]
 8000f3c:	691a      	ldr	r2, [r3, #16]
 8000f3e:	697b      	ldr	r3, [r7, #20]
 8000f40:	2107      	movs	r1, #7
 8000f42:	400b      	ands	r3, r1
 8000f44:	009b      	lsls	r3, r3, #2
 8000f46:	409a      	lsls	r2, r3
 8000f48:	0013      	movs	r3, r2
 8000f4a:	693a      	ldr	r2, [r7, #16]
 8000f4c:	4313      	orrs	r3, r2
 8000f4e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000f50:	697b      	ldr	r3, [r7, #20]
 8000f52:	08da      	lsrs	r2, r3, #3
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	3208      	adds	r2, #8
 8000f58:	0092      	lsls	r2, r2, #2
 8000f5a:	6939      	ldr	r1, [r7, #16]
 8000f5c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000f64:	697b      	ldr	r3, [r7, #20]
 8000f66:	005b      	lsls	r3, r3, #1
 8000f68:	2203      	movs	r2, #3
 8000f6a:	409a      	lsls	r2, r3
 8000f6c:	0013      	movs	r3, r2
 8000f6e:	43da      	mvns	r2, r3
 8000f70:	693b      	ldr	r3, [r7, #16]
 8000f72:	4013      	ands	r3, r2
 8000f74:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000f76:	683b      	ldr	r3, [r7, #0]
 8000f78:	685b      	ldr	r3, [r3, #4]
 8000f7a:	2203      	movs	r2, #3
 8000f7c:	401a      	ands	r2, r3
 8000f7e:	697b      	ldr	r3, [r7, #20]
 8000f80:	005b      	lsls	r3, r3, #1
 8000f82:	409a      	lsls	r2, r3
 8000f84:	0013      	movs	r3, r2
 8000f86:	693a      	ldr	r2, [r7, #16]
 8000f88:	4313      	orrs	r3, r2
 8000f8a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	693a      	ldr	r2, [r7, #16]
 8000f90:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000f92:	683b      	ldr	r3, [r7, #0]
 8000f94:	685a      	ldr	r2, [r3, #4]
 8000f96:	23c0      	movs	r3, #192	; 0xc0
 8000f98:	029b      	lsls	r3, r3, #10
 8000f9a:	4013      	ands	r3, r2
 8000f9c:	d100      	bne.n	8000fa0 <HAL_GPIO_Init+0x174>
 8000f9e:	e098      	b.n	80010d2 <HAL_GPIO_Init+0x2a6>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8000fa0:	4a53      	ldr	r2, [pc, #332]	; (80010f0 <HAL_GPIO_Init+0x2c4>)
 8000fa2:	697b      	ldr	r3, [r7, #20]
 8000fa4:	089b      	lsrs	r3, r3, #2
 8000fa6:	3318      	adds	r3, #24
 8000fa8:	009b      	lsls	r3, r3, #2
 8000faa:	589b      	ldr	r3, [r3, r2]
 8000fac:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8000fae:	697b      	ldr	r3, [r7, #20]
 8000fb0:	2203      	movs	r2, #3
 8000fb2:	4013      	ands	r3, r2
 8000fb4:	00db      	lsls	r3, r3, #3
 8000fb6:	220f      	movs	r2, #15
 8000fb8:	409a      	lsls	r2, r3
 8000fba:	0013      	movs	r3, r2
 8000fbc:	43da      	mvns	r2, r3
 8000fbe:	693b      	ldr	r3, [r7, #16]
 8000fc0:	4013      	ands	r3, r2
 8000fc2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8000fc4:	687a      	ldr	r2, [r7, #4]
 8000fc6:	23a0      	movs	r3, #160	; 0xa0
 8000fc8:	05db      	lsls	r3, r3, #23
 8000fca:	429a      	cmp	r2, r3
 8000fcc:	d019      	beq.n	8001002 <HAL_GPIO_Init+0x1d6>
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	4a48      	ldr	r2, [pc, #288]	; (80010f4 <HAL_GPIO_Init+0x2c8>)
 8000fd2:	4293      	cmp	r3, r2
 8000fd4:	d013      	beq.n	8000ffe <HAL_GPIO_Init+0x1d2>
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	4a47      	ldr	r2, [pc, #284]	; (80010f8 <HAL_GPIO_Init+0x2cc>)
 8000fda:	4293      	cmp	r3, r2
 8000fdc:	d00d      	beq.n	8000ffa <HAL_GPIO_Init+0x1ce>
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	4a46      	ldr	r2, [pc, #280]	; (80010fc <HAL_GPIO_Init+0x2d0>)
 8000fe2:	4293      	cmp	r3, r2
 8000fe4:	d007      	beq.n	8000ff6 <HAL_GPIO_Init+0x1ca>
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	4a45      	ldr	r2, [pc, #276]	; (8001100 <HAL_GPIO_Init+0x2d4>)
 8000fea:	4293      	cmp	r3, r2
 8000fec:	d101      	bne.n	8000ff2 <HAL_GPIO_Init+0x1c6>
 8000fee:	2304      	movs	r3, #4
 8000ff0:	e008      	b.n	8001004 <HAL_GPIO_Init+0x1d8>
 8000ff2:	2305      	movs	r3, #5
 8000ff4:	e006      	b.n	8001004 <HAL_GPIO_Init+0x1d8>
 8000ff6:	2303      	movs	r3, #3
 8000ff8:	e004      	b.n	8001004 <HAL_GPIO_Init+0x1d8>
 8000ffa:	2302      	movs	r3, #2
 8000ffc:	e002      	b.n	8001004 <HAL_GPIO_Init+0x1d8>
 8000ffe:	2301      	movs	r3, #1
 8001000:	e000      	b.n	8001004 <HAL_GPIO_Init+0x1d8>
 8001002:	2300      	movs	r3, #0
 8001004:	697a      	ldr	r2, [r7, #20]
 8001006:	2103      	movs	r1, #3
 8001008:	400a      	ands	r2, r1
 800100a:	00d2      	lsls	r2, r2, #3
 800100c:	4093      	lsls	r3, r2
 800100e:	693a      	ldr	r2, [r7, #16]
 8001010:	4313      	orrs	r3, r2
 8001012:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8001014:	4936      	ldr	r1, [pc, #216]	; (80010f0 <HAL_GPIO_Init+0x2c4>)
 8001016:	697b      	ldr	r3, [r7, #20]
 8001018:	089b      	lsrs	r3, r3, #2
 800101a:	3318      	adds	r3, #24
 800101c:	009b      	lsls	r3, r3, #2
 800101e:	693a      	ldr	r2, [r7, #16]
 8001020:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001022:	4b33      	ldr	r3, [pc, #204]	; (80010f0 <HAL_GPIO_Init+0x2c4>)
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	43da      	mvns	r2, r3
 800102c:	693b      	ldr	r3, [r7, #16]
 800102e:	4013      	ands	r3, r2
 8001030:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001032:	683b      	ldr	r3, [r7, #0]
 8001034:	685a      	ldr	r2, [r3, #4]
 8001036:	2380      	movs	r3, #128	; 0x80
 8001038:	035b      	lsls	r3, r3, #13
 800103a:	4013      	ands	r3, r2
 800103c:	d003      	beq.n	8001046 <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 800103e:	693a      	ldr	r2, [r7, #16]
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	4313      	orrs	r3, r2
 8001044:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001046:	4b2a      	ldr	r3, [pc, #168]	; (80010f0 <HAL_GPIO_Init+0x2c4>)
 8001048:	693a      	ldr	r2, [r7, #16]
 800104a:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 800104c:	4b28      	ldr	r3, [pc, #160]	; (80010f0 <HAL_GPIO_Init+0x2c4>)
 800104e:	685b      	ldr	r3, [r3, #4]
 8001050:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001052:	68fb      	ldr	r3, [r7, #12]
 8001054:	43da      	mvns	r2, r3
 8001056:	693b      	ldr	r3, [r7, #16]
 8001058:	4013      	ands	r3, r2
 800105a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800105c:	683b      	ldr	r3, [r7, #0]
 800105e:	685a      	ldr	r2, [r3, #4]
 8001060:	2380      	movs	r3, #128	; 0x80
 8001062:	039b      	lsls	r3, r3, #14
 8001064:	4013      	ands	r3, r2
 8001066:	d003      	beq.n	8001070 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 8001068:	693a      	ldr	r2, [r7, #16]
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	4313      	orrs	r3, r2
 800106e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001070:	4b1f      	ldr	r3, [pc, #124]	; (80010f0 <HAL_GPIO_Init+0x2c4>)
 8001072:	693a      	ldr	r2, [r7, #16]
 8001074:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001076:	4a1e      	ldr	r2, [pc, #120]	; (80010f0 <HAL_GPIO_Init+0x2c4>)
 8001078:	2384      	movs	r3, #132	; 0x84
 800107a:	58d3      	ldr	r3, [r2, r3]
 800107c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	43da      	mvns	r2, r3
 8001082:	693b      	ldr	r3, [r7, #16]
 8001084:	4013      	ands	r3, r2
 8001086:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	685a      	ldr	r2, [r3, #4]
 800108c:	2380      	movs	r3, #128	; 0x80
 800108e:	029b      	lsls	r3, r3, #10
 8001090:	4013      	ands	r3, r2
 8001092:	d003      	beq.n	800109c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001094:	693a      	ldr	r2, [r7, #16]
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	4313      	orrs	r3, r2
 800109a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800109c:	4914      	ldr	r1, [pc, #80]	; (80010f0 <HAL_GPIO_Init+0x2c4>)
 800109e:	2284      	movs	r2, #132	; 0x84
 80010a0:	693b      	ldr	r3, [r7, #16]
 80010a2:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 80010a4:	4a12      	ldr	r2, [pc, #72]	; (80010f0 <HAL_GPIO_Init+0x2c4>)
 80010a6:	2380      	movs	r3, #128	; 0x80
 80010a8:	58d3      	ldr	r3, [r2, r3]
 80010aa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	43da      	mvns	r2, r3
 80010b0:	693b      	ldr	r3, [r7, #16]
 80010b2:	4013      	ands	r3, r2
 80010b4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80010b6:	683b      	ldr	r3, [r7, #0]
 80010b8:	685a      	ldr	r2, [r3, #4]
 80010ba:	2380      	movs	r3, #128	; 0x80
 80010bc:	025b      	lsls	r3, r3, #9
 80010be:	4013      	ands	r3, r2
 80010c0:	d003      	beq.n	80010ca <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 80010c2:	693a      	ldr	r2, [r7, #16]
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	4313      	orrs	r3, r2
 80010c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80010ca:	4909      	ldr	r1, [pc, #36]	; (80010f0 <HAL_GPIO_Init+0x2c4>)
 80010cc:	2280      	movs	r2, #128	; 0x80
 80010ce:	693b      	ldr	r3, [r7, #16]
 80010d0:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 80010d2:	697b      	ldr	r3, [r7, #20]
 80010d4:	3301      	adds	r3, #1
 80010d6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010d8:	683b      	ldr	r3, [r7, #0]
 80010da:	681a      	ldr	r2, [r3, #0]
 80010dc:	697b      	ldr	r3, [r7, #20]
 80010de:	40da      	lsrs	r2, r3
 80010e0:	1e13      	subs	r3, r2, #0
 80010e2:	d000      	beq.n	80010e6 <HAL_GPIO_Init+0x2ba>
 80010e4:	e6aa      	b.n	8000e3c <HAL_GPIO_Init+0x10>
  }
}
 80010e6:	46c0      	nop			; (mov r8, r8)
 80010e8:	46c0      	nop			; (mov r8, r8)
 80010ea:	46bd      	mov	sp, r7
 80010ec:	b006      	add	sp, #24
 80010ee:	bd80      	pop	{r7, pc}
 80010f0:	40021800 	.word	0x40021800
 80010f4:	50000400 	.word	0x50000400
 80010f8:	50000800 	.word	0x50000800
 80010fc:	50000c00 	.word	0x50000c00
 8001100:	50001000 	.word	0x50001000

08001104 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b082      	sub	sp, #8
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
 800110c:	0008      	movs	r0, r1
 800110e:	0011      	movs	r1, r2
 8001110:	1cbb      	adds	r3, r7, #2
 8001112:	1c02      	adds	r2, r0, #0
 8001114:	801a      	strh	r2, [r3, #0]
 8001116:	1c7b      	adds	r3, r7, #1
 8001118:	1c0a      	adds	r2, r1, #0
 800111a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800111c:	1c7b      	adds	r3, r7, #1
 800111e:	781b      	ldrb	r3, [r3, #0]
 8001120:	2b00      	cmp	r3, #0
 8001122:	d004      	beq.n	800112e <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001124:	1cbb      	adds	r3, r7, #2
 8001126:	881a      	ldrh	r2, [r3, #0]
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800112c:	e003      	b.n	8001136 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800112e:	1cbb      	adds	r3, r7, #2
 8001130:	881a      	ldrh	r2, [r3, #0]
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001136:	46c0      	nop			; (mov r8, r8)
 8001138:	46bd      	mov	sp, r7
 800113a:	b002      	add	sp, #8
 800113c:	bd80      	pop	{r7, pc}
	...

08001140 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b084      	sub	sp, #16
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001148:	4b19      	ldr	r3, [pc, #100]	; (80011b0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	4a19      	ldr	r2, [pc, #100]	; (80011b4 <HAL_PWREx_ControlVoltageScaling+0x74>)
 800114e:	4013      	ands	r3, r2
 8001150:	0019      	movs	r1, r3
 8001152:	4b17      	ldr	r3, [pc, #92]	; (80011b0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001154:	687a      	ldr	r2, [r7, #4]
 8001156:	430a      	orrs	r2, r1
 8001158:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800115a:	687a      	ldr	r2, [r7, #4]
 800115c:	2380      	movs	r3, #128	; 0x80
 800115e:	009b      	lsls	r3, r3, #2
 8001160:	429a      	cmp	r2, r3
 8001162:	d11f      	bne.n	80011a4 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8001164:	4b14      	ldr	r3, [pc, #80]	; (80011b8 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8001166:	681a      	ldr	r2, [r3, #0]
 8001168:	0013      	movs	r3, r2
 800116a:	005b      	lsls	r3, r3, #1
 800116c:	189b      	adds	r3, r3, r2
 800116e:	005b      	lsls	r3, r3, #1
 8001170:	4912      	ldr	r1, [pc, #72]	; (80011bc <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8001172:	0018      	movs	r0, r3
 8001174:	f7fe ffce 	bl	8000114 <__udivsi3>
 8001178:	0003      	movs	r3, r0
 800117a:	3301      	adds	r3, #1
 800117c:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800117e:	e008      	b.n	8001192 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	2b00      	cmp	r3, #0
 8001184:	d003      	beq.n	800118e <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	3b01      	subs	r3, #1
 800118a:	60fb      	str	r3, [r7, #12]
 800118c:	e001      	b.n	8001192 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 800118e:	2303      	movs	r3, #3
 8001190:	e009      	b.n	80011a6 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001192:	4b07      	ldr	r3, [pc, #28]	; (80011b0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001194:	695a      	ldr	r2, [r3, #20]
 8001196:	2380      	movs	r3, #128	; 0x80
 8001198:	00db      	lsls	r3, r3, #3
 800119a:	401a      	ands	r2, r3
 800119c:	2380      	movs	r3, #128	; 0x80
 800119e:	00db      	lsls	r3, r3, #3
 80011a0:	429a      	cmp	r2, r3
 80011a2:	d0ed      	beq.n	8001180 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 80011a4:	2300      	movs	r3, #0
}
 80011a6:	0018      	movs	r0, r3
 80011a8:	46bd      	mov	sp, r7
 80011aa:	b004      	add	sp, #16
 80011ac:	bd80      	pop	{r7, pc}
 80011ae:	46c0      	nop			; (mov r8, r8)
 80011b0:	40007000 	.word	0x40007000
 80011b4:	fffff9ff 	.word	0xfffff9ff
 80011b8:	20000004 	.word	0x20000004
 80011bc:	000f4240 	.word	0x000f4240

080011c0 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 80011c4:	4b03      	ldr	r3, [pc, #12]	; (80011d4 <LL_RCC_GetAPB1Prescaler+0x14>)
 80011c6:	689a      	ldr	r2, [r3, #8]
 80011c8:	23e0      	movs	r3, #224	; 0xe0
 80011ca:	01db      	lsls	r3, r3, #7
 80011cc:	4013      	ands	r3, r2
}
 80011ce:	0018      	movs	r0, r3
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bd80      	pop	{r7, pc}
 80011d4:	40021000 	.word	0x40021000

080011d8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b088      	sub	sp, #32
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d102      	bne.n	80011ec <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80011e6:	2301      	movs	r3, #1
 80011e8:	f000 fb50 	bl	800188c <HAL_RCC_OscConfig+0x6b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	2201      	movs	r2, #1
 80011f2:	4013      	ands	r3, r2
 80011f4:	d100      	bne.n	80011f8 <HAL_RCC_OscConfig+0x20>
 80011f6:	e07c      	b.n	80012f2 <HAL_RCC_OscConfig+0x11a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80011f8:	4bc3      	ldr	r3, [pc, #780]	; (8001508 <HAL_RCC_OscConfig+0x330>)
 80011fa:	689b      	ldr	r3, [r3, #8]
 80011fc:	2238      	movs	r2, #56	; 0x38
 80011fe:	4013      	ands	r3, r2
 8001200:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001202:	4bc1      	ldr	r3, [pc, #772]	; (8001508 <HAL_RCC_OscConfig+0x330>)
 8001204:	68db      	ldr	r3, [r3, #12]
 8001206:	2203      	movs	r2, #3
 8001208:	4013      	ands	r3, r2
 800120a:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 800120c:	69bb      	ldr	r3, [r7, #24]
 800120e:	2b10      	cmp	r3, #16
 8001210:	d102      	bne.n	8001218 <HAL_RCC_OscConfig+0x40>
 8001212:	697b      	ldr	r3, [r7, #20]
 8001214:	2b03      	cmp	r3, #3
 8001216:	d002      	beq.n	800121e <HAL_RCC_OscConfig+0x46>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8001218:	69bb      	ldr	r3, [r7, #24]
 800121a:	2b08      	cmp	r3, #8
 800121c:	d10b      	bne.n	8001236 <HAL_RCC_OscConfig+0x5e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800121e:	4bba      	ldr	r3, [pc, #744]	; (8001508 <HAL_RCC_OscConfig+0x330>)
 8001220:	681a      	ldr	r2, [r3, #0]
 8001222:	2380      	movs	r3, #128	; 0x80
 8001224:	029b      	lsls	r3, r3, #10
 8001226:	4013      	ands	r3, r2
 8001228:	d062      	beq.n	80012f0 <HAL_RCC_OscConfig+0x118>
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	685b      	ldr	r3, [r3, #4]
 800122e:	2b00      	cmp	r3, #0
 8001230:	d15e      	bne.n	80012f0 <HAL_RCC_OscConfig+0x118>
      {
        return HAL_ERROR;
 8001232:	2301      	movs	r3, #1
 8001234:	e32a      	b.n	800188c <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	685a      	ldr	r2, [r3, #4]
 800123a:	2380      	movs	r3, #128	; 0x80
 800123c:	025b      	lsls	r3, r3, #9
 800123e:	429a      	cmp	r2, r3
 8001240:	d107      	bne.n	8001252 <HAL_RCC_OscConfig+0x7a>
 8001242:	4bb1      	ldr	r3, [pc, #708]	; (8001508 <HAL_RCC_OscConfig+0x330>)
 8001244:	681a      	ldr	r2, [r3, #0]
 8001246:	4bb0      	ldr	r3, [pc, #704]	; (8001508 <HAL_RCC_OscConfig+0x330>)
 8001248:	2180      	movs	r1, #128	; 0x80
 800124a:	0249      	lsls	r1, r1, #9
 800124c:	430a      	orrs	r2, r1
 800124e:	601a      	str	r2, [r3, #0]
 8001250:	e020      	b.n	8001294 <HAL_RCC_OscConfig+0xbc>
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	685a      	ldr	r2, [r3, #4]
 8001256:	23a0      	movs	r3, #160	; 0xa0
 8001258:	02db      	lsls	r3, r3, #11
 800125a:	429a      	cmp	r2, r3
 800125c:	d10e      	bne.n	800127c <HAL_RCC_OscConfig+0xa4>
 800125e:	4baa      	ldr	r3, [pc, #680]	; (8001508 <HAL_RCC_OscConfig+0x330>)
 8001260:	681a      	ldr	r2, [r3, #0]
 8001262:	4ba9      	ldr	r3, [pc, #676]	; (8001508 <HAL_RCC_OscConfig+0x330>)
 8001264:	2180      	movs	r1, #128	; 0x80
 8001266:	02c9      	lsls	r1, r1, #11
 8001268:	430a      	orrs	r2, r1
 800126a:	601a      	str	r2, [r3, #0]
 800126c:	4ba6      	ldr	r3, [pc, #664]	; (8001508 <HAL_RCC_OscConfig+0x330>)
 800126e:	681a      	ldr	r2, [r3, #0]
 8001270:	4ba5      	ldr	r3, [pc, #660]	; (8001508 <HAL_RCC_OscConfig+0x330>)
 8001272:	2180      	movs	r1, #128	; 0x80
 8001274:	0249      	lsls	r1, r1, #9
 8001276:	430a      	orrs	r2, r1
 8001278:	601a      	str	r2, [r3, #0]
 800127a:	e00b      	b.n	8001294 <HAL_RCC_OscConfig+0xbc>
 800127c:	4ba2      	ldr	r3, [pc, #648]	; (8001508 <HAL_RCC_OscConfig+0x330>)
 800127e:	681a      	ldr	r2, [r3, #0]
 8001280:	4ba1      	ldr	r3, [pc, #644]	; (8001508 <HAL_RCC_OscConfig+0x330>)
 8001282:	49a2      	ldr	r1, [pc, #648]	; (800150c <HAL_RCC_OscConfig+0x334>)
 8001284:	400a      	ands	r2, r1
 8001286:	601a      	str	r2, [r3, #0]
 8001288:	4b9f      	ldr	r3, [pc, #636]	; (8001508 <HAL_RCC_OscConfig+0x330>)
 800128a:	681a      	ldr	r2, [r3, #0]
 800128c:	4b9e      	ldr	r3, [pc, #632]	; (8001508 <HAL_RCC_OscConfig+0x330>)
 800128e:	49a0      	ldr	r1, [pc, #640]	; (8001510 <HAL_RCC_OscConfig+0x338>)
 8001290:	400a      	ands	r2, r1
 8001292:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	685b      	ldr	r3, [r3, #4]
 8001298:	2b00      	cmp	r3, #0
 800129a:	d014      	beq.n	80012c6 <HAL_RCC_OscConfig+0xee>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800129c:	f7ff fd08 	bl	8000cb0 <HAL_GetTick>
 80012a0:	0003      	movs	r3, r0
 80012a2:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80012a4:	e008      	b.n	80012b8 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80012a6:	f7ff fd03 	bl	8000cb0 <HAL_GetTick>
 80012aa:	0002      	movs	r2, r0
 80012ac:	693b      	ldr	r3, [r7, #16]
 80012ae:	1ad3      	subs	r3, r2, r3
 80012b0:	2b64      	cmp	r3, #100	; 0x64
 80012b2:	d901      	bls.n	80012b8 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 80012b4:	2303      	movs	r3, #3
 80012b6:	e2e9      	b.n	800188c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80012b8:	4b93      	ldr	r3, [pc, #588]	; (8001508 <HAL_RCC_OscConfig+0x330>)
 80012ba:	681a      	ldr	r2, [r3, #0]
 80012bc:	2380      	movs	r3, #128	; 0x80
 80012be:	029b      	lsls	r3, r3, #10
 80012c0:	4013      	ands	r3, r2
 80012c2:	d0f0      	beq.n	80012a6 <HAL_RCC_OscConfig+0xce>
 80012c4:	e015      	b.n	80012f2 <HAL_RCC_OscConfig+0x11a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012c6:	f7ff fcf3 	bl	8000cb0 <HAL_GetTick>
 80012ca:	0003      	movs	r3, r0
 80012cc:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80012ce:	e008      	b.n	80012e2 <HAL_RCC_OscConfig+0x10a>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80012d0:	f7ff fcee 	bl	8000cb0 <HAL_GetTick>
 80012d4:	0002      	movs	r2, r0
 80012d6:	693b      	ldr	r3, [r7, #16]
 80012d8:	1ad3      	subs	r3, r2, r3
 80012da:	2b64      	cmp	r3, #100	; 0x64
 80012dc:	d901      	bls.n	80012e2 <HAL_RCC_OscConfig+0x10a>
          {
            return HAL_TIMEOUT;
 80012de:	2303      	movs	r3, #3
 80012e0:	e2d4      	b.n	800188c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80012e2:	4b89      	ldr	r3, [pc, #548]	; (8001508 <HAL_RCC_OscConfig+0x330>)
 80012e4:	681a      	ldr	r2, [r3, #0]
 80012e6:	2380      	movs	r3, #128	; 0x80
 80012e8:	029b      	lsls	r3, r3, #10
 80012ea:	4013      	ands	r3, r2
 80012ec:	d1f0      	bne.n	80012d0 <HAL_RCC_OscConfig+0xf8>
 80012ee:	e000      	b.n	80012f2 <HAL_RCC_OscConfig+0x11a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012f0:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	2202      	movs	r2, #2
 80012f8:	4013      	ands	r3, r2
 80012fa:	d100      	bne.n	80012fe <HAL_RCC_OscConfig+0x126>
 80012fc:	e099      	b.n	8001432 <HAL_RCC_OscConfig+0x25a>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80012fe:	4b82      	ldr	r3, [pc, #520]	; (8001508 <HAL_RCC_OscConfig+0x330>)
 8001300:	689b      	ldr	r3, [r3, #8]
 8001302:	2238      	movs	r2, #56	; 0x38
 8001304:	4013      	ands	r3, r2
 8001306:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001308:	4b7f      	ldr	r3, [pc, #508]	; (8001508 <HAL_RCC_OscConfig+0x330>)
 800130a:	68db      	ldr	r3, [r3, #12]
 800130c:	2203      	movs	r2, #3
 800130e:	4013      	ands	r3, r2
 8001310:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8001312:	69bb      	ldr	r3, [r7, #24]
 8001314:	2b10      	cmp	r3, #16
 8001316:	d102      	bne.n	800131e <HAL_RCC_OscConfig+0x146>
 8001318:	697b      	ldr	r3, [r7, #20]
 800131a:	2b02      	cmp	r3, #2
 800131c:	d002      	beq.n	8001324 <HAL_RCC_OscConfig+0x14c>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 800131e:	69bb      	ldr	r3, [r7, #24]
 8001320:	2b00      	cmp	r3, #0
 8001322:	d135      	bne.n	8001390 <HAL_RCC_OscConfig+0x1b8>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001324:	4b78      	ldr	r3, [pc, #480]	; (8001508 <HAL_RCC_OscConfig+0x330>)
 8001326:	681a      	ldr	r2, [r3, #0]
 8001328:	2380      	movs	r3, #128	; 0x80
 800132a:	00db      	lsls	r3, r3, #3
 800132c:	4013      	ands	r3, r2
 800132e:	d005      	beq.n	800133c <HAL_RCC_OscConfig+0x164>
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	68db      	ldr	r3, [r3, #12]
 8001334:	2b00      	cmp	r3, #0
 8001336:	d101      	bne.n	800133c <HAL_RCC_OscConfig+0x164>
      {
        return HAL_ERROR;
 8001338:	2301      	movs	r3, #1
 800133a:	e2a7      	b.n	800188c <HAL_RCC_OscConfig+0x6b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800133c:	4b72      	ldr	r3, [pc, #456]	; (8001508 <HAL_RCC_OscConfig+0x330>)
 800133e:	685b      	ldr	r3, [r3, #4]
 8001340:	4a74      	ldr	r2, [pc, #464]	; (8001514 <HAL_RCC_OscConfig+0x33c>)
 8001342:	4013      	ands	r3, r2
 8001344:	0019      	movs	r1, r3
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	695b      	ldr	r3, [r3, #20]
 800134a:	021a      	lsls	r2, r3, #8
 800134c:	4b6e      	ldr	r3, [pc, #440]	; (8001508 <HAL_RCC_OscConfig+0x330>)
 800134e:	430a      	orrs	r2, r1
 8001350:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001352:	69bb      	ldr	r3, [r7, #24]
 8001354:	2b00      	cmp	r3, #0
 8001356:	d112      	bne.n	800137e <HAL_RCC_OscConfig+0x1a6>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001358:	4b6b      	ldr	r3, [pc, #428]	; (8001508 <HAL_RCC_OscConfig+0x330>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	4a6e      	ldr	r2, [pc, #440]	; (8001518 <HAL_RCC_OscConfig+0x340>)
 800135e:	4013      	ands	r3, r2
 8001360:	0019      	movs	r1, r3
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	691a      	ldr	r2, [r3, #16]
 8001366:	4b68      	ldr	r3, [pc, #416]	; (8001508 <HAL_RCC_OscConfig+0x330>)
 8001368:	430a      	orrs	r2, r1
 800136a:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800136c:	4b66      	ldr	r3, [pc, #408]	; (8001508 <HAL_RCC_OscConfig+0x330>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	0adb      	lsrs	r3, r3, #11
 8001372:	2207      	movs	r2, #7
 8001374:	4013      	ands	r3, r2
 8001376:	4a69      	ldr	r2, [pc, #420]	; (800151c <HAL_RCC_OscConfig+0x344>)
 8001378:	40da      	lsrs	r2, r3
 800137a:	4b69      	ldr	r3, [pc, #420]	; (8001520 <HAL_RCC_OscConfig+0x348>)
 800137c:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800137e:	4b69      	ldr	r3, [pc, #420]	; (8001524 <HAL_RCC_OscConfig+0x34c>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	0018      	movs	r0, r3
 8001384:	f7ff fc38 	bl	8000bf8 <HAL_InitTick>
 8001388:	1e03      	subs	r3, r0, #0
 800138a:	d051      	beq.n	8001430 <HAL_RCC_OscConfig+0x258>
        {
          return HAL_ERROR;
 800138c:	2301      	movs	r3, #1
 800138e:	e27d      	b.n	800188c <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	68db      	ldr	r3, [r3, #12]
 8001394:	2b00      	cmp	r3, #0
 8001396:	d030      	beq.n	80013fa <HAL_RCC_OscConfig+0x222>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001398:	4b5b      	ldr	r3, [pc, #364]	; (8001508 <HAL_RCC_OscConfig+0x330>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	4a5e      	ldr	r2, [pc, #376]	; (8001518 <HAL_RCC_OscConfig+0x340>)
 800139e:	4013      	ands	r3, r2
 80013a0:	0019      	movs	r1, r3
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	691a      	ldr	r2, [r3, #16]
 80013a6:	4b58      	ldr	r3, [pc, #352]	; (8001508 <HAL_RCC_OscConfig+0x330>)
 80013a8:	430a      	orrs	r2, r1
 80013aa:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 80013ac:	4b56      	ldr	r3, [pc, #344]	; (8001508 <HAL_RCC_OscConfig+0x330>)
 80013ae:	681a      	ldr	r2, [r3, #0]
 80013b0:	4b55      	ldr	r3, [pc, #340]	; (8001508 <HAL_RCC_OscConfig+0x330>)
 80013b2:	2180      	movs	r1, #128	; 0x80
 80013b4:	0049      	lsls	r1, r1, #1
 80013b6:	430a      	orrs	r2, r1
 80013b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013ba:	f7ff fc79 	bl	8000cb0 <HAL_GetTick>
 80013be:	0003      	movs	r3, r0
 80013c0:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80013c2:	e008      	b.n	80013d6 <HAL_RCC_OscConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80013c4:	f7ff fc74 	bl	8000cb0 <HAL_GetTick>
 80013c8:	0002      	movs	r2, r0
 80013ca:	693b      	ldr	r3, [r7, #16]
 80013cc:	1ad3      	subs	r3, r2, r3
 80013ce:	2b02      	cmp	r3, #2
 80013d0:	d901      	bls.n	80013d6 <HAL_RCC_OscConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 80013d2:	2303      	movs	r3, #3
 80013d4:	e25a      	b.n	800188c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80013d6:	4b4c      	ldr	r3, [pc, #304]	; (8001508 <HAL_RCC_OscConfig+0x330>)
 80013d8:	681a      	ldr	r2, [r3, #0]
 80013da:	2380      	movs	r3, #128	; 0x80
 80013dc:	00db      	lsls	r3, r3, #3
 80013de:	4013      	ands	r3, r2
 80013e0:	d0f0      	beq.n	80013c4 <HAL_RCC_OscConfig+0x1ec>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013e2:	4b49      	ldr	r3, [pc, #292]	; (8001508 <HAL_RCC_OscConfig+0x330>)
 80013e4:	685b      	ldr	r3, [r3, #4]
 80013e6:	4a4b      	ldr	r2, [pc, #300]	; (8001514 <HAL_RCC_OscConfig+0x33c>)
 80013e8:	4013      	ands	r3, r2
 80013ea:	0019      	movs	r1, r3
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	695b      	ldr	r3, [r3, #20]
 80013f0:	021a      	lsls	r2, r3, #8
 80013f2:	4b45      	ldr	r3, [pc, #276]	; (8001508 <HAL_RCC_OscConfig+0x330>)
 80013f4:	430a      	orrs	r2, r1
 80013f6:	605a      	str	r2, [r3, #4]
 80013f8:	e01b      	b.n	8001432 <HAL_RCC_OscConfig+0x25a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 80013fa:	4b43      	ldr	r3, [pc, #268]	; (8001508 <HAL_RCC_OscConfig+0x330>)
 80013fc:	681a      	ldr	r2, [r3, #0]
 80013fe:	4b42      	ldr	r3, [pc, #264]	; (8001508 <HAL_RCC_OscConfig+0x330>)
 8001400:	4949      	ldr	r1, [pc, #292]	; (8001528 <HAL_RCC_OscConfig+0x350>)
 8001402:	400a      	ands	r2, r1
 8001404:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001406:	f7ff fc53 	bl	8000cb0 <HAL_GetTick>
 800140a:	0003      	movs	r3, r0
 800140c:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800140e:	e008      	b.n	8001422 <HAL_RCC_OscConfig+0x24a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001410:	f7ff fc4e 	bl	8000cb0 <HAL_GetTick>
 8001414:	0002      	movs	r2, r0
 8001416:	693b      	ldr	r3, [r7, #16]
 8001418:	1ad3      	subs	r3, r2, r3
 800141a:	2b02      	cmp	r3, #2
 800141c:	d901      	bls.n	8001422 <HAL_RCC_OscConfig+0x24a>
          {
            return HAL_TIMEOUT;
 800141e:	2303      	movs	r3, #3
 8001420:	e234      	b.n	800188c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001422:	4b39      	ldr	r3, [pc, #228]	; (8001508 <HAL_RCC_OscConfig+0x330>)
 8001424:	681a      	ldr	r2, [r3, #0]
 8001426:	2380      	movs	r3, #128	; 0x80
 8001428:	00db      	lsls	r3, r3, #3
 800142a:	4013      	ands	r3, r2
 800142c:	d1f0      	bne.n	8001410 <HAL_RCC_OscConfig+0x238>
 800142e:	e000      	b.n	8001432 <HAL_RCC_OscConfig+0x25a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001430:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	2208      	movs	r2, #8
 8001438:	4013      	ands	r3, r2
 800143a:	d047      	beq.n	80014cc <HAL_RCC_OscConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800143c:	4b32      	ldr	r3, [pc, #200]	; (8001508 <HAL_RCC_OscConfig+0x330>)
 800143e:	689b      	ldr	r3, [r3, #8]
 8001440:	2238      	movs	r2, #56	; 0x38
 8001442:	4013      	ands	r3, r2
 8001444:	2b18      	cmp	r3, #24
 8001446:	d10a      	bne.n	800145e <HAL_RCC_OscConfig+0x286>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8001448:	4b2f      	ldr	r3, [pc, #188]	; (8001508 <HAL_RCC_OscConfig+0x330>)
 800144a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800144c:	2202      	movs	r2, #2
 800144e:	4013      	ands	r3, r2
 8001450:	d03c      	beq.n	80014cc <HAL_RCC_OscConfig+0x2f4>
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	699b      	ldr	r3, [r3, #24]
 8001456:	2b00      	cmp	r3, #0
 8001458:	d138      	bne.n	80014cc <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 800145a:	2301      	movs	r3, #1
 800145c:	e216      	b.n	800188c <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	699b      	ldr	r3, [r3, #24]
 8001462:	2b00      	cmp	r3, #0
 8001464:	d019      	beq.n	800149a <HAL_RCC_OscConfig+0x2c2>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8001466:	4b28      	ldr	r3, [pc, #160]	; (8001508 <HAL_RCC_OscConfig+0x330>)
 8001468:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800146a:	4b27      	ldr	r3, [pc, #156]	; (8001508 <HAL_RCC_OscConfig+0x330>)
 800146c:	2101      	movs	r1, #1
 800146e:	430a      	orrs	r2, r1
 8001470:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001472:	f7ff fc1d 	bl	8000cb0 <HAL_GetTick>
 8001476:	0003      	movs	r3, r0
 8001478:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800147a:	e008      	b.n	800148e <HAL_RCC_OscConfig+0x2b6>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800147c:	f7ff fc18 	bl	8000cb0 <HAL_GetTick>
 8001480:	0002      	movs	r2, r0
 8001482:	693b      	ldr	r3, [r7, #16]
 8001484:	1ad3      	subs	r3, r2, r3
 8001486:	2b02      	cmp	r3, #2
 8001488:	d901      	bls.n	800148e <HAL_RCC_OscConfig+0x2b6>
          {
            return HAL_TIMEOUT;
 800148a:	2303      	movs	r3, #3
 800148c:	e1fe      	b.n	800188c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800148e:	4b1e      	ldr	r3, [pc, #120]	; (8001508 <HAL_RCC_OscConfig+0x330>)
 8001490:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001492:	2202      	movs	r2, #2
 8001494:	4013      	ands	r3, r2
 8001496:	d0f1      	beq.n	800147c <HAL_RCC_OscConfig+0x2a4>
 8001498:	e018      	b.n	80014cc <HAL_RCC_OscConfig+0x2f4>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 800149a:	4b1b      	ldr	r3, [pc, #108]	; (8001508 <HAL_RCC_OscConfig+0x330>)
 800149c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800149e:	4b1a      	ldr	r3, [pc, #104]	; (8001508 <HAL_RCC_OscConfig+0x330>)
 80014a0:	2101      	movs	r1, #1
 80014a2:	438a      	bics	r2, r1
 80014a4:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014a6:	f7ff fc03 	bl	8000cb0 <HAL_GetTick>
 80014aa:	0003      	movs	r3, r0
 80014ac:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80014ae:	e008      	b.n	80014c2 <HAL_RCC_OscConfig+0x2ea>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80014b0:	f7ff fbfe 	bl	8000cb0 <HAL_GetTick>
 80014b4:	0002      	movs	r2, r0
 80014b6:	693b      	ldr	r3, [r7, #16]
 80014b8:	1ad3      	subs	r3, r2, r3
 80014ba:	2b02      	cmp	r3, #2
 80014bc:	d901      	bls.n	80014c2 <HAL_RCC_OscConfig+0x2ea>
          {
            return HAL_TIMEOUT;
 80014be:	2303      	movs	r3, #3
 80014c0:	e1e4      	b.n	800188c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80014c2:	4b11      	ldr	r3, [pc, #68]	; (8001508 <HAL_RCC_OscConfig+0x330>)
 80014c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014c6:	2202      	movs	r2, #2
 80014c8:	4013      	ands	r3, r2
 80014ca:	d1f1      	bne.n	80014b0 <HAL_RCC_OscConfig+0x2d8>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	2204      	movs	r2, #4
 80014d2:	4013      	ands	r3, r2
 80014d4:	d100      	bne.n	80014d8 <HAL_RCC_OscConfig+0x300>
 80014d6:	e0c7      	b.n	8001668 <HAL_RCC_OscConfig+0x490>
  {
    FlagStatus       pwrclkchanged = RESET;
 80014d8:	231f      	movs	r3, #31
 80014da:	18fb      	adds	r3, r7, r3
 80014dc:	2200      	movs	r2, #0
 80014de:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80014e0:	4b09      	ldr	r3, [pc, #36]	; (8001508 <HAL_RCC_OscConfig+0x330>)
 80014e2:	689b      	ldr	r3, [r3, #8]
 80014e4:	2238      	movs	r2, #56	; 0x38
 80014e6:	4013      	ands	r3, r2
 80014e8:	2b20      	cmp	r3, #32
 80014ea:	d11f      	bne.n	800152c <HAL_RCC_OscConfig+0x354>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 80014ec:	4b06      	ldr	r3, [pc, #24]	; (8001508 <HAL_RCC_OscConfig+0x330>)
 80014ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014f0:	2202      	movs	r2, #2
 80014f2:	4013      	ands	r3, r2
 80014f4:	d100      	bne.n	80014f8 <HAL_RCC_OscConfig+0x320>
 80014f6:	e0b7      	b.n	8001668 <HAL_RCC_OscConfig+0x490>
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	689b      	ldr	r3, [r3, #8]
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d000      	beq.n	8001502 <HAL_RCC_OscConfig+0x32a>
 8001500:	e0b2      	b.n	8001668 <HAL_RCC_OscConfig+0x490>
      {
        return HAL_ERROR;
 8001502:	2301      	movs	r3, #1
 8001504:	e1c2      	b.n	800188c <HAL_RCC_OscConfig+0x6b4>
 8001506:	46c0      	nop			; (mov r8, r8)
 8001508:	40021000 	.word	0x40021000
 800150c:	fffeffff 	.word	0xfffeffff
 8001510:	fffbffff 	.word	0xfffbffff
 8001514:	ffff80ff 	.word	0xffff80ff
 8001518:	ffffc7ff 	.word	0xffffc7ff
 800151c:	00f42400 	.word	0x00f42400
 8001520:	20000004 	.word	0x20000004
 8001524:	20000008 	.word	0x20000008
 8001528:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800152c:	4bb5      	ldr	r3, [pc, #724]	; (8001804 <HAL_RCC_OscConfig+0x62c>)
 800152e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001530:	2380      	movs	r3, #128	; 0x80
 8001532:	055b      	lsls	r3, r3, #21
 8001534:	4013      	ands	r3, r2
 8001536:	d101      	bne.n	800153c <HAL_RCC_OscConfig+0x364>
 8001538:	2301      	movs	r3, #1
 800153a:	e000      	b.n	800153e <HAL_RCC_OscConfig+0x366>
 800153c:	2300      	movs	r3, #0
 800153e:	2b00      	cmp	r3, #0
 8001540:	d011      	beq.n	8001566 <HAL_RCC_OscConfig+0x38e>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8001542:	4bb0      	ldr	r3, [pc, #704]	; (8001804 <HAL_RCC_OscConfig+0x62c>)
 8001544:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001546:	4baf      	ldr	r3, [pc, #700]	; (8001804 <HAL_RCC_OscConfig+0x62c>)
 8001548:	2180      	movs	r1, #128	; 0x80
 800154a:	0549      	lsls	r1, r1, #21
 800154c:	430a      	orrs	r2, r1
 800154e:	63da      	str	r2, [r3, #60]	; 0x3c
 8001550:	4bac      	ldr	r3, [pc, #688]	; (8001804 <HAL_RCC_OscConfig+0x62c>)
 8001552:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001554:	2380      	movs	r3, #128	; 0x80
 8001556:	055b      	lsls	r3, r3, #21
 8001558:	4013      	ands	r3, r2
 800155a:	60fb      	str	r3, [r7, #12]
 800155c:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 800155e:	231f      	movs	r3, #31
 8001560:	18fb      	adds	r3, r7, r3
 8001562:	2201      	movs	r2, #1
 8001564:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001566:	4ba8      	ldr	r3, [pc, #672]	; (8001808 <HAL_RCC_OscConfig+0x630>)
 8001568:	681a      	ldr	r2, [r3, #0]
 800156a:	2380      	movs	r3, #128	; 0x80
 800156c:	005b      	lsls	r3, r3, #1
 800156e:	4013      	ands	r3, r2
 8001570:	d11a      	bne.n	80015a8 <HAL_RCC_OscConfig+0x3d0>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001572:	4ba5      	ldr	r3, [pc, #660]	; (8001808 <HAL_RCC_OscConfig+0x630>)
 8001574:	681a      	ldr	r2, [r3, #0]
 8001576:	4ba4      	ldr	r3, [pc, #656]	; (8001808 <HAL_RCC_OscConfig+0x630>)
 8001578:	2180      	movs	r1, #128	; 0x80
 800157a:	0049      	lsls	r1, r1, #1
 800157c:	430a      	orrs	r2, r1
 800157e:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8001580:	f7ff fb96 	bl	8000cb0 <HAL_GetTick>
 8001584:	0003      	movs	r3, r0
 8001586:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001588:	e008      	b.n	800159c <HAL_RCC_OscConfig+0x3c4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800158a:	f7ff fb91 	bl	8000cb0 <HAL_GetTick>
 800158e:	0002      	movs	r2, r0
 8001590:	693b      	ldr	r3, [r7, #16]
 8001592:	1ad3      	subs	r3, r2, r3
 8001594:	2b02      	cmp	r3, #2
 8001596:	d901      	bls.n	800159c <HAL_RCC_OscConfig+0x3c4>
          {
            return HAL_TIMEOUT;
 8001598:	2303      	movs	r3, #3
 800159a:	e177      	b.n	800188c <HAL_RCC_OscConfig+0x6b4>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800159c:	4b9a      	ldr	r3, [pc, #616]	; (8001808 <HAL_RCC_OscConfig+0x630>)
 800159e:	681a      	ldr	r2, [r3, #0]
 80015a0:	2380      	movs	r3, #128	; 0x80
 80015a2:	005b      	lsls	r3, r3, #1
 80015a4:	4013      	ands	r3, r2
 80015a6:	d0f0      	beq.n	800158a <HAL_RCC_OscConfig+0x3b2>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	689b      	ldr	r3, [r3, #8]
 80015ac:	2b01      	cmp	r3, #1
 80015ae:	d106      	bne.n	80015be <HAL_RCC_OscConfig+0x3e6>
 80015b0:	4b94      	ldr	r3, [pc, #592]	; (8001804 <HAL_RCC_OscConfig+0x62c>)
 80015b2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80015b4:	4b93      	ldr	r3, [pc, #588]	; (8001804 <HAL_RCC_OscConfig+0x62c>)
 80015b6:	2101      	movs	r1, #1
 80015b8:	430a      	orrs	r2, r1
 80015ba:	65da      	str	r2, [r3, #92]	; 0x5c
 80015bc:	e01c      	b.n	80015f8 <HAL_RCC_OscConfig+0x420>
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	689b      	ldr	r3, [r3, #8]
 80015c2:	2b05      	cmp	r3, #5
 80015c4:	d10c      	bne.n	80015e0 <HAL_RCC_OscConfig+0x408>
 80015c6:	4b8f      	ldr	r3, [pc, #572]	; (8001804 <HAL_RCC_OscConfig+0x62c>)
 80015c8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80015ca:	4b8e      	ldr	r3, [pc, #568]	; (8001804 <HAL_RCC_OscConfig+0x62c>)
 80015cc:	2104      	movs	r1, #4
 80015ce:	430a      	orrs	r2, r1
 80015d0:	65da      	str	r2, [r3, #92]	; 0x5c
 80015d2:	4b8c      	ldr	r3, [pc, #560]	; (8001804 <HAL_RCC_OscConfig+0x62c>)
 80015d4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80015d6:	4b8b      	ldr	r3, [pc, #556]	; (8001804 <HAL_RCC_OscConfig+0x62c>)
 80015d8:	2101      	movs	r1, #1
 80015da:	430a      	orrs	r2, r1
 80015dc:	65da      	str	r2, [r3, #92]	; 0x5c
 80015de:	e00b      	b.n	80015f8 <HAL_RCC_OscConfig+0x420>
 80015e0:	4b88      	ldr	r3, [pc, #544]	; (8001804 <HAL_RCC_OscConfig+0x62c>)
 80015e2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80015e4:	4b87      	ldr	r3, [pc, #540]	; (8001804 <HAL_RCC_OscConfig+0x62c>)
 80015e6:	2101      	movs	r1, #1
 80015e8:	438a      	bics	r2, r1
 80015ea:	65da      	str	r2, [r3, #92]	; 0x5c
 80015ec:	4b85      	ldr	r3, [pc, #532]	; (8001804 <HAL_RCC_OscConfig+0x62c>)
 80015ee:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80015f0:	4b84      	ldr	r3, [pc, #528]	; (8001804 <HAL_RCC_OscConfig+0x62c>)
 80015f2:	2104      	movs	r1, #4
 80015f4:	438a      	bics	r2, r1
 80015f6:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	689b      	ldr	r3, [r3, #8]
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d014      	beq.n	800162a <HAL_RCC_OscConfig+0x452>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001600:	f7ff fb56 	bl	8000cb0 <HAL_GetTick>
 8001604:	0003      	movs	r3, r0
 8001606:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001608:	e009      	b.n	800161e <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800160a:	f7ff fb51 	bl	8000cb0 <HAL_GetTick>
 800160e:	0002      	movs	r2, r0
 8001610:	693b      	ldr	r3, [r7, #16]
 8001612:	1ad3      	subs	r3, r2, r3
 8001614:	4a7d      	ldr	r2, [pc, #500]	; (800180c <HAL_RCC_OscConfig+0x634>)
 8001616:	4293      	cmp	r3, r2
 8001618:	d901      	bls.n	800161e <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 800161a:	2303      	movs	r3, #3
 800161c:	e136      	b.n	800188c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800161e:	4b79      	ldr	r3, [pc, #484]	; (8001804 <HAL_RCC_OscConfig+0x62c>)
 8001620:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001622:	2202      	movs	r2, #2
 8001624:	4013      	ands	r3, r2
 8001626:	d0f0      	beq.n	800160a <HAL_RCC_OscConfig+0x432>
 8001628:	e013      	b.n	8001652 <HAL_RCC_OscConfig+0x47a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800162a:	f7ff fb41 	bl	8000cb0 <HAL_GetTick>
 800162e:	0003      	movs	r3, r0
 8001630:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001632:	e009      	b.n	8001648 <HAL_RCC_OscConfig+0x470>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001634:	f7ff fb3c 	bl	8000cb0 <HAL_GetTick>
 8001638:	0002      	movs	r2, r0
 800163a:	693b      	ldr	r3, [r7, #16]
 800163c:	1ad3      	subs	r3, r2, r3
 800163e:	4a73      	ldr	r2, [pc, #460]	; (800180c <HAL_RCC_OscConfig+0x634>)
 8001640:	4293      	cmp	r3, r2
 8001642:	d901      	bls.n	8001648 <HAL_RCC_OscConfig+0x470>
          {
            return HAL_TIMEOUT;
 8001644:	2303      	movs	r3, #3
 8001646:	e121      	b.n	800188c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001648:	4b6e      	ldr	r3, [pc, #440]	; (8001804 <HAL_RCC_OscConfig+0x62c>)
 800164a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800164c:	2202      	movs	r2, #2
 800164e:	4013      	ands	r3, r2
 8001650:	d1f0      	bne.n	8001634 <HAL_RCC_OscConfig+0x45c>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8001652:	231f      	movs	r3, #31
 8001654:	18fb      	adds	r3, r7, r3
 8001656:	781b      	ldrb	r3, [r3, #0]
 8001658:	2b01      	cmp	r3, #1
 800165a:	d105      	bne.n	8001668 <HAL_RCC_OscConfig+0x490>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 800165c:	4b69      	ldr	r3, [pc, #420]	; (8001804 <HAL_RCC_OscConfig+0x62c>)
 800165e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001660:	4b68      	ldr	r3, [pc, #416]	; (8001804 <HAL_RCC_OscConfig+0x62c>)
 8001662:	496b      	ldr	r1, [pc, #428]	; (8001810 <HAL_RCC_OscConfig+0x638>)
 8001664:	400a      	ands	r2, r1
 8001666:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	2220      	movs	r2, #32
 800166e:	4013      	ands	r3, r2
 8001670:	d039      	beq.n	80016e6 <HAL_RCC_OscConfig+0x50e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	69db      	ldr	r3, [r3, #28]
 8001676:	2b00      	cmp	r3, #0
 8001678:	d01b      	beq.n	80016b2 <HAL_RCC_OscConfig+0x4da>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800167a:	4b62      	ldr	r3, [pc, #392]	; (8001804 <HAL_RCC_OscConfig+0x62c>)
 800167c:	681a      	ldr	r2, [r3, #0]
 800167e:	4b61      	ldr	r3, [pc, #388]	; (8001804 <HAL_RCC_OscConfig+0x62c>)
 8001680:	2180      	movs	r1, #128	; 0x80
 8001682:	03c9      	lsls	r1, r1, #15
 8001684:	430a      	orrs	r2, r1
 8001686:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001688:	f7ff fb12 	bl	8000cb0 <HAL_GetTick>
 800168c:	0003      	movs	r3, r0
 800168e:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8001690:	e008      	b.n	80016a4 <HAL_RCC_OscConfig+0x4cc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001692:	f7ff fb0d 	bl	8000cb0 <HAL_GetTick>
 8001696:	0002      	movs	r2, r0
 8001698:	693b      	ldr	r3, [r7, #16]
 800169a:	1ad3      	subs	r3, r2, r3
 800169c:	2b02      	cmp	r3, #2
 800169e:	d901      	bls.n	80016a4 <HAL_RCC_OscConfig+0x4cc>
        {
          return HAL_TIMEOUT;
 80016a0:	2303      	movs	r3, #3
 80016a2:	e0f3      	b.n	800188c <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80016a4:	4b57      	ldr	r3, [pc, #348]	; (8001804 <HAL_RCC_OscConfig+0x62c>)
 80016a6:	681a      	ldr	r2, [r3, #0]
 80016a8:	2380      	movs	r3, #128	; 0x80
 80016aa:	041b      	lsls	r3, r3, #16
 80016ac:	4013      	ands	r3, r2
 80016ae:	d0f0      	beq.n	8001692 <HAL_RCC_OscConfig+0x4ba>
 80016b0:	e019      	b.n	80016e6 <HAL_RCC_OscConfig+0x50e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80016b2:	4b54      	ldr	r3, [pc, #336]	; (8001804 <HAL_RCC_OscConfig+0x62c>)
 80016b4:	681a      	ldr	r2, [r3, #0]
 80016b6:	4b53      	ldr	r3, [pc, #332]	; (8001804 <HAL_RCC_OscConfig+0x62c>)
 80016b8:	4956      	ldr	r1, [pc, #344]	; (8001814 <HAL_RCC_OscConfig+0x63c>)
 80016ba:	400a      	ands	r2, r1
 80016bc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016be:	f7ff faf7 	bl	8000cb0 <HAL_GetTick>
 80016c2:	0003      	movs	r3, r0
 80016c4:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80016c6:	e008      	b.n	80016da <HAL_RCC_OscConfig+0x502>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80016c8:	f7ff faf2 	bl	8000cb0 <HAL_GetTick>
 80016cc:	0002      	movs	r2, r0
 80016ce:	693b      	ldr	r3, [r7, #16]
 80016d0:	1ad3      	subs	r3, r2, r3
 80016d2:	2b02      	cmp	r3, #2
 80016d4:	d901      	bls.n	80016da <HAL_RCC_OscConfig+0x502>
        {
          return HAL_TIMEOUT;
 80016d6:	2303      	movs	r3, #3
 80016d8:	e0d8      	b.n	800188c <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80016da:	4b4a      	ldr	r3, [pc, #296]	; (8001804 <HAL_RCC_OscConfig+0x62c>)
 80016dc:	681a      	ldr	r2, [r3, #0]
 80016de:	2380      	movs	r3, #128	; 0x80
 80016e0:	041b      	lsls	r3, r3, #16
 80016e2:	4013      	ands	r3, r2
 80016e4:	d1f0      	bne.n	80016c8 <HAL_RCC_OscConfig+0x4f0>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	6a1b      	ldr	r3, [r3, #32]
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d100      	bne.n	80016f0 <HAL_RCC_OscConfig+0x518>
 80016ee:	e0cc      	b.n	800188a <HAL_RCC_OscConfig+0x6b2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80016f0:	4b44      	ldr	r3, [pc, #272]	; (8001804 <HAL_RCC_OscConfig+0x62c>)
 80016f2:	689b      	ldr	r3, [r3, #8]
 80016f4:	2238      	movs	r2, #56	; 0x38
 80016f6:	4013      	ands	r3, r2
 80016f8:	2b10      	cmp	r3, #16
 80016fa:	d100      	bne.n	80016fe <HAL_RCC_OscConfig+0x526>
 80016fc:	e07b      	b.n	80017f6 <HAL_RCC_OscConfig+0x61e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	6a1b      	ldr	r3, [r3, #32]
 8001702:	2b02      	cmp	r3, #2
 8001704:	d156      	bne.n	80017b4 <HAL_RCC_OscConfig+0x5dc>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001706:	4b3f      	ldr	r3, [pc, #252]	; (8001804 <HAL_RCC_OscConfig+0x62c>)
 8001708:	681a      	ldr	r2, [r3, #0]
 800170a:	4b3e      	ldr	r3, [pc, #248]	; (8001804 <HAL_RCC_OscConfig+0x62c>)
 800170c:	4942      	ldr	r1, [pc, #264]	; (8001818 <HAL_RCC_OscConfig+0x640>)
 800170e:	400a      	ands	r2, r1
 8001710:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001712:	f7ff facd 	bl	8000cb0 <HAL_GetTick>
 8001716:	0003      	movs	r3, r0
 8001718:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800171a:	e008      	b.n	800172e <HAL_RCC_OscConfig+0x556>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800171c:	f7ff fac8 	bl	8000cb0 <HAL_GetTick>
 8001720:	0002      	movs	r2, r0
 8001722:	693b      	ldr	r3, [r7, #16]
 8001724:	1ad3      	subs	r3, r2, r3
 8001726:	2b02      	cmp	r3, #2
 8001728:	d901      	bls.n	800172e <HAL_RCC_OscConfig+0x556>
          {
            return HAL_TIMEOUT;
 800172a:	2303      	movs	r3, #3
 800172c:	e0ae      	b.n	800188c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800172e:	4b35      	ldr	r3, [pc, #212]	; (8001804 <HAL_RCC_OscConfig+0x62c>)
 8001730:	681a      	ldr	r2, [r3, #0]
 8001732:	2380      	movs	r3, #128	; 0x80
 8001734:	049b      	lsls	r3, r3, #18
 8001736:	4013      	ands	r3, r2
 8001738:	d1f0      	bne.n	800171c <HAL_RCC_OscConfig+0x544>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800173a:	4b32      	ldr	r3, [pc, #200]	; (8001804 <HAL_RCC_OscConfig+0x62c>)
 800173c:	68db      	ldr	r3, [r3, #12]
 800173e:	4a37      	ldr	r2, [pc, #220]	; (800181c <HAL_RCC_OscConfig+0x644>)
 8001740:	4013      	ands	r3, r2
 8001742:	0019      	movs	r1, r3
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800174c:	431a      	orrs	r2, r3
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001752:	021b      	lsls	r3, r3, #8
 8001754:	431a      	orrs	r2, r3
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800175a:	431a      	orrs	r2, r3
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001760:	431a      	orrs	r2, r3
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001766:	431a      	orrs	r2, r3
 8001768:	4b26      	ldr	r3, [pc, #152]	; (8001804 <HAL_RCC_OscConfig+0x62c>)
 800176a:	430a      	orrs	r2, r1
 800176c:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800176e:	4b25      	ldr	r3, [pc, #148]	; (8001804 <HAL_RCC_OscConfig+0x62c>)
 8001770:	681a      	ldr	r2, [r3, #0]
 8001772:	4b24      	ldr	r3, [pc, #144]	; (8001804 <HAL_RCC_OscConfig+0x62c>)
 8001774:	2180      	movs	r1, #128	; 0x80
 8001776:	0449      	lsls	r1, r1, #17
 8001778:	430a      	orrs	r2, r1
 800177a:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 800177c:	4b21      	ldr	r3, [pc, #132]	; (8001804 <HAL_RCC_OscConfig+0x62c>)
 800177e:	68da      	ldr	r2, [r3, #12]
 8001780:	4b20      	ldr	r3, [pc, #128]	; (8001804 <HAL_RCC_OscConfig+0x62c>)
 8001782:	2180      	movs	r1, #128	; 0x80
 8001784:	0549      	lsls	r1, r1, #21
 8001786:	430a      	orrs	r2, r1
 8001788:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800178a:	f7ff fa91 	bl	8000cb0 <HAL_GetTick>
 800178e:	0003      	movs	r3, r0
 8001790:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001792:	e008      	b.n	80017a6 <HAL_RCC_OscConfig+0x5ce>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001794:	f7ff fa8c 	bl	8000cb0 <HAL_GetTick>
 8001798:	0002      	movs	r2, r0
 800179a:	693b      	ldr	r3, [r7, #16]
 800179c:	1ad3      	subs	r3, r2, r3
 800179e:	2b02      	cmp	r3, #2
 80017a0:	d901      	bls.n	80017a6 <HAL_RCC_OscConfig+0x5ce>
          {
            return HAL_TIMEOUT;
 80017a2:	2303      	movs	r3, #3
 80017a4:	e072      	b.n	800188c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80017a6:	4b17      	ldr	r3, [pc, #92]	; (8001804 <HAL_RCC_OscConfig+0x62c>)
 80017a8:	681a      	ldr	r2, [r3, #0]
 80017aa:	2380      	movs	r3, #128	; 0x80
 80017ac:	049b      	lsls	r3, r3, #18
 80017ae:	4013      	ands	r3, r2
 80017b0:	d0f0      	beq.n	8001794 <HAL_RCC_OscConfig+0x5bc>
 80017b2:	e06a      	b.n	800188a <HAL_RCC_OscConfig+0x6b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017b4:	4b13      	ldr	r3, [pc, #76]	; (8001804 <HAL_RCC_OscConfig+0x62c>)
 80017b6:	681a      	ldr	r2, [r3, #0]
 80017b8:	4b12      	ldr	r3, [pc, #72]	; (8001804 <HAL_RCC_OscConfig+0x62c>)
 80017ba:	4917      	ldr	r1, [pc, #92]	; (8001818 <HAL_RCC_OscConfig+0x640>)
 80017bc:	400a      	ands	r2, r1
 80017be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017c0:	f7ff fa76 	bl	8000cb0 <HAL_GetTick>
 80017c4:	0003      	movs	r3, r0
 80017c6:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80017c8:	e008      	b.n	80017dc <HAL_RCC_OscConfig+0x604>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017ca:	f7ff fa71 	bl	8000cb0 <HAL_GetTick>
 80017ce:	0002      	movs	r2, r0
 80017d0:	693b      	ldr	r3, [r7, #16]
 80017d2:	1ad3      	subs	r3, r2, r3
 80017d4:	2b02      	cmp	r3, #2
 80017d6:	d901      	bls.n	80017dc <HAL_RCC_OscConfig+0x604>
          {
            return HAL_TIMEOUT;
 80017d8:	2303      	movs	r3, #3
 80017da:	e057      	b.n	800188c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80017dc:	4b09      	ldr	r3, [pc, #36]	; (8001804 <HAL_RCC_OscConfig+0x62c>)
 80017de:	681a      	ldr	r2, [r3, #0]
 80017e0:	2380      	movs	r3, #128	; 0x80
 80017e2:	049b      	lsls	r3, r3, #18
 80017e4:	4013      	ands	r3, r2
 80017e6:	d1f0      	bne.n	80017ca <HAL_RCC_OscConfig+0x5f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 80017e8:	4b06      	ldr	r3, [pc, #24]	; (8001804 <HAL_RCC_OscConfig+0x62c>)
 80017ea:	68da      	ldr	r2, [r3, #12]
 80017ec:	4b05      	ldr	r3, [pc, #20]	; (8001804 <HAL_RCC_OscConfig+0x62c>)
 80017ee:	490c      	ldr	r1, [pc, #48]	; (8001820 <HAL_RCC_OscConfig+0x648>)
 80017f0:	400a      	ands	r2, r1
 80017f2:	60da      	str	r2, [r3, #12]
 80017f4:	e049      	b.n	800188a <HAL_RCC_OscConfig+0x6b2>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	6a1b      	ldr	r3, [r3, #32]
 80017fa:	2b01      	cmp	r3, #1
 80017fc:	d112      	bne.n	8001824 <HAL_RCC_OscConfig+0x64c>
      {
        return HAL_ERROR;
 80017fe:	2301      	movs	r3, #1
 8001800:	e044      	b.n	800188c <HAL_RCC_OscConfig+0x6b4>
 8001802:	46c0      	nop			; (mov r8, r8)
 8001804:	40021000 	.word	0x40021000
 8001808:	40007000 	.word	0x40007000
 800180c:	00001388 	.word	0x00001388
 8001810:	efffffff 	.word	0xefffffff
 8001814:	ffbfffff 	.word	0xffbfffff
 8001818:	feffffff 	.word	0xfeffffff
 800181c:	11c1808c 	.word	0x11c1808c
 8001820:	eefefffc 	.word	0xeefefffc
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8001824:	4b1b      	ldr	r3, [pc, #108]	; (8001894 <HAL_RCC_OscConfig+0x6bc>)
 8001826:	68db      	ldr	r3, [r3, #12]
 8001828:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800182a:	697b      	ldr	r3, [r7, #20]
 800182c:	2203      	movs	r2, #3
 800182e:	401a      	ands	r2, r3
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001834:	429a      	cmp	r2, r3
 8001836:	d126      	bne.n	8001886 <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001838:	697b      	ldr	r3, [r7, #20]
 800183a:	2270      	movs	r2, #112	; 0x70
 800183c:	401a      	ands	r2, r3
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001842:	429a      	cmp	r2, r3
 8001844:	d11f      	bne.n	8001886 <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001846:	697a      	ldr	r2, [r7, #20]
 8001848:	23fe      	movs	r3, #254	; 0xfe
 800184a:	01db      	lsls	r3, r3, #7
 800184c:	401a      	ands	r2, r3
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001852:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001854:	429a      	cmp	r2, r3
 8001856:	d116      	bne.n	8001886 <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001858:	697a      	ldr	r2, [r7, #20]
 800185a:	23f8      	movs	r3, #248	; 0xf8
 800185c:	039b      	lsls	r3, r3, #14
 800185e:	401a      	ands	r2, r3
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001864:	429a      	cmp	r2, r3
 8001866:	d10e      	bne.n	8001886 <HAL_RCC_OscConfig+0x6ae>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001868:	697a      	ldr	r2, [r7, #20]
 800186a:	23e0      	movs	r3, #224	; 0xe0
 800186c:	051b      	lsls	r3, r3, #20
 800186e:	401a      	ands	r2, r3
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001874:	429a      	cmp	r2, r3
 8001876:	d106      	bne.n	8001886 <HAL_RCC_OscConfig+0x6ae>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8001878:	697b      	ldr	r3, [r7, #20]
 800187a:	0f5b      	lsrs	r3, r3, #29
 800187c:	075a      	lsls	r2, r3, #29
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	6b9b      	ldr	r3, [r3, #56]	; 0x38
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001882:	429a      	cmp	r2, r3
 8001884:	d001      	beq.n	800188a <HAL_RCC_OscConfig+0x6b2>
        {
          return HAL_ERROR;
 8001886:	2301      	movs	r3, #1
 8001888:	e000      	b.n	800188c <HAL_RCC_OscConfig+0x6b4>
        }
      }
    }
  }
  return HAL_OK;
 800188a:	2300      	movs	r3, #0
}
 800188c:	0018      	movs	r0, r3
 800188e:	46bd      	mov	sp, r7
 8001890:	b008      	add	sp, #32
 8001892:	bd80      	pop	{r7, pc}
 8001894:	40021000 	.word	0x40021000

08001898 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b084      	sub	sp, #16
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
 80018a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d101      	bne.n	80018ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80018a8:	2301      	movs	r3, #1
 80018aa:	e0e9      	b.n	8001a80 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80018ac:	4b76      	ldr	r3, [pc, #472]	; (8001a88 <HAL_RCC_ClockConfig+0x1f0>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	2207      	movs	r2, #7
 80018b2:	4013      	ands	r3, r2
 80018b4:	683a      	ldr	r2, [r7, #0]
 80018b6:	429a      	cmp	r2, r3
 80018b8:	d91e      	bls.n	80018f8 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018ba:	4b73      	ldr	r3, [pc, #460]	; (8001a88 <HAL_RCC_ClockConfig+0x1f0>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	2207      	movs	r2, #7
 80018c0:	4393      	bics	r3, r2
 80018c2:	0019      	movs	r1, r3
 80018c4:	4b70      	ldr	r3, [pc, #448]	; (8001a88 <HAL_RCC_ClockConfig+0x1f0>)
 80018c6:	683a      	ldr	r2, [r7, #0]
 80018c8:	430a      	orrs	r2, r1
 80018ca:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80018cc:	f7ff f9f0 	bl	8000cb0 <HAL_GetTick>
 80018d0:	0003      	movs	r3, r0
 80018d2:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80018d4:	e009      	b.n	80018ea <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018d6:	f7ff f9eb 	bl	8000cb0 <HAL_GetTick>
 80018da:	0002      	movs	r2, r0
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	1ad3      	subs	r3, r2, r3
 80018e0:	4a6a      	ldr	r2, [pc, #424]	; (8001a8c <HAL_RCC_ClockConfig+0x1f4>)
 80018e2:	4293      	cmp	r3, r2
 80018e4:	d901      	bls.n	80018ea <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80018e6:	2303      	movs	r3, #3
 80018e8:	e0ca      	b.n	8001a80 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80018ea:	4b67      	ldr	r3, [pc, #412]	; (8001a88 <HAL_RCC_ClockConfig+0x1f0>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	2207      	movs	r2, #7
 80018f0:	4013      	ands	r3, r2
 80018f2:	683a      	ldr	r2, [r7, #0]
 80018f4:	429a      	cmp	r2, r3
 80018f6:	d1ee      	bne.n	80018d6 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	2202      	movs	r2, #2
 80018fe:	4013      	ands	r3, r2
 8001900:	d015      	beq.n	800192e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	2204      	movs	r2, #4
 8001908:	4013      	ands	r3, r2
 800190a:	d006      	beq.n	800191a <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800190c:	4b60      	ldr	r3, [pc, #384]	; (8001a90 <HAL_RCC_ClockConfig+0x1f8>)
 800190e:	689a      	ldr	r2, [r3, #8]
 8001910:	4b5f      	ldr	r3, [pc, #380]	; (8001a90 <HAL_RCC_ClockConfig+0x1f8>)
 8001912:	21e0      	movs	r1, #224	; 0xe0
 8001914:	01c9      	lsls	r1, r1, #7
 8001916:	430a      	orrs	r2, r1
 8001918:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800191a:	4b5d      	ldr	r3, [pc, #372]	; (8001a90 <HAL_RCC_ClockConfig+0x1f8>)
 800191c:	689b      	ldr	r3, [r3, #8]
 800191e:	4a5d      	ldr	r2, [pc, #372]	; (8001a94 <HAL_RCC_ClockConfig+0x1fc>)
 8001920:	4013      	ands	r3, r2
 8001922:	0019      	movs	r1, r3
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	689a      	ldr	r2, [r3, #8]
 8001928:	4b59      	ldr	r3, [pc, #356]	; (8001a90 <HAL_RCC_ClockConfig+0x1f8>)
 800192a:	430a      	orrs	r2, r1
 800192c:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	2201      	movs	r2, #1
 8001934:	4013      	ands	r3, r2
 8001936:	d057      	beq.n	80019e8 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	685b      	ldr	r3, [r3, #4]
 800193c:	2b01      	cmp	r3, #1
 800193e:	d107      	bne.n	8001950 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001940:	4b53      	ldr	r3, [pc, #332]	; (8001a90 <HAL_RCC_ClockConfig+0x1f8>)
 8001942:	681a      	ldr	r2, [r3, #0]
 8001944:	2380      	movs	r3, #128	; 0x80
 8001946:	029b      	lsls	r3, r3, #10
 8001948:	4013      	ands	r3, r2
 800194a:	d12b      	bne.n	80019a4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800194c:	2301      	movs	r3, #1
 800194e:	e097      	b.n	8001a80 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	685b      	ldr	r3, [r3, #4]
 8001954:	2b02      	cmp	r3, #2
 8001956:	d107      	bne.n	8001968 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001958:	4b4d      	ldr	r3, [pc, #308]	; (8001a90 <HAL_RCC_ClockConfig+0x1f8>)
 800195a:	681a      	ldr	r2, [r3, #0]
 800195c:	2380      	movs	r3, #128	; 0x80
 800195e:	049b      	lsls	r3, r3, #18
 8001960:	4013      	ands	r3, r2
 8001962:	d11f      	bne.n	80019a4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001964:	2301      	movs	r3, #1
 8001966:	e08b      	b.n	8001a80 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	685b      	ldr	r3, [r3, #4]
 800196c:	2b00      	cmp	r3, #0
 800196e:	d107      	bne.n	8001980 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001970:	4b47      	ldr	r3, [pc, #284]	; (8001a90 <HAL_RCC_ClockConfig+0x1f8>)
 8001972:	681a      	ldr	r2, [r3, #0]
 8001974:	2380      	movs	r3, #128	; 0x80
 8001976:	00db      	lsls	r3, r3, #3
 8001978:	4013      	ands	r3, r2
 800197a:	d113      	bne.n	80019a4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800197c:	2301      	movs	r3, #1
 800197e:	e07f      	b.n	8001a80 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	685b      	ldr	r3, [r3, #4]
 8001984:	2b03      	cmp	r3, #3
 8001986:	d106      	bne.n	8001996 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001988:	4b41      	ldr	r3, [pc, #260]	; (8001a90 <HAL_RCC_ClockConfig+0x1f8>)
 800198a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800198c:	2202      	movs	r2, #2
 800198e:	4013      	ands	r3, r2
 8001990:	d108      	bne.n	80019a4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001992:	2301      	movs	r3, #1
 8001994:	e074      	b.n	8001a80 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001996:	4b3e      	ldr	r3, [pc, #248]	; (8001a90 <HAL_RCC_ClockConfig+0x1f8>)
 8001998:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800199a:	2202      	movs	r2, #2
 800199c:	4013      	ands	r3, r2
 800199e:	d101      	bne.n	80019a4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80019a0:	2301      	movs	r3, #1
 80019a2:	e06d      	b.n	8001a80 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80019a4:	4b3a      	ldr	r3, [pc, #232]	; (8001a90 <HAL_RCC_ClockConfig+0x1f8>)
 80019a6:	689b      	ldr	r3, [r3, #8]
 80019a8:	2207      	movs	r2, #7
 80019aa:	4393      	bics	r3, r2
 80019ac:	0019      	movs	r1, r3
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	685a      	ldr	r2, [r3, #4]
 80019b2:	4b37      	ldr	r3, [pc, #220]	; (8001a90 <HAL_RCC_ClockConfig+0x1f8>)
 80019b4:	430a      	orrs	r2, r1
 80019b6:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80019b8:	f7ff f97a 	bl	8000cb0 <HAL_GetTick>
 80019bc:	0003      	movs	r3, r0
 80019be:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019c0:	e009      	b.n	80019d6 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019c2:	f7ff f975 	bl	8000cb0 <HAL_GetTick>
 80019c6:	0002      	movs	r2, r0
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	1ad3      	subs	r3, r2, r3
 80019cc:	4a2f      	ldr	r2, [pc, #188]	; (8001a8c <HAL_RCC_ClockConfig+0x1f4>)
 80019ce:	4293      	cmp	r3, r2
 80019d0:	d901      	bls.n	80019d6 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 80019d2:	2303      	movs	r3, #3
 80019d4:	e054      	b.n	8001a80 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019d6:	4b2e      	ldr	r3, [pc, #184]	; (8001a90 <HAL_RCC_ClockConfig+0x1f8>)
 80019d8:	689b      	ldr	r3, [r3, #8]
 80019da:	2238      	movs	r2, #56	; 0x38
 80019dc:	401a      	ands	r2, r3
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	685b      	ldr	r3, [r3, #4]
 80019e2:	00db      	lsls	r3, r3, #3
 80019e4:	429a      	cmp	r2, r3
 80019e6:	d1ec      	bne.n	80019c2 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80019e8:	4b27      	ldr	r3, [pc, #156]	; (8001a88 <HAL_RCC_ClockConfig+0x1f0>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	2207      	movs	r2, #7
 80019ee:	4013      	ands	r3, r2
 80019f0:	683a      	ldr	r2, [r7, #0]
 80019f2:	429a      	cmp	r2, r3
 80019f4:	d21e      	bcs.n	8001a34 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019f6:	4b24      	ldr	r3, [pc, #144]	; (8001a88 <HAL_RCC_ClockConfig+0x1f0>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	2207      	movs	r2, #7
 80019fc:	4393      	bics	r3, r2
 80019fe:	0019      	movs	r1, r3
 8001a00:	4b21      	ldr	r3, [pc, #132]	; (8001a88 <HAL_RCC_ClockConfig+0x1f0>)
 8001a02:	683a      	ldr	r2, [r7, #0]
 8001a04:	430a      	orrs	r2, r1
 8001a06:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001a08:	f7ff f952 	bl	8000cb0 <HAL_GetTick>
 8001a0c:	0003      	movs	r3, r0
 8001a0e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001a10:	e009      	b.n	8001a26 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a12:	f7ff f94d 	bl	8000cb0 <HAL_GetTick>
 8001a16:	0002      	movs	r2, r0
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	1ad3      	subs	r3, r2, r3
 8001a1c:	4a1b      	ldr	r2, [pc, #108]	; (8001a8c <HAL_RCC_ClockConfig+0x1f4>)
 8001a1e:	4293      	cmp	r3, r2
 8001a20:	d901      	bls.n	8001a26 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8001a22:	2303      	movs	r3, #3
 8001a24:	e02c      	b.n	8001a80 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001a26:	4b18      	ldr	r3, [pc, #96]	; (8001a88 <HAL_RCC_ClockConfig+0x1f0>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	2207      	movs	r2, #7
 8001a2c:	4013      	ands	r3, r2
 8001a2e:	683a      	ldr	r2, [r7, #0]
 8001a30:	429a      	cmp	r2, r3
 8001a32:	d1ee      	bne.n	8001a12 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	2204      	movs	r2, #4
 8001a3a:	4013      	ands	r3, r2
 8001a3c:	d009      	beq.n	8001a52 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001a3e:	4b14      	ldr	r3, [pc, #80]	; (8001a90 <HAL_RCC_ClockConfig+0x1f8>)
 8001a40:	689b      	ldr	r3, [r3, #8]
 8001a42:	4a15      	ldr	r2, [pc, #84]	; (8001a98 <HAL_RCC_ClockConfig+0x200>)
 8001a44:	4013      	ands	r3, r2
 8001a46:	0019      	movs	r1, r3
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	68da      	ldr	r2, [r3, #12]
 8001a4c:	4b10      	ldr	r3, [pc, #64]	; (8001a90 <HAL_RCC_ClockConfig+0x1f8>)
 8001a4e:	430a      	orrs	r2, r1
 8001a50:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001a52:	f000 f829 	bl	8001aa8 <HAL_RCC_GetSysClockFreq>
 8001a56:	0001      	movs	r1, r0
 8001a58:	4b0d      	ldr	r3, [pc, #52]	; (8001a90 <HAL_RCC_ClockConfig+0x1f8>)
 8001a5a:	689b      	ldr	r3, [r3, #8]
 8001a5c:	0a1b      	lsrs	r3, r3, #8
 8001a5e:	220f      	movs	r2, #15
 8001a60:	401a      	ands	r2, r3
 8001a62:	4b0e      	ldr	r3, [pc, #56]	; (8001a9c <HAL_RCC_ClockConfig+0x204>)
 8001a64:	0092      	lsls	r2, r2, #2
 8001a66:	58d3      	ldr	r3, [r2, r3]
 8001a68:	221f      	movs	r2, #31
 8001a6a:	4013      	ands	r3, r2
 8001a6c:	000a      	movs	r2, r1
 8001a6e:	40da      	lsrs	r2, r3
 8001a70:	4b0b      	ldr	r3, [pc, #44]	; (8001aa0 <HAL_RCC_ClockConfig+0x208>)
 8001a72:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001a74:	4b0b      	ldr	r3, [pc, #44]	; (8001aa4 <HAL_RCC_ClockConfig+0x20c>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	0018      	movs	r0, r3
 8001a7a:	f7ff f8bd 	bl	8000bf8 <HAL_InitTick>
 8001a7e:	0003      	movs	r3, r0
}
 8001a80:	0018      	movs	r0, r3
 8001a82:	46bd      	mov	sp, r7
 8001a84:	b004      	add	sp, #16
 8001a86:	bd80      	pop	{r7, pc}
 8001a88:	40022000 	.word	0x40022000
 8001a8c:	00001388 	.word	0x00001388
 8001a90:	40021000 	.word	0x40021000
 8001a94:	fffff0ff 	.word	0xfffff0ff
 8001a98:	ffff8fff 	.word	0xffff8fff
 8001a9c:	0800310c 	.word	0x0800310c
 8001aa0:	20000004 	.word	0x20000004
 8001aa4:	20000008 	.word	0x20000008

08001aa8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b086      	sub	sp, #24
 8001aac:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001aae:	4b3c      	ldr	r3, [pc, #240]	; (8001ba0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001ab0:	689b      	ldr	r3, [r3, #8]
 8001ab2:	2238      	movs	r2, #56	; 0x38
 8001ab4:	4013      	ands	r3, r2
 8001ab6:	d10f      	bne.n	8001ad8 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001ab8:	4b39      	ldr	r3, [pc, #228]	; (8001ba0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	0adb      	lsrs	r3, r3, #11
 8001abe:	2207      	movs	r2, #7
 8001ac0:	4013      	ands	r3, r2
 8001ac2:	2201      	movs	r2, #1
 8001ac4:	409a      	lsls	r2, r3
 8001ac6:	0013      	movs	r3, r2
 8001ac8:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8001aca:	6839      	ldr	r1, [r7, #0]
 8001acc:	4835      	ldr	r0, [pc, #212]	; (8001ba4 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001ace:	f7fe fb21 	bl	8000114 <__udivsi3>
 8001ad2:	0003      	movs	r3, r0
 8001ad4:	613b      	str	r3, [r7, #16]
 8001ad6:	e05d      	b.n	8001b94 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001ad8:	4b31      	ldr	r3, [pc, #196]	; (8001ba0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001ada:	689b      	ldr	r3, [r3, #8]
 8001adc:	2238      	movs	r2, #56	; 0x38
 8001ade:	4013      	ands	r3, r2
 8001ae0:	2b08      	cmp	r3, #8
 8001ae2:	d102      	bne.n	8001aea <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001ae4:	4b30      	ldr	r3, [pc, #192]	; (8001ba8 <HAL_RCC_GetSysClockFreq+0x100>)
 8001ae6:	613b      	str	r3, [r7, #16]
 8001ae8:	e054      	b.n	8001b94 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001aea:	4b2d      	ldr	r3, [pc, #180]	; (8001ba0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001aec:	689b      	ldr	r3, [r3, #8]
 8001aee:	2238      	movs	r2, #56	; 0x38
 8001af0:	4013      	ands	r3, r2
 8001af2:	2b10      	cmp	r3, #16
 8001af4:	d138      	bne.n	8001b68 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8001af6:	4b2a      	ldr	r3, [pc, #168]	; (8001ba0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001af8:	68db      	ldr	r3, [r3, #12]
 8001afa:	2203      	movs	r2, #3
 8001afc:	4013      	ands	r3, r2
 8001afe:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001b00:	4b27      	ldr	r3, [pc, #156]	; (8001ba0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001b02:	68db      	ldr	r3, [r3, #12]
 8001b04:	091b      	lsrs	r3, r3, #4
 8001b06:	2207      	movs	r2, #7
 8001b08:	4013      	ands	r3, r2
 8001b0a:	3301      	adds	r3, #1
 8001b0c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	2b03      	cmp	r3, #3
 8001b12:	d10d      	bne.n	8001b30 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001b14:	68b9      	ldr	r1, [r7, #8]
 8001b16:	4824      	ldr	r0, [pc, #144]	; (8001ba8 <HAL_RCC_GetSysClockFreq+0x100>)
 8001b18:	f7fe fafc 	bl	8000114 <__udivsi3>
 8001b1c:	0003      	movs	r3, r0
 8001b1e:	0019      	movs	r1, r3
 8001b20:	4b1f      	ldr	r3, [pc, #124]	; (8001ba0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001b22:	68db      	ldr	r3, [r3, #12]
 8001b24:	0a1b      	lsrs	r3, r3, #8
 8001b26:	227f      	movs	r2, #127	; 0x7f
 8001b28:	4013      	ands	r3, r2
 8001b2a:	434b      	muls	r3, r1
 8001b2c:	617b      	str	r3, [r7, #20]
        break;
 8001b2e:	e00d      	b.n	8001b4c <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8001b30:	68b9      	ldr	r1, [r7, #8]
 8001b32:	481c      	ldr	r0, [pc, #112]	; (8001ba4 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001b34:	f7fe faee 	bl	8000114 <__udivsi3>
 8001b38:	0003      	movs	r3, r0
 8001b3a:	0019      	movs	r1, r3
 8001b3c:	4b18      	ldr	r3, [pc, #96]	; (8001ba0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001b3e:	68db      	ldr	r3, [r3, #12]
 8001b40:	0a1b      	lsrs	r3, r3, #8
 8001b42:	227f      	movs	r2, #127	; 0x7f
 8001b44:	4013      	ands	r3, r2
 8001b46:	434b      	muls	r3, r1
 8001b48:	617b      	str	r3, [r7, #20]
        break;
 8001b4a:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8001b4c:	4b14      	ldr	r3, [pc, #80]	; (8001ba0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001b4e:	68db      	ldr	r3, [r3, #12]
 8001b50:	0f5b      	lsrs	r3, r3, #29
 8001b52:	2207      	movs	r2, #7
 8001b54:	4013      	ands	r3, r2
 8001b56:	3301      	adds	r3, #1
 8001b58:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8001b5a:	6879      	ldr	r1, [r7, #4]
 8001b5c:	6978      	ldr	r0, [r7, #20]
 8001b5e:	f7fe fad9 	bl	8000114 <__udivsi3>
 8001b62:	0003      	movs	r3, r0
 8001b64:	613b      	str	r3, [r7, #16]
 8001b66:	e015      	b.n	8001b94 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001b68:	4b0d      	ldr	r3, [pc, #52]	; (8001ba0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001b6a:	689b      	ldr	r3, [r3, #8]
 8001b6c:	2238      	movs	r2, #56	; 0x38
 8001b6e:	4013      	ands	r3, r2
 8001b70:	2b20      	cmp	r3, #32
 8001b72:	d103      	bne.n	8001b7c <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8001b74:	2380      	movs	r3, #128	; 0x80
 8001b76:	021b      	lsls	r3, r3, #8
 8001b78:	613b      	str	r3, [r7, #16]
 8001b7a:	e00b      	b.n	8001b94 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001b7c:	4b08      	ldr	r3, [pc, #32]	; (8001ba0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001b7e:	689b      	ldr	r3, [r3, #8]
 8001b80:	2238      	movs	r2, #56	; 0x38
 8001b82:	4013      	ands	r3, r2
 8001b84:	2b18      	cmp	r3, #24
 8001b86:	d103      	bne.n	8001b90 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8001b88:	23fa      	movs	r3, #250	; 0xfa
 8001b8a:	01db      	lsls	r3, r3, #7
 8001b8c:	613b      	str	r3, [r7, #16]
 8001b8e:	e001      	b.n	8001b94 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8001b90:	2300      	movs	r3, #0
 8001b92:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001b94:	693b      	ldr	r3, [r7, #16]
}
 8001b96:	0018      	movs	r0, r3
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	b006      	add	sp, #24
 8001b9c:	bd80      	pop	{r7, pc}
 8001b9e:	46c0      	nop			; (mov r8, r8)
 8001ba0:	40021000 	.word	0x40021000
 8001ba4:	00f42400 	.word	0x00f42400
 8001ba8:	007a1200 	.word	0x007a1200

08001bac <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001bb0:	4b02      	ldr	r3, [pc, #8]	; (8001bbc <HAL_RCC_GetHCLKFreq+0x10>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
}
 8001bb4:	0018      	movs	r0, r3
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bd80      	pop	{r7, pc}
 8001bba:	46c0      	nop			; (mov r8, r8)
 8001bbc:	20000004 	.word	0x20000004

08001bc0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001bc0:	b5b0      	push	{r4, r5, r7, lr}
 8001bc2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8001bc4:	f7ff fff2 	bl	8001bac <HAL_RCC_GetHCLKFreq>
 8001bc8:	0004      	movs	r4, r0
 8001bca:	f7ff faf9 	bl	80011c0 <LL_RCC_GetAPB1Prescaler>
 8001bce:	0003      	movs	r3, r0
 8001bd0:	0b1a      	lsrs	r2, r3, #12
 8001bd2:	4b05      	ldr	r3, [pc, #20]	; (8001be8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001bd4:	0092      	lsls	r2, r2, #2
 8001bd6:	58d3      	ldr	r3, [r2, r3]
 8001bd8:	221f      	movs	r2, #31
 8001bda:	4013      	ands	r3, r2
 8001bdc:	40dc      	lsrs	r4, r3
 8001bde:	0023      	movs	r3, r4
}
 8001be0:	0018      	movs	r0, r3
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bdb0      	pop	{r4, r5, r7, pc}
 8001be6:	46c0      	nop			; (mov r8, r8)
 8001be8:	0800314c 	.word	0x0800314c

08001bec <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b086      	sub	sp, #24
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8001bf4:	2313      	movs	r3, #19
 8001bf6:	18fb      	adds	r3, r7, r3
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001bfc:	2312      	movs	r3, #18
 8001bfe:	18fb      	adds	r3, r7, r3
 8001c00:	2200      	movs	r2, #0
 8001c02:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681a      	ldr	r2, [r3, #0]
 8001c08:	2380      	movs	r3, #128	; 0x80
 8001c0a:	029b      	lsls	r3, r3, #10
 8001c0c:	4013      	ands	r3, r2
 8001c0e:	d100      	bne.n	8001c12 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8001c10:	e0ad      	b.n	8001d6e <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c12:	2011      	movs	r0, #17
 8001c14:	183b      	adds	r3, r7, r0
 8001c16:	2200      	movs	r2, #0
 8001c18:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c1a:	4b47      	ldr	r3, [pc, #284]	; (8001d38 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001c1c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001c1e:	2380      	movs	r3, #128	; 0x80
 8001c20:	055b      	lsls	r3, r3, #21
 8001c22:	4013      	ands	r3, r2
 8001c24:	d110      	bne.n	8001c48 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c26:	4b44      	ldr	r3, [pc, #272]	; (8001d38 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001c28:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001c2a:	4b43      	ldr	r3, [pc, #268]	; (8001d38 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001c2c:	2180      	movs	r1, #128	; 0x80
 8001c2e:	0549      	lsls	r1, r1, #21
 8001c30:	430a      	orrs	r2, r1
 8001c32:	63da      	str	r2, [r3, #60]	; 0x3c
 8001c34:	4b40      	ldr	r3, [pc, #256]	; (8001d38 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001c36:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001c38:	2380      	movs	r3, #128	; 0x80
 8001c3a:	055b      	lsls	r3, r3, #21
 8001c3c:	4013      	ands	r3, r2
 8001c3e:	60bb      	str	r3, [r7, #8]
 8001c40:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c42:	183b      	adds	r3, r7, r0
 8001c44:	2201      	movs	r2, #1
 8001c46:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001c48:	4b3c      	ldr	r3, [pc, #240]	; (8001d3c <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8001c4a:	681a      	ldr	r2, [r3, #0]
 8001c4c:	4b3b      	ldr	r3, [pc, #236]	; (8001d3c <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8001c4e:	2180      	movs	r1, #128	; 0x80
 8001c50:	0049      	lsls	r1, r1, #1
 8001c52:	430a      	orrs	r2, r1
 8001c54:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001c56:	f7ff f82b 	bl	8000cb0 <HAL_GetTick>
 8001c5a:	0003      	movs	r3, r0
 8001c5c:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001c5e:	e00b      	b.n	8001c78 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c60:	f7ff f826 	bl	8000cb0 <HAL_GetTick>
 8001c64:	0002      	movs	r2, r0
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	1ad3      	subs	r3, r2, r3
 8001c6a:	2b02      	cmp	r3, #2
 8001c6c:	d904      	bls.n	8001c78 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8001c6e:	2313      	movs	r3, #19
 8001c70:	18fb      	adds	r3, r7, r3
 8001c72:	2203      	movs	r2, #3
 8001c74:	701a      	strb	r2, [r3, #0]
        break;
 8001c76:	e005      	b.n	8001c84 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001c78:	4b30      	ldr	r3, [pc, #192]	; (8001d3c <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8001c7a:	681a      	ldr	r2, [r3, #0]
 8001c7c:	2380      	movs	r3, #128	; 0x80
 8001c7e:	005b      	lsls	r3, r3, #1
 8001c80:	4013      	ands	r3, r2
 8001c82:	d0ed      	beq.n	8001c60 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8001c84:	2313      	movs	r3, #19
 8001c86:	18fb      	adds	r3, r7, r3
 8001c88:	781b      	ldrb	r3, [r3, #0]
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d15e      	bne.n	8001d4c <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001c8e:	4b2a      	ldr	r3, [pc, #168]	; (8001d38 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001c90:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001c92:	23c0      	movs	r3, #192	; 0xc0
 8001c94:	009b      	lsls	r3, r3, #2
 8001c96:	4013      	ands	r3, r2
 8001c98:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001c9a:	697b      	ldr	r3, [r7, #20]
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d019      	beq.n	8001cd4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ca4:	697a      	ldr	r2, [r7, #20]
 8001ca6:	429a      	cmp	r2, r3
 8001ca8:	d014      	beq.n	8001cd4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001caa:	4b23      	ldr	r3, [pc, #140]	; (8001d38 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001cac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cae:	4a24      	ldr	r2, [pc, #144]	; (8001d40 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8001cb0:	4013      	ands	r3, r2
 8001cb2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001cb4:	4b20      	ldr	r3, [pc, #128]	; (8001d38 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001cb6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001cb8:	4b1f      	ldr	r3, [pc, #124]	; (8001d38 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001cba:	2180      	movs	r1, #128	; 0x80
 8001cbc:	0249      	lsls	r1, r1, #9
 8001cbe:	430a      	orrs	r2, r1
 8001cc0:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001cc2:	4b1d      	ldr	r3, [pc, #116]	; (8001d38 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001cc4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001cc6:	4b1c      	ldr	r3, [pc, #112]	; (8001d38 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001cc8:	491e      	ldr	r1, [pc, #120]	; (8001d44 <HAL_RCCEx_PeriphCLKConfig+0x158>)
 8001cca:	400a      	ands	r2, r1
 8001ccc:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001cce:	4b1a      	ldr	r3, [pc, #104]	; (8001d38 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001cd0:	697a      	ldr	r2, [r7, #20]
 8001cd2:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001cd4:	697b      	ldr	r3, [r7, #20]
 8001cd6:	2201      	movs	r2, #1
 8001cd8:	4013      	ands	r3, r2
 8001cda:	d016      	beq.n	8001d0a <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cdc:	f7fe ffe8 	bl	8000cb0 <HAL_GetTick>
 8001ce0:	0003      	movs	r3, r0
 8001ce2:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ce4:	e00c      	b.n	8001d00 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ce6:	f7fe ffe3 	bl	8000cb0 <HAL_GetTick>
 8001cea:	0002      	movs	r2, r0
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	1ad3      	subs	r3, r2, r3
 8001cf0:	4a15      	ldr	r2, [pc, #84]	; (8001d48 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8001cf2:	4293      	cmp	r3, r2
 8001cf4:	d904      	bls.n	8001d00 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8001cf6:	2313      	movs	r3, #19
 8001cf8:	18fb      	adds	r3, r7, r3
 8001cfa:	2203      	movs	r2, #3
 8001cfc:	701a      	strb	r2, [r3, #0]
            break;
 8001cfe:	e004      	b.n	8001d0a <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001d00:	4b0d      	ldr	r3, [pc, #52]	; (8001d38 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001d02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d04:	2202      	movs	r2, #2
 8001d06:	4013      	ands	r3, r2
 8001d08:	d0ed      	beq.n	8001ce6 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8001d0a:	2313      	movs	r3, #19
 8001d0c:	18fb      	adds	r3, r7, r3
 8001d0e:	781b      	ldrb	r3, [r3, #0]
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d10a      	bne.n	8001d2a <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001d14:	4b08      	ldr	r3, [pc, #32]	; (8001d38 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001d16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d18:	4a09      	ldr	r2, [pc, #36]	; (8001d40 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8001d1a:	4013      	ands	r3, r2
 8001d1c:	0019      	movs	r1, r3
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001d22:	4b05      	ldr	r3, [pc, #20]	; (8001d38 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001d24:	430a      	orrs	r2, r1
 8001d26:	65da      	str	r2, [r3, #92]	; 0x5c
 8001d28:	e016      	b.n	8001d58 <HAL_RCCEx_PeriphCLKConfig+0x16c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001d2a:	2312      	movs	r3, #18
 8001d2c:	18fb      	adds	r3, r7, r3
 8001d2e:	2213      	movs	r2, #19
 8001d30:	18ba      	adds	r2, r7, r2
 8001d32:	7812      	ldrb	r2, [r2, #0]
 8001d34:	701a      	strb	r2, [r3, #0]
 8001d36:	e00f      	b.n	8001d58 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8001d38:	40021000 	.word	0x40021000
 8001d3c:	40007000 	.word	0x40007000
 8001d40:	fffffcff 	.word	0xfffffcff
 8001d44:	fffeffff 	.word	0xfffeffff
 8001d48:	00001388 	.word	0x00001388
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001d4c:	2312      	movs	r3, #18
 8001d4e:	18fb      	adds	r3, r7, r3
 8001d50:	2213      	movs	r2, #19
 8001d52:	18ba      	adds	r2, r7, r2
 8001d54:	7812      	ldrb	r2, [r2, #0]
 8001d56:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001d58:	2311      	movs	r3, #17
 8001d5a:	18fb      	adds	r3, r7, r3
 8001d5c:	781b      	ldrb	r3, [r3, #0]
 8001d5e:	2b01      	cmp	r3, #1
 8001d60:	d105      	bne.n	8001d6e <HAL_RCCEx_PeriphCLKConfig+0x182>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d62:	4bb6      	ldr	r3, [pc, #728]	; (800203c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001d64:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001d66:	4bb5      	ldr	r3, [pc, #724]	; (800203c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001d68:	49b5      	ldr	r1, [pc, #724]	; (8002040 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8001d6a:	400a      	ands	r2, r1
 8001d6c:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	2201      	movs	r2, #1
 8001d74:	4013      	ands	r3, r2
 8001d76:	d009      	beq.n	8001d8c <HAL_RCCEx_PeriphCLKConfig+0x1a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001d78:	4bb0      	ldr	r3, [pc, #704]	; (800203c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001d7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d7c:	2203      	movs	r2, #3
 8001d7e:	4393      	bics	r3, r2
 8001d80:	0019      	movs	r1, r3
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	685a      	ldr	r2, [r3, #4]
 8001d86:	4bad      	ldr	r3, [pc, #692]	; (800203c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001d88:	430a      	orrs	r2, r1
 8001d8a:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	2202      	movs	r2, #2
 8001d92:	4013      	ands	r3, r2
 8001d94:	d009      	beq.n	8001daa <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001d96:	4ba9      	ldr	r3, [pc, #676]	; (800203c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001d98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d9a:	220c      	movs	r2, #12
 8001d9c:	4393      	bics	r3, r2
 8001d9e:	0019      	movs	r1, r3
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	689a      	ldr	r2, [r3, #8]
 8001da4:	4ba5      	ldr	r3, [pc, #660]	; (800203c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001da6:	430a      	orrs	r2, r1
 8001da8:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART2SEL */

#if defined(RCC_CCIPR_USART3SEL)
  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	2204      	movs	r2, #4
 8001db0:	4013      	ands	r3, r2
 8001db2:	d009      	beq.n	8001dc8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001db4:	4ba1      	ldr	r3, [pc, #644]	; (800203c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001db6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001db8:	2230      	movs	r2, #48	; 0x30
 8001dba:	4393      	bics	r3, r2
 8001dbc:	0019      	movs	r1, r3
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	68da      	ldr	r2, [r3, #12]
 8001dc2:	4b9e      	ldr	r3, [pc, #632]	; (800203c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001dc4:	430a      	orrs	r2, r1
 8001dc6:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	2210      	movs	r2, #16
 8001dce:	4013      	ands	r3, r2
 8001dd0:	d009      	beq.n	8001de6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001dd2:	4b9a      	ldr	r3, [pc, #616]	; (800203c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001dd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dd6:	4a9b      	ldr	r2, [pc, #620]	; (8002044 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8001dd8:	4013      	ands	r3, r2
 8001dda:	0019      	movs	r1, r3
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	691a      	ldr	r2, [r3, #16]
 8001de0:	4b96      	ldr	r3, [pc, #600]	; (800203c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001de2:	430a      	orrs	r2, r1
 8001de4:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART1 */

#if defined(LPUART2)
  /*-------------------------- LPUART2 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART2) == RCC_PERIPHCLK_LPUART2)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681a      	ldr	r2, [r3, #0]
 8001dea:	2380      	movs	r3, #128	; 0x80
 8001dec:	015b      	lsls	r3, r3, #5
 8001dee:	4013      	ands	r3, r2
 8001df0:	d009      	beq.n	8001e06 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART2CLKSOURCE(PeriphClkInit->Lpuart2ClockSelection));

    /* Configure the LPUART clock source */
    __HAL_RCC_LPUART2_CONFIG(PeriphClkInit->Lpuart2ClockSelection);
 8001df2:	4b92      	ldr	r3, [pc, #584]	; (800203c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001df4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001df6:	4a94      	ldr	r2, [pc, #592]	; (8002048 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8001df8:	4013      	ands	r3, r2
 8001dfa:	0019      	movs	r1, r3
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	695a      	ldr	r2, [r3, #20]
 8001e00:	4b8e      	ldr	r3, [pc, #568]	; (800203c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001e02:	430a      	orrs	r2, r1
 8001e04:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681a      	ldr	r2, [r3, #0]
 8001e0a:	2380      	movs	r3, #128	; 0x80
 8001e0c:	009b      	lsls	r3, r3, #2
 8001e0e:	4013      	ands	r3, r2
 8001e10:	d009      	beq.n	8001e26 <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001e12:	4b8a      	ldr	r3, [pc, #552]	; (800203c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001e14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e16:	4a8d      	ldr	r2, [pc, #564]	; (800204c <HAL_RCCEx_PeriphCLKConfig+0x460>)
 8001e18:	4013      	ands	r3, r2
 8001e1a:	0019      	movs	r1, r3
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001e20:	4b86      	ldr	r3, [pc, #536]	; (800203c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001e22:	430a      	orrs	r2, r1
 8001e24:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681a      	ldr	r2, [r3, #0]
 8001e2a:	2380      	movs	r3, #128	; 0x80
 8001e2c:	00db      	lsls	r3, r3, #3
 8001e2e:	4013      	ands	r3, r2
 8001e30:	d009      	beq.n	8001e46 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8001e32:	4b82      	ldr	r3, [pc, #520]	; (800203c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001e34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e36:	4a86      	ldr	r2, [pc, #536]	; (8002050 <HAL_RCCEx_PeriphCLKConfig+0x464>)
 8001e38:	4013      	ands	r3, r2
 8001e3a:	0019      	movs	r1, r3
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e40:	4b7e      	ldr	r3, [pc, #504]	; (800203c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001e42:	430a      	orrs	r2, r1
 8001e44:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	2220      	movs	r2, #32
 8001e4c:	4013      	ands	r3, r2
 8001e4e:	d009      	beq.n	8001e64 <HAL_RCCEx_PeriphCLKConfig+0x278>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001e50:	4b7a      	ldr	r3, [pc, #488]	; (800203c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001e52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e54:	4a7f      	ldr	r2, [pc, #508]	; (8002054 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8001e56:	4013      	ands	r3, r2
 8001e58:	0019      	movs	r1, r3
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	699a      	ldr	r2, [r3, #24]
 8001e5e:	4b77      	ldr	r3, [pc, #476]	; (800203c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001e60:	430a      	orrs	r2, r1
 8001e62:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_I2C2SEL)
  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	2240      	movs	r2, #64	; 0x40
 8001e6a:	4013      	ands	r3, r2
 8001e6c:	d009      	beq.n	8001e82 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001e6e:	4b73      	ldr	r3, [pc, #460]	; (800203c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001e70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e72:	4a79      	ldr	r2, [pc, #484]	; (8002058 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 8001e74:	4013      	ands	r3, r2
 8001e76:	0019      	movs	r1, r3
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	69da      	ldr	r2, [r3, #28]
 8001e7c:	4b6f      	ldr	r3, [pc, #444]	; (800203c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001e7e:	430a      	orrs	r2, r1
 8001e80:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681a      	ldr	r2, [r3, #0]
 8001e86:	2380      	movs	r3, #128	; 0x80
 8001e88:	01db      	lsls	r3, r3, #7
 8001e8a:	4013      	ands	r3, r2
 8001e8c:	d015      	beq.n	8001eba <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001e8e:	4b6b      	ldr	r3, [pc, #428]	; (800203c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001e90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e92:	009b      	lsls	r3, r3, #2
 8001e94:	0899      	lsrs	r1, r3, #2
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001e9a:	4b68      	ldr	r3, [pc, #416]	; (800203c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001e9c:	430a      	orrs	r2, r1
 8001e9e:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001ea4:	2380      	movs	r3, #128	; 0x80
 8001ea6:	05db      	lsls	r3, r3, #23
 8001ea8:	429a      	cmp	r2, r3
 8001eaa:	d106      	bne.n	8001eba <HAL_RCCEx_PeriphCLKConfig+0x2ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8001eac:	4b63      	ldr	r3, [pc, #396]	; (800203c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001eae:	68da      	ldr	r2, [r3, #12]
 8001eb0:	4b62      	ldr	r3, [pc, #392]	; (800203c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001eb2:	2180      	movs	r1, #128	; 0x80
 8001eb4:	0249      	lsls	r1, r1, #9
 8001eb6:	430a      	orrs	r2, r1
 8001eb8:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681a      	ldr	r2, [r3, #0]
 8001ebe:	2380      	movs	r3, #128	; 0x80
 8001ec0:	031b      	lsls	r3, r3, #12
 8001ec2:	4013      	ands	r3, r2
 8001ec4:	d009      	beq.n	8001eda <HAL_RCCEx_PeriphCLKConfig+0x2ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001ec6:	4b5d      	ldr	r3, [pc, #372]	; (800203c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001ec8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001eca:	2240      	movs	r2, #64	; 0x40
 8001ecc:	4393      	bics	r3, r2
 8001ece:	0019      	movs	r1, r3
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001ed4:	4b59      	ldr	r3, [pc, #356]	; (800203c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001ed6:	430a      	orrs	r2, r1
 8001ed8:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681a      	ldr	r2, [r3, #0]
 8001ede:	2380      	movs	r3, #128	; 0x80
 8001ee0:	039b      	lsls	r3, r3, #14
 8001ee2:	4013      	ands	r3, r2
 8001ee4:	d016      	beq.n	8001f14 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8001ee6:	4b55      	ldr	r3, [pc, #340]	; (800203c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001ee8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001eea:	4a5c      	ldr	r2, [pc, #368]	; (800205c <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8001eec:	4013      	ands	r3, r2
 8001eee:	0019      	movs	r1, r3
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001ef4:	4b51      	ldr	r3, [pc, #324]	; (800203c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001ef6:	430a      	orrs	r2, r1
 8001ef8:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001efe:	2380      	movs	r3, #128	; 0x80
 8001f00:	03db      	lsls	r3, r3, #15
 8001f02:	429a      	cmp	r2, r3
 8001f04:	d106      	bne.n	8001f14 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8001f06:	4b4d      	ldr	r3, [pc, #308]	; (800203c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001f08:	68da      	ldr	r2, [r3, #12]
 8001f0a:	4b4c      	ldr	r3, [pc, #304]	; (800203c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001f0c:	2180      	movs	r1, #128	; 0x80
 8001f0e:	0449      	lsls	r1, r1, #17
 8001f10:	430a      	orrs	r2, r1
 8001f12:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681a      	ldr	r2, [r3, #0]
 8001f18:	2380      	movs	r3, #128	; 0x80
 8001f1a:	03db      	lsls	r3, r3, #15
 8001f1c:	4013      	ands	r3, r2
 8001f1e:	d016      	beq.n	8001f4e <HAL_RCCEx_PeriphCLKConfig+0x362>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8001f20:	4b46      	ldr	r3, [pc, #280]	; (800203c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001f22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f24:	4a4e      	ldr	r2, [pc, #312]	; (8002060 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8001f26:	4013      	ands	r3, r2
 8001f28:	0019      	movs	r1, r3
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001f2e:	4b43      	ldr	r3, [pc, #268]	; (800203c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001f30:	430a      	orrs	r2, r1
 8001f32:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001f38:	2380      	movs	r3, #128	; 0x80
 8001f3a:	045b      	lsls	r3, r3, #17
 8001f3c:	429a      	cmp	r2, r3
 8001f3e:	d106      	bne.n	8001f4e <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8001f40:	4b3e      	ldr	r3, [pc, #248]	; (800203c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001f42:	68da      	ldr	r2, [r3, #12]
 8001f44:	4b3d      	ldr	r3, [pc, #244]	; (800203c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001f46:	2180      	movs	r1, #128	; 0x80
 8001f48:	0449      	lsls	r1, r1, #17
 8001f4a:	430a      	orrs	r2, r1
 8001f4c:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681a      	ldr	r2, [r3, #0]
 8001f52:	2380      	movs	r3, #128	; 0x80
 8001f54:	011b      	lsls	r3, r3, #4
 8001f56:	4013      	ands	r3, r2
 8001f58:	d014      	beq.n	8001f84 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8001f5a:	4b38      	ldr	r3, [pc, #224]	; (800203c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001f5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f5e:	2203      	movs	r2, #3
 8001f60:	4393      	bics	r3, r2
 8001f62:	0019      	movs	r1, r3
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	6a1a      	ldr	r2, [r3, #32]
 8001f68:	4b34      	ldr	r3, [pc, #208]	; (800203c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001f6a:	430a      	orrs	r2, r1
 8001f6c:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	6a1b      	ldr	r3, [r3, #32]
 8001f72:	2b01      	cmp	r3, #1
 8001f74:	d106      	bne.n	8001f84 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8001f76:	4b31      	ldr	r3, [pc, #196]	; (800203c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001f78:	68da      	ldr	r2, [r3, #12]
 8001f7a:	4b30      	ldr	r3, [pc, #192]	; (800203c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001f7c:	2180      	movs	r1, #128	; 0x80
 8001f7e:	0249      	lsls	r1, r1, #9
 8001f80:	430a      	orrs	r2, r1
 8001f82:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(RCC_CCIPR2_I2S2SEL)
  /*-------------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681a      	ldr	r2, [r3, #0]
 8001f88:	2380      	movs	r3, #128	; 0x80
 8001f8a:	019b      	lsls	r3, r3, #6
 8001f8c:	4013      	ands	r3, r2
 8001f8e:	d014      	beq.n	8001fba <HAL_RCCEx_PeriphCLKConfig+0x3ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8001f90:	4b2a      	ldr	r3, [pc, #168]	; (800203c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001f92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f94:	220c      	movs	r2, #12
 8001f96:	4393      	bics	r3, r2
 8001f98:	0019      	movs	r1, r3
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001f9e:	4b27      	ldr	r3, [pc, #156]	; (800203c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001fa0:	430a      	orrs	r2, r1
 8001fa2:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fa8:	2b04      	cmp	r3, #4
 8001faa:	d106      	bne.n	8001fba <HAL_RCCEx_PeriphCLKConfig+0x3ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8001fac:	4b23      	ldr	r3, [pc, #140]	; (800203c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001fae:	68da      	ldr	r2, [r3, #12]
 8001fb0:	4b22      	ldr	r3, [pc, #136]	; (800203c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001fb2:	2180      	movs	r1, #128	; 0x80
 8001fb4:	0249      	lsls	r1, r1, #9
 8001fb6:	430a      	orrs	r2, r1
 8001fb8:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR2_I2S2SEL */

#if defined(STM32G0C1xx) || defined(STM32G0B1xx)  || defined(STM32G0B0xx)
  /*-------------------------- USB clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681a      	ldr	r2, [r3, #0]
 8001fbe:	2380      	movs	r3, #128	; 0x80
 8001fc0:	045b      	lsls	r3, r3, #17
 8001fc2:	4013      	ands	r3, r2
 8001fc4:	d016      	beq.n	8001ff4 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001fc6:	4b1d      	ldr	r3, [pc, #116]	; (800203c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001fc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fca:	4a22      	ldr	r2, [pc, #136]	; (8002054 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8001fcc:	4013      	ands	r3, r2
 8001fce:	0019      	movs	r1, r3
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001fd4:	4b19      	ldr	r3, [pc, #100]	; (800203c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001fd6:	430a      	orrs	r2, r1
 8001fd8:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001fde:	2380      	movs	r3, #128	; 0x80
 8001fe0:	019b      	lsls	r3, r3, #6
 8001fe2:	429a      	cmp	r2, r3
 8001fe4:	d106      	bne.n	8001ff4 <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8001fe6:	4b15      	ldr	r3, [pc, #84]	; (800203c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001fe8:	68da      	ldr	r2, [r3, #12]
 8001fea:	4b14      	ldr	r3, [pc, #80]	; (800203c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001fec:	2180      	movs	r1, #128	; 0x80
 8001fee:	0449      	lsls	r1, r1, #17
 8001ff0:	430a      	orrs	r2, r1
 8001ff2:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32G0C1xx || STM32G0B1xx || STM32G0B0xx */

#if defined(FDCAN1) || defined(FDCAN2)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681a      	ldr	r2, [r3, #0]
 8001ff8:	2380      	movs	r3, #128	; 0x80
 8001ffa:	049b      	lsls	r3, r3, #18
 8001ffc:	4013      	ands	r3, r2
 8001ffe:	d016      	beq.n	800202e <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002000:	4b0e      	ldr	r3, [pc, #56]	; (800203c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002002:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002004:	4a10      	ldr	r2, [pc, #64]	; (8002048 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002006:	4013      	ands	r3, r2
 8002008:	0019      	movs	r1, r3
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800200e:	4b0b      	ldr	r3, [pc, #44]	; (800203c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002010:	430a      	orrs	r2, r1
 8002012:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002018:	2380      	movs	r3, #128	; 0x80
 800201a:	005b      	lsls	r3, r3, #1
 800201c:	429a      	cmp	r2, r3
 800201e:	d106      	bne.n	800202e <HAL_RCCEx_PeriphCLKConfig+0x442>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002020:	4b06      	ldr	r3, [pc, #24]	; (800203c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002022:	68da      	ldr	r2, [r3, #12]
 8002024:	4b05      	ldr	r3, [pc, #20]	; (800203c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002026:	2180      	movs	r1, #128	; 0x80
 8002028:	0449      	lsls	r1, r1, #17
 800202a:	430a      	orrs	r2, r1
 800202c:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 800202e:	2312      	movs	r3, #18
 8002030:	18fb      	adds	r3, r7, r3
 8002032:	781b      	ldrb	r3, [r3, #0]
}
 8002034:	0018      	movs	r0, r3
 8002036:	46bd      	mov	sp, r7
 8002038:	b006      	add	sp, #24
 800203a:	bd80      	pop	{r7, pc}
 800203c:	40021000 	.word	0x40021000
 8002040:	efffffff 	.word	0xefffffff
 8002044:	fffff3ff 	.word	0xfffff3ff
 8002048:	fffffcff 	.word	0xfffffcff
 800204c:	fff3ffff 	.word	0xfff3ffff
 8002050:	ffcfffff 	.word	0xffcfffff
 8002054:	ffffcfff 	.word	0xffffcfff
 8002058:	ffff3fff 	.word	0xffff3fff
 800205c:	ffbfffff 	.word	0xffbfffff
 8002060:	feffffff 	.word	0xfeffffff

08002064 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b082      	sub	sp, #8
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	2b00      	cmp	r3, #0
 8002070:	d101      	bne.n	8002076 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002072:	2301      	movs	r3, #1
 8002074:	e046      	b.n	8002104 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	2288      	movs	r2, #136	; 0x88
 800207a:	589b      	ldr	r3, [r3, r2]
 800207c:	2b00      	cmp	r3, #0
 800207e:	d107      	bne.n	8002090 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	2284      	movs	r2, #132	; 0x84
 8002084:	2100      	movs	r1, #0
 8002086:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	0018      	movs	r0, r3
 800208c:	f7fe fca4 	bl	80009d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	2288      	movs	r2, #136	; 0x88
 8002094:	2124      	movs	r1, #36	; 0x24
 8002096:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	681a      	ldr	r2, [r3, #0]
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	2101      	movs	r1, #1
 80020a4:	438a      	bics	r2, r1
 80020a6:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	0018      	movs	r0, r3
 80020ac:	f000 f9ae 	bl	800240c <UART_SetConfig>
 80020b0:	0003      	movs	r3, r0
 80020b2:	2b01      	cmp	r3, #1
 80020b4:	d101      	bne.n	80020ba <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 80020b6:	2301      	movs	r3, #1
 80020b8:	e024      	b.n	8002104 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d003      	beq.n	80020ca <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	0018      	movs	r0, r3
 80020c6:	f000 fcf7 	bl	8002ab8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	685a      	ldr	r2, [r3, #4]
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	490d      	ldr	r1, [pc, #52]	; (800210c <HAL_UART_Init+0xa8>)
 80020d6:	400a      	ands	r2, r1
 80020d8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	689a      	ldr	r2, [r3, #8]
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	212a      	movs	r1, #42	; 0x2a
 80020e6:	438a      	bics	r2, r1
 80020e8:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	681a      	ldr	r2, [r3, #0]
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	2101      	movs	r1, #1
 80020f6:	430a      	orrs	r2, r1
 80020f8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	0018      	movs	r0, r3
 80020fe:	f000 fd8f 	bl	8002c20 <UART_CheckIdleState>
 8002102:	0003      	movs	r3, r0
}
 8002104:	0018      	movs	r0, r3
 8002106:	46bd      	mov	sp, r7
 8002108:	b002      	add	sp, #8
 800210a:	bd80      	pop	{r7, pc}
 800210c:	ffffb7ff 	.word	0xffffb7ff

08002110 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b08a      	sub	sp, #40	; 0x28
 8002114:	af02      	add	r7, sp, #8
 8002116:	60f8      	str	r0, [r7, #12]
 8002118:	60b9      	str	r1, [r7, #8]
 800211a:	603b      	str	r3, [r7, #0]
 800211c:	1dbb      	adds	r3, r7, #6
 800211e:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	2288      	movs	r2, #136	; 0x88
 8002124:	589b      	ldr	r3, [r3, r2]
 8002126:	2b20      	cmp	r3, #32
 8002128:	d000      	beq.n	800212c <HAL_UART_Transmit+0x1c>
 800212a:	e088      	b.n	800223e <HAL_UART_Transmit+0x12e>
  {
    if ((pData == NULL) || (Size == 0U))
 800212c:	68bb      	ldr	r3, [r7, #8]
 800212e:	2b00      	cmp	r3, #0
 8002130:	d003      	beq.n	800213a <HAL_UART_Transmit+0x2a>
 8002132:	1dbb      	adds	r3, r7, #6
 8002134:	881b      	ldrh	r3, [r3, #0]
 8002136:	2b00      	cmp	r3, #0
 8002138:	d101      	bne.n	800213e <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 800213a:	2301      	movs	r3, #1
 800213c:	e080      	b.n	8002240 <HAL_UART_Transmit+0x130>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	689a      	ldr	r2, [r3, #8]
 8002142:	2380      	movs	r3, #128	; 0x80
 8002144:	015b      	lsls	r3, r3, #5
 8002146:	429a      	cmp	r2, r3
 8002148:	d109      	bne.n	800215e <HAL_UART_Transmit+0x4e>
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	691b      	ldr	r3, [r3, #16]
 800214e:	2b00      	cmp	r3, #0
 8002150:	d105      	bne.n	800215e <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002152:	68bb      	ldr	r3, [r7, #8]
 8002154:	2201      	movs	r2, #1
 8002156:	4013      	ands	r3, r2
 8002158:	d001      	beq.n	800215e <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 800215a:	2301      	movs	r3, #1
 800215c:	e070      	b.n	8002240 <HAL_UART_Transmit+0x130>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	2290      	movs	r2, #144	; 0x90
 8002162:	2100      	movs	r1, #0
 8002164:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	2288      	movs	r2, #136	; 0x88
 800216a:	2121      	movs	r1, #33	; 0x21
 800216c:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800216e:	f7fe fd9f 	bl	8000cb0 <HAL_GetTick>
 8002172:	0003      	movs	r3, r0
 8002174:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	1dba      	adds	r2, r7, #6
 800217a:	2154      	movs	r1, #84	; 0x54
 800217c:	8812      	ldrh	r2, [r2, #0]
 800217e:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	1dba      	adds	r2, r7, #6
 8002184:	2156      	movs	r1, #86	; 0x56
 8002186:	8812      	ldrh	r2, [r2, #0]
 8002188:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	689a      	ldr	r2, [r3, #8]
 800218e:	2380      	movs	r3, #128	; 0x80
 8002190:	015b      	lsls	r3, r3, #5
 8002192:	429a      	cmp	r2, r3
 8002194:	d108      	bne.n	80021a8 <HAL_UART_Transmit+0x98>
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	691b      	ldr	r3, [r3, #16]
 800219a:	2b00      	cmp	r3, #0
 800219c:	d104      	bne.n	80021a8 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 800219e:	2300      	movs	r3, #0
 80021a0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80021a2:	68bb      	ldr	r3, [r7, #8]
 80021a4:	61bb      	str	r3, [r7, #24]
 80021a6:	e003      	b.n	80021b0 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 80021a8:	68bb      	ldr	r3, [r7, #8]
 80021aa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80021ac:	2300      	movs	r3, #0
 80021ae:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80021b0:	e02c      	b.n	800220c <HAL_UART_Transmit+0xfc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80021b2:	697a      	ldr	r2, [r7, #20]
 80021b4:	68f8      	ldr	r0, [r7, #12]
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	9300      	str	r3, [sp, #0]
 80021ba:	0013      	movs	r3, r2
 80021bc:	2200      	movs	r2, #0
 80021be:	2180      	movs	r1, #128	; 0x80
 80021c0:	f000 fd7c 	bl	8002cbc <UART_WaitOnFlagUntilTimeout>
 80021c4:	1e03      	subs	r3, r0, #0
 80021c6:	d001      	beq.n	80021cc <HAL_UART_Transmit+0xbc>
      {
        return HAL_TIMEOUT;
 80021c8:	2303      	movs	r3, #3
 80021ca:	e039      	b.n	8002240 <HAL_UART_Transmit+0x130>
      }
      if (pdata8bits == NULL)
 80021cc:	69fb      	ldr	r3, [r7, #28]
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d10b      	bne.n	80021ea <HAL_UART_Transmit+0xda>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80021d2:	69bb      	ldr	r3, [r7, #24]
 80021d4:	881b      	ldrh	r3, [r3, #0]
 80021d6:	001a      	movs	r2, r3
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	05d2      	lsls	r2, r2, #23
 80021de:	0dd2      	lsrs	r2, r2, #23
 80021e0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80021e2:	69bb      	ldr	r3, [r7, #24]
 80021e4:	3302      	adds	r3, #2
 80021e6:	61bb      	str	r3, [r7, #24]
 80021e8:	e007      	b.n	80021fa <HAL_UART_Transmit+0xea>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80021ea:	69fb      	ldr	r3, [r7, #28]
 80021ec:	781a      	ldrb	r2, [r3, #0]
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80021f4:	69fb      	ldr	r3, [r7, #28]
 80021f6:	3301      	adds	r3, #1
 80021f8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	2256      	movs	r2, #86	; 0x56
 80021fe:	5a9b      	ldrh	r3, [r3, r2]
 8002200:	b29b      	uxth	r3, r3
 8002202:	3b01      	subs	r3, #1
 8002204:	b299      	uxth	r1, r3
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	2256      	movs	r2, #86	; 0x56
 800220a:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	2256      	movs	r2, #86	; 0x56
 8002210:	5a9b      	ldrh	r3, [r3, r2]
 8002212:	b29b      	uxth	r3, r3
 8002214:	2b00      	cmp	r3, #0
 8002216:	d1cc      	bne.n	80021b2 <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002218:	697a      	ldr	r2, [r7, #20]
 800221a:	68f8      	ldr	r0, [r7, #12]
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	9300      	str	r3, [sp, #0]
 8002220:	0013      	movs	r3, r2
 8002222:	2200      	movs	r2, #0
 8002224:	2140      	movs	r1, #64	; 0x40
 8002226:	f000 fd49 	bl	8002cbc <UART_WaitOnFlagUntilTimeout>
 800222a:	1e03      	subs	r3, r0, #0
 800222c:	d001      	beq.n	8002232 <HAL_UART_Transmit+0x122>
    {
      return HAL_TIMEOUT;
 800222e:	2303      	movs	r3, #3
 8002230:	e006      	b.n	8002240 <HAL_UART_Transmit+0x130>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	2288      	movs	r2, #136	; 0x88
 8002236:	2120      	movs	r1, #32
 8002238:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 800223a:	2300      	movs	r3, #0
 800223c:	e000      	b.n	8002240 <HAL_UART_Transmit+0x130>
  }
  else
  {
    return HAL_BUSY;
 800223e:	2302      	movs	r3, #2
  }
}
 8002240:	0018      	movs	r0, r3
 8002242:	46bd      	mov	sp, r7
 8002244:	b008      	add	sp, #32
 8002246:	bd80      	pop	{r7, pc}

08002248 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b08a      	sub	sp, #40	; 0x28
 800224c:	af02      	add	r7, sp, #8
 800224e:	60f8      	str	r0, [r7, #12]
 8002250:	60b9      	str	r1, [r7, #8]
 8002252:	603b      	str	r3, [r7, #0]
 8002254:	1dbb      	adds	r3, r7, #6
 8002256:	801a      	strh	r2, [r3, #0]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	228c      	movs	r2, #140	; 0x8c
 800225c:	589b      	ldr	r3, [r3, r2]
 800225e:	2b20      	cmp	r3, #32
 8002260:	d000      	beq.n	8002264 <HAL_UART_Receive+0x1c>
 8002262:	e0cc      	b.n	80023fe <HAL_UART_Receive+0x1b6>
  {
    if ((pData == NULL) || (Size == 0U))
 8002264:	68bb      	ldr	r3, [r7, #8]
 8002266:	2b00      	cmp	r3, #0
 8002268:	d003      	beq.n	8002272 <HAL_UART_Receive+0x2a>
 800226a:	1dbb      	adds	r3, r7, #6
 800226c:	881b      	ldrh	r3, [r3, #0]
 800226e:	2b00      	cmp	r3, #0
 8002270:	d101      	bne.n	8002276 <HAL_UART_Receive+0x2e>
    {
      return  HAL_ERROR;
 8002272:	2301      	movs	r3, #1
 8002274:	e0c4      	b.n	8002400 <HAL_UART_Receive+0x1b8>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	689a      	ldr	r2, [r3, #8]
 800227a:	2380      	movs	r3, #128	; 0x80
 800227c:	015b      	lsls	r3, r3, #5
 800227e:	429a      	cmp	r2, r3
 8002280:	d109      	bne.n	8002296 <HAL_UART_Receive+0x4e>
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	691b      	ldr	r3, [r3, #16]
 8002286:	2b00      	cmp	r3, #0
 8002288:	d105      	bne.n	8002296 <HAL_UART_Receive+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800228a:	68bb      	ldr	r3, [r7, #8]
 800228c:	2201      	movs	r2, #1
 800228e:	4013      	ands	r3, r2
 8002290:	d001      	beq.n	8002296 <HAL_UART_Receive+0x4e>
      {
        return  HAL_ERROR;
 8002292:	2301      	movs	r3, #1
 8002294:	e0b4      	b.n	8002400 <HAL_UART_Receive+0x1b8>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	2290      	movs	r2, #144	; 0x90
 800229a:	2100      	movs	r1, #0
 800229c:	5099      	str	r1, [r3, r2]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	228c      	movs	r2, #140	; 0x8c
 80022a2:	2122      	movs	r1, #34	; 0x22
 80022a4:	5099      	str	r1, [r3, r2]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	2200      	movs	r2, #0
 80022aa:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80022ac:	f7fe fd00 	bl	8000cb0 <HAL_GetTick>
 80022b0:	0003      	movs	r3, r0
 80022b2:	617b      	str	r3, [r7, #20]

    huart->RxXferSize  = Size;
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	1dba      	adds	r2, r7, #6
 80022b8:	215c      	movs	r1, #92	; 0x5c
 80022ba:	8812      	ldrh	r2, [r2, #0]
 80022bc:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	1dba      	adds	r2, r7, #6
 80022c2:	215e      	movs	r1, #94	; 0x5e
 80022c4:	8812      	ldrh	r2, [r2, #0]
 80022c6:	525a      	strh	r2, [r3, r1]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	689a      	ldr	r2, [r3, #8]
 80022cc:	2380      	movs	r3, #128	; 0x80
 80022ce:	015b      	lsls	r3, r3, #5
 80022d0:	429a      	cmp	r2, r3
 80022d2:	d10d      	bne.n	80022f0 <HAL_UART_Receive+0xa8>
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	691b      	ldr	r3, [r3, #16]
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d104      	bne.n	80022e6 <HAL_UART_Receive+0x9e>
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	2260      	movs	r2, #96	; 0x60
 80022e0:	4949      	ldr	r1, [pc, #292]	; (8002408 <HAL_UART_Receive+0x1c0>)
 80022e2:	5299      	strh	r1, [r3, r2]
 80022e4:	e02e      	b.n	8002344 <HAL_UART_Receive+0xfc>
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	2260      	movs	r2, #96	; 0x60
 80022ea:	21ff      	movs	r1, #255	; 0xff
 80022ec:	5299      	strh	r1, [r3, r2]
 80022ee:	e029      	b.n	8002344 <HAL_UART_Receive+0xfc>
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	689b      	ldr	r3, [r3, #8]
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d10d      	bne.n	8002314 <HAL_UART_Receive+0xcc>
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	691b      	ldr	r3, [r3, #16]
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d104      	bne.n	800230a <HAL_UART_Receive+0xc2>
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	2260      	movs	r2, #96	; 0x60
 8002304:	21ff      	movs	r1, #255	; 0xff
 8002306:	5299      	strh	r1, [r3, r2]
 8002308:	e01c      	b.n	8002344 <HAL_UART_Receive+0xfc>
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	2260      	movs	r2, #96	; 0x60
 800230e:	217f      	movs	r1, #127	; 0x7f
 8002310:	5299      	strh	r1, [r3, r2]
 8002312:	e017      	b.n	8002344 <HAL_UART_Receive+0xfc>
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	689a      	ldr	r2, [r3, #8]
 8002318:	2380      	movs	r3, #128	; 0x80
 800231a:	055b      	lsls	r3, r3, #21
 800231c:	429a      	cmp	r2, r3
 800231e:	d10d      	bne.n	800233c <HAL_UART_Receive+0xf4>
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	691b      	ldr	r3, [r3, #16]
 8002324:	2b00      	cmp	r3, #0
 8002326:	d104      	bne.n	8002332 <HAL_UART_Receive+0xea>
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	2260      	movs	r2, #96	; 0x60
 800232c:	217f      	movs	r1, #127	; 0x7f
 800232e:	5299      	strh	r1, [r3, r2]
 8002330:	e008      	b.n	8002344 <HAL_UART_Receive+0xfc>
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	2260      	movs	r2, #96	; 0x60
 8002336:	213f      	movs	r1, #63	; 0x3f
 8002338:	5299      	strh	r1, [r3, r2]
 800233a:	e003      	b.n	8002344 <HAL_UART_Receive+0xfc>
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	2260      	movs	r2, #96	; 0x60
 8002340:	2100      	movs	r1, #0
 8002342:	5299      	strh	r1, [r3, r2]
    uhMask = huart->Mask;
 8002344:	2312      	movs	r3, #18
 8002346:	18fb      	adds	r3, r7, r3
 8002348:	68fa      	ldr	r2, [r7, #12]
 800234a:	2160      	movs	r1, #96	; 0x60
 800234c:	5a52      	ldrh	r2, [r2, r1]
 800234e:	801a      	strh	r2, [r3, #0]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	689a      	ldr	r2, [r3, #8]
 8002354:	2380      	movs	r3, #128	; 0x80
 8002356:	015b      	lsls	r3, r3, #5
 8002358:	429a      	cmp	r2, r3
 800235a:	d108      	bne.n	800236e <HAL_UART_Receive+0x126>
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	691b      	ldr	r3, [r3, #16]
 8002360:	2b00      	cmp	r3, #0
 8002362:	d104      	bne.n	800236e <HAL_UART_Receive+0x126>
    {
      pdata8bits  = NULL;
 8002364:	2300      	movs	r3, #0
 8002366:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002368:	68bb      	ldr	r3, [r7, #8]
 800236a:	61bb      	str	r3, [r7, #24]
 800236c:	e003      	b.n	8002376 <HAL_UART_Receive+0x12e>
    }
    else
    {
      pdata8bits  = pData;
 800236e:	68bb      	ldr	r3, [r7, #8]
 8002370:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002372:	2300      	movs	r3, #0
 8002374:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8002376:	e036      	b.n	80023e6 <HAL_UART_Receive+0x19e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002378:	697a      	ldr	r2, [r7, #20]
 800237a:	68f8      	ldr	r0, [r7, #12]
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	9300      	str	r3, [sp, #0]
 8002380:	0013      	movs	r3, r2
 8002382:	2200      	movs	r2, #0
 8002384:	2120      	movs	r1, #32
 8002386:	f000 fc99 	bl	8002cbc <UART_WaitOnFlagUntilTimeout>
 800238a:	1e03      	subs	r3, r0, #0
 800238c:	d001      	beq.n	8002392 <HAL_UART_Receive+0x14a>
      {
        return HAL_TIMEOUT;
 800238e:	2303      	movs	r3, #3
 8002390:	e036      	b.n	8002400 <HAL_UART_Receive+0x1b8>
      }
      if (pdata8bits == NULL)
 8002392:	69fb      	ldr	r3, [r7, #28]
 8002394:	2b00      	cmp	r3, #0
 8002396:	d10e      	bne.n	80023b6 <HAL_UART_Receive+0x16e>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800239e:	b29b      	uxth	r3, r3
 80023a0:	2212      	movs	r2, #18
 80023a2:	18ba      	adds	r2, r7, r2
 80023a4:	8812      	ldrh	r2, [r2, #0]
 80023a6:	4013      	ands	r3, r2
 80023a8:	b29a      	uxth	r2, r3
 80023aa:	69bb      	ldr	r3, [r7, #24]
 80023ac:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80023ae:	69bb      	ldr	r3, [r7, #24]
 80023b0:	3302      	adds	r3, #2
 80023b2:	61bb      	str	r3, [r7, #24]
 80023b4:	e00e      	b.n	80023d4 <HAL_UART_Receive+0x18c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023bc:	b2db      	uxtb	r3, r3
 80023be:	2212      	movs	r2, #18
 80023c0:	18ba      	adds	r2, r7, r2
 80023c2:	8812      	ldrh	r2, [r2, #0]
 80023c4:	b2d2      	uxtb	r2, r2
 80023c6:	4013      	ands	r3, r2
 80023c8:	b2da      	uxtb	r2, r3
 80023ca:	69fb      	ldr	r3, [r7, #28]
 80023cc:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80023ce:	69fb      	ldr	r3, [r7, #28]
 80023d0:	3301      	adds	r3, #1
 80023d2:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	225e      	movs	r2, #94	; 0x5e
 80023d8:	5a9b      	ldrh	r3, [r3, r2]
 80023da:	b29b      	uxth	r3, r3
 80023dc:	3b01      	subs	r3, #1
 80023de:	b299      	uxth	r1, r3
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	225e      	movs	r2, #94	; 0x5e
 80023e4:	5299      	strh	r1, [r3, r2]
    while (huart->RxXferCount > 0U)
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	225e      	movs	r2, #94	; 0x5e
 80023ea:	5a9b      	ldrh	r3, [r3, r2]
 80023ec:	b29b      	uxth	r3, r3
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d1c2      	bne.n	8002378 <HAL_UART_Receive+0x130>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	228c      	movs	r2, #140	; 0x8c
 80023f6:	2120      	movs	r1, #32
 80023f8:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 80023fa:	2300      	movs	r3, #0
 80023fc:	e000      	b.n	8002400 <HAL_UART_Receive+0x1b8>
  }
  else
  {
    return HAL_BUSY;
 80023fe:	2302      	movs	r3, #2
  }
}
 8002400:	0018      	movs	r0, r3
 8002402:	46bd      	mov	sp, r7
 8002404:	b008      	add	sp, #32
 8002406:	bd80      	pop	{r7, pc}
 8002408:	000001ff 	.word	0x000001ff

0800240c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800240c:	b5b0      	push	{r4, r5, r7, lr}
 800240e:	b090      	sub	sp, #64	; 0x40
 8002410:	af00      	add	r7, sp, #0
 8002412:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002414:	231a      	movs	r3, #26
 8002416:	2220      	movs	r2, #32
 8002418:	189b      	adds	r3, r3, r2
 800241a:	19db      	adds	r3, r3, r7
 800241c:	2200      	movs	r2, #0
 800241e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002422:	689a      	ldr	r2, [r3, #8]
 8002424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002426:	691b      	ldr	r3, [r3, #16]
 8002428:	431a      	orrs	r2, r3
 800242a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800242c:	695b      	ldr	r3, [r3, #20]
 800242e:	431a      	orrs	r2, r3
 8002430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002432:	69db      	ldr	r3, [r3, #28]
 8002434:	4313      	orrs	r3, r2
 8002436:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	4ac1      	ldr	r2, [pc, #772]	; (8002744 <UART_SetConfig+0x338>)
 8002440:	4013      	ands	r3, r2
 8002442:	0019      	movs	r1, r3
 8002444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002446:	681a      	ldr	r2, [r3, #0]
 8002448:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800244a:	430b      	orrs	r3, r1
 800244c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800244e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	685b      	ldr	r3, [r3, #4]
 8002454:	4abc      	ldr	r2, [pc, #752]	; (8002748 <UART_SetConfig+0x33c>)
 8002456:	4013      	ands	r3, r2
 8002458:	0018      	movs	r0, r3
 800245a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800245c:	68d9      	ldr	r1, [r3, #12]
 800245e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002460:	681a      	ldr	r2, [r3, #0]
 8002462:	0003      	movs	r3, r0
 8002464:	430b      	orrs	r3, r1
 8002466:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800246a:	699b      	ldr	r3, [r3, #24]
 800246c:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800246e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	4ab6      	ldr	r2, [pc, #728]	; (800274c <UART_SetConfig+0x340>)
 8002474:	4293      	cmp	r3, r2
 8002476:	d009      	beq.n	800248c <UART_SetConfig+0x80>
 8002478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	4ab4      	ldr	r2, [pc, #720]	; (8002750 <UART_SetConfig+0x344>)
 800247e:	4293      	cmp	r3, r2
 8002480:	d004      	beq.n	800248c <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002484:	6a1b      	ldr	r3, [r3, #32]
 8002486:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002488:	4313      	orrs	r3, r2
 800248a:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800248c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	689b      	ldr	r3, [r3, #8]
 8002492:	4ab0      	ldr	r2, [pc, #704]	; (8002754 <UART_SetConfig+0x348>)
 8002494:	4013      	ands	r3, r2
 8002496:	0019      	movs	r1, r3
 8002498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800249a:	681a      	ldr	r2, [r3, #0]
 800249c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800249e:	430b      	orrs	r3, r1
 80024a0:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80024a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024a8:	220f      	movs	r2, #15
 80024aa:	4393      	bics	r3, r2
 80024ac:	0018      	movs	r0, r3
 80024ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024b0:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80024b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024b4:	681a      	ldr	r2, [r3, #0]
 80024b6:	0003      	movs	r3, r0
 80024b8:	430b      	orrs	r3, r1
 80024ba:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80024bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	4aa5      	ldr	r2, [pc, #660]	; (8002758 <UART_SetConfig+0x34c>)
 80024c2:	4293      	cmp	r3, r2
 80024c4:	d131      	bne.n	800252a <UART_SetConfig+0x11e>
 80024c6:	4ba5      	ldr	r3, [pc, #660]	; (800275c <UART_SetConfig+0x350>)
 80024c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024ca:	2203      	movs	r2, #3
 80024cc:	4013      	ands	r3, r2
 80024ce:	2b03      	cmp	r3, #3
 80024d0:	d01d      	beq.n	800250e <UART_SetConfig+0x102>
 80024d2:	d823      	bhi.n	800251c <UART_SetConfig+0x110>
 80024d4:	2b02      	cmp	r3, #2
 80024d6:	d00c      	beq.n	80024f2 <UART_SetConfig+0xe6>
 80024d8:	d820      	bhi.n	800251c <UART_SetConfig+0x110>
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d002      	beq.n	80024e4 <UART_SetConfig+0xd8>
 80024de:	2b01      	cmp	r3, #1
 80024e0:	d00e      	beq.n	8002500 <UART_SetConfig+0xf4>
 80024e2:	e01b      	b.n	800251c <UART_SetConfig+0x110>
 80024e4:	231b      	movs	r3, #27
 80024e6:	2220      	movs	r2, #32
 80024e8:	189b      	adds	r3, r3, r2
 80024ea:	19db      	adds	r3, r3, r7
 80024ec:	2200      	movs	r2, #0
 80024ee:	701a      	strb	r2, [r3, #0]
 80024f0:	e154      	b.n	800279c <UART_SetConfig+0x390>
 80024f2:	231b      	movs	r3, #27
 80024f4:	2220      	movs	r2, #32
 80024f6:	189b      	adds	r3, r3, r2
 80024f8:	19db      	adds	r3, r3, r7
 80024fa:	2202      	movs	r2, #2
 80024fc:	701a      	strb	r2, [r3, #0]
 80024fe:	e14d      	b.n	800279c <UART_SetConfig+0x390>
 8002500:	231b      	movs	r3, #27
 8002502:	2220      	movs	r2, #32
 8002504:	189b      	adds	r3, r3, r2
 8002506:	19db      	adds	r3, r3, r7
 8002508:	2204      	movs	r2, #4
 800250a:	701a      	strb	r2, [r3, #0]
 800250c:	e146      	b.n	800279c <UART_SetConfig+0x390>
 800250e:	231b      	movs	r3, #27
 8002510:	2220      	movs	r2, #32
 8002512:	189b      	adds	r3, r3, r2
 8002514:	19db      	adds	r3, r3, r7
 8002516:	2208      	movs	r2, #8
 8002518:	701a      	strb	r2, [r3, #0]
 800251a:	e13f      	b.n	800279c <UART_SetConfig+0x390>
 800251c:	231b      	movs	r3, #27
 800251e:	2220      	movs	r2, #32
 8002520:	189b      	adds	r3, r3, r2
 8002522:	19db      	adds	r3, r3, r7
 8002524:	2210      	movs	r2, #16
 8002526:	701a      	strb	r2, [r3, #0]
 8002528:	e138      	b.n	800279c <UART_SetConfig+0x390>
 800252a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	4a8c      	ldr	r2, [pc, #560]	; (8002760 <UART_SetConfig+0x354>)
 8002530:	4293      	cmp	r3, r2
 8002532:	d131      	bne.n	8002598 <UART_SetConfig+0x18c>
 8002534:	4b89      	ldr	r3, [pc, #548]	; (800275c <UART_SetConfig+0x350>)
 8002536:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002538:	220c      	movs	r2, #12
 800253a:	4013      	ands	r3, r2
 800253c:	2b0c      	cmp	r3, #12
 800253e:	d01d      	beq.n	800257c <UART_SetConfig+0x170>
 8002540:	d823      	bhi.n	800258a <UART_SetConfig+0x17e>
 8002542:	2b08      	cmp	r3, #8
 8002544:	d00c      	beq.n	8002560 <UART_SetConfig+0x154>
 8002546:	d820      	bhi.n	800258a <UART_SetConfig+0x17e>
 8002548:	2b00      	cmp	r3, #0
 800254a:	d002      	beq.n	8002552 <UART_SetConfig+0x146>
 800254c:	2b04      	cmp	r3, #4
 800254e:	d00e      	beq.n	800256e <UART_SetConfig+0x162>
 8002550:	e01b      	b.n	800258a <UART_SetConfig+0x17e>
 8002552:	231b      	movs	r3, #27
 8002554:	2220      	movs	r2, #32
 8002556:	189b      	adds	r3, r3, r2
 8002558:	19db      	adds	r3, r3, r7
 800255a:	2200      	movs	r2, #0
 800255c:	701a      	strb	r2, [r3, #0]
 800255e:	e11d      	b.n	800279c <UART_SetConfig+0x390>
 8002560:	231b      	movs	r3, #27
 8002562:	2220      	movs	r2, #32
 8002564:	189b      	adds	r3, r3, r2
 8002566:	19db      	adds	r3, r3, r7
 8002568:	2202      	movs	r2, #2
 800256a:	701a      	strb	r2, [r3, #0]
 800256c:	e116      	b.n	800279c <UART_SetConfig+0x390>
 800256e:	231b      	movs	r3, #27
 8002570:	2220      	movs	r2, #32
 8002572:	189b      	adds	r3, r3, r2
 8002574:	19db      	adds	r3, r3, r7
 8002576:	2204      	movs	r2, #4
 8002578:	701a      	strb	r2, [r3, #0]
 800257a:	e10f      	b.n	800279c <UART_SetConfig+0x390>
 800257c:	231b      	movs	r3, #27
 800257e:	2220      	movs	r2, #32
 8002580:	189b      	adds	r3, r3, r2
 8002582:	19db      	adds	r3, r3, r7
 8002584:	2208      	movs	r2, #8
 8002586:	701a      	strb	r2, [r3, #0]
 8002588:	e108      	b.n	800279c <UART_SetConfig+0x390>
 800258a:	231b      	movs	r3, #27
 800258c:	2220      	movs	r2, #32
 800258e:	189b      	adds	r3, r3, r2
 8002590:	19db      	adds	r3, r3, r7
 8002592:	2210      	movs	r2, #16
 8002594:	701a      	strb	r2, [r3, #0]
 8002596:	e101      	b.n	800279c <UART_SetConfig+0x390>
 8002598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	4a71      	ldr	r2, [pc, #452]	; (8002764 <UART_SetConfig+0x358>)
 800259e:	4293      	cmp	r3, r2
 80025a0:	d131      	bne.n	8002606 <UART_SetConfig+0x1fa>
 80025a2:	4b6e      	ldr	r3, [pc, #440]	; (800275c <UART_SetConfig+0x350>)
 80025a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025a6:	2230      	movs	r2, #48	; 0x30
 80025a8:	4013      	ands	r3, r2
 80025aa:	2b30      	cmp	r3, #48	; 0x30
 80025ac:	d01d      	beq.n	80025ea <UART_SetConfig+0x1de>
 80025ae:	d823      	bhi.n	80025f8 <UART_SetConfig+0x1ec>
 80025b0:	2b20      	cmp	r3, #32
 80025b2:	d00c      	beq.n	80025ce <UART_SetConfig+0x1c2>
 80025b4:	d820      	bhi.n	80025f8 <UART_SetConfig+0x1ec>
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d002      	beq.n	80025c0 <UART_SetConfig+0x1b4>
 80025ba:	2b10      	cmp	r3, #16
 80025bc:	d00e      	beq.n	80025dc <UART_SetConfig+0x1d0>
 80025be:	e01b      	b.n	80025f8 <UART_SetConfig+0x1ec>
 80025c0:	231b      	movs	r3, #27
 80025c2:	2220      	movs	r2, #32
 80025c4:	189b      	adds	r3, r3, r2
 80025c6:	19db      	adds	r3, r3, r7
 80025c8:	2200      	movs	r2, #0
 80025ca:	701a      	strb	r2, [r3, #0]
 80025cc:	e0e6      	b.n	800279c <UART_SetConfig+0x390>
 80025ce:	231b      	movs	r3, #27
 80025d0:	2220      	movs	r2, #32
 80025d2:	189b      	adds	r3, r3, r2
 80025d4:	19db      	adds	r3, r3, r7
 80025d6:	2202      	movs	r2, #2
 80025d8:	701a      	strb	r2, [r3, #0]
 80025da:	e0df      	b.n	800279c <UART_SetConfig+0x390>
 80025dc:	231b      	movs	r3, #27
 80025de:	2220      	movs	r2, #32
 80025e0:	189b      	adds	r3, r3, r2
 80025e2:	19db      	adds	r3, r3, r7
 80025e4:	2204      	movs	r2, #4
 80025e6:	701a      	strb	r2, [r3, #0]
 80025e8:	e0d8      	b.n	800279c <UART_SetConfig+0x390>
 80025ea:	231b      	movs	r3, #27
 80025ec:	2220      	movs	r2, #32
 80025ee:	189b      	adds	r3, r3, r2
 80025f0:	19db      	adds	r3, r3, r7
 80025f2:	2208      	movs	r2, #8
 80025f4:	701a      	strb	r2, [r3, #0]
 80025f6:	e0d1      	b.n	800279c <UART_SetConfig+0x390>
 80025f8:	231b      	movs	r3, #27
 80025fa:	2220      	movs	r2, #32
 80025fc:	189b      	adds	r3, r3, r2
 80025fe:	19db      	adds	r3, r3, r7
 8002600:	2210      	movs	r2, #16
 8002602:	701a      	strb	r2, [r3, #0]
 8002604:	e0ca      	b.n	800279c <UART_SetConfig+0x390>
 8002606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	4a57      	ldr	r2, [pc, #348]	; (8002768 <UART_SetConfig+0x35c>)
 800260c:	4293      	cmp	r3, r2
 800260e:	d106      	bne.n	800261e <UART_SetConfig+0x212>
 8002610:	231b      	movs	r3, #27
 8002612:	2220      	movs	r2, #32
 8002614:	189b      	adds	r3, r3, r2
 8002616:	19db      	adds	r3, r3, r7
 8002618:	2200      	movs	r2, #0
 800261a:	701a      	strb	r2, [r3, #0]
 800261c:	e0be      	b.n	800279c <UART_SetConfig+0x390>
 800261e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	4a52      	ldr	r2, [pc, #328]	; (800276c <UART_SetConfig+0x360>)
 8002624:	4293      	cmp	r3, r2
 8002626:	d106      	bne.n	8002636 <UART_SetConfig+0x22a>
 8002628:	231b      	movs	r3, #27
 800262a:	2220      	movs	r2, #32
 800262c:	189b      	adds	r3, r3, r2
 800262e:	19db      	adds	r3, r3, r7
 8002630:	2200      	movs	r2, #0
 8002632:	701a      	strb	r2, [r3, #0]
 8002634:	e0b2      	b.n	800279c <UART_SetConfig+0x390>
 8002636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	4a4d      	ldr	r2, [pc, #308]	; (8002770 <UART_SetConfig+0x364>)
 800263c:	4293      	cmp	r3, r2
 800263e:	d106      	bne.n	800264e <UART_SetConfig+0x242>
 8002640:	231b      	movs	r3, #27
 8002642:	2220      	movs	r2, #32
 8002644:	189b      	adds	r3, r3, r2
 8002646:	19db      	adds	r3, r3, r7
 8002648:	2200      	movs	r2, #0
 800264a:	701a      	strb	r2, [r3, #0]
 800264c:	e0a6      	b.n	800279c <UART_SetConfig+0x390>
 800264e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	4a3e      	ldr	r2, [pc, #248]	; (800274c <UART_SetConfig+0x340>)
 8002654:	4293      	cmp	r3, r2
 8002656:	d13e      	bne.n	80026d6 <UART_SetConfig+0x2ca>
 8002658:	4b40      	ldr	r3, [pc, #256]	; (800275c <UART_SetConfig+0x350>)
 800265a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800265c:	23c0      	movs	r3, #192	; 0xc0
 800265e:	011b      	lsls	r3, r3, #4
 8002660:	4013      	ands	r3, r2
 8002662:	22c0      	movs	r2, #192	; 0xc0
 8002664:	0112      	lsls	r2, r2, #4
 8002666:	4293      	cmp	r3, r2
 8002668:	d027      	beq.n	80026ba <UART_SetConfig+0x2ae>
 800266a:	22c0      	movs	r2, #192	; 0xc0
 800266c:	0112      	lsls	r2, r2, #4
 800266e:	4293      	cmp	r3, r2
 8002670:	d82a      	bhi.n	80026c8 <UART_SetConfig+0x2bc>
 8002672:	2280      	movs	r2, #128	; 0x80
 8002674:	0112      	lsls	r2, r2, #4
 8002676:	4293      	cmp	r3, r2
 8002678:	d011      	beq.n	800269e <UART_SetConfig+0x292>
 800267a:	2280      	movs	r2, #128	; 0x80
 800267c:	0112      	lsls	r2, r2, #4
 800267e:	4293      	cmp	r3, r2
 8002680:	d822      	bhi.n	80026c8 <UART_SetConfig+0x2bc>
 8002682:	2b00      	cmp	r3, #0
 8002684:	d004      	beq.n	8002690 <UART_SetConfig+0x284>
 8002686:	2280      	movs	r2, #128	; 0x80
 8002688:	00d2      	lsls	r2, r2, #3
 800268a:	4293      	cmp	r3, r2
 800268c:	d00e      	beq.n	80026ac <UART_SetConfig+0x2a0>
 800268e:	e01b      	b.n	80026c8 <UART_SetConfig+0x2bc>
 8002690:	231b      	movs	r3, #27
 8002692:	2220      	movs	r2, #32
 8002694:	189b      	adds	r3, r3, r2
 8002696:	19db      	adds	r3, r3, r7
 8002698:	2200      	movs	r2, #0
 800269a:	701a      	strb	r2, [r3, #0]
 800269c:	e07e      	b.n	800279c <UART_SetConfig+0x390>
 800269e:	231b      	movs	r3, #27
 80026a0:	2220      	movs	r2, #32
 80026a2:	189b      	adds	r3, r3, r2
 80026a4:	19db      	adds	r3, r3, r7
 80026a6:	2202      	movs	r2, #2
 80026a8:	701a      	strb	r2, [r3, #0]
 80026aa:	e077      	b.n	800279c <UART_SetConfig+0x390>
 80026ac:	231b      	movs	r3, #27
 80026ae:	2220      	movs	r2, #32
 80026b0:	189b      	adds	r3, r3, r2
 80026b2:	19db      	adds	r3, r3, r7
 80026b4:	2204      	movs	r2, #4
 80026b6:	701a      	strb	r2, [r3, #0]
 80026b8:	e070      	b.n	800279c <UART_SetConfig+0x390>
 80026ba:	231b      	movs	r3, #27
 80026bc:	2220      	movs	r2, #32
 80026be:	189b      	adds	r3, r3, r2
 80026c0:	19db      	adds	r3, r3, r7
 80026c2:	2208      	movs	r2, #8
 80026c4:	701a      	strb	r2, [r3, #0]
 80026c6:	e069      	b.n	800279c <UART_SetConfig+0x390>
 80026c8:	231b      	movs	r3, #27
 80026ca:	2220      	movs	r2, #32
 80026cc:	189b      	adds	r3, r3, r2
 80026ce:	19db      	adds	r3, r3, r7
 80026d0:	2210      	movs	r2, #16
 80026d2:	701a      	strb	r2, [r3, #0]
 80026d4:	e062      	b.n	800279c <UART_SetConfig+0x390>
 80026d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	4a1d      	ldr	r2, [pc, #116]	; (8002750 <UART_SetConfig+0x344>)
 80026dc:	4293      	cmp	r3, r2
 80026de:	d157      	bne.n	8002790 <UART_SetConfig+0x384>
 80026e0:	4b1e      	ldr	r3, [pc, #120]	; (800275c <UART_SetConfig+0x350>)
 80026e2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80026e4:	23c0      	movs	r3, #192	; 0xc0
 80026e6:	009b      	lsls	r3, r3, #2
 80026e8:	4013      	ands	r3, r2
 80026ea:	22c0      	movs	r2, #192	; 0xc0
 80026ec:	0092      	lsls	r2, r2, #2
 80026ee:	4293      	cmp	r3, r2
 80026f0:	d040      	beq.n	8002774 <UART_SetConfig+0x368>
 80026f2:	22c0      	movs	r2, #192	; 0xc0
 80026f4:	0092      	lsls	r2, r2, #2
 80026f6:	4293      	cmp	r3, r2
 80026f8:	d843      	bhi.n	8002782 <UART_SetConfig+0x376>
 80026fa:	2280      	movs	r2, #128	; 0x80
 80026fc:	0092      	lsls	r2, r2, #2
 80026fe:	4293      	cmp	r3, r2
 8002700:	d011      	beq.n	8002726 <UART_SetConfig+0x31a>
 8002702:	2280      	movs	r2, #128	; 0x80
 8002704:	0092      	lsls	r2, r2, #2
 8002706:	4293      	cmp	r3, r2
 8002708:	d83b      	bhi.n	8002782 <UART_SetConfig+0x376>
 800270a:	2b00      	cmp	r3, #0
 800270c:	d004      	beq.n	8002718 <UART_SetConfig+0x30c>
 800270e:	2280      	movs	r2, #128	; 0x80
 8002710:	0052      	lsls	r2, r2, #1
 8002712:	4293      	cmp	r3, r2
 8002714:	d00e      	beq.n	8002734 <UART_SetConfig+0x328>
 8002716:	e034      	b.n	8002782 <UART_SetConfig+0x376>
 8002718:	231b      	movs	r3, #27
 800271a:	2220      	movs	r2, #32
 800271c:	189b      	adds	r3, r3, r2
 800271e:	19db      	adds	r3, r3, r7
 8002720:	2200      	movs	r2, #0
 8002722:	701a      	strb	r2, [r3, #0]
 8002724:	e03a      	b.n	800279c <UART_SetConfig+0x390>
 8002726:	231b      	movs	r3, #27
 8002728:	2220      	movs	r2, #32
 800272a:	189b      	adds	r3, r3, r2
 800272c:	19db      	adds	r3, r3, r7
 800272e:	2202      	movs	r2, #2
 8002730:	701a      	strb	r2, [r3, #0]
 8002732:	e033      	b.n	800279c <UART_SetConfig+0x390>
 8002734:	231b      	movs	r3, #27
 8002736:	2220      	movs	r2, #32
 8002738:	189b      	adds	r3, r3, r2
 800273a:	19db      	adds	r3, r3, r7
 800273c:	2204      	movs	r2, #4
 800273e:	701a      	strb	r2, [r3, #0]
 8002740:	e02c      	b.n	800279c <UART_SetConfig+0x390>
 8002742:	46c0      	nop			; (mov r8, r8)
 8002744:	cfff69f3 	.word	0xcfff69f3
 8002748:	ffffcfff 	.word	0xffffcfff
 800274c:	40008000 	.word	0x40008000
 8002750:	40008400 	.word	0x40008400
 8002754:	11fff4ff 	.word	0x11fff4ff
 8002758:	40013800 	.word	0x40013800
 800275c:	40021000 	.word	0x40021000
 8002760:	40004400 	.word	0x40004400
 8002764:	40004800 	.word	0x40004800
 8002768:	40004c00 	.word	0x40004c00
 800276c:	40005000 	.word	0x40005000
 8002770:	40013c00 	.word	0x40013c00
 8002774:	231b      	movs	r3, #27
 8002776:	2220      	movs	r2, #32
 8002778:	189b      	adds	r3, r3, r2
 800277a:	19db      	adds	r3, r3, r7
 800277c:	2208      	movs	r2, #8
 800277e:	701a      	strb	r2, [r3, #0]
 8002780:	e00c      	b.n	800279c <UART_SetConfig+0x390>
 8002782:	231b      	movs	r3, #27
 8002784:	2220      	movs	r2, #32
 8002786:	189b      	adds	r3, r3, r2
 8002788:	19db      	adds	r3, r3, r7
 800278a:	2210      	movs	r2, #16
 800278c:	701a      	strb	r2, [r3, #0]
 800278e:	e005      	b.n	800279c <UART_SetConfig+0x390>
 8002790:	231b      	movs	r3, #27
 8002792:	2220      	movs	r2, #32
 8002794:	189b      	adds	r3, r3, r2
 8002796:	19db      	adds	r3, r3, r7
 8002798:	2210      	movs	r2, #16
 800279a:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800279c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	4ac1      	ldr	r2, [pc, #772]	; (8002aa8 <UART_SetConfig+0x69c>)
 80027a2:	4293      	cmp	r3, r2
 80027a4:	d005      	beq.n	80027b2 <UART_SetConfig+0x3a6>
 80027a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	4ac0      	ldr	r2, [pc, #768]	; (8002aac <UART_SetConfig+0x6a0>)
 80027ac:	4293      	cmp	r3, r2
 80027ae:	d000      	beq.n	80027b2 <UART_SetConfig+0x3a6>
 80027b0:	e093      	b.n	80028da <UART_SetConfig+0x4ce>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80027b2:	231b      	movs	r3, #27
 80027b4:	2220      	movs	r2, #32
 80027b6:	189b      	adds	r3, r3, r2
 80027b8:	19db      	adds	r3, r3, r7
 80027ba:	781b      	ldrb	r3, [r3, #0]
 80027bc:	2b08      	cmp	r3, #8
 80027be:	d015      	beq.n	80027ec <UART_SetConfig+0x3e0>
 80027c0:	dc18      	bgt.n	80027f4 <UART_SetConfig+0x3e8>
 80027c2:	2b04      	cmp	r3, #4
 80027c4:	d00d      	beq.n	80027e2 <UART_SetConfig+0x3d6>
 80027c6:	dc15      	bgt.n	80027f4 <UART_SetConfig+0x3e8>
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d002      	beq.n	80027d2 <UART_SetConfig+0x3c6>
 80027cc:	2b02      	cmp	r3, #2
 80027ce:	d005      	beq.n	80027dc <UART_SetConfig+0x3d0>
 80027d0:	e010      	b.n	80027f4 <UART_SetConfig+0x3e8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80027d2:	f7ff f9f5 	bl	8001bc0 <HAL_RCC_GetPCLK1Freq>
 80027d6:	0003      	movs	r3, r0
 80027d8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80027da:	e014      	b.n	8002806 <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80027dc:	4bb4      	ldr	r3, [pc, #720]	; (8002ab0 <UART_SetConfig+0x6a4>)
 80027de:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80027e0:	e011      	b.n	8002806 <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80027e2:	f7ff f961 	bl	8001aa8 <HAL_RCC_GetSysClockFreq>
 80027e6:	0003      	movs	r3, r0
 80027e8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80027ea:	e00c      	b.n	8002806 <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80027ec:	2380      	movs	r3, #128	; 0x80
 80027ee:	021b      	lsls	r3, r3, #8
 80027f0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80027f2:	e008      	b.n	8002806 <UART_SetConfig+0x3fa>
      default:
        pclk = 0U;
 80027f4:	2300      	movs	r3, #0
 80027f6:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 80027f8:	231a      	movs	r3, #26
 80027fa:	2220      	movs	r2, #32
 80027fc:	189b      	adds	r3, r3, r2
 80027fe:	19db      	adds	r3, r3, r7
 8002800:	2201      	movs	r2, #1
 8002802:	701a      	strb	r2, [r3, #0]
        break;
 8002804:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002806:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002808:	2b00      	cmp	r3, #0
 800280a:	d100      	bne.n	800280e <UART_SetConfig+0x402>
 800280c:	e135      	b.n	8002a7a <UART_SetConfig+0x66e>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800280e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002810:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002812:	4ba8      	ldr	r3, [pc, #672]	; (8002ab4 <UART_SetConfig+0x6a8>)
 8002814:	0052      	lsls	r2, r2, #1
 8002816:	5ad3      	ldrh	r3, [r2, r3]
 8002818:	0019      	movs	r1, r3
 800281a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800281c:	f7fd fc7a 	bl	8000114 <__udivsi3>
 8002820:	0003      	movs	r3, r0
 8002822:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002826:	685a      	ldr	r2, [r3, #4]
 8002828:	0013      	movs	r3, r2
 800282a:	005b      	lsls	r3, r3, #1
 800282c:	189b      	adds	r3, r3, r2
 800282e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002830:	429a      	cmp	r2, r3
 8002832:	d305      	bcc.n	8002840 <UART_SetConfig+0x434>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8002834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002836:	685b      	ldr	r3, [r3, #4]
 8002838:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800283a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800283c:	429a      	cmp	r2, r3
 800283e:	d906      	bls.n	800284e <UART_SetConfig+0x442>
      {
        ret = HAL_ERROR;
 8002840:	231a      	movs	r3, #26
 8002842:	2220      	movs	r2, #32
 8002844:	189b      	adds	r3, r3, r2
 8002846:	19db      	adds	r3, r3, r7
 8002848:	2201      	movs	r2, #1
 800284a:	701a      	strb	r2, [r3, #0]
 800284c:	e044      	b.n	80028d8 <UART_SetConfig+0x4cc>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800284e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002850:	61bb      	str	r3, [r7, #24]
 8002852:	2300      	movs	r3, #0
 8002854:	61fb      	str	r3, [r7, #28]
 8002856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002858:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800285a:	4b96      	ldr	r3, [pc, #600]	; (8002ab4 <UART_SetConfig+0x6a8>)
 800285c:	0052      	lsls	r2, r2, #1
 800285e:	5ad3      	ldrh	r3, [r2, r3]
 8002860:	613b      	str	r3, [r7, #16]
 8002862:	2300      	movs	r3, #0
 8002864:	617b      	str	r3, [r7, #20]
 8002866:	693a      	ldr	r2, [r7, #16]
 8002868:	697b      	ldr	r3, [r7, #20]
 800286a:	69b8      	ldr	r0, [r7, #24]
 800286c:	69f9      	ldr	r1, [r7, #28]
 800286e:	f7fd fdc7 	bl	8000400 <__aeabi_uldivmod>
 8002872:	0002      	movs	r2, r0
 8002874:	000b      	movs	r3, r1
 8002876:	0e11      	lsrs	r1, r2, #24
 8002878:	021d      	lsls	r5, r3, #8
 800287a:	430d      	orrs	r5, r1
 800287c:	0214      	lsls	r4, r2, #8
 800287e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002880:	685b      	ldr	r3, [r3, #4]
 8002882:	085b      	lsrs	r3, r3, #1
 8002884:	60bb      	str	r3, [r7, #8]
 8002886:	2300      	movs	r3, #0
 8002888:	60fb      	str	r3, [r7, #12]
 800288a:	68b8      	ldr	r0, [r7, #8]
 800288c:	68f9      	ldr	r1, [r7, #12]
 800288e:	1900      	adds	r0, r0, r4
 8002890:	4169      	adcs	r1, r5
 8002892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002894:	685b      	ldr	r3, [r3, #4]
 8002896:	603b      	str	r3, [r7, #0]
 8002898:	2300      	movs	r3, #0
 800289a:	607b      	str	r3, [r7, #4]
 800289c:	683a      	ldr	r2, [r7, #0]
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	f7fd fdae 	bl	8000400 <__aeabi_uldivmod>
 80028a4:	0002      	movs	r2, r0
 80028a6:	000b      	movs	r3, r1
 80028a8:	0013      	movs	r3, r2
 80028aa:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80028ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80028ae:	23c0      	movs	r3, #192	; 0xc0
 80028b0:	009b      	lsls	r3, r3, #2
 80028b2:	429a      	cmp	r2, r3
 80028b4:	d309      	bcc.n	80028ca <UART_SetConfig+0x4be>
 80028b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80028b8:	2380      	movs	r3, #128	; 0x80
 80028ba:	035b      	lsls	r3, r3, #13
 80028bc:	429a      	cmp	r2, r3
 80028be:	d204      	bcs.n	80028ca <UART_SetConfig+0x4be>
        {
          huart->Instance->BRR = usartdiv;
 80028c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80028c6:	60da      	str	r2, [r3, #12]
 80028c8:	e006      	b.n	80028d8 <UART_SetConfig+0x4cc>
        }
        else
        {
          ret = HAL_ERROR;
 80028ca:	231a      	movs	r3, #26
 80028cc:	2220      	movs	r2, #32
 80028ce:	189b      	adds	r3, r3, r2
 80028d0:	19db      	adds	r3, r3, r7
 80028d2:	2201      	movs	r2, #1
 80028d4:	701a      	strb	r2, [r3, #0]
    if (pclk != 0U)
 80028d6:	e0d0      	b.n	8002a7a <UART_SetConfig+0x66e>
 80028d8:	e0cf      	b.n	8002a7a <UART_SetConfig+0x66e>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80028da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028dc:	69da      	ldr	r2, [r3, #28]
 80028de:	2380      	movs	r3, #128	; 0x80
 80028e0:	021b      	lsls	r3, r3, #8
 80028e2:	429a      	cmp	r2, r3
 80028e4:	d000      	beq.n	80028e8 <UART_SetConfig+0x4dc>
 80028e6:	e070      	b.n	80029ca <UART_SetConfig+0x5be>
  {
    switch (clocksource)
 80028e8:	231b      	movs	r3, #27
 80028ea:	2220      	movs	r2, #32
 80028ec:	189b      	adds	r3, r3, r2
 80028ee:	19db      	adds	r3, r3, r7
 80028f0:	781b      	ldrb	r3, [r3, #0]
 80028f2:	2b08      	cmp	r3, #8
 80028f4:	d015      	beq.n	8002922 <UART_SetConfig+0x516>
 80028f6:	dc18      	bgt.n	800292a <UART_SetConfig+0x51e>
 80028f8:	2b04      	cmp	r3, #4
 80028fa:	d00d      	beq.n	8002918 <UART_SetConfig+0x50c>
 80028fc:	dc15      	bgt.n	800292a <UART_SetConfig+0x51e>
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d002      	beq.n	8002908 <UART_SetConfig+0x4fc>
 8002902:	2b02      	cmp	r3, #2
 8002904:	d005      	beq.n	8002912 <UART_SetConfig+0x506>
 8002906:	e010      	b.n	800292a <UART_SetConfig+0x51e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002908:	f7ff f95a 	bl	8001bc0 <HAL_RCC_GetPCLK1Freq>
 800290c:	0003      	movs	r3, r0
 800290e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002910:	e014      	b.n	800293c <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002912:	4b67      	ldr	r3, [pc, #412]	; (8002ab0 <UART_SetConfig+0x6a4>)
 8002914:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002916:	e011      	b.n	800293c <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002918:	f7ff f8c6 	bl	8001aa8 <HAL_RCC_GetSysClockFreq>
 800291c:	0003      	movs	r3, r0
 800291e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002920:	e00c      	b.n	800293c <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002922:	2380      	movs	r3, #128	; 0x80
 8002924:	021b      	lsls	r3, r3, #8
 8002926:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002928:	e008      	b.n	800293c <UART_SetConfig+0x530>
      default:
        pclk = 0U;
 800292a:	2300      	movs	r3, #0
 800292c:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 800292e:	231a      	movs	r3, #26
 8002930:	2220      	movs	r2, #32
 8002932:	189b      	adds	r3, r3, r2
 8002934:	19db      	adds	r3, r3, r7
 8002936:	2201      	movs	r2, #1
 8002938:	701a      	strb	r2, [r3, #0]
        break;
 800293a:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800293c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800293e:	2b00      	cmp	r3, #0
 8002940:	d100      	bne.n	8002944 <UART_SetConfig+0x538>
 8002942:	e09a      	b.n	8002a7a <UART_SetConfig+0x66e>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002946:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002948:	4b5a      	ldr	r3, [pc, #360]	; (8002ab4 <UART_SetConfig+0x6a8>)
 800294a:	0052      	lsls	r2, r2, #1
 800294c:	5ad3      	ldrh	r3, [r2, r3]
 800294e:	0019      	movs	r1, r3
 8002950:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002952:	f7fd fbdf 	bl	8000114 <__udivsi3>
 8002956:	0003      	movs	r3, r0
 8002958:	005a      	lsls	r2, r3, #1
 800295a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800295c:	685b      	ldr	r3, [r3, #4]
 800295e:	085b      	lsrs	r3, r3, #1
 8002960:	18d2      	adds	r2, r2, r3
 8002962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002964:	685b      	ldr	r3, [r3, #4]
 8002966:	0019      	movs	r1, r3
 8002968:	0010      	movs	r0, r2
 800296a:	f7fd fbd3 	bl	8000114 <__udivsi3>
 800296e:	0003      	movs	r3, r0
 8002970:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002972:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002974:	2b0f      	cmp	r3, #15
 8002976:	d921      	bls.n	80029bc <UART_SetConfig+0x5b0>
 8002978:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800297a:	2380      	movs	r3, #128	; 0x80
 800297c:	025b      	lsls	r3, r3, #9
 800297e:	429a      	cmp	r2, r3
 8002980:	d21c      	bcs.n	80029bc <UART_SetConfig+0x5b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002982:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002984:	b29a      	uxth	r2, r3
 8002986:	200e      	movs	r0, #14
 8002988:	2420      	movs	r4, #32
 800298a:	1903      	adds	r3, r0, r4
 800298c:	19db      	adds	r3, r3, r7
 800298e:	210f      	movs	r1, #15
 8002990:	438a      	bics	r2, r1
 8002992:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002994:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002996:	085b      	lsrs	r3, r3, #1
 8002998:	b29b      	uxth	r3, r3
 800299a:	2207      	movs	r2, #7
 800299c:	4013      	ands	r3, r2
 800299e:	b299      	uxth	r1, r3
 80029a0:	1903      	adds	r3, r0, r4
 80029a2:	19db      	adds	r3, r3, r7
 80029a4:	1902      	adds	r2, r0, r4
 80029a6:	19d2      	adds	r2, r2, r7
 80029a8:	8812      	ldrh	r2, [r2, #0]
 80029aa:	430a      	orrs	r2, r1
 80029ac:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80029ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	1902      	adds	r2, r0, r4
 80029b4:	19d2      	adds	r2, r2, r7
 80029b6:	8812      	ldrh	r2, [r2, #0]
 80029b8:	60da      	str	r2, [r3, #12]
 80029ba:	e05e      	b.n	8002a7a <UART_SetConfig+0x66e>
      }
      else
      {
        ret = HAL_ERROR;
 80029bc:	231a      	movs	r3, #26
 80029be:	2220      	movs	r2, #32
 80029c0:	189b      	adds	r3, r3, r2
 80029c2:	19db      	adds	r3, r3, r7
 80029c4:	2201      	movs	r2, #1
 80029c6:	701a      	strb	r2, [r3, #0]
 80029c8:	e057      	b.n	8002a7a <UART_SetConfig+0x66e>
      }
    }
  }
  else
  {
    switch (clocksource)
 80029ca:	231b      	movs	r3, #27
 80029cc:	2220      	movs	r2, #32
 80029ce:	189b      	adds	r3, r3, r2
 80029d0:	19db      	adds	r3, r3, r7
 80029d2:	781b      	ldrb	r3, [r3, #0]
 80029d4:	2b08      	cmp	r3, #8
 80029d6:	d015      	beq.n	8002a04 <UART_SetConfig+0x5f8>
 80029d8:	dc18      	bgt.n	8002a0c <UART_SetConfig+0x600>
 80029da:	2b04      	cmp	r3, #4
 80029dc:	d00d      	beq.n	80029fa <UART_SetConfig+0x5ee>
 80029de:	dc15      	bgt.n	8002a0c <UART_SetConfig+0x600>
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d002      	beq.n	80029ea <UART_SetConfig+0x5de>
 80029e4:	2b02      	cmp	r3, #2
 80029e6:	d005      	beq.n	80029f4 <UART_SetConfig+0x5e8>
 80029e8:	e010      	b.n	8002a0c <UART_SetConfig+0x600>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80029ea:	f7ff f8e9 	bl	8001bc0 <HAL_RCC_GetPCLK1Freq>
 80029ee:	0003      	movs	r3, r0
 80029f0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80029f2:	e014      	b.n	8002a1e <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80029f4:	4b2e      	ldr	r3, [pc, #184]	; (8002ab0 <UART_SetConfig+0x6a4>)
 80029f6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80029f8:	e011      	b.n	8002a1e <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80029fa:	f7ff f855 	bl	8001aa8 <HAL_RCC_GetSysClockFreq>
 80029fe:	0003      	movs	r3, r0
 8002a00:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002a02:	e00c      	b.n	8002a1e <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002a04:	2380      	movs	r3, #128	; 0x80
 8002a06:	021b      	lsls	r3, r3, #8
 8002a08:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002a0a:	e008      	b.n	8002a1e <UART_SetConfig+0x612>
      default:
        pclk = 0U;
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8002a10:	231a      	movs	r3, #26
 8002a12:	2220      	movs	r2, #32
 8002a14:	189b      	adds	r3, r3, r2
 8002a16:	19db      	adds	r3, r3, r7
 8002a18:	2201      	movs	r2, #1
 8002a1a:	701a      	strb	r2, [r3, #0]
        break;
 8002a1c:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8002a1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d02a      	beq.n	8002a7a <UART_SetConfig+0x66e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a26:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002a28:	4b22      	ldr	r3, [pc, #136]	; (8002ab4 <UART_SetConfig+0x6a8>)
 8002a2a:	0052      	lsls	r2, r2, #1
 8002a2c:	5ad3      	ldrh	r3, [r2, r3]
 8002a2e:	0019      	movs	r1, r3
 8002a30:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002a32:	f7fd fb6f 	bl	8000114 <__udivsi3>
 8002a36:	0003      	movs	r3, r0
 8002a38:	001a      	movs	r2, r3
 8002a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a3c:	685b      	ldr	r3, [r3, #4]
 8002a3e:	085b      	lsrs	r3, r3, #1
 8002a40:	18d2      	adds	r2, r2, r3
 8002a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a44:	685b      	ldr	r3, [r3, #4]
 8002a46:	0019      	movs	r1, r3
 8002a48:	0010      	movs	r0, r2
 8002a4a:	f7fd fb63 	bl	8000114 <__udivsi3>
 8002a4e:	0003      	movs	r3, r0
 8002a50:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002a52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a54:	2b0f      	cmp	r3, #15
 8002a56:	d90a      	bls.n	8002a6e <UART_SetConfig+0x662>
 8002a58:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002a5a:	2380      	movs	r3, #128	; 0x80
 8002a5c:	025b      	lsls	r3, r3, #9
 8002a5e:	429a      	cmp	r2, r3
 8002a60:	d205      	bcs.n	8002a6e <UART_SetConfig+0x662>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002a62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a64:	b29a      	uxth	r2, r3
 8002a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	60da      	str	r2, [r3, #12]
 8002a6c:	e005      	b.n	8002a7a <UART_SetConfig+0x66e>
      }
      else
      {
        ret = HAL_ERROR;
 8002a6e:	231a      	movs	r3, #26
 8002a70:	2220      	movs	r2, #32
 8002a72:	189b      	adds	r3, r3, r2
 8002a74:	19db      	adds	r3, r3, r7
 8002a76:	2201      	movs	r2, #1
 8002a78:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8002a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a7c:	226a      	movs	r2, #106	; 0x6a
 8002a7e:	2101      	movs	r1, #1
 8002a80:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8002a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a84:	2268      	movs	r2, #104	; 0x68
 8002a86:	2101      	movs	r1, #1
 8002a88:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8002a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a92:	2200      	movs	r2, #0
 8002a94:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8002a96:	231a      	movs	r3, #26
 8002a98:	2220      	movs	r2, #32
 8002a9a:	189b      	adds	r3, r3, r2
 8002a9c:	19db      	adds	r3, r3, r7
 8002a9e:	781b      	ldrb	r3, [r3, #0]
}
 8002aa0:	0018      	movs	r0, r3
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	b010      	add	sp, #64	; 0x40
 8002aa6:	bdb0      	pop	{r4, r5, r7, pc}
 8002aa8:	40008000 	.word	0x40008000
 8002aac:	40008400 	.word	0x40008400
 8002ab0:	00f42400 	.word	0x00f42400
 8002ab4:	0800316c 	.word	0x0800316c

08002ab8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b082      	sub	sp, #8
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ac4:	2201      	movs	r2, #1
 8002ac6:	4013      	ands	r3, r2
 8002ac8:	d00b      	beq.n	8002ae2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	685b      	ldr	r3, [r3, #4]
 8002ad0:	4a4a      	ldr	r2, [pc, #296]	; (8002bfc <UART_AdvFeatureConfig+0x144>)
 8002ad2:	4013      	ands	r3, r2
 8002ad4:	0019      	movs	r1, r3
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	430a      	orrs	r2, r1
 8002ae0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ae6:	2202      	movs	r2, #2
 8002ae8:	4013      	ands	r3, r2
 8002aea:	d00b      	beq.n	8002b04 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	685b      	ldr	r3, [r3, #4]
 8002af2:	4a43      	ldr	r2, [pc, #268]	; (8002c00 <UART_AdvFeatureConfig+0x148>)
 8002af4:	4013      	ands	r3, r2
 8002af6:	0019      	movs	r1, r3
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	430a      	orrs	r2, r1
 8002b02:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b08:	2204      	movs	r2, #4
 8002b0a:	4013      	ands	r3, r2
 8002b0c:	d00b      	beq.n	8002b26 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	685b      	ldr	r3, [r3, #4]
 8002b14:	4a3b      	ldr	r2, [pc, #236]	; (8002c04 <UART_AdvFeatureConfig+0x14c>)
 8002b16:	4013      	ands	r3, r2
 8002b18:	0019      	movs	r1, r3
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	430a      	orrs	r2, r1
 8002b24:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b2a:	2208      	movs	r2, #8
 8002b2c:	4013      	ands	r3, r2
 8002b2e:	d00b      	beq.n	8002b48 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	685b      	ldr	r3, [r3, #4]
 8002b36:	4a34      	ldr	r2, [pc, #208]	; (8002c08 <UART_AdvFeatureConfig+0x150>)
 8002b38:	4013      	ands	r3, r2
 8002b3a:	0019      	movs	r1, r3
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	430a      	orrs	r2, r1
 8002b46:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b4c:	2210      	movs	r2, #16
 8002b4e:	4013      	ands	r3, r2
 8002b50:	d00b      	beq.n	8002b6a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	689b      	ldr	r3, [r3, #8]
 8002b58:	4a2c      	ldr	r2, [pc, #176]	; (8002c0c <UART_AdvFeatureConfig+0x154>)
 8002b5a:	4013      	ands	r3, r2
 8002b5c:	0019      	movs	r1, r3
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	430a      	orrs	r2, r1
 8002b68:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b6e:	2220      	movs	r2, #32
 8002b70:	4013      	ands	r3, r2
 8002b72:	d00b      	beq.n	8002b8c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	689b      	ldr	r3, [r3, #8]
 8002b7a:	4a25      	ldr	r2, [pc, #148]	; (8002c10 <UART_AdvFeatureConfig+0x158>)
 8002b7c:	4013      	ands	r3, r2
 8002b7e:	0019      	movs	r1, r3
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	430a      	orrs	r2, r1
 8002b8a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b90:	2240      	movs	r2, #64	; 0x40
 8002b92:	4013      	ands	r3, r2
 8002b94:	d01d      	beq.n	8002bd2 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	685b      	ldr	r3, [r3, #4]
 8002b9c:	4a1d      	ldr	r2, [pc, #116]	; (8002c14 <UART_AdvFeatureConfig+0x15c>)
 8002b9e:	4013      	ands	r3, r2
 8002ba0:	0019      	movs	r1, r3
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	430a      	orrs	r2, r1
 8002bac:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002bb2:	2380      	movs	r3, #128	; 0x80
 8002bb4:	035b      	lsls	r3, r3, #13
 8002bb6:	429a      	cmp	r2, r3
 8002bb8:	d10b      	bne.n	8002bd2 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	685b      	ldr	r3, [r3, #4]
 8002bc0:	4a15      	ldr	r2, [pc, #84]	; (8002c18 <UART_AdvFeatureConfig+0x160>)
 8002bc2:	4013      	ands	r3, r2
 8002bc4:	0019      	movs	r1, r3
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	430a      	orrs	r2, r1
 8002bd0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bd6:	2280      	movs	r2, #128	; 0x80
 8002bd8:	4013      	ands	r3, r2
 8002bda:	d00b      	beq.n	8002bf4 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	685b      	ldr	r3, [r3, #4]
 8002be2:	4a0e      	ldr	r2, [pc, #56]	; (8002c1c <UART_AdvFeatureConfig+0x164>)
 8002be4:	4013      	ands	r3, r2
 8002be6:	0019      	movs	r1, r3
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	430a      	orrs	r2, r1
 8002bf2:	605a      	str	r2, [r3, #4]
  }
}
 8002bf4:	46c0      	nop			; (mov r8, r8)
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	b002      	add	sp, #8
 8002bfa:	bd80      	pop	{r7, pc}
 8002bfc:	fffdffff 	.word	0xfffdffff
 8002c00:	fffeffff 	.word	0xfffeffff
 8002c04:	fffbffff 	.word	0xfffbffff
 8002c08:	ffff7fff 	.word	0xffff7fff
 8002c0c:	ffffefff 	.word	0xffffefff
 8002c10:	ffffdfff 	.word	0xffffdfff
 8002c14:	ffefffff 	.word	0xffefffff
 8002c18:	ff9fffff 	.word	0xff9fffff
 8002c1c:	fff7ffff 	.word	0xfff7ffff

08002c20 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b086      	sub	sp, #24
 8002c24:	af02      	add	r7, sp, #8
 8002c26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2290      	movs	r2, #144	; 0x90
 8002c2c:	2100      	movs	r1, #0
 8002c2e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002c30:	f7fe f83e 	bl	8000cb0 <HAL_GetTick>
 8002c34:	0003      	movs	r3, r0
 8002c36:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	2208      	movs	r2, #8
 8002c40:	4013      	ands	r3, r2
 8002c42:	2b08      	cmp	r3, #8
 8002c44:	d10c      	bne.n	8002c60 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	2280      	movs	r2, #128	; 0x80
 8002c4a:	0391      	lsls	r1, r2, #14
 8002c4c:	6878      	ldr	r0, [r7, #4]
 8002c4e:	4a1a      	ldr	r2, [pc, #104]	; (8002cb8 <UART_CheckIdleState+0x98>)
 8002c50:	9200      	str	r2, [sp, #0]
 8002c52:	2200      	movs	r2, #0
 8002c54:	f000 f832 	bl	8002cbc <UART_WaitOnFlagUntilTimeout>
 8002c58:	1e03      	subs	r3, r0, #0
 8002c5a:	d001      	beq.n	8002c60 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002c5c:	2303      	movs	r3, #3
 8002c5e:	e026      	b.n	8002cae <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	2204      	movs	r2, #4
 8002c68:	4013      	ands	r3, r2
 8002c6a:	2b04      	cmp	r3, #4
 8002c6c:	d10c      	bne.n	8002c88 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	2280      	movs	r2, #128	; 0x80
 8002c72:	03d1      	lsls	r1, r2, #15
 8002c74:	6878      	ldr	r0, [r7, #4]
 8002c76:	4a10      	ldr	r2, [pc, #64]	; (8002cb8 <UART_CheckIdleState+0x98>)
 8002c78:	9200      	str	r2, [sp, #0]
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	f000 f81e 	bl	8002cbc <UART_WaitOnFlagUntilTimeout>
 8002c80:	1e03      	subs	r3, r0, #0
 8002c82:	d001      	beq.n	8002c88 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002c84:	2303      	movs	r3, #3
 8002c86:	e012      	b.n	8002cae <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2288      	movs	r2, #136	; 0x88
 8002c8c:	2120      	movs	r1, #32
 8002c8e:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	228c      	movs	r2, #140	; 0x8c
 8002c94:	2120      	movs	r1, #32
 8002c96:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2284      	movs	r2, #132	; 0x84
 8002ca8:	2100      	movs	r1, #0
 8002caa:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002cac:	2300      	movs	r3, #0
}
 8002cae:	0018      	movs	r0, r3
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	b004      	add	sp, #16
 8002cb4:	bd80      	pop	{r7, pc}
 8002cb6:	46c0      	nop			; (mov r8, r8)
 8002cb8:	01ffffff 	.word	0x01ffffff

08002cbc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b094      	sub	sp, #80	; 0x50
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	60f8      	str	r0, [r7, #12]
 8002cc4:	60b9      	str	r1, [r7, #8]
 8002cc6:	603b      	str	r3, [r7, #0]
 8002cc8:	1dfb      	adds	r3, r7, #7
 8002cca:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002ccc:	e0a7      	b.n	8002e1e <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002cce:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002cd0:	3301      	adds	r3, #1
 8002cd2:	d100      	bne.n	8002cd6 <UART_WaitOnFlagUntilTimeout+0x1a>
 8002cd4:	e0a3      	b.n	8002e1e <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002cd6:	f7fd ffeb 	bl	8000cb0 <HAL_GetTick>
 8002cda:	0002      	movs	r2, r0
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	1ad3      	subs	r3, r2, r3
 8002ce0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002ce2:	429a      	cmp	r2, r3
 8002ce4:	d302      	bcc.n	8002cec <UART_WaitOnFlagUntilTimeout+0x30>
 8002ce6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d13f      	bne.n	8002d6c <UART_WaitOnFlagUntilTimeout+0xb0>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002cec:	f3ef 8310 	mrs	r3, PRIMASK
 8002cf0:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8002cf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8002cf4:	647b      	str	r3, [r7, #68]	; 0x44
 8002cf6:	2301      	movs	r3, #1
 8002cf8:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002cfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cfc:	f383 8810 	msr	PRIMASK, r3
}
 8002d00:	46c0      	nop			; (mov r8, r8)
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	681a      	ldr	r2, [r3, #0]
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	494e      	ldr	r1, [pc, #312]	; (8002e48 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8002d0e:	400a      	ands	r2, r1
 8002d10:	601a      	str	r2, [r3, #0]
 8002d12:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d14:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d18:	f383 8810 	msr	PRIMASK, r3
}
 8002d1c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002d1e:	f3ef 8310 	mrs	r3, PRIMASK
 8002d22:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8002d24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d26:	643b      	str	r3, [r7, #64]	; 0x40
 8002d28:	2301      	movs	r3, #1
 8002d2a:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d2e:	f383 8810 	msr	PRIMASK, r3
}
 8002d32:	46c0      	nop			; (mov r8, r8)
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	689a      	ldr	r2, [r3, #8]
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	2101      	movs	r1, #1
 8002d40:	438a      	bics	r2, r1
 8002d42:	609a      	str	r2, [r3, #8]
 8002d44:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d46:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d4a:	f383 8810 	msr	PRIMASK, r3
}
 8002d4e:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	2288      	movs	r2, #136	; 0x88
 8002d54:	2120      	movs	r1, #32
 8002d56:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	228c      	movs	r2, #140	; 0x8c
 8002d5c:	2120      	movs	r1, #32
 8002d5e:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	2284      	movs	r2, #132	; 0x84
 8002d64:	2100      	movs	r1, #0
 8002d66:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002d68:	2303      	movs	r3, #3
 8002d6a:	e069      	b.n	8002e40 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	2204      	movs	r2, #4
 8002d74:	4013      	ands	r3, r2
 8002d76:	d052      	beq.n	8002e1e <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	69da      	ldr	r2, [r3, #28]
 8002d7e:	2380      	movs	r3, #128	; 0x80
 8002d80:	011b      	lsls	r3, r3, #4
 8002d82:	401a      	ands	r2, r3
 8002d84:	2380      	movs	r3, #128	; 0x80
 8002d86:	011b      	lsls	r3, r3, #4
 8002d88:	429a      	cmp	r2, r3
 8002d8a:	d148      	bne.n	8002e1e <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	2280      	movs	r2, #128	; 0x80
 8002d92:	0112      	lsls	r2, r2, #4
 8002d94:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002d96:	f3ef 8310 	mrs	r3, PRIMASK
 8002d9a:	613b      	str	r3, [r7, #16]
  return(result);
 8002d9c:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8002d9e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002da0:	2301      	movs	r3, #1
 8002da2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002da4:	697b      	ldr	r3, [r7, #20]
 8002da6:	f383 8810 	msr	PRIMASK, r3
}
 8002daa:	46c0      	nop			; (mov r8, r8)
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	681a      	ldr	r2, [r3, #0]
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	4924      	ldr	r1, [pc, #144]	; (8002e48 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8002db8:	400a      	ands	r2, r1
 8002dba:	601a      	str	r2, [r3, #0]
 8002dbc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002dbe:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002dc0:	69bb      	ldr	r3, [r7, #24]
 8002dc2:	f383 8810 	msr	PRIMASK, r3
}
 8002dc6:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002dc8:	f3ef 8310 	mrs	r3, PRIMASK
 8002dcc:	61fb      	str	r3, [r7, #28]
  return(result);
 8002dce:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002dd0:	64bb      	str	r3, [r7, #72]	; 0x48
 8002dd2:	2301      	movs	r3, #1
 8002dd4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002dd6:	6a3b      	ldr	r3, [r7, #32]
 8002dd8:	f383 8810 	msr	PRIMASK, r3
}
 8002ddc:	46c0      	nop			; (mov r8, r8)
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	689a      	ldr	r2, [r3, #8]
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	2101      	movs	r1, #1
 8002dea:	438a      	bics	r2, r1
 8002dec:	609a      	str	r2, [r3, #8]
 8002dee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002df0:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002df4:	f383 8810 	msr	PRIMASK, r3
}
 8002df8:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	2288      	movs	r2, #136	; 0x88
 8002dfe:	2120      	movs	r1, #32
 8002e00:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	228c      	movs	r2, #140	; 0x8c
 8002e06:	2120      	movs	r1, #32
 8002e08:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	2290      	movs	r2, #144	; 0x90
 8002e0e:	2120      	movs	r1, #32
 8002e10:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	2284      	movs	r2, #132	; 0x84
 8002e16:	2100      	movs	r1, #0
 8002e18:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8002e1a:	2303      	movs	r3, #3
 8002e1c:	e010      	b.n	8002e40 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	69db      	ldr	r3, [r3, #28]
 8002e24:	68ba      	ldr	r2, [r7, #8]
 8002e26:	4013      	ands	r3, r2
 8002e28:	68ba      	ldr	r2, [r7, #8]
 8002e2a:	1ad3      	subs	r3, r2, r3
 8002e2c:	425a      	negs	r2, r3
 8002e2e:	4153      	adcs	r3, r2
 8002e30:	b2db      	uxtb	r3, r3
 8002e32:	001a      	movs	r2, r3
 8002e34:	1dfb      	adds	r3, r7, #7
 8002e36:	781b      	ldrb	r3, [r3, #0]
 8002e38:	429a      	cmp	r2, r3
 8002e3a:	d100      	bne.n	8002e3e <UART_WaitOnFlagUntilTimeout+0x182>
 8002e3c:	e747      	b.n	8002cce <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002e3e:	2300      	movs	r3, #0
}
 8002e40:	0018      	movs	r0, r3
 8002e42:	46bd      	mov	sp, r7
 8002e44:	b014      	add	sp, #80	; 0x50
 8002e46:	bd80      	pop	{r7, pc}
 8002e48:	fffffe5f 	.word	0xfffffe5f

08002e4c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b084      	sub	sp, #16
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2284      	movs	r2, #132	; 0x84
 8002e58:	5c9b      	ldrb	r3, [r3, r2]
 8002e5a:	2b01      	cmp	r3, #1
 8002e5c:	d101      	bne.n	8002e62 <HAL_UARTEx_DisableFifoMode+0x16>
 8002e5e:	2302      	movs	r3, #2
 8002e60:	e027      	b.n	8002eb2 <HAL_UARTEx_DisableFifoMode+0x66>
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	2284      	movs	r2, #132	; 0x84
 8002e66:	2101      	movs	r1, #1
 8002e68:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	2288      	movs	r2, #136	; 0x88
 8002e6e:	2124      	movs	r1, #36	; 0x24
 8002e70:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	681a      	ldr	r2, [r3, #0]
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	2101      	movs	r1, #1
 8002e86:	438a      	bics	r2, r1
 8002e88:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	4a0b      	ldr	r2, [pc, #44]	; (8002ebc <HAL_UARTEx_DisableFifoMode+0x70>)
 8002e8e:	4013      	ands	r3, r2
 8002e90:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	2200      	movs	r2, #0
 8002e96:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	68fa      	ldr	r2, [r7, #12]
 8002e9e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2288      	movs	r2, #136	; 0x88
 8002ea4:	2120      	movs	r1, #32
 8002ea6:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2284      	movs	r2, #132	; 0x84
 8002eac:	2100      	movs	r1, #0
 8002eae:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002eb0:	2300      	movs	r3, #0
}
 8002eb2:	0018      	movs	r0, r3
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	b004      	add	sp, #16
 8002eb8:	bd80      	pop	{r7, pc}
 8002eba:	46c0      	nop			; (mov r8, r8)
 8002ebc:	dfffffff 	.word	0xdfffffff

08002ec0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b084      	sub	sp, #16
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
 8002ec8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	2284      	movs	r2, #132	; 0x84
 8002ece:	5c9b      	ldrb	r3, [r3, r2]
 8002ed0:	2b01      	cmp	r3, #1
 8002ed2:	d101      	bne.n	8002ed8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8002ed4:	2302      	movs	r3, #2
 8002ed6:	e02e      	b.n	8002f36 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2284      	movs	r2, #132	; 0x84
 8002edc:	2101      	movs	r1, #1
 8002ede:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2288      	movs	r2, #136	; 0x88
 8002ee4:	2124      	movs	r1, #36	; 0x24
 8002ee6:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	681a      	ldr	r2, [r3, #0]
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	2101      	movs	r1, #1
 8002efc:	438a      	bics	r2, r1
 8002efe:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	689b      	ldr	r3, [r3, #8]
 8002f06:	00db      	lsls	r3, r3, #3
 8002f08:	08d9      	lsrs	r1, r3, #3
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	683a      	ldr	r2, [r7, #0]
 8002f10:	430a      	orrs	r2, r1
 8002f12:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	0018      	movs	r0, r3
 8002f18:	f000 f854 	bl	8002fc4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	68fa      	ldr	r2, [r7, #12]
 8002f22:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2288      	movs	r2, #136	; 0x88
 8002f28:	2120      	movs	r1, #32
 8002f2a:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2284      	movs	r2, #132	; 0x84
 8002f30:	2100      	movs	r1, #0
 8002f32:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002f34:	2300      	movs	r3, #0
}
 8002f36:	0018      	movs	r0, r3
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	b004      	add	sp, #16
 8002f3c:	bd80      	pop	{r7, pc}
	...

08002f40 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b084      	sub	sp, #16
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
 8002f48:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	2284      	movs	r2, #132	; 0x84
 8002f4e:	5c9b      	ldrb	r3, [r3, r2]
 8002f50:	2b01      	cmp	r3, #1
 8002f52:	d101      	bne.n	8002f58 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8002f54:	2302      	movs	r3, #2
 8002f56:	e02f      	b.n	8002fb8 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2284      	movs	r2, #132	; 0x84
 8002f5c:	2101      	movs	r1, #1
 8002f5e:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2288      	movs	r2, #136	; 0x88
 8002f64:	2124      	movs	r1, #36	; 0x24
 8002f66:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	681a      	ldr	r2, [r3, #0]
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	2101      	movs	r1, #1
 8002f7c:	438a      	bics	r2, r1
 8002f7e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	689b      	ldr	r3, [r3, #8]
 8002f86:	4a0e      	ldr	r2, [pc, #56]	; (8002fc0 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8002f88:	4013      	ands	r3, r2
 8002f8a:	0019      	movs	r1, r3
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	683a      	ldr	r2, [r7, #0]
 8002f92:	430a      	orrs	r2, r1
 8002f94:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	0018      	movs	r0, r3
 8002f9a:	f000 f813 	bl	8002fc4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	68fa      	ldr	r2, [r7, #12]
 8002fa4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	2288      	movs	r2, #136	; 0x88
 8002faa:	2120      	movs	r1, #32
 8002fac:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	2284      	movs	r2, #132	; 0x84
 8002fb2:	2100      	movs	r1, #0
 8002fb4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002fb6:	2300      	movs	r3, #0
}
 8002fb8:	0018      	movs	r0, r3
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	b004      	add	sp, #16
 8002fbe:	bd80      	pop	{r7, pc}
 8002fc0:	f1ffffff 	.word	0xf1ffffff

08002fc4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8002fc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002fc6:	b085      	sub	sp, #20
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d108      	bne.n	8002fe6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	226a      	movs	r2, #106	; 0x6a
 8002fd8:	2101      	movs	r1, #1
 8002fda:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2268      	movs	r2, #104	; 0x68
 8002fe0:	2101      	movs	r1, #1
 8002fe2:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8002fe4:	e043      	b.n	800306e <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8002fe6:	260f      	movs	r6, #15
 8002fe8:	19bb      	adds	r3, r7, r6
 8002fea:	2208      	movs	r2, #8
 8002fec:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8002fee:	200e      	movs	r0, #14
 8002ff0:	183b      	adds	r3, r7, r0
 8002ff2:	2208      	movs	r2, #8
 8002ff4:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	689b      	ldr	r3, [r3, #8]
 8002ffc:	0e5b      	lsrs	r3, r3, #25
 8002ffe:	b2da      	uxtb	r2, r3
 8003000:	240d      	movs	r4, #13
 8003002:	193b      	adds	r3, r7, r4
 8003004:	2107      	movs	r1, #7
 8003006:	400a      	ands	r2, r1
 8003008:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	689b      	ldr	r3, [r3, #8]
 8003010:	0f5b      	lsrs	r3, r3, #29
 8003012:	b2da      	uxtb	r2, r3
 8003014:	250c      	movs	r5, #12
 8003016:	197b      	adds	r3, r7, r5
 8003018:	2107      	movs	r1, #7
 800301a:	400a      	ands	r2, r1
 800301c:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800301e:	183b      	adds	r3, r7, r0
 8003020:	781b      	ldrb	r3, [r3, #0]
 8003022:	197a      	adds	r2, r7, r5
 8003024:	7812      	ldrb	r2, [r2, #0]
 8003026:	4914      	ldr	r1, [pc, #80]	; (8003078 <UARTEx_SetNbDataToProcess+0xb4>)
 8003028:	5c8a      	ldrb	r2, [r1, r2]
 800302a:	435a      	muls	r2, r3
 800302c:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 800302e:	197b      	adds	r3, r7, r5
 8003030:	781b      	ldrb	r3, [r3, #0]
 8003032:	4a12      	ldr	r2, [pc, #72]	; (800307c <UARTEx_SetNbDataToProcess+0xb8>)
 8003034:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003036:	0019      	movs	r1, r3
 8003038:	f7fd f8f6 	bl	8000228 <__divsi3>
 800303c:	0003      	movs	r3, r0
 800303e:	b299      	uxth	r1, r3
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	226a      	movs	r2, #106	; 0x6a
 8003044:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003046:	19bb      	adds	r3, r7, r6
 8003048:	781b      	ldrb	r3, [r3, #0]
 800304a:	193a      	adds	r2, r7, r4
 800304c:	7812      	ldrb	r2, [r2, #0]
 800304e:	490a      	ldr	r1, [pc, #40]	; (8003078 <UARTEx_SetNbDataToProcess+0xb4>)
 8003050:	5c8a      	ldrb	r2, [r1, r2]
 8003052:	435a      	muls	r2, r3
 8003054:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8003056:	193b      	adds	r3, r7, r4
 8003058:	781b      	ldrb	r3, [r3, #0]
 800305a:	4a08      	ldr	r2, [pc, #32]	; (800307c <UARTEx_SetNbDataToProcess+0xb8>)
 800305c:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800305e:	0019      	movs	r1, r3
 8003060:	f7fd f8e2 	bl	8000228 <__divsi3>
 8003064:	0003      	movs	r3, r0
 8003066:	b299      	uxth	r1, r3
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2268      	movs	r2, #104	; 0x68
 800306c:	5299      	strh	r1, [r3, r2]
}
 800306e:	46c0      	nop			; (mov r8, r8)
 8003070:	46bd      	mov	sp, r7
 8003072:	b005      	add	sp, #20
 8003074:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003076:	46c0      	nop			; (mov r8, r8)
 8003078:	08003184 	.word	0x08003184
 800307c:	0800318c 	.word	0x0800318c

08003080 <memset>:
 8003080:	0003      	movs	r3, r0
 8003082:	1882      	adds	r2, r0, r2
 8003084:	4293      	cmp	r3, r2
 8003086:	d100      	bne.n	800308a <memset+0xa>
 8003088:	4770      	bx	lr
 800308a:	7019      	strb	r1, [r3, #0]
 800308c:	3301      	adds	r3, #1
 800308e:	e7f9      	b.n	8003084 <memset+0x4>

08003090 <__libc_init_array>:
 8003090:	b570      	push	{r4, r5, r6, lr}
 8003092:	2600      	movs	r6, #0
 8003094:	4c0c      	ldr	r4, [pc, #48]	; (80030c8 <__libc_init_array+0x38>)
 8003096:	4d0d      	ldr	r5, [pc, #52]	; (80030cc <__libc_init_array+0x3c>)
 8003098:	1b64      	subs	r4, r4, r5
 800309a:	10a4      	asrs	r4, r4, #2
 800309c:	42a6      	cmp	r6, r4
 800309e:	d109      	bne.n	80030b4 <__libc_init_array+0x24>
 80030a0:	2600      	movs	r6, #0
 80030a2:	f000 f819 	bl	80030d8 <_init>
 80030a6:	4c0a      	ldr	r4, [pc, #40]	; (80030d0 <__libc_init_array+0x40>)
 80030a8:	4d0a      	ldr	r5, [pc, #40]	; (80030d4 <__libc_init_array+0x44>)
 80030aa:	1b64      	subs	r4, r4, r5
 80030ac:	10a4      	asrs	r4, r4, #2
 80030ae:	42a6      	cmp	r6, r4
 80030b0:	d105      	bne.n	80030be <__libc_init_array+0x2e>
 80030b2:	bd70      	pop	{r4, r5, r6, pc}
 80030b4:	00b3      	lsls	r3, r6, #2
 80030b6:	58eb      	ldr	r3, [r5, r3]
 80030b8:	4798      	blx	r3
 80030ba:	3601      	adds	r6, #1
 80030bc:	e7ee      	b.n	800309c <__libc_init_array+0xc>
 80030be:	00b3      	lsls	r3, r6, #2
 80030c0:	58eb      	ldr	r3, [r5, r3]
 80030c2:	4798      	blx	r3
 80030c4:	3601      	adds	r6, #1
 80030c6:	e7f2      	b.n	80030ae <__libc_init_array+0x1e>
 80030c8:	0800319c 	.word	0x0800319c
 80030cc:	0800319c 	.word	0x0800319c
 80030d0:	080031a0 	.word	0x080031a0
 80030d4:	0800319c 	.word	0x0800319c

080030d8 <_init>:
 80030d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030da:	46c0      	nop			; (mov r8, r8)
 80030dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80030de:	bc08      	pop	{r3}
 80030e0:	469e      	mov	lr, r3
 80030e2:	4770      	bx	lr

080030e4 <_fini>:
 80030e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030e6:	46c0      	nop			; (mov r8, r8)
 80030e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80030ea:	bc08      	pop	{r3}
 80030ec:	469e      	mov	lr, r3
 80030ee:	4770      	bx	lr
