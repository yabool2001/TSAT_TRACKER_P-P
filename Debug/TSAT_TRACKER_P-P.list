
TSAT_TRACKER_P-P.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010e30  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001f74  08010ef0  08010ef0  00020ef0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012e64  08012e64  000306c0  2**0
                  CONTENTS
  4 .ARM          00000008  08012e64  08012e64  00022e64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012e6c  08012e6c  000306c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08012e6c  08012e6c  00022e6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08012e74  08012e74  00022e74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000006c0  20000000  08012e78  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006dc  200006c0  08013538  000306c0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000d9c  08013538  00030d9c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000306c0  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000306e8  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001b036  00000000  00000000  0003072b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000035b9  00000000  00000000  0004b761  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001948  00000000  00000000  0004ed20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000013cf  00000000  00000000  00050668  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020c65  00000000  00000000  00051a37  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001beee  00000000  00000000  0007269c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cb502  00000000  00000000  0008e58a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000077a4  00000000  00000000  00159a8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000057  00000000  00000000  00161230  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	200006c0 	.word	0x200006c0
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08010ed4 	.word	0x08010ed4

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	200006c4 	.word	0x200006c4
 8000100:	08010ed4 	.word	0x08010ed4

08000104 <strlen>:
 8000104:	2300      	movs	r3, #0
 8000106:	5cc2      	ldrb	r2, [r0, r3]
 8000108:	3301      	adds	r3, #1
 800010a:	2a00      	cmp	r2, #0
 800010c:	d1fb      	bne.n	8000106 <strlen+0x2>
 800010e:	1e58      	subs	r0, r3, #1
 8000110:	4770      	bx	lr
	...

08000114 <__gnu_thumb1_case_uqi>:
 8000114:	b402      	push	{r1}
 8000116:	4671      	mov	r1, lr
 8000118:	0849      	lsrs	r1, r1, #1
 800011a:	0049      	lsls	r1, r1, #1
 800011c:	5c09      	ldrb	r1, [r1, r0]
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	448e      	add	lr, r1
 8000122:	bc02      	pop	{r1}
 8000124:	4770      	bx	lr
 8000126:	46c0      	nop			; (mov r8, r8)

08000128 <__gnu_thumb1_case_uhi>:
 8000128:	b403      	push	{r0, r1}
 800012a:	4671      	mov	r1, lr
 800012c:	0849      	lsrs	r1, r1, #1
 800012e:	0040      	lsls	r0, r0, #1
 8000130:	0049      	lsls	r1, r1, #1
 8000132:	5a09      	ldrh	r1, [r1, r0]
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	448e      	add	lr, r1
 8000138:	bc03      	pop	{r0, r1}
 800013a:	4770      	bx	lr

0800013c <__udivsi3>:
 800013c:	2200      	movs	r2, #0
 800013e:	0843      	lsrs	r3, r0, #1
 8000140:	428b      	cmp	r3, r1
 8000142:	d374      	bcc.n	800022e <__udivsi3+0xf2>
 8000144:	0903      	lsrs	r3, r0, #4
 8000146:	428b      	cmp	r3, r1
 8000148:	d35f      	bcc.n	800020a <__udivsi3+0xce>
 800014a:	0a03      	lsrs	r3, r0, #8
 800014c:	428b      	cmp	r3, r1
 800014e:	d344      	bcc.n	80001da <__udivsi3+0x9e>
 8000150:	0b03      	lsrs	r3, r0, #12
 8000152:	428b      	cmp	r3, r1
 8000154:	d328      	bcc.n	80001a8 <__udivsi3+0x6c>
 8000156:	0c03      	lsrs	r3, r0, #16
 8000158:	428b      	cmp	r3, r1
 800015a:	d30d      	bcc.n	8000178 <__udivsi3+0x3c>
 800015c:	22ff      	movs	r2, #255	; 0xff
 800015e:	0209      	lsls	r1, r1, #8
 8000160:	ba12      	rev	r2, r2
 8000162:	0c03      	lsrs	r3, r0, #16
 8000164:	428b      	cmp	r3, r1
 8000166:	d302      	bcc.n	800016e <__udivsi3+0x32>
 8000168:	1212      	asrs	r2, r2, #8
 800016a:	0209      	lsls	r1, r1, #8
 800016c:	d065      	beq.n	800023a <__udivsi3+0xfe>
 800016e:	0b03      	lsrs	r3, r0, #12
 8000170:	428b      	cmp	r3, r1
 8000172:	d319      	bcc.n	80001a8 <__udivsi3+0x6c>
 8000174:	e000      	b.n	8000178 <__udivsi3+0x3c>
 8000176:	0a09      	lsrs	r1, r1, #8
 8000178:	0bc3      	lsrs	r3, r0, #15
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x46>
 800017e:	03cb      	lsls	r3, r1, #15
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0b83      	lsrs	r3, r0, #14
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x52>
 800018a:	038b      	lsls	r3, r1, #14
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0b43      	lsrs	r3, r0, #13
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x5e>
 8000196:	034b      	lsls	r3, r1, #13
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0b03      	lsrs	r3, r0, #12
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x6a>
 80001a2:	030b      	lsls	r3, r1, #12
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0ac3      	lsrs	r3, r0, #11
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x76>
 80001ae:	02cb      	lsls	r3, r1, #11
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	0a83      	lsrs	r3, r0, #10
 80001b6:	428b      	cmp	r3, r1
 80001b8:	d301      	bcc.n	80001be <__udivsi3+0x82>
 80001ba:	028b      	lsls	r3, r1, #10
 80001bc:	1ac0      	subs	r0, r0, r3
 80001be:	4152      	adcs	r2, r2
 80001c0:	0a43      	lsrs	r3, r0, #9
 80001c2:	428b      	cmp	r3, r1
 80001c4:	d301      	bcc.n	80001ca <__udivsi3+0x8e>
 80001c6:	024b      	lsls	r3, r1, #9
 80001c8:	1ac0      	subs	r0, r0, r3
 80001ca:	4152      	adcs	r2, r2
 80001cc:	0a03      	lsrs	r3, r0, #8
 80001ce:	428b      	cmp	r3, r1
 80001d0:	d301      	bcc.n	80001d6 <__udivsi3+0x9a>
 80001d2:	020b      	lsls	r3, r1, #8
 80001d4:	1ac0      	subs	r0, r0, r3
 80001d6:	4152      	adcs	r2, r2
 80001d8:	d2cd      	bcs.n	8000176 <__udivsi3+0x3a>
 80001da:	09c3      	lsrs	r3, r0, #7
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xa8>
 80001e0:	01cb      	lsls	r3, r1, #7
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0983      	lsrs	r3, r0, #6
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xb4>
 80001ec:	018b      	lsls	r3, r1, #6
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0943      	lsrs	r3, r0, #5
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xc0>
 80001f8:	014b      	lsls	r3, r1, #5
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0903      	lsrs	r3, r0, #4
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xcc>
 8000204:	010b      	lsls	r3, r1, #4
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	08c3      	lsrs	r3, r0, #3
 800020c:	428b      	cmp	r3, r1
 800020e:	d301      	bcc.n	8000214 <__udivsi3+0xd8>
 8000210:	00cb      	lsls	r3, r1, #3
 8000212:	1ac0      	subs	r0, r0, r3
 8000214:	4152      	adcs	r2, r2
 8000216:	0883      	lsrs	r3, r0, #2
 8000218:	428b      	cmp	r3, r1
 800021a:	d301      	bcc.n	8000220 <__udivsi3+0xe4>
 800021c:	008b      	lsls	r3, r1, #2
 800021e:	1ac0      	subs	r0, r0, r3
 8000220:	4152      	adcs	r2, r2
 8000222:	0843      	lsrs	r3, r0, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d301      	bcc.n	800022c <__udivsi3+0xf0>
 8000228:	004b      	lsls	r3, r1, #1
 800022a:	1ac0      	subs	r0, r0, r3
 800022c:	4152      	adcs	r2, r2
 800022e:	1a41      	subs	r1, r0, r1
 8000230:	d200      	bcs.n	8000234 <__udivsi3+0xf8>
 8000232:	4601      	mov	r1, r0
 8000234:	4152      	adcs	r2, r2
 8000236:	4610      	mov	r0, r2
 8000238:	4770      	bx	lr
 800023a:	e7ff      	b.n	800023c <__udivsi3+0x100>
 800023c:	b501      	push	{r0, lr}
 800023e:	2000      	movs	r0, #0
 8000240:	f000 f8f0 	bl	8000424 <__aeabi_idiv0>
 8000244:	bd02      	pop	{r1, pc}
 8000246:	46c0      	nop			; (mov r8, r8)

08000248 <__aeabi_uidivmod>:
 8000248:	2900      	cmp	r1, #0
 800024a:	d0f7      	beq.n	800023c <__udivsi3+0x100>
 800024c:	e776      	b.n	800013c <__udivsi3>
 800024e:	4770      	bx	lr

08000250 <__divsi3>:
 8000250:	4603      	mov	r3, r0
 8000252:	430b      	orrs	r3, r1
 8000254:	d47f      	bmi.n	8000356 <__divsi3+0x106>
 8000256:	2200      	movs	r2, #0
 8000258:	0843      	lsrs	r3, r0, #1
 800025a:	428b      	cmp	r3, r1
 800025c:	d374      	bcc.n	8000348 <__divsi3+0xf8>
 800025e:	0903      	lsrs	r3, r0, #4
 8000260:	428b      	cmp	r3, r1
 8000262:	d35f      	bcc.n	8000324 <__divsi3+0xd4>
 8000264:	0a03      	lsrs	r3, r0, #8
 8000266:	428b      	cmp	r3, r1
 8000268:	d344      	bcc.n	80002f4 <__divsi3+0xa4>
 800026a:	0b03      	lsrs	r3, r0, #12
 800026c:	428b      	cmp	r3, r1
 800026e:	d328      	bcc.n	80002c2 <__divsi3+0x72>
 8000270:	0c03      	lsrs	r3, r0, #16
 8000272:	428b      	cmp	r3, r1
 8000274:	d30d      	bcc.n	8000292 <__divsi3+0x42>
 8000276:	22ff      	movs	r2, #255	; 0xff
 8000278:	0209      	lsls	r1, r1, #8
 800027a:	ba12      	rev	r2, r2
 800027c:	0c03      	lsrs	r3, r0, #16
 800027e:	428b      	cmp	r3, r1
 8000280:	d302      	bcc.n	8000288 <__divsi3+0x38>
 8000282:	1212      	asrs	r2, r2, #8
 8000284:	0209      	lsls	r1, r1, #8
 8000286:	d065      	beq.n	8000354 <__divsi3+0x104>
 8000288:	0b03      	lsrs	r3, r0, #12
 800028a:	428b      	cmp	r3, r1
 800028c:	d319      	bcc.n	80002c2 <__divsi3+0x72>
 800028e:	e000      	b.n	8000292 <__divsi3+0x42>
 8000290:	0a09      	lsrs	r1, r1, #8
 8000292:	0bc3      	lsrs	r3, r0, #15
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x4c>
 8000298:	03cb      	lsls	r3, r1, #15
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0b83      	lsrs	r3, r0, #14
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x58>
 80002a4:	038b      	lsls	r3, r1, #14
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0b43      	lsrs	r3, r0, #13
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x64>
 80002b0:	034b      	lsls	r3, r1, #13
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0b03      	lsrs	r3, r0, #12
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x70>
 80002bc:	030b      	lsls	r3, r1, #12
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0ac3      	lsrs	r3, r0, #11
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0x7c>
 80002c8:	02cb      	lsls	r3, r1, #11
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	0a83      	lsrs	r3, r0, #10
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d301      	bcc.n	80002d8 <__divsi3+0x88>
 80002d4:	028b      	lsls	r3, r1, #10
 80002d6:	1ac0      	subs	r0, r0, r3
 80002d8:	4152      	adcs	r2, r2
 80002da:	0a43      	lsrs	r3, r0, #9
 80002dc:	428b      	cmp	r3, r1
 80002de:	d301      	bcc.n	80002e4 <__divsi3+0x94>
 80002e0:	024b      	lsls	r3, r1, #9
 80002e2:	1ac0      	subs	r0, r0, r3
 80002e4:	4152      	adcs	r2, r2
 80002e6:	0a03      	lsrs	r3, r0, #8
 80002e8:	428b      	cmp	r3, r1
 80002ea:	d301      	bcc.n	80002f0 <__divsi3+0xa0>
 80002ec:	020b      	lsls	r3, r1, #8
 80002ee:	1ac0      	subs	r0, r0, r3
 80002f0:	4152      	adcs	r2, r2
 80002f2:	d2cd      	bcs.n	8000290 <__divsi3+0x40>
 80002f4:	09c3      	lsrs	r3, r0, #7
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xae>
 80002fa:	01cb      	lsls	r3, r1, #7
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	0983      	lsrs	r3, r0, #6
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xba>
 8000306:	018b      	lsls	r3, r1, #6
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	0943      	lsrs	r3, r0, #5
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xc6>
 8000312:	014b      	lsls	r3, r1, #5
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0903      	lsrs	r3, r0, #4
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xd2>
 800031e:	010b      	lsls	r3, r1, #4
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	08c3      	lsrs	r3, r0, #3
 8000326:	428b      	cmp	r3, r1
 8000328:	d301      	bcc.n	800032e <__divsi3+0xde>
 800032a:	00cb      	lsls	r3, r1, #3
 800032c:	1ac0      	subs	r0, r0, r3
 800032e:	4152      	adcs	r2, r2
 8000330:	0883      	lsrs	r3, r0, #2
 8000332:	428b      	cmp	r3, r1
 8000334:	d301      	bcc.n	800033a <__divsi3+0xea>
 8000336:	008b      	lsls	r3, r1, #2
 8000338:	1ac0      	subs	r0, r0, r3
 800033a:	4152      	adcs	r2, r2
 800033c:	0843      	lsrs	r3, r0, #1
 800033e:	428b      	cmp	r3, r1
 8000340:	d301      	bcc.n	8000346 <__divsi3+0xf6>
 8000342:	004b      	lsls	r3, r1, #1
 8000344:	1ac0      	subs	r0, r0, r3
 8000346:	4152      	adcs	r2, r2
 8000348:	1a41      	subs	r1, r0, r1
 800034a:	d200      	bcs.n	800034e <__divsi3+0xfe>
 800034c:	4601      	mov	r1, r0
 800034e:	4152      	adcs	r2, r2
 8000350:	4610      	mov	r0, r2
 8000352:	4770      	bx	lr
 8000354:	e05d      	b.n	8000412 <__divsi3+0x1c2>
 8000356:	0fca      	lsrs	r2, r1, #31
 8000358:	d000      	beq.n	800035c <__divsi3+0x10c>
 800035a:	4249      	negs	r1, r1
 800035c:	1003      	asrs	r3, r0, #32
 800035e:	d300      	bcc.n	8000362 <__divsi3+0x112>
 8000360:	4240      	negs	r0, r0
 8000362:	4053      	eors	r3, r2
 8000364:	2200      	movs	r2, #0
 8000366:	469c      	mov	ip, r3
 8000368:	0903      	lsrs	r3, r0, #4
 800036a:	428b      	cmp	r3, r1
 800036c:	d32d      	bcc.n	80003ca <__divsi3+0x17a>
 800036e:	0a03      	lsrs	r3, r0, #8
 8000370:	428b      	cmp	r3, r1
 8000372:	d312      	bcc.n	800039a <__divsi3+0x14a>
 8000374:	22fc      	movs	r2, #252	; 0xfc
 8000376:	0189      	lsls	r1, r1, #6
 8000378:	ba12      	rev	r2, r2
 800037a:	0a03      	lsrs	r3, r0, #8
 800037c:	428b      	cmp	r3, r1
 800037e:	d30c      	bcc.n	800039a <__divsi3+0x14a>
 8000380:	0189      	lsls	r1, r1, #6
 8000382:	1192      	asrs	r2, r2, #6
 8000384:	428b      	cmp	r3, r1
 8000386:	d308      	bcc.n	800039a <__divsi3+0x14a>
 8000388:	0189      	lsls	r1, r1, #6
 800038a:	1192      	asrs	r2, r2, #6
 800038c:	428b      	cmp	r3, r1
 800038e:	d304      	bcc.n	800039a <__divsi3+0x14a>
 8000390:	0189      	lsls	r1, r1, #6
 8000392:	d03a      	beq.n	800040a <__divsi3+0x1ba>
 8000394:	1192      	asrs	r2, r2, #6
 8000396:	e000      	b.n	800039a <__divsi3+0x14a>
 8000398:	0989      	lsrs	r1, r1, #6
 800039a:	09c3      	lsrs	r3, r0, #7
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x154>
 80003a0:	01cb      	lsls	r3, r1, #7
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	0983      	lsrs	r3, r0, #6
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d301      	bcc.n	80003b0 <__divsi3+0x160>
 80003ac:	018b      	lsls	r3, r1, #6
 80003ae:	1ac0      	subs	r0, r0, r3
 80003b0:	4152      	adcs	r2, r2
 80003b2:	0943      	lsrs	r3, r0, #5
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x16c>
 80003b8:	014b      	lsls	r3, r1, #5
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	0903      	lsrs	r3, r0, #4
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x178>
 80003c4:	010b      	lsls	r3, r1, #4
 80003c6:	1ac0      	subs	r0, r0, r3
 80003c8:	4152      	adcs	r2, r2
 80003ca:	08c3      	lsrs	r3, r0, #3
 80003cc:	428b      	cmp	r3, r1
 80003ce:	d301      	bcc.n	80003d4 <__divsi3+0x184>
 80003d0:	00cb      	lsls	r3, r1, #3
 80003d2:	1ac0      	subs	r0, r0, r3
 80003d4:	4152      	adcs	r2, r2
 80003d6:	0883      	lsrs	r3, r0, #2
 80003d8:	428b      	cmp	r3, r1
 80003da:	d301      	bcc.n	80003e0 <__divsi3+0x190>
 80003dc:	008b      	lsls	r3, r1, #2
 80003de:	1ac0      	subs	r0, r0, r3
 80003e0:	4152      	adcs	r2, r2
 80003e2:	d2d9      	bcs.n	8000398 <__divsi3+0x148>
 80003e4:	0843      	lsrs	r3, r0, #1
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d301      	bcc.n	80003ee <__divsi3+0x19e>
 80003ea:	004b      	lsls	r3, r1, #1
 80003ec:	1ac0      	subs	r0, r0, r3
 80003ee:	4152      	adcs	r2, r2
 80003f0:	1a41      	subs	r1, r0, r1
 80003f2:	d200      	bcs.n	80003f6 <__divsi3+0x1a6>
 80003f4:	4601      	mov	r1, r0
 80003f6:	4663      	mov	r3, ip
 80003f8:	4152      	adcs	r2, r2
 80003fa:	105b      	asrs	r3, r3, #1
 80003fc:	4610      	mov	r0, r2
 80003fe:	d301      	bcc.n	8000404 <__divsi3+0x1b4>
 8000400:	4240      	negs	r0, r0
 8000402:	2b00      	cmp	r3, #0
 8000404:	d500      	bpl.n	8000408 <__divsi3+0x1b8>
 8000406:	4249      	negs	r1, r1
 8000408:	4770      	bx	lr
 800040a:	4663      	mov	r3, ip
 800040c:	105b      	asrs	r3, r3, #1
 800040e:	d300      	bcc.n	8000412 <__divsi3+0x1c2>
 8000410:	4240      	negs	r0, r0
 8000412:	b501      	push	{r0, lr}
 8000414:	2000      	movs	r0, #0
 8000416:	f000 f805 	bl	8000424 <__aeabi_idiv0>
 800041a:	bd02      	pop	{r1, pc}

0800041c <__aeabi_idivmod>:
 800041c:	2900      	cmp	r1, #0
 800041e:	d0f8      	beq.n	8000412 <__divsi3+0x1c2>
 8000420:	e716      	b.n	8000250 <__divsi3>
 8000422:	4770      	bx	lr

08000424 <__aeabi_idiv0>:
 8000424:	4770      	bx	lr
 8000426:	46c0      	nop			; (mov r8, r8)

08000428 <__aeabi_cdrcmple>:
 8000428:	4684      	mov	ip, r0
 800042a:	0010      	movs	r0, r2
 800042c:	4662      	mov	r2, ip
 800042e:	468c      	mov	ip, r1
 8000430:	0019      	movs	r1, r3
 8000432:	4663      	mov	r3, ip
 8000434:	e000      	b.n	8000438 <__aeabi_cdcmpeq>
 8000436:	46c0      	nop			; (mov r8, r8)

08000438 <__aeabi_cdcmpeq>:
 8000438:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043a:	f001 f8b3 	bl	80015a4 <__ledf2>
 800043e:	2800      	cmp	r0, #0
 8000440:	d401      	bmi.n	8000446 <__aeabi_cdcmpeq+0xe>
 8000442:	2100      	movs	r1, #0
 8000444:	42c8      	cmn	r0, r1
 8000446:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000448 <__aeabi_dcmpeq>:
 8000448:	b510      	push	{r4, lr}
 800044a:	f001 f803 	bl	8001454 <__eqdf2>
 800044e:	4240      	negs	r0, r0
 8000450:	3001      	adds	r0, #1
 8000452:	bd10      	pop	{r4, pc}

08000454 <__aeabi_dcmplt>:
 8000454:	b510      	push	{r4, lr}
 8000456:	f001 f8a5 	bl	80015a4 <__ledf2>
 800045a:	2800      	cmp	r0, #0
 800045c:	db01      	blt.n	8000462 <__aeabi_dcmplt+0xe>
 800045e:	2000      	movs	r0, #0
 8000460:	bd10      	pop	{r4, pc}
 8000462:	2001      	movs	r0, #1
 8000464:	bd10      	pop	{r4, pc}
 8000466:	46c0      	nop			; (mov r8, r8)

08000468 <__aeabi_dcmple>:
 8000468:	b510      	push	{r4, lr}
 800046a:	f001 f89b 	bl	80015a4 <__ledf2>
 800046e:	2800      	cmp	r0, #0
 8000470:	dd01      	ble.n	8000476 <__aeabi_dcmple+0xe>
 8000472:	2000      	movs	r0, #0
 8000474:	bd10      	pop	{r4, pc}
 8000476:	2001      	movs	r0, #1
 8000478:	bd10      	pop	{r4, pc}
 800047a:	46c0      	nop			; (mov r8, r8)

0800047c <__aeabi_dcmpgt>:
 800047c:	b510      	push	{r4, lr}
 800047e:	f001 f82b 	bl	80014d8 <__gedf2>
 8000482:	2800      	cmp	r0, #0
 8000484:	dc01      	bgt.n	800048a <__aeabi_dcmpgt+0xe>
 8000486:	2000      	movs	r0, #0
 8000488:	bd10      	pop	{r4, pc}
 800048a:	2001      	movs	r0, #1
 800048c:	bd10      	pop	{r4, pc}
 800048e:	46c0      	nop			; (mov r8, r8)

08000490 <__aeabi_dcmpge>:
 8000490:	b510      	push	{r4, lr}
 8000492:	f001 f821 	bl	80014d8 <__gedf2>
 8000496:	2800      	cmp	r0, #0
 8000498:	da01      	bge.n	800049e <__aeabi_dcmpge+0xe>
 800049a:	2000      	movs	r0, #0
 800049c:	bd10      	pop	{r4, pc}
 800049e:	2001      	movs	r0, #1
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	46c0      	nop			; (mov r8, r8)

080004a4 <__aeabi_uldivmod>:
 80004a4:	2b00      	cmp	r3, #0
 80004a6:	d111      	bne.n	80004cc <__aeabi_uldivmod+0x28>
 80004a8:	2a00      	cmp	r2, #0
 80004aa:	d10f      	bne.n	80004cc <__aeabi_uldivmod+0x28>
 80004ac:	2900      	cmp	r1, #0
 80004ae:	d100      	bne.n	80004b2 <__aeabi_uldivmod+0xe>
 80004b0:	2800      	cmp	r0, #0
 80004b2:	d002      	beq.n	80004ba <__aeabi_uldivmod+0x16>
 80004b4:	2100      	movs	r1, #0
 80004b6:	43c9      	mvns	r1, r1
 80004b8:	0008      	movs	r0, r1
 80004ba:	b407      	push	{r0, r1, r2}
 80004bc:	4802      	ldr	r0, [pc, #8]	; (80004c8 <__aeabi_uldivmod+0x24>)
 80004be:	a102      	add	r1, pc, #8	; (adr r1, 80004c8 <__aeabi_uldivmod+0x24>)
 80004c0:	1840      	adds	r0, r0, r1
 80004c2:	9002      	str	r0, [sp, #8]
 80004c4:	bd03      	pop	{r0, r1, pc}
 80004c6:	46c0      	nop			; (mov r8, r8)
 80004c8:	ffffff5d 	.word	0xffffff5d
 80004cc:	b403      	push	{r0, r1}
 80004ce:	4668      	mov	r0, sp
 80004d0:	b501      	push	{r0, lr}
 80004d2:	9802      	ldr	r0, [sp, #8]
 80004d4:	f000 f8a4 	bl	8000620 <__udivmoddi4>
 80004d8:	9b01      	ldr	r3, [sp, #4]
 80004da:	469e      	mov	lr, r3
 80004dc:	b002      	add	sp, #8
 80004de:	bc0c      	pop	{r2, r3}
 80004e0:	4770      	bx	lr
 80004e2:	46c0      	nop			; (mov r8, r8)

080004e4 <__aeabi_lmul>:
 80004e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004e6:	46ce      	mov	lr, r9
 80004e8:	4699      	mov	r9, r3
 80004ea:	0c03      	lsrs	r3, r0, #16
 80004ec:	469c      	mov	ip, r3
 80004ee:	0413      	lsls	r3, r2, #16
 80004f0:	4647      	mov	r7, r8
 80004f2:	0c1b      	lsrs	r3, r3, #16
 80004f4:	001d      	movs	r5, r3
 80004f6:	000e      	movs	r6, r1
 80004f8:	4661      	mov	r1, ip
 80004fa:	0404      	lsls	r4, r0, #16
 80004fc:	0c24      	lsrs	r4, r4, #16
 80004fe:	b580      	push	{r7, lr}
 8000500:	0007      	movs	r7, r0
 8000502:	0c10      	lsrs	r0, r2, #16
 8000504:	434b      	muls	r3, r1
 8000506:	4365      	muls	r5, r4
 8000508:	4341      	muls	r1, r0
 800050a:	4360      	muls	r0, r4
 800050c:	0c2c      	lsrs	r4, r5, #16
 800050e:	18c0      	adds	r0, r0, r3
 8000510:	1820      	adds	r0, r4, r0
 8000512:	468c      	mov	ip, r1
 8000514:	4283      	cmp	r3, r0
 8000516:	d903      	bls.n	8000520 <__aeabi_lmul+0x3c>
 8000518:	2380      	movs	r3, #128	; 0x80
 800051a:	025b      	lsls	r3, r3, #9
 800051c:	4698      	mov	r8, r3
 800051e:	44c4      	add	ip, r8
 8000520:	4649      	mov	r1, r9
 8000522:	4379      	muls	r1, r7
 8000524:	4356      	muls	r6, r2
 8000526:	0c03      	lsrs	r3, r0, #16
 8000528:	042d      	lsls	r5, r5, #16
 800052a:	0c2d      	lsrs	r5, r5, #16
 800052c:	1989      	adds	r1, r1, r6
 800052e:	4463      	add	r3, ip
 8000530:	0400      	lsls	r0, r0, #16
 8000532:	1940      	adds	r0, r0, r5
 8000534:	18c9      	adds	r1, r1, r3
 8000536:	bcc0      	pop	{r6, r7}
 8000538:	46b9      	mov	r9, r7
 800053a:	46b0      	mov	r8, r6
 800053c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800053e:	46c0      	nop			; (mov r8, r8)

08000540 <__aeabi_d2uiz>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	2200      	movs	r2, #0
 8000544:	4b0c      	ldr	r3, [pc, #48]	; (8000578 <__aeabi_d2uiz+0x38>)
 8000546:	0004      	movs	r4, r0
 8000548:	000d      	movs	r5, r1
 800054a:	f7ff ffa1 	bl	8000490 <__aeabi_dcmpge>
 800054e:	2800      	cmp	r0, #0
 8000550:	d104      	bne.n	800055c <__aeabi_d2uiz+0x1c>
 8000552:	0020      	movs	r0, r4
 8000554:	0029      	movs	r1, r5
 8000556:	f001 feeb 	bl	8002330 <__aeabi_d2iz>
 800055a:	bd70      	pop	{r4, r5, r6, pc}
 800055c:	4b06      	ldr	r3, [pc, #24]	; (8000578 <__aeabi_d2uiz+0x38>)
 800055e:	2200      	movs	r2, #0
 8000560:	0020      	movs	r0, r4
 8000562:	0029      	movs	r1, r5
 8000564:	f001 fb44 	bl	8001bf0 <__aeabi_dsub>
 8000568:	f001 fee2 	bl	8002330 <__aeabi_d2iz>
 800056c:	2380      	movs	r3, #128	; 0x80
 800056e:	061b      	lsls	r3, r3, #24
 8000570:	469c      	mov	ip, r3
 8000572:	4460      	add	r0, ip
 8000574:	e7f1      	b.n	800055a <__aeabi_d2uiz+0x1a>
 8000576:	46c0      	nop			; (mov r8, r8)
 8000578:	41e00000 	.word	0x41e00000

0800057c <__aeabi_d2lz>:
 800057c:	b570      	push	{r4, r5, r6, lr}
 800057e:	0005      	movs	r5, r0
 8000580:	000c      	movs	r4, r1
 8000582:	2200      	movs	r2, #0
 8000584:	2300      	movs	r3, #0
 8000586:	0028      	movs	r0, r5
 8000588:	0021      	movs	r1, r4
 800058a:	f7ff ff63 	bl	8000454 <__aeabi_dcmplt>
 800058e:	2800      	cmp	r0, #0
 8000590:	d108      	bne.n	80005a4 <__aeabi_d2lz+0x28>
 8000592:	0028      	movs	r0, r5
 8000594:	0021      	movs	r1, r4
 8000596:	f000 f80f 	bl	80005b8 <__aeabi_d2ulz>
 800059a:	0002      	movs	r2, r0
 800059c:	000b      	movs	r3, r1
 800059e:	0010      	movs	r0, r2
 80005a0:	0019      	movs	r1, r3
 80005a2:	bd70      	pop	{r4, r5, r6, pc}
 80005a4:	2380      	movs	r3, #128	; 0x80
 80005a6:	061b      	lsls	r3, r3, #24
 80005a8:	18e1      	adds	r1, r4, r3
 80005aa:	0028      	movs	r0, r5
 80005ac:	f000 f804 	bl	80005b8 <__aeabi_d2ulz>
 80005b0:	2300      	movs	r3, #0
 80005b2:	4242      	negs	r2, r0
 80005b4:	418b      	sbcs	r3, r1
 80005b6:	e7f2      	b.n	800059e <__aeabi_d2lz+0x22>

080005b8 <__aeabi_d2ulz>:
 80005b8:	b570      	push	{r4, r5, r6, lr}
 80005ba:	2200      	movs	r2, #0
 80005bc:	4b0b      	ldr	r3, [pc, #44]	; (80005ec <__aeabi_d2ulz+0x34>)
 80005be:	000d      	movs	r5, r1
 80005c0:	0004      	movs	r4, r0
 80005c2:	f001 f853 	bl	800166c <__aeabi_dmul>
 80005c6:	f7ff ffbb 	bl	8000540 <__aeabi_d2uiz>
 80005ca:	0006      	movs	r6, r0
 80005cc:	f001 ff16 	bl	80023fc <__aeabi_ui2d>
 80005d0:	2200      	movs	r2, #0
 80005d2:	4b07      	ldr	r3, [pc, #28]	; (80005f0 <__aeabi_d2ulz+0x38>)
 80005d4:	f001 f84a 	bl	800166c <__aeabi_dmul>
 80005d8:	0002      	movs	r2, r0
 80005da:	000b      	movs	r3, r1
 80005dc:	0020      	movs	r0, r4
 80005de:	0029      	movs	r1, r5
 80005e0:	f001 fb06 	bl	8001bf0 <__aeabi_dsub>
 80005e4:	f7ff ffac 	bl	8000540 <__aeabi_d2uiz>
 80005e8:	0031      	movs	r1, r6
 80005ea:	bd70      	pop	{r4, r5, r6, pc}
 80005ec:	3df00000 	.word	0x3df00000
 80005f0:	41f00000 	.word	0x41f00000

080005f4 <__aeabi_l2d>:
 80005f4:	b570      	push	{r4, r5, r6, lr}
 80005f6:	0006      	movs	r6, r0
 80005f8:	0008      	movs	r0, r1
 80005fa:	f001 fecf 	bl	800239c <__aeabi_i2d>
 80005fe:	2200      	movs	r2, #0
 8000600:	4b06      	ldr	r3, [pc, #24]	; (800061c <__aeabi_l2d+0x28>)
 8000602:	f001 f833 	bl	800166c <__aeabi_dmul>
 8000606:	000d      	movs	r5, r1
 8000608:	0004      	movs	r4, r0
 800060a:	0030      	movs	r0, r6
 800060c:	f001 fef6 	bl	80023fc <__aeabi_ui2d>
 8000610:	002b      	movs	r3, r5
 8000612:	0022      	movs	r2, r4
 8000614:	f000 f8d0 	bl	80007b8 <__aeabi_dadd>
 8000618:	bd70      	pop	{r4, r5, r6, pc}
 800061a:	46c0      	nop			; (mov r8, r8)
 800061c:	41f00000 	.word	0x41f00000

08000620 <__udivmoddi4>:
 8000620:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000622:	4657      	mov	r7, sl
 8000624:	464e      	mov	r6, r9
 8000626:	4645      	mov	r5, r8
 8000628:	46de      	mov	lr, fp
 800062a:	b5e0      	push	{r5, r6, r7, lr}
 800062c:	0004      	movs	r4, r0
 800062e:	000d      	movs	r5, r1
 8000630:	4692      	mov	sl, r2
 8000632:	4699      	mov	r9, r3
 8000634:	b083      	sub	sp, #12
 8000636:	428b      	cmp	r3, r1
 8000638:	d830      	bhi.n	800069c <__udivmoddi4+0x7c>
 800063a:	d02d      	beq.n	8000698 <__udivmoddi4+0x78>
 800063c:	4649      	mov	r1, r9
 800063e:	4650      	mov	r0, sl
 8000640:	f001 ffa6 	bl	8002590 <__clzdi2>
 8000644:	0029      	movs	r1, r5
 8000646:	0006      	movs	r6, r0
 8000648:	0020      	movs	r0, r4
 800064a:	f001 ffa1 	bl	8002590 <__clzdi2>
 800064e:	1a33      	subs	r3, r6, r0
 8000650:	4698      	mov	r8, r3
 8000652:	3b20      	subs	r3, #32
 8000654:	d434      	bmi.n	80006c0 <__udivmoddi4+0xa0>
 8000656:	469b      	mov	fp, r3
 8000658:	4653      	mov	r3, sl
 800065a:	465a      	mov	r2, fp
 800065c:	4093      	lsls	r3, r2
 800065e:	4642      	mov	r2, r8
 8000660:	001f      	movs	r7, r3
 8000662:	4653      	mov	r3, sl
 8000664:	4093      	lsls	r3, r2
 8000666:	001e      	movs	r6, r3
 8000668:	42af      	cmp	r7, r5
 800066a:	d83b      	bhi.n	80006e4 <__udivmoddi4+0xc4>
 800066c:	42af      	cmp	r7, r5
 800066e:	d100      	bne.n	8000672 <__udivmoddi4+0x52>
 8000670:	e079      	b.n	8000766 <__udivmoddi4+0x146>
 8000672:	465b      	mov	r3, fp
 8000674:	1ba4      	subs	r4, r4, r6
 8000676:	41bd      	sbcs	r5, r7
 8000678:	2b00      	cmp	r3, #0
 800067a:	da00      	bge.n	800067e <__udivmoddi4+0x5e>
 800067c:	e076      	b.n	800076c <__udivmoddi4+0x14c>
 800067e:	2200      	movs	r2, #0
 8000680:	2300      	movs	r3, #0
 8000682:	9200      	str	r2, [sp, #0]
 8000684:	9301      	str	r3, [sp, #4]
 8000686:	2301      	movs	r3, #1
 8000688:	465a      	mov	r2, fp
 800068a:	4093      	lsls	r3, r2
 800068c:	9301      	str	r3, [sp, #4]
 800068e:	2301      	movs	r3, #1
 8000690:	4642      	mov	r2, r8
 8000692:	4093      	lsls	r3, r2
 8000694:	9300      	str	r3, [sp, #0]
 8000696:	e029      	b.n	80006ec <__udivmoddi4+0xcc>
 8000698:	4282      	cmp	r2, r0
 800069a:	d9cf      	bls.n	800063c <__udivmoddi4+0x1c>
 800069c:	2200      	movs	r2, #0
 800069e:	2300      	movs	r3, #0
 80006a0:	9200      	str	r2, [sp, #0]
 80006a2:	9301      	str	r3, [sp, #4]
 80006a4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d001      	beq.n	80006ae <__udivmoddi4+0x8e>
 80006aa:	601c      	str	r4, [r3, #0]
 80006ac:	605d      	str	r5, [r3, #4]
 80006ae:	9800      	ldr	r0, [sp, #0]
 80006b0:	9901      	ldr	r1, [sp, #4]
 80006b2:	b003      	add	sp, #12
 80006b4:	bcf0      	pop	{r4, r5, r6, r7}
 80006b6:	46bb      	mov	fp, r7
 80006b8:	46b2      	mov	sl, r6
 80006ba:	46a9      	mov	r9, r5
 80006bc:	46a0      	mov	r8, r4
 80006be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006c0:	4642      	mov	r2, r8
 80006c2:	469b      	mov	fp, r3
 80006c4:	2320      	movs	r3, #32
 80006c6:	1a9b      	subs	r3, r3, r2
 80006c8:	4652      	mov	r2, sl
 80006ca:	40da      	lsrs	r2, r3
 80006cc:	4641      	mov	r1, r8
 80006ce:	0013      	movs	r3, r2
 80006d0:	464a      	mov	r2, r9
 80006d2:	408a      	lsls	r2, r1
 80006d4:	0017      	movs	r7, r2
 80006d6:	4642      	mov	r2, r8
 80006d8:	431f      	orrs	r7, r3
 80006da:	4653      	mov	r3, sl
 80006dc:	4093      	lsls	r3, r2
 80006de:	001e      	movs	r6, r3
 80006e0:	42af      	cmp	r7, r5
 80006e2:	d9c3      	bls.n	800066c <__udivmoddi4+0x4c>
 80006e4:	2200      	movs	r2, #0
 80006e6:	2300      	movs	r3, #0
 80006e8:	9200      	str	r2, [sp, #0]
 80006ea:	9301      	str	r3, [sp, #4]
 80006ec:	4643      	mov	r3, r8
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d0d8      	beq.n	80006a4 <__udivmoddi4+0x84>
 80006f2:	07fb      	lsls	r3, r7, #31
 80006f4:	0872      	lsrs	r2, r6, #1
 80006f6:	431a      	orrs	r2, r3
 80006f8:	4646      	mov	r6, r8
 80006fa:	087b      	lsrs	r3, r7, #1
 80006fc:	e00e      	b.n	800071c <__udivmoddi4+0xfc>
 80006fe:	42ab      	cmp	r3, r5
 8000700:	d101      	bne.n	8000706 <__udivmoddi4+0xe6>
 8000702:	42a2      	cmp	r2, r4
 8000704:	d80c      	bhi.n	8000720 <__udivmoddi4+0x100>
 8000706:	1aa4      	subs	r4, r4, r2
 8000708:	419d      	sbcs	r5, r3
 800070a:	2001      	movs	r0, #1
 800070c:	1924      	adds	r4, r4, r4
 800070e:	416d      	adcs	r5, r5
 8000710:	2100      	movs	r1, #0
 8000712:	3e01      	subs	r6, #1
 8000714:	1824      	adds	r4, r4, r0
 8000716:	414d      	adcs	r5, r1
 8000718:	2e00      	cmp	r6, #0
 800071a:	d006      	beq.n	800072a <__udivmoddi4+0x10a>
 800071c:	42ab      	cmp	r3, r5
 800071e:	d9ee      	bls.n	80006fe <__udivmoddi4+0xde>
 8000720:	3e01      	subs	r6, #1
 8000722:	1924      	adds	r4, r4, r4
 8000724:	416d      	adcs	r5, r5
 8000726:	2e00      	cmp	r6, #0
 8000728:	d1f8      	bne.n	800071c <__udivmoddi4+0xfc>
 800072a:	9800      	ldr	r0, [sp, #0]
 800072c:	9901      	ldr	r1, [sp, #4]
 800072e:	465b      	mov	r3, fp
 8000730:	1900      	adds	r0, r0, r4
 8000732:	4169      	adcs	r1, r5
 8000734:	2b00      	cmp	r3, #0
 8000736:	db24      	blt.n	8000782 <__udivmoddi4+0x162>
 8000738:	002b      	movs	r3, r5
 800073a:	465a      	mov	r2, fp
 800073c:	4644      	mov	r4, r8
 800073e:	40d3      	lsrs	r3, r2
 8000740:	002a      	movs	r2, r5
 8000742:	40e2      	lsrs	r2, r4
 8000744:	001c      	movs	r4, r3
 8000746:	465b      	mov	r3, fp
 8000748:	0015      	movs	r5, r2
 800074a:	2b00      	cmp	r3, #0
 800074c:	db2a      	blt.n	80007a4 <__udivmoddi4+0x184>
 800074e:	0026      	movs	r6, r4
 8000750:	409e      	lsls	r6, r3
 8000752:	0033      	movs	r3, r6
 8000754:	0026      	movs	r6, r4
 8000756:	4647      	mov	r7, r8
 8000758:	40be      	lsls	r6, r7
 800075a:	0032      	movs	r2, r6
 800075c:	1a80      	subs	r0, r0, r2
 800075e:	4199      	sbcs	r1, r3
 8000760:	9000      	str	r0, [sp, #0]
 8000762:	9101      	str	r1, [sp, #4]
 8000764:	e79e      	b.n	80006a4 <__udivmoddi4+0x84>
 8000766:	42a3      	cmp	r3, r4
 8000768:	d8bc      	bhi.n	80006e4 <__udivmoddi4+0xc4>
 800076a:	e782      	b.n	8000672 <__udivmoddi4+0x52>
 800076c:	4642      	mov	r2, r8
 800076e:	2320      	movs	r3, #32
 8000770:	2100      	movs	r1, #0
 8000772:	1a9b      	subs	r3, r3, r2
 8000774:	2200      	movs	r2, #0
 8000776:	9100      	str	r1, [sp, #0]
 8000778:	9201      	str	r2, [sp, #4]
 800077a:	2201      	movs	r2, #1
 800077c:	40da      	lsrs	r2, r3
 800077e:	9201      	str	r2, [sp, #4]
 8000780:	e785      	b.n	800068e <__udivmoddi4+0x6e>
 8000782:	4642      	mov	r2, r8
 8000784:	2320      	movs	r3, #32
 8000786:	1a9b      	subs	r3, r3, r2
 8000788:	002a      	movs	r2, r5
 800078a:	4646      	mov	r6, r8
 800078c:	409a      	lsls	r2, r3
 800078e:	0023      	movs	r3, r4
 8000790:	40f3      	lsrs	r3, r6
 8000792:	4644      	mov	r4, r8
 8000794:	4313      	orrs	r3, r2
 8000796:	002a      	movs	r2, r5
 8000798:	40e2      	lsrs	r2, r4
 800079a:	001c      	movs	r4, r3
 800079c:	465b      	mov	r3, fp
 800079e:	0015      	movs	r5, r2
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	dad4      	bge.n	800074e <__udivmoddi4+0x12e>
 80007a4:	4642      	mov	r2, r8
 80007a6:	002f      	movs	r7, r5
 80007a8:	2320      	movs	r3, #32
 80007aa:	0026      	movs	r6, r4
 80007ac:	4097      	lsls	r7, r2
 80007ae:	1a9b      	subs	r3, r3, r2
 80007b0:	40de      	lsrs	r6, r3
 80007b2:	003b      	movs	r3, r7
 80007b4:	4333      	orrs	r3, r6
 80007b6:	e7cd      	b.n	8000754 <__udivmoddi4+0x134>

080007b8 <__aeabi_dadd>:
 80007b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80007ba:	464f      	mov	r7, r9
 80007bc:	4646      	mov	r6, r8
 80007be:	46d6      	mov	lr, sl
 80007c0:	0004      	movs	r4, r0
 80007c2:	b5c0      	push	{r6, r7, lr}
 80007c4:	001f      	movs	r7, r3
 80007c6:	030b      	lsls	r3, r1, #12
 80007c8:	0010      	movs	r0, r2
 80007ca:	004e      	lsls	r6, r1, #1
 80007cc:	0a5b      	lsrs	r3, r3, #9
 80007ce:	0fcd      	lsrs	r5, r1, #31
 80007d0:	0f61      	lsrs	r1, r4, #29
 80007d2:	007a      	lsls	r2, r7, #1
 80007d4:	4319      	orrs	r1, r3
 80007d6:	00e3      	lsls	r3, r4, #3
 80007d8:	033c      	lsls	r4, r7, #12
 80007da:	0fff      	lsrs	r7, r7, #31
 80007dc:	46bc      	mov	ip, r7
 80007de:	0a64      	lsrs	r4, r4, #9
 80007e0:	0f47      	lsrs	r7, r0, #29
 80007e2:	4327      	orrs	r7, r4
 80007e4:	0d76      	lsrs	r6, r6, #21
 80007e6:	0d52      	lsrs	r2, r2, #21
 80007e8:	00c0      	lsls	r0, r0, #3
 80007ea:	46b9      	mov	r9, r7
 80007ec:	4680      	mov	r8, r0
 80007ee:	1ab7      	subs	r7, r6, r2
 80007f0:	4565      	cmp	r5, ip
 80007f2:	d100      	bne.n	80007f6 <__aeabi_dadd+0x3e>
 80007f4:	e09b      	b.n	800092e <__aeabi_dadd+0x176>
 80007f6:	2f00      	cmp	r7, #0
 80007f8:	dc00      	bgt.n	80007fc <__aeabi_dadd+0x44>
 80007fa:	e084      	b.n	8000906 <__aeabi_dadd+0x14e>
 80007fc:	2a00      	cmp	r2, #0
 80007fe:	d100      	bne.n	8000802 <__aeabi_dadd+0x4a>
 8000800:	e0be      	b.n	8000980 <__aeabi_dadd+0x1c8>
 8000802:	4ac8      	ldr	r2, [pc, #800]	; (8000b24 <__aeabi_dadd+0x36c>)
 8000804:	4296      	cmp	r6, r2
 8000806:	d100      	bne.n	800080a <__aeabi_dadd+0x52>
 8000808:	e124      	b.n	8000a54 <__aeabi_dadd+0x29c>
 800080a:	2280      	movs	r2, #128	; 0x80
 800080c:	464c      	mov	r4, r9
 800080e:	0412      	lsls	r2, r2, #16
 8000810:	4314      	orrs	r4, r2
 8000812:	46a1      	mov	r9, r4
 8000814:	2f38      	cmp	r7, #56	; 0x38
 8000816:	dd00      	ble.n	800081a <__aeabi_dadd+0x62>
 8000818:	e167      	b.n	8000aea <__aeabi_dadd+0x332>
 800081a:	2f1f      	cmp	r7, #31
 800081c:	dd00      	ble.n	8000820 <__aeabi_dadd+0x68>
 800081e:	e1d6      	b.n	8000bce <__aeabi_dadd+0x416>
 8000820:	2220      	movs	r2, #32
 8000822:	464c      	mov	r4, r9
 8000824:	1bd2      	subs	r2, r2, r7
 8000826:	4094      	lsls	r4, r2
 8000828:	46a2      	mov	sl, r4
 800082a:	4644      	mov	r4, r8
 800082c:	40fc      	lsrs	r4, r7
 800082e:	0020      	movs	r0, r4
 8000830:	4654      	mov	r4, sl
 8000832:	4304      	orrs	r4, r0
 8000834:	4640      	mov	r0, r8
 8000836:	4090      	lsls	r0, r2
 8000838:	1e42      	subs	r2, r0, #1
 800083a:	4190      	sbcs	r0, r2
 800083c:	464a      	mov	r2, r9
 800083e:	40fa      	lsrs	r2, r7
 8000840:	4304      	orrs	r4, r0
 8000842:	1a89      	subs	r1, r1, r2
 8000844:	1b1c      	subs	r4, r3, r4
 8000846:	42a3      	cmp	r3, r4
 8000848:	4192      	sbcs	r2, r2
 800084a:	4252      	negs	r2, r2
 800084c:	1a8b      	subs	r3, r1, r2
 800084e:	469a      	mov	sl, r3
 8000850:	4653      	mov	r3, sl
 8000852:	021b      	lsls	r3, r3, #8
 8000854:	d400      	bmi.n	8000858 <__aeabi_dadd+0xa0>
 8000856:	e0d4      	b.n	8000a02 <__aeabi_dadd+0x24a>
 8000858:	4653      	mov	r3, sl
 800085a:	025a      	lsls	r2, r3, #9
 800085c:	0a53      	lsrs	r3, r2, #9
 800085e:	469a      	mov	sl, r3
 8000860:	4653      	mov	r3, sl
 8000862:	2b00      	cmp	r3, #0
 8000864:	d100      	bne.n	8000868 <__aeabi_dadd+0xb0>
 8000866:	e104      	b.n	8000a72 <__aeabi_dadd+0x2ba>
 8000868:	4650      	mov	r0, sl
 800086a:	f001 fe73 	bl	8002554 <__clzsi2>
 800086e:	0003      	movs	r3, r0
 8000870:	3b08      	subs	r3, #8
 8000872:	2220      	movs	r2, #32
 8000874:	0020      	movs	r0, r4
 8000876:	1ad2      	subs	r2, r2, r3
 8000878:	4651      	mov	r1, sl
 800087a:	40d0      	lsrs	r0, r2
 800087c:	4099      	lsls	r1, r3
 800087e:	0002      	movs	r2, r0
 8000880:	409c      	lsls	r4, r3
 8000882:	430a      	orrs	r2, r1
 8000884:	42b3      	cmp	r3, r6
 8000886:	da00      	bge.n	800088a <__aeabi_dadd+0xd2>
 8000888:	e102      	b.n	8000a90 <__aeabi_dadd+0x2d8>
 800088a:	1b9b      	subs	r3, r3, r6
 800088c:	1c59      	adds	r1, r3, #1
 800088e:	291f      	cmp	r1, #31
 8000890:	dd00      	ble.n	8000894 <__aeabi_dadd+0xdc>
 8000892:	e0a7      	b.n	80009e4 <__aeabi_dadd+0x22c>
 8000894:	2320      	movs	r3, #32
 8000896:	0010      	movs	r0, r2
 8000898:	0026      	movs	r6, r4
 800089a:	1a5b      	subs	r3, r3, r1
 800089c:	409c      	lsls	r4, r3
 800089e:	4098      	lsls	r0, r3
 80008a0:	40ce      	lsrs	r6, r1
 80008a2:	40ca      	lsrs	r2, r1
 80008a4:	1e63      	subs	r3, r4, #1
 80008a6:	419c      	sbcs	r4, r3
 80008a8:	4330      	orrs	r0, r6
 80008aa:	4692      	mov	sl, r2
 80008ac:	2600      	movs	r6, #0
 80008ae:	4304      	orrs	r4, r0
 80008b0:	0763      	lsls	r3, r4, #29
 80008b2:	d009      	beq.n	80008c8 <__aeabi_dadd+0x110>
 80008b4:	230f      	movs	r3, #15
 80008b6:	4023      	ands	r3, r4
 80008b8:	2b04      	cmp	r3, #4
 80008ba:	d005      	beq.n	80008c8 <__aeabi_dadd+0x110>
 80008bc:	1d23      	adds	r3, r4, #4
 80008be:	42a3      	cmp	r3, r4
 80008c0:	41a4      	sbcs	r4, r4
 80008c2:	4264      	negs	r4, r4
 80008c4:	44a2      	add	sl, r4
 80008c6:	001c      	movs	r4, r3
 80008c8:	4653      	mov	r3, sl
 80008ca:	021b      	lsls	r3, r3, #8
 80008cc:	d400      	bmi.n	80008d0 <__aeabi_dadd+0x118>
 80008ce:	e09b      	b.n	8000a08 <__aeabi_dadd+0x250>
 80008d0:	4b94      	ldr	r3, [pc, #592]	; (8000b24 <__aeabi_dadd+0x36c>)
 80008d2:	3601      	adds	r6, #1
 80008d4:	429e      	cmp	r6, r3
 80008d6:	d100      	bne.n	80008da <__aeabi_dadd+0x122>
 80008d8:	e0b8      	b.n	8000a4c <__aeabi_dadd+0x294>
 80008da:	4653      	mov	r3, sl
 80008dc:	4992      	ldr	r1, [pc, #584]	; (8000b28 <__aeabi_dadd+0x370>)
 80008de:	08e4      	lsrs	r4, r4, #3
 80008e0:	400b      	ands	r3, r1
 80008e2:	0019      	movs	r1, r3
 80008e4:	075b      	lsls	r3, r3, #29
 80008e6:	4323      	orrs	r3, r4
 80008e8:	0572      	lsls	r2, r6, #21
 80008ea:	024c      	lsls	r4, r1, #9
 80008ec:	0b24      	lsrs	r4, r4, #12
 80008ee:	0d52      	lsrs	r2, r2, #21
 80008f0:	0512      	lsls	r2, r2, #20
 80008f2:	07ed      	lsls	r5, r5, #31
 80008f4:	4322      	orrs	r2, r4
 80008f6:	432a      	orrs	r2, r5
 80008f8:	0018      	movs	r0, r3
 80008fa:	0011      	movs	r1, r2
 80008fc:	bce0      	pop	{r5, r6, r7}
 80008fe:	46ba      	mov	sl, r7
 8000900:	46b1      	mov	r9, r6
 8000902:	46a8      	mov	r8, r5
 8000904:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000906:	2f00      	cmp	r7, #0
 8000908:	d048      	beq.n	800099c <__aeabi_dadd+0x1e4>
 800090a:	1b97      	subs	r7, r2, r6
 800090c:	2e00      	cmp	r6, #0
 800090e:	d000      	beq.n	8000912 <__aeabi_dadd+0x15a>
 8000910:	e10e      	b.n	8000b30 <__aeabi_dadd+0x378>
 8000912:	000c      	movs	r4, r1
 8000914:	431c      	orrs	r4, r3
 8000916:	d100      	bne.n	800091a <__aeabi_dadd+0x162>
 8000918:	e1b7      	b.n	8000c8a <__aeabi_dadd+0x4d2>
 800091a:	1e7c      	subs	r4, r7, #1
 800091c:	2f01      	cmp	r7, #1
 800091e:	d100      	bne.n	8000922 <__aeabi_dadd+0x16a>
 8000920:	e226      	b.n	8000d70 <__aeabi_dadd+0x5b8>
 8000922:	4d80      	ldr	r5, [pc, #512]	; (8000b24 <__aeabi_dadd+0x36c>)
 8000924:	42af      	cmp	r7, r5
 8000926:	d100      	bne.n	800092a <__aeabi_dadd+0x172>
 8000928:	e1d5      	b.n	8000cd6 <__aeabi_dadd+0x51e>
 800092a:	0027      	movs	r7, r4
 800092c:	e107      	b.n	8000b3e <__aeabi_dadd+0x386>
 800092e:	2f00      	cmp	r7, #0
 8000930:	dc00      	bgt.n	8000934 <__aeabi_dadd+0x17c>
 8000932:	e0b2      	b.n	8000a9a <__aeabi_dadd+0x2e2>
 8000934:	2a00      	cmp	r2, #0
 8000936:	d047      	beq.n	80009c8 <__aeabi_dadd+0x210>
 8000938:	4a7a      	ldr	r2, [pc, #488]	; (8000b24 <__aeabi_dadd+0x36c>)
 800093a:	4296      	cmp	r6, r2
 800093c:	d100      	bne.n	8000940 <__aeabi_dadd+0x188>
 800093e:	e089      	b.n	8000a54 <__aeabi_dadd+0x29c>
 8000940:	2280      	movs	r2, #128	; 0x80
 8000942:	464c      	mov	r4, r9
 8000944:	0412      	lsls	r2, r2, #16
 8000946:	4314      	orrs	r4, r2
 8000948:	46a1      	mov	r9, r4
 800094a:	2f38      	cmp	r7, #56	; 0x38
 800094c:	dc6b      	bgt.n	8000a26 <__aeabi_dadd+0x26e>
 800094e:	2f1f      	cmp	r7, #31
 8000950:	dc00      	bgt.n	8000954 <__aeabi_dadd+0x19c>
 8000952:	e16e      	b.n	8000c32 <__aeabi_dadd+0x47a>
 8000954:	003a      	movs	r2, r7
 8000956:	4648      	mov	r0, r9
 8000958:	3a20      	subs	r2, #32
 800095a:	40d0      	lsrs	r0, r2
 800095c:	4684      	mov	ip, r0
 800095e:	2f20      	cmp	r7, #32
 8000960:	d007      	beq.n	8000972 <__aeabi_dadd+0x1ba>
 8000962:	2240      	movs	r2, #64	; 0x40
 8000964:	4648      	mov	r0, r9
 8000966:	1bd2      	subs	r2, r2, r7
 8000968:	4090      	lsls	r0, r2
 800096a:	0002      	movs	r2, r0
 800096c:	4640      	mov	r0, r8
 800096e:	4310      	orrs	r0, r2
 8000970:	4680      	mov	r8, r0
 8000972:	4640      	mov	r0, r8
 8000974:	1e42      	subs	r2, r0, #1
 8000976:	4190      	sbcs	r0, r2
 8000978:	4662      	mov	r2, ip
 800097a:	0004      	movs	r4, r0
 800097c:	4314      	orrs	r4, r2
 800097e:	e057      	b.n	8000a30 <__aeabi_dadd+0x278>
 8000980:	464a      	mov	r2, r9
 8000982:	4302      	orrs	r2, r0
 8000984:	d100      	bne.n	8000988 <__aeabi_dadd+0x1d0>
 8000986:	e103      	b.n	8000b90 <__aeabi_dadd+0x3d8>
 8000988:	1e7a      	subs	r2, r7, #1
 800098a:	2f01      	cmp	r7, #1
 800098c:	d100      	bne.n	8000990 <__aeabi_dadd+0x1d8>
 800098e:	e193      	b.n	8000cb8 <__aeabi_dadd+0x500>
 8000990:	4c64      	ldr	r4, [pc, #400]	; (8000b24 <__aeabi_dadd+0x36c>)
 8000992:	42a7      	cmp	r7, r4
 8000994:	d100      	bne.n	8000998 <__aeabi_dadd+0x1e0>
 8000996:	e18a      	b.n	8000cae <__aeabi_dadd+0x4f6>
 8000998:	0017      	movs	r7, r2
 800099a:	e73b      	b.n	8000814 <__aeabi_dadd+0x5c>
 800099c:	4c63      	ldr	r4, [pc, #396]	; (8000b2c <__aeabi_dadd+0x374>)
 800099e:	1c72      	adds	r2, r6, #1
 80009a0:	4222      	tst	r2, r4
 80009a2:	d000      	beq.n	80009a6 <__aeabi_dadd+0x1ee>
 80009a4:	e0e0      	b.n	8000b68 <__aeabi_dadd+0x3b0>
 80009a6:	000a      	movs	r2, r1
 80009a8:	431a      	orrs	r2, r3
 80009aa:	2e00      	cmp	r6, #0
 80009ac:	d000      	beq.n	80009b0 <__aeabi_dadd+0x1f8>
 80009ae:	e174      	b.n	8000c9a <__aeabi_dadd+0x4e2>
 80009b0:	2a00      	cmp	r2, #0
 80009b2:	d100      	bne.n	80009b6 <__aeabi_dadd+0x1fe>
 80009b4:	e1d0      	b.n	8000d58 <__aeabi_dadd+0x5a0>
 80009b6:	464a      	mov	r2, r9
 80009b8:	4302      	orrs	r2, r0
 80009ba:	d000      	beq.n	80009be <__aeabi_dadd+0x206>
 80009bc:	e1e3      	b.n	8000d86 <__aeabi_dadd+0x5ce>
 80009be:	074a      	lsls	r2, r1, #29
 80009c0:	08db      	lsrs	r3, r3, #3
 80009c2:	4313      	orrs	r3, r2
 80009c4:	08c9      	lsrs	r1, r1, #3
 80009c6:	e029      	b.n	8000a1c <__aeabi_dadd+0x264>
 80009c8:	464a      	mov	r2, r9
 80009ca:	4302      	orrs	r2, r0
 80009cc:	d100      	bne.n	80009d0 <__aeabi_dadd+0x218>
 80009ce:	e17d      	b.n	8000ccc <__aeabi_dadd+0x514>
 80009d0:	1e7a      	subs	r2, r7, #1
 80009d2:	2f01      	cmp	r7, #1
 80009d4:	d100      	bne.n	80009d8 <__aeabi_dadd+0x220>
 80009d6:	e0e0      	b.n	8000b9a <__aeabi_dadd+0x3e2>
 80009d8:	4c52      	ldr	r4, [pc, #328]	; (8000b24 <__aeabi_dadd+0x36c>)
 80009da:	42a7      	cmp	r7, r4
 80009dc:	d100      	bne.n	80009e0 <__aeabi_dadd+0x228>
 80009de:	e166      	b.n	8000cae <__aeabi_dadd+0x4f6>
 80009e0:	0017      	movs	r7, r2
 80009e2:	e7b2      	b.n	800094a <__aeabi_dadd+0x192>
 80009e4:	0010      	movs	r0, r2
 80009e6:	3b1f      	subs	r3, #31
 80009e8:	40d8      	lsrs	r0, r3
 80009ea:	2920      	cmp	r1, #32
 80009ec:	d003      	beq.n	80009f6 <__aeabi_dadd+0x23e>
 80009ee:	2340      	movs	r3, #64	; 0x40
 80009f0:	1a5b      	subs	r3, r3, r1
 80009f2:	409a      	lsls	r2, r3
 80009f4:	4314      	orrs	r4, r2
 80009f6:	1e63      	subs	r3, r4, #1
 80009f8:	419c      	sbcs	r4, r3
 80009fa:	2300      	movs	r3, #0
 80009fc:	2600      	movs	r6, #0
 80009fe:	469a      	mov	sl, r3
 8000a00:	4304      	orrs	r4, r0
 8000a02:	0763      	lsls	r3, r4, #29
 8000a04:	d000      	beq.n	8000a08 <__aeabi_dadd+0x250>
 8000a06:	e755      	b.n	80008b4 <__aeabi_dadd+0xfc>
 8000a08:	4652      	mov	r2, sl
 8000a0a:	08e3      	lsrs	r3, r4, #3
 8000a0c:	0752      	lsls	r2, r2, #29
 8000a0e:	4313      	orrs	r3, r2
 8000a10:	4652      	mov	r2, sl
 8000a12:	0037      	movs	r7, r6
 8000a14:	08d1      	lsrs	r1, r2, #3
 8000a16:	4a43      	ldr	r2, [pc, #268]	; (8000b24 <__aeabi_dadd+0x36c>)
 8000a18:	4297      	cmp	r7, r2
 8000a1a:	d01f      	beq.n	8000a5c <__aeabi_dadd+0x2a4>
 8000a1c:	0309      	lsls	r1, r1, #12
 8000a1e:	057a      	lsls	r2, r7, #21
 8000a20:	0b0c      	lsrs	r4, r1, #12
 8000a22:	0d52      	lsrs	r2, r2, #21
 8000a24:	e764      	b.n	80008f0 <__aeabi_dadd+0x138>
 8000a26:	4642      	mov	r2, r8
 8000a28:	464c      	mov	r4, r9
 8000a2a:	4314      	orrs	r4, r2
 8000a2c:	1e62      	subs	r2, r4, #1
 8000a2e:	4194      	sbcs	r4, r2
 8000a30:	18e4      	adds	r4, r4, r3
 8000a32:	429c      	cmp	r4, r3
 8000a34:	4192      	sbcs	r2, r2
 8000a36:	4252      	negs	r2, r2
 8000a38:	4692      	mov	sl, r2
 8000a3a:	448a      	add	sl, r1
 8000a3c:	4653      	mov	r3, sl
 8000a3e:	021b      	lsls	r3, r3, #8
 8000a40:	d5df      	bpl.n	8000a02 <__aeabi_dadd+0x24a>
 8000a42:	4b38      	ldr	r3, [pc, #224]	; (8000b24 <__aeabi_dadd+0x36c>)
 8000a44:	3601      	adds	r6, #1
 8000a46:	429e      	cmp	r6, r3
 8000a48:	d000      	beq.n	8000a4c <__aeabi_dadd+0x294>
 8000a4a:	e0b3      	b.n	8000bb4 <__aeabi_dadd+0x3fc>
 8000a4c:	0032      	movs	r2, r6
 8000a4e:	2400      	movs	r4, #0
 8000a50:	2300      	movs	r3, #0
 8000a52:	e74d      	b.n	80008f0 <__aeabi_dadd+0x138>
 8000a54:	074a      	lsls	r2, r1, #29
 8000a56:	08db      	lsrs	r3, r3, #3
 8000a58:	4313      	orrs	r3, r2
 8000a5a:	08c9      	lsrs	r1, r1, #3
 8000a5c:	001a      	movs	r2, r3
 8000a5e:	430a      	orrs	r2, r1
 8000a60:	d100      	bne.n	8000a64 <__aeabi_dadd+0x2ac>
 8000a62:	e200      	b.n	8000e66 <__aeabi_dadd+0x6ae>
 8000a64:	2480      	movs	r4, #128	; 0x80
 8000a66:	0324      	lsls	r4, r4, #12
 8000a68:	430c      	orrs	r4, r1
 8000a6a:	0324      	lsls	r4, r4, #12
 8000a6c:	4a2d      	ldr	r2, [pc, #180]	; (8000b24 <__aeabi_dadd+0x36c>)
 8000a6e:	0b24      	lsrs	r4, r4, #12
 8000a70:	e73e      	b.n	80008f0 <__aeabi_dadd+0x138>
 8000a72:	0020      	movs	r0, r4
 8000a74:	f001 fd6e 	bl	8002554 <__clzsi2>
 8000a78:	0003      	movs	r3, r0
 8000a7a:	3318      	adds	r3, #24
 8000a7c:	2b1f      	cmp	r3, #31
 8000a7e:	dc00      	bgt.n	8000a82 <__aeabi_dadd+0x2ca>
 8000a80:	e6f7      	b.n	8000872 <__aeabi_dadd+0xba>
 8000a82:	0022      	movs	r2, r4
 8000a84:	3808      	subs	r0, #8
 8000a86:	4082      	lsls	r2, r0
 8000a88:	2400      	movs	r4, #0
 8000a8a:	42b3      	cmp	r3, r6
 8000a8c:	db00      	blt.n	8000a90 <__aeabi_dadd+0x2d8>
 8000a8e:	e6fc      	b.n	800088a <__aeabi_dadd+0xd2>
 8000a90:	1af6      	subs	r6, r6, r3
 8000a92:	4b25      	ldr	r3, [pc, #148]	; (8000b28 <__aeabi_dadd+0x370>)
 8000a94:	401a      	ands	r2, r3
 8000a96:	4692      	mov	sl, r2
 8000a98:	e70a      	b.n	80008b0 <__aeabi_dadd+0xf8>
 8000a9a:	2f00      	cmp	r7, #0
 8000a9c:	d02b      	beq.n	8000af6 <__aeabi_dadd+0x33e>
 8000a9e:	1b97      	subs	r7, r2, r6
 8000aa0:	2e00      	cmp	r6, #0
 8000aa2:	d100      	bne.n	8000aa6 <__aeabi_dadd+0x2ee>
 8000aa4:	e0b8      	b.n	8000c18 <__aeabi_dadd+0x460>
 8000aa6:	4c1f      	ldr	r4, [pc, #124]	; (8000b24 <__aeabi_dadd+0x36c>)
 8000aa8:	42a2      	cmp	r2, r4
 8000aaa:	d100      	bne.n	8000aae <__aeabi_dadd+0x2f6>
 8000aac:	e11c      	b.n	8000ce8 <__aeabi_dadd+0x530>
 8000aae:	2480      	movs	r4, #128	; 0x80
 8000ab0:	0424      	lsls	r4, r4, #16
 8000ab2:	4321      	orrs	r1, r4
 8000ab4:	2f38      	cmp	r7, #56	; 0x38
 8000ab6:	dd00      	ble.n	8000aba <__aeabi_dadd+0x302>
 8000ab8:	e11e      	b.n	8000cf8 <__aeabi_dadd+0x540>
 8000aba:	2f1f      	cmp	r7, #31
 8000abc:	dd00      	ble.n	8000ac0 <__aeabi_dadd+0x308>
 8000abe:	e19e      	b.n	8000dfe <__aeabi_dadd+0x646>
 8000ac0:	2620      	movs	r6, #32
 8000ac2:	000c      	movs	r4, r1
 8000ac4:	1bf6      	subs	r6, r6, r7
 8000ac6:	0018      	movs	r0, r3
 8000ac8:	40b3      	lsls	r3, r6
 8000aca:	40b4      	lsls	r4, r6
 8000acc:	40f8      	lsrs	r0, r7
 8000ace:	1e5e      	subs	r6, r3, #1
 8000ad0:	41b3      	sbcs	r3, r6
 8000ad2:	40f9      	lsrs	r1, r7
 8000ad4:	4304      	orrs	r4, r0
 8000ad6:	431c      	orrs	r4, r3
 8000ad8:	4489      	add	r9, r1
 8000ada:	4444      	add	r4, r8
 8000adc:	4544      	cmp	r4, r8
 8000ade:	419b      	sbcs	r3, r3
 8000ae0:	425b      	negs	r3, r3
 8000ae2:	444b      	add	r3, r9
 8000ae4:	469a      	mov	sl, r3
 8000ae6:	0016      	movs	r6, r2
 8000ae8:	e7a8      	b.n	8000a3c <__aeabi_dadd+0x284>
 8000aea:	4642      	mov	r2, r8
 8000aec:	464c      	mov	r4, r9
 8000aee:	4314      	orrs	r4, r2
 8000af0:	1e62      	subs	r2, r4, #1
 8000af2:	4194      	sbcs	r4, r2
 8000af4:	e6a6      	b.n	8000844 <__aeabi_dadd+0x8c>
 8000af6:	4c0d      	ldr	r4, [pc, #52]	; (8000b2c <__aeabi_dadd+0x374>)
 8000af8:	1c72      	adds	r2, r6, #1
 8000afa:	4222      	tst	r2, r4
 8000afc:	d000      	beq.n	8000b00 <__aeabi_dadd+0x348>
 8000afe:	e0a8      	b.n	8000c52 <__aeabi_dadd+0x49a>
 8000b00:	000a      	movs	r2, r1
 8000b02:	431a      	orrs	r2, r3
 8000b04:	2e00      	cmp	r6, #0
 8000b06:	d000      	beq.n	8000b0a <__aeabi_dadd+0x352>
 8000b08:	e10a      	b.n	8000d20 <__aeabi_dadd+0x568>
 8000b0a:	2a00      	cmp	r2, #0
 8000b0c:	d100      	bne.n	8000b10 <__aeabi_dadd+0x358>
 8000b0e:	e15e      	b.n	8000dce <__aeabi_dadd+0x616>
 8000b10:	464a      	mov	r2, r9
 8000b12:	4302      	orrs	r2, r0
 8000b14:	d000      	beq.n	8000b18 <__aeabi_dadd+0x360>
 8000b16:	e161      	b.n	8000ddc <__aeabi_dadd+0x624>
 8000b18:	074a      	lsls	r2, r1, #29
 8000b1a:	08db      	lsrs	r3, r3, #3
 8000b1c:	4313      	orrs	r3, r2
 8000b1e:	08c9      	lsrs	r1, r1, #3
 8000b20:	e77c      	b.n	8000a1c <__aeabi_dadd+0x264>
 8000b22:	46c0      	nop			; (mov r8, r8)
 8000b24:	000007ff 	.word	0x000007ff
 8000b28:	ff7fffff 	.word	0xff7fffff
 8000b2c:	000007fe 	.word	0x000007fe
 8000b30:	4ccf      	ldr	r4, [pc, #828]	; (8000e70 <__aeabi_dadd+0x6b8>)
 8000b32:	42a2      	cmp	r2, r4
 8000b34:	d100      	bne.n	8000b38 <__aeabi_dadd+0x380>
 8000b36:	e0ce      	b.n	8000cd6 <__aeabi_dadd+0x51e>
 8000b38:	2480      	movs	r4, #128	; 0x80
 8000b3a:	0424      	lsls	r4, r4, #16
 8000b3c:	4321      	orrs	r1, r4
 8000b3e:	2f38      	cmp	r7, #56	; 0x38
 8000b40:	dc5b      	bgt.n	8000bfa <__aeabi_dadd+0x442>
 8000b42:	2f1f      	cmp	r7, #31
 8000b44:	dd00      	ble.n	8000b48 <__aeabi_dadd+0x390>
 8000b46:	e0dc      	b.n	8000d02 <__aeabi_dadd+0x54a>
 8000b48:	2520      	movs	r5, #32
 8000b4a:	000c      	movs	r4, r1
 8000b4c:	1bed      	subs	r5, r5, r7
 8000b4e:	001e      	movs	r6, r3
 8000b50:	40ab      	lsls	r3, r5
 8000b52:	40ac      	lsls	r4, r5
 8000b54:	40fe      	lsrs	r6, r7
 8000b56:	1e5d      	subs	r5, r3, #1
 8000b58:	41ab      	sbcs	r3, r5
 8000b5a:	4334      	orrs	r4, r6
 8000b5c:	40f9      	lsrs	r1, r7
 8000b5e:	431c      	orrs	r4, r3
 8000b60:	464b      	mov	r3, r9
 8000b62:	1a5b      	subs	r3, r3, r1
 8000b64:	4699      	mov	r9, r3
 8000b66:	e04c      	b.n	8000c02 <__aeabi_dadd+0x44a>
 8000b68:	464a      	mov	r2, r9
 8000b6a:	1a1c      	subs	r4, r3, r0
 8000b6c:	1a88      	subs	r0, r1, r2
 8000b6e:	42a3      	cmp	r3, r4
 8000b70:	4192      	sbcs	r2, r2
 8000b72:	4252      	negs	r2, r2
 8000b74:	4692      	mov	sl, r2
 8000b76:	0002      	movs	r2, r0
 8000b78:	4650      	mov	r0, sl
 8000b7a:	1a12      	subs	r2, r2, r0
 8000b7c:	4692      	mov	sl, r2
 8000b7e:	0212      	lsls	r2, r2, #8
 8000b80:	d478      	bmi.n	8000c74 <__aeabi_dadd+0x4bc>
 8000b82:	4653      	mov	r3, sl
 8000b84:	4323      	orrs	r3, r4
 8000b86:	d000      	beq.n	8000b8a <__aeabi_dadd+0x3d2>
 8000b88:	e66a      	b.n	8000860 <__aeabi_dadd+0xa8>
 8000b8a:	2100      	movs	r1, #0
 8000b8c:	2500      	movs	r5, #0
 8000b8e:	e745      	b.n	8000a1c <__aeabi_dadd+0x264>
 8000b90:	074a      	lsls	r2, r1, #29
 8000b92:	08db      	lsrs	r3, r3, #3
 8000b94:	4313      	orrs	r3, r2
 8000b96:	08c9      	lsrs	r1, r1, #3
 8000b98:	e73d      	b.n	8000a16 <__aeabi_dadd+0x25e>
 8000b9a:	181c      	adds	r4, r3, r0
 8000b9c:	429c      	cmp	r4, r3
 8000b9e:	419b      	sbcs	r3, r3
 8000ba0:	4449      	add	r1, r9
 8000ba2:	468a      	mov	sl, r1
 8000ba4:	425b      	negs	r3, r3
 8000ba6:	449a      	add	sl, r3
 8000ba8:	4653      	mov	r3, sl
 8000baa:	2601      	movs	r6, #1
 8000bac:	021b      	lsls	r3, r3, #8
 8000bae:	d400      	bmi.n	8000bb2 <__aeabi_dadd+0x3fa>
 8000bb0:	e727      	b.n	8000a02 <__aeabi_dadd+0x24a>
 8000bb2:	2602      	movs	r6, #2
 8000bb4:	4652      	mov	r2, sl
 8000bb6:	4baf      	ldr	r3, [pc, #700]	; (8000e74 <__aeabi_dadd+0x6bc>)
 8000bb8:	2101      	movs	r1, #1
 8000bba:	401a      	ands	r2, r3
 8000bbc:	0013      	movs	r3, r2
 8000bbe:	4021      	ands	r1, r4
 8000bc0:	0862      	lsrs	r2, r4, #1
 8000bc2:	430a      	orrs	r2, r1
 8000bc4:	07dc      	lsls	r4, r3, #31
 8000bc6:	085b      	lsrs	r3, r3, #1
 8000bc8:	469a      	mov	sl, r3
 8000bca:	4314      	orrs	r4, r2
 8000bcc:	e670      	b.n	80008b0 <__aeabi_dadd+0xf8>
 8000bce:	003a      	movs	r2, r7
 8000bd0:	464c      	mov	r4, r9
 8000bd2:	3a20      	subs	r2, #32
 8000bd4:	40d4      	lsrs	r4, r2
 8000bd6:	46a4      	mov	ip, r4
 8000bd8:	2f20      	cmp	r7, #32
 8000bda:	d007      	beq.n	8000bec <__aeabi_dadd+0x434>
 8000bdc:	2240      	movs	r2, #64	; 0x40
 8000bde:	4648      	mov	r0, r9
 8000be0:	1bd2      	subs	r2, r2, r7
 8000be2:	4090      	lsls	r0, r2
 8000be4:	0002      	movs	r2, r0
 8000be6:	4640      	mov	r0, r8
 8000be8:	4310      	orrs	r0, r2
 8000bea:	4680      	mov	r8, r0
 8000bec:	4640      	mov	r0, r8
 8000bee:	1e42      	subs	r2, r0, #1
 8000bf0:	4190      	sbcs	r0, r2
 8000bf2:	4662      	mov	r2, ip
 8000bf4:	0004      	movs	r4, r0
 8000bf6:	4314      	orrs	r4, r2
 8000bf8:	e624      	b.n	8000844 <__aeabi_dadd+0x8c>
 8000bfa:	4319      	orrs	r1, r3
 8000bfc:	000c      	movs	r4, r1
 8000bfe:	1e63      	subs	r3, r4, #1
 8000c00:	419c      	sbcs	r4, r3
 8000c02:	4643      	mov	r3, r8
 8000c04:	1b1c      	subs	r4, r3, r4
 8000c06:	45a0      	cmp	r8, r4
 8000c08:	419b      	sbcs	r3, r3
 8000c0a:	4649      	mov	r1, r9
 8000c0c:	425b      	negs	r3, r3
 8000c0e:	1acb      	subs	r3, r1, r3
 8000c10:	469a      	mov	sl, r3
 8000c12:	4665      	mov	r5, ip
 8000c14:	0016      	movs	r6, r2
 8000c16:	e61b      	b.n	8000850 <__aeabi_dadd+0x98>
 8000c18:	000c      	movs	r4, r1
 8000c1a:	431c      	orrs	r4, r3
 8000c1c:	d100      	bne.n	8000c20 <__aeabi_dadd+0x468>
 8000c1e:	e0c7      	b.n	8000db0 <__aeabi_dadd+0x5f8>
 8000c20:	1e7c      	subs	r4, r7, #1
 8000c22:	2f01      	cmp	r7, #1
 8000c24:	d100      	bne.n	8000c28 <__aeabi_dadd+0x470>
 8000c26:	e0f9      	b.n	8000e1c <__aeabi_dadd+0x664>
 8000c28:	4e91      	ldr	r6, [pc, #580]	; (8000e70 <__aeabi_dadd+0x6b8>)
 8000c2a:	42b7      	cmp	r7, r6
 8000c2c:	d05c      	beq.n	8000ce8 <__aeabi_dadd+0x530>
 8000c2e:	0027      	movs	r7, r4
 8000c30:	e740      	b.n	8000ab4 <__aeabi_dadd+0x2fc>
 8000c32:	2220      	movs	r2, #32
 8000c34:	464c      	mov	r4, r9
 8000c36:	4640      	mov	r0, r8
 8000c38:	1bd2      	subs	r2, r2, r7
 8000c3a:	4094      	lsls	r4, r2
 8000c3c:	40f8      	lsrs	r0, r7
 8000c3e:	4304      	orrs	r4, r0
 8000c40:	4640      	mov	r0, r8
 8000c42:	4090      	lsls	r0, r2
 8000c44:	1e42      	subs	r2, r0, #1
 8000c46:	4190      	sbcs	r0, r2
 8000c48:	464a      	mov	r2, r9
 8000c4a:	40fa      	lsrs	r2, r7
 8000c4c:	4304      	orrs	r4, r0
 8000c4e:	1889      	adds	r1, r1, r2
 8000c50:	e6ee      	b.n	8000a30 <__aeabi_dadd+0x278>
 8000c52:	4c87      	ldr	r4, [pc, #540]	; (8000e70 <__aeabi_dadd+0x6b8>)
 8000c54:	42a2      	cmp	r2, r4
 8000c56:	d100      	bne.n	8000c5a <__aeabi_dadd+0x4a2>
 8000c58:	e6f9      	b.n	8000a4e <__aeabi_dadd+0x296>
 8000c5a:	1818      	adds	r0, r3, r0
 8000c5c:	4298      	cmp	r0, r3
 8000c5e:	419b      	sbcs	r3, r3
 8000c60:	4449      	add	r1, r9
 8000c62:	425b      	negs	r3, r3
 8000c64:	18cb      	adds	r3, r1, r3
 8000c66:	07dc      	lsls	r4, r3, #31
 8000c68:	0840      	lsrs	r0, r0, #1
 8000c6a:	085b      	lsrs	r3, r3, #1
 8000c6c:	469a      	mov	sl, r3
 8000c6e:	0016      	movs	r6, r2
 8000c70:	4304      	orrs	r4, r0
 8000c72:	e6c6      	b.n	8000a02 <__aeabi_dadd+0x24a>
 8000c74:	4642      	mov	r2, r8
 8000c76:	1ad4      	subs	r4, r2, r3
 8000c78:	45a0      	cmp	r8, r4
 8000c7a:	4180      	sbcs	r0, r0
 8000c7c:	464b      	mov	r3, r9
 8000c7e:	4240      	negs	r0, r0
 8000c80:	1a59      	subs	r1, r3, r1
 8000c82:	1a0b      	subs	r3, r1, r0
 8000c84:	469a      	mov	sl, r3
 8000c86:	4665      	mov	r5, ip
 8000c88:	e5ea      	b.n	8000860 <__aeabi_dadd+0xa8>
 8000c8a:	464b      	mov	r3, r9
 8000c8c:	464a      	mov	r2, r9
 8000c8e:	08c0      	lsrs	r0, r0, #3
 8000c90:	075b      	lsls	r3, r3, #29
 8000c92:	4665      	mov	r5, ip
 8000c94:	4303      	orrs	r3, r0
 8000c96:	08d1      	lsrs	r1, r2, #3
 8000c98:	e6bd      	b.n	8000a16 <__aeabi_dadd+0x25e>
 8000c9a:	2a00      	cmp	r2, #0
 8000c9c:	d000      	beq.n	8000ca0 <__aeabi_dadd+0x4e8>
 8000c9e:	e08e      	b.n	8000dbe <__aeabi_dadd+0x606>
 8000ca0:	464b      	mov	r3, r9
 8000ca2:	4303      	orrs	r3, r0
 8000ca4:	d117      	bne.n	8000cd6 <__aeabi_dadd+0x51e>
 8000ca6:	2180      	movs	r1, #128	; 0x80
 8000ca8:	2500      	movs	r5, #0
 8000caa:	0309      	lsls	r1, r1, #12
 8000cac:	e6da      	b.n	8000a64 <__aeabi_dadd+0x2ac>
 8000cae:	074a      	lsls	r2, r1, #29
 8000cb0:	08db      	lsrs	r3, r3, #3
 8000cb2:	4313      	orrs	r3, r2
 8000cb4:	08c9      	lsrs	r1, r1, #3
 8000cb6:	e6d1      	b.n	8000a5c <__aeabi_dadd+0x2a4>
 8000cb8:	1a1c      	subs	r4, r3, r0
 8000cba:	464a      	mov	r2, r9
 8000cbc:	42a3      	cmp	r3, r4
 8000cbe:	419b      	sbcs	r3, r3
 8000cc0:	1a89      	subs	r1, r1, r2
 8000cc2:	425b      	negs	r3, r3
 8000cc4:	1acb      	subs	r3, r1, r3
 8000cc6:	469a      	mov	sl, r3
 8000cc8:	2601      	movs	r6, #1
 8000cca:	e5c1      	b.n	8000850 <__aeabi_dadd+0x98>
 8000ccc:	074a      	lsls	r2, r1, #29
 8000cce:	08db      	lsrs	r3, r3, #3
 8000cd0:	4313      	orrs	r3, r2
 8000cd2:	08c9      	lsrs	r1, r1, #3
 8000cd4:	e69f      	b.n	8000a16 <__aeabi_dadd+0x25e>
 8000cd6:	4643      	mov	r3, r8
 8000cd8:	08d8      	lsrs	r0, r3, #3
 8000cda:	464b      	mov	r3, r9
 8000cdc:	464a      	mov	r2, r9
 8000cde:	075b      	lsls	r3, r3, #29
 8000ce0:	4665      	mov	r5, ip
 8000ce2:	4303      	orrs	r3, r0
 8000ce4:	08d1      	lsrs	r1, r2, #3
 8000ce6:	e6b9      	b.n	8000a5c <__aeabi_dadd+0x2a4>
 8000ce8:	4643      	mov	r3, r8
 8000cea:	08d8      	lsrs	r0, r3, #3
 8000cec:	464b      	mov	r3, r9
 8000cee:	464a      	mov	r2, r9
 8000cf0:	075b      	lsls	r3, r3, #29
 8000cf2:	4303      	orrs	r3, r0
 8000cf4:	08d1      	lsrs	r1, r2, #3
 8000cf6:	e6b1      	b.n	8000a5c <__aeabi_dadd+0x2a4>
 8000cf8:	4319      	orrs	r1, r3
 8000cfa:	000c      	movs	r4, r1
 8000cfc:	1e63      	subs	r3, r4, #1
 8000cfe:	419c      	sbcs	r4, r3
 8000d00:	e6eb      	b.n	8000ada <__aeabi_dadd+0x322>
 8000d02:	003c      	movs	r4, r7
 8000d04:	000d      	movs	r5, r1
 8000d06:	3c20      	subs	r4, #32
 8000d08:	40e5      	lsrs	r5, r4
 8000d0a:	2f20      	cmp	r7, #32
 8000d0c:	d003      	beq.n	8000d16 <__aeabi_dadd+0x55e>
 8000d0e:	2440      	movs	r4, #64	; 0x40
 8000d10:	1be4      	subs	r4, r4, r7
 8000d12:	40a1      	lsls	r1, r4
 8000d14:	430b      	orrs	r3, r1
 8000d16:	001c      	movs	r4, r3
 8000d18:	1e63      	subs	r3, r4, #1
 8000d1a:	419c      	sbcs	r4, r3
 8000d1c:	432c      	orrs	r4, r5
 8000d1e:	e770      	b.n	8000c02 <__aeabi_dadd+0x44a>
 8000d20:	2a00      	cmp	r2, #0
 8000d22:	d0e1      	beq.n	8000ce8 <__aeabi_dadd+0x530>
 8000d24:	464a      	mov	r2, r9
 8000d26:	4302      	orrs	r2, r0
 8000d28:	d0c1      	beq.n	8000cae <__aeabi_dadd+0x4f6>
 8000d2a:	074a      	lsls	r2, r1, #29
 8000d2c:	08db      	lsrs	r3, r3, #3
 8000d2e:	4313      	orrs	r3, r2
 8000d30:	2280      	movs	r2, #128	; 0x80
 8000d32:	08c9      	lsrs	r1, r1, #3
 8000d34:	0312      	lsls	r2, r2, #12
 8000d36:	4211      	tst	r1, r2
 8000d38:	d008      	beq.n	8000d4c <__aeabi_dadd+0x594>
 8000d3a:	4648      	mov	r0, r9
 8000d3c:	08c4      	lsrs	r4, r0, #3
 8000d3e:	4214      	tst	r4, r2
 8000d40:	d104      	bne.n	8000d4c <__aeabi_dadd+0x594>
 8000d42:	4643      	mov	r3, r8
 8000d44:	0021      	movs	r1, r4
 8000d46:	08db      	lsrs	r3, r3, #3
 8000d48:	0742      	lsls	r2, r0, #29
 8000d4a:	4313      	orrs	r3, r2
 8000d4c:	0f5a      	lsrs	r2, r3, #29
 8000d4e:	00db      	lsls	r3, r3, #3
 8000d50:	0752      	lsls	r2, r2, #29
 8000d52:	08db      	lsrs	r3, r3, #3
 8000d54:	4313      	orrs	r3, r2
 8000d56:	e681      	b.n	8000a5c <__aeabi_dadd+0x2a4>
 8000d58:	464b      	mov	r3, r9
 8000d5a:	4303      	orrs	r3, r0
 8000d5c:	d100      	bne.n	8000d60 <__aeabi_dadd+0x5a8>
 8000d5e:	e714      	b.n	8000b8a <__aeabi_dadd+0x3d2>
 8000d60:	464b      	mov	r3, r9
 8000d62:	464a      	mov	r2, r9
 8000d64:	08c0      	lsrs	r0, r0, #3
 8000d66:	075b      	lsls	r3, r3, #29
 8000d68:	4665      	mov	r5, ip
 8000d6a:	4303      	orrs	r3, r0
 8000d6c:	08d1      	lsrs	r1, r2, #3
 8000d6e:	e655      	b.n	8000a1c <__aeabi_dadd+0x264>
 8000d70:	1ac4      	subs	r4, r0, r3
 8000d72:	45a0      	cmp	r8, r4
 8000d74:	4180      	sbcs	r0, r0
 8000d76:	464b      	mov	r3, r9
 8000d78:	4240      	negs	r0, r0
 8000d7a:	1a59      	subs	r1, r3, r1
 8000d7c:	1a0b      	subs	r3, r1, r0
 8000d7e:	469a      	mov	sl, r3
 8000d80:	4665      	mov	r5, ip
 8000d82:	2601      	movs	r6, #1
 8000d84:	e564      	b.n	8000850 <__aeabi_dadd+0x98>
 8000d86:	1a1c      	subs	r4, r3, r0
 8000d88:	464a      	mov	r2, r9
 8000d8a:	42a3      	cmp	r3, r4
 8000d8c:	4180      	sbcs	r0, r0
 8000d8e:	1a8a      	subs	r2, r1, r2
 8000d90:	4240      	negs	r0, r0
 8000d92:	1a12      	subs	r2, r2, r0
 8000d94:	4692      	mov	sl, r2
 8000d96:	0212      	lsls	r2, r2, #8
 8000d98:	d549      	bpl.n	8000e2e <__aeabi_dadd+0x676>
 8000d9a:	4642      	mov	r2, r8
 8000d9c:	1ad4      	subs	r4, r2, r3
 8000d9e:	45a0      	cmp	r8, r4
 8000da0:	4180      	sbcs	r0, r0
 8000da2:	464b      	mov	r3, r9
 8000da4:	4240      	negs	r0, r0
 8000da6:	1a59      	subs	r1, r3, r1
 8000da8:	1a0b      	subs	r3, r1, r0
 8000daa:	469a      	mov	sl, r3
 8000dac:	4665      	mov	r5, ip
 8000dae:	e57f      	b.n	80008b0 <__aeabi_dadd+0xf8>
 8000db0:	464b      	mov	r3, r9
 8000db2:	464a      	mov	r2, r9
 8000db4:	08c0      	lsrs	r0, r0, #3
 8000db6:	075b      	lsls	r3, r3, #29
 8000db8:	4303      	orrs	r3, r0
 8000dba:	08d1      	lsrs	r1, r2, #3
 8000dbc:	e62b      	b.n	8000a16 <__aeabi_dadd+0x25e>
 8000dbe:	464a      	mov	r2, r9
 8000dc0:	08db      	lsrs	r3, r3, #3
 8000dc2:	4302      	orrs	r2, r0
 8000dc4:	d138      	bne.n	8000e38 <__aeabi_dadd+0x680>
 8000dc6:	074a      	lsls	r2, r1, #29
 8000dc8:	4313      	orrs	r3, r2
 8000dca:	08c9      	lsrs	r1, r1, #3
 8000dcc:	e646      	b.n	8000a5c <__aeabi_dadd+0x2a4>
 8000dce:	464b      	mov	r3, r9
 8000dd0:	464a      	mov	r2, r9
 8000dd2:	08c0      	lsrs	r0, r0, #3
 8000dd4:	075b      	lsls	r3, r3, #29
 8000dd6:	4303      	orrs	r3, r0
 8000dd8:	08d1      	lsrs	r1, r2, #3
 8000dda:	e61f      	b.n	8000a1c <__aeabi_dadd+0x264>
 8000ddc:	181c      	adds	r4, r3, r0
 8000dde:	429c      	cmp	r4, r3
 8000de0:	419b      	sbcs	r3, r3
 8000de2:	4449      	add	r1, r9
 8000de4:	468a      	mov	sl, r1
 8000de6:	425b      	negs	r3, r3
 8000de8:	449a      	add	sl, r3
 8000dea:	4653      	mov	r3, sl
 8000dec:	021b      	lsls	r3, r3, #8
 8000dee:	d400      	bmi.n	8000df2 <__aeabi_dadd+0x63a>
 8000df0:	e607      	b.n	8000a02 <__aeabi_dadd+0x24a>
 8000df2:	4652      	mov	r2, sl
 8000df4:	4b1f      	ldr	r3, [pc, #124]	; (8000e74 <__aeabi_dadd+0x6bc>)
 8000df6:	2601      	movs	r6, #1
 8000df8:	401a      	ands	r2, r3
 8000dfa:	4692      	mov	sl, r2
 8000dfc:	e601      	b.n	8000a02 <__aeabi_dadd+0x24a>
 8000dfe:	003c      	movs	r4, r7
 8000e00:	000e      	movs	r6, r1
 8000e02:	3c20      	subs	r4, #32
 8000e04:	40e6      	lsrs	r6, r4
 8000e06:	2f20      	cmp	r7, #32
 8000e08:	d003      	beq.n	8000e12 <__aeabi_dadd+0x65a>
 8000e0a:	2440      	movs	r4, #64	; 0x40
 8000e0c:	1be4      	subs	r4, r4, r7
 8000e0e:	40a1      	lsls	r1, r4
 8000e10:	430b      	orrs	r3, r1
 8000e12:	001c      	movs	r4, r3
 8000e14:	1e63      	subs	r3, r4, #1
 8000e16:	419c      	sbcs	r4, r3
 8000e18:	4334      	orrs	r4, r6
 8000e1a:	e65e      	b.n	8000ada <__aeabi_dadd+0x322>
 8000e1c:	4443      	add	r3, r8
 8000e1e:	4283      	cmp	r3, r0
 8000e20:	4180      	sbcs	r0, r0
 8000e22:	4449      	add	r1, r9
 8000e24:	468a      	mov	sl, r1
 8000e26:	4240      	negs	r0, r0
 8000e28:	001c      	movs	r4, r3
 8000e2a:	4482      	add	sl, r0
 8000e2c:	e6bc      	b.n	8000ba8 <__aeabi_dadd+0x3f0>
 8000e2e:	4653      	mov	r3, sl
 8000e30:	4323      	orrs	r3, r4
 8000e32:	d100      	bne.n	8000e36 <__aeabi_dadd+0x67e>
 8000e34:	e6a9      	b.n	8000b8a <__aeabi_dadd+0x3d2>
 8000e36:	e5e4      	b.n	8000a02 <__aeabi_dadd+0x24a>
 8000e38:	074a      	lsls	r2, r1, #29
 8000e3a:	4313      	orrs	r3, r2
 8000e3c:	2280      	movs	r2, #128	; 0x80
 8000e3e:	08c9      	lsrs	r1, r1, #3
 8000e40:	0312      	lsls	r2, r2, #12
 8000e42:	4211      	tst	r1, r2
 8000e44:	d009      	beq.n	8000e5a <__aeabi_dadd+0x6a2>
 8000e46:	4648      	mov	r0, r9
 8000e48:	08c4      	lsrs	r4, r0, #3
 8000e4a:	4214      	tst	r4, r2
 8000e4c:	d105      	bne.n	8000e5a <__aeabi_dadd+0x6a2>
 8000e4e:	4643      	mov	r3, r8
 8000e50:	4665      	mov	r5, ip
 8000e52:	0021      	movs	r1, r4
 8000e54:	08db      	lsrs	r3, r3, #3
 8000e56:	0742      	lsls	r2, r0, #29
 8000e58:	4313      	orrs	r3, r2
 8000e5a:	0f5a      	lsrs	r2, r3, #29
 8000e5c:	00db      	lsls	r3, r3, #3
 8000e5e:	08db      	lsrs	r3, r3, #3
 8000e60:	0752      	lsls	r2, r2, #29
 8000e62:	4313      	orrs	r3, r2
 8000e64:	e5fa      	b.n	8000a5c <__aeabi_dadd+0x2a4>
 8000e66:	2300      	movs	r3, #0
 8000e68:	4a01      	ldr	r2, [pc, #4]	; (8000e70 <__aeabi_dadd+0x6b8>)
 8000e6a:	001c      	movs	r4, r3
 8000e6c:	e540      	b.n	80008f0 <__aeabi_dadd+0x138>
 8000e6e:	46c0      	nop			; (mov r8, r8)
 8000e70:	000007ff 	.word	0x000007ff
 8000e74:	ff7fffff 	.word	0xff7fffff

08000e78 <__aeabi_ddiv>:
 8000e78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e7a:	4657      	mov	r7, sl
 8000e7c:	464e      	mov	r6, r9
 8000e7e:	4645      	mov	r5, r8
 8000e80:	46de      	mov	lr, fp
 8000e82:	b5e0      	push	{r5, r6, r7, lr}
 8000e84:	030c      	lsls	r4, r1, #12
 8000e86:	001f      	movs	r7, r3
 8000e88:	004b      	lsls	r3, r1, #1
 8000e8a:	4681      	mov	r9, r0
 8000e8c:	4692      	mov	sl, r2
 8000e8e:	0005      	movs	r5, r0
 8000e90:	b085      	sub	sp, #20
 8000e92:	0b24      	lsrs	r4, r4, #12
 8000e94:	0d5b      	lsrs	r3, r3, #21
 8000e96:	0fce      	lsrs	r6, r1, #31
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d100      	bne.n	8000e9e <__aeabi_ddiv+0x26>
 8000e9c:	e152      	b.n	8001144 <__aeabi_ddiv+0x2cc>
 8000e9e:	4ad2      	ldr	r2, [pc, #840]	; (80011e8 <__aeabi_ddiv+0x370>)
 8000ea0:	4293      	cmp	r3, r2
 8000ea2:	d100      	bne.n	8000ea6 <__aeabi_ddiv+0x2e>
 8000ea4:	e16e      	b.n	8001184 <__aeabi_ddiv+0x30c>
 8000ea6:	0f42      	lsrs	r2, r0, #29
 8000ea8:	00e4      	lsls	r4, r4, #3
 8000eaa:	4314      	orrs	r4, r2
 8000eac:	2280      	movs	r2, #128	; 0x80
 8000eae:	0412      	lsls	r2, r2, #16
 8000eb0:	4322      	orrs	r2, r4
 8000eb2:	4690      	mov	r8, r2
 8000eb4:	4acd      	ldr	r2, [pc, #820]	; (80011ec <__aeabi_ddiv+0x374>)
 8000eb6:	00c5      	lsls	r5, r0, #3
 8000eb8:	4693      	mov	fp, r2
 8000eba:	449b      	add	fp, r3
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	4699      	mov	r9, r3
 8000ec0:	9300      	str	r3, [sp, #0]
 8000ec2:	033c      	lsls	r4, r7, #12
 8000ec4:	007b      	lsls	r3, r7, #1
 8000ec6:	4650      	mov	r0, sl
 8000ec8:	0b24      	lsrs	r4, r4, #12
 8000eca:	0d5b      	lsrs	r3, r3, #21
 8000ecc:	0fff      	lsrs	r7, r7, #31
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d100      	bne.n	8000ed4 <__aeabi_ddiv+0x5c>
 8000ed2:	e11a      	b.n	800110a <__aeabi_ddiv+0x292>
 8000ed4:	4ac4      	ldr	r2, [pc, #784]	; (80011e8 <__aeabi_ddiv+0x370>)
 8000ed6:	4293      	cmp	r3, r2
 8000ed8:	d100      	bne.n	8000edc <__aeabi_ddiv+0x64>
 8000eda:	e15e      	b.n	800119a <__aeabi_ddiv+0x322>
 8000edc:	0f42      	lsrs	r2, r0, #29
 8000ede:	00e4      	lsls	r4, r4, #3
 8000ee0:	4322      	orrs	r2, r4
 8000ee2:	2480      	movs	r4, #128	; 0x80
 8000ee4:	0424      	lsls	r4, r4, #16
 8000ee6:	4314      	orrs	r4, r2
 8000ee8:	4ac0      	ldr	r2, [pc, #768]	; (80011ec <__aeabi_ddiv+0x374>)
 8000eea:	00c1      	lsls	r1, r0, #3
 8000eec:	4694      	mov	ip, r2
 8000eee:	465a      	mov	r2, fp
 8000ef0:	4463      	add	r3, ip
 8000ef2:	1ad3      	subs	r3, r2, r3
 8000ef4:	469b      	mov	fp, r3
 8000ef6:	2000      	movs	r0, #0
 8000ef8:	0033      	movs	r3, r6
 8000efa:	407b      	eors	r3, r7
 8000efc:	469a      	mov	sl, r3
 8000efe:	464b      	mov	r3, r9
 8000f00:	2b0f      	cmp	r3, #15
 8000f02:	d827      	bhi.n	8000f54 <__aeabi_ddiv+0xdc>
 8000f04:	4aba      	ldr	r2, [pc, #744]	; (80011f0 <__aeabi_ddiv+0x378>)
 8000f06:	009b      	lsls	r3, r3, #2
 8000f08:	58d3      	ldr	r3, [r2, r3]
 8000f0a:	469f      	mov	pc, r3
 8000f0c:	46b2      	mov	sl, r6
 8000f0e:	9b00      	ldr	r3, [sp, #0]
 8000f10:	2b02      	cmp	r3, #2
 8000f12:	d016      	beq.n	8000f42 <__aeabi_ddiv+0xca>
 8000f14:	2b03      	cmp	r3, #3
 8000f16:	d100      	bne.n	8000f1a <__aeabi_ddiv+0xa2>
 8000f18:	e287      	b.n	800142a <__aeabi_ddiv+0x5b2>
 8000f1a:	2b01      	cmp	r3, #1
 8000f1c:	d000      	beq.n	8000f20 <__aeabi_ddiv+0xa8>
 8000f1e:	e0d5      	b.n	80010cc <__aeabi_ddiv+0x254>
 8000f20:	2300      	movs	r3, #0
 8000f22:	2200      	movs	r2, #0
 8000f24:	2500      	movs	r5, #0
 8000f26:	051b      	lsls	r3, r3, #20
 8000f28:	4313      	orrs	r3, r2
 8000f2a:	4652      	mov	r2, sl
 8000f2c:	07d2      	lsls	r2, r2, #31
 8000f2e:	4313      	orrs	r3, r2
 8000f30:	0028      	movs	r0, r5
 8000f32:	0019      	movs	r1, r3
 8000f34:	b005      	add	sp, #20
 8000f36:	bcf0      	pop	{r4, r5, r6, r7}
 8000f38:	46bb      	mov	fp, r7
 8000f3a:	46b2      	mov	sl, r6
 8000f3c:	46a9      	mov	r9, r5
 8000f3e:	46a0      	mov	r8, r4
 8000f40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f42:	2200      	movs	r2, #0
 8000f44:	2500      	movs	r5, #0
 8000f46:	4ba8      	ldr	r3, [pc, #672]	; (80011e8 <__aeabi_ddiv+0x370>)
 8000f48:	e7ed      	b.n	8000f26 <__aeabi_ddiv+0xae>
 8000f4a:	46ba      	mov	sl, r7
 8000f4c:	46a0      	mov	r8, r4
 8000f4e:	000d      	movs	r5, r1
 8000f50:	9000      	str	r0, [sp, #0]
 8000f52:	e7dc      	b.n	8000f0e <__aeabi_ddiv+0x96>
 8000f54:	4544      	cmp	r4, r8
 8000f56:	d200      	bcs.n	8000f5a <__aeabi_ddiv+0xe2>
 8000f58:	e1c4      	b.n	80012e4 <__aeabi_ddiv+0x46c>
 8000f5a:	d100      	bne.n	8000f5e <__aeabi_ddiv+0xe6>
 8000f5c:	e1bf      	b.n	80012de <__aeabi_ddiv+0x466>
 8000f5e:	2301      	movs	r3, #1
 8000f60:	425b      	negs	r3, r3
 8000f62:	469c      	mov	ip, r3
 8000f64:	002e      	movs	r6, r5
 8000f66:	4640      	mov	r0, r8
 8000f68:	2500      	movs	r5, #0
 8000f6a:	44e3      	add	fp, ip
 8000f6c:	0223      	lsls	r3, r4, #8
 8000f6e:	0e0c      	lsrs	r4, r1, #24
 8000f70:	431c      	orrs	r4, r3
 8000f72:	0c1b      	lsrs	r3, r3, #16
 8000f74:	4699      	mov	r9, r3
 8000f76:	0423      	lsls	r3, r4, #16
 8000f78:	020a      	lsls	r2, r1, #8
 8000f7a:	0c1f      	lsrs	r7, r3, #16
 8000f7c:	4649      	mov	r1, r9
 8000f7e:	9200      	str	r2, [sp, #0]
 8000f80:	9701      	str	r7, [sp, #4]
 8000f82:	f7ff f961 	bl	8000248 <__aeabi_uidivmod>
 8000f86:	0002      	movs	r2, r0
 8000f88:	437a      	muls	r2, r7
 8000f8a:	040b      	lsls	r3, r1, #16
 8000f8c:	0c31      	lsrs	r1, r6, #16
 8000f8e:	4680      	mov	r8, r0
 8000f90:	4319      	orrs	r1, r3
 8000f92:	428a      	cmp	r2, r1
 8000f94:	d907      	bls.n	8000fa6 <__aeabi_ddiv+0x12e>
 8000f96:	2301      	movs	r3, #1
 8000f98:	425b      	negs	r3, r3
 8000f9a:	469c      	mov	ip, r3
 8000f9c:	1909      	adds	r1, r1, r4
 8000f9e:	44e0      	add	r8, ip
 8000fa0:	428c      	cmp	r4, r1
 8000fa2:	d800      	bhi.n	8000fa6 <__aeabi_ddiv+0x12e>
 8000fa4:	e201      	b.n	80013aa <__aeabi_ddiv+0x532>
 8000fa6:	1a88      	subs	r0, r1, r2
 8000fa8:	4649      	mov	r1, r9
 8000faa:	f7ff f94d 	bl	8000248 <__aeabi_uidivmod>
 8000fae:	9a01      	ldr	r2, [sp, #4]
 8000fb0:	0436      	lsls	r6, r6, #16
 8000fb2:	4342      	muls	r2, r0
 8000fb4:	0409      	lsls	r1, r1, #16
 8000fb6:	0c36      	lsrs	r6, r6, #16
 8000fb8:	0003      	movs	r3, r0
 8000fba:	430e      	orrs	r6, r1
 8000fbc:	42b2      	cmp	r2, r6
 8000fbe:	d904      	bls.n	8000fca <__aeabi_ddiv+0x152>
 8000fc0:	1936      	adds	r6, r6, r4
 8000fc2:	3b01      	subs	r3, #1
 8000fc4:	42b4      	cmp	r4, r6
 8000fc6:	d800      	bhi.n	8000fca <__aeabi_ddiv+0x152>
 8000fc8:	e1e9      	b.n	800139e <__aeabi_ddiv+0x526>
 8000fca:	1ab0      	subs	r0, r6, r2
 8000fcc:	4642      	mov	r2, r8
 8000fce:	9e00      	ldr	r6, [sp, #0]
 8000fd0:	0412      	lsls	r2, r2, #16
 8000fd2:	431a      	orrs	r2, r3
 8000fd4:	0c33      	lsrs	r3, r6, #16
 8000fd6:	001f      	movs	r7, r3
 8000fd8:	0c11      	lsrs	r1, r2, #16
 8000fda:	4690      	mov	r8, r2
 8000fdc:	9302      	str	r3, [sp, #8]
 8000fde:	0413      	lsls	r3, r2, #16
 8000fe0:	0432      	lsls	r2, r6, #16
 8000fe2:	0c16      	lsrs	r6, r2, #16
 8000fe4:	0032      	movs	r2, r6
 8000fe6:	0c1b      	lsrs	r3, r3, #16
 8000fe8:	435a      	muls	r2, r3
 8000fea:	9603      	str	r6, [sp, #12]
 8000fec:	437b      	muls	r3, r7
 8000fee:	434e      	muls	r6, r1
 8000ff0:	4379      	muls	r1, r7
 8000ff2:	0c17      	lsrs	r7, r2, #16
 8000ff4:	46bc      	mov	ip, r7
 8000ff6:	199b      	adds	r3, r3, r6
 8000ff8:	4463      	add	r3, ip
 8000ffa:	429e      	cmp	r6, r3
 8000ffc:	d903      	bls.n	8001006 <__aeabi_ddiv+0x18e>
 8000ffe:	2680      	movs	r6, #128	; 0x80
 8001000:	0276      	lsls	r6, r6, #9
 8001002:	46b4      	mov	ip, r6
 8001004:	4461      	add	r1, ip
 8001006:	0c1e      	lsrs	r6, r3, #16
 8001008:	1871      	adds	r1, r6, r1
 800100a:	0416      	lsls	r6, r2, #16
 800100c:	041b      	lsls	r3, r3, #16
 800100e:	0c36      	lsrs	r6, r6, #16
 8001010:	199e      	adds	r6, r3, r6
 8001012:	4288      	cmp	r0, r1
 8001014:	d302      	bcc.n	800101c <__aeabi_ddiv+0x1a4>
 8001016:	d112      	bne.n	800103e <__aeabi_ddiv+0x1c6>
 8001018:	42b5      	cmp	r5, r6
 800101a:	d210      	bcs.n	800103e <__aeabi_ddiv+0x1c6>
 800101c:	4643      	mov	r3, r8
 800101e:	1e5a      	subs	r2, r3, #1
 8001020:	9b00      	ldr	r3, [sp, #0]
 8001022:	469c      	mov	ip, r3
 8001024:	4465      	add	r5, ip
 8001026:	001f      	movs	r7, r3
 8001028:	429d      	cmp	r5, r3
 800102a:	419b      	sbcs	r3, r3
 800102c:	425b      	negs	r3, r3
 800102e:	191b      	adds	r3, r3, r4
 8001030:	18c0      	adds	r0, r0, r3
 8001032:	4284      	cmp	r4, r0
 8001034:	d200      	bcs.n	8001038 <__aeabi_ddiv+0x1c0>
 8001036:	e19e      	b.n	8001376 <__aeabi_ddiv+0x4fe>
 8001038:	d100      	bne.n	800103c <__aeabi_ddiv+0x1c4>
 800103a:	e199      	b.n	8001370 <__aeabi_ddiv+0x4f8>
 800103c:	4690      	mov	r8, r2
 800103e:	1bae      	subs	r6, r5, r6
 8001040:	42b5      	cmp	r5, r6
 8001042:	41ad      	sbcs	r5, r5
 8001044:	1a40      	subs	r0, r0, r1
 8001046:	426d      	negs	r5, r5
 8001048:	1b40      	subs	r0, r0, r5
 800104a:	4284      	cmp	r4, r0
 800104c:	d100      	bne.n	8001050 <__aeabi_ddiv+0x1d8>
 800104e:	e1d2      	b.n	80013f6 <__aeabi_ddiv+0x57e>
 8001050:	4649      	mov	r1, r9
 8001052:	f7ff f8f9 	bl	8000248 <__aeabi_uidivmod>
 8001056:	9a01      	ldr	r2, [sp, #4]
 8001058:	040b      	lsls	r3, r1, #16
 800105a:	4342      	muls	r2, r0
 800105c:	0c31      	lsrs	r1, r6, #16
 800105e:	0005      	movs	r5, r0
 8001060:	4319      	orrs	r1, r3
 8001062:	428a      	cmp	r2, r1
 8001064:	d900      	bls.n	8001068 <__aeabi_ddiv+0x1f0>
 8001066:	e16c      	b.n	8001342 <__aeabi_ddiv+0x4ca>
 8001068:	1a88      	subs	r0, r1, r2
 800106a:	4649      	mov	r1, r9
 800106c:	f7ff f8ec 	bl	8000248 <__aeabi_uidivmod>
 8001070:	9a01      	ldr	r2, [sp, #4]
 8001072:	0436      	lsls	r6, r6, #16
 8001074:	4342      	muls	r2, r0
 8001076:	0409      	lsls	r1, r1, #16
 8001078:	0c36      	lsrs	r6, r6, #16
 800107a:	0003      	movs	r3, r0
 800107c:	430e      	orrs	r6, r1
 800107e:	42b2      	cmp	r2, r6
 8001080:	d900      	bls.n	8001084 <__aeabi_ddiv+0x20c>
 8001082:	e153      	b.n	800132c <__aeabi_ddiv+0x4b4>
 8001084:	9803      	ldr	r0, [sp, #12]
 8001086:	1ab6      	subs	r6, r6, r2
 8001088:	0002      	movs	r2, r0
 800108a:	042d      	lsls	r5, r5, #16
 800108c:	431d      	orrs	r5, r3
 800108e:	9f02      	ldr	r7, [sp, #8]
 8001090:	042b      	lsls	r3, r5, #16
 8001092:	0c1b      	lsrs	r3, r3, #16
 8001094:	435a      	muls	r2, r3
 8001096:	437b      	muls	r3, r7
 8001098:	469c      	mov	ip, r3
 800109a:	0c29      	lsrs	r1, r5, #16
 800109c:	4348      	muls	r0, r1
 800109e:	0c13      	lsrs	r3, r2, #16
 80010a0:	4484      	add	ip, r0
 80010a2:	4463      	add	r3, ip
 80010a4:	4379      	muls	r1, r7
 80010a6:	4298      	cmp	r0, r3
 80010a8:	d903      	bls.n	80010b2 <__aeabi_ddiv+0x23a>
 80010aa:	2080      	movs	r0, #128	; 0x80
 80010ac:	0240      	lsls	r0, r0, #9
 80010ae:	4684      	mov	ip, r0
 80010b0:	4461      	add	r1, ip
 80010b2:	0c18      	lsrs	r0, r3, #16
 80010b4:	0412      	lsls	r2, r2, #16
 80010b6:	041b      	lsls	r3, r3, #16
 80010b8:	0c12      	lsrs	r2, r2, #16
 80010ba:	1840      	adds	r0, r0, r1
 80010bc:	189b      	adds	r3, r3, r2
 80010be:	4286      	cmp	r6, r0
 80010c0:	d200      	bcs.n	80010c4 <__aeabi_ddiv+0x24c>
 80010c2:	e100      	b.n	80012c6 <__aeabi_ddiv+0x44e>
 80010c4:	d100      	bne.n	80010c8 <__aeabi_ddiv+0x250>
 80010c6:	e0fb      	b.n	80012c0 <__aeabi_ddiv+0x448>
 80010c8:	2301      	movs	r3, #1
 80010ca:	431d      	orrs	r5, r3
 80010cc:	4b49      	ldr	r3, [pc, #292]	; (80011f4 <__aeabi_ddiv+0x37c>)
 80010ce:	445b      	add	r3, fp
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	dc00      	bgt.n	80010d6 <__aeabi_ddiv+0x25e>
 80010d4:	e0aa      	b.n	800122c <__aeabi_ddiv+0x3b4>
 80010d6:	076a      	lsls	r2, r5, #29
 80010d8:	d000      	beq.n	80010dc <__aeabi_ddiv+0x264>
 80010da:	e13d      	b.n	8001358 <__aeabi_ddiv+0x4e0>
 80010dc:	08e9      	lsrs	r1, r5, #3
 80010de:	4642      	mov	r2, r8
 80010e0:	01d2      	lsls	r2, r2, #7
 80010e2:	d506      	bpl.n	80010f2 <__aeabi_ddiv+0x27a>
 80010e4:	4642      	mov	r2, r8
 80010e6:	4b44      	ldr	r3, [pc, #272]	; (80011f8 <__aeabi_ddiv+0x380>)
 80010e8:	401a      	ands	r2, r3
 80010ea:	2380      	movs	r3, #128	; 0x80
 80010ec:	4690      	mov	r8, r2
 80010ee:	00db      	lsls	r3, r3, #3
 80010f0:	445b      	add	r3, fp
 80010f2:	4a42      	ldr	r2, [pc, #264]	; (80011fc <__aeabi_ddiv+0x384>)
 80010f4:	4293      	cmp	r3, r2
 80010f6:	dd00      	ble.n	80010fa <__aeabi_ddiv+0x282>
 80010f8:	e723      	b.n	8000f42 <__aeabi_ddiv+0xca>
 80010fa:	4642      	mov	r2, r8
 80010fc:	055b      	lsls	r3, r3, #21
 80010fe:	0755      	lsls	r5, r2, #29
 8001100:	0252      	lsls	r2, r2, #9
 8001102:	430d      	orrs	r5, r1
 8001104:	0b12      	lsrs	r2, r2, #12
 8001106:	0d5b      	lsrs	r3, r3, #21
 8001108:	e70d      	b.n	8000f26 <__aeabi_ddiv+0xae>
 800110a:	4651      	mov	r1, sl
 800110c:	4321      	orrs	r1, r4
 800110e:	d100      	bne.n	8001112 <__aeabi_ddiv+0x29a>
 8001110:	e07c      	b.n	800120c <__aeabi_ddiv+0x394>
 8001112:	2c00      	cmp	r4, #0
 8001114:	d100      	bne.n	8001118 <__aeabi_ddiv+0x2a0>
 8001116:	e0fb      	b.n	8001310 <__aeabi_ddiv+0x498>
 8001118:	0020      	movs	r0, r4
 800111a:	f001 fa1b 	bl	8002554 <__clzsi2>
 800111e:	0002      	movs	r2, r0
 8001120:	3a0b      	subs	r2, #11
 8001122:	231d      	movs	r3, #29
 8001124:	1a9b      	subs	r3, r3, r2
 8001126:	4652      	mov	r2, sl
 8001128:	0001      	movs	r1, r0
 800112a:	40da      	lsrs	r2, r3
 800112c:	4653      	mov	r3, sl
 800112e:	3908      	subs	r1, #8
 8001130:	408b      	lsls	r3, r1
 8001132:	408c      	lsls	r4, r1
 8001134:	0019      	movs	r1, r3
 8001136:	4314      	orrs	r4, r2
 8001138:	4b31      	ldr	r3, [pc, #196]	; (8001200 <__aeabi_ddiv+0x388>)
 800113a:	4458      	add	r0, fp
 800113c:	469b      	mov	fp, r3
 800113e:	4483      	add	fp, r0
 8001140:	2000      	movs	r0, #0
 8001142:	e6d9      	b.n	8000ef8 <__aeabi_ddiv+0x80>
 8001144:	0003      	movs	r3, r0
 8001146:	4323      	orrs	r3, r4
 8001148:	4698      	mov	r8, r3
 800114a:	d044      	beq.n	80011d6 <__aeabi_ddiv+0x35e>
 800114c:	2c00      	cmp	r4, #0
 800114e:	d100      	bne.n	8001152 <__aeabi_ddiv+0x2da>
 8001150:	e0cf      	b.n	80012f2 <__aeabi_ddiv+0x47a>
 8001152:	0020      	movs	r0, r4
 8001154:	f001 f9fe 	bl	8002554 <__clzsi2>
 8001158:	0001      	movs	r1, r0
 800115a:	0002      	movs	r2, r0
 800115c:	390b      	subs	r1, #11
 800115e:	231d      	movs	r3, #29
 8001160:	1a5b      	subs	r3, r3, r1
 8001162:	4649      	mov	r1, r9
 8001164:	0010      	movs	r0, r2
 8001166:	40d9      	lsrs	r1, r3
 8001168:	3808      	subs	r0, #8
 800116a:	4084      	lsls	r4, r0
 800116c:	000b      	movs	r3, r1
 800116e:	464d      	mov	r5, r9
 8001170:	4323      	orrs	r3, r4
 8001172:	4698      	mov	r8, r3
 8001174:	4085      	lsls	r5, r0
 8001176:	4b23      	ldr	r3, [pc, #140]	; (8001204 <__aeabi_ddiv+0x38c>)
 8001178:	1a9b      	subs	r3, r3, r2
 800117a:	469b      	mov	fp, r3
 800117c:	2300      	movs	r3, #0
 800117e:	4699      	mov	r9, r3
 8001180:	9300      	str	r3, [sp, #0]
 8001182:	e69e      	b.n	8000ec2 <__aeabi_ddiv+0x4a>
 8001184:	0002      	movs	r2, r0
 8001186:	4322      	orrs	r2, r4
 8001188:	4690      	mov	r8, r2
 800118a:	d11d      	bne.n	80011c8 <__aeabi_ddiv+0x350>
 800118c:	2208      	movs	r2, #8
 800118e:	469b      	mov	fp, r3
 8001190:	2302      	movs	r3, #2
 8001192:	2500      	movs	r5, #0
 8001194:	4691      	mov	r9, r2
 8001196:	9300      	str	r3, [sp, #0]
 8001198:	e693      	b.n	8000ec2 <__aeabi_ddiv+0x4a>
 800119a:	4651      	mov	r1, sl
 800119c:	4321      	orrs	r1, r4
 800119e:	d109      	bne.n	80011b4 <__aeabi_ddiv+0x33c>
 80011a0:	2302      	movs	r3, #2
 80011a2:	464a      	mov	r2, r9
 80011a4:	431a      	orrs	r2, r3
 80011a6:	4b18      	ldr	r3, [pc, #96]	; (8001208 <__aeabi_ddiv+0x390>)
 80011a8:	4691      	mov	r9, r2
 80011aa:	469c      	mov	ip, r3
 80011ac:	2400      	movs	r4, #0
 80011ae:	2002      	movs	r0, #2
 80011b0:	44e3      	add	fp, ip
 80011b2:	e6a1      	b.n	8000ef8 <__aeabi_ddiv+0x80>
 80011b4:	2303      	movs	r3, #3
 80011b6:	464a      	mov	r2, r9
 80011b8:	431a      	orrs	r2, r3
 80011ba:	4b13      	ldr	r3, [pc, #76]	; (8001208 <__aeabi_ddiv+0x390>)
 80011bc:	4691      	mov	r9, r2
 80011be:	469c      	mov	ip, r3
 80011c0:	4651      	mov	r1, sl
 80011c2:	2003      	movs	r0, #3
 80011c4:	44e3      	add	fp, ip
 80011c6:	e697      	b.n	8000ef8 <__aeabi_ddiv+0x80>
 80011c8:	220c      	movs	r2, #12
 80011ca:	469b      	mov	fp, r3
 80011cc:	2303      	movs	r3, #3
 80011ce:	46a0      	mov	r8, r4
 80011d0:	4691      	mov	r9, r2
 80011d2:	9300      	str	r3, [sp, #0]
 80011d4:	e675      	b.n	8000ec2 <__aeabi_ddiv+0x4a>
 80011d6:	2304      	movs	r3, #4
 80011d8:	4699      	mov	r9, r3
 80011da:	2300      	movs	r3, #0
 80011dc:	469b      	mov	fp, r3
 80011de:	3301      	adds	r3, #1
 80011e0:	2500      	movs	r5, #0
 80011e2:	9300      	str	r3, [sp, #0]
 80011e4:	e66d      	b.n	8000ec2 <__aeabi_ddiv+0x4a>
 80011e6:	46c0      	nop			; (mov r8, r8)
 80011e8:	000007ff 	.word	0x000007ff
 80011ec:	fffffc01 	.word	0xfffffc01
 80011f0:	08012924 	.word	0x08012924
 80011f4:	000003ff 	.word	0x000003ff
 80011f8:	feffffff 	.word	0xfeffffff
 80011fc:	000007fe 	.word	0x000007fe
 8001200:	000003f3 	.word	0x000003f3
 8001204:	fffffc0d 	.word	0xfffffc0d
 8001208:	fffff801 	.word	0xfffff801
 800120c:	464a      	mov	r2, r9
 800120e:	2301      	movs	r3, #1
 8001210:	431a      	orrs	r2, r3
 8001212:	4691      	mov	r9, r2
 8001214:	2400      	movs	r4, #0
 8001216:	2001      	movs	r0, #1
 8001218:	e66e      	b.n	8000ef8 <__aeabi_ddiv+0x80>
 800121a:	2300      	movs	r3, #0
 800121c:	2280      	movs	r2, #128	; 0x80
 800121e:	469a      	mov	sl, r3
 8001220:	2500      	movs	r5, #0
 8001222:	4b88      	ldr	r3, [pc, #544]	; (8001444 <__aeabi_ddiv+0x5cc>)
 8001224:	0312      	lsls	r2, r2, #12
 8001226:	e67e      	b.n	8000f26 <__aeabi_ddiv+0xae>
 8001228:	2501      	movs	r5, #1
 800122a:	426d      	negs	r5, r5
 800122c:	2201      	movs	r2, #1
 800122e:	1ad2      	subs	r2, r2, r3
 8001230:	2a38      	cmp	r2, #56	; 0x38
 8001232:	dd00      	ble.n	8001236 <__aeabi_ddiv+0x3be>
 8001234:	e674      	b.n	8000f20 <__aeabi_ddiv+0xa8>
 8001236:	2a1f      	cmp	r2, #31
 8001238:	dc00      	bgt.n	800123c <__aeabi_ddiv+0x3c4>
 800123a:	e0bd      	b.n	80013b8 <__aeabi_ddiv+0x540>
 800123c:	211f      	movs	r1, #31
 800123e:	4249      	negs	r1, r1
 8001240:	1acb      	subs	r3, r1, r3
 8001242:	4641      	mov	r1, r8
 8001244:	40d9      	lsrs	r1, r3
 8001246:	000b      	movs	r3, r1
 8001248:	2a20      	cmp	r2, #32
 800124a:	d004      	beq.n	8001256 <__aeabi_ddiv+0x3de>
 800124c:	4641      	mov	r1, r8
 800124e:	4a7e      	ldr	r2, [pc, #504]	; (8001448 <__aeabi_ddiv+0x5d0>)
 8001250:	445a      	add	r2, fp
 8001252:	4091      	lsls	r1, r2
 8001254:	430d      	orrs	r5, r1
 8001256:	0029      	movs	r1, r5
 8001258:	1e4a      	subs	r2, r1, #1
 800125a:	4191      	sbcs	r1, r2
 800125c:	4319      	orrs	r1, r3
 800125e:	2307      	movs	r3, #7
 8001260:	001d      	movs	r5, r3
 8001262:	2200      	movs	r2, #0
 8001264:	400d      	ands	r5, r1
 8001266:	420b      	tst	r3, r1
 8001268:	d100      	bne.n	800126c <__aeabi_ddiv+0x3f4>
 800126a:	e0d0      	b.n	800140e <__aeabi_ddiv+0x596>
 800126c:	220f      	movs	r2, #15
 800126e:	2300      	movs	r3, #0
 8001270:	400a      	ands	r2, r1
 8001272:	2a04      	cmp	r2, #4
 8001274:	d100      	bne.n	8001278 <__aeabi_ddiv+0x400>
 8001276:	e0c7      	b.n	8001408 <__aeabi_ddiv+0x590>
 8001278:	1d0a      	adds	r2, r1, #4
 800127a:	428a      	cmp	r2, r1
 800127c:	4189      	sbcs	r1, r1
 800127e:	4249      	negs	r1, r1
 8001280:	185b      	adds	r3, r3, r1
 8001282:	0011      	movs	r1, r2
 8001284:	021a      	lsls	r2, r3, #8
 8001286:	d400      	bmi.n	800128a <__aeabi_ddiv+0x412>
 8001288:	e0be      	b.n	8001408 <__aeabi_ddiv+0x590>
 800128a:	2301      	movs	r3, #1
 800128c:	2200      	movs	r2, #0
 800128e:	2500      	movs	r5, #0
 8001290:	e649      	b.n	8000f26 <__aeabi_ddiv+0xae>
 8001292:	2280      	movs	r2, #128	; 0x80
 8001294:	4643      	mov	r3, r8
 8001296:	0312      	lsls	r2, r2, #12
 8001298:	4213      	tst	r3, r2
 800129a:	d008      	beq.n	80012ae <__aeabi_ddiv+0x436>
 800129c:	4214      	tst	r4, r2
 800129e:	d106      	bne.n	80012ae <__aeabi_ddiv+0x436>
 80012a0:	4322      	orrs	r2, r4
 80012a2:	0312      	lsls	r2, r2, #12
 80012a4:	46ba      	mov	sl, r7
 80012a6:	000d      	movs	r5, r1
 80012a8:	4b66      	ldr	r3, [pc, #408]	; (8001444 <__aeabi_ddiv+0x5cc>)
 80012aa:	0b12      	lsrs	r2, r2, #12
 80012ac:	e63b      	b.n	8000f26 <__aeabi_ddiv+0xae>
 80012ae:	2280      	movs	r2, #128	; 0x80
 80012b0:	4643      	mov	r3, r8
 80012b2:	0312      	lsls	r2, r2, #12
 80012b4:	431a      	orrs	r2, r3
 80012b6:	0312      	lsls	r2, r2, #12
 80012b8:	46b2      	mov	sl, r6
 80012ba:	4b62      	ldr	r3, [pc, #392]	; (8001444 <__aeabi_ddiv+0x5cc>)
 80012bc:	0b12      	lsrs	r2, r2, #12
 80012be:	e632      	b.n	8000f26 <__aeabi_ddiv+0xae>
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d100      	bne.n	80012c6 <__aeabi_ddiv+0x44e>
 80012c4:	e702      	b.n	80010cc <__aeabi_ddiv+0x254>
 80012c6:	19a6      	adds	r6, r4, r6
 80012c8:	1e6a      	subs	r2, r5, #1
 80012ca:	42a6      	cmp	r6, r4
 80012cc:	d200      	bcs.n	80012d0 <__aeabi_ddiv+0x458>
 80012ce:	e089      	b.n	80013e4 <__aeabi_ddiv+0x56c>
 80012d0:	4286      	cmp	r6, r0
 80012d2:	d200      	bcs.n	80012d6 <__aeabi_ddiv+0x45e>
 80012d4:	e09f      	b.n	8001416 <__aeabi_ddiv+0x59e>
 80012d6:	d100      	bne.n	80012da <__aeabi_ddiv+0x462>
 80012d8:	e0af      	b.n	800143a <__aeabi_ddiv+0x5c2>
 80012da:	0015      	movs	r5, r2
 80012dc:	e6f4      	b.n	80010c8 <__aeabi_ddiv+0x250>
 80012de:	42a9      	cmp	r1, r5
 80012e0:	d900      	bls.n	80012e4 <__aeabi_ddiv+0x46c>
 80012e2:	e63c      	b.n	8000f5e <__aeabi_ddiv+0xe6>
 80012e4:	4643      	mov	r3, r8
 80012e6:	07de      	lsls	r6, r3, #31
 80012e8:	0858      	lsrs	r0, r3, #1
 80012ea:	086b      	lsrs	r3, r5, #1
 80012ec:	431e      	orrs	r6, r3
 80012ee:	07ed      	lsls	r5, r5, #31
 80012f0:	e63c      	b.n	8000f6c <__aeabi_ddiv+0xf4>
 80012f2:	f001 f92f 	bl	8002554 <__clzsi2>
 80012f6:	0001      	movs	r1, r0
 80012f8:	0002      	movs	r2, r0
 80012fa:	3115      	adds	r1, #21
 80012fc:	3220      	adds	r2, #32
 80012fe:	291c      	cmp	r1, #28
 8001300:	dc00      	bgt.n	8001304 <__aeabi_ddiv+0x48c>
 8001302:	e72c      	b.n	800115e <__aeabi_ddiv+0x2e6>
 8001304:	464b      	mov	r3, r9
 8001306:	3808      	subs	r0, #8
 8001308:	4083      	lsls	r3, r0
 800130a:	2500      	movs	r5, #0
 800130c:	4698      	mov	r8, r3
 800130e:	e732      	b.n	8001176 <__aeabi_ddiv+0x2fe>
 8001310:	f001 f920 	bl	8002554 <__clzsi2>
 8001314:	0003      	movs	r3, r0
 8001316:	001a      	movs	r2, r3
 8001318:	3215      	adds	r2, #21
 800131a:	3020      	adds	r0, #32
 800131c:	2a1c      	cmp	r2, #28
 800131e:	dc00      	bgt.n	8001322 <__aeabi_ddiv+0x4aa>
 8001320:	e6ff      	b.n	8001122 <__aeabi_ddiv+0x2aa>
 8001322:	4654      	mov	r4, sl
 8001324:	3b08      	subs	r3, #8
 8001326:	2100      	movs	r1, #0
 8001328:	409c      	lsls	r4, r3
 800132a:	e705      	b.n	8001138 <__aeabi_ddiv+0x2c0>
 800132c:	1936      	adds	r6, r6, r4
 800132e:	3b01      	subs	r3, #1
 8001330:	42b4      	cmp	r4, r6
 8001332:	d900      	bls.n	8001336 <__aeabi_ddiv+0x4be>
 8001334:	e6a6      	b.n	8001084 <__aeabi_ddiv+0x20c>
 8001336:	42b2      	cmp	r2, r6
 8001338:	d800      	bhi.n	800133c <__aeabi_ddiv+0x4c4>
 800133a:	e6a3      	b.n	8001084 <__aeabi_ddiv+0x20c>
 800133c:	1e83      	subs	r3, r0, #2
 800133e:	1936      	adds	r6, r6, r4
 8001340:	e6a0      	b.n	8001084 <__aeabi_ddiv+0x20c>
 8001342:	1909      	adds	r1, r1, r4
 8001344:	3d01      	subs	r5, #1
 8001346:	428c      	cmp	r4, r1
 8001348:	d900      	bls.n	800134c <__aeabi_ddiv+0x4d4>
 800134a:	e68d      	b.n	8001068 <__aeabi_ddiv+0x1f0>
 800134c:	428a      	cmp	r2, r1
 800134e:	d800      	bhi.n	8001352 <__aeabi_ddiv+0x4da>
 8001350:	e68a      	b.n	8001068 <__aeabi_ddiv+0x1f0>
 8001352:	1e85      	subs	r5, r0, #2
 8001354:	1909      	adds	r1, r1, r4
 8001356:	e687      	b.n	8001068 <__aeabi_ddiv+0x1f0>
 8001358:	220f      	movs	r2, #15
 800135a:	402a      	ands	r2, r5
 800135c:	2a04      	cmp	r2, #4
 800135e:	d100      	bne.n	8001362 <__aeabi_ddiv+0x4ea>
 8001360:	e6bc      	b.n	80010dc <__aeabi_ddiv+0x264>
 8001362:	1d29      	adds	r1, r5, #4
 8001364:	42a9      	cmp	r1, r5
 8001366:	41ad      	sbcs	r5, r5
 8001368:	426d      	negs	r5, r5
 800136a:	08c9      	lsrs	r1, r1, #3
 800136c:	44a8      	add	r8, r5
 800136e:	e6b6      	b.n	80010de <__aeabi_ddiv+0x266>
 8001370:	42af      	cmp	r7, r5
 8001372:	d900      	bls.n	8001376 <__aeabi_ddiv+0x4fe>
 8001374:	e662      	b.n	800103c <__aeabi_ddiv+0x1c4>
 8001376:	4281      	cmp	r1, r0
 8001378:	d804      	bhi.n	8001384 <__aeabi_ddiv+0x50c>
 800137a:	d000      	beq.n	800137e <__aeabi_ddiv+0x506>
 800137c:	e65e      	b.n	800103c <__aeabi_ddiv+0x1c4>
 800137e:	42ae      	cmp	r6, r5
 8001380:	d800      	bhi.n	8001384 <__aeabi_ddiv+0x50c>
 8001382:	e65b      	b.n	800103c <__aeabi_ddiv+0x1c4>
 8001384:	2302      	movs	r3, #2
 8001386:	425b      	negs	r3, r3
 8001388:	469c      	mov	ip, r3
 800138a:	9b00      	ldr	r3, [sp, #0]
 800138c:	44e0      	add	r8, ip
 800138e:	469c      	mov	ip, r3
 8001390:	4465      	add	r5, ip
 8001392:	429d      	cmp	r5, r3
 8001394:	419b      	sbcs	r3, r3
 8001396:	425b      	negs	r3, r3
 8001398:	191b      	adds	r3, r3, r4
 800139a:	18c0      	adds	r0, r0, r3
 800139c:	e64f      	b.n	800103e <__aeabi_ddiv+0x1c6>
 800139e:	42b2      	cmp	r2, r6
 80013a0:	d800      	bhi.n	80013a4 <__aeabi_ddiv+0x52c>
 80013a2:	e612      	b.n	8000fca <__aeabi_ddiv+0x152>
 80013a4:	1e83      	subs	r3, r0, #2
 80013a6:	1936      	adds	r6, r6, r4
 80013a8:	e60f      	b.n	8000fca <__aeabi_ddiv+0x152>
 80013aa:	428a      	cmp	r2, r1
 80013ac:	d800      	bhi.n	80013b0 <__aeabi_ddiv+0x538>
 80013ae:	e5fa      	b.n	8000fa6 <__aeabi_ddiv+0x12e>
 80013b0:	1e83      	subs	r3, r0, #2
 80013b2:	4698      	mov	r8, r3
 80013b4:	1909      	adds	r1, r1, r4
 80013b6:	e5f6      	b.n	8000fa6 <__aeabi_ddiv+0x12e>
 80013b8:	4b24      	ldr	r3, [pc, #144]	; (800144c <__aeabi_ddiv+0x5d4>)
 80013ba:	0028      	movs	r0, r5
 80013bc:	445b      	add	r3, fp
 80013be:	4641      	mov	r1, r8
 80013c0:	409d      	lsls	r5, r3
 80013c2:	4099      	lsls	r1, r3
 80013c4:	40d0      	lsrs	r0, r2
 80013c6:	1e6b      	subs	r3, r5, #1
 80013c8:	419d      	sbcs	r5, r3
 80013ca:	4643      	mov	r3, r8
 80013cc:	4301      	orrs	r1, r0
 80013ce:	4329      	orrs	r1, r5
 80013d0:	40d3      	lsrs	r3, r2
 80013d2:	074a      	lsls	r2, r1, #29
 80013d4:	d100      	bne.n	80013d8 <__aeabi_ddiv+0x560>
 80013d6:	e755      	b.n	8001284 <__aeabi_ddiv+0x40c>
 80013d8:	220f      	movs	r2, #15
 80013da:	400a      	ands	r2, r1
 80013dc:	2a04      	cmp	r2, #4
 80013de:	d000      	beq.n	80013e2 <__aeabi_ddiv+0x56a>
 80013e0:	e74a      	b.n	8001278 <__aeabi_ddiv+0x400>
 80013e2:	e74f      	b.n	8001284 <__aeabi_ddiv+0x40c>
 80013e4:	0015      	movs	r5, r2
 80013e6:	4286      	cmp	r6, r0
 80013e8:	d000      	beq.n	80013ec <__aeabi_ddiv+0x574>
 80013ea:	e66d      	b.n	80010c8 <__aeabi_ddiv+0x250>
 80013ec:	9a00      	ldr	r2, [sp, #0]
 80013ee:	429a      	cmp	r2, r3
 80013f0:	d000      	beq.n	80013f4 <__aeabi_ddiv+0x57c>
 80013f2:	e669      	b.n	80010c8 <__aeabi_ddiv+0x250>
 80013f4:	e66a      	b.n	80010cc <__aeabi_ddiv+0x254>
 80013f6:	4b16      	ldr	r3, [pc, #88]	; (8001450 <__aeabi_ddiv+0x5d8>)
 80013f8:	445b      	add	r3, fp
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	dc00      	bgt.n	8001400 <__aeabi_ddiv+0x588>
 80013fe:	e713      	b.n	8001228 <__aeabi_ddiv+0x3b0>
 8001400:	2501      	movs	r5, #1
 8001402:	2100      	movs	r1, #0
 8001404:	44a8      	add	r8, r5
 8001406:	e66a      	b.n	80010de <__aeabi_ddiv+0x266>
 8001408:	075d      	lsls	r5, r3, #29
 800140a:	025b      	lsls	r3, r3, #9
 800140c:	0b1a      	lsrs	r2, r3, #12
 800140e:	08c9      	lsrs	r1, r1, #3
 8001410:	2300      	movs	r3, #0
 8001412:	430d      	orrs	r5, r1
 8001414:	e587      	b.n	8000f26 <__aeabi_ddiv+0xae>
 8001416:	9900      	ldr	r1, [sp, #0]
 8001418:	3d02      	subs	r5, #2
 800141a:	004a      	lsls	r2, r1, #1
 800141c:	428a      	cmp	r2, r1
 800141e:	41bf      	sbcs	r7, r7
 8001420:	427f      	negs	r7, r7
 8001422:	193f      	adds	r7, r7, r4
 8001424:	19f6      	adds	r6, r6, r7
 8001426:	9200      	str	r2, [sp, #0]
 8001428:	e7dd      	b.n	80013e6 <__aeabi_ddiv+0x56e>
 800142a:	2280      	movs	r2, #128	; 0x80
 800142c:	4643      	mov	r3, r8
 800142e:	0312      	lsls	r2, r2, #12
 8001430:	431a      	orrs	r2, r3
 8001432:	0312      	lsls	r2, r2, #12
 8001434:	4b03      	ldr	r3, [pc, #12]	; (8001444 <__aeabi_ddiv+0x5cc>)
 8001436:	0b12      	lsrs	r2, r2, #12
 8001438:	e575      	b.n	8000f26 <__aeabi_ddiv+0xae>
 800143a:	9900      	ldr	r1, [sp, #0]
 800143c:	4299      	cmp	r1, r3
 800143e:	d3ea      	bcc.n	8001416 <__aeabi_ddiv+0x59e>
 8001440:	0015      	movs	r5, r2
 8001442:	e7d3      	b.n	80013ec <__aeabi_ddiv+0x574>
 8001444:	000007ff 	.word	0x000007ff
 8001448:	0000043e 	.word	0x0000043e
 800144c:	0000041e 	.word	0x0000041e
 8001450:	000003ff 	.word	0x000003ff

08001454 <__eqdf2>:
 8001454:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001456:	464e      	mov	r6, r9
 8001458:	4645      	mov	r5, r8
 800145a:	46de      	mov	lr, fp
 800145c:	4657      	mov	r7, sl
 800145e:	4690      	mov	r8, r2
 8001460:	b5e0      	push	{r5, r6, r7, lr}
 8001462:	0017      	movs	r7, r2
 8001464:	031a      	lsls	r2, r3, #12
 8001466:	0b12      	lsrs	r2, r2, #12
 8001468:	0005      	movs	r5, r0
 800146a:	4684      	mov	ip, r0
 800146c:	4819      	ldr	r0, [pc, #100]	; (80014d4 <__eqdf2+0x80>)
 800146e:	030e      	lsls	r6, r1, #12
 8001470:	004c      	lsls	r4, r1, #1
 8001472:	4691      	mov	r9, r2
 8001474:	005a      	lsls	r2, r3, #1
 8001476:	0fdb      	lsrs	r3, r3, #31
 8001478:	469b      	mov	fp, r3
 800147a:	0b36      	lsrs	r6, r6, #12
 800147c:	0d64      	lsrs	r4, r4, #21
 800147e:	0fc9      	lsrs	r1, r1, #31
 8001480:	0d52      	lsrs	r2, r2, #21
 8001482:	4284      	cmp	r4, r0
 8001484:	d019      	beq.n	80014ba <__eqdf2+0x66>
 8001486:	4282      	cmp	r2, r0
 8001488:	d010      	beq.n	80014ac <__eqdf2+0x58>
 800148a:	2001      	movs	r0, #1
 800148c:	4294      	cmp	r4, r2
 800148e:	d10e      	bne.n	80014ae <__eqdf2+0x5a>
 8001490:	454e      	cmp	r6, r9
 8001492:	d10c      	bne.n	80014ae <__eqdf2+0x5a>
 8001494:	2001      	movs	r0, #1
 8001496:	45c4      	cmp	ip, r8
 8001498:	d109      	bne.n	80014ae <__eqdf2+0x5a>
 800149a:	4559      	cmp	r1, fp
 800149c:	d017      	beq.n	80014ce <__eqdf2+0x7a>
 800149e:	2c00      	cmp	r4, #0
 80014a0:	d105      	bne.n	80014ae <__eqdf2+0x5a>
 80014a2:	0030      	movs	r0, r6
 80014a4:	4328      	orrs	r0, r5
 80014a6:	1e43      	subs	r3, r0, #1
 80014a8:	4198      	sbcs	r0, r3
 80014aa:	e000      	b.n	80014ae <__eqdf2+0x5a>
 80014ac:	2001      	movs	r0, #1
 80014ae:	bcf0      	pop	{r4, r5, r6, r7}
 80014b0:	46bb      	mov	fp, r7
 80014b2:	46b2      	mov	sl, r6
 80014b4:	46a9      	mov	r9, r5
 80014b6:	46a0      	mov	r8, r4
 80014b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014ba:	0033      	movs	r3, r6
 80014bc:	2001      	movs	r0, #1
 80014be:	432b      	orrs	r3, r5
 80014c0:	d1f5      	bne.n	80014ae <__eqdf2+0x5a>
 80014c2:	42a2      	cmp	r2, r4
 80014c4:	d1f3      	bne.n	80014ae <__eqdf2+0x5a>
 80014c6:	464b      	mov	r3, r9
 80014c8:	433b      	orrs	r3, r7
 80014ca:	d1f0      	bne.n	80014ae <__eqdf2+0x5a>
 80014cc:	e7e2      	b.n	8001494 <__eqdf2+0x40>
 80014ce:	2000      	movs	r0, #0
 80014d0:	e7ed      	b.n	80014ae <__eqdf2+0x5a>
 80014d2:	46c0      	nop			; (mov r8, r8)
 80014d4:	000007ff 	.word	0x000007ff

080014d8 <__gedf2>:
 80014d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014da:	4647      	mov	r7, r8
 80014dc:	46ce      	mov	lr, r9
 80014de:	0004      	movs	r4, r0
 80014e0:	0018      	movs	r0, r3
 80014e2:	0016      	movs	r6, r2
 80014e4:	031b      	lsls	r3, r3, #12
 80014e6:	0b1b      	lsrs	r3, r3, #12
 80014e8:	4d2d      	ldr	r5, [pc, #180]	; (80015a0 <__gedf2+0xc8>)
 80014ea:	004a      	lsls	r2, r1, #1
 80014ec:	4699      	mov	r9, r3
 80014ee:	b580      	push	{r7, lr}
 80014f0:	0043      	lsls	r3, r0, #1
 80014f2:	030f      	lsls	r7, r1, #12
 80014f4:	46a4      	mov	ip, r4
 80014f6:	46b0      	mov	r8, r6
 80014f8:	0b3f      	lsrs	r7, r7, #12
 80014fa:	0d52      	lsrs	r2, r2, #21
 80014fc:	0fc9      	lsrs	r1, r1, #31
 80014fe:	0d5b      	lsrs	r3, r3, #21
 8001500:	0fc0      	lsrs	r0, r0, #31
 8001502:	42aa      	cmp	r2, r5
 8001504:	d021      	beq.n	800154a <__gedf2+0x72>
 8001506:	42ab      	cmp	r3, r5
 8001508:	d013      	beq.n	8001532 <__gedf2+0x5a>
 800150a:	2a00      	cmp	r2, #0
 800150c:	d122      	bne.n	8001554 <__gedf2+0x7c>
 800150e:	433c      	orrs	r4, r7
 8001510:	2b00      	cmp	r3, #0
 8001512:	d102      	bne.n	800151a <__gedf2+0x42>
 8001514:	464d      	mov	r5, r9
 8001516:	432e      	orrs	r6, r5
 8001518:	d022      	beq.n	8001560 <__gedf2+0x88>
 800151a:	2c00      	cmp	r4, #0
 800151c:	d010      	beq.n	8001540 <__gedf2+0x68>
 800151e:	4281      	cmp	r1, r0
 8001520:	d022      	beq.n	8001568 <__gedf2+0x90>
 8001522:	2002      	movs	r0, #2
 8001524:	3901      	subs	r1, #1
 8001526:	4008      	ands	r0, r1
 8001528:	3801      	subs	r0, #1
 800152a:	bcc0      	pop	{r6, r7}
 800152c:	46b9      	mov	r9, r7
 800152e:	46b0      	mov	r8, r6
 8001530:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001532:	464d      	mov	r5, r9
 8001534:	432e      	orrs	r6, r5
 8001536:	d129      	bne.n	800158c <__gedf2+0xb4>
 8001538:	2a00      	cmp	r2, #0
 800153a:	d1f0      	bne.n	800151e <__gedf2+0x46>
 800153c:	433c      	orrs	r4, r7
 800153e:	d1ee      	bne.n	800151e <__gedf2+0x46>
 8001540:	2800      	cmp	r0, #0
 8001542:	d1f2      	bne.n	800152a <__gedf2+0x52>
 8001544:	2001      	movs	r0, #1
 8001546:	4240      	negs	r0, r0
 8001548:	e7ef      	b.n	800152a <__gedf2+0x52>
 800154a:	003d      	movs	r5, r7
 800154c:	4325      	orrs	r5, r4
 800154e:	d11d      	bne.n	800158c <__gedf2+0xb4>
 8001550:	4293      	cmp	r3, r2
 8001552:	d0ee      	beq.n	8001532 <__gedf2+0x5a>
 8001554:	2b00      	cmp	r3, #0
 8001556:	d1e2      	bne.n	800151e <__gedf2+0x46>
 8001558:	464c      	mov	r4, r9
 800155a:	4326      	orrs	r6, r4
 800155c:	d1df      	bne.n	800151e <__gedf2+0x46>
 800155e:	e7e0      	b.n	8001522 <__gedf2+0x4a>
 8001560:	2000      	movs	r0, #0
 8001562:	2c00      	cmp	r4, #0
 8001564:	d0e1      	beq.n	800152a <__gedf2+0x52>
 8001566:	e7dc      	b.n	8001522 <__gedf2+0x4a>
 8001568:	429a      	cmp	r2, r3
 800156a:	dc0a      	bgt.n	8001582 <__gedf2+0xaa>
 800156c:	dbe8      	blt.n	8001540 <__gedf2+0x68>
 800156e:	454f      	cmp	r7, r9
 8001570:	d8d7      	bhi.n	8001522 <__gedf2+0x4a>
 8001572:	d00e      	beq.n	8001592 <__gedf2+0xba>
 8001574:	2000      	movs	r0, #0
 8001576:	454f      	cmp	r7, r9
 8001578:	d2d7      	bcs.n	800152a <__gedf2+0x52>
 800157a:	2900      	cmp	r1, #0
 800157c:	d0e2      	beq.n	8001544 <__gedf2+0x6c>
 800157e:	0008      	movs	r0, r1
 8001580:	e7d3      	b.n	800152a <__gedf2+0x52>
 8001582:	4243      	negs	r3, r0
 8001584:	4158      	adcs	r0, r3
 8001586:	0040      	lsls	r0, r0, #1
 8001588:	3801      	subs	r0, #1
 800158a:	e7ce      	b.n	800152a <__gedf2+0x52>
 800158c:	2002      	movs	r0, #2
 800158e:	4240      	negs	r0, r0
 8001590:	e7cb      	b.n	800152a <__gedf2+0x52>
 8001592:	45c4      	cmp	ip, r8
 8001594:	d8c5      	bhi.n	8001522 <__gedf2+0x4a>
 8001596:	2000      	movs	r0, #0
 8001598:	45c4      	cmp	ip, r8
 800159a:	d2c6      	bcs.n	800152a <__gedf2+0x52>
 800159c:	e7ed      	b.n	800157a <__gedf2+0xa2>
 800159e:	46c0      	nop			; (mov r8, r8)
 80015a0:	000007ff 	.word	0x000007ff

080015a4 <__ledf2>:
 80015a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015a6:	4647      	mov	r7, r8
 80015a8:	46ce      	mov	lr, r9
 80015aa:	0004      	movs	r4, r0
 80015ac:	0018      	movs	r0, r3
 80015ae:	0016      	movs	r6, r2
 80015b0:	031b      	lsls	r3, r3, #12
 80015b2:	0b1b      	lsrs	r3, r3, #12
 80015b4:	4d2c      	ldr	r5, [pc, #176]	; (8001668 <__ledf2+0xc4>)
 80015b6:	004a      	lsls	r2, r1, #1
 80015b8:	4699      	mov	r9, r3
 80015ba:	b580      	push	{r7, lr}
 80015bc:	0043      	lsls	r3, r0, #1
 80015be:	030f      	lsls	r7, r1, #12
 80015c0:	46a4      	mov	ip, r4
 80015c2:	46b0      	mov	r8, r6
 80015c4:	0b3f      	lsrs	r7, r7, #12
 80015c6:	0d52      	lsrs	r2, r2, #21
 80015c8:	0fc9      	lsrs	r1, r1, #31
 80015ca:	0d5b      	lsrs	r3, r3, #21
 80015cc:	0fc0      	lsrs	r0, r0, #31
 80015ce:	42aa      	cmp	r2, r5
 80015d0:	d00d      	beq.n	80015ee <__ledf2+0x4a>
 80015d2:	42ab      	cmp	r3, r5
 80015d4:	d010      	beq.n	80015f8 <__ledf2+0x54>
 80015d6:	2a00      	cmp	r2, #0
 80015d8:	d127      	bne.n	800162a <__ledf2+0x86>
 80015da:	433c      	orrs	r4, r7
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d111      	bne.n	8001604 <__ledf2+0x60>
 80015e0:	464d      	mov	r5, r9
 80015e2:	432e      	orrs	r6, r5
 80015e4:	d10e      	bne.n	8001604 <__ledf2+0x60>
 80015e6:	2000      	movs	r0, #0
 80015e8:	2c00      	cmp	r4, #0
 80015ea:	d015      	beq.n	8001618 <__ledf2+0x74>
 80015ec:	e00e      	b.n	800160c <__ledf2+0x68>
 80015ee:	003d      	movs	r5, r7
 80015f0:	4325      	orrs	r5, r4
 80015f2:	d110      	bne.n	8001616 <__ledf2+0x72>
 80015f4:	4293      	cmp	r3, r2
 80015f6:	d118      	bne.n	800162a <__ledf2+0x86>
 80015f8:	464d      	mov	r5, r9
 80015fa:	432e      	orrs	r6, r5
 80015fc:	d10b      	bne.n	8001616 <__ledf2+0x72>
 80015fe:	2a00      	cmp	r2, #0
 8001600:	d102      	bne.n	8001608 <__ledf2+0x64>
 8001602:	433c      	orrs	r4, r7
 8001604:	2c00      	cmp	r4, #0
 8001606:	d00b      	beq.n	8001620 <__ledf2+0x7c>
 8001608:	4281      	cmp	r1, r0
 800160a:	d014      	beq.n	8001636 <__ledf2+0x92>
 800160c:	2002      	movs	r0, #2
 800160e:	3901      	subs	r1, #1
 8001610:	4008      	ands	r0, r1
 8001612:	3801      	subs	r0, #1
 8001614:	e000      	b.n	8001618 <__ledf2+0x74>
 8001616:	2002      	movs	r0, #2
 8001618:	bcc0      	pop	{r6, r7}
 800161a:	46b9      	mov	r9, r7
 800161c:	46b0      	mov	r8, r6
 800161e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001620:	2800      	cmp	r0, #0
 8001622:	d1f9      	bne.n	8001618 <__ledf2+0x74>
 8001624:	2001      	movs	r0, #1
 8001626:	4240      	negs	r0, r0
 8001628:	e7f6      	b.n	8001618 <__ledf2+0x74>
 800162a:	2b00      	cmp	r3, #0
 800162c:	d1ec      	bne.n	8001608 <__ledf2+0x64>
 800162e:	464c      	mov	r4, r9
 8001630:	4326      	orrs	r6, r4
 8001632:	d1e9      	bne.n	8001608 <__ledf2+0x64>
 8001634:	e7ea      	b.n	800160c <__ledf2+0x68>
 8001636:	429a      	cmp	r2, r3
 8001638:	dd04      	ble.n	8001644 <__ledf2+0xa0>
 800163a:	4243      	negs	r3, r0
 800163c:	4158      	adcs	r0, r3
 800163e:	0040      	lsls	r0, r0, #1
 8001640:	3801      	subs	r0, #1
 8001642:	e7e9      	b.n	8001618 <__ledf2+0x74>
 8001644:	429a      	cmp	r2, r3
 8001646:	dbeb      	blt.n	8001620 <__ledf2+0x7c>
 8001648:	454f      	cmp	r7, r9
 800164a:	d8df      	bhi.n	800160c <__ledf2+0x68>
 800164c:	d006      	beq.n	800165c <__ledf2+0xb8>
 800164e:	2000      	movs	r0, #0
 8001650:	454f      	cmp	r7, r9
 8001652:	d2e1      	bcs.n	8001618 <__ledf2+0x74>
 8001654:	2900      	cmp	r1, #0
 8001656:	d0e5      	beq.n	8001624 <__ledf2+0x80>
 8001658:	0008      	movs	r0, r1
 800165a:	e7dd      	b.n	8001618 <__ledf2+0x74>
 800165c:	45c4      	cmp	ip, r8
 800165e:	d8d5      	bhi.n	800160c <__ledf2+0x68>
 8001660:	2000      	movs	r0, #0
 8001662:	45c4      	cmp	ip, r8
 8001664:	d2d8      	bcs.n	8001618 <__ledf2+0x74>
 8001666:	e7f5      	b.n	8001654 <__ledf2+0xb0>
 8001668:	000007ff 	.word	0x000007ff

0800166c <__aeabi_dmul>:
 800166c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800166e:	4645      	mov	r5, r8
 8001670:	46de      	mov	lr, fp
 8001672:	4657      	mov	r7, sl
 8001674:	464e      	mov	r6, r9
 8001676:	b5e0      	push	{r5, r6, r7, lr}
 8001678:	001f      	movs	r7, r3
 800167a:	030b      	lsls	r3, r1, #12
 800167c:	0b1b      	lsrs	r3, r3, #12
 800167e:	469b      	mov	fp, r3
 8001680:	004d      	lsls	r5, r1, #1
 8001682:	0fcb      	lsrs	r3, r1, #31
 8001684:	0004      	movs	r4, r0
 8001686:	4691      	mov	r9, r2
 8001688:	4698      	mov	r8, r3
 800168a:	b087      	sub	sp, #28
 800168c:	0d6d      	lsrs	r5, r5, #21
 800168e:	d100      	bne.n	8001692 <__aeabi_dmul+0x26>
 8001690:	e1cd      	b.n	8001a2e <__aeabi_dmul+0x3c2>
 8001692:	4bce      	ldr	r3, [pc, #824]	; (80019cc <__aeabi_dmul+0x360>)
 8001694:	429d      	cmp	r5, r3
 8001696:	d100      	bne.n	800169a <__aeabi_dmul+0x2e>
 8001698:	e1e9      	b.n	8001a6e <__aeabi_dmul+0x402>
 800169a:	465a      	mov	r2, fp
 800169c:	0f43      	lsrs	r3, r0, #29
 800169e:	00d2      	lsls	r2, r2, #3
 80016a0:	4313      	orrs	r3, r2
 80016a2:	2280      	movs	r2, #128	; 0x80
 80016a4:	0412      	lsls	r2, r2, #16
 80016a6:	431a      	orrs	r2, r3
 80016a8:	00c3      	lsls	r3, r0, #3
 80016aa:	469a      	mov	sl, r3
 80016ac:	4bc8      	ldr	r3, [pc, #800]	; (80019d0 <__aeabi_dmul+0x364>)
 80016ae:	4693      	mov	fp, r2
 80016b0:	469c      	mov	ip, r3
 80016b2:	2300      	movs	r3, #0
 80016b4:	2600      	movs	r6, #0
 80016b6:	4465      	add	r5, ip
 80016b8:	9300      	str	r3, [sp, #0]
 80016ba:	033c      	lsls	r4, r7, #12
 80016bc:	007b      	lsls	r3, r7, #1
 80016be:	4648      	mov	r0, r9
 80016c0:	0b24      	lsrs	r4, r4, #12
 80016c2:	0d5b      	lsrs	r3, r3, #21
 80016c4:	0fff      	lsrs	r7, r7, #31
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d100      	bne.n	80016cc <__aeabi_dmul+0x60>
 80016ca:	e189      	b.n	80019e0 <__aeabi_dmul+0x374>
 80016cc:	4abf      	ldr	r2, [pc, #764]	; (80019cc <__aeabi_dmul+0x360>)
 80016ce:	4293      	cmp	r3, r2
 80016d0:	d019      	beq.n	8001706 <__aeabi_dmul+0x9a>
 80016d2:	0f42      	lsrs	r2, r0, #29
 80016d4:	00e4      	lsls	r4, r4, #3
 80016d6:	4322      	orrs	r2, r4
 80016d8:	2480      	movs	r4, #128	; 0x80
 80016da:	0424      	lsls	r4, r4, #16
 80016dc:	4314      	orrs	r4, r2
 80016de:	4abc      	ldr	r2, [pc, #752]	; (80019d0 <__aeabi_dmul+0x364>)
 80016e0:	2100      	movs	r1, #0
 80016e2:	4694      	mov	ip, r2
 80016e4:	4642      	mov	r2, r8
 80016e6:	4463      	add	r3, ip
 80016e8:	195b      	adds	r3, r3, r5
 80016ea:	9301      	str	r3, [sp, #4]
 80016ec:	9b01      	ldr	r3, [sp, #4]
 80016ee:	407a      	eors	r2, r7
 80016f0:	3301      	adds	r3, #1
 80016f2:	00c0      	lsls	r0, r0, #3
 80016f4:	b2d2      	uxtb	r2, r2
 80016f6:	9302      	str	r3, [sp, #8]
 80016f8:	2e0a      	cmp	r6, #10
 80016fa:	dd1c      	ble.n	8001736 <__aeabi_dmul+0xca>
 80016fc:	003a      	movs	r2, r7
 80016fe:	2e0b      	cmp	r6, #11
 8001700:	d05e      	beq.n	80017c0 <__aeabi_dmul+0x154>
 8001702:	4647      	mov	r7, r8
 8001704:	e056      	b.n	80017b4 <__aeabi_dmul+0x148>
 8001706:	4649      	mov	r1, r9
 8001708:	4bb0      	ldr	r3, [pc, #704]	; (80019cc <__aeabi_dmul+0x360>)
 800170a:	4321      	orrs	r1, r4
 800170c:	18eb      	adds	r3, r5, r3
 800170e:	9301      	str	r3, [sp, #4]
 8001710:	2900      	cmp	r1, #0
 8001712:	d12a      	bne.n	800176a <__aeabi_dmul+0xfe>
 8001714:	2080      	movs	r0, #128	; 0x80
 8001716:	2202      	movs	r2, #2
 8001718:	0100      	lsls	r0, r0, #4
 800171a:	002b      	movs	r3, r5
 800171c:	4684      	mov	ip, r0
 800171e:	4316      	orrs	r6, r2
 8001720:	4642      	mov	r2, r8
 8001722:	4463      	add	r3, ip
 8001724:	407a      	eors	r2, r7
 8001726:	b2d2      	uxtb	r2, r2
 8001728:	9302      	str	r3, [sp, #8]
 800172a:	2e0a      	cmp	r6, #10
 800172c:	dd00      	ble.n	8001730 <__aeabi_dmul+0xc4>
 800172e:	e231      	b.n	8001b94 <__aeabi_dmul+0x528>
 8001730:	2000      	movs	r0, #0
 8001732:	2400      	movs	r4, #0
 8001734:	2102      	movs	r1, #2
 8001736:	2e02      	cmp	r6, #2
 8001738:	dc26      	bgt.n	8001788 <__aeabi_dmul+0x11c>
 800173a:	3e01      	subs	r6, #1
 800173c:	2e01      	cmp	r6, #1
 800173e:	d852      	bhi.n	80017e6 <__aeabi_dmul+0x17a>
 8001740:	2902      	cmp	r1, #2
 8001742:	d04c      	beq.n	80017de <__aeabi_dmul+0x172>
 8001744:	2901      	cmp	r1, #1
 8001746:	d000      	beq.n	800174a <__aeabi_dmul+0xde>
 8001748:	e118      	b.n	800197c <__aeabi_dmul+0x310>
 800174a:	2300      	movs	r3, #0
 800174c:	2400      	movs	r4, #0
 800174e:	2500      	movs	r5, #0
 8001750:	051b      	lsls	r3, r3, #20
 8001752:	4323      	orrs	r3, r4
 8001754:	07d2      	lsls	r2, r2, #31
 8001756:	4313      	orrs	r3, r2
 8001758:	0028      	movs	r0, r5
 800175a:	0019      	movs	r1, r3
 800175c:	b007      	add	sp, #28
 800175e:	bcf0      	pop	{r4, r5, r6, r7}
 8001760:	46bb      	mov	fp, r7
 8001762:	46b2      	mov	sl, r6
 8001764:	46a9      	mov	r9, r5
 8001766:	46a0      	mov	r8, r4
 8001768:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800176a:	2180      	movs	r1, #128	; 0x80
 800176c:	2203      	movs	r2, #3
 800176e:	0109      	lsls	r1, r1, #4
 8001770:	002b      	movs	r3, r5
 8001772:	468c      	mov	ip, r1
 8001774:	4316      	orrs	r6, r2
 8001776:	4642      	mov	r2, r8
 8001778:	4463      	add	r3, ip
 800177a:	407a      	eors	r2, r7
 800177c:	b2d2      	uxtb	r2, r2
 800177e:	9302      	str	r3, [sp, #8]
 8001780:	2e0a      	cmp	r6, #10
 8001782:	dd00      	ble.n	8001786 <__aeabi_dmul+0x11a>
 8001784:	e228      	b.n	8001bd8 <__aeabi_dmul+0x56c>
 8001786:	2103      	movs	r1, #3
 8001788:	2501      	movs	r5, #1
 800178a:	40b5      	lsls	r5, r6
 800178c:	46ac      	mov	ip, r5
 800178e:	26a6      	movs	r6, #166	; 0xa6
 8001790:	4663      	mov	r3, ip
 8001792:	00f6      	lsls	r6, r6, #3
 8001794:	4035      	ands	r5, r6
 8001796:	4233      	tst	r3, r6
 8001798:	d10b      	bne.n	80017b2 <__aeabi_dmul+0x146>
 800179a:	2690      	movs	r6, #144	; 0x90
 800179c:	00b6      	lsls	r6, r6, #2
 800179e:	4233      	tst	r3, r6
 80017a0:	d118      	bne.n	80017d4 <__aeabi_dmul+0x168>
 80017a2:	3eb9      	subs	r6, #185	; 0xb9
 80017a4:	3eff      	subs	r6, #255	; 0xff
 80017a6:	421e      	tst	r6, r3
 80017a8:	d01d      	beq.n	80017e6 <__aeabi_dmul+0x17a>
 80017aa:	46a3      	mov	fp, r4
 80017ac:	4682      	mov	sl, r0
 80017ae:	9100      	str	r1, [sp, #0]
 80017b0:	e000      	b.n	80017b4 <__aeabi_dmul+0x148>
 80017b2:	0017      	movs	r7, r2
 80017b4:	9900      	ldr	r1, [sp, #0]
 80017b6:	003a      	movs	r2, r7
 80017b8:	2902      	cmp	r1, #2
 80017ba:	d010      	beq.n	80017de <__aeabi_dmul+0x172>
 80017bc:	465c      	mov	r4, fp
 80017be:	4650      	mov	r0, sl
 80017c0:	2903      	cmp	r1, #3
 80017c2:	d1bf      	bne.n	8001744 <__aeabi_dmul+0xd8>
 80017c4:	2380      	movs	r3, #128	; 0x80
 80017c6:	031b      	lsls	r3, r3, #12
 80017c8:	431c      	orrs	r4, r3
 80017ca:	0324      	lsls	r4, r4, #12
 80017cc:	0005      	movs	r5, r0
 80017ce:	4b7f      	ldr	r3, [pc, #508]	; (80019cc <__aeabi_dmul+0x360>)
 80017d0:	0b24      	lsrs	r4, r4, #12
 80017d2:	e7bd      	b.n	8001750 <__aeabi_dmul+0xe4>
 80017d4:	2480      	movs	r4, #128	; 0x80
 80017d6:	2200      	movs	r2, #0
 80017d8:	4b7c      	ldr	r3, [pc, #496]	; (80019cc <__aeabi_dmul+0x360>)
 80017da:	0324      	lsls	r4, r4, #12
 80017dc:	e7b8      	b.n	8001750 <__aeabi_dmul+0xe4>
 80017de:	2400      	movs	r4, #0
 80017e0:	2500      	movs	r5, #0
 80017e2:	4b7a      	ldr	r3, [pc, #488]	; (80019cc <__aeabi_dmul+0x360>)
 80017e4:	e7b4      	b.n	8001750 <__aeabi_dmul+0xe4>
 80017e6:	4653      	mov	r3, sl
 80017e8:	041e      	lsls	r6, r3, #16
 80017ea:	0c36      	lsrs	r6, r6, #16
 80017ec:	0c1f      	lsrs	r7, r3, #16
 80017ee:	0033      	movs	r3, r6
 80017f0:	0c01      	lsrs	r1, r0, #16
 80017f2:	0400      	lsls	r0, r0, #16
 80017f4:	0c00      	lsrs	r0, r0, #16
 80017f6:	4343      	muls	r3, r0
 80017f8:	4698      	mov	r8, r3
 80017fa:	0003      	movs	r3, r0
 80017fc:	437b      	muls	r3, r7
 80017fe:	4699      	mov	r9, r3
 8001800:	0033      	movs	r3, r6
 8001802:	434b      	muls	r3, r1
 8001804:	469c      	mov	ip, r3
 8001806:	4643      	mov	r3, r8
 8001808:	000d      	movs	r5, r1
 800180a:	0c1b      	lsrs	r3, r3, #16
 800180c:	469a      	mov	sl, r3
 800180e:	437d      	muls	r5, r7
 8001810:	44cc      	add	ip, r9
 8001812:	44d4      	add	ip, sl
 8001814:	9500      	str	r5, [sp, #0]
 8001816:	45e1      	cmp	r9, ip
 8001818:	d904      	bls.n	8001824 <__aeabi_dmul+0x1b8>
 800181a:	2380      	movs	r3, #128	; 0x80
 800181c:	025b      	lsls	r3, r3, #9
 800181e:	4699      	mov	r9, r3
 8001820:	444d      	add	r5, r9
 8001822:	9500      	str	r5, [sp, #0]
 8001824:	4663      	mov	r3, ip
 8001826:	0c1b      	lsrs	r3, r3, #16
 8001828:	001d      	movs	r5, r3
 800182a:	4663      	mov	r3, ip
 800182c:	041b      	lsls	r3, r3, #16
 800182e:	469c      	mov	ip, r3
 8001830:	4643      	mov	r3, r8
 8001832:	041b      	lsls	r3, r3, #16
 8001834:	0c1b      	lsrs	r3, r3, #16
 8001836:	4698      	mov	r8, r3
 8001838:	4663      	mov	r3, ip
 800183a:	4443      	add	r3, r8
 800183c:	9303      	str	r3, [sp, #12]
 800183e:	0c23      	lsrs	r3, r4, #16
 8001840:	4698      	mov	r8, r3
 8001842:	0033      	movs	r3, r6
 8001844:	0424      	lsls	r4, r4, #16
 8001846:	0c24      	lsrs	r4, r4, #16
 8001848:	4363      	muls	r3, r4
 800184a:	469c      	mov	ip, r3
 800184c:	0023      	movs	r3, r4
 800184e:	437b      	muls	r3, r7
 8001850:	4699      	mov	r9, r3
 8001852:	4643      	mov	r3, r8
 8001854:	435e      	muls	r6, r3
 8001856:	435f      	muls	r7, r3
 8001858:	444e      	add	r6, r9
 800185a:	4663      	mov	r3, ip
 800185c:	46b2      	mov	sl, r6
 800185e:	0c1e      	lsrs	r6, r3, #16
 8001860:	4456      	add	r6, sl
 8001862:	45b1      	cmp	r9, r6
 8001864:	d903      	bls.n	800186e <__aeabi_dmul+0x202>
 8001866:	2380      	movs	r3, #128	; 0x80
 8001868:	025b      	lsls	r3, r3, #9
 800186a:	4699      	mov	r9, r3
 800186c:	444f      	add	r7, r9
 800186e:	0c33      	lsrs	r3, r6, #16
 8001870:	4699      	mov	r9, r3
 8001872:	003b      	movs	r3, r7
 8001874:	444b      	add	r3, r9
 8001876:	9305      	str	r3, [sp, #20]
 8001878:	4663      	mov	r3, ip
 800187a:	46ac      	mov	ip, r5
 800187c:	041f      	lsls	r7, r3, #16
 800187e:	0c3f      	lsrs	r7, r7, #16
 8001880:	0436      	lsls	r6, r6, #16
 8001882:	19f6      	adds	r6, r6, r7
 8001884:	44b4      	add	ip, r6
 8001886:	4663      	mov	r3, ip
 8001888:	9304      	str	r3, [sp, #16]
 800188a:	465b      	mov	r3, fp
 800188c:	0c1b      	lsrs	r3, r3, #16
 800188e:	469c      	mov	ip, r3
 8001890:	465b      	mov	r3, fp
 8001892:	041f      	lsls	r7, r3, #16
 8001894:	0c3f      	lsrs	r7, r7, #16
 8001896:	003b      	movs	r3, r7
 8001898:	4343      	muls	r3, r0
 800189a:	4699      	mov	r9, r3
 800189c:	4663      	mov	r3, ip
 800189e:	4343      	muls	r3, r0
 80018a0:	469a      	mov	sl, r3
 80018a2:	464b      	mov	r3, r9
 80018a4:	4660      	mov	r0, ip
 80018a6:	0c1b      	lsrs	r3, r3, #16
 80018a8:	469b      	mov	fp, r3
 80018aa:	4348      	muls	r0, r1
 80018ac:	4379      	muls	r1, r7
 80018ae:	4451      	add	r1, sl
 80018b0:	4459      	add	r1, fp
 80018b2:	458a      	cmp	sl, r1
 80018b4:	d903      	bls.n	80018be <__aeabi_dmul+0x252>
 80018b6:	2380      	movs	r3, #128	; 0x80
 80018b8:	025b      	lsls	r3, r3, #9
 80018ba:	469a      	mov	sl, r3
 80018bc:	4450      	add	r0, sl
 80018be:	0c0b      	lsrs	r3, r1, #16
 80018c0:	469a      	mov	sl, r3
 80018c2:	464b      	mov	r3, r9
 80018c4:	041b      	lsls	r3, r3, #16
 80018c6:	0c1b      	lsrs	r3, r3, #16
 80018c8:	4699      	mov	r9, r3
 80018ca:	003b      	movs	r3, r7
 80018cc:	4363      	muls	r3, r4
 80018ce:	0409      	lsls	r1, r1, #16
 80018d0:	4645      	mov	r5, r8
 80018d2:	4449      	add	r1, r9
 80018d4:	4699      	mov	r9, r3
 80018d6:	4663      	mov	r3, ip
 80018d8:	435c      	muls	r4, r3
 80018da:	436b      	muls	r3, r5
 80018dc:	469c      	mov	ip, r3
 80018de:	464b      	mov	r3, r9
 80018e0:	0c1b      	lsrs	r3, r3, #16
 80018e2:	4698      	mov	r8, r3
 80018e4:	436f      	muls	r7, r5
 80018e6:	193f      	adds	r7, r7, r4
 80018e8:	4447      	add	r7, r8
 80018ea:	4450      	add	r0, sl
 80018ec:	42bc      	cmp	r4, r7
 80018ee:	d903      	bls.n	80018f8 <__aeabi_dmul+0x28c>
 80018f0:	2380      	movs	r3, #128	; 0x80
 80018f2:	025b      	lsls	r3, r3, #9
 80018f4:	4698      	mov	r8, r3
 80018f6:	44c4      	add	ip, r8
 80018f8:	9b04      	ldr	r3, [sp, #16]
 80018fa:	9d00      	ldr	r5, [sp, #0]
 80018fc:	4698      	mov	r8, r3
 80018fe:	4445      	add	r5, r8
 8001900:	42b5      	cmp	r5, r6
 8001902:	41b6      	sbcs	r6, r6
 8001904:	4273      	negs	r3, r6
 8001906:	4698      	mov	r8, r3
 8001908:	464b      	mov	r3, r9
 800190a:	041e      	lsls	r6, r3, #16
 800190c:	9b05      	ldr	r3, [sp, #20]
 800190e:	043c      	lsls	r4, r7, #16
 8001910:	4699      	mov	r9, r3
 8001912:	0c36      	lsrs	r6, r6, #16
 8001914:	19a4      	adds	r4, r4, r6
 8001916:	444c      	add	r4, r9
 8001918:	46a1      	mov	r9, r4
 800191a:	4683      	mov	fp, r0
 800191c:	186e      	adds	r6, r5, r1
 800191e:	44c1      	add	r9, r8
 8001920:	428e      	cmp	r6, r1
 8001922:	4189      	sbcs	r1, r1
 8001924:	44cb      	add	fp, r9
 8001926:	465d      	mov	r5, fp
 8001928:	4249      	negs	r1, r1
 800192a:	186d      	adds	r5, r5, r1
 800192c:	429c      	cmp	r4, r3
 800192e:	41a4      	sbcs	r4, r4
 8001930:	45c1      	cmp	r9, r8
 8001932:	419b      	sbcs	r3, r3
 8001934:	4583      	cmp	fp, r0
 8001936:	4180      	sbcs	r0, r0
 8001938:	428d      	cmp	r5, r1
 800193a:	4189      	sbcs	r1, r1
 800193c:	425b      	negs	r3, r3
 800193e:	4264      	negs	r4, r4
 8001940:	431c      	orrs	r4, r3
 8001942:	4240      	negs	r0, r0
 8001944:	9b03      	ldr	r3, [sp, #12]
 8001946:	4249      	negs	r1, r1
 8001948:	4301      	orrs	r1, r0
 800194a:	0270      	lsls	r0, r6, #9
 800194c:	0c3f      	lsrs	r7, r7, #16
 800194e:	4318      	orrs	r0, r3
 8001950:	19e4      	adds	r4, r4, r7
 8001952:	1e47      	subs	r7, r0, #1
 8001954:	41b8      	sbcs	r0, r7
 8001956:	1864      	adds	r4, r4, r1
 8001958:	4464      	add	r4, ip
 800195a:	0df6      	lsrs	r6, r6, #23
 800195c:	0261      	lsls	r1, r4, #9
 800195e:	4330      	orrs	r0, r6
 8001960:	0dec      	lsrs	r4, r5, #23
 8001962:	026e      	lsls	r6, r5, #9
 8001964:	430c      	orrs	r4, r1
 8001966:	4330      	orrs	r0, r6
 8001968:	01c9      	lsls	r1, r1, #7
 800196a:	d400      	bmi.n	800196e <__aeabi_dmul+0x302>
 800196c:	e0f1      	b.n	8001b52 <__aeabi_dmul+0x4e6>
 800196e:	2101      	movs	r1, #1
 8001970:	0843      	lsrs	r3, r0, #1
 8001972:	4001      	ands	r1, r0
 8001974:	430b      	orrs	r3, r1
 8001976:	07e0      	lsls	r0, r4, #31
 8001978:	4318      	orrs	r0, r3
 800197a:	0864      	lsrs	r4, r4, #1
 800197c:	4915      	ldr	r1, [pc, #84]	; (80019d4 <__aeabi_dmul+0x368>)
 800197e:	9b02      	ldr	r3, [sp, #8]
 8001980:	468c      	mov	ip, r1
 8001982:	4463      	add	r3, ip
 8001984:	2b00      	cmp	r3, #0
 8001986:	dc00      	bgt.n	800198a <__aeabi_dmul+0x31e>
 8001988:	e097      	b.n	8001aba <__aeabi_dmul+0x44e>
 800198a:	0741      	lsls	r1, r0, #29
 800198c:	d009      	beq.n	80019a2 <__aeabi_dmul+0x336>
 800198e:	210f      	movs	r1, #15
 8001990:	4001      	ands	r1, r0
 8001992:	2904      	cmp	r1, #4
 8001994:	d005      	beq.n	80019a2 <__aeabi_dmul+0x336>
 8001996:	1d01      	adds	r1, r0, #4
 8001998:	4281      	cmp	r1, r0
 800199a:	4180      	sbcs	r0, r0
 800199c:	4240      	negs	r0, r0
 800199e:	1824      	adds	r4, r4, r0
 80019a0:	0008      	movs	r0, r1
 80019a2:	01e1      	lsls	r1, r4, #7
 80019a4:	d506      	bpl.n	80019b4 <__aeabi_dmul+0x348>
 80019a6:	2180      	movs	r1, #128	; 0x80
 80019a8:	00c9      	lsls	r1, r1, #3
 80019aa:	468c      	mov	ip, r1
 80019ac:	4b0a      	ldr	r3, [pc, #40]	; (80019d8 <__aeabi_dmul+0x36c>)
 80019ae:	401c      	ands	r4, r3
 80019b0:	9b02      	ldr	r3, [sp, #8]
 80019b2:	4463      	add	r3, ip
 80019b4:	4909      	ldr	r1, [pc, #36]	; (80019dc <__aeabi_dmul+0x370>)
 80019b6:	428b      	cmp	r3, r1
 80019b8:	dd00      	ble.n	80019bc <__aeabi_dmul+0x350>
 80019ba:	e710      	b.n	80017de <__aeabi_dmul+0x172>
 80019bc:	0761      	lsls	r1, r4, #29
 80019be:	08c5      	lsrs	r5, r0, #3
 80019c0:	0264      	lsls	r4, r4, #9
 80019c2:	055b      	lsls	r3, r3, #21
 80019c4:	430d      	orrs	r5, r1
 80019c6:	0b24      	lsrs	r4, r4, #12
 80019c8:	0d5b      	lsrs	r3, r3, #21
 80019ca:	e6c1      	b.n	8001750 <__aeabi_dmul+0xe4>
 80019cc:	000007ff 	.word	0x000007ff
 80019d0:	fffffc01 	.word	0xfffffc01
 80019d4:	000003ff 	.word	0x000003ff
 80019d8:	feffffff 	.word	0xfeffffff
 80019dc:	000007fe 	.word	0x000007fe
 80019e0:	464b      	mov	r3, r9
 80019e2:	4323      	orrs	r3, r4
 80019e4:	d059      	beq.n	8001a9a <__aeabi_dmul+0x42e>
 80019e6:	2c00      	cmp	r4, #0
 80019e8:	d100      	bne.n	80019ec <__aeabi_dmul+0x380>
 80019ea:	e0a3      	b.n	8001b34 <__aeabi_dmul+0x4c8>
 80019ec:	0020      	movs	r0, r4
 80019ee:	f000 fdb1 	bl	8002554 <__clzsi2>
 80019f2:	0001      	movs	r1, r0
 80019f4:	0003      	movs	r3, r0
 80019f6:	390b      	subs	r1, #11
 80019f8:	221d      	movs	r2, #29
 80019fa:	1a52      	subs	r2, r2, r1
 80019fc:	4649      	mov	r1, r9
 80019fe:	0018      	movs	r0, r3
 8001a00:	40d1      	lsrs	r1, r2
 8001a02:	464a      	mov	r2, r9
 8001a04:	3808      	subs	r0, #8
 8001a06:	4082      	lsls	r2, r0
 8001a08:	4084      	lsls	r4, r0
 8001a0a:	0010      	movs	r0, r2
 8001a0c:	430c      	orrs	r4, r1
 8001a0e:	4a74      	ldr	r2, [pc, #464]	; (8001be0 <__aeabi_dmul+0x574>)
 8001a10:	1aeb      	subs	r3, r5, r3
 8001a12:	4694      	mov	ip, r2
 8001a14:	4642      	mov	r2, r8
 8001a16:	4463      	add	r3, ip
 8001a18:	9301      	str	r3, [sp, #4]
 8001a1a:	9b01      	ldr	r3, [sp, #4]
 8001a1c:	407a      	eors	r2, r7
 8001a1e:	3301      	adds	r3, #1
 8001a20:	2100      	movs	r1, #0
 8001a22:	b2d2      	uxtb	r2, r2
 8001a24:	9302      	str	r3, [sp, #8]
 8001a26:	2e0a      	cmp	r6, #10
 8001a28:	dd00      	ble.n	8001a2c <__aeabi_dmul+0x3c0>
 8001a2a:	e667      	b.n	80016fc <__aeabi_dmul+0x90>
 8001a2c:	e683      	b.n	8001736 <__aeabi_dmul+0xca>
 8001a2e:	465b      	mov	r3, fp
 8001a30:	4303      	orrs	r3, r0
 8001a32:	469a      	mov	sl, r3
 8001a34:	d02a      	beq.n	8001a8c <__aeabi_dmul+0x420>
 8001a36:	465b      	mov	r3, fp
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d06d      	beq.n	8001b18 <__aeabi_dmul+0x4ac>
 8001a3c:	4658      	mov	r0, fp
 8001a3e:	f000 fd89 	bl	8002554 <__clzsi2>
 8001a42:	0001      	movs	r1, r0
 8001a44:	0003      	movs	r3, r0
 8001a46:	390b      	subs	r1, #11
 8001a48:	221d      	movs	r2, #29
 8001a4a:	1a52      	subs	r2, r2, r1
 8001a4c:	0021      	movs	r1, r4
 8001a4e:	0018      	movs	r0, r3
 8001a50:	465d      	mov	r5, fp
 8001a52:	40d1      	lsrs	r1, r2
 8001a54:	3808      	subs	r0, #8
 8001a56:	4085      	lsls	r5, r0
 8001a58:	000a      	movs	r2, r1
 8001a5a:	4084      	lsls	r4, r0
 8001a5c:	432a      	orrs	r2, r5
 8001a5e:	4693      	mov	fp, r2
 8001a60:	46a2      	mov	sl, r4
 8001a62:	4d5f      	ldr	r5, [pc, #380]	; (8001be0 <__aeabi_dmul+0x574>)
 8001a64:	2600      	movs	r6, #0
 8001a66:	1aed      	subs	r5, r5, r3
 8001a68:	2300      	movs	r3, #0
 8001a6a:	9300      	str	r3, [sp, #0]
 8001a6c:	e625      	b.n	80016ba <__aeabi_dmul+0x4e>
 8001a6e:	465b      	mov	r3, fp
 8001a70:	4303      	orrs	r3, r0
 8001a72:	469a      	mov	sl, r3
 8001a74:	d105      	bne.n	8001a82 <__aeabi_dmul+0x416>
 8001a76:	2300      	movs	r3, #0
 8001a78:	469b      	mov	fp, r3
 8001a7a:	3302      	adds	r3, #2
 8001a7c:	2608      	movs	r6, #8
 8001a7e:	9300      	str	r3, [sp, #0]
 8001a80:	e61b      	b.n	80016ba <__aeabi_dmul+0x4e>
 8001a82:	2303      	movs	r3, #3
 8001a84:	4682      	mov	sl, r0
 8001a86:	260c      	movs	r6, #12
 8001a88:	9300      	str	r3, [sp, #0]
 8001a8a:	e616      	b.n	80016ba <__aeabi_dmul+0x4e>
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	469b      	mov	fp, r3
 8001a90:	3301      	adds	r3, #1
 8001a92:	2604      	movs	r6, #4
 8001a94:	2500      	movs	r5, #0
 8001a96:	9300      	str	r3, [sp, #0]
 8001a98:	e60f      	b.n	80016ba <__aeabi_dmul+0x4e>
 8001a9a:	4642      	mov	r2, r8
 8001a9c:	3301      	adds	r3, #1
 8001a9e:	9501      	str	r5, [sp, #4]
 8001aa0:	431e      	orrs	r6, r3
 8001aa2:	9b01      	ldr	r3, [sp, #4]
 8001aa4:	407a      	eors	r2, r7
 8001aa6:	3301      	adds	r3, #1
 8001aa8:	2400      	movs	r4, #0
 8001aaa:	2000      	movs	r0, #0
 8001aac:	2101      	movs	r1, #1
 8001aae:	b2d2      	uxtb	r2, r2
 8001ab0:	9302      	str	r3, [sp, #8]
 8001ab2:	2e0a      	cmp	r6, #10
 8001ab4:	dd00      	ble.n	8001ab8 <__aeabi_dmul+0x44c>
 8001ab6:	e621      	b.n	80016fc <__aeabi_dmul+0x90>
 8001ab8:	e63d      	b.n	8001736 <__aeabi_dmul+0xca>
 8001aba:	2101      	movs	r1, #1
 8001abc:	1ac9      	subs	r1, r1, r3
 8001abe:	2938      	cmp	r1, #56	; 0x38
 8001ac0:	dd00      	ble.n	8001ac4 <__aeabi_dmul+0x458>
 8001ac2:	e642      	b.n	800174a <__aeabi_dmul+0xde>
 8001ac4:	291f      	cmp	r1, #31
 8001ac6:	dd47      	ble.n	8001b58 <__aeabi_dmul+0x4ec>
 8001ac8:	261f      	movs	r6, #31
 8001aca:	0025      	movs	r5, r4
 8001acc:	4276      	negs	r6, r6
 8001ace:	1af3      	subs	r3, r6, r3
 8001ad0:	40dd      	lsrs	r5, r3
 8001ad2:	002b      	movs	r3, r5
 8001ad4:	2920      	cmp	r1, #32
 8001ad6:	d005      	beq.n	8001ae4 <__aeabi_dmul+0x478>
 8001ad8:	4942      	ldr	r1, [pc, #264]	; (8001be4 <__aeabi_dmul+0x578>)
 8001ada:	9d02      	ldr	r5, [sp, #8]
 8001adc:	468c      	mov	ip, r1
 8001ade:	4465      	add	r5, ip
 8001ae0:	40ac      	lsls	r4, r5
 8001ae2:	4320      	orrs	r0, r4
 8001ae4:	1e41      	subs	r1, r0, #1
 8001ae6:	4188      	sbcs	r0, r1
 8001ae8:	4318      	orrs	r0, r3
 8001aea:	2307      	movs	r3, #7
 8001aec:	001d      	movs	r5, r3
 8001aee:	2400      	movs	r4, #0
 8001af0:	4005      	ands	r5, r0
 8001af2:	4203      	tst	r3, r0
 8001af4:	d04a      	beq.n	8001b8c <__aeabi_dmul+0x520>
 8001af6:	230f      	movs	r3, #15
 8001af8:	2400      	movs	r4, #0
 8001afa:	4003      	ands	r3, r0
 8001afc:	2b04      	cmp	r3, #4
 8001afe:	d042      	beq.n	8001b86 <__aeabi_dmul+0x51a>
 8001b00:	1d03      	adds	r3, r0, #4
 8001b02:	4283      	cmp	r3, r0
 8001b04:	4180      	sbcs	r0, r0
 8001b06:	4240      	negs	r0, r0
 8001b08:	1824      	adds	r4, r4, r0
 8001b0a:	0018      	movs	r0, r3
 8001b0c:	0223      	lsls	r3, r4, #8
 8001b0e:	d53a      	bpl.n	8001b86 <__aeabi_dmul+0x51a>
 8001b10:	2301      	movs	r3, #1
 8001b12:	2400      	movs	r4, #0
 8001b14:	2500      	movs	r5, #0
 8001b16:	e61b      	b.n	8001750 <__aeabi_dmul+0xe4>
 8001b18:	f000 fd1c 	bl	8002554 <__clzsi2>
 8001b1c:	0001      	movs	r1, r0
 8001b1e:	0003      	movs	r3, r0
 8001b20:	3115      	adds	r1, #21
 8001b22:	3320      	adds	r3, #32
 8001b24:	291c      	cmp	r1, #28
 8001b26:	dd8f      	ble.n	8001a48 <__aeabi_dmul+0x3dc>
 8001b28:	3808      	subs	r0, #8
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	4084      	lsls	r4, r0
 8001b2e:	4692      	mov	sl, r2
 8001b30:	46a3      	mov	fp, r4
 8001b32:	e796      	b.n	8001a62 <__aeabi_dmul+0x3f6>
 8001b34:	f000 fd0e 	bl	8002554 <__clzsi2>
 8001b38:	0001      	movs	r1, r0
 8001b3a:	0003      	movs	r3, r0
 8001b3c:	3115      	adds	r1, #21
 8001b3e:	3320      	adds	r3, #32
 8001b40:	291c      	cmp	r1, #28
 8001b42:	dc00      	bgt.n	8001b46 <__aeabi_dmul+0x4da>
 8001b44:	e758      	b.n	80019f8 <__aeabi_dmul+0x38c>
 8001b46:	0002      	movs	r2, r0
 8001b48:	464c      	mov	r4, r9
 8001b4a:	3a08      	subs	r2, #8
 8001b4c:	2000      	movs	r0, #0
 8001b4e:	4094      	lsls	r4, r2
 8001b50:	e75d      	b.n	8001a0e <__aeabi_dmul+0x3a2>
 8001b52:	9b01      	ldr	r3, [sp, #4]
 8001b54:	9302      	str	r3, [sp, #8]
 8001b56:	e711      	b.n	800197c <__aeabi_dmul+0x310>
 8001b58:	4b23      	ldr	r3, [pc, #140]	; (8001be8 <__aeabi_dmul+0x57c>)
 8001b5a:	0026      	movs	r6, r4
 8001b5c:	469c      	mov	ip, r3
 8001b5e:	0003      	movs	r3, r0
 8001b60:	9d02      	ldr	r5, [sp, #8]
 8001b62:	40cb      	lsrs	r3, r1
 8001b64:	4465      	add	r5, ip
 8001b66:	40ae      	lsls	r6, r5
 8001b68:	431e      	orrs	r6, r3
 8001b6a:	0003      	movs	r3, r0
 8001b6c:	40ab      	lsls	r3, r5
 8001b6e:	1e58      	subs	r0, r3, #1
 8001b70:	4183      	sbcs	r3, r0
 8001b72:	0030      	movs	r0, r6
 8001b74:	4318      	orrs	r0, r3
 8001b76:	40cc      	lsrs	r4, r1
 8001b78:	0743      	lsls	r3, r0, #29
 8001b7a:	d0c7      	beq.n	8001b0c <__aeabi_dmul+0x4a0>
 8001b7c:	230f      	movs	r3, #15
 8001b7e:	4003      	ands	r3, r0
 8001b80:	2b04      	cmp	r3, #4
 8001b82:	d1bd      	bne.n	8001b00 <__aeabi_dmul+0x494>
 8001b84:	e7c2      	b.n	8001b0c <__aeabi_dmul+0x4a0>
 8001b86:	0765      	lsls	r5, r4, #29
 8001b88:	0264      	lsls	r4, r4, #9
 8001b8a:	0b24      	lsrs	r4, r4, #12
 8001b8c:	08c0      	lsrs	r0, r0, #3
 8001b8e:	2300      	movs	r3, #0
 8001b90:	4305      	orrs	r5, r0
 8001b92:	e5dd      	b.n	8001750 <__aeabi_dmul+0xe4>
 8001b94:	2500      	movs	r5, #0
 8001b96:	2302      	movs	r3, #2
 8001b98:	2e0f      	cmp	r6, #15
 8001b9a:	d10c      	bne.n	8001bb6 <__aeabi_dmul+0x54a>
 8001b9c:	2480      	movs	r4, #128	; 0x80
 8001b9e:	465b      	mov	r3, fp
 8001ba0:	0324      	lsls	r4, r4, #12
 8001ba2:	4223      	tst	r3, r4
 8001ba4:	d00e      	beq.n	8001bc4 <__aeabi_dmul+0x558>
 8001ba6:	4221      	tst	r1, r4
 8001ba8:	d10c      	bne.n	8001bc4 <__aeabi_dmul+0x558>
 8001baa:	430c      	orrs	r4, r1
 8001bac:	0324      	lsls	r4, r4, #12
 8001bae:	003a      	movs	r2, r7
 8001bb0:	4b0e      	ldr	r3, [pc, #56]	; (8001bec <__aeabi_dmul+0x580>)
 8001bb2:	0b24      	lsrs	r4, r4, #12
 8001bb4:	e5cc      	b.n	8001750 <__aeabi_dmul+0xe4>
 8001bb6:	2e0b      	cmp	r6, #11
 8001bb8:	d000      	beq.n	8001bbc <__aeabi_dmul+0x550>
 8001bba:	e5a2      	b.n	8001702 <__aeabi_dmul+0x96>
 8001bbc:	468b      	mov	fp, r1
 8001bbe:	46aa      	mov	sl, r5
 8001bc0:	9300      	str	r3, [sp, #0]
 8001bc2:	e5f7      	b.n	80017b4 <__aeabi_dmul+0x148>
 8001bc4:	2480      	movs	r4, #128	; 0x80
 8001bc6:	465b      	mov	r3, fp
 8001bc8:	0324      	lsls	r4, r4, #12
 8001bca:	431c      	orrs	r4, r3
 8001bcc:	0324      	lsls	r4, r4, #12
 8001bce:	4642      	mov	r2, r8
 8001bd0:	4655      	mov	r5, sl
 8001bd2:	4b06      	ldr	r3, [pc, #24]	; (8001bec <__aeabi_dmul+0x580>)
 8001bd4:	0b24      	lsrs	r4, r4, #12
 8001bd6:	e5bb      	b.n	8001750 <__aeabi_dmul+0xe4>
 8001bd8:	464d      	mov	r5, r9
 8001bda:	0021      	movs	r1, r4
 8001bdc:	2303      	movs	r3, #3
 8001bde:	e7db      	b.n	8001b98 <__aeabi_dmul+0x52c>
 8001be0:	fffffc0d 	.word	0xfffffc0d
 8001be4:	0000043e 	.word	0x0000043e
 8001be8:	0000041e 	.word	0x0000041e
 8001bec:	000007ff 	.word	0x000007ff

08001bf0 <__aeabi_dsub>:
 8001bf0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001bf2:	4657      	mov	r7, sl
 8001bf4:	464e      	mov	r6, r9
 8001bf6:	4645      	mov	r5, r8
 8001bf8:	46de      	mov	lr, fp
 8001bfa:	b5e0      	push	{r5, r6, r7, lr}
 8001bfc:	000d      	movs	r5, r1
 8001bfe:	0004      	movs	r4, r0
 8001c00:	0019      	movs	r1, r3
 8001c02:	0010      	movs	r0, r2
 8001c04:	032b      	lsls	r3, r5, #12
 8001c06:	0a5b      	lsrs	r3, r3, #9
 8001c08:	0f62      	lsrs	r2, r4, #29
 8001c0a:	431a      	orrs	r2, r3
 8001c0c:	00e3      	lsls	r3, r4, #3
 8001c0e:	030c      	lsls	r4, r1, #12
 8001c10:	0a64      	lsrs	r4, r4, #9
 8001c12:	0f47      	lsrs	r7, r0, #29
 8001c14:	4327      	orrs	r7, r4
 8001c16:	4cd0      	ldr	r4, [pc, #832]	; (8001f58 <__aeabi_dsub+0x368>)
 8001c18:	006e      	lsls	r6, r5, #1
 8001c1a:	4691      	mov	r9, r2
 8001c1c:	b083      	sub	sp, #12
 8001c1e:	004a      	lsls	r2, r1, #1
 8001c20:	00c0      	lsls	r0, r0, #3
 8001c22:	4698      	mov	r8, r3
 8001c24:	46a2      	mov	sl, r4
 8001c26:	0d76      	lsrs	r6, r6, #21
 8001c28:	0fed      	lsrs	r5, r5, #31
 8001c2a:	0d52      	lsrs	r2, r2, #21
 8001c2c:	0fc9      	lsrs	r1, r1, #31
 8001c2e:	9001      	str	r0, [sp, #4]
 8001c30:	42a2      	cmp	r2, r4
 8001c32:	d100      	bne.n	8001c36 <__aeabi_dsub+0x46>
 8001c34:	e0b9      	b.n	8001daa <__aeabi_dsub+0x1ba>
 8001c36:	2401      	movs	r4, #1
 8001c38:	4061      	eors	r1, r4
 8001c3a:	468b      	mov	fp, r1
 8001c3c:	428d      	cmp	r5, r1
 8001c3e:	d100      	bne.n	8001c42 <__aeabi_dsub+0x52>
 8001c40:	e08d      	b.n	8001d5e <__aeabi_dsub+0x16e>
 8001c42:	1ab4      	subs	r4, r6, r2
 8001c44:	46a4      	mov	ip, r4
 8001c46:	2c00      	cmp	r4, #0
 8001c48:	dc00      	bgt.n	8001c4c <__aeabi_dsub+0x5c>
 8001c4a:	e0b7      	b.n	8001dbc <__aeabi_dsub+0x1cc>
 8001c4c:	2a00      	cmp	r2, #0
 8001c4e:	d100      	bne.n	8001c52 <__aeabi_dsub+0x62>
 8001c50:	e0cb      	b.n	8001dea <__aeabi_dsub+0x1fa>
 8001c52:	4ac1      	ldr	r2, [pc, #772]	; (8001f58 <__aeabi_dsub+0x368>)
 8001c54:	4296      	cmp	r6, r2
 8001c56:	d100      	bne.n	8001c5a <__aeabi_dsub+0x6a>
 8001c58:	e186      	b.n	8001f68 <__aeabi_dsub+0x378>
 8001c5a:	2280      	movs	r2, #128	; 0x80
 8001c5c:	0412      	lsls	r2, r2, #16
 8001c5e:	4317      	orrs	r7, r2
 8001c60:	4662      	mov	r2, ip
 8001c62:	2a38      	cmp	r2, #56	; 0x38
 8001c64:	dd00      	ble.n	8001c68 <__aeabi_dsub+0x78>
 8001c66:	e1a4      	b.n	8001fb2 <__aeabi_dsub+0x3c2>
 8001c68:	2a1f      	cmp	r2, #31
 8001c6a:	dd00      	ble.n	8001c6e <__aeabi_dsub+0x7e>
 8001c6c:	e21d      	b.n	80020aa <__aeabi_dsub+0x4ba>
 8001c6e:	4661      	mov	r1, ip
 8001c70:	2220      	movs	r2, #32
 8001c72:	003c      	movs	r4, r7
 8001c74:	1a52      	subs	r2, r2, r1
 8001c76:	0001      	movs	r1, r0
 8001c78:	4090      	lsls	r0, r2
 8001c7a:	4094      	lsls	r4, r2
 8001c7c:	1e42      	subs	r2, r0, #1
 8001c7e:	4190      	sbcs	r0, r2
 8001c80:	4662      	mov	r2, ip
 8001c82:	46a0      	mov	r8, r4
 8001c84:	4664      	mov	r4, ip
 8001c86:	40d7      	lsrs	r7, r2
 8001c88:	464a      	mov	r2, r9
 8001c8a:	40e1      	lsrs	r1, r4
 8001c8c:	4644      	mov	r4, r8
 8001c8e:	1bd2      	subs	r2, r2, r7
 8001c90:	4691      	mov	r9, r2
 8001c92:	430c      	orrs	r4, r1
 8001c94:	4304      	orrs	r4, r0
 8001c96:	1b1c      	subs	r4, r3, r4
 8001c98:	42a3      	cmp	r3, r4
 8001c9a:	4192      	sbcs	r2, r2
 8001c9c:	464b      	mov	r3, r9
 8001c9e:	4252      	negs	r2, r2
 8001ca0:	1a9b      	subs	r3, r3, r2
 8001ca2:	469a      	mov	sl, r3
 8001ca4:	4653      	mov	r3, sl
 8001ca6:	021b      	lsls	r3, r3, #8
 8001ca8:	d400      	bmi.n	8001cac <__aeabi_dsub+0xbc>
 8001caa:	e12b      	b.n	8001f04 <__aeabi_dsub+0x314>
 8001cac:	4653      	mov	r3, sl
 8001cae:	025a      	lsls	r2, r3, #9
 8001cb0:	0a53      	lsrs	r3, r2, #9
 8001cb2:	469a      	mov	sl, r3
 8001cb4:	4653      	mov	r3, sl
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d100      	bne.n	8001cbc <__aeabi_dsub+0xcc>
 8001cba:	e166      	b.n	8001f8a <__aeabi_dsub+0x39a>
 8001cbc:	4650      	mov	r0, sl
 8001cbe:	f000 fc49 	bl	8002554 <__clzsi2>
 8001cc2:	0003      	movs	r3, r0
 8001cc4:	3b08      	subs	r3, #8
 8001cc6:	2220      	movs	r2, #32
 8001cc8:	0020      	movs	r0, r4
 8001cca:	1ad2      	subs	r2, r2, r3
 8001ccc:	4651      	mov	r1, sl
 8001cce:	40d0      	lsrs	r0, r2
 8001cd0:	4099      	lsls	r1, r3
 8001cd2:	0002      	movs	r2, r0
 8001cd4:	409c      	lsls	r4, r3
 8001cd6:	430a      	orrs	r2, r1
 8001cd8:	429e      	cmp	r6, r3
 8001cda:	dd00      	ble.n	8001cde <__aeabi_dsub+0xee>
 8001cdc:	e164      	b.n	8001fa8 <__aeabi_dsub+0x3b8>
 8001cde:	1b9b      	subs	r3, r3, r6
 8001ce0:	1c59      	adds	r1, r3, #1
 8001ce2:	291f      	cmp	r1, #31
 8001ce4:	dd00      	ble.n	8001ce8 <__aeabi_dsub+0xf8>
 8001ce6:	e0fe      	b.n	8001ee6 <__aeabi_dsub+0x2f6>
 8001ce8:	2320      	movs	r3, #32
 8001cea:	0010      	movs	r0, r2
 8001cec:	0026      	movs	r6, r4
 8001cee:	1a5b      	subs	r3, r3, r1
 8001cf0:	409c      	lsls	r4, r3
 8001cf2:	4098      	lsls	r0, r3
 8001cf4:	40ce      	lsrs	r6, r1
 8001cf6:	40ca      	lsrs	r2, r1
 8001cf8:	1e63      	subs	r3, r4, #1
 8001cfa:	419c      	sbcs	r4, r3
 8001cfc:	4330      	orrs	r0, r6
 8001cfe:	4692      	mov	sl, r2
 8001d00:	2600      	movs	r6, #0
 8001d02:	4304      	orrs	r4, r0
 8001d04:	0763      	lsls	r3, r4, #29
 8001d06:	d009      	beq.n	8001d1c <__aeabi_dsub+0x12c>
 8001d08:	230f      	movs	r3, #15
 8001d0a:	4023      	ands	r3, r4
 8001d0c:	2b04      	cmp	r3, #4
 8001d0e:	d005      	beq.n	8001d1c <__aeabi_dsub+0x12c>
 8001d10:	1d23      	adds	r3, r4, #4
 8001d12:	42a3      	cmp	r3, r4
 8001d14:	41a4      	sbcs	r4, r4
 8001d16:	4264      	negs	r4, r4
 8001d18:	44a2      	add	sl, r4
 8001d1a:	001c      	movs	r4, r3
 8001d1c:	4653      	mov	r3, sl
 8001d1e:	021b      	lsls	r3, r3, #8
 8001d20:	d400      	bmi.n	8001d24 <__aeabi_dsub+0x134>
 8001d22:	e0f2      	b.n	8001f0a <__aeabi_dsub+0x31a>
 8001d24:	4b8c      	ldr	r3, [pc, #560]	; (8001f58 <__aeabi_dsub+0x368>)
 8001d26:	3601      	adds	r6, #1
 8001d28:	429e      	cmp	r6, r3
 8001d2a:	d100      	bne.n	8001d2e <__aeabi_dsub+0x13e>
 8001d2c:	e10f      	b.n	8001f4e <__aeabi_dsub+0x35e>
 8001d2e:	4653      	mov	r3, sl
 8001d30:	498a      	ldr	r1, [pc, #552]	; (8001f5c <__aeabi_dsub+0x36c>)
 8001d32:	08e4      	lsrs	r4, r4, #3
 8001d34:	400b      	ands	r3, r1
 8001d36:	0019      	movs	r1, r3
 8001d38:	075b      	lsls	r3, r3, #29
 8001d3a:	4323      	orrs	r3, r4
 8001d3c:	0572      	lsls	r2, r6, #21
 8001d3e:	024c      	lsls	r4, r1, #9
 8001d40:	0b24      	lsrs	r4, r4, #12
 8001d42:	0d52      	lsrs	r2, r2, #21
 8001d44:	0512      	lsls	r2, r2, #20
 8001d46:	4322      	orrs	r2, r4
 8001d48:	07ed      	lsls	r5, r5, #31
 8001d4a:	432a      	orrs	r2, r5
 8001d4c:	0018      	movs	r0, r3
 8001d4e:	0011      	movs	r1, r2
 8001d50:	b003      	add	sp, #12
 8001d52:	bcf0      	pop	{r4, r5, r6, r7}
 8001d54:	46bb      	mov	fp, r7
 8001d56:	46b2      	mov	sl, r6
 8001d58:	46a9      	mov	r9, r5
 8001d5a:	46a0      	mov	r8, r4
 8001d5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d5e:	1ab4      	subs	r4, r6, r2
 8001d60:	46a4      	mov	ip, r4
 8001d62:	2c00      	cmp	r4, #0
 8001d64:	dd59      	ble.n	8001e1a <__aeabi_dsub+0x22a>
 8001d66:	2a00      	cmp	r2, #0
 8001d68:	d100      	bne.n	8001d6c <__aeabi_dsub+0x17c>
 8001d6a:	e0b0      	b.n	8001ece <__aeabi_dsub+0x2de>
 8001d6c:	4556      	cmp	r6, sl
 8001d6e:	d100      	bne.n	8001d72 <__aeabi_dsub+0x182>
 8001d70:	e0fa      	b.n	8001f68 <__aeabi_dsub+0x378>
 8001d72:	2280      	movs	r2, #128	; 0x80
 8001d74:	0412      	lsls	r2, r2, #16
 8001d76:	4317      	orrs	r7, r2
 8001d78:	4662      	mov	r2, ip
 8001d7a:	2a38      	cmp	r2, #56	; 0x38
 8001d7c:	dd00      	ble.n	8001d80 <__aeabi_dsub+0x190>
 8001d7e:	e0d4      	b.n	8001f2a <__aeabi_dsub+0x33a>
 8001d80:	2a1f      	cmp	r2, #31
 8001d82:	dc00      	bgt.n	8001d86 <__aeabi_dsub+0x196>
 8001d84:	e1c0      	b.n	8002108 <__aeabi_dsub+0x518>
 8001d86:	0039      	movs	r1, r7
 8001d88:	3a20      	subs	r2, #32
 8001d8a:	40d1      	lsrs	r1, r2
 8001d8c:	4662      	mov	r2, ip
 8001d8e:	2a20      	cmp	r2, #32
 8001d90:	d006      	beq.n	8001da0 <__aeabi_dsub+0x1b0>
 8001d92:	4664      	mov	r4, ip
 8001d94:	2240      	movs	r2, #64	; 0x40
 8001d96:	1b12      	subs	r2, r2, r4
 8001d98:	003c      	movs	r4, r7
 8001d9a:	4094      	lsls	r4, r2
 8001d9c:	4304      	orrs	r4, r0
 8001d9e:	9401      	str	r4, [sp, #4]
 8001da0:	9c01      	ldr	r4, [sp, #4]
 8001da2:	1e62      	subs	r2, r4, #1
 8001da4:	4194      	sbcs	r4, r2
 8001da6:	430c      	orrs	r4, r1
 8001da8:	e0c3      	b.n	8001f32 <__aeabi_dsub+0x342>
 8001daa:	003c      	movs	r4, r7
 8001dac:	4304      	orrs	r4, r0
 8001dae:	d02b      	beq.n	8001e08 <__aeabi_dsub+0x218>
 8001db0:	468b      	mov	fp, r1
 8001db2:	428d      	cmp	r5, r1
 8001db4:	d02e      	beq.n	8001e14 <__aeabi_dsub+0x224>
 8001db6:	4c6a      	ldr	r4, [pc, #424]	; (8001f60 <__aeabi_dsub+0x370>)
 8001db8:	46a4      	mov	ip, r4
 8001dba:	44b4      	add	ip, r6
 8001dbc:	4664      	mov	r4, ip
 8001dbe:	2c00      	cmp	r4, #0
 8001dc0:	d05f      	beq.n	8001e82 <__aeabi_dsub+0x292>
 8001dc2:	1b94      	subs	r4, r2, r6
 8001dc4:	46a4      	mov	ip, r4
 8001dc6:	2e00      	cmp	r6, #0
 8001dc8:	d000      	beq.n	8001dcc <__aeabi_dsub+0x1dc>
 8001dca:	e120      	b.n	800200e <__aeabi_dsub+0x41e>
 8001dcc:	464c      	mov	r4, r9
 8001dce:	431c      	orrs	r4, r3
 8001dd0:	d100      	bne.n	8001dd4 <__aeabi_dsub+0x1e4>
 8001dd2:	e1c7      	b.n	8002164 <__aeabi_dsub+0x574>
 8001dd4:	4661      	mov	r1, ip
 8001dd6:	1e4c      	subs	r4, r1, #1
 8001dd8:	2901      	cmp	r1, #1
 8001dda:	d100      	bne.n	8001dde <__aeabi_dsub+0x1ee>
 8001ddc:	e223      	b.n	8002226 <__aeabi_dsub+0x636>
 8001dde:	4d5e      	ldr	r5, [pc, #376]	; (8001f58 <__aeabi_dsub+0x368>)
 8001de0:	45ac      	cmp	ip, r5
 8001de2:	d100      	bne.n	8001de6 <__aeabi_dsub+0x1f6>
 8001de4:	e1d8      	b.n	8002198 <__aeabi_dsub+0x5a8>
 8001de6:	46a4      	mov	ip, r4
 8001de8:	e11a      	b.n	8002020 <__aeabi_dsub+0x430>
 8001dea:	003a      	movs	r2, r7
 8001dec:	4302      	orrs	r2, r0
 8001dee:	d100      	bne.n	8001df2 <__aeabi_dsub+0x202>
 8001df0:	e0e4      	b.n	8001fbc <__aeabi_dsub+0x3cc>
 8001df2:	0022      	movs	r2, r4
 8001df4:	3a01      	subs	r2, #1
 8001df6:	2c01      	cmp	r4, #1
 8001df8:	d100      	bne.n	8001dfc <__aeabi_dsub+0x20c>
 8001dfa:	e1c3      	b.n	8002184 <__aeabi_dsub+0x594>
 8001dfc:	4956      	ldr	r1, [pc, #344]	; (8001f58 <__aeabi_dsub+0x368>)
 8001dfe:	428c      	cmp	r4, r1
 8001e00:	d100      	bne.n	8001e04 <__aeabi_dsub+0x214>
 8001e02:	e0b1      	b.n	8001f68 <__aeabi_dsub+0x378>
 8001e04:	4694      	mov	ip, r2
 8001e06:	e72b      	b.n	8001c60 <__aeabi_dsub+0x70>
 8001e08:	2401      	movs	r4, #1
 8001e0a:	4061      	eors	r1, r4
 8001e0c:	468b      	mov	fp, r1
 8001e0e:	428d      	cmp	r5, r1
 8001e10:	d000      	beq.n	8001e14 <__aeabi_dsub+0x224>
 8001e12:	e716      	b.n	8001c42 <__aeabi_dsub+0x52>
 8001e14:	4952      	ldr	r1, [pc, #328]	; (8001f60 <__aeabi_dsub+0x370>)
 8001e16:	468c      	mov	ip, r1
 8001e18:	44b4      	add	ip, r6
 8001e1a:	4664      	mov	r4, ip
 8001e1c:	2c00      	cmp	r4, #0
 8001e1e:	d100      	bne.n	8001e22 <__aeabi_dsub+0x232>
 8001e20:	e0d3      	b.n	8001fca <__aeabi_dsub+0x3da>
 8001e22:	1b91      	subs	r1, r2, r6
 8001e24:	468c      	mov	ip, r1
 8001e26:	2e00      	cmp	r6, #0
 8001e28:	d100      	bne.n	8001e2c <__aeabi_dsub+0x23c>
 8001e2a:	e15e      	b.n	80020ea <__aeabi_dsub+0x4fa>
 8001e2c:	494a      	ldr	r1, [pc, #296]	; (8001f58 <__aeabi_dsub+0x368>)
 8001e2e:	428a      	cmp	r2, r1
 8001e30:	d100      	bne.n	8001e34 <__aeabi_dsub+0x244>
 8001e32:	e1be      	b.n	80021b2 <__aeabi_dsub+0x5c2>
 8001e34:	2180      	movs	r1, #128	; 0x80
 8001e36:	464c      	mov	r4, r9
 8001e38:	0409      	lsls	r1, r1, #16
 8001e3a:	430c      	orrs	r4, r1
 8001e3c:	46a1      	mov	r9, r4
 8001e3e:	4661      	mov	r1, ip
 8001e40:	2938      	cmp	r1, #56	; 0x38
 8001e42:	dd00      	ble.n	8001e46 <__aeabi_dsub+0x256>
 8001e44:	e1ba      	b.n	80021bc <__aeabi_dsub+0x5cc>
 8001e46:	291f      	cmp	r1, #31
 8001e48:	dd00      	ble.n	8001e4c <__aeabi_dsub+0x25c>
 8001e4a:	e227      	b.n	800229c <__aeabi_dsub+0x6ac>
 8001e4c:	2420      	movs	r4, #32
 8001e4e:	1a64      	subs	r4, r4, r1
 8001e50:	4649      	mov	r1, r9
 8001e52:	40a1      	lsls	r1, r4
 8001e54:	001e      	movs	r6, r3
 8001e56:	4688      	mov	r8, r1
 8001e58:	4661      	mov	r1, ip
 8001e5a:	40a3      	lsls	r3, r4
 8001e5c:	40ce      	lsrs	r6, r1
 8001e5e:	4641      	mov	r1, r8
 8001e60:	1e5c      	subs	r4, r3, #1
 8001e62:	41a3      	sbcs	r3, r4
 8001e64:	4331      	orrs	r1, r6
 8001e66:	4319      	orrs	r1, r3
 8001e68:	000c      	movs	r4, r1
 8001e6a:	4663      	mov	r3, ip
 8001e6c:	4649      	mov	r1, r9
 8001e6e:	40d9      	lsrs	r1, r3
 8001e70:	187f      	adds	r7, r7, r1
 8001e72:	1824      	adds	r4, r4, r0
 8001e74:	4284      	cmp	r4, r0
 8001e76:	419b      	sbcs	r3, r3
 8001e78:	425b      	negs	r3, r3
 8001e7a:	469a      	mov	sl, r3
 8001e7c:	0016      	movs	r6, r2
 8001e7e:	44ba      	add	sl, r7
 8001e80:	e05d      	b.n	8001f3e <__aeabi_dsub+0x34e>
 8001e82:	4c38      	ldr	r4, [pc, #224]	; (8001f64 <__aeabi_dsub+0x374>)
 8001e84:	1c72      	adds	r2, r6, #1
 8001e86:	4222      	tst	r2, r4
 8001e88:	d000      	beq.n	8001e8c <__aeabi_dsub+0x29c>
 8001e8a:	e0df      	b.n	800204c <__aeabi_dsub+0x45c>
 8001e8c:	464a      	mov	r2, r9
 8001e8e:	431a      	orrs	r2, r3
 8001e90:	2e00      	cmp	r6, #0
 8001e92:	d000      	beq.n	8001e96 <__aeabi_dsub+0x2a6>
 8001e94:	e15c      	b.n	8002150 <__aeabi_dsub+0x560>
 8001e96:	2a00      	cmp	r2, #0
 8001e98:	d100      	bne.n	8001e9c <__aeabi_dsub+0x2ac>
 8001e9a:	e1cf      	b.n	800223c <__aeabi_dsub+0x64c>
 8001e9c:	003a      	movs	r2, r7
 8001e9e:	4302      	orrs	r2, r0
 8001ea0:	d100      	bne.n	8001ea4 <__aeabi_dsub+0x2b4>
 8001ea2:	e17f      	b.n	80021a4 <__aeabi_dsub+0x5b4>
 8001ea4:	1a1c      	subs	r4, r3, r0
 8001ea6:	464a      	mov	r2, r9
 8001ea8:	42a3      	cmp	r3, r4
 8001eaa:	4189      	sbcs	r1, r1
 8001eac:	1bd2      	subs	r2, r2, r7
 8001eae:	4249      	negs	r1, r1
 8001eb0:	1a52      	subs	r2, r2, r1
 8001eb2:	4692      	mov	sl, r2
 8001eb4:	0212      	lsls	r2, r2, #8
 8001eb6:	d400      	bmi.n	8001eba <__aeabi_dsub+0x2ca>
 8001eb8:	e20a      	b.n	80022d0 <__aeabi_dsub+0x6e0>
 8001eba:	1ac4      	subs	r4, r0, r3
 8001ebc:	42a0      	cmp	r0, r4
 8001ebe:	4180      	sbcs	r0, r0
 8001ec0:	464b      	mov	r3, r9
 8001ec2:	4240      	negs	r0, r0
 8001ec4:	1aff      	subs	r7, r7, r3
 8001ec6:	1a3b      	subs	r3, r7, r0
 8001ec8:	469a      	mov	sl, r3
 8001eca:	465d      	mov	r5, fp
 8001ecc:	e71a      	b.n	8001d04 <__aeabi_dsub+0x114>
 8001ece:	003a      	movs	r2, r7
 8001ed0:	4302      	orrs	r2, r0
 8001ed2:	d073      	beq.n	8001fbc <__aeabi_dsub+0x3cc>
 8001ed4:	0022      	movs	r2, r4
 8001ed6:	3a01      	subs	r2, #1
 8001ed8:	2c01      	cmp	r4, #1
 8001eda:	d100      	bne.n	8001ede <__aeabi_dsub+0x2ee>
 8001edc:	e0cb      	b.n	8002076 <__aeabi_dsub+0x486>
 8001ede:	4554      	cmp	r4, sl
 8001ee0:	d042      	beq.n	8001f68 <__aeabi_dsub+0x378>
 8001ee2:	4694      	mov	ip, r2
 8001ee4:	e748      	b.n	8001d78 <__aeabi_dsub+0x188>
 8001ee6:	0010      	movs	r0, r2
 8001ee8:	3b1f      	subs	r3, #31
 8001eea:	40d8      	lsrs	r0, r3
 8001eec:	2920      	cmp	r1, #32
 8001eee:	d003      	beq.n	8001ef8 <__aeabi_dsub+0x308>
 8001ef0:	2340      	movs	r3, #64	; 0x40
 8001ef2:	1a5b      	subs	r3, r3, r1
 8001ef4:	409a      	lsls	r2, r3
 8001ef6:	4314      	orrs	r4, r2
 8001ef8:	1e63      	subs	r3, r4, #1
 8001efa:	419c      	sbcs	r4, r3
 8001efc:	2300      	movs	r3, #0
 8001efe:	2600      	movs	r6, #0
 8001f00:	469a      	mov	sl, r3
 8001f02:	4304      	orrs	r4, r0
 8001f04:	0763      	lsls	r3, r4, #29
 8001f06:	d000      	beq.n	8001f0a <__aeabi_dsub+0x31a>
 8001f08:	e6fe      	b.n	8001d08 <__aeabi_dsub+0x118>
 8001f0a:	4652      	mov	r2, sl
 8001f0c:	08e3      	lsrs	r3, r4, #3
 8001f0e:	0752      	lsls	r2, r2, #29
 8001f10:	4313      	orrs	r3, r2
 8001f12:	4652      	mov	r2, sl
 8001f14:	46b4      	mov	ip, r6
 8001f16:	08d2      	lsrs	r2, r2, #3
 8001f18:	490f      	ldr	r1, [pc, #60]	; (8001f58 <__aeabi_dsub+0x368>)
 8001f1a:	458c      	cmp	ip, r1
 8001f1c:	d02a      	beq.n	8001f74 <__aeabi_dsub+0x384>
 8001f1e:	0312      	lsls	r2, r2, #12
 8001f20:	0b14      	lsrs	r4, r2, #12
 8001f22:	4662      	mov	r2, ip
 8001f24:	0552      	lsls	r2, r2, #21
 8001f26:	0d52      	lsrs	r2, r2, #21
 8001f28:	e70c      	b.n	8001d44 <__aeabi_dsub+0x154>
 8001f2a:	003c      	movs	r4, r7
 8001f2c:	4304      	orrs	r4, r0
 8001f2e:	1e62      	subs	r2, r4, #1
 8001f30:	4194      	sbcs	r4, r2
 8001f32:	18e4      	adds	r4, r4, r3
 8001f34:	429c      	cmp	r4, r3
 8001f36:	4192      	sbcs	r2, r2
 8001f38:	4252      	negs	r2, r2
 8001f3a:	444a      	add	r2, r9
 8001f3c:	4692      	mov	sl, r2
 8001f3e:	4653      	mov	r3, sl
 8001f40:	021b      	lsls	r3, r3, #8
 8001f42:	d5df      	bpl.n	8001f04 <__aeabi_dsub+0x314>
 8001f44:	4b04      	ldr	r3, [pc, #16]	; (8001f58 <__aeabi_dsub+0x368>)
 8001f46:	3601      	adds	r6, #1
 8001f48:	429e      	cmp	r6, r3
 8001f4a:	d000      	beq.n	8001f4e <__aeabi_dsub+0x35e>
 8001f4c:	e0a0      	b.n	8002090 <__aeabi_dsub+0x4a0>
 8001f4e:	0032      	movs	r2, r6
 8001f50:	2400      	movs	r4, #0
 8001f52:	2300      	movs	r3, #0
 8001f54:	e6f6      	b.n	8001d44 <__aeabi_dsub+0x154>
 8001f56:	46c0      	nop			; (mov r8, r8)
 8001f58:	000007ff 	.word	0x000007ff
 8001f5c:	ff7fffff 	.word	0xff7fffff
 8001f60:	fffff801 	.word	0xfffff801
 8001f64:	000007fe 	.word	0x000007fe
 8001f68:	08db      	lsrs	r3, r3, #3
 8001f6a:	464a      	mov	r2, r9
 8001f6c:	0752      	lsls	r2, r2, #29
 8001f6e:	4313      	orrs	r3, r2
 8001f70:	464a      	mov	r2, r9
 8001f72:	08d2      	lsrs	r2, r2, #3
 8001f74:	0019      	movs	r1, r3
 8001f76:	4311      	orrs	r1, r2
 8001f78:	d100      	bne.n	8001f7c <__aeabi_dsub+0x38c>
 8001f7a:	e1b5      	b.n	80022e8 <__aeabi_dsub+0x6f8>
 8001f7c:	2480      	movs	r4, #128	; 0x80
 8001f7e:	0324      	lsls	r4, r4, #12
 8001f80:	4314      	orrs	r4, r2
 8001f82:	0324      	lsls	r4, r4, #12
 8001f84:	4ad5      	ldr	r2, [pc, #852]	; (80022dc <__aeabi_dsub+0x6ec>)
 8001f86:	0b24      	lsrs	r4, r4, #12
 8001f88:	e6dc      	b.n	8001d44 <__aeabi_dsub+0x154>
 8001f8a:	0020      	movs	r0, r4
 8001f8c:	f000 fae2 	bl	8002554 <__clzsi2>
 8001f90:	0003      	movs	r3, r0
 8001f92:	3318      	adds	r3, #24
 8001f94:	2b1f      	cmp	r3, #31
 8001f96:	dc00      	bgt.n	8001f9a <__aeabi_dsub+0x3aa>
 8001f98:	e695      	b.n	8001cc6 <__aeabi_dsub+0xd6>
 8001f9a:	0022      	movs	r2, r4
 8001f9c:	3808      	subs	r0, #8
 8001f9e:	4082      	lsls	r2, r0
 8001fa0:	2400      	movs	r4, #0
 8001fa2:	429e      	cmp	r6, r3
 8001fa4:	dc00      	bgt.n	8001fa8 <__aeabi_dsub+0x3b8>
 8001fa6:	e69a      	b.n	8001cde <__aeabi_dsub+0xee>
 8001fa8:	1af6      	subs	r6, r6, r3
 8001faa:	4bcd      	ldr	r3, [pc, #820]	; (80022e0 <__aeabi_dsub+0x6f0>)
 8001fac:	401a      	ands	r2, r3
 8001fae:	4692      	mov	sl, r2
 8001fb0:	e6a8      	b.n	8001d04 <__aeabi_dsub+0x114>
 8001fb2:	003c      	movs	r4, r7
 8001fb4:	4304      	orrs	r4, r0
 8001fb6:	1e62      	subs	r2, r4, #1
 8001fb8:	4194      	sbcs	r4, r2
 8001fba:	e66c      	b.n	8001c96 <__aeabi_dsub+0xa6>
 8001fbc:	464a      	mov	r2, r9
 8001fbe:	08db      	lsrs	r3, r3, #3
 8001fc0:	0752      	lsls	r2, r2, #29
 8001fc2:	4313      	orrs	r3, r2
 8001fc4:	464a      	mov	r2, r9
 8001fc6:	08d2      	lsrs	r2, r2, #3
 8001fc8:	e7a6      	b.n	8001f18 <__aeabi_dsub+0x328>
 8001fca:	4cc6      	ldr	r4, [pc, #792]	; (80022e4 <__aeabi_dsub+0x6f4>)
 8001fcc:	1c72      	adds	r2, r6, #1
 8001fce:	4222      	tst	r2, r4
 8001fd0:	d000      	beq.n	8001fd4 <__aeabi_dsub+0x3e4>
 8001fd2:	e0ac      	b.n	800212e <__aeabi_dsub+0x53e>
 8001fd4:	464a      	mov	r2, r9
 8001fd6:	431a      	orrs	r2, r3
 8001fd8:	2e00      	cmp	r6, #0
 8001fda:	d000      	beq.n	8001fde <__aeabi_dsub+0x3ee>
 8001fdc:	e105      	b.n	80021ea <__aeabi_dsub+0x5fa>
 8001fde:	2a00      	cmp	r2, #0
 8001fe0:	d100      	bne.n	8001fe4 <__aeabi_dsub+0x3f4>
 8001fe2:	e156      	b.n	8002292 <__aeabi_dsub+0x6a2>
 8001fe4:	003a      	movs	r2, r7
 8001fe6:	4302      	orrs	r2, r0
 8001fe8:	d100      	bne.n	8001fec <__aeabi_dsub+0x3fc>
 8001fea:	e0db      	b.n	80021a4 <__aeabi_dsub+0x5b4>
 8001fec:	181c      	adds	r4, r3, r0
 8001fee:	429c      	cmp	r4, r3
 8001ff0:	419b      	sbcs	r3, r3
 8001ff2:	444f      	add	r7, r9
 8001ff4:	46ba      	mov	sl, r7
 8001ff6:	425b      	negs	r3, r3
 8001ff8:	449a      	add	sl, r3
 8001ffa:	4653      	mov	r3, sl
 8001ffc:	021b      	lsls	r3, r3, #8
 8001ffe:	d400      	bmi.n	8002002 <__aeabi_dsub+0x412>
 8002000:	e780      	b.n	8001f04 <__aeabi_dsub+0x314>
 8002002:	4652      	mov	r2, sl
 8002004:	4bb6      	ldr	r3, [pc, #728]	; (80022e0 <__aeabi_dsub+0x6f0>)
 8002006:	2601      	movs	r6, #1
 8002008:	401a      	ands	r2, r3
 800200a:	4692      	mov	sl, r2
 800200c:	e77a      	b.n	8001f04 <__aeabi_dsub+0x314>
 800200e:	4cb3      	ldr	r4, [pc, #716]	; (80022dc <__aeabi_dsub+0x6ec>)
 8002010:	42a2      	cmp	r2, r4
 8002012:	d100      	bne.n	8002016 <__aeabi_dsub+0x426>
 8002014:	e0c0      	b.n	8002198 <__aeabi_dsub+0x5a8>
 8002016:	2480      	movs	r4, #128	; 0x80
 8002018:	464d      	mov	r5, r9
 800201a:	0424      	lsls	r4, r4, #16
 800201c:	4325      	orrs	r5, r4
 800201e:	46a9      	mov	r9, r5
 8002020:	4664      	mov	r4, ip
 8002022:	2c38      	cmp	r4, #56	; 0x38
 8002024:	dc53      	bgt.n	80020ce <__aeabi_dsub+0x4de>
 8002026:	4661      	mov	r1, ip
 8002028:	2c1f      	cmp	r4, #31
 800202a:	dd00      	ble.n	800202e <__aeabi_dsub+0x43e>
 800202c:	e0cd      	b.n	80021ca <__aeabi_dsub+0x5da>
 800202e:	2520      	movs	r5, #32
 8002030:	001e      	movs	r6, r3
 8002032:	1b2d      	subs	r5, r5, r4
 8002034:	464c      	mov	r4, r9
 8002036:	40ab      	lsls	r3, r5
 8002038:	40ac      	lsls	r4, r5
 800203a:	40ce      	lsrs	r6, r1
 800203c:	1e5d      	subs	r5, r3, #1
 800203e:	41ab      	sbcs	r3, r5
 8002040:	4334      	orrs	r4, r6
 8002042:	4323      	orrs	r3, r4
 8002044:	464c      	mov	r4, r9
 8002046:	40cc      	lsrs	r4, r1
 8002048:	1b3f      	subs	r7, r7, r4
 800204a:	e045      	b.n	80020d8 <__aeabi_dsub+0x4e8>
 800204c:	464a      	mov	r2, r9
 800204e:	1a1c      	subs	r4, r3, r0
 8002050:	1bd1      	subs	r1, r2, r7
 8002052:	42a3      	cmp	r3, r4
 8002054:	4192      	sbcs	r2, r2
 8002056:	4252      	negs	r2, r2
 8002058:	4692      	mov	sl, r2
 800205a:	000a      	movs	r2, r1
 800205c:	4651      	mov	r1, sl
 800205e:	1a52      	subs	r2, r2, r1
 8002060:	4692      	mov	sl, r2
 8002062:	0212      	lsls	r2, r2, #8
 8002064:	d500      	bpl.n	8002068 <__aeabi_dsub+0x478>
 8002066:	e083      	b.n	8002170 <__aeabi_dsub+0x580>
 8002068:	4653      	mov	r3, sl
 800206a:	4323      	orrs	r3, r4
 800206c:	d000      	beq.n	8002070 <__aeabi_dsub+0x480>
 800206e:	e621      	b.n	8001cb4 <__aeabi_dsub+0xc4>
 8002070:	2200      	movs	r2, #0
 8002072:	2500      	movs	r5, #0
 8002074:	e753      	b.n	8001f1e <__aeabi_dsub+0x32e>
 8002076:	181c      	adds	r4, r3, r0
 8002078:	429c      	cmp	r4, r3
 800207a:	419b      	sbcs	r3, r3
 800207c:	444f      	add	r7, r9
 800207e:	46ba      	mov	sl, r7
 8002080:	425b      	negs	r3, r3
 8002082:	449a      	add	sl, r3
 8002084:	4653      	mov	r3, sl
 8002086:	2601      	movs	r6, #1
 8002088:	021b      	lsls	r3, r3, #8
 800208a:	d400      	bmi.n	800208e <__aeabi_dsub+0x49e>
 800208c:	e73a      	b.n	8001f04 <__aeabi_dsub+0x314>
 800208e:	2602      	movs	r6, #2
 8002090:	4652      	mov	r2, sl
 8002092:	4b93      	ldr	r3, [pc, #588]	; (80022e0 <__aeabi_dsub+0x6f0>)
 8002094:	2101      	movs	r1, #1
 8002096:	401a      	ands	r2, r3
 8002098:	0013      	movs	r3, r2
 800209a:	4021      	ands	r1, r4
 800209c:	0862      	lsrs	r2, r4, #1
 800209e:	430a      	orrs	r2, r1
 80020a0:	07dc      	lsls	r4, r3, #31
 80020a2:	085b      	lsrs	r3, r3, #1
 80020a4:	469a      	mov	sl, r3
 80020a6:	4314      	orrs	r4, r2
 80020a8:	e62c      	b.n	8001d04 <__aeabi_dsub+0x114>
 80020aa:	0039      	movs	r1, r7
 80020ac:	3a20      	subs	r2, #32
 80020ae:	40d1      	lsrs	r1, r2
 80020b0:	4662      	mov	r2, ip
 80020b2:	2a20      	cmp	r2, #32
 80020b4:	d006      	beq.n	80020c4 <__aeabi_dsub+0x4d4>
 80020b6:	4664      	mov	r4, ip
 80020b8:	2240      	movs	r2, #64	; 0x40
 80020ba:	1b12      	subs	r2, r2, r4
 80020bc:	003c      	movs	r4, r7
 80020be:	4094      	lsls	r4, r2
 80020c0:	4304      	orrs	r4, r0
 80020c2:	9401      	str	r4, [sp, #4]
 80020c4:	9c01      	ldr	r4, [sp, #4]
 80020c6:	1e62      	subs	r2, r4, #1
 80020c8:	4194      	sbcs	r4, r2
 80020ca:	430c      	orrs	r4, r1
 80020cc:	e5e3      	b.n	8001c96 <__aeabi_dsub+0xa6>
 80020ce:	4649      	mov	r1, r9
 80020d0:	4319      	orrs	r1, r3
 80020d2:	000b      	movs	r3, r1
 80020d4:	1e5c      	subs	r4, r3, #1
 80020d6:	41a3      	sbcs	r3, r4
 80020d8:	1ac4      	subs	r4, r0, r3
 80020da:	42a0      	cmp	r0, r4
 80020dc:	419b      	sbcs	r3, r3
 80020de:	425b      	negs	r3, r3
 80020e0:	1afb      	subs	r3, r7, r3
 80020e2:	469a      	mov	sl, r3
 80020e4:	465d      	mov	r5, fp
 80020e6:	0016      	movs	r6, r2
 80020e8:	e5dc      	b.n	8001ca4 <__aeabi_dsub+0xb4>
 80020ea:	4649      	mov	r1, r9
 80020ec:	4319      	orrs	r1, r3
 80020ee:	d100      	bne.n	80020f2 <__aeabi_dsub+0x502>
 80020f0:	e0ae      	b.n	8002250 <__aeabi_dsub+0x660>
 80020f2:	4661      	mov	r1, ip
 80020f4:	4664      	mov	r4, ip
 80020f6:	3901      	subs	r1, #1
 80020f8:	2c01      	cmp	r4, #1
 80020fa:	d100      	bne.n	80020fe <__aeabi_dsub+0x50e>
 80020fc:	e0e0      	b.n	80022c0 <__aeabi_dsub+0x6d0>
 80020fe:	4c77      	ldr	r4, [pc, #476]	; (80022dc <__aeabi_dsub+0x6ec>)
 8002100:	45a4      	cmp	ip, r4
 8002102:	d056      	beq.n	80021b2 <__aeabi_dsub+0x5c2>
 8002104:	468c      	mov	ip, r1
 8002106:	e69a      	b.n	8001e3e <__aeabi_dsub+0x24e>
 8002108:	4661      	mov	r1, ip
 800210a:	2220      	movs	r2, #32
 800210c:	003c      	movs	r4, r7
 800210e:	1a52      	subs	r2, r2, r1
 8002110:	4094      	lsls	r4, r2
 8002112:	0001      	movs	r1, r0
 8002114:	4090      	lsls	r0, r2
 8002116:	46a0      	mov	r8, r4
 8002118:	4664      	mov	r4, ip
 800211a:	1e42      	subs	r2, r0, #1
 800211c:	4190      	sbcs	r0, r2
 800211e:	4662      	mov	r2, ip
 8002120:	40e1      	lsrs	r1, r4
 8002122:	4644      	mov	r4, r8
 8002124:	40d7      	lsrs	r7, r2
 8002126:	430c      	orrs	r4, r1
 8002128:	4304      	orrs	r4, r0
 800212a:	44b9      	add	r9, r7
 800212c:	e701      	b.n	8001f32 <__aeabi_dsub+0x342>
 800212e:	496b      	ldr	r1, [pc, #428]	; (80022dc <__aeabi_dsub+0x6ec>)
 8002130:	428a      	cmp	r2, r1
 8002132:	d100      	bne.n	8002136 <__aeabi_dsub+0x546>
 8002134:	e70c      	b.n	8001f50 <__aeabi_dsub+0x360>
 8002136:	1818      	adds	r0, r3, r0
 8002138:	4298      	cmp	r0, r3
 800213a:	419b      	sbcs	r3, r3
 800213c:	444f      	add	r7, r9
 800213e:	425b      	negs	r3, r3
 8002140:	18fb      	adds	r3, r7, r3
 8002142:	07dc      	lsls	r4, r3, #31
 8002144:	0840      	lsrs	r0, r0, #1
 8002146:	085b      	lsrs	r3, r3, #1
 8002148:	469a      	mov	sl, r3
 800214a:	0016      	movs	r6, r2
 800214c:	4304      	orrs	r4, r0
 800214e:	e6d9      	b.n	8001f04 <__aeabi_dsub+0x314>
 8002150:	2a00      	cmp	r2, #0
 8002152:	d000      	beq.n	8002156 <__aeabi_dsub+0x566>
 8002154:	e081      	b.n	800225a <__aeabi_dsub+0x66a>
 8002156:	003b      	movs	r3, r7
 8002158:	4303      	orrs	r3, r0
 800215a:	d11d      	bne.n	8002198 <__aeabi_dsub+0x5a8>
 800215c:	2280      	movs	r2, #128	; 0x80
 800215e:	2500      	movs	r5, #0
 8002160:	0312      	lsls	r2, r2, #12
 8002162:	e70b      	b.n	8001f7c <__aeabi_dsub+0x38c>
 8002164:	08c0      	lsrs	r0, r0, #3
 8002166:	077b      	lsls	r3, r7, #29
 8002168:	465d      	mov	r5, fp
 800216a:	4303      	orrs	r3, r0
 800216c:	08fa      	lsrs	r2, r7, #3
 800216e:	e6d3      	b.n	8001f18 <__aeabi_dsub+0x328>
 8002170:	1ac4      	subs	r4, r0, r3
 8002172:	42a0      	cmp	r0, r4
 8002174:	4180      	sbcs	r0, r0
 8002176:	464b      	mov	r3, r9
 8002178:	4240      	negs	r0, r0
 800217a:	1aff      	subs	r7, r7, r3
 800217c:	1a3b      	subs	r3, r7, r0
 800217e:	469a      	mov	sl, r3
 8002180:	465d      	mov	r5, fp
 8002182:	e597      	b.n	8001cb4 <__aeabi_dsub+0xc4>
 8002184:	1a1c      	subs	r4, r3, r0
 8002186:	464a      	mov	r2, r9
 8002188:	42a3      	cmp	r3, r4
 800218a:	419b      	sbcs	r3, r3
 800218c:	1bd7      	subs	r7, r2, r7
 800218e:	425b      	negs	r3, r3
 8002190:	1afb      	subs	r3, r7, r3
 8002192:	469a      	mov	sl, r3
 8002194:	2601      	movs	r6, #1
 8002196:	e585      	b.n	8001ca4 <__aeabi_dsub+0xb4>
 8002198:	08c0      	lsrs	r0, r0, #3
 800219a:	077b      	lsls	r3, r7, #29
 800219c:	465d      	mov	r5, fp
 800219e:	4303      	orrs	r3, r0
 80021a0:	08fa      	lsrs	r2, r7, #3
 80021a2:	e6e7      	b.n	8001f74 <__aeabi_dsub+0x384>
 80021a4:	464a      	mov	r2, r9
 80021a6:	08db      	lsrs	r3, r3, #3
 80021a8:	0752      	lsls	r2, r2, #29
 80021aa:	4313      	orrs	r3, r2
 80021ac:	464a      	mov	r2, r9
 80021ae:	08d2      	lsrs	r2, r2, #3
 80021b0:	e6b5      	b.n	8001f1e <__aeabi_dsub+0x32e>
 80021b2:	08c0      	lsrs	r0, r0, #3
 80021b4:	077b      	lsls	r3, r7, #29
 80021b6:	4303      	orrs	r3, r0
 80021b8:	08fa      	lsrs	r2, r7, #3
 80021ba:	e6db      	b.n	8001f74 <__aeabi_dsub+0x384>
 80021bc:	4649      	mov	r1, r9
 80021be:	4319      	orrs	r1, r3
 80021c0:	000b      	movs	r3, r1
 80021c2:	1e59      	subs	r1, r3, #1
 80021c4:	418b      	sbcs	r3, r1
 80021c6:	001c      	movs	r4, r3
 80021c8:	e653      	b.n	8001e72 <__aeabi_dsub+0x282>
 80021ca:	464d      	mov	r5, r9
 80021cc:	3c20      	subs	r4, #32
 80021ce:	40e5      	lsrs	r5, r4
 80021d0:	2920      	cmp	r1, #32
 80021d2:	d005      	beq.n	80021e0 <__aeabi_dsub+0x5f0>
 80021d4:	2440      	movs	r4, #64	; 0x40
 80021d6:	1a64      	subs	r4, r4, r1
 80021d8:	4649      	mov	r1, r9
 80021da:	40a1      	lsls	r1, r4
 80021dc:	430b      	orrs	r3, r1
 80021de:	4698      	mov	r8, r3
 80021e0:	4643      	mov	r3, r8
 80021e2:	1e5c      	subs	r4, r3, #1
 80021e4:	41a3      	sbcs	r3, r4
 80021e6:	432b      	orrs	r3, r5
 80021e8:	e776      	b.n	80020d8 <__aeabi_dsub+0x4e8>
 80021ea:	2a00      	cmp	r2, #0
 80021ec:	d0e1      	beq.n	80021b2 <__aeabi_dsub+0x5c2>
 80021ee:	003a      	movs	r2, r7
 80021f0:	08db      	lsrs	r3, r3, #3
 80021f2:	4302      	orrs	r2, r0
 80021f4:	d100      	bne.n	80021f8 <__aeabi_dsub+0x608>
 80021f6:	e6b8      	b.n	8001f6a <__aeabi_dsub+0x37a>
 80021f8:	464a      	mov	r2, r9
 80021fa:	0752      	lsls	r2, r2, #29
 80021fc:	2480      	movs	r4, #128	; 0x80
 80021fe:	4313      	orrs	r3, r2
 8002200:	464a      	mov	r2, r9
 8002202:	0324      	lsls	r4, r4, #12
 8002204:	08d2      	lsrs	r2, r2, #3
 8002206:	4222      	tst	r2, r4
 8002208:	d007      	beq.n	800221a <__aeabi_dsub+0x62a>
 800220a:	08fe      	lsrs	r6, r7, #3
 800220c:	4226      	tst	r6, r4
 800220e:	d104      	bne.n	800221a <__aeabi_dsub+0x62a>
 8002210:	465d      	mov	r5, fp
 8002212:	0032      	movs	r2, r6
 8002214:	08c3      	lsrs	r3, r0, #3
 8002216:	077f      	lsls	r7, r7, #29
 8002218:	433b      	orrs	r3, r7
 800221a:	0f59      	lsrs	r1, r3, #29
 800221c:	00db      	lsls	r3, r3, #3
 800221e:	0749      	lsls	r1, r1, #29
 8002220:	08db      	lsrs	r3, r3, #3
 8002222:	430b      	orrs	r3, r1
 8002224:	e6a6      	b.n	8001f74 <__aeabi_dsub+0x384>
 8002226:	1ac4      	subs	r4, r0, r3
 8002228:	42a0      	cmp	r0, r4
 800222a:	4180      	sbcs	r0, r0
 800222c:	464b      	mov	r3, r9
 800222e:	4240      	negs	r0, r0
 8002230:	1aff      	subs	r7, r7, r3
 8002232:	1a3b      	subs	r3, r7, r0
 8002234:	469a      	mov	sl, r3
 8002236:	465d      	mov	r5, fp
 8002238:	2601      	movs	r6, #1
 800223a:	e533      	b.n	8001ca4 <__aeabi_dsub+0xb4>
 800223c:	003b      	movs	r3, r7
 800223e:	4303      	orrs	r3, r0
 8002240:	d100      	bne.n	8002244 <__aeabi_dsub+0x654>
 8002242:	e715      	b.n	8002070 <__aeabi_dsub+0x480>
 8002244:	08c0      	lsrs	r0, r0, #3
 8002246:	077b      	lsls	r3, r7, #29
 8002248:	465d      	mov	r5, fp
 800224a:	4303      	orrs	r3, r0
 800224c:	08fa      	lsrs	r2, r7, #3
 800224e:	e666      	b.n	8001f1e <__aeabi_dsub+0x32e>
 8002250:	08c0      	lsrs	r0, r0, #3
 8002252:	077b      	lsls	r3, r7, #29
 8002254:	4303      	orrs	r3, r0
 8002256:	08fa      	lsrs	r2, r7, #3
 8002258:	e65e      	b.n	8001f18 <__aeabi_dsub+0x328>
 800225a:	003a      	movs	r2, r7
 800225c:	08db      	lsrs	r3, r3, #3
 800225e:	4302      	orrs	r2, r0
 8002260:	d100      	bne.n	8002264 <__aeabi_dsub+0x674>
 8002262:	e682      	b.n	8001f6a <__aeabi_dsub+0x37a>
 8002264:	464a      	mov	r2, r9
 8002266:	0752      	lsls	r2, r2, #29
 8002268:	2480      	movs	r4, #128	; 0x80
 800226a:	4313      	orrs	r3, r2
 800226c:	464a      	mov	r2, r9
 800226e:	0324      	lsls	r4, r4, #12
 8002270:	08d2      	lsrs	r2, r2, #3
 8002272:	4222      	tst	r2, r4
 8002274:	d007      	beq.n	8002286 <__aeabi_dsub+0x696>
 8002276:	08fe      	lsrs	r6, r7, #3
 8002278:	4226      	tst	r6, r4
 800227a:	d104      	bne.n	8002286 <__aeabi_dsub+0x696>
 800227c:	465d      	mov	r5, fp
 800227e:	0032      	movs	r2, r6
 8002280:	08c3      	lsrs	r3, r0, #3
 8002282:	077f      	lsls	r7, r7, #29
 8002284:	433b      	orrs	r3, r7
 8002286:	0f59      	lsrs	r1, r3, #29
 8002288:	00db      	lsls	r3, r3, #3
 800228a:	08db      	lsrs	r3, r3, #3
 800228c:	0749      	lsls	r1, r1, #29
 800228e:	430b      	orrs	r3, r1
 8002290:	e670      	b.n	8001f74 <__aeabi_dsub+0x384>
 8002292:	08c0      	lsrs	r0, r0, #3
 8002294:	077b      	lsls	r3, r7, #29
 8002296:	4303      	orrs	r3, r0
 8002298:	08fa      	lsrs	r2, r7, #3
 800229a:	e640      	b.n	8001f1e <__aeabi_dsub+0x32e>
 800229c:	464c      	mov	r4, r9
 800229e:	3920      	subs	r1, #32
 80022a0:	40cc      	lsrs	r4, r1
 80022a2:	4661      	mov	r1, ip
 80022a4:	2920      	cmp	r1, #32
 80022a6:	d006      	beq.n	80022b6 <__aeabi_dsub+0x6c6>
 80022a8:	4666      	mov	r6, ip
 80022aa:	2140      	movs	r1, #64	; 0x40
 80022ac:	1b89      	subs	r1, r1, r6
 80022ae:	464e      	mov	r6, r9
 80022b0:	408e      	lsls	r6, r1
 80022b2:	4333      	orrs	r3, r6
 80022b4:	4698      	mov	r8, r3
 80022b6:	4643      	mov	r3, r8
 80022b8:	1e59      	subs	r1, r3, #1
 80022ba:	418b      	sbcs	r3, r1
 80022bc:	431c      	orrs	r4, r3
 80022be:	e5d8      	b.n	8001e72 <__aeabi_dsub+0x282>
 80022c0:	181c      	adds	r4, r3, r0
 80022c2:	4284      	cmp	r4, r0
 80022c4:	4180      	sbcs	r0, r0
 80022c6:	444f      	add	r7, r9
 80022c8:	46ba      	mov	sl, r7
 80022ca:	4240      	negs	r0, r0
 80022cc:	4482      	add	sl, r0
 80022ce:	e6d9      	b.n	8002084 <__aeabi_dsub+0x494>
 80022d0:	4653      	mov	r3, sl
 80022d2:	4323      	orrs	r3, r4
 80022d4:	d100      	bne.n	80022d8 <__aeabi_dsub+0x6e8>
 80022d6:	e6cb      	b.n	8002070 <__aeabi_dsub+0x480>
 80022d8:	e614      	b.n	8001f04 <__aeabi_dsub+0x314>
 80022da:	46c0      	nop			; (mov r8, r8)
 80022dc:	000007ff 	.word	0x000007ff
 80022e0:	ff7fffff 	.word	0xff7fffff
 80022e4:	000007fe 	.word	0x000007fe
 80022e8:	2300      	movs	r3, #0
 80022ea:	4a01      	ldr	r2, [pc, #4]	; (80022f0 <__aeabi_dsub+0x700>)
 80022ec:	001c      	movs	r4, r3
 80022ee:	e529      	b.n	8001d44 <__aeabi_dsub+0x154>
 80022f0:	000007ff 	.word	0x000007ff

080022f4 <__aeabi_dcmpun>:
 80022f4:	b570      	push	{r4, r5, r6, lr}
 80022f6:	0005      	movs	r5, r0
 80022f8:	480c      	ldr	r0, [pc, #48]	; (800232c <__aeabi_dcmpun+0x38>)
 80022fa:	031c      	lsls	r4, r3, #12
 80022fc:	0016      	movs	r6, r2
 80022fe:	005b      	lsls	r3, r3, #1
 8002300:	030a      	lsls	r2, r1, #12
 8002302:	0049      	lsls	r1, r1, #1
 8002304:	0b12      	lsrs	r2, r2, #12
 8002306:	0d49      	lsrs	r1, r1, #21
 8002308:	0b24      	lsrs	r4, r4, #12
 800230a:	0d5b      	lsrs	r3, r3, #21
 800230c:	4281      	cmp	r1, r0
 800230e:	d008      	beq.n	8002322 <__aeabi_dcmpun+0x2e>
 8002310:	4a06      	ldr	r2, [pc, #24]	; (800232c <__aeabi_dcmpun+0x38>)
 8002312:	2000      	movs	r0, #0
 8002314:	4293      	cmp	r3, r2
 8002316:	d103      	bne.n	8002320 <__aeabi_dcmpun+0x2c>
 8002318:	0020      	movs	r0, r4
 800231a:	4330      	orrs	r0, r6
 800231c:	1e43      	subs	r3, r0, #1
 800231e:	4198      	sbcs	r0, r3
 8002320:	bd70      	pop	{r4, r5, r6, pc}
 8002322:	2001      	movs	r0, #1
 8002324:	432a      	orrs	r2, r5
 8002326:	d1fb      	bne.n	8002320 <__aeabi_dcmpun+0x2c>
 8002328:	e7f2      	b.n	8002310 <__aeabi_dcmpun+0x1c>
 800232a:	46c0      	nop			; (mov r8, r8)
 800232c:	000007ff 	.word	0x000007ff

08002330 <__aeabi_d2iz>:
 8002330:	000a      	movs	r2, r1
 8002332:	b530      	push	{r4, r5, lr}
 8002334:	4c13      	ldr	r4, [pc, #76]	; (8002384 <__aeabi_d2iz+0x54>)
 8002336:	0053      	lsls	r3, r2, #1
 8002338:	0309      	lsls	r1, r1, #12
 800233a:	0005      	movs	r5, r0
 800233c:	0b09      	lsrs	r1, r1, #12
 800233e:	2000      	movs	r0, #0
 8002340:	0d5b      	lsrs	r3, r3, #21
 8002342:	0fd2      	lsrs	r2, r2, #31
 8002344:	42a3      	cmp	r3, r4
 8002346:	dd04      	ble.n	8002352 <__aeabi_d2iz+0x22>
 8002348:	480f      	ldr	r0, [pc, #60]	; (8002388 <__aeabi_d2iz+0x58>)
 800234a:	4283      	cmp	r3, r0
 800234c:	dd02      	ble.n	8002354 <__aeabi_d2iz+0x24>
 800234e:	4b0f      	ldr	r3, [pc, #60]	; (800238c <__aeabi_d2iz+0x5c>)
 8002350:	18d0      	adds	r0, r2, r3
 8002352:	bd30      	pop	{r4, r5, pc}
 8002354:	2080      	movs	r0, #128	; 0x80
 8002356:	0340      	lsls	r0, r0, #13
 8002358:	4301      	orrs	r1, r0
 800235a:	480d      	ldr	r0, [pc, #52]	; (8002390 <__aeabi_d2iz+0x60>)
 800235c:	1ac0      	subs	r0, r0, r3
 800235e:	281f      	cmp	r0, #31
 8002360:	dd08      	ble.n	8002374 <__aeabi_d2iz+0x44>
 8002362:	480c      	ldr	r0, [pc, #48]	; (8002394 <__aeabi_d2iz+0x64>)
 8002364:	1ac3      	subs	r3, r0, r3
 8002366:	40d9      	lsrs	r1, r3
 8002368:	000b      	movs	r3, r1
 800236a:	4258      	negs	r0, r3
 800236c:	2a00      	cmp	r2, #0
 800236e:	d1f0      	bne.n	8002352 <__aeabi_d2iz+0x22>
 8002370:	0018      	movs	r0, r3
 8002372:	e7ee      	b.n	8002352 <__aeabi_d2iz+0x22>
 8002374:	4c08      	ldr	r4, [pc, #32]	; (8002398 <__aeabi_d2iz+0x68>)
 8002376:	40c5      	lsrs	r5, r0
 8002378:	46a4      	mov	ip, r4
 800237a:	4463      	add	r3, ip
 800237c:	4099      	lsls	r1, r3
 800237e:	000b      	movs	r3, r1
 8002380:	432b      	orrs	r3, r5
 8002382:	e7f2      	b.n	800236a <__aeabi_d2iz+0x3a>
 8002384:	000003fe 	.word	0x000003fe
 8002388:	0000041d 	.word	0x0000041d
 800238c:	7fffffff 	.word	0x7fffffff
 8002390:	00000433 	.word	0x00000433
 8002394:	00000413 	.word	0x00000413
 8002398:	fffffbed 	.word	0xfffffbed

0800239c <__aeabi_i2d>:
 800239c:	b570      	push	{r4, r5, r6, lr}
 800239e:	2800      	cmp	r0, #0
 80023a0:	d016      	beq.n	80023d0 <__aeabi_i2d+0x34>
 80023a2:	17c3      	asrs	r3, r0, #31
 80023a4:	18c5      	adds	r5, r0, r3
 80023a6:	405d      	eors	r5, r3
 80023a8:	0fc4      	lsrs	r4, r0, #31
 80023aa:	0028      	movs	r0, r5
 80023ac:	f000 f8d2 	bl	8002554 <__clzsi2>
 80023b0:	4b11      	ldr	r3, [pc, #68]	; (80023f8 <__aeabi_i2d+0x5c>)
 80023b2:	1a1b      	subs	r3, r3, r0
 80023b4:	280a      	cmp	r0, #10
 80023b6:	dc16      	bgt.n	80023e6 <__aeabi_i2d+0x4a>
 80023b8:	0002      	movs	r2, r0
 80023ba:	002e      	movs	r6, r5
 80023bc:	3215      	adds	r2, #21
 80023be:	4096      	lsls	r6, r2
 80023c0:	220b      	movs	r2, #11
 80023c2:	1a12      	subs	r2, r2, r0
 80023c4:	40d5      	lsrs	r5, r2
 80023c6:	055b      	lsls	r3, r3, #21
 80023c8:	032d      	lsls	r5, r5, #12
 80023ca:	0b2d      	lsrs	r5, r5, #12
 80023cc:	0d5b      	lsrs	r3, r3, #21
 80023ce:	e003      	b.n	80023d8 <__aeabi_i2d+0x3c>
 80023d0:	2400      	movs	r4, #0
 80023d2:	2300      	movs	r3, #0
 80023d4:	2500      	movs	r5, #0
 80023d6:	2600      	movs	r6, #0
 80023d8:	051b      	lsls	r3, r3, #20
 80023da:	432b      	orrs	r3, r5
 80023dc:	07e4      	lsls	r4, r4, #31
 80023de:	4323      	orrs	r3, r4
 80023e0:	0030      	movs	r0, r6
 80023e2:	0019      	movs	r1, r3
 80023e4:	bd70      	pop	{r4, r5, r6, pc}
 80023e6:	380b      	subs	r0, #11
 80023e8:	4085      	lsls	r5, r0
 80023ea:	055b      	lsls	r3, r3, #21
 80023ec:	032d      	lsls	r5, r5, #12
 80023ee:	2600      	movs	r6, #0
 80023f0:	0b2d      	lsrs	r5, r5, #12
 80023f2:	0d5b      	lsrs	r3, r3, #21
 80023f4:	e7f0      	b.n	80023d8 <__aeabi_i2d+0x3c>
 80023f6:	46c0      	nop			; (mov r8, r8)
 80023f8:	0000041e 	.word	0x0000041e

080023fc <__aeabi_ui2d>:
 80023fc:	b510      	push	{r4, lr}
 80023fe:	1e04      	subs	r4, r0, #0
 8002400:	d010      	beq.n	8002424 <__aeabi_ui2d+0x28>
 8002402:	f000 f8a7 	bl	8002554 <__clzsi2>
 8002406:	4b0f      	ldr	r3, [pc, #60]	; (8002444 <__aeabi_ui2d+0x48>)
 8002408:	1a1b      	subs	r3, r3, r0
 800240a:	280a      	cmp	r0, #10
 800240c:	dc11      	bgt.n	8002432 <__aeabi_ui2d+0x36>
 800240e:	220b      	movs	r2, #11
 8002410:	0021      	movs	r1, r4
 8002412:	1a12      	subs	r2, r2, r0
 8002414:	40d1      	lsrs	r1, r2
 8002416:	3015      	adds	r0, #21
 8002418:	030a      	lsls	r2, r1, #12
 800241a:	055b      	lsls	r3, r3, #21
 800241c:	4084      	lsls	r4, r0
 800241e:	0b12      	lsrs	r2, r2, #12
 8002420:	0d5b      	lsrs	r3, r3, #21
 8002422:	e001      	b.n	8002428 <__aeabi_ui2d+0x2c>
 8002424:	2300      	movs	r3, #0
 8002426:	2200      	movs	r2, #0
 8002428:	051b      	lsls	r3, r3, #20
 800242a:	4313      	orrs	r3, r2
 800242c:	0020      	movs	r0, r4
 800242e:	0019      	movs	r1, r3
 8002430:	bd10      	pop	{r4, pc}
 8002432:	0022      	movs	r2, r4
 8002434:	380b      	subs	r0, #11
 8002436:	4082      	lsls	r2, r0
 8002438:	055b      	lsls	r3, r3, #21
 800243a:	0312      	lsls	r2, r2, #12
 800243c:	2400      	movs	r4, #0
 800243e:	0b12      	lsrs	r2, r2, #12
 8002440:	0d5b      	lsrs	r3, r3, #21
 8002442:	e7f1      	b.n	8002428 <__aeabi_ui2d+0x2c>
 8002444:	0000041e 	.word	0x0000041e

08002448 <__aeabi_d2f>:
 8002448:	0002      	movs	r2, r0
 800244a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800244c:	004b      	lsls	r3, r1, #1
 800244e:	030d      	lsls	r5, r1, #12
 8002450:	0f40      	lsrs	r0, r0, #29
 8002452:	0d5b      	lsrs	r3, r3, #21
 8002454:	0fcc      	lsrs	r4, r1, #31
 8002456:	0a6d      	lsrs	r5, r5, #9
 8002458:	493a      	ldr	r1, [pc, #232]	; (8002544 <__aeabi_d2f+0xfc>)
 800245a:	4305      	orrs	r5, r0
 800245c:	1c58      	adds	r0, r3, #1
 800245e:	00d7      	lsls	r7, r2, #3
 8002460:	4208      	tst	r0, r1
 8002462:	d00a      	beq.n	800247a <__aeabi_d2f+0x32>
 8002464:	4938      	ldr	r1, [pc, #224]	; (8002548 <__aeabi_d2f+0x100>)
 8002466:	1859      	adds	r1, r3, r1
 8002468:	29fe      	cmp	r1, #254	; 0xfe
 800246a:	dd16      	ble.n	800249a <__aeabi_d2f+0x52>
 800246c:	20ff      	movs	r0, #255	; 0xff
 800246e:	2200      	movs	r2, #0
 8002470:	05c0      	lsls	r0, r0, #23
 8002472:	4310      	orrs	r0, r2
 8002474:	07e4      	lsls	r4, r4, #31
 8002476:	4320      	orrs	r0, r4
 8002478:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800247a:	2b00      	cmp	r3, #0
 800247c:	d106      	bne.n	800248c <__aeabi_d2f+0x44>
 800247e:	433d      	orrs	r5, r7
 8002480:	d026      	beq.n	80024d0 <__aeabi_d2f+0x88>
 8002482:	2205      	movs	r2, #5
 8002484:	0192      	lsls	r2, r2, #6
 8002486:	0a52      	lsrs	r2, r2, #9
 8002488:	b2d8      	uxtb	r0, r3
 800248a:	e7f1      	b.n	8002470 <__aeabi_d2f+0x28>
 800248c:	432f      	orrs	r7, r5
 800248e:	d0ed      	beq.n	800246c <__aeabi_d2f+0x24>
 8002490:	2280      	movs	r2, #128	; 0x80
 8002492:	03d2      	lsls	r2, r2, #15
 8002494:	20ff      	movs	r0, #255	; 0xff
 8002496:	432a      	orrs	r2, r5
 8002498:	e7ea      	b.n	8002470 <__aeabi_d2f+0x28>
 800249a:	2900      	cmp	r1, #0
 800249c:	dd1b      	ble.n	80024d6 <__aeabi_d2f+0x8e>
 800249e:	0192      	lsls	r2, r2, #6
 80024a0:	1e50      	subs	r0, r2, #1
 80024a2:	4182      	sbcs	r2, r0
 80024a4:	00ed      	lsls	r5, r5, #3
 80024a6:	0f7f      	lsrs	r7, r7, #29
 80024a8:	432a      	orrs	r2, r5
 80024aa:	433a      	orrs	r2, r7
 80024ac:	0753      	lsls	r3, r2, #29
 80024ae:	d047      	beq.n	8002540 <__aeabi_d2f+0xf8>
 80024b0:	230f      	movs	r3, #15
 80024b2:	4013      	ands	r3, r2
 80024b4:	2b04      	cmp	r3, #4
 80024b6:	d000      	beq.n	80024ba <__aeabi_d2f+0x72>
 80024b8:	3204      	adds	r2, #4
 80024ba:	2380      	movs	r3, #128	; 0x80
 80024bc:	04db      	lsls	r3, r3, #19
 80024be:	4013      	ands	r3, r2
 80024c0:	d03e      	beq.n	8002540 <__aeabi_d2f+0xf8>
 80024c2:	1c48      	adds	r0, r1, #1
 80024c4:	29fe      	cmp	r1, #254	; 0xfe
 80024c6:	d0d1      	beq.n	800246c <__aeabi_d2f+0x24>
 80024c8:	0192      	lsls	r2, r2, #6
 80024ca:	0a52      	lsrs	r2, r2, #9
 80024cc:	b2c0      	uxtb	r0, r0
 80024ce:	e7cf      	b.n	8002470 <__aeabi_d2f+0x28>
 80024d0:	2000      	movs	r0, #0
 80024d2:	2200      	movs	r2, #0
 80024d4:	e7cc      	b.n	8002470 <__aeabi_d2f+0x28>
 80024d6:	000a      	movs	r2, r1
 80024d8:	3217      	adds	r2, #23
 80024da:	db2f      	blt.n	800253c <__aeabi_d2f+0xf4>
 80024dc:	2680      	movs	r6, #128	; 0x80
 80024de:	0436      	lsls	r6, r6, #16
 80024e0:	432e      	orrs	r6, r5
 80024e2:	251e      	movs	r5, #30
 80024e4:	1a6d      	subs	r5, r5, r1
 80024e6:	2d1f      	cmp	r5, #31
 80024e8:	dd11      	ble.n	800250e <__aeabi_d2f+0xc6>
 80024ea:	2202      	movs	r2, #2
 80024ec:	4252      	negs	r2, r2
 80024ee:	1a52      	subs	r2, r2, r1
 80024f0:	0031      	movs	r1, r6
 80024f2:	40d1      	lsrs	r1, r2
 80024f4:	2d20      	cmp	r5, #32
 80024f6:	d004      	beq.n	8002502 <__aeabi_d2f+0xba>
 80024f8:	4a14      	ldr	r2, [pc, #80]	; (800254c <__aeabi_d2f+0x104>)
 80024fa:	4694      	mov	ip, r2
 80024fc:	4463      	add	r3, ip
 80024fe:	409e      	lsls	r6, r3
 8002500:	4337      	orrs	r7, r6
 8002502:	003a      	movs	r2, r7
 8002504:	1e53      	subs	r3, r2, #1
 8002506:	419a      	sbcs	r2, r3
 8002508:	430a      	orrs	r2, r1
 800250a:	2100      	movs	r1, #0
 800250c:	e7ce      	b.n	80024ac <__aeabi_d2f+0x64>
 800250e:	4a10      	ldr	r2, [pc, #64]	; (8002550 <__aeabi_d2f+0x108>)
 8002510:	0038      	movs	r0, r7
 8002512:	4694      	mov	ip, r2
 8002514:	4463      	add	r3, ip
 8002516:	4098      	lsls	r0, r3
 8002518:	003a      	movs	r2, r7
 800251a:	1e41      	subs	r1, r0, #1
 800251c:	4188      	sbcs	r0, r1
 800251e:	409e      	lsls	r6, r3
 8002520:	40ea      	lsrs	r2, r5
 8002522:	4330      	orrs	r0, r6
 8002524:	4302      	orrs	r2, r0
 8002526:	2100      	movs	r1, #0
 8002528:	0753      	lsls	r3, r2, #29
 800252a:	d1c1      	bne.n	80024b0 <__aeabi_d2f+0x68>
 800252c:	2180      	movs	r1, #128	; 0x80
 800252e:	0013      	movs	r3, r2
 8002530:	04c9      	lsls	r1, r1, #19
 8002532:	2001      	movs	r0, #1
 8002534:	400b      	ands	r3, r1
 8002536:	420a      	tst	r2, r1
 8002538:	d1c6      	bne.n	80024c8 <__aeabi_d2f+0x80>
 800253a:	e7a3      	b.n	8002484 <__aeabi_d2f+0x3c>
 800253c:	2300      	movs	r3, #0
 800253e:	e7a0      	b.n	8002482 <__aeabi_d2f+0x3a>
 8002540:	000b      	movs	r3, r1
 8002542:	e79f      	b.n	8002484 <__aeabi_d2f+0x3c>
 8002544:	000007fe 	.word	0x000007fe
 8002548:	fffffc80 	.word	0xfffffc80
 800254c:	fffffca2 	.word	0xfffffca2
 8002550:	fffffc82 	.word	0xfffffc82

08002554 <__clzsi2>:
 8002554:	211c      	movs	r1, #28
 8002556:	2301      	movs	r3, #1
 8002558:	041b      	lsls	r3, r3, #16
 800255a:	4298      	cmp	r0, r3
 800255c:	d301      	bcc.n	8002562 <__clzsi2+0xe>
 800255e:	0c00      	lsrs	r0, r0, #16
 8002560:	3910      	subs	r1, #16
 8002562:	0a1b      	lsrs	r3, r3, #8
 8002564:	4298      	cmp	r0, r3
 8002566:	d301      	bcc.n	800256c <__clzsi2+0x18>
 8002568:	0a00      	lsrs	r0, r0, #8
 800256a:	3908      	subs	r1, #8
 800256c:	091b      	lsrs	r3, r3, #4
 800256e:	4298      	cmp	r0, r3
 8002570:	d301      	bcc.n	8002576 <__clzsi2+0x22>
 8002572:	0900      	lsrs	r0, r0, #4
 8002574:	3904      	subs	r1, #4
 8002576:	a202      	add	r2, pc, #8	; (adr r2, 8002580 <__clzsi2+0x2c>)
 8002578:	5c10      	ldrb	r0, [r2, r0]
 800257a:	1840      	adds	r0, r0, r1
 800257c:	4770      	bx	lr
 800257e:	46c0      	nop			; (mov r8, r8)
 8002580:	02020304 	.word	0x02020304
 8002584:	01010101 	.word	0x01010101
	...

08002590 <__clzdi2>:
 8002590:	b510      	push	{r4, lr}
 8002592:	2900      	cmp	r1, #0
 8002594:	d103      	bne.n	800259e <__clzdi2+0xe>
 8002596:	f7ff ffdd 	bl	8002554 <__clzsi2>
 800259a:	3020      	adds	r0, #32
 800259c:	e002      	b.n	80025a4 <__clzdi2+0x14>
 800259e:	0008      	movs	r0, r1
 80025a0:	f7ff ffd8 	bl	8002554 <__clzsi2>
 80025a4:	bd10      	pop	{r4, pc}
 80025a6:	46c0      	nop			; (mov r8, r8)

080025a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80025a8:	b590      	push	{r4, r7, lr}
 80025aa:	b0c7      	sub	sp, #284	; 0x11c
 80025ac:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80025ae:	f001 f93f 	bl	8003830 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80025b2:	f000 f999 	bl	80028e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80025b6:	f000 fba5 	bl	8002d04 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80025ba:	f000 fad3 	bl	8002b64 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 80025be:	f000 fb1f 	bl	8002c00 <MX_USART3_UART_Init>
  MX_USART5_UART_Init();
 80025c2:	f000 fb6b 	bl	8002c9c <MX_USART5_UART_Init>
  MX_SPI1_Init();
 80025c6:	f000 fa51 	bl	8002a6c <MX_SPI1_Init>
  MX_TIM6_Init();
 80025ca:	f000 fa8d 	bl	8002ae8 <MX_TIM6_Init>
  MX_RTC_Init();
 80025ce:	f000 f9e1 	bl	8002994 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Transmit ( HUART_DBG , (uint8_t*) hello , strlen ( hello ) , UART_TIMEOUT ) ;
 80025d2:	4bab      	ldr	r3, [pc, #684]	; (8002880 <main+0x2d8>)
 80025d4:	681c      	ldr	r4, [r3, #0]
 80025d6:	4baa      	ldr	r3, [pc, #680]	; (8002880 <main+0x2d8>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	0018      	movs	r0, r3
 80025dc:	f7fd fd92 	bl	8000104 <strlen>
 80025e0:	0003      	movs	r3, r0
 80025e2:	b29a      	uxth	r2, r3
 80025e4:	23fa      	movs	r3, #250	; 0xfa
 80025e6:	009b      	lsls	r3, r3, #2
 80025e8:	48a6      	ldr	r0, [pc, #664]	; (8002884 <main+0x2dc>)
 80025ea:	0021      	movs	r1, r4
 80025ec:	f004 fab6 	bl	8006b5c <HAL_UART_Transmit>
  my_tim_init () ;
 80025f0:	f000 fd44 	bl	800307c <my_tim_init>
  send_debug_logs ( "The device test started. You have max. 10 minutes to complete each steps.\n" ) ;
 80025f4:	4ba4      	ldr	r3, [pc, #656]	; (8002888 <main+0x2e0>)
 80025f6:	0018      	movs	r0, r3
 80025f8:	f000 fc44 	bl	8002e84 <send_debug_logs>

  // ACC TEST
  my_tim_start () ;
 80025fc:	f000 fd4a 	bl	8003094 <my_tim_start>
  while ( tim_seconds < 30 )
 8002600:	e048      	b.n	8002694 <main+0xec>
  {
	  send_debug_logs ( "* LIS2DW12 test started. Try to complete it within 30 seconds." ) ;
 8002602:	4ba2      	ldr	r3, [pc, #648]	; (800288c <main+0x2e4>)
 8002604:	0018      	movs	r0, r3
 8002606:	f000 fc3d 	bl	8002e84 <send_debug_logs>
	  my_acc_ctx.write_reg = my_lis2dw12_platform_write ;
 800260a:	4ba1      	ldr	r3, [pc, #644]	; (8002890 <main+0x2e8>)
 800260c:	4aa1      	ldr	r2, [pc, #644]	; (8002894 <main+0x2ec>)
 800260e:	601a      	str	r2, [r3, #0]
	  my_acc_ctx.read_reg = my_lis2dw12_platform_read ;
 8002610:	4b9f      	ldr	r3, [pc, #636]	; (8002890 <main+0x2e8>)
 8002612:	4aa1      	ldr	r2, [pc, #644]	; (8002898 <main+0x2f0>)
 8002614:	605a      	str	r2, [r3, #4]
	  my_acc_ctx.handle = HACC ;
 8002616:	4b9e      	ldr	r3, [pc, #632]	; (8002890 <main+0x2e8>)
 8002618:	4aa0      	ldr	r2, [pc, #640]	; (800289c <main+0x2f4>)
 800261a:	60da      	str	r2, [r3, #12]
	  if ( my_lis2dw12_init ( &my_acc_ctx ) )
 800261c:	4b9c      	ldr	r3, [pc, #624]	; (8002890 <main+0x2e8>)
 800261e:	0018      	movs	r0, r3
 8002620:	f006 faf6 	bl	8008c10 <my_lis2dw12_init>
 8002624:	1e03      	subs	r3, r0, #0
 8002626:	d004      	beq.n	8002632 <main+0x8a>
	  {
		  send_debug_logs ( "** LIS2DW12 has been initialized." ) ;
 8002628:	4b9d      	ldr	r3, [pc, #628]	; (80028a0 <main+0x2f8>)
 800262a:	0018      	movs	r0, r3
 800262c:	f000 fc2a 	bl	8002e84 <send_debug_logs>
 8002630:	e003      	b.n	800263a <main+0x92>
	  }
	  else
	  {
		  send_debug_logs ( "** LIS2DW12 has not been initialized." ) ;
 8002632:	4b9c      	ldr	r3, [pc, #624]	; (80028a4 <main+0x2fc>)
 8002634:	0018      	movs	r0, r3
 8002636:	f000 fc25 	bl	8002e84 <send_debug_logs>
	  }
	  my_lis2dw12_int1_wu_enable ( &my_acc_ctx ) ;
 800263a:	4b95      	ldr	r3, [pc, #596]	; (8002890 <main+0x2e8>)
 800263c:	0018      	movs	r0, r3
 800263e:	f006 fb40 	bl	8008cc2 <my_lis2dw12_int1_wu_enable>
	  send_debug_logs ( "** LIS2DW12 wakeup int1 has been enabled. Try to wake up the device." ) ;
 8002642:	4b99      	ldr	r3, [pc, #612]	; (80028a8 <main+0x300>)
 8002644:	0018      	movs	r0, r3
 8002646:	f000 fc1d 	bl	8002e84 <send_debug_logs>
	  while ( !test && tim_seconds < 30 )
 800264a:	e010      	b.n	800266e <main+0xc6>
	  {
		  if ( HAL_GPIO_ReadPin ( ACC_INT1_GPIO_Port , ACC_INT1_Pin ) == GPIO_PIN_SET )
 800264c:	23a0      	movs	r3, #160	; 0xa0
 800264e:	05db      	lsls	r3, r3, #23
 8002650:	2101      	movs	r1, #1
 8002652:	0018      	movs	r0, r3
 8002654:	f001 fcce 	bl	8003ff4 <HAL_GPIO_ReadPin>
 8002658:	0003      	movs	r3, r0
 800265a:	2b01      	cmp	r3, #1
 800265c:	d107      	bne.n	800266e <main+0xc6>
		  {
			  test = true ;
 800265e:	4b93      	ldr	r3, [pc, #588]	; (80028ac <main+0x304>)
 8002660:	2201      	movs	r2, #1
 8002662:	701a      	strb	r2, [r3, #0]
			  send_debug_logs ( "* Good! LIS2DW12 test has been accomplished." ) ;
 8002664:	4b92      	ldr	r3, [pc, #584]	; (80028b0 <main+0x308>)
 8002666:	0018      	movs	r0, r3
 8002668:	f000 fc0c 	bl	8002e84 <send_debug_logs>
			  break ;
 800266c:	e00a      	b.n	8002684 <main+0xdc>
	  while ( !test && tim_seconds < 30 )
 800266e:	4b8f      	ldr	r3, [pc, #572]	; (80028ac <main+0x304>)
 8002670:	781b      	ldrb	r3, [r3, #0]
 8002672:	2201      	movs	r2, #1
 8002674:	4053      	eors	r3, r2
 8002676:	b2db      	uxtb	r3, r3
 8002678:	2b00      	cmp	r3, #0
 800267a:	d003      	beq.n	8002684 <main+0xdc>
 800267c:	4b8d      	ldr	r3, [pc, #564]	; (80028b4 <main+0x30c>)
 800267e:	881b      	ldrh	r3, [r3, #0]
 8002680:	2b1d      	cmp	r3, #29
 8002682:	d9e3      	bls.n	800264c <main+0xa4>
		  }
	  }
	  if ( test )
 8002684:	4b89      	ldr	r3, [pc, #548]	; (80028ac <main+0x304>)
 8002686:	781b      	ldrb	r3, [r3, #0]
 8002688:	2b00      	cmp	r3, #0
 800268a:	d108      	bne.n	800269e <main+0xf6>
		  break ;
	  else
		  send_debug_logs ( "* Something went wrong! MCU did not received INT1." ) ;
 800268c:	4b8a      	ldr	r3, [pc, #552]	; (80028b8 <main+0x310>)
 800268e:	0018      	movs	r0, r3
 8002690:	f000 fbf8 	bl	8002e84 <send_debug_logs>
  while ( tim_seconds < 30 )
 8002694:	4b87      	ldr	r3, [pc, #540]	; (80028b4 <main+0x30c>)
 8002696:	881b      	ldrh	r3, [r3, #0]
 8002698:	2b1d      	cmp	r3, #29
 800269a:	d9b2      	bls.n	8002602 <main+0x5a>
 800269c:	e000      	b.n	80026a0 <main+0xf8>
		  break ;
 800269e:	46c0      	nop			; (mov r8, r8)
  }
  my_tim_stop () ;
 80026a0:	f000 fd08 	bl	80030b4 <my_tim_stop>
  tim_seconds = 0 ;
 80026a4:	4b83      	ldr	r3, [pc, #524]	; (80028b4 <main+0x30c>)
 80026a6:	2200      	movs	r2, #0
 80026a8:	801a      	strh	r2, [r3, #0]


  // GNSS TEST

  uint8_t 	rxd_byte = 0 ;
 80026aa:	23ff      	movs	r3, #255	; 0xff
 80026ac:	18fb      	adds	r3, r7, r3
 80026ae:	2200      	movs	r2, #0
 80026b0:	701a      	strb	r2, [r3, #0]
  uint8_t 	i_nmea = 0 ;
 80026b2:	23fe      	movs	r3, #254	; 0xfe
 80026b4:	18fb      	adds	r3, r7, r3
 80026b6:	2200      	movs	r2, #0
 80026b8:	701a      	strb	r2, [r3, #0]
  uint8_t 	gsv_tns = 0 ;
 80026ba:	2308      	movs	r3, #8
 80026bc:	33ff      	adds	r3, #255	; 0xff
 80026be:	18fb      	adds	r3, r7, r3
 80026c0:	2200      	movs	r2, #0
 80026c2:	701a      	strb	r2, [r3, #0]
  uint8_t 	nmea_message[MY_NMEA_MESSAGE_MAX_SIZE] = {0} ;
 80026c4:	4b7d      	ldr	r3, [pc, #500]	; (80028bc <main+0x314>)
 80026c6:	2284      	movs	r2, #132	; 0x84
 80026c8:	0052      	lsls	r2, r2, #1
 80026ca:	189b      	adds	r3, r3, r2
 80026cc:	19db      	adds	r3, r3, r7
 80026ce:	2200      	movs	r2, #0
 80026d0:	601a      	str	r2, [r3, #0]
 80026d2:	3304      	adds	r3, #4
 80026d4:	22f6      	movs	r2, #246	; 0xf6
 80026d6:	2100      	movs	r1, #0
 80026d8:	0018      	movs	r0, r3
 80026da:	f007 fec5 	bl	800a468 <memset>
  char*		nmea_gsv_label = "GSV" ;
 80026de:	4b78      	ldr	r3, [pc, #480]	; (80028c0 <main+0x318>)
 80026e0:	1c7a      	adds	r2, r7, #1
 80026e2:	32ff      	adds	r2, #255	; 0xff
 80026e4:	6013      	str	r3, [r2, #0]
  my_tim_start () ;
 80026e6:	f000 fcd5 	bl	8003094 <my_tim_start>
  my_gnss_on () ;
 80026ea:	f000 fc6d 	bl	8002fc8 <my_gnss_on>
  send_debug_logs ( "* LC76G test started. Try to complete it within 10 minutes." ) ;
 80026ee:	4b75      	ldr	r3, [pc, #468]	; (80028c4 <main+0x31c>)
 80026f0:	0018      	movs	r0, r3
 80026f2:	f000 fbc7 	bl	8002e84 <send_debug_logs>
  while ( tim_seconds < TIM_SECONDS_THS_SYSTEM_RESET  )
 80026f6:	e04b      	b.n	8002790 <main+0x1e8>
  {
	  HAL_UART_Receive ( HUART_GNSS , &rxd_byte , 1 , UART_TIMEOUT ) ;
 80026f8:	23fa      	movs	r3, #250	; 0xfa
 80026fa:	009b      	lsls	r3, r3, #2
 80026fc:	24ff      	movs	r4, #255	; 0xff
 80026fe:	1939      	adds	r1, r7, r4
 8002700:	4871      	ldr	r0, [pc, #452]	; (80028c8 <main+0x320>)
 8002702:	2201      	movs	r2, #1
 8002704:	f004 fac6 	bl	8006c94 <HAL_UART_Receive>
	  HAL_UART_Transmit ( HUART_DBG , &rxd_byte , 1 , UART_TIMEOUT ) ;
 8002708:	23fa      	movs	r3, #250	; 0xfa
 800270a:	009b      	lsls	r3, r3, #2
 800270c:	1939      	adds	r1, r7, r4
 800270e:	485d      	ldr	r0, [pc, #372]	; (8002884 <main+0x2dc>)
 8002710:	2201      	movs	r2, #1
 8002712:	f004 fa23 	bl	8006b5c <HAL_UART_Transmit>
	  if ( rxd_byte )
 8002716:	0020      	movs	r0, r4
 8002718:	193b      	adds	r3, r7, r4
 800271a:	781b      	ldrb	r3, [r3, #0]
 800271c:	2408      	movs	r4, #8
 800271e:	34ff      	adds	r4, #255	; 0xff
 8002720:	193a      	adds	r2, r7, r4
 8002722:	1939      	adds	r1, r7, r4
 8002724:	7809      	ldrb	r1, [r1, #0]
 8002726:	7011      	strb	r1, [r2, #0]
 8002728:	2b00      	cmp	r3, #0
 800272a:	d031      	beq.n	8002790 <main+0x1e8>
	  {
		  if ( my_nmea_message ( &rxd_byte , nmea_message , &i_nmea ) == 2 )
 800272c:	23fe      	movs	r3, #254	; 0xfe
 800272e:	18fa      	adds	r2, r7, r3
 8002730:	1d39      	adds	r1, r7, #4
 8002732:	183b      	adds	r3, r7, r0
 8002734:	0018      	movs	r0, r3
 8002736:	f006 fb22 	bl	8008d7e <my_nmea_message>
 800273a:	0001      	movs	r1, r0
 800273c:	193b      	adds	r3, r7, r4
 800273e:	193a      	adds	r2, r7, r4
 8002740:	7812      	ldrb	r2, [r2, #0]
 8002742:	701a      	strb	r2, [r3, #0]
 8002744:	2902      	cmp	r1, #2
 8002746:	d123      	bne.n	8002790 <main+0x1e8>
		  {
			  if ( is_my_nmea_checksum_ok ( (char*) nmea_message ) )
 8002748:	1d3b      	adds	r3, r7, #4
 800274a:	0018      	movs	r0, r3
 800274c:	f006 fb83 	bl	8008e56 <is_my_nmea_checksum_ok>
 8002750:	0003      	movs	r3, r0
 8002752:	0019      	movs	r1, r3
 8002754:	193b      	adds	r3, r7, r4
 8002756:	193a      	adds	r2, r7, r4
 8002758:	7812      	ldrb	r2, [r2, #0]
 800275a:	701a      	strb	r2, [r3, #0]
 800275c:	2900      	cmp	r1, #0
 800275e:	d017      	beq.n	8002790 <main+0x1e8>
			  {
				  if ( strstr ( (char*) nmea_message , nmea_gsv_label ) )
 8002760:	1c7b      	adds	r3, r7, #1
 8002762:	33ff      	adds	r3, #255	; 0xff
 8002764:	681a      	ldr	r2, [r3, #0]
 8002766:	1d3b      	adds	r3, r7, #4
 8002768:	0011      	movs	r1, r2
 800276a:	0018      	movs	r0, r3
 800276c:	f007 fea9 	bl	800a4c2 <strstr>
 8002770:	1e03      	subs	r3, r0, #0
 8002772:	d007      	beq.n	8002784 <main+0x1dc>
				  {
					  gsv_tns = my_nmea_get_gsv_tns ( (char*) nmea_message ) ;
 8002774:	1d3b      	adds	r3, r7, #4
 8002776:	0018      	movs	r0, r3
 8002778:	f006 fbb8 	bl	8008eec <my_nmea_get_gsv_tns>
 800277c:	0003      	movs	r3, r0
 800277e:	001a      	movs	r2, r3
 8002780:	193b      	adds	r3, r7, r4
 8002782:	701a      	strb	r2, [r3, #0]
				  }
				  if ( gsv_tns > 3 )
 8002784:	2308      	movs	r3, #8
 8002786:	33ff      	adds	r3, #255	; 0xff
 8002788:	18fb      	adds	r3, r7, r3
 800278a:	781b      	ldrb	r3, [r3, #0]
 800278c:	2b03      	cmp	r3, #3
 800278e:	d806      	bhi.n	800279e <main+0x1f6>
  while ( tim_seconds < TIM_SECONDS_THS_SYSTEM_RESET  )
 8002790:	4b48      	ldr	r3, [pc, #288]	; (80028b4 <main+0x30c>)
 8002792:	881a      	ldrh	r2, [r3, #0]
 8002794:	2396      	movs	r3, #150	; 0x96
 8002796:	009b      	lsls	r3, r3, #2
 8002798:	429a      	cmp	r2, r3
 800279a:	d3ad      	bcc.n	80026f8 <main+0x150>
 800279c:	e000      	b.n	80027a0 <main+0x1f8>
					  break ;
 800279e:	46c0      	nop			; (mov r8, r8)
			  }
		  }
	  }
  }
  my_gnss_off () ;
 80027a0:	f000 fc2a 	bl	8002ff8 <my_gnss_off>
  my_tim_stop () ;
 80027a4:	f000 fc86 	bl	80030b4 <my_tim_stop>
  if ( gsv_tns )
 80027a8:	2208      	movs	r2, #8
 80027aa:	32ff      	adds	r2, #255	; 0xff
 80027ac:	18bb      	adds	r3, r7, r2
 80027ae:	781b      	ldrb	r3, [r3, #0]
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d00e      	beq.n	80027d2 <main+0x22a>
  {
	  sprintf ( uart_buff , "* Good! LC76G test has been accomplished. No of SV: %d" , gsv_tns ) ;
 80027b4:	18bb      	adds	r3, r7, r2
 80027b6:	781a      	ldrb	r2, [r3, #0]
 80027b8:	4944      	ldr	r1, [pc, #272]	; (80028cc <main+0x324>)
 80027ba:	4b45      	ldr	r3, [pc, #276]	; (80028d0 <main+0x328>)
 80027bc:	0018      	movs	r0, r3
 80027be:	f007 fdbd 	bl	800a33c <sprintf>
	  send_debug_logs ( uart_buff ) ;
 80027c2:	4b43      	ldr	r3, [pc, #268]	; (80028d0 <main+0x328>)
 80027c4:	0018      	movs	r0, r3
 80027c6:	f000 fb5d 	bl	8002e84 <send_debug_logs>
	  uart_buff[0] = 0 ;
 80027ca:	4b41      	ldr	r3, [pc, #260]	; (80028d0 <main+0x328>)
 80027cc:	2200      	movs	r2, #0
 80027ce:	701a      	strb	r2, [r3, #0]
 80027d0:	e003      	b.n	80027da <main+0x232>
  }
  else
  {
	  send_debug_logs ( "\n* Something went wrong! LC76G did not find any SV." ) ;
 80027d2:	4b40      	ldr	r3, [pc, #256]	; (80028d4 <main+0x32c>)
 80027d4:	0018      	movs	r0, r3
 80027d6:	f000 fb55 	bl	8002e84 <send_debug_logs>
  }

  // ASTRO TEST
  bool cfg_wr = false ;
 80027da:	1dfb      	adds	r3, r7, #7
 80027dc:	33ff      	adds	r3, #255	; 0xff
 80027de:	2200      	movs	r2, #0
 80027e0:	701a      	strb	r2, [r3, #0]
  tim_seconds = 0 ;
 80027e2:	4b34      	ldr	r3, [pc, #208]	; (80028b4 <main+0x30c>)
 80027e4:	2200      	movs	r2, #0
 80027e6:	801a      	strh	r2, [r3, #0]
  my_tim_start() ;
 80027e8:	f000 fc54 	bl	8003094 <my_tim_start>
  while ( tim_seconds < 30 && !cfg_wr )
 80027ec:	e016      	b.n	800281c <main+0x274>
  {
	  reset_astronode () ;
 80027ee:	f000 fc6d 	bl	80030cc <reset_astronode>
	  HAL_Delay ( 100 ) ;
 80027f2:	2064      	movs	r0, #100	; 0x64
 80027f4:	f001 f8a2 	bl	800393c <HAL_Delay>
	  cfg_wr = astronode_send_cfg_wr ( true , true , true , false , true , true , true , false  ) ;
 80027f8:	1dfc      	adds	r4, r7, #7
 80027fa:	34ff      	adds	r4, #255	; 0xff
 80027fc:	2300      	movs	r3, #0
 80027fe:	9303      	str	r3, [sp, #12]
 8002800:	2301      	movs	r3, #1
 8002802:	9302      	str	r3, [sp, #8]
 8002804:	2301      	movs	r3, #1
 8002806:	9301      	str	r3, [sp, #4]
 8002808:	2301      	movs	r3, #1
 800280a:	9300      	str	r3, [sp, #0]
 800280c:	2300      	movs	r3, #0
 800280e:	2201      	movs	r2, #1
 8002810:	2101      	movs	r1, #1
 8002812:	2001      	movs	r0, #1
 8002814:	f005 f95a 	bl	8007acc <astronode_send_cfg_wr>
 8002818:	0003      	movs	r3, r0
 800281a:	7023      	strb	r3, [r4, #0]
  while ( tim_seconds < 30 && !cfg_wr )
 800281c:	4b25      	ldr	r3, [pc, #148]	; (80028b4 <main+0x30c>)
 800281e:	881b      	ldrh	r3, [r3, #0]
 8002820:	2b1d      	cmp	r3, #29
 8002822:	d807      	bhi.n	8002834 <main+0x28c>
 8002824:	1dfb      	adds	r3, r7, #7
 8002826:	33ff      	adds	r3, #255	; 0xff
 8002828:	781b      	ldrb	r3, [r3, #0]
 800282a:	2201      	movs	r2, #1
 800282c:	4053      	eors	r3, r2
 800282e:	b2db      	uxtb	r3, r3
 8002830:	2b00      	cmp	r3, #0
 8002832:	d1dc      	bne.n	80027ee <main+0x246>
  }
  my_tim_stop() ;
 8002834:	f000 fc3e 	bl	80030b4 <my_tim_stop>
  if ( cfg_wr )
 8002838:	1dfb      	adds	r3, r7, #7
 800283a:	33ff      	adds	r3, #255	; 0xff
 800283c:	781b      	ldrb	r3, [r3, #0]
 800283e:	2b00      	cmp	r3, #0
 8002840:	d006      	beq.n	8002850 <main+0x2a8>
  {
	  astronode_send_mpn_rr () ;
 8002842:	f005 f9ef 	bl	8007c24 <astronode_send_mpn_rr>
	  send_debug_logs ( "* Good! Astronode test has been accomplished." ) ;
 8002846:	4b24      	ldr	r3, [pc, #144]	; (80028d8 <main+0x330>)
 8002848:	0018      	movs	r0, r3
 800284a:	f000 fb1b 	bl	8002e84 <send_debug_logs>
 800284e:	e003      	b.n	8002858 <main+0x2b0>
  }
  else
  {
	  send_debug_logs ( "\n* Something went wrong! Astronode did not work fine." ) ;
 8002850:	4b22      	ldr	r3, [pc, #136]	; (80028dc <main+0x334>)
 8002852:	0018      	movs	r0, r3
 8002854:	f000 fb16 	bl	8002e84 <send_debug_logs>
  }
  send_debug_logs ( "\nThis is the end of the test." ) ;
 8002858:	4b21      	ldr	r3, [pc, #132]	; (80028e0 <main+0x338>)
 800285a:	0018      	movs	r0, r3
 800285c:	f000 fb12 	bl	8002e84 <send_debug_logs>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_UART_Receive	( HUART_GNSS, &c , 1 , UART_TIMEOUT ) ;
 8002860:	23fa      	movs	r3, #250	; 0xfa
 8002862:	009b      	lsls	r3, r3, #2
 8002864:	491f      	ldr	r1, [pc, #124]	; (80028e4 <main+0x33c>)
 8002866:	4818      	ldr	r0, [pc, #96]	; (80028c8 <main+0x320>)
 8002868:	2201      	movs	r2, #1
 800286a:	f004 fa13 	bl	8006c94 <HAL_UART_Receive>
	  HAL_UART_Transmit ( HUART_DBG, &c , 1 , UART_TIMEOUT ) ;
 800286e:	23fa      	movs	r3, #250	; 0xfa
 8002870:	009b      	lsls	r3, r3, #2
 8002872:	491c      	ldr	r1, [pc, #112]	; (80028e4 <main+0x33c>)
 8002874:	4803      	ldr	r0, [pc, #12]	; (8002884 <main+0x2dc>)
 8002876:	2201      	movs	r2, #1
 8002878:	f004 f970 	bl	8006b5c <HAL_UART_Transmit>
	  HAL_UART_Receive	( HUART_GNSS, &c , 1 , UART_TIMEOUT ) ;
 800287c:	e7f0      	b.n	8002860 <main+0x2b8>
 800287e:	46c0      	nop			; (mov r8, r8)
 8002880:	20000000 	.word	0x20000000
 8002884:	200007b8 	.word	0x200007b8
 8002888:	08010f34 	.word	0x08010f34
 800288c:	08010f80 	.word	0x08010f80
 8002890:	20000a74 	.word	0x20000a74
 8002894:	08002ee5 	.word	0x08002ee5
 8002898:	08002f4f 	.word	0x08002f4f
 800289c:	20000708 	.word	0x20000708
 80028a0:	08010fc0 	.word	0x08010fc0
 80028a4:	08010fe4 	.word	0x08010fe4
 80028a8:	0801100c 	.word	0x0801100c
 80028ac:	20000975 	.word	0x20000975
 80028b0:	08011054 	.word	0x08011054
 80028b4:	20000a84 	.word	0x20000a84
 80028b8:	08011084 	.word	0x08011084
 80028bc:	fffffefc 	.word	0xfffffefc
 80028c0:	080110b8 	.word	0x080110b8
 80028c4:	080110bc 	.word	0x080110bc
 80028c8:	200008e0 	.word	0x200008e0
 80028cc:	080110f8 	.word	0x080110f8
 80028d0:	20000978 	.word	0x20000978
 80028d4:	08011130 	.word	0x08011130
 80028d8:	08011164 	.word	0x08011164
 80028dc:	08011194 	.word	0x08011194
 80028e0:	080111cc 	.word	0x080111cc
 80028e4:	20000974 	.word	0x20000974

080028e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80028e8:	b590      	push	{r4, r7, lr}
 80028ea:	b095      	sub	sp, #84	; 0x54
 80028ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80028ee:	2414      	movs	r4, #20
 80028f0:	193b      	adds	r3, r7, r4
 80028f2:	0018      	movs	r0, r3
 80028f4:	233c      	movs	r3, #60	; 0x3c
 80028f6:	001a      	movs	r2, r3
 80028f8:	2100      	movs	r1, #0
 80028fa:	f007 fdb5 	bl	800a468 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80028fe:	1d3b      	adds	r3, r7, #4
 8002900:	0018      	movs	r0, r3
 8002902:	2310      	movs	r3, #16
 8002904:	001a      	movs	r2, r3
 8002906:	2100      	movs	r1, #0
 8002908:	f007 fdae 	bl	800a468 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800290c:	2380      	movs	r3, #128	; 0x80
 800290e:	009b      	lsls	r3, r3, #2
 8002910:	0018      	movs	r0, r3
 8002912:	f001 fbf5 	bl	8004100 <HAL_PWREx_ControlVoltageScaling>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8002916:	f001 fbe5 	bl	80040e4 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800291a:	4b1d      	ldr	r3, [pc, #116]	; (8002990 <SystemClock_Config+0xa8>)
 800291c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800291e:	4b1c      	ldr	r3, [pc, #112]	; (8002990 <SystemClock_Config+0xa8>)
 8002920:	2118      	movs	r1, #24
 8002922:	438a      	bics	r2, r1
 8002924:	65da      	str	r2, [r3, #92]	; 0x5c

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 8002926:	193b      	adds	r3, r7, r4
 8002928:	2206      	movs	r2, #6
 800292a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800292c:	193b      	adds	r3, r7, r4
 800292e:	2201      	movs	r2, #1
 8002930:	609a      	str	r2, [r3, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002932:	193b      	adds	r3, r7, r4
 8002934:	2280      	movs	r2, #128	; 0x80
 8002936:	0052      	lsls	r2, r2, #1
 8002938:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 800293a:	193b      	adds	r3, r7, r4
 800293c:	2200      	movs	r2, #0
 800293e:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002940:	193b      	adds	r3, r7, r4
 8002942:	2240      	movs	r2, #64	; 0x40
 8002944:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002946:	193b      	adds	r3, r7, r4
 8002948:	2200      	movs	r2, #0
 800294a:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800294c:	193b      	adds	r3, r7, r4
 800294e:	0018      	movs	r0, r3
 8002950:	f001 fc22 	bl	8004198 <HAL_RCC_OscConfig>
 8002954:	1e03      	subs	r3, r0, #0
 8002956:	d001      	beq.n	800295c <SystemClock_Config+0x74>
  {
    Error_Handler();
 8002958:	f000 fc22 	bl	80031a0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800295c:	1d3b      	adds	r3, r7, #4
 800295e:	2207      	movs	r2, #7
 8002960:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8002962:	1d3b      	adds	r3, r7, #4
 8002964:	2200      	movs	r2, #0
 8002966:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002968:	1d3b      	adds	r3, r7, #4
 800296a:	2200      	movs	r2, #0
 800296c:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800296e:	1d3b      	adds	r3, r7, #4
 8002970:	2200      	movs	r2, #0
 8002972:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002974:	1d3b      	adds	r3, r7, #4
 8002976:	2100      	movs	r1, #0
 8002978:	0018      	movs	r0, r3
 800297a:	f001 ff6d 	bl	8004858 <HAL_RCC_ClockConfig>
 800297e:	1e03      	subs	r3, r0, #0
 8002980:	d001      	beq.n	8002986 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8002982:	f000 fc0d 	bl	80031a0 <Error_Handler>
  }
}
 8002986:	46c0      	nop			; (mov r8, r8)
 8002988:	46bd      	mov	sp, r7
 800298a:	b015      	add	sp, #84	; 0x54
 800298c:	bd90      	pop	{r4, r7, pc}
 800298e:	46c0      	nop			; (mov r8, r8)
 8002990:	40021000 	.word	0x40021000

08002994 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b086      	sub	sp, #24
 8002998:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800299a:	1d3b      	adds	r3, r7, #4
 800299c:	0018      	movs	r0, r3
 800299e:	2314      	movs	r3, #20
 80029a0:	001a      	movs	r2, r3
 80029a2:	2100      	movs	r1, #0
 80029a4:	f007 fd60 	bl	800a468 <memset>
  RTC_DateTypeDef sDate = {0};
 80029a8:	003b      	movs	r3, r7
 80029aa:	2200      	movs	r2, #0
 80029ac:	601a      	str	r2, [r3, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80029ae:	4b2d      	ldr	r3, [pc, #180]	; (8002a64 <MX_RTC_Init+0xd0>)
 80029b0:	4a2d      	ldr	r2, [pc, #180]	; (8002a68 <MX_RTC_Init+0xd4>)
 80029b2:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80029b4:	4b2b      	ldr	r3, [pc, #172]	; (8002a64 <MX_RTC_Init+0xd0>)
 80029b6:	2200      	movs	r2, #0
 80029b8:	609a      	str	r2, [r3, #8]
  hrtc.Init.AsynchPrediv = 127;
 80029ba:	4b2a      	ldr	r3, [pc, #168]	; (8002a64 <MX_RTC_Init+0xd0>)
 80029bc:	227f      	movs	r2, #127	; 0x7f
 80029be:	60da      	str	r2, [r3, #12]
  hrtc.Init.SynchPrediv = 255;
 80029c0:	4b28      	ldr	r3, [pc, #160]	; (8002a64 <MX_RTC_Init+0xd0>)
 80029c2:	22ff      	movs	r2, #255	; 0xff
 80029c4:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80029c6:	4b27      	ldr	r3, [pc, #156]	; (8002a64 <MX_RTC_Init+0xd0>)
 80029c8:	2200      	movs	r2, #0
 80029ca:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80029cc:	4b25      	ldr	r3, [pc, #148]	; (8002a64 <MX_RTC_Init+0xd0>)
 80029ce:	2200      	movs	r2, #0
 80029d0:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80029d2:	4b24      	ldr	r3, [pc, #144]	; (8002a64 <MX_RTC_Init+0xd0>)
 80029d4:	2200      	movs	r2, #0
 80029d6:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80029d8:	4b22      	ldr	r3, [pc, #136]	; (8002a64 <MX_RTC_Init+0xd0>)
 80029da:	2280      	movs	r2, #128	; 0x80
 80029dc:	05d2      	lsls	r2, r2, #23
 80029de:	621a      	str	r2, [r3, #32]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 80029e0:	4b20      	ldr	r3, [pc, #128]	; (8002a64 <MX_RTC_Init+0xd0>)
 80029e2:	2200      	movs	r2, #0
 80029e4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80029e6:	4b1f      	ldr	r3, [pc, #124]	; (8002a64 <MX_RTC_Init+0xd0>)
 80029e8:	0018      	movs	r0, r3
 80029ea:	f002 fb1b 	bl	8005024 <HAL_RTC_Init>
 80029ee:	1e03      	subs	r3, r0, #0
 80029f0:	d001      	beq.n	80029f6 <MX_RTC_Init+0x62>
  {
    Error_Handler();
 80029f2:	f000 fbd5 	bl	80031a0 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 80029f6:	1d3b      	adds	r3, r7, #4
 80029f8:	2200      	movs	r2, #0
 80029fa:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0x0;
 80029fc:	1d3b      	adds	r3, r7, #4
 80029fe:	2200      	movs	r2, #0
 8002a00:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0x0;
 8002a02:	1d3b      	adds	r3, r7, #4
 8002a04:	2200      	movs	r2, #0
 8002a06:	709a      	strb	r2, [r3, #2]
  sTime.SubSeconds = 0x0;
 8002a08:	1d3b      	adds	r3, r7, #4
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	605a      	str	r2, [r3, #4]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002a0e:	1d3b      	adds	r3, r7, #4
 8002a10:	2200      	movs	r2, #0
 8002a12:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002a14:	1d3b      	adds	r3, r7, #4
 8002a16:	2200      	movs	r2, #0
 8002a18:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8002a1a:	1d39      	adds	r1, r7, #4
 8002a1c:	4b11      	ldr	r3, [pc, #68]	; (8002a64 <MX_RTC_Init+0xd0>)
 8002a1e:	2201      	movs	r2, #1
 8002a20:	0018      	movs	r0, r3
 8002a22:	f002 fba1 	bl	8005168 <HAL_RTC_SetTime>
 8002a26:	1e03      	subs	r3, r0, #0
 8002a28:	d001      	beq.n	8002a2e <MX_RTC_Init+0x9a>
  {
    Error_Handler();
 8002a2a:	f000 fbb9 	bl	80031a0 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_SATURDAY;
 8002a2e:	003b      	movs	r3, r7
 8002a30:	2206      	movs	r2, #6
 8002a32:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8002a34:	003b      	movs	r3, r7
 8002a36:	2201      	movs	r2, #1
 8002a38:	705a      	strb	r2, [r3, #1]
  sDate.Date = 0x1;
 8002a3a:	003b      	movs	r3, r7
 8002a3c:	2201      	movs	r2, #1
 8002a3e:	709a      	strb	r2, [r3, #2]
  sDate.Year = 0x0;
 8002a40:	003b      	movs	r3, r7
 8002a42:	2200      	movs	r2, #0
 8002a44:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8002a46:	0039      	movs	r1, r7
 8002a48:	4b06      	ldr	r3, [pc, #24]	; (8002a64 <MX_RTC_Init+0xd0>)
 8002a4a:	2201      	movs	r2, #1
 8002a4c:	0018      	movs	r0, r3
 8002a4e:	f002 fc33 	bl	80052b8 <HAL_RTC_SetDate>
 8002a52:	1e03      	subs	r3, r0, #0
 8002a54:	d001      	beq.n	8002a5a <MX_RTC_Init+0xc6>
  {
    Error_Handler();
 8002a56:	f000 fba3 	bl	80031a0 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8002a5a:	46c0      	nop			; (mov r8, r8)
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	b006      	add	sp, #24
 8002a60:	bd80      	pop	{r7, pc}
 8002a62:	46c0      	nop			; (mov r8, r8)
 8002a64:	200006dc 	.word	0x200006dc
 8002a68:	40002800 	.word	0x40002800

08002a6c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002a70:	4b1b      	ldr	r3, [pc, #108]	; (8002ae0 <MX_SPI1_Init+0x74>)
 8002a72:	4a1c      	ldr	r2, [pc, #112]	; (8002ae4 <MX_SPI1_Init+0x78>)
 8002a74:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002a76:	4b1a      	ldr	r3, [pc, #104]	; (8002ae0 <MX_SPI1_Init+0x74>)
 8002a78:	2282      	movs	r2, #130	; 0x82
 8002a7a:	0052      	lsls	r2, r2, #1
 8002a7c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002a7e:	4b18      	ldr	r3, [pc, #96]	; (8002ae0 <MX_SPI1_Init+0x74>)
 8002a80:	2200      	movs	r2, #0
 8002a82:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002a84:	4b16      	ldr	r3, [pc, #88]	; (8002ae0 <MX_SPI1_Init+0x74>)
 8002a86:	22e0      	movs	r2, #224	; 0xe0
 8002a88:	00d2      	lsls	r2, r2, #3
 8002a8a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002a8c:	4b14      	ldr	r3, [pc, #80]	; (8002ae0 <MX_SPI1_Init+0x74>)
 8002a8e:	2200      	movs	r2, #0
 8002a90:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002a92:	4b13      	ldr	r3, [pc, #76]	; (8002ae0 <MX_SPI1_Init+0x74>)
 8002a94:	2200      	movs	r2, #0
 8002a96:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002a98:	4b11      	ldr	r3, [pc, #68]	; (8002ae0 <MX_SPI1_Init+0x74>)
 8002a9a:	2280      	movs	r2, #128	; 0x80
 8002a9c:	0092      	lsls	r2, r2, #2
 8002a9e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8002aa0:	4b0f      	ldr	r3, [pc, #60]	; (8002ae0 <MX_SPI1_Init+0x74>)
 8002aa2:	2210      	movs	r2, #16
 8002aa4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002aa6:	4b0e      	ldr	r3, [pc, #56]	; (8002ae0 <MX_SPI1_Init+0x74>)
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002aac:	4b0c      	ldr	r3, [pc, #48]	; (8002ae0 <MX_SPI1_Init+0x74>)
 8002aae:	2200      	movs	r2, #0
 8002ab0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002ab2:	4b0b      	ldr	r3, [pc, #44]	; (8002ae0 <MX_SPI1_Init+0x74>)
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8002ab8:	4b09      	ldr	r3, [pc, #36]	; (8002ae0 <MX_SPI1_Init+0x74>)
 8002aba:	2207      	movs	r2, #7
 8002abc:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002abe:	4b08      	ldr	r3, [pc, #32]	; (8002ae0 <MX_SPI1_Init+0x74>)
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002ac4:	4b06      	ldr	r3, [pc, #24]	; (8002ae0 <MX_SPI1_Init+0x74>)
 8002ac6:	2208      	movs	r2, #8
 8002ac8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002aca:	4b05      	ldr	r3, [pc, #20]	; (8002ae0 <MX_SPI1_Init+0x74>)
 8002acc:	0018      	movs	r0, r3
 8002ace:	f002 fd5b 	bl	8005588 <HAL_SPI_Init>
 8002ad2:	1e03      	subs	r3, r0, #0
 8002ad4:	d001      	beq.n	8002ada <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8002ad6:	f000 fb63 	bl	80031a0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002ada:	46c0      	nop			; (mov r8, r8)
 8002adc:	46bd      	mov	sp, r7
 8002ade:	bd80      	pop	{r7, pc}
 8002ae0:	20000708 	.word	0x20000708
 8002ae4:	40013000 	.word	0x40013000

08002ae8 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b084      	sub	sp, #16
 8002aec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002aee:	1d3b      	adds	r3, r7, #4
 8002af0:	0018      	movs	r0, r3
 8002af2:	230c      	movs	r3, #12
 8002af4:	001a      	movs	r2, r3
 8002af6:	2100      	movs	r1, #0
 8002af8:	f007 fcb6 	bl	800a468 <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002afc:	4b15      	ldr	r3, [pc, #84]	; (8002b54 <MX_TIM6_Init+0x6c>)
 8002afe:	4a16      	ldr	r2, [pc, #88]	; (8002b58 <MX_TIM6_Init+0x70>)
 8002b00:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 16000-1;
 8002b02:	4b14      	ldr	r3, [pc, #80]	; (8002b54 <MX_TIM6_Init+0x6c>)
 8002b04:	4a15      	ldr	r2, [pc, #84]	; (8002b5c <MX_TIM6_Init+0x74>)
 8002b06:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b08:	4b12      	ldr	r3, [pc, #72]	; (8002b54 <MX_TIM6_Init+0x6c>)
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000-1;
 8002b0e:	4b11      	ldr	r3, [pc, #68]	; (8002b54 <MX_TIM6_Init+0x6c>)
 8002b10:	4a13      	ldr	r2, [pc, #76]	; (8002b60 <MX_TIM6_Init+0x78>)
 8002b12:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b14:	4b0f      	ldr	r3, [pc, #60]	; (8002b54 <MX_TIM6_Init+0x6c>)
 8002b16:	2200      	movs	r2, #0
 8002b18:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002b1a:	4b0e      	ldr	r3, [pc, #56]	; (8002b54 <MX_TIM6_Init+0x6c>)
 8002b1c:	0018      	movs	r0, r3
 8002b1e:	f003 fc35 	bl	800638c <HAL_TIM_Base_Init>
 8002b22:	1e03      	subs	r3, r0, #0
 8002b24:	d001      	beq.n	8002b2a <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8002b26:	f000 fb3b 	bl	80031a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002b2a:	1d3b      	adds	r3, r7, #4
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002b30:	1d3b      	adds	r3, r7, #4
 8002b32:	2200      	movs	r2, #0
 8002b34:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002b36:	1d3a      	adds	r2, r7, #4
 8002b38:	4b06      	ldr	r3, [pc, #24]	; (8002b54 <MX_TIM6_Init+0x6c>)
 8002b3a:	0011      	movs	r1, r2
 8002b3c:	0018      	movs	r0, r3
 8002b3e:	f003 fee9 	bl	8006914 <HAL_TIMEx_MasterConfigSynchronization>
 8002b42:	1e03      	subs	r3, r0, #0
 8002b44:	d001      	beq.n	8002b4a <MX_TIM6_Init+0x62>
  {
    Error_Handler();
 8002b46:	f000 fb2b 	bl	80031a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8002b4a:	46c0      	nop			; (mov r8, r8)
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	b004      	add	sp, #16
 8002b50:	bd80      	pop	{r7, pc}
 8002b52:	46c0      	nop			; (mov r8, r8)
 8002b54:	2000076c 	.word	0x2000076c
 8002b58:	40001000 	.word	0x40001000
 8002b5c:	00003e7f 	.word	0x00003e7f
 8002b60:	000003e7 	.word	0x000003e7

08002b64 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002b68:	4b23      	ldr	r3, [pc, #140]	; (8002bf8 <MX_USART2_UART_Init+0x94>)
 8002b6a:	4a24      	ldr	r2, [pc, #144]	; (8002bfc <MX_USART2_UART_Init+0x98>)
 8002b6c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002b6e:	4b22      	ldr	r3, [pc, #136]	; (8002bf8 <MX_USART2_UART_Init+0x94>)
 8002b70:	22e1      	movs	r2, #225	; 0xe1
 8002b72:	0252      	lsls	r2, r2, #9
 8002b74:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002b76:	4b20      	ldr	r3, [pc, #128]	; (8002bf8 <MX_USART2_UART_Init+0x94>)
 8002b78:	2200      	movs	r2, #0
 8002b7a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002b7c:	4b1e      	ldr	r3, [pc, #120]	; (8002bf8 <MX_USART2_UART_Init+0x94>)
 8002b7e:	2200      	movs	r2, #0
 8002b80:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002b82:	4b1d      	ldr	r3, [pc, #116]	; (8002bf8 <MX_USART2_UART_Init+0x94>)
 8002b84:	2200      	movs	r2, #0
 8002b86:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002b88:	4b1b      	ldr	r3, [pc, #108]	; (8002bf8 <MX_USART2_UART_Init+0x94>)
 8002b8a:	220c      	movs	r2, #12
 8002b8c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002b8e:	4b1a      	ldr	r3, [pc, #104]	; (8002bf8 <MX_USART2_UART_Init+0x94>)
 8002b90:	2200      	movs	r2, #0
 8002b92:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002b94:	4b18      	ldr	r3, [pc, #96]	; (8002bf8 <MX_USART2_UART_Init+0x94>)
 8002b96:	2200      	movs	r2, #0
 8002b98:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002b9a:	4b17      	ldr	r3, [pc, #92]	; (8002bf8 <MX_USART2_UART_Init+0x94>)
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002ba0:	4b15      	ldr	r3, [pc, #84]	; (8002bf8 <MX_USART2_UART_Init+0x94>)
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002ba6:	4b14      	ldr	r3, [pc, #80]	; (8002bf8 <MX_USART2_UART_Init+0x94>)
 8002ba8:	2200      	movs	r2, #0
 8002baa:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002bac:	4b12      	ldr	r3, [pc, #72]	; (8002bf8 <MX_USART2_UART_Init+0x94>)
 8002bae:	0018      	movs	r0, r3
 8002bb0:	f003 ff3e 	bl	8006a30 <HAL_UART_Init>
 8002bb4:	1e03      	subs	r3, r0, #0
 8002bb6:	d001      	beq.n	8002bbc <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8002bb8:	f000 faf2 	bl	80031a0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002bbc:	4b0e      	ldr	r3, [pc, #56]	; (8002bf8 <MX_USART2_UART_Init+0x94>)
 8002bbe:	2100      	movs	r1, #0
 8002bc0:	0018      	movs	r0, r3
 8002bc2:	f004 fea3 	bl	800790c <HAL_UARTEx_SetTxFifoThreshold>
 8002bc6:	1e03      	subs	r3, r0, #0
 8002bc8:	d001      	beq.n	8002bce <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8002bca:	f000 fae9 	bl	80031a0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002bce:	4b0a      	ldr	r3, [pc, #40]	; (8002bf8 <MX_USART2_UART_Init+0x94>)
 8002bd0:	2100      	movs	r1, #0
 8002bd2:	0018      	movs	r0, r3
 8002bd4:	f004 feda 	bl	800798c <HAL_UARTEx_SetRxFifoThreshold>
 8002bd8:	1e03      	subs	r3, r0, #0
 8002bda:	d001      	beq.n	8002be0 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8002bdc:	f000 fae0 	bl	80031a0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8002be0:	4b05      	ldr	r3, [pc, #20]	; (8002bf8 <MX_USART2_UART_Init+0x94>)
 8002be2:	0018      	movs	r0, r3
 8002be4:	f004 fe58 	bl	8007898 <HAL_UARTEx_DisableFifoMode>
 8002be8:	1e03      	subs	r3, r0, #0
 8002bea:	d001      	beq.n	8002bf0 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8002bec:	f000 fad8 	bl	80031a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002bf0:	46c0      	nop			; (mov r8, r8)
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	bd80      	pop	{r7, pc}
 8002bf6:	46c0      	nop			; (mov r8, r8)
 8002bf8:	200007b8 	.word	0x200007b8
 8002bfc:	40004400 	.word	0x40004400

08002c00 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002c04:	4b23      	ldr	r3, [pc, #140]	; (8002c94 <MX_USART3_UART_Init+0x94>)
 8002c06:	4a24      	ldr	r2, [pc, #144]	; (8002c98 <MX_USART3_UART_Init+0x98>)
 8002c08:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8002c0a:	4b22      	ldr	r3, [pc, #136]	; (8002c94 <MX_USART3_UART_Init+0x94>)
 8002c0c:	2296      	movs	r2, #150	; 0x96
 8002c0e:	0192      	lsls	r2, r2, #6
 8002c10:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002c12:	4b20      	ldr	r3, [pc, #128]	; (8002c94 <MX_USART3_UART_Init+0x94>)
 8002c14:	2200      	movs	r2, #0
 8002c16:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002c18:	4b1e      	ldr	r3, [pc, #120]	; (8002c94 <MX_USART3_UART_Init+0x94>)
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002c1e:	4b1d      	ldr	r3, [pc, #116]	; (8002c94 <MX_USART3_UART_Init+0x94>)
 8002c20:	2200      	movs	r2, #0
 8002c22:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002c24:	4b1b      	ldr	r3, [pc, #108]	; (8002c94 <MX_USART3_UART_Init+0x94>)
 8002c26:	220c      	movs	r2, #12
 8002c28:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002c2a:	4b1a      	ldr	r3, [pc, #104]	; (8002c94 <MX_USART3_UART_Init+0x94>)
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002c30:	4b18      	ldr	r3, [pc, #96]	; (8002c94 <MX_USART3_UART_Init+0x94>)
 8002c32:	2200      	movs	r2, #0
 8002c34:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002c36:	4b17      	ldr	r3, [pc, #92]	; (8002c94 <MX_USART3_UART_Init+0x94>)
 8002c38:	2200      	movs	r2, #0
 8002c3a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002c3c:	4b15      	ldr	r3, [pc, #84]	; (8002c94 <MX_USART3_UART_Init+0x94>)
 8002c3e:	2200      	movs	r2, #0
 8002c40:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002c42:	4b14      	ldr	r3, [pc, #80]	; (8002c94 <MX_USART3_UART_Init+0x94>)
 8002c44:	2200      	movs	r2, #0
 8002c46:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002c48:	4b12      	ldr	r3, [pc, #72]	; (8002c94 <MX_USART3_UART_Init+0x94>)
 8002c4a:	0018      	movs	r0, r3
 8002c4c:	f003 fef0 	bl	8006a30 <HAL_UART_Init>
 8002c50:	1e03      	subs	r3, r0, #0
 8002c52:	d001      	beq.n	8002c58 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8002c54:	f000 faa4 	bl	80031a0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002c58:	4b0e      	ldr	r3, [pc, #56]	; (8002c94 <MX_USART3_UART_Init+0x94>)
 8002c5a:	2100      	movs	r1, #0
 8002c5c:	0018      	movs	r0, r3
 8002c5e:	f004 fe55 	bl	800790c <HAL_UARTEx_SetTxFifoThreshold>
 8002c62:	1e03      	subs	r3, r0, #0
 8002c64:	d001      	beq.n	8002c6a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8002c66:	f000 fa9b 	bl	80031a0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002c6a:	4b0a      	ldr	r3, [pc, #40]	; (8002c94 <MX_USART3_UART_Init+0x94>)
 8002c6c:	2100      	movs	r1, #0
 8002c6e:	0018      	movs	r0, r3
 8002c70:	f004 fe8c 	bl	800798c <HAL_UARTEx_SetRxFifoThreshold>
 8002c74:	1e03      	subs	r3, r0, #0
 8002c76:	d001      	beq.n	8002c7c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8002c78:	f000 fa92 	bl	80031a0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8002c7c:	4b05      	ldr	r3, [pc, #20]	; (8002c94 <MX_USART3_UART_Init+0x94>)
 8002c7e:	0018      	movs	r0, r3
 8002c80:	f004 fe0a 	bl	8007898 <HAL_UARTEx_DisableFifoMode>
 8002c84:	1e03      	subs	r3, r0, #0
 8002c86:	d001      	beq.n	8002c8c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8002c88:	f000 fa8a 	bl	80031a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002c8c:	46c0      	nop			; (mov r8, r8)
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	bd80      	pop	{r7, pc}
 8002c92:	46c0      	nop			; (mov r8, r8)
 8002c94:	2000084c 	.word	0x2000084c
 8002c98:	40004800 	.word	0x40004800

08002c9c <MX_USART5_UART_Init>:
  * @brief USART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART5_UART_Init(void)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	af00      	add	r7, sp, #0
  /* USER CODE END USART5_Init 0 */

  /* USER CODE BEGIN USART5_Init 1 */

  /* USER CODE END USART5_Init 1 */
  huart5.Instance = USART5;
 8002ca0:	4b16      	ldr	r3, [pc, #88]	; (8002cfc <MX_USART5_UART_Init+0x60>)
 8002ca2:	4a17      	ldr	r2, [pc, #92]	; (8002d00 <MX_USART5_UART_Init+0x64>)
 8002ca4:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8002ca6:	4b15      	ldr	r3, [pc, #84]	; (8002cfc <MX_USART5_UART_Init+0x60>)
 8002ca8:	22e1      	movs	r2, #225	; 0xe1
 8002caa:	0252      	lsls	r2, r2, #9
 8002cac:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8002cae:	4b13      	ldr	r3, [pc, #76]	; (8002cfc <MX_USART5_UART_Init+0x60>)
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8002cb4:	4b11      	ldr	r3, [pc, #68]	; (8002cfc <MX_USART5_UART_Init+0x60>)
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8002cba:	4b10      	ldr	r3, [pc, #64]	; (8002cfc <MX_USART5_UART_Init+0x60>)
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8002cc0:	4b0e      	ldr	r3, [pc, #56]	; (8002cfc <MX_USART5_UART_Init+0x60>)
 8002cc2:	220c      	movs	r2, #12
 8002cc4:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002cc6:	4b0d      	ldr	r3, [pc, #52]	; (8002cfc <MX_USART5_UART_Init+0x60>)
 8002cc8:	2200      	movs	r2, #0
 8002cca:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8002ccc:	4b0b      	ldr	r3, [pc, #44]	; (8002cfc <MX_USART5_UART_Init+0x60>)
 8002cce:	2200      	movs	r2, #0
 8002cd0:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002cd2:	4b0a      	ldr	r3, [pc, #40]	; (8002cfc <MX_USART5_UART_Init+0x60>)
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	621a      	str	r2, [r3, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002cd8:	4b08      	ldr	r3, [pc, #32]	; (8002cfc <MX_USART5_UART_Init+0x60>)
 8002cda:	2200      	movs	r2, #0
 8002cdc:	625a      	str	r2, [r3, #36]	; 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002cde:	4b07      	ldr	r3, [pc, #28]	; (8002cfc <MX_USART5_UART_Init+0x60>)
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8002ce4:	4b05      	ldr	r3, [pc, #20]	; (8002cfc <MX_USART5_UART_Init+0x60>)
 8002ce6:	0018      	movs	r0, r3
 8002ce8:	f003 fea2 	bl	8006a30 <HAL_UART_Init>
 8002cec:	1e03      	subs	r3, r0, #0
 8002cee:	d001      	beq.n	8002cf4 <MX_USART5_UART_Init+0x58>
  {
    Error_Handler();
 8002cf0:	f000 fa56 	bl	80031a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART5_Init 2 */

  /* USER CODE END USART5_Init 2 */

}
 8002cf4:	46c0      	nop			; (mov r8, r8)
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	bd80      	pop	{r7, pc}
 8002cfa:	46c0      	nop			; (mov r8, r8)
 8002cfc:	200008e0 	.word	0x200008e0
 8002d00:	40005000 	.word	0x40005000

08002d04 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002d04:	b590      	push	{r4, r7, lr}
 8002d06:	b08b      	sub	sp, #44	; 0x2c
 8002d08:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d0a:	2414      	movs	r4, #20
 8002d0c:	193b      	adds	r3, r7, r4
 8002d0e:	0018      	movs	r0, r3
 8002d10:	2314      	movs	r3, #20
 8002d12:	001a      	movs	r2, r3
 8002d14:	2100      	movs	r1, #0
 8002d16:	f007 fba7 	bl	800a468 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002d1a:	4b57      	ldr	r3, [pc, #348]	; (8002e78 <MX_GPIO_Init+0x174>)
 8002d1c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002d1e:	4b56      	ldr	r3, [pc, #344]	; (8002e78 <MX_GPIO_Init+0x174>)
 8002d20:	2104      	movs	r1, #4
 8002d22:	430a      	orrs	r2, r1
 8002d24:	635a      	str	r2, [r3, #52]	; 0x34
 8002d26:	4b54      	ldr	r3, [pc, #336]	; (8002e78 <MX_GPIO_Init+0x174>)
 8002d28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d2a:	2204      	movs	r2, #4
 8002d2c:	4013      	ands	r3, r2
 8002d2e:	613b      	str	r3, [r7, #16]
 8002d30:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002d32:	4b51      	ldr	r3, [pc, #324]	; (8002e78 <MX_GPIO_Init+0x174>)
 8002d34:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002d36:	4b50      	ldr	r3, [pc, #320]	; (8002e78 <MX_GPIO_Init+0x174>)
 8002d38:	2120      	movs	r1, #32
 8002d3a:	430a      	orrs	r2, r1
 8002d3c:	635a      	str	r2, [r3, #52]	; 0x34
 8002d3e:	4b4e      	ldr	r3, [pc, #312]	; (8002e78 <MX_GPIO_Init+0x174>)
 8002d40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d42:	2220      	movs	r2, #32
 8002d44:	4013      	ands	r3, r2
 8002d46:	60fb      	str	r3, [r7, #12]
 8002d48:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d4a:	4b4b      	ldr	r3, [pc, #300]	; (8002e78 <MX_GPIO_Init+0x174>)
 8002d4c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002d4e:	4b4a      	ldr	r3, [pc, #296]	; (8002e78 <MX_GPIO_Init+0x174>)
 8002d50:	2101      	movs	r1, #1
 8002d52:	430a      	orrs	r2, r1
 8002d54:	635a      	str	r2, [r3, #52]	; 0x34
 8002d56:	4b48      	ldr	r3, [pc, #288]	; (8002e78 <MX_GPIO_Init+0x174>)
 8002d58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d5a:	2201      	movs	r2, #1
 8002d5c:	4013      	ands	r3, r2
 8002d5e:	60bb      	str	r3, [r7, #8]
 8002d60:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d62:	4b45      	ldr	r3, [pc, #276]	; (8002e78 <MX_GPIO_Init+0x174>)
 8002d64:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002d66:	4b44      	ldr	r3, [pc, #272]	; (8002e78 <MX_GPIO_Init+0x174>)
 8002d68:	2102      	movs	r1, #2
 8002d6a:	430a      	orrs	r2, r1
 8002d6c:	635a      	str	r2, [r3, #52]	; 0x34
 8002d6e:	4b42      	ldr	r3, [pc, #264]	; (8002e78 <MX_GPIO_Init+0x174>)
 8002d70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d72:	2202      	movs	r2, #2
 8002d74:	4013      	ands	r3, r2
 8002d76:	607b      	str	r3, [r7, #4]
 8002d78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002d7a:	4b3f      	ldr	r3, [pc, #252]	; (8002e78 <MX_GPIO_Init+0x174>)
 8002d7c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002d7e:	4b3e      	ldr	r3, [pc, #248]	; (8002e78 <MX_GPIO_Init+0x174>)
 8002d80:	2108      	movs	r1, #8
 8002d82:	430a      	orrs	r2, r1
 8002d84:	635a      	str	r2, [r3, #52]	; 0x34
 8002d86:	4b3c      	ldr	r3, [pc, #240]	; (8002e78 <MX_GPIO_Init+0x174>)
 8002d88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d8a:	2208      	movs	r2, #8
 8002d8c:	4013      	ands	r3, r2
 8002d8e:	603b      	str	r3, [r7, #0]
 8002d90:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ACC_CS_Pin|LDG_Pin, GPIO_PIN_RESET);
 8002d92:	23a0      	movs	r3, #160	; 0xa0
 8002d94:	05db      	lsls	r3, r3, #23
 8002d96:	2200      	movs	r2, #0
 8002d98:	2130      	movs	r1, #48	; 0x30
 8002d9a:	0018      	movs	r0, r3
 8002d9c:	f001 f947 	bl	800402e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ASTRO_WKUP_Pin|ASTRO_RST_Pin|GNSS_RST_Pin|GNSS_PWR_SW_Pin, GPIO_PIN_RESET);
 8002da0:	4936      	ldr	r1, [pc, #216]	; (8002e7c <MX_GPIO_Init+0x178>)
 8002da2:	4b37      	ldr	r3, [pc, #220]	; (8002e80 <MX_GPIO_Init+0x17c>)
 8002da4:	2200      	movs	r2, #0
 8002da6:	0018      	movs	r0, r3
 8002da8:	f001 f941 	bl	800402e <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ACC_INT1_Pin ACC_INT2_Pin */
  GPIO_InitStruct.Pin = ACC_INT1_Pin|ACC_INT2_Pin;
 8002dac:	193b      	adds	r3, r7, r4
 8002dae:	2203      	movs	r2, #3
 8002db0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002db2:	193b      	adds	r3, r7, r4
 8002db4:	2288      	movs	r2, #136	; 0x88
 8002db6:	0352      	lsls	r2, r2, #13
 8002db8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dba:	193b      	adds	r3, r7, r4
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002dc0:	193a      	adds	r2, r7, r4
 8002dc2:	23a0      	movs	r3, #160	; 0xa0
 8002dc4:	05db      	lsls	r3, r3, #23
 8002dc6:	0011      	movs	r1, r2
 8002dc8:	0018      	movs	r0, r3
 8002dca:	f000 fecf 	bl	8003b6c <HAL_GPIO_Init>

  /*Configure GPIO pins : ACC_CS_Pin LDG_Pin */
  GPIO_InitStruct.Pin = ACC_CS_Pin|LDG_Pin;
 8002dce:	193b      	adds	r3, r7, r4
 8002dd0:	2230      	movs	r2, #48	; 0x30
 8002dd2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002dd4:	193b      	adds	r3, r7, r4
 8002dd6:	2201      	movs	r2, #1
 8002dd8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dda:	193b      	adds	r3, r7, r4
 8002ddc:	2200      	movs	r2, #0
 8002dde:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002de0:	193b      	adds	r3, r7, r4
 8002de2:	2200      	movs	r2, #0
 8002de4:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002de6:	193a      	adds	r2, r7, r4
 8002de8:	23a0      	movs	r3, #160	; 0xa0
 8002dea:	05db      	lsls	r3, r3, #23
 8002dec:	0011      	movs	r1, r2
 8002dee:	0018      	movs	r0, r3
 8002df0:	f000 febc 	bl	8003b6c <HAL_GPIO_Init>

  /*Configure GPIO pins : ASTRO_WKUP_Pin ASTRO_RST_Pin GNSS_RST_Pin GNSS_PWR_SW_Pin */
  GPIO_InitStruct.Pin = ASTRO_WKUP_Pin|ASTRO_RST_Pin|GNSS_RST_Pin|GNSS_PWR_SW_Pin;
 8002df4:	193b      	adds	r3, r7, r4
 8002df6:	4a21      	ldr	r2, [pc, #132]	; (8002e7c <MX_GPIO_Init+0x178>)
 8002df8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002dfa:	193b      	adds	r3, r7, r4
 8002dfc:	2201      	movs	r2, #1
 8002dfe:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e00:	193b      	adds	r3, r7, r4
 8002e02:	2200      	movs	r2, #0
 8002e04:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e06:	193b      	adds	r3, r7, r4
 8002e08:	2200      	movs	r2, #0
 8002e0a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e0c:	193b      	adds	r3, r7, r4
 8002e0e:	4a1c      	ldr	r2, [pc, #112]	; (8002e80 <MX_GPIO_Init+0x17c>)
 8002e10:	0019      	movs	r1, r3
 8002e12:	0010      	movs	r0, r2
 8002e14:	f000 feaa 	bl	8003b6c <HAL_GPIO_Init>

  /*Configure GPIO pins : ASTRO_EVT_Pin GNSS_3DFIX_Pin GNSS_JAM_Pin */
  GPIO_InitStruct.Pin = ASTRO_EVT_Pin|GNSS_3DFIX_Pin|GNSS_JAM_Pin;
 8002e18:	0021      	movs	r1, r4
 8002e1a:	187b      	adds	r3, r7, r1
 8002e1c:	2264      	movs	r2, #100	; 0x64
 8002e1e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002e20:	187b      	adds	r3, r7, r1
 8002e22:	2288      	movs	r2, #136	; 0x88
 8002e24:	0352      	lsls	r2, r2, #13
 8002e26:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e28:	187b      	adds	r3, r7, r1
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e2e:	000c      	movs	r4, r1
 8002e30:	187b      	adds	r3, r7, r1
 8002e32:	4a13      	ldr	r2, [pc, #76]	; (8002e80 <MX_GPIO_Init+0x17c>)
 8002e34:	0019      	movs	r1, r3
 8002e36:	0010      	movs	r0, r2
 8002e38:	f000 fe98 	bl	8003b6c <HAL_GPIO_Init>

  /*Configure GPIO pin : GNSS_GEOF_Pin */
  GPIO_InitStruct.Pin = GNSS_GEOF_Pin;
 8002e3c:	0021      	movs	r1, r4
 8002e3e:	187b      	adds	r3, r7, r1
 8002e40:	2280      	movs	r2, #128	; 0x80
 8002e42:	00d2      	lsls	r2, r2, #3
 8002e44:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002e46:	187b      	adds	r3, r7, r1
 8002e48:	2200      	movs	r2, #0
 8002e4a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e4c:	187b      	adds	r3, r7, r1
 8002e4e:	2200      	movs	r2, #0
 8002e50:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GNSS_GEOF_GPIO_Port, &GPIO_InitStruct);
 8002e52:	187b      	adds	r3, r7, r1
 8002e54:	4a0a      	ldr	r2, [pc, #40]	; (8002e80 <MX_GPIO_Init+0x17c>)
 8002e56:	0019      	movs	r1, r3
 8002e58:	0010      	movs	r0, r2
 8002e5a:	f000 fe87 	bl	8003b6c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 3, 0);
 8002e5e:	2200      	movs	r2, #0
 8002e60:	2103      	movs	r1, #3
 8002e62:	2005      	movs	r0, #5
 8002e64:	f000 fe4c 	bl	8003b00 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 8002e68:	2005      	movs	r0, #5
 8002e6a:	f000 fe5e 	bl	8003b2a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002e6e:	46c0      	nop			; (mov r8, r8)
 8002e70:	46bd      	mov	sp, r7
 8002e72:	b00b      	add	sp, #44	; 0x2c
 8002e74:	bd90      	pop	{r4, r7, pc}
 8002e76:	46c0      	nop			; (mov r8, r8)
 8002e78:	40021000 	.word	0x40021000
 8002e7c:	0000a003 	.word	0x0000a003
 8002e80:	50000400 	.word	0x50000400

08002e84 <send_debug_logs>:
/* USER CODE BEGIN 4 */


// FUNCTIONS REQUIRED BY astronode-stm32-example-asset library
void send_debug_logs ( char* p_tx_buffer )
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b084      	sub	sp, #16
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
    uint32_t length = strlen ( p_tx_buffer ) ;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	0018      	movs	r0, r3
 8002e90:	f7fd f938 	bl	8000104 <strlen>
 8002e94:	0003      	movs	r3, r0
 8002e96:	60fb      	str	r3, [r7, #12]

    if ( length > UART_TX_MAX_BUFF_SIZE )
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	2bfa      	cmp	r3, #250	; 0xfa
 8002e9c:	d908      	bls.n	8002eb0 <send_debug_logs+0x2c>
    {
        HAL_UART_Transmit ( HUART_DBG , ( uint8_t* ) "[ERROR] UART buffer reached max length.\n" , 42 , UART_TIMEOUT ) ;
 8002e9e:	23fa      	movs	r3, #250	; 0xfa
 8002ea0:	009b      	lsls	r3, r3, #2
 8002ea2:	490d      	ldr	r1, [pc, #52]	; (8002ed8 <send_debug_logs+0x54>)
 8002ea4:	480d      	ldr	r0, [pc, #52]	; (8002edc <send_debug_logs+0x58>)
 8002ea6:	222a      	movs	r2, #42	; 0x2a
 8002ea8:	f003 fe58 	bl	8006b5c <HAL_UART_Transmit>
        length = UART_TX_MAX_BUFF_SIZE;
 8002eac:	23fa      	movs	r3, #250	; 0xfa
 8002eae:	60fb      	str	r3, [r7, #12]
    }

    HAL_UART_Transmit ( HUART_DBG , ( uint8_t* ) p_tx_buffer , length , UART_TIMEOUT ) ;
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	b29a      	uxth	r2, r3
 8002eb4:	23fa      	movs	r3, #250	; 0xfa
 8002eb6:	009b      	lsls	r3, r3, #2
 8002eb8:	6879      	ldr	r1, [r7, #4]
 8002eba:	4808      	ldr	r0, [pc, #32]	; (8002edc <send_debug_logs+0x58>)
 8002ebc:	f003 fe4e 	bl	8006b5c <HAL_UART_Transmit>
    HAL_UART_Transmit ( HUART_DBG , ( uint8_t* ) "\n" , 1 , UART_TIMEOUT ) ;
 8002ec0:	23fa      	movs	r3, #250	; 0xfa
 8002ec2:	009b      	lsls	r3, r3, #2
 8002ec4:	4906      	ldr	r1, [pc, #24]	; (8002ee0 <send_debug_logs+0x5c>)
 8002ec6:	4805      	ldr	r0, [pc, #20]	; (8002edc <send_debug_logs+0x58>)
 8002ec8:	2201      	movs	r2, #1
 8002eca:	f003 fe47 	bl	8006b5c <HAL_UART_Transmit>
}
 8002ece:	46c0      	nop			; (mov r8, r8)
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	b004      	add	sp, #16
 8002ed4:	bd80      	pop	{r7, pc}
 8002ed6:	46c0      	nop			; (mov r8, r8)
 8002ed8:	080111ec 	.word	0x080111ec
 8002edc:	200007b8 	.word	0x200007b8
 8002ee0:	08011218 	.word	0x08011218

08002ee4 <my_lis2dw12_platform_write>:

// ACC LL Function

int32_t my_lis2dw12_platform_write ( void *handle , uint8_t reg , const uint8_t *bufp , uint16_t len )
{
 8002ee4:	b5b0      	push	{r4, r5, r7, lr}
 8002ee6:	b084      	sub	sp, #16
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	60f8      	str	r0, [r7, #12]
 8002eec:	0008      	movs	r0, r1
 8002eee:	607a      	str	r2, [r7, #4]
 8002ef0:	0019      	movs	r1, r3
 8002ef2:	240b      	movs	r4, #11
 8002ef4:	193b      	adds	r3, r7, r4
 8002ef6:	1c02      	adds	r2, r0, #0
 8002ef8:	701a      	strb	r2, [r3, #0]
 8002efa:	2508      	movs	r5, #8
 8002efc:	197b      	adds	r3, r7, r5
 8002efe:	1c0a      	adds	r2, r1, #0
 8002f00:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_WritePin	( GPIOA , ACC_CS_Pin , GPIO_PIN_RESET ) ;
 8002f02:	23a0      	movs	r3, #160	; 0xa0
 8002f04:	05db      	lsls	r3, r3, #23
 8002f06:	2200      	movs	r2, #0
 8002f08:	2110      	movs	r1, #16
 8002f0a:	0018      	movs	r0, r3
 8002f0c:	f001 f88f 	bl	800402e <HAL_GPIO_WritePin>
	HAL_Delay ( 20 ) ;
 8002f10:	2014      	movs	r0, #20
 8002f12:	f000 fd13 	bl	800393c <HAL_Delay>
	HAL_SPI_Transmit	( handle , &reg , 1 , 1000 ) ;
 8002f16:	23fa      	movs	r3, #250	; 0xfa
 8002f18:	009b      	lsls	r3, r3, #2
 8002f1a:	1939      	adds	r1, r7, r4
 8002f1c:	68f8      	ldr	r0, [r7, #12]
 8002f1e:	2201      	movs	r2, #1
 8002f20:	f002 fbea 	bl	80056f8 <HAL_SPI_Transmit>
	HAL_SPI_Transmit	( handle , (uint8_t*) bufp , len , 1000 ) ;
 8002f24:	23fa      	movs	r3, #250	; 0xfa
 8002f26:	009c      	lsls	r4, r3, #2
 8002f28:	197b      	adds	r3, r7, r5
 8002f2a:	881a      	ldrh	r2, [r3, #0]
 8002f2c:	6879      	ldr	r1, [r7, #4]
 8002f2e:	68f8      	ldr	r0, [r7, #12]
 8002f30:	0023      	movs	r3, r4
 8002f32:	f002 fbe1 	bl	80056f8 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin	( GPIOA , ACC_CS_Pin , GPIO_PIN_SET) ;
 8002f36:	23a0      	movs	r3, #160	; 0xa0
 8002f38:	05db      	lsls	r3, r3, #23
 8002f3a:	2201      	movs	r2, #1
 8002f3c:	2110      	movs	r1, #16
 8002f3e:	0018      	movs	r0, r3
 8002f40:	f001 f875 	bl	800402e <HAL_GPIO_WritePin>

	return 0;
 8002f44:	2300      	movs	r3, #0
}
 8002f46:	0018      	movs	r0, r3
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	b004      	add	sp, #16
 8002f4c:	bdb0      	pop	{r4, r5, r7, pc}

08002f4e <my_lis2dw12_platform_read>:

int32_t my_lis2dw12_platform_read ( void *handle , uint8_t reg , uint8_t *bufp , uint16_t len )
{
 8002f4e:	b5b0      	push	{r4, r5, r7, lr}
 8002f50:	b084      	sub	sp, #16
 8002f52:	af00      	add	r7, sp, #0
 8002f54:	60f8      	str	r0, [r7, #12]
 8002f56:	0008      	movs	r0, r1
 8002f58:	607a      	str	r2, [r7, #4]
 8002f5a:	0019      	movs	r1, r3
 8002f5c:	240b      	movs	r4, #11
 8002f5e:	193b      	adds	r3, r7, r4
 8002f60:	1c02      	adds	r2, r0, #0
 8002f62:	701a      	strb	r2, [r3, #0]
 8002f64:	2508      	movs	r5, #8
 8002f66:	197b      	adds	r3, r7, r5
 8002f68:	1c0a      	adds	r2, r1, #0
 8002f6a:	801a      	strh	r2, [r3, #0]
	reg |= 0x80;
 8002f6c:	193b      	adds	r3, r7, r4
 8002f6e:	781b      	ldrb	r3, [r3, #0]
 8002f70:	2280      	movs	r2, #128	; 0x80
 8002f72:	4252      	negs	r2, r2
 8002f74:	4313      	orrs	r3, r2
 8002f76:	b2da      	uxtb	r2, r3
 8002f78:	193b      	adds	r3, r7, r4
 8002f7a:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin ( GPIOA , ACC_CS_Pin , GPIO_PIN_RESET) ;
 8002f7c:	23a0      	movs	r3, #160	; 0xa0
 8002f7e:	05db      	lsls	r3, r3, #23
 8002f80:	2200      	movs	r2, #0
 8002f82:	2110      	movs	r1, #16
 8002f84:	0018      	movs	r0, r3
 8002f86:	f001 f852 	bl	800402e <HAL_GPIO_WritePin>
	HAL_Delay ( 20 ) ;
 8002f8a:	2014      	movs	r0, #20
 8002f8c:	f000 fcd6 	bl	800393c <HAL_Delay>
	HAL_SPI_Transmit ( handle , &reg , 1 , 1000 ) ;
 8002f90:	23fa      	movs	r3, #250	; 0xfa
 8002f92:	009b      	lsls	r3, r3, #2
 8002f94:	1939      	adds	r1, r7, r4
 8002f96:	68f8      	ldr	r0, [r7, #12]
 8002f98:	2201      	movs	r2, #1
 8002f9a:	f002 fbad 	bl	80056f8 <HAL_SPI_Transmit>
	HAL_SPI_Receive ( handle , bufp , len , 1000 ) ;
 8002f9e:	23fa      	movs	r3, #250	; 0xfa
 8002fa0:	009c      	lsls	r4, r3, #2
 8002fa2:	197b      	adds	r3, r7, r5
 8002fa4:	881a      	ldrh	r2, [r3, #0]
 8002fa6:	6879      	ldr	r1, [r7, #4]
 8002fa8:	68f8      	ldr	r0, [r7, #12]
 8002faa:	0023      	movs	r3, r4
 8002fac:	f002 fcfc 	bl	80059a8 <HAL_SPI_Receive>
	HAL_GPIO_WritePin ( GPIOA , ACC_CS_Pin , GPIO_PIN_SET) ;
 8002fb0:	23a0      	movs	r3, #160	; 0xa0
 8002fb2:	05db      	lsls	r3, r3, #23
 8002fb4:	2201      	movs	r2, #1
 8002fb6:	2110      	movs	r1, #16
 8002fb8:	0018      	movs	r0, r3
 8002fba:	f001 f838 	bl	800402e <HAL_GPIO_WritePin>

	return 0;
 8002fbe:	2300      	movs	r3, #0
}
 8002fc0:	0018      	movs	r0, r3
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	b004      	add	sp, #16
 8002fc6:	bdb0      	pop	{r4, r5, r7, pc}

08002fc8 <my_gnss_on>:

// GNSS LL Function
void my_gnss_on ( void )
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin ( GPIOB , GNSS_PWR_SW_Pin , GPIO_PIN_SET ) ;
 8002fcc:	2380      	movs	r3, #128	; 0x80
 8002fce:	021b      	lsls	r3, r3, #8
 8002fd0:	4808      	ldr	r0, [pc, #32]	; (8002ff4 <my_gnss_on+0x2c>)
 8002fd2:	2201      	movs	r2, #1
 8002fd4:	0019      	movs	r1, r3
 8002fd6:	f001 f82a 	bl	800402e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin ( GPIOB , GNSS_RST_Pin , GPIO_PIN_SET ) ;
 8002fda:	2380      	movs	r3, #128	; 0x80
 8002fdc:	019b      	lsls	r3, r3, #6
 8002fde:	4805      	ldr	r0, [pc, #20]	; (8002ff4 <my_gnss_on+0x2c>)
 8002fe0:	2201      	movs	r2, #1
 8002fe2:	0019      	movs	r1, r3
 8002fe4:	f001 f823 	bl	800402e <HAL_GPIO_WritePin>
	MX_USART3_UART_Init () ;
 8002fe8:	f7ff fe0a 	bl	8002c00 <MX_USART3_UART_Init>
}
 8002fec:	46c0      	nop			; (mov r8, r8)
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	bd80      	pop	{r7, pc}
 8002ff2:	46c0      	nop			; (mov r8, r8)
 8002ff4:	50000400 	.word	0x50000400

08002ff8 <my_gnss_off>:
void my_gnss_off ( void )
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin ( GPIOB , GNSS_PWR_SW_Pin , GPIO_PIN_RESET ) ;
 8002ffc:	2380      	movs	r3, #128	; 0x80
 8002ffe:	021b      	lsls	r3, r3, #8
 8003000:	4809      	ldr	r0, [pc, #36]	; (8003028 <my_gnss_off+0x30>)
 8003002:	2200      	movs	r2, #0
 8003004:	0019      	movs	r1, r3
 8003006:	f001 f812 	bl	800402e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin ( GPIOB , GNSS_RST_Pin , GPIO_PIN_RESET ) ;
 800300a:	2380      	movs	r3, #128	; 0x80
 800300c:	019b      	lsls	r3, r3, #6
 800300e:	4806      	ldr	r0, [pc, #24]	; (8003028 <my_gnss_off+0x30>)
 8003010:	2200      	movs	r2, #0
 8003012:	0019      	movs	r1, r3
 8003014:	f001 f80b 	bl	800402e <HAL_GPIO_WritePin>
	HAL_UART_DeInit ( HUART_GNSS ) ;
 8003018:	4b04      	ldr	r3, [pc, #16]	; (800302c <my_gnss_off+0x34>)
 800301a:	0018      	movs	r0, r3
 800301c:	f003 fd5e 	bl	8006adc <HAL_UART_DeInit>
}
 8003020:	46c0      	nop			; (mov r8, r8)
 8003022:	46bd      	mov	sp, r7
 8003024:	bd80      	pop	{r7, pc}
 8003026:	46c0      	nop			; (mov r8, r8)
 8003028:	50000400 	.word	0x50000400
 800302c:	200008e0 	.word	0x200008e0

08003030 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback ( TIM_HandleTypeDef *htim )
{
 8003030:	b580      	push	{r7, lr}
 8003032:	b082      	sub	sp, #8
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
	if ( htim->Instance == TIM6 )
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	4a0c      	ldr	r2, [pc, #48]	; (8003070 <HAL_TIM_PeriodElapsedCallback+0x40>)
 800303e:	4293      	cmp	r3, r2
 8003040:	d111      	bne.n	8003066 <HAL_TIM_PeriodElapsedCallback+0x36>
	{
		tim_seconds++ ;
 8003042:	4b0c      	ldr	r3, [pc, #48]	; (8003074 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8003044:	881b      	ldrh	r3, [r3, #0]
 8003046:	3301      	adds	r3, #1
 8003048:	b29a      	uxth	r2, r3
 800304a:	4b0a      	ldr	r3, [pc, #40]	; (8003074 <HAL_TIM_PeriodElapsedCallback+0x44>)
 800304c:	801a      	strh	r2, [r3, #0]
		if ( tim_seconds > TIM_SECONDS_THS_SYSTEM_RESET )
 800304e:	4b09      	ldr	r3, [pc, #36]	; (8003074 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8003050:	881a      	ldrh	r2, [r3, #0]
 8003052:	2396      	movs	r3, #150	; 0x96
 8003054:	009b      	lsls	r3, r3, #2
 8003056:	429a      	cmp	r2, r3
 8003058:	d905      	bls.n	8003066 <HAL_TIM_PeriodElapsedCallback+0x36>
		{
			send_debug_logs ( "Watchdog activated! System restart!" ) ;
 800305a:	4b07      	ldr	r3, [pc, #28]	; (8003078 <HAL_TIM_PeriodElapsedCallback+0x48>)
 800305c:	0018      	movs	r0, r3
 800305e:	f7ff ff11 	bl	8002e84 <send_debug_logs>
			HAL_NVIC_SystemReset () ;
 8003062:	f000 fd72 	bl	8003b4a <HAL_NVIC_SystemReset>
		}
	}
}
 8003066:	46c0      	nop			; (mov r8, r8)
 8003068:	46bd      	mov	sp, r7
 800306a:	b002      	add	sp, #8
 800306c:	bd80      	pop	{r7, pc}
 800306e:	46c0      	nop			; (mov r8, r8)
 8003070:	40001000 	.word	0x40001000
 8003074:	20000a84 	.word	0x20000a84
 8003078:	0801121c 	.word	0x0801121c

0800307c <my_tim_init>:

void my_tim_init (void )
{
 800307c:	b580      	push	{r7, lr}
 800307e:	af00      	add	r7, sp, #0
	__HAL_TIM_CLEAR_IT ( HTIM , TIM_IT_UPDATE ) ;
 8003080:	4b03      	ldr	r3, [pc, #12]	; (8003090 <my_tim_init+0x14>)
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	2202      	movs	r2, #2
 8003086:	4252      	negs	r2, r2
 8003088:	611a      	str	r2, [r3, #16]
}
 800308a:	46c0      	nop			; (mov r8, r8)
 800308c:	46bd      	mov	sp, r7
 800308e:	bd80      	pop	{r7, pc}
 8003090:	2000076c 	.word	0x2000076c

08003094 <my_tim_start>:

void my_tim_start (void )
{
 8003094:	b580      	push	{r7, lr}
 8003096:	af00      	add	r7, sp, #0
	tim_seconds = 0 ;
 8003098:	4b04      	ldr	r3, [pc, #16]	; (80030ac <my_tim_start+0x18>)
 800309a:	2200      	movs	r2, #0
 800309c:	801a      	strh	r2, [r3, #0]
	HAL_TIM_Base_Start_IT ( HTIM ) ;
 800309e:	4b04      	ldr	r3, [pc, #16]	; (80030b0 <my_tim_start+0x1c>)
 80030a0:	0018      	movs	r0, r3
 80030a2:	f003 f9cb 	bl	800643c <HAL_TIM_Base_Start_IT>
}
 80030a6:	46c0      	nop			; (mov r8, r8)
 80030a8:	46bd      	mov	sp, r7
 80030aa:	bd80      	pop	{r7, pc}
 80030ac:	20000a84 	.word	0x20000a84
 80030b0:	2000076c 	.word	0x2000076c

080030b4 <my_tim_stop>:

void my_tim_stop (void )
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Stop_IT ( HTIM ) ;
 80030b8:	4b03      	ldr	r3, [pc, #12]	; (80030c8 <my_tim_stop+0x14>)
 80030ba:	0018      	movs	r0, r3
 80030bc:	f003 fa20 	bl	8006500 <HAL_TIM_Base_Stop_IT>
}
 80030c0:	46c0      	nop			; (mov r8, r8)
 80030c2:	46bd      	mov	sp, r7
 80030c4:	bd80      	pop	{r7, pc}
 80030c6:	46c0      	nop			; (mov r8, r8)
 80030c8:	2000076c 	.word	0x2000076c

080030cc <reset_astronode>:
void reset_astronode ( void )
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin ( ASTRO_RST_GPIO_Port , ASTRO_RST_Pin , GPIO_PIN_SET ) ;
 80030d0:	4b0a      	ldr	r3, [pc, #40]	; (80030fc <reset_astronode+0x30>)
 80030d2:	2201      	movs	r2, #1
 80030d4:	2102      	movs	r1, #2
 80030d6:	0018      	movs	r0, r3
 80030d8:	f000 ffa9 	bl	800402e <HAL_GPIO_WritePin>
    HAL_Delay ( 1 ) ;
 80030dc:	2001      	movs	r0, #1
 80030de:	f000 fc2d 	bl	800393c <HAL_Delay>
    HAL_GPIO_WritePin ( ASTRO_RST_GPIO_Port , ASTRO_RST_Pin , GPIO_PIN_RESET ) ;
 80030e2:	4b06      	ldr	r3, [pc, #24]	; (80030fc <reset_astronode+0x30>)
 80030e4:	2200      	movs	r2, #0
 80030e6:	2102      	movs	r1, #2
 80030e8:	0018      	movs	r0, r3
 80030ea:	f000 ffa0 	bl	800402e <HAL_GPIO_WritePin>
    HAL_Delay ( 250 ) ;
 80030ee:	20fa      	movs	r0, #250	; 0xfa
 80030f0:	f000 fc24 	bl	800393c <HAL_Delay>
}
 80030f4:	46c0      	nop			; (mov r8, r8)
 80030f6:	46bd      	mov	sp, r7
 80030f8:	bd80      	pop	{r7, pc}
 80030fa:	46c0      	nop			; (mov r8, r8)
 80030fc:	50000400 	.word	0x50000400

08003100 <send_astronode_request>:
void send_astronode_request ( uint8_t* p_tx_buffer , uint32_t length )
{
 8003100:	b580      	push	{r7, lr}
 8003102:	b082      	sub	sp, #8
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
 8003108:	6039      	str	r1, [r7, #0]
    send_debug_logs ( "Message sent to the Astronode --> " ) ;
 800310a:	4b0a      	ldr	r3, [pc, #40]	; (8003134 <send_astronode_request+0x34>)
 800310c:	0018      	movs	r0, r3
 800310e:	f7ff feb9 	bl	8002e84 <send_debug_logs>
    send_debug_logs ( ( char* ) p_tx_buffer ) ;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	0018      	movs	r0, r3
 8003116:	f7ff feb5 	bl	8002e84 <send_debug_logs>
    HAL_UART_Transmit ( HUART_ASTRO , p_tx_buffer , length , 1000 ) ;
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	b29a      	uxth	r2, r3
 800311e:	23fa      	movs	r3, #250	; 0xfa
 8003120:	009b      	lsls	r3, r3, #2
 8003122:	6879      	ldr	r1, [r7, #4]
 8003124:	4804      	ldr	r0, [pc, #16]	; (8003138 <send_astronode_request+0x38>)
 8003126:	f003 fd19 	bl	8006b5c <HAL_UART_Transmit>
}
 800312a:	46c0      	nop			; (mov r8, r8)
 800312c:	46bd      	mov	sp, r7
 800312e:	b002      	add	sp, #8
 8003130:	bd80      	pop	{r7, pc}
 8003132:	46c0      	nop			; (mov r8, r8)
 8003134:	08011240 	.word	0x08011240
 8003138:	2000084c 	.word	0x2000084c

0800313c <get_systick>:
uint32_t get_systick ( void )
{
 800313c:	b580      	push	{r7, lr}
 800313e:	af00      	add	r7, sp, #0
    return HAL_GetTick() ;
 8003140:	f000 fbf2 	bl	8003928 <HAL_GetTick>
 8003144:	0003      	movs	r3, r0
}
 8003146:	0018      	movs	r0, r3
 8003148:	46bd      	mov	sp, r7
 800314a:	bd80      	pop	{r7, pc}

0800314c <is_systick_timeout_over>:
bool is_systick_timeout_over ( uint32_t starting_value , uint16_t duration )
{
 800314c:	b580      	push	{r7, lr}
 800314e:	b082      	sub	sp, #8
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
 8003154:	000a      	movs	r2, r1
 8003156:	1cbb      	adds	r3, r7, #2
 8003158:	801a      	strh	r2, [r3, #0]
    return ( get_systick () - starting_value > duration ) ? true : false ;
 800315a:	f7ff ffef 	bl	800313c <get_systick>
 800315e:	0002      	movs	r2, r0
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	1ad3      	subs	r3, r2, r3
 8003164:	1cba      	adds	r2, r7, #2
 8003166:	8812      	ldrh	r2, [r2, #0]
 8003168:	429a      	cmp	r2, r3
 800316a:	419b      	sbcs	r3, r3
 800316c:	425b      	negs	r3, r3
 800316e:	b2db      	uxtb	r3, r3
}
 8003170:	0018      	movs	r0, r3
 8003172:	46bd      	mov	sp, r7
 8003174:	b002      	add	sp, #8
 8003176:	bd80      	pop	{r7, pc}

08003178 <is_astronode_character_received>:
bool is_astronode_character_received ( uint8_t* p_rx_char )
{
 8003178:	b580      	push	{r7, lr}
 800317a:	b082      	sub	sp, #8
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
    return ( HAL_UART_Receive ( HUART_ASTRO , p_rx_char , 1 , 100 ) == HAL_OK ? true : false ) ;
 8003180:	6879      	ldr	r1, [r7, #4]
 8003182:	4806      	ldr	r0, [pc, #24]	; (800319c <is_astronode_character_received+0x24>)
 8003184:	2364      	movs	r3, #100	; 0x64
 8003186:	2201      	movs	r2, #1
 8003188:	f003 fd84 	bl	8006c94 <HAL_UART_Receive>
 800318c:	0003      	movs	r3, r0
 800318e:	425a      	negs	r2, r3
 8003190:	4153      	adcs	r3, r2
 8003192:	b2db      	uxtb	r3, r3
}
 8003194:	0018      	movs	r0, r3
 8003196:	46bd      	mov	sp, r7
 8003198:	b002      	add	sp, #8
 800319a:	bd80      	pop	{r7, pc}
 800319c:	2000084c 	.word	0x2000084c

080031a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80031a4:	b672      	cpsid	i
}
 80031a6:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80031a8:	e7fe      	b.n	80031a8 <Error_Handler+0x8>
	...

080031ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b082      	sub	sp, #8
 80031b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80031b2:	4b0f      	ldr	r3, [pc, #60]	; (80031f0 <HAL_MspInit+0x44>)
 80031b4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80031b6:	4b0e      	ldr	r3, [pc, #56]	; (80031f0 <HAL_MspInit+0x44>)
 80031b8:	2101      	movs	r1, #1
 80031ba:	430a      	orrs	r2, r1
 80031bc:	641a      	str	r2, [r3, #64]	; 0x40
 80031be:	4b0c      	ldr	r3, [pc, #48]	; (80031f0 <HAL_MspInit+0x44>)
 80031c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031c2:	2201      	movs	r2, #1
 80031c4:	4013      	ands	r3, r2
 80031c6:	607b      	str	r3, [r7, #4]
 80031c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80031ca:	4b09      	ldr	r3, [pc, #36]	; (80031f0 <HAL_MspInit+0x44>)
 80031cc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80031ce:	4b08      	ldr	r3, [pc, #32]	; (80031f0 <HAL_MspInit+0x44>)
 80031d0:	2180      	movs	r1, #128	; 0x80
 80031d2:	0549      	lsls	r1, r1, #21
 80031d4:	430a      	orrs	r2, r1
 80031d6:	63da      	str	r2, [r3, #60]	; 0x3c
 80031d8:	4b05      	ldr	r3, [pc, #20]	; (80031f0 <HAL_MspInit+0x44>)
 80031da:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80031dc:	2380      	movs	r3, #128	; 0x80
 80031de:	055b      	lsls	r3, r3, #21
 80031e0:	4013      	ands	r3, r2
 80031e2:	603b      	str	r3, [r7, #0]
 80031e4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80031e6:	46c0      	nop			; (mov r8, r8)
 80031e8:	46bd      	mov	sp, r7
 80031ea:	b002      	add	sp, #8
 80031ec:	bd80      	pop	{r7, pc}
 80031ee:	46c0      	nop			; (mov r8, r8)
 80031f0:	40021000 	.word	0x40021000

080031f4 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80031f4:	b590      	push	{r4, r7, lr}
 80031f6:	b097      	sub	sp, #92	; 0x5c
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80031fc:	240c      	movs	r4, #12
 80031fe:	193b      	adds	r3, r7, r4
 8003200:	0018      	movs	r0, r3
 8003202:	234c      	movs	r3, #76	; 0x4c
 8003204:	001a      	movs	r2, r3
 8003206:	2100      	movs	r1, #0
 8003208:	f007 f92e 	bl	800a468 <memset>
  if(hrtc->Instance==RTC)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	4a15      	ldr	r2, [pc, #84]	; (8003268 <HAL_RTC_MspInit+0x74>)
 8003212:	4293      	cmp	r3, r2
 8003214:	d124      	bne.n	8003260 <HAL_RTC_MspInit+0x6c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8003216:	193b      	adds	r3, r7, r4
 8003218:	2280      	movs	r2, #128	; 0x80
 800321a:	0292      	lsls	r2, r2, #10
 800321c:	601a      	str	r2, [r3, #0]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800321e:	193b      	adds	r3, r7, r4
 8003220:	2280      	movs	r2, #128	; 0x80
 8003222:	0052      	lsls	r2, r2, #1
 8003224:	641a      	str	r2, [r3, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003226:	193b      	adds	r3, r7, r4
 8003228:	0018      	movs	r0, r3
 800322a:	f001 fcbf 	bl	8004bac <HAL_RCCEx_PeriphCLKConfig>
 800322e:	1e03      	subs	r3, r0, #0
 8003230:	d001      	beq.n	8003236 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8003232:	f7ff ffb5 	bl	80031a0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8003236:	4b0d      	ldr	r3, [pc, #52]	; (800326c <HAL_RTC_MspInit+0x78>)
 8003238:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800323a:	4b0c      	ldr	r3, [pc, #48]	; (800326c <HAL_RTC_MspInit+0x78>)
 800323c:	2180      	movs	r1, #128	; 0x80
 800323e:	0209      	lsls	r1, r1, #8
 8003240:	430a      	orrs	r2, r1
 8003242:	65da      	str	r2, [r3, #92]	; 0x5c
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8003244:	4b09      	ldr	r3, [pc, #36]	; (800326c <HAL_RTC_MspInit+0x78>)
 8003246:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003248:	4b08      	ldr	r3, [pc, #32]	; (800326c <HAL_RTC_MspInit+0x78>)
 800324a:	2180      	movs	r1, #128	; 0x80
 800324c:	00c9      	lsls	r1, r1, #3
 800324e:	430a      	orrs	r2, r1
 8003250:	63da      	str	r2, [r3, #60]	; 0x3c
 8003252:	4b06      	ldr	r3, [pc, #24]	; (800326c <HAL_RTC_MspInit+0x78>)
 8003254:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003256:	2380      	movs	r3, #128	; 0x80
 8003258:	00db      	lsls	r3, r3, #3
 800325a:	4013      	ands	r3, r2
 800325c:	60bb      	str	r3, [r7, #8]
 800325e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8003260:	46c0      	nop			; (mov r8, r8)
 8003262:	46bd      	mov	sp, r7
 8003264:	b017      	add	sp, #92	; 0x5c
 8003266:	bd90      	pop	{r4, r7, pc}
 8003268:	40002800 	.word	0x40002800
 800326c:	40021000 	.word	0x40021000

08003270 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003270:	b590      	push	{r4, r7, lr}
 8003272:	b08b      	sub	sp, #44	; 0x2c
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003278:	2414      	movs	r4, #20
 800327a:	193b      	adds	r3, r7, r4
 800327c:	0018      	movs	r0, r3
 800327e:	2314      	movs	r3, #20
 8003280:	001a      	movs	r2, r3
 8003282:	2100      	movs	r1, #0
 8003284:	f007 f8f0 	bl	800a468 <memset>
  if(hspi->Instance==SPI1)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	4a2c      	ldr	r2, [pc, #176]	; (8003340 <HAL_SPI_MspInit+0xd0>)
 800328e:	4293      	cmp	r3, r2
 8003290:	d152      	bne.n	8003338 <HAL_SPI_MspInit+0xc8>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003292:	4b2c      	ldr	r3, [pc, #176]	; (8003344 <HAL_SPI_MspInit+0xd4>)
 8003294:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003296:	4b2b      	ldr	r3, [pc, #172]	; (8003344 <HAL_SPI_MspInit+0xd4>)
 8003298:	2180      	movs	r1, #128	; 0x80
 800329a:	0149      	lsls	r1, r1, #5
 800329c:	430a      	orrs	r2, r1
 800329e:	641a      	str	r2, [r3, #64]	; 0x40
 80032a0:	4b28      	ldr	r3, [pc, #160]	; (8003344 <HAL_SPI_MspInit+0xd4>)
 80032a2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80032a4:	2380      	movs	r3, #128	; 0x80
 80032a6:	015b      	lsls	r3, r3, #5
 80032a8:	4013      	ands	r3, r2
 80032aa:	613b      	str	r3, [r7, #16]
 80032ac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80032ae:	4b25      	ldr	r3, [pc, #148]	; (8003344 <HAL_SPI_MspInit+0xd4>)
 80032b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80032b2:	4b24      	ldr	r3, [pc, #144]	; (8003344 <HAL_SPI_MspInit+0xd4>)
 80032b4:	2101      	movs	r1, #1
 80032b6:	430a      	orrs	r2, r1
 80032b8:	635a      	str	r2, [r3, #52]	; 0x34
 80032ba:	4b22      	ldr	r3, [pc, #136]	; (8003344 <HAL_SPI_MspInit+0xd4>)
 80032bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032be:	2201      	movs	r2, #1
 80032c0:	4013      	ands	r3, r2
 80032c2:	60fb      	str	r3, [r7, #12]
 80032c4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80032c6:	4b1f      	ldr	r3, [pc, #124]	; (8003344 <HAL_SPI_MspInit+0xd4>)
 80032c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80032ca:	4b1e      	ldr	r3, [pc, #120]	; (8003344 <HAL_SPI_MspInit+0xd4>)
 80032cc:	2108      	movs	r1, #8
 80032ce:	430a      	orrs	r2, r1
 80032d0:	635a      	str	r2, [r3, #52]	; 0x34
 80032d2:	4b1c      	ldr	r3, [pc, #112]	; (8003344 <HAL_SPI_MspInit+0xd4>)
 80032d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032d6:	2208      	movs	r2, #8
 80032d8:	4013      	ands	r3, r2
 80032da:	60bb      	str	r3, [r7, #8]
 80032dc:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PD8     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = ACC_MISO_Pin|ACC_MOSI_Pin;
 80032de:	193b      	adds	r3, r7, r4
 80032e0:	22c0      	movs	r2, #192	; 0xc0
 80032e2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032e4:	193b      	adds	r3, r7, r4
 80032e6:	2202      	movs	r2, #2
 80032e8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032ea:	193b      	adds	r3, r7, r4
 80032ec:	2200      	movs	r2, #0
 80032ee:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032f0:	193b      	adds	r3, r7, r4
 80032f2:	2200      	movs	r2, #0
 80032f4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 80032f6:	193b      	adds	r3, r7, r4
 80032f8:	2200      	movs	r2, #0
 80032fa:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032fc:	193a      	adds	r2, r7, r4
 80032fe:	23a0      	movs	r3, #160	; 0xa0
 8003300:	05db      	lsls	r3, r3, #23
 8003302:	0011      	movs	r1, r2
 8003304:	0018      	movs	r0, r3
 8003306:	f000 fc31 	bl	8003b6c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ACC_SCK_Pin;
 800330a:	0021      	movs	r1, r4
 800330c:	187b      	adds	r3, r7, r1
 800330e:	2280      	movs	r2, #128	; 0x80
 8003310:	0052      	lsls	r2, r2, #1
 8003312:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003314:	187b      	adds	r3, r7, r1
 8003316:	2202      	movs	r2, #2
 8003318:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800331a:	187b      	adds	r3, r7, r1
 800331c:	2200      	movs	r2, #0
 800331e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003320:	187b      	adds	r3, r7, r1
 8003322:	2200      	movs	r2, #0
 8003324:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_SPI1;
 8003326:	187b      	adds	r3, r7, r1
 8003328:	2201      	movs	r2, #1
 800332a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(ACC_SCK_GPIO_Port, &GPIO_InitStruct);
 800332c:	187b      	adds	r3, r7, r1
 800332e:	4a06      	ldr	r2, [pc, #24]	; (8003348 <HAL_SPI_MspInit+0xd8>)
 8003330:	0019      	movs	r1, r3
 8003332:	0010      	movs	r0, r2
 8003334:	f000 fc1a 	bl	8003b6c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8003338:	46c0      	nop			; (mov r8, r8)
 800333a:	46bd      	mov	sp, r7
 800333c:	b00b      	add	sp, #44	; 0x2c
 800333e:	bd90      	pop	{r4, r7, pc}
 8003340:	40013000 	.word	0x40013000
 8003344:	40021000 	.word	0x40021000
 8003348:	50000c00 	.word	0x50000c00

0800334c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	b084      	sub	sp, #16
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	4a0d      	ldr	r2, [pc, #52]	; (8003390 <HAL_TIM_Base_MspInit+0x44>)
 800335a:	4293      	cmp	r3, r2
 800335c:	d113      	bne.n	8003386 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800335e:	4b0d      	ldr	r3, [pc, #52]	; (8003394 <HAL_TIM_Base_MspInit+0x48>)
 8003360:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003362:	4b0c      	ldr	r3, [pc, #48]	; (8003394 <HAL_TIM_Base_MspInit+0x48>)
 8003364:	2110      	movs	r1, #16
 8003366:	430a      	orrs	r2, r1
 8003368:	63da      	str	r2, [r3, #60]	; 0x3c
 800336a:	4b0a      	ldr	r3, [pc, #40]	; (8003394 <HAL_TIM_Base_MspInit+0x48>)
 800336c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800336e:	2210      	movs	r2, #16
 8003370:	4013      	ands	r3, r2
 8003372:	60fb      	str	r3, [r7, #12]
 8003374:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_LPTIM1_IRQn, 1, 0);
 8003376:	2200      	movs	r2, #0
 8003378:	2101      	movs	r1, #1
 800337a:	2011      	movs	r0, #17
 800337c:	f000 fbc0 	bl	8003b00 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_LPTIM1_IRQn);
 8003380:	2011      	movs	r0, #17
 8003382:	f000 fbd2 	bl	8003b2a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8003386:	46c0      	nop			; (mov r8, r8)
 8003388:	46bd      	mov	sp, r7
 800338a:	b004      	add	sp, #16
 800338c:	bd80      	pop	{r7, pc}
 800338e:	46c0      	nop			; (mov r8, r8)
 8003390:	40001000 	.word	0x40001000
 8003394:	40021000 	.word	0x40021000

08003398 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003398:	b590      	push	{r4, r7, lr}
 800339a:	b0a1      	sub	sp, #132	; 0x84
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033a0:	236c      	movs	r3, #108	; 0x6c
 80033a2:	18fb      	adds	r3, r7, r3
 80033a4:	0018      	movs	r0, r3
 80033a6:	2314      	movs	r3, #20
 80033a8:	001a      	movs	r2, r3
 80033aa:	2100      	movs	r1, #0
 80033ac:	f007 f85c 	bl	800a468 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80033b0:	2420      	movs	r4, #32
 80033b2:	193b      	adds	r3, r7, r4
 80033b4:	0018      	movs	r0, r3
 80033b6:	234c      	movs	r3, #76	; 0x4c
 80033b8:	001a      	movs	r2, r3
 80033ba:	2100      	movs	r1, #0
 80033bc:	f007 f854 	bl	800a468 <memset>
  if(huart->Instance==USART2)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	4a60      	ldr	r2, [pc, #384]	; (8003548 <HAL_UART_MspInit+0x1b0>)
 80033c6:	4293      	cmp	r3, r2
 80033c8:	d13f      	bne.n	800344a <HAL_UART_MspInit+0xb2>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80033ca:	193b      	adds	r3, r7, r4
 80033cc:	2202      	movs	r2, #2
 80033ce:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80033d0:	193b      	adds	r3, r7, r4
 80033d2:	2200      	movs	r2, #0
 80033d4:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80033d6:	193b      	adds	r3, r7, r4
 80033d8:	0018      	movs	r0, r3
 80033da:	f001 fbe7 	bl	8004bac <HAL_RCCEx_PeriphCLKConfig>
 80033de:	1e03      	subs	r3, r0, #0
 80033e0:	d001      	beq.n	80033e6 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80033e2:	f7ff fedd 	bl	80031a0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80033e6:	4b59      	ldr	r3, [pc, #356]	; (800354c <HAL_UART_MspInit+0x1b4>)
 80033e8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80033ea:	4b58      	ldr	r3, [pc, #352]	; (800354c <HAL_UART_MspInit+0x1b4>)
 80033ec:	2180      	movs	r1, #128	; 0x80
 80033ee:	0289      	lsls	r1, r1, #10
 80033f0:	430a      	orrs	r2, r1
 80033f2:	63da      	str	r2, [r3, #60]	; 0x3c
 80033f4:	4b55      	ldr	r3, [pc, #340]	; (800354c <HAL_UART_MspInit+0x1b4>)
 80033f6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80033f8:	2380      	movs	r3, #128	; 0x80
 80033fa:	029b      	lsls	r3, r3, #10
 80033fc:	4013      	ands	r3, r2
 80033fe:	61fb      	str	r3, [r7, #28]
 8003400:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003402:	4b52      	ldr	r3, [pc, #328]	; (800354c <HAL_UART_MspInit+0x1b4>)
 8003404:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003406:	4b51      	ldr	r3, [pc, #324]	; (800354c <HAL_UART_MspInit+0x1b4>)
 8003408:	2101      	movs	r1, #1
 800340a:	430a      	orrs	r2, r1
 800340c:	635a      	str	r2, [r3, #52]	; 0x34
 800340e:	4b4f      	ldr	r3, [pc, #316]	; (800354c <HAL_UART_MspInit+0x1b4>)
 8003410:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003412:	2201      	movs	r2, #1
 8003414:	4013      	ands	r3, r2
 8003416:	61bb      	str	r3, [r7, #24]
 8003418:	69bb      	ldr	r3, [r7, #24]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = DBG_TX_Pin|DBG_RX_Pin;
 800341a:	216c      	movs	r1, #108	; 0x6c
 800341c:	187b      	adds	r3, r7, r1
 800341e:	220c      	movs	r2, #12
 8003420:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003422:	187b      	adds	r3, r7, r1
 8003424:	2202      	movs	r2, #2
 8003426:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003428:	187b      	adds	r3, r7, r1
 800342a:	2200      	movs	r2, #0
 800342c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800342e:	187b      	adds	r3, r7, r1
 8003430:	2200      	movs	r2, #0
 8003432:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8003434:	187b      	adds	r3, r7, r1
 8003436:	2201      	movs	r2, #1
 8003438:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800343a:	187a      	adds	r2, r7, r1
 800343c:	23a0      	movs	r3, #160	; 0xa0
 800343e:	05db      	lsls	r3, r3, #23
 8003440:	0011      	movs	r1, r2
 8003442:	0018      	movs	r0, r3
 8003444:	f000 fb92 	bl	8003b6c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART5_MspInit 1 */

  /* USER CODE END USART5_MspInit 1 */
  }

}
 8003448:	e07a      	b.n	8003540 <HAL_UART_MspInit+0x1a8>
  else if(huart->Instance==USART3)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	4a40      	ldr	r2, [pc, #256]	; (8003550 <HAL_UART_MspInit+0x1b8>)
 8003450:	4293      	cmp	r3, r2
 8003452:	d140      	bne.n	80034d6 <HAL_UART_MspInit+0x13e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8003454:	2120      	movs	r1, #32
 8003456:	187b      	adds	r3, r7, r1
 8003458:	2204      	movs	r2, #4
 800345a:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800345c:	187b      	adds	r3, r7, r1
 800345e:	2200      	movs	r2, #0
 8003460:	60da      	str	r2, [r3, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003462:	187b      	adds	r3, r7, r1
 8003464:	0018      	movs	r0, r3
 8003466:	f001 fba1 	bl	8004bac <HAL_RCCEx_PeriphCLKConfig>
 800346a:	1e03      	subs	r3, r0, #0
 800346c:	d001      	beq.n	8003472 <HAL_UART_MspInit+0xda>
      Error_Handler();
 800346e:	f7ff fe97 	bl	80031a0 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8003472:	4b36      	ldr	r3, [pc, #216]	; (800354c <HAL_UART_MspInit+0x1b4>)
 8003474:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003476:	4b35      	ldr	r3, [pc, #212]	; (800354c <HAL_UART_MspInit+0x1b4>)
 8003478:	2180      	movs	r1, #128	; 0x80
 800347a:	02c9      	lsls	r1, r1, #11
 800347c:	430a      	orrs	r2, r1
 800347e:	63da      	str	r2, [r3, #60]	; 0x3c
 8003480:	4b32      	ldr	r3, [pc, #200]	; (800354c <HAL_UART_MspInit+0x1b4>)
 8003482:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003484:	2380      	movs	r3, #128	; 0x80
 8003486:	02db      	lsls	r3, r3, #11
 8003488:	4013      	ands	r3, r2
 800348a:	617b      	str	r3, [r7, #20]
 800348c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800348e:	4b2f      	ldr	r3, [pc, #188]	; (800354c <HAL_UART_MspInit+0x1b4>)
 8003490:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003492:	4b2e      	ldr	r3, [pc, #184]	; (800354c <HAL_UART_MspInit+0x1b4>)
 8003494:	2102      	movs	r1, #2
 8003496:	430a      	orrs	r2, r1
 8003498:	635a      	str	r2, [r3, #52]	; 0x34
 800349a:	4b2c      	ldr	r3, [pc, #176]	; (800354c <HAL_UART_MspInit+0x1b4>)
 800349c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800349e:	2202      	movs	r2, #2
 80034a0:	4013      	ands	r3, r2
 80034a2:	613b      	str	r3, [r7, #16]
 80034a4:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ASTRO_TX_Pin|ASTRO_RX_Pin;
 80034a6:	216c      	movs	r1, #108	; 0x6c
 80034a8:	187b      	adds	r3, r7, r1
 80034aa:	22c0      	movs	r2, #192	; 0xc0
 80034ac:	0092      	lsls	r2, r2, #2
 80034ae:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034b0:	187b      	adds	r3, r7, r1
 80034b2:	2202      	movs	r2, #2
 80034b4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034b6:	187b      	adds	r3, r7, r1
 80034b8:	2200      	movs	r2, #0
 80034ba:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034bc:	187b      	adds	r3, r7, r1
 80034be:	2200      	movs	r2, #0
 80034c0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART3;
 80034c2:	187b      	adds	r3, r7, r1
 80034c4:	2204      	movs	r2, #4
 80034c6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80034c8:	187b      	adds	r3, r7, r1
 80034ca:	4a22      	ldr	r2, [pc, #136]	; (8003554 <HAL_UART_MspInit+0x1bc>)
 80034cc:	0019      	movs	r1, r3
 80034ce:	0010      	movs	r0, r2
 80034d0:	f000 fb4c 	bl	8003b6c <HAL_GPIO_Init>
}
 80034d4:	e034      	b.n	8003540 <HAL_UART_MspInit+0x1a8>
  else if(huart->Instance==USART5)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	4a1f      	ldr	r2, [pc, #124]	; (8003558 <HAL_UART_MspInit+0x1c0>)
 80034dc:	4293      	cmp	r3, r2
 80034de:	d12f      	bne.n	8003540 <HAL_UART_MspInit+0x1a8>
    __HAL_RCC_USART5_CLK_ENABLE();
 80034e0:	4b1a      	ldr	r3, [pc, #104]	; (800354c <HAL_UART_MspInit+0x1b4>)
 80034e2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80034e4:	4b19      	ldr	r3, [pc, #100]	; (800354c <HAL_UART_MspInit+0x1b4>)
 80034e6:	2180      	movs	r1, #128	; 0x80
 80034e8:	0049      	lsls	r1, r1, #1
 80034ea:	430a      	orrs	r2, r1
 80034ec:	63da      	str	r2, [r3, #60]	; 0x3c
 80034ee:	4b17      	ldr	r3, [pc, #92]	; (800354c <HAL_UART_MspInit+0x1b4>)
 80034f0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80034f2:	2380      	movs	r3, #128	; 0x80
 80034f4:	005b      	lsls	r3, r3, #1
 80034f6:	4013      	ands	r3, r2
 80034f8:	60fb      	str	r3, [r7, #12]
 80034fa:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80034fc:	4b13      	ldr	r3, [pc, #76]	; (800354c <HAL_UART_MspInit+0x1b4>)
 80034fe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003500:	4b12      	ldr	r3, [pc, #72]	; (800354c <HAL_UART_MspInit+0x1b4>)
 8003502:	2102      	movs	r1, #2
 8003504:	430a      	orrs	r2, r1
 8003506:	635a      	str	r2, [r3, #52]	; 0x34
 8003508:	4b10      	ldr	r3, [pc, #64]	; (800354c <HAL_UART_MspInit+0x1b4>)
 800350a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800350c:	2202      	movs	r2, #2
 800350e:	4013      	ands	r3, r2
 8003510:	60bb      	str	r3, [r7, #8]
 8003512:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GNSS_TX_Pin|GNSS_RX_Pin;
 8003514:	216c      	movs	r1, #108	; 0x6c
 8003516:	187b      	adds	r3, r7, r1
 8003518:	2218      	movs	r2, #24
 800351a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800351c:	187b      	adds	r3, r7, r1
 800351e:	2202      	movs	r2, #2
 8003520:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003522:	187b      	adds	r3, r7, r1
 8003524:	2200      	movs	r2, #0
 8003526:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003528:	187b      	adds	r3, r7, r1
 800352a:	2200      	movs	r2, #0
 800352c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF3_USART5;
 800352e:	187b      	adds	r3, r7, r1
 8003530:	2203      	movs	r2, #3
 8003532:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003534:	187b      	adds	r3, r7, r1
 8003536:	4a07      	ldr	r2, [pc, #28]	; (8003554 <HAL_UART_MspInit+0x1bc>)
 8003538:	0019      	movs	r1, r3
 800353a:	0010      	movs	r0, r2
 800353c:	f000 fb16 	bl	8003b6c <HAL_GPIO_Init>
}
 8003540:	46c0      	nop			; (mov r8, r8)
 8003542:	46bd      	mov	sp, r7
 8003544:	b021      	add	sp, #132	; 0x84
 8003546:	bd90      	pop	{r4, r7, pc}
 8003548:	40004400 	.word	0x40004400
 800354c:	40021000 	.word	0x40021000
 8003550:	40004800 	.word	0x40004800
 8003554:	50000400 	.word	0x50000400
 8003558:	40005000 	.word	0x40005000

0800355c <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 800355c:	b580      	push	{r7, lr}
 800355e:	b082      	sub	sp, #8
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART2)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	4a1b      	ldr	r2, [pc, #108]	; (80035d8 <HAL_UART_MspDeInit+0x7c>)
 800356a:	4293      	cmp	r3, r2
 800356c:	d10c      	bne.n	8003588 <HAL_UART_MspDeInit+0x2c>
  {
  /* USER CODE BEGIN USART2_MspDeInit 0 */

  /* USER CODE END USART2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART2_CLK_DISABLE();
 800356e:	4b1b      	ldr	r3, [pc, #108]	; (80035dc <HAL_UART_MspDeInit+0x80>)
 8003570:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003572:	4b1a      	ldr	r3, [pc, #104]	; (80035dc <HAL_UART_MspDeInit+0x80>)
 8003574:	491a      	ldr	r1, [pc, #104]	; (80035e0 <HAL_UART_MspDeInit+0x84>)
 8003576:	400a      	ands	r2, r1
 8003578:	63da      	str	r2, [r3, #60]	; 0x3c

    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    HAL_GPIO_DeInit(GPIOA, DBG_TX_Pin|DBG_RX_Pin);
 800357a:	23a0      	movs	r3, #160	; 0xa0
 800357c:	05db      	lsls	r3, r3, #23
 800357e:	210c      	movs	r1, #12
 8003580:	0018      	movs	r0, r3
 8003582:	f000 fc5f 	bl	8003e44 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN USART5_MspDeInit 1 */

  /* USER CODE END USART5_MspDeInit 1 */
  }

}
 8003586:	e022      	b.n	80035ce <HAL_UART_MspDeInit+0x72>
  else if(huart->Instance==USART3)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	4a15      	ldr	r2, [pc, #84]	; (80035e4 <HAL_UART_MspDeInit+0x88>)
 800358e:	4293      	cmp	r3, r2
 8003590:	d10d      	bne.n	80035ae <HAL_UART_MspDeInit+0x52>
    __HAL_RCC_USART3_CLK_DISABLE();
 8003592:	4b12      	ldr	r3, [pc, #72]	; (80035dc <HAL_UART_MspDeInit+0x80>)
 8003594:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003596:	4b11      	ldr	r3, [pc, #68]	; (80035dc <HAL_UART_MspDeInit+0x80>)
 8003598:	4913      	ldr	r1, [pc, #76]	; (80035e8 <HAL_UART_MspDeInit+0x8c>)
 800359a:	400a      	ands	r2, r1
 800359c:	63da      	str	r2, [r3, #60]	; 0x3c
    HAL_GPIO_DeInit(GPIOB, ASTRO_TX_Pin|ASTRO_RX_Pin);
 800359e:	23c0      	movs	r3, #192	; 0xc0
 80035a0:	009b      	lsls	r3, r3, #2
 80035a2:	4a12      	ldr	r2, [pc, #72]	; (80035ec <HAL_UART_MspDeInit+0x90>)
 80035a4:	0019      	movs	r1, r3
 80035a6:	0010      	movs	r0, r2
 80035a8:	f000 fc4c 	bl	8003e44 <HAL_GPIO_DeInit>
}
 80035ac:	e00f      	b.n	80035ce <HAL_UART_MspDeInit+0x72>
  else if(huart->Instance==USART5)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	4a0f      	ldr	r2, [pc, #60]	; (80035f0 <HAL_UART_MspDeInit+0x94>)
 80035b4:	4293      	cmp	r3, r2
 80035b6:	d10a      	bne.n	80035ce <HAL_UART_MspDeInit+0x72>
    __HAL_RCC_USART5_CLK_DISABLE();
 80035b8:	4b08      	ldr	r3, [pc, #32]	; (80035dc <HAL_UART_MspDeInit+0x80>)
 80035ba:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80035bc:	4b07      	ldr	r3, [pc, #28]	; (80035dc <HAL_UART_MspDeInit+0x80>)
 80035be:	490d      	ldr	r1, [pc, #52]	; (80035f4 <HAL_UART_MspDeInit+0x98>)
 80035c0:	400a      	ands	r2, r1
 80035c2:	63da      	str	r2, [r3, #60]	; 0x3c
    HAL_GPIO_DeInit(GPIOB, GNSS_TX_Pin|GNSS_RX_Pin);
 80035c4:	4b09      	ldr	r3, [pc, #36]	; (80035ec <HAL_UART_MspDeInit+0x90>)
 80035c6:	2118      	movs	r1, #24
 80035c8:	0018      	movs	r0, r3
 80035ca:	f000 fc3b 	bl	8003e44 <HAL_GPIO_DeInit>
}
 80035ce:	46c0      	nop			; (mov r8, r8)
 80035d0:	46bd      	mov	sp, r7
 80035d2:	b002      	add	sp, #8
 80035d4:	bd80      	pop	{r7, pc}
 80035d6:	46c0      	nop			; (mov r8, r8)
 80035d8:	40004400 	.word	0x40004400
 80035dc:	40021000 	.word	0x40021000
 80035e0:	fffdffff 	.word	0xfffdffff
 80035e4:	40004800 	.word	0x40004800
 80035e8:	fffbffff 	.word	0xfffbffff
 80035ec:	50000400 	.word	0x50000400
 80035f0:	40005000 	.word	0x40005000
 80035f4:	fffffeff 	.word	0xfffffeff

080035f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80035fc:	e7fe      	b.n	80035fc <NMI_Handler+0x4>

080035fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80035fe:	b580      	push	{r7, lr}
 8003600:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003602:	e7fe      	b.n	8003602 <HardFault_Handler+0x4>

08003604 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003604:	b580      	push	{r7, lr}
 8003606:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8003608:	46c0      	nop			; (mov r8, r8)
 800360a:	46bd      	mov	sp, r7
 800360c:	bd80      	pop	{r7, pc}

0800360e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800360e:	b580      	push	{r7, lr}
 8003610:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003612:	46c0      	nop			; (mov r8, r8)
 8003614:	46bd      	mov	sp, r7
 8003616:	bd80      	pop	{r7, pc}

08003618 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003618:	b580      	push	{r7, lr}
 800361a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800361c:	f000 f972 	bl	8003904 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003620:	46c0      	nop			; (mov r8, r8)
 8003622:	46bd      	mov	sp, r7
 8003624:	bd80      	pop	{r7, pc}

08003626 <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and line 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 8003626:	b580      	push	{r7, lr}
 8003628:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ACC_INT1_Pin);
 800362a:	2001      	movs	r0, #1
 800362c:	f000 fd1c 	bl	8004068 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ACC_INT2_Pin);
 8003630:	2002      	movs	r0, #2
 8003632:	f000 fd19 	bl	8004068 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 8003636:	46c0      	nop			; (mov r8, r8)
 8003638:	46bd      	mov	sp, r7
 800363a:	bd80      	pop	{r7, pc}

0800363c <TIM6_DAC_LPTIM1_IRQHandler>:

/**
  * @brief This function handles TIM6, DAC and LPTIM1 global Interrupts.
  */
void TIM6_DAC_LPTIM1_IRQHandler(void)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_LPTIM1_IRQn 0 */

  /* USER CODE END TIM6_DAC_LPTIM1_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003640:	4b03      	ldr	r3, [pc, #12]	; (8003650 <TIM6_DAC_LPTIM1_IRQHandler+0x14>)
 8003642:	0018      	movs	r0, r3
 8003644:	f002 ff8a 	bl	800655c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_LPTIM1_IRQn 1 */

  /* USER CODE END TIM6_DAC_LPTIM1_IRQn 1 */
}
 8003648:	46c0      	nop			; (mov r8, r8)
 800364a:	46bd      	mov	sp, r7
 800364c:	bd80      	pop	{r7, pc}
 800364e:	46c0      	nop			; (mov r8, r8)
 8003650:	2000076c 	.word	0x2000076c

08003654 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003654:	b580      	push	{r7, lr}
 8003656:	af00      	add	r7, sp, #0
  return 1;
 8003658:	2301      	movs	r3, #1
}
 800365a:	0018      	movs	r0, r3
 800365c:	46bd      	mov	sp, r7
 800365e:	bd80      	pop	{r7, pc}

08003660 <_kill>:

int _kill(int pid, int sig)
{
 8003660:	b580      	push	{r7, lr}
 8003662:	b082      	sub	sp, #8
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
 8003668:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800366a:	f006 ffa9 	bl	800a5c0 <__errno>
 800366e:	0003      	movs	r3, r0
 8003670:	2216      	movs	r2, #22
 8003672:	601a      	str	r2, [r3, #0]
  return -1;
 8003674:	2301      	movs	r3, #1
 8003676:	425b      	negs	r3, r3
}
 8003678:	0018      	movs	r0, r3
 800367a:	46bd      	mov	sp, r7
 800367c:	b002      	add	sp, #8
 800367e:	bd80      	pop	{r7, pc}

08003680 <_exit>:

void _exit (int status)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	b082      	sub	sp, #8
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003688:	2301      	movs	r3, #1
 800368a:	425a      	negs	r2, r3
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	0011      	movs	r1, r2
 8003690:	0018      	movs	r0, r3
 8003692:	f7ff ffe5 	bl	8003660 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003696:	e7fe      	b.n	8003696 <_exit+0x16>

08003698 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003698:	b580      	push	{r7, lr}
 800369a:	b086      	sub	sp, #24
 800369c:	af00      	add	r7, sp, #0
 800369e:	60f8      	str	r0, [r7, #12]
 80036a0:	60b9      	str	r1, [r7, #8]
 80036a2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80036a4:	2300      	movs	r3, #0
 80036a6:	617b      	str	r3, [r7, #20]
 80036a8:	e00a      	b.n	80036c0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80036aa:	e000      	b.n	80036ae <_read+0x16>
 80036ac:	bf00      	nop
 80036ae:	0001      	movs	r1, r0
 80036b0:	68bb      	ldr	r3, [r7, #8]
 80036b2:	1c5a      	adds	r2, r3, #1
 80036b4:	60ba      	str	r2, [r7, #8]
 80036b6:	b2ca      	uxtb	r2, r1
 80036b8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80036ba:	697b      	ldr	r3, [r7, #20]
 80036bc:	3301      	adds	r3, #1
 80036be:	617b      	str	r3, [r7, #20]
 80036c0:	697a      	ldr	r2, [r7, #20]
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	429a      	cmp	r2, r3
 80036c6:	dbf0      	blt.n	80036aa <_read+0x12>
  }

  return len;
 80036c8:	687b      	ldr	r3, [r7, #4]
}
 80036ca:	0018      	movs	r0, r3
 80036cc:	46bd      	mov	sp, r7
 80036ce:	b006      	add	sp, #24
 80036d0:	bd80      	pop	{r7, pc}

080036d2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80036d2:	b580      	push	{r7, lr}
 80036d4:	b086      	sub	sp, #24
 80036d6:	af00      	add	r7, sp, #0
 80036d8:	60f8      	str	r0, [r7, #12]
 80036da:	60b9      	str	r1, [r7, #8]
 80036dc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80036de:	2300      	movs	r3, #0
 80036e0:	617b      	str	r3, [r7, #20]
 80036e2:	e009      	b.n	80036f8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80036e4:	68bb      	ldr	r3, [r7, #8]
 80036e6:	1c5a      	adds	r2, r3, #1
 80036e8:	60ba      	str	r2, [r7, #8]
 80036ea:	781b      	ldrb	r3, [r3, #0]
 80036ec:	0018      	movs	r0, r3
 80036ee:	e000      	b.n	80036f2 <_write+0x20>
 80036f0:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80036f2:	697b      	ldr	r3, [r7, #20]
 80036f4:	3301      	adds	r3, #1
 80036f6:	617b      	str	r3, [r7, #20]
 80036f8:	697a      	ldr	r2, [r7, #20]
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	429a      	cmp	r2, r3
 80036fe:	dbf1      	blt.n	80036e4 <_write+0x12>
  }
  return len;
 8003700:	687b      	ldr	r3, [r7, #4]
}
 8003702:	0018      	movs	r0, r3
 8003704:	46bd      	mov	sp, r7
 8003706:	b006      	add	sp, #24
 8003708:	bd80      	pop	{r7, pc}

0800370a <_close>:

int _close(int file)
{
 800370a:	b580      	push	{r7, lr}
 800370c:	b082      	sub	sp, #8
 800370e:	af00      	add	r7, sp, #0
 8003710:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003712:	2301      	movs	r3, #1
 8003714:	425b      	negs	r3, r3
}
 8003716:	0018      	movs	r0, r3
 8003718:	46bd      	mov	sp, r7
 800371a:	b002      	add	sp, #8
 800371c:	bd80      	pop	{r7, pc}

0800371e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800371e:	b580      	push	{r7, lr}
 8003720:	b082      	sub	sp, #8
 8003722:	af00      	add	r7, sp, #0
 8003724:	6078      	str	r0, [r7, #4]
 8003726:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003728:	683b      	ldr	r3, [r7, #0]
 800372a:	2280      	movs	r2, #128	; 0x80
 800372c:	0192      	lsls	r2, r2, #6
 800372e:	605a      	str	r2, [r3, #4]
  return 0;
 8003730:	2300      	movs	r3, #0
}
 8003732:	0018      	movs	r0, r3
 8003734:	46bd      	mov	sp, r7
 8003736:	b002      	add	sp, #8
 8003738:	bd80      	pop	{r7, pc}

0800373a <_isatty>:

int _isatty(int file)
{
 800373a:	b580      	push	{r7, lr}
 800373c:	b082      	sub	sp, #8
 800373e:	af00      	add	r7, sp, #0
 8003740:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003742:	2301      	movs	r3, #1
}
 8003744:	0018      	movs	r0, r3
 8003746:	46bd      	mov	sp, r7
 8003748:	b002      	add	sp, #8
 800374a:	bd80      	pop	{r7, pc}

0800374c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800374c:	b580      	push	{r7, lr}
 800374e:	b084      	sub	sp, #16
 8003750:	af00      	add	r7, sp, #0
 8003752:	60f8      	str	r0, [r7, #12]
 8003754:	60b9      	str	r1, [r7, #8]
 8003756:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003758:	2300      	movs	r3, #0
}
 800375a:	0018      	movs	r0, r3
 800375c:	46bd      	mov	sp, r7
 800375e:	b004      	add	sp, #16
 8003760:	bd80      	pop	{r7, pc}
	...

08003764 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003764:	b580      	push	{r7, lr}
 8003766:	b086      	sub	sp, #24
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800376c:	4a14      	ldr	r2, [pc, #80]	; (80037c0 <_sbrk+0x5c>)
 800376e:	4b15      	ldr	r3, [pc, #84]	; (80037c4 <_sbrk+0x60>)
 8003770:	1ad3      	subs	r3, r2, r3
 8003772:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003774:	697b      	ldr	r3, [r7, #20]
 8003776:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003778:	4b13      	ldr	r3, [pc, #76]	; (80037c8 <_sbrk+0x64>)
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	2b00      	cmp	r3, #0
 800377e:	d102      	bne.n	8003786 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003780:	4b11      	ldr	r3, [pc, #68]	; (80037c8 <_sbrk+0x64>)
 8003782:	4a12      	ldr	r2, [pc, #72]	; (80037cc <_sbrk+0x68>)
 8003784:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003786:	4b10      	ldr	r3, [pc, #64]	; (80037c8 <_sbrk+0x64>)
 8003788:	681a      	ldr	r2, [r3, #0]
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	18d3      	adds	r3, r2, r3
 800378e:	693a      	ldr	r2, [r7, #16]
 8003790:	429a      	cmp	r2, r3
 8003792:	d207      	bcs.n	80037a4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003794:	f006 ff14 	bl	800a5c0 <__errno>
 8003798:	0003      	movs	r3, r0
 800379a:	220c      	movs	r2, #12
 800379c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800379e:	2301      	movs	r3, #1
 80037a0:	425b      	negs	r3, r3
 80037a2:	e009      	b.n	80037b8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80037a4:	4b08      	ldr	r3, [pc, #32]	; (80037c8 <_sbrk+0x64>)
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80037aa:	4b07      	ldr	r3, [pc, #28]	; (80037c8 <_sbrk+0x64>)
 80037ac:	681a      	ldr	r2, [r3, #0]
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	18d2      	adds	r2, r2, r3
 80037b2:	4b05      	ldr	r3, [pc, #20]	; (80037c8 <_sbrk+0x64>)
 80037b4:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80037b6:	68fb      	ldr	r3, [r7, #12]
}
 80037b8:	0018      	movs	r0, r3
 80037ba:	46bd      	mov	sp, r7
 80037bc:	b006      	add	sp, #24
 80037be:	bd80      	pop	{r7, pc}
 80037c0:	20024000 	.word	0x20024000
 80037c4:	00000400 	.word	0x00000400
 80037c8:	20000a88 	.word	0x20000a88
 80037cc:	20000da0 	.word	0x20000da0

080037d0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80037d4:	46c0      	nop			; (mov r8, r8)
 80037d6:	46bd      	mov	sp, r7
 80037d8:	bd80      	pop	{r7, pc}
	...

080037dc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80037dc:	480d      	ldr	r0, [pc, #52]	; (8003814 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80037de:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80037e0:	f7ff fff6 	bl	80037d0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80037e4:	480c      	ldr	r0, [pc, #48]	; (8003818 <LoopForever+0x6>)
  ldr r1, =_edata
 80037e6:	490d      	ldr	r1, [pc, #52]	; (800381c <LoopForever+0xa>)
  ldr r2, =_sidata
 80037e8:	4a0d      	ldr	r2, [pc, #52]	; (8003820 <LoopForever+0xe>)
  movs r3, #0
 80037ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80037ec:	e002      	b.n	80037f4 <LoopCopyDataInit>

080037ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80037ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80037f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80037f2:	3304      	adds	r3, #4

080037f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80037f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80037f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80037f8:	d3f9      	bcc.n	80037ee <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80037fa:	4a0a      	ldr	r2, [pc, #40]	; (8003824 <LoopForever+0x12>)
  ldr r4, =_ebss
 80037fc:	4c0a      	ldr	r4, [pc, #40]	; (8003828 <LoopForever+0x16>)
  movs r3, #0
 80037fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003800:	e001      	b.n	8003806 <LoopFillZerobss>

08003802 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003802:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003804:	3204      	adds	r2, #4

08003806 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003806:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003808:	d3fb      	bcc.n	8003802 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800380a:	f006 fedf 	bl	800a5cc <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 800380e:	f7fe fecb 	bl	80025a8 <main>

08003812 <LoopForever>:

LoopForever:
  b LoopForever
 8003812:	e7fe      	b.n	8003812 <LoopForever>
  ldr   r0, =_estack
 8003814:	20024000 	.word	0x20024000
  ldr r0, =_sdata
 8003818:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800381c:	200006c0 	.word	0x200006c0
  ldr r2, =_sidata
 8003820:	08012e78 	.word	0x08012e78
  ldr r2, =_sbss
 8003824:	200006c0 	.word	0x200006c0
  ldr r4, =_ebss
 8003828:	20000d9c 	.word	0x20000d9c

0800382c <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800382c:	e7fe      	b.n	800382c <ADC1_COMP_IRQHandler>
	...

08003830 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003830:	b580      	push	{r7, lr}
 8003832:	b082      	sub	sp, #8
 8003834:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003836:	1dfb      	adds	r3, r7, #7
 8003838:	2200      	movs	r2, #0
 800383a:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800383c:	4b0b      	ldr	r3, [pc, #44]	; (800386c <HAL_Init+0x3c>)
 800383e:	681a      	ldr	r2, [r3, #0]
 8003840:	4b0a      	ldr	r3, [pc, #40]	; (800386c <HAL_Init+0x3c>)
 8003842:	2180      	movs	r1, #128	; 0x80
 8003844:	0049      	lsls	r1, r1, #1
 8003846:	430a      	orrs	r2, r1
 8003848:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800384a:	2000      	movs	r0, #0
 800384c:	f000 f810 	bl	8003870 <HAL_InitTick>
 8003850:	1e03      	subs	r3, r0, #0
 8003852:	d003      	beq.n	800385c <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8003854:	1dfb      	adds	r3, r7, #7
 8003856:	2201      	movs	r2, #1
 8003858:	701a      	strb	r2, [r3, #0]
 800385a:	e001      	b.n	8003860 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 800385c:	f7ff fca6 	bl	80031ac <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003860:	1dfb      	adds	r3, r7, #7
 8003862:	781b      	ldrb	r3, [r3, #0]
}
 8003864:	0018      	movs	r0, r3
 8003866:	46bd      	mov	sp, r7
 8003868:	b002      	add	sp, #8
 800386a:	bd80      	pop	{r7, pc}
 800386c:	40022000 	.word	0x40022000

08003870 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003870:	b590      	push	{r4, r7, lr}
 8003872:	b085      	sub	sp, #20
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003878:	230f      	movs	r3, #15
 800387a:	18fb      	adds	r3, r7, r3
 800387c:	2200      	movs	r2, #0
 800387e:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8003880:	4b1d      	ldr	r3, [pc, #116]	; (80038f8 <HAL_InitTick+0x88>)
 8003882:	781b      	ldrb	r3, [r3, #0]
 8003884:	2b00      	cmp	r3, #0
 8003886:	d02b      	beq.n	80038e0 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8003888:	4b1c      	ldr	r3, [pc, #112]	; (80038fc <HAL_InitTick+0x8c>)
 800388a:	681c      	ldr	r4, [r3, #0]
 800388c:	4b1a      	ldr	r3, [pc, #104]	; (80038f8 <HAL_InitTick+0x88>)
 800388e:	781b      	ldrb	r3, [r3, #0]
 8003890:	0019      	movs	r1, r3
 8003892:	23fa      	movs	r3, #250	; 0xfa
 8003894:	0098      	lsls	r0, r3, #2
 8003896:	f7fc fc51 	bl	800013c <__udivsi3>
 800389a:	0003      	movs	r3, r0
 800389c:	0019      	movs	r1, r3
 800389e:	0020      	movs	r0, r4
 80038a0:	f7fc fc4c 	bl	800013c <__udivsi3>
 80038a4:	0003      	movs	r3, r0
 80038a6:	0018      	movs	r0, r3
 80038a8:	f000 f953 	bl	8003b52 <HAL_SYSTICK_Config>
 80038ac:	1e03      	subs	r3, r0, #0
 80038ae:	d112      	bne.n	80038d6 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2b03      	cmp	r3, #3
 80038b4:	d80a      	bhi.n	80038cc <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80038b6:	6879      	ldr	r1, [r7, #4]
 80038b8:	2301      	movs	r3, #1
 80038ba:	425b      	negs	r3, r3
 80038bc:	2200      	movs	r2, #0
 80038be:	0018      	movs	r0, r3
 80038c0:	f000 f91e 	bl	8003b00 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80038c4:	4b0e      	ldr	r3, [pc, #56]	; (8003900 <HAL_InitTick+0x90>)
 80038c6:	687a      	ldr	r2, [r7, #4]
 80038c8:	601a      	str	r2, [r3, #0]
 80038ca:	e00d      	b.n	80038e8 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 80038cc:	230f      	movs	r3, #15
 80038ce:	18fb      	adds	r3, r7, r3
 80038d0:	2201      	movs	r2, #1
 80038d2:	701a      	strb	r2, [r3, #0]
 80038d4:	e008      	b.n	80038e8 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 80038d6:	230f      	movs	r3, #15
 80038d8:	18fb      	adds	r3, r7, r3
 80038da:	2201      	movs	r2, #1
 80038dc:	701a      	strb	r2, [r3, #0]
 80038de:	e003      	b.n	80038e8 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80038e0:	230f      	movs	r3, #15
 80038e2:	18fb      	adds	r3, r7, r3
 80038e4:	2201      	movs	r2, #1
 80038e6:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80038e8:	230f      	movs	r3, #15
 80038ea:	18fb      	adds	r3, r7, r3
 80038ec:	781b      	ldrb	r3, [r3, #0]
}
 80038ee:	0018      	movs	r0, r3
 80038f0:	46bd      	mov	sp, r7
 80038f2:	b005      	add	sp, #20
 80038f4:	bd90      	pop	{r4, r7, pc}
 80038f6:	46c0      	nop			; (mov r8, r8)
 80038f8:	2000000c 	.word	0x2000000c
 80038fc:	20000004 	.word	0x20000004
 8003900:	20000008 	.word	0x20000008

08003904 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003904:	b580      	push	{r7, lr}
 8003906:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003908:	4b05      	ldr	r3, [pc, #20]	; (8003920 <HAL_IncTick+0x1c>)
 800390a:	781b      	ldrb	r3, [r3, #0]
 800390c:	001a      	movs	r2, r3
 800390e:	4b05      	ldr	r3, [pc, #20]	; (8003924 <HAL_IncTick+0x20>)
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	18d2      	adds	r2, r2, r3
 8003914:	4b03      	ldr	r3, [pc, #12]	; (8003924 <HAL_IncTick+0x20>)
 8003916:	601a      	str	r2, [r3, #0]
}
 8003918:	46c0      	nop			; (mov r8, r8)
 800391a:	46bd      	mov	sp, r7
 800391c:	bd80      	pop	{r7, pc}
 800391e:	46c0      	nop			; (mov r8, r8)
 8003920:	2000000c 	.word	0x2000000c
 8003924:	20000a8c 	.word	0x20000a8c

08003928 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003928:	b580      	push	{r7, lr}
 800392a:	af00      	add	r7, sp, #0
  return uwTick;
 800392c:	4b02      	ldr	r3, [pc, #8]	; (8003938 <HAL_GetTick+0x10>)
 800392e:	681b      	ldr	r3, [r3, #0]
}
 8003930:	0018      	movs	r0, r3
 8003932:	46bd      	mov	sp, r7
 8003934:	bd80      	pop	{r7, pc}
 8003936:	46c0      	nop			; (mov r8, r8)
 8003938:	20000a8c 	.word	0x20000a8c

0800393c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800393c:	b580      	push	{r7, lr}
 800393e:	b084      	sub	sp, #16
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003944:	f7ff fff0 	bl	8003928 <HAL_GetTick>
 8003948:	0003      	movs	r3, r0
 800394a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	3301      	adds	r3, #1
 8003954:	d005      	beq.n	8003962 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003956:	4b0a      	ldr	r3, [pc, #40]	; (8003980 <HAL_Delay+0x44>)
 8003958:	781b      	ldrb	r3, [r3, #0]
 800395a:	001a      	movs	r2, r3
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	189b      	adds	r3, r3, r2
 8003960:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003962:	46c0      	nop			; (mov r8, r8)
 8003964:	f7ff ffe0 	bl	8003928 <HAL_GetTick>
 8003968:	0002      	movs	r2, r0
 800396a:	68bb      	ldr	r3, [r7, #8]
 800396c:	1ad3      	subs	r3, r2, r3
 800396e:	68fa      	ldr	r2, [r7, #12]
 8003970:	429a      	cmp	r2, r3
 8003972:	d8f7      	bhi.n	8003964 <HAL_Delay+0x28>
  {
  }
}
 8003974:	46c0      	nop			; (mov r8, r8)
 8003976:	46c0      	nop			; (mov r8, r8)
 8003978:	46bd      	mov	sp, r7
 800397a:	b004      	add	sp, #16
 800397c:	bd80      	pop	{r7, pc}
 800397e:	46c0      	nop			; (mov r8, r8)
 8003980:	2000000c 	.word	0x2000000c

08003984 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003984:	b580      	push	{r7, lr}
 8003986:	b082      	sub	sp, #8
 8003988:	af00      	add	r7, sp, #0
 800398a:	0002      	movs	r2, r0
 800398c:	1dfb      	adds	r3, r7, #7
 800398e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003990:	1dfb      	adds	r3, r7, #7
 8003992:	781b      	ldrb	r3, [r3, #0]
 8003994:	2b7f      	cmp	r3, #127	; 0x7f
 8003996:	d809      	bhi.n	80039ac <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003998:	1dfb      	adds	r3, r7, #7
 800399a:	781b      	ldrb	r3, [r3, #0]
 800399c:	001a      	movs	r2, r3
 800399e:	231f      	movs	r3, #31
 80039a0:	401a      	ands	r2, r3
 80039a2:	4b04      	ldr	r3, [pc, #16]	; (80039b4 <__NVIC_EnableIRQ+0x30>)
 80039a4:	2101      	movs	r1, #1
 80039a6:	4091      	lsls	r1, r2
 80039a8:	000a      	movs	r2, r1
 80039aa:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 80039ac:	46c0      	nop			; (mov r8, r8)
 80039ae:	46bd      	mov	sp, r7
 80039b0:	b002      	add	sp, #8
 80039b2:	bd80      	pop	{r7, pc}
 80039b4:	e000e100 	.word	0xe000e100

080039b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80039b8:	b590      	push	{r4, r7, lr}
 80039ba:	b083      	sub	sp, #12
 80039bc:	af00      	add	r7, sp, #0
 80039be:	0002      	movs	r2, r0
 80039c0:	6039      	str	r1, [r7, #0]
 80039c2:	1dfb      	adds	r3, r7, #7
 80039c4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80039c6:	1dfb      	adds	r3, r7, #7
 80039c8:	781b      	ldrb	r3, [r3, #0]
 80039ca:	2b7f      	cmp	r3, #127	; 0x7f
 80039cc:	d828      	bhi.n	8003a20 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80039ce:	4a2f      	ldr	r2, [pc, #188]	; (8003a8c <__NVIC_SetPriority+0xd4>)
 80039d0:	1dfb      	adds	r3, r7, #7
 80039d2:	781b      	ldrb	r3, [r3, #0]
 80039d4:	b25b      	sxtb	r3, r3
 80039d6:	089b      	lsrs	r3, r3, #2
 80039d8:	33c0      	adds	r3, #192	; 0xc0
 80039da:	009b      	lsls	r3, r3, #2
 80039dc:	589b      	ldr	r3, [r3, r2]
 80039de:	1dfa      	adds	r2, r7, #7
 80039e0:	7812      	ldrb	r2, [r2, #0]
 80039e2:	0011      	movs	r1, r2
 80039e4:	2203      	movs	r2, #3
 80039e6:	400a      	ands	r2, r1
 80039e8:	00d2      	lsls	r2, r2, #3
 80039ea:	21ff      	movs	r1, #255	; 0xff
 80039ec:	4091      	lsls	r1, r2
 80039ee:	000a      	movs	r2, r1
 80039f0:	43d2      	mvns	r2, r2
 80039f2:	401a      	ands	r2, r3
 80039f4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80039f6:	683b      	ldr	r3, [r7, #0]
 80039f8:	019b      	lsls	r3, r3, #6
 80039fa:	22ff      	movs	r2, #255	; 0xff
 80039fc:	401a      	ands	r2, r3
 80039fe:	1dfb      	adds	r3, r7, #7
 8003a00:	781b      	ldrb	r3, [r3, #0]
 8003a02:	0018      	movs	r0, r3
 8003a04:	2303      	movs	r3, #3
 8003a06:	4003      	ands	r3, r0
 8003a08:	00db      	lsls	r3, r3, #3
 8003a0a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003a0c:	481f      	ldr	r0, [pc, #124]	; (8003a8c <__NVIC_SetPriority+0xd4>)
 8003a0e:	1dfb      	adds	r3, r7, #7
 8003a10:	781b      	ldrb	r3, [r3, #0]
 8003a12:	b25b      	sxtb	r3, r3
 8003a14:	089b      	lsrs	r3, r3, #2
 8003a16:	430a      	orrs	r2, r1
 8003a18:	33c0      	adds	r3, #192	; 0xc0
 8003a1a:	009b      	lsls	r3, r3, #2
 8003a1c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8003a1e:	e031      	b.n	8003a84 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003a20:	4a1b      	ldr	r2, [pc, #108]	; (8003a90 <__NVIC_SetPriority+0xd8>)
 8003a22:	1dfb      	adds	r3, r7, #7
 8003a24:	781b      	ldrb	r3, [r3, #0]
 8003a26:	0019      	movs	r1, r3
 8003a28:	230f      	movs	r3, #15
 8003a2a:	400b      	ands	r3, r1
 8003a2c:	3b08      	subs	r3, #8
 8003a2e:	089b      	lsrs	r3, r3, #2
 8003a30:	3306      	adds	r3, #6
 8003a32:	009b      	lsls	r3, r3, #2
 8003a34:	18d3      	adds	r3, r2, r3
 8003a36:	3304      	adds	r3, #4
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	1dfa      	adds	r2, r7, #7
 8003a3c:	7812      	ldrb	r2, [r2, #0]
 8003a3e:	0011      	movs	r1, r2
 8003a40:	2203      	movs	r2, #3
 8003a42:	400a      	ands	r2, r1
 8003a44:	00d2      	lsls	r2, r2, #3
 8003a46:	21ff      	movs	r1, #255	; 0xff
 8003a48:	4091      	lsls	r1, r2
 8003a4a:	000a      	movs	r2, r1
 8003a4c:	43d2      	mvns	r2, r2
 8003a4e:	401a      	ands	r2, r3
 8003a50:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003a52:	683b      	ldr	r3, [r7, #0]
 8003a54:	019b      	lsls	r3, r3, #6
 8003a56:	22ff      	movs	r2, #255	; 0xff
 8003a58:	401a      	ands	r2, r3
 8003a5a:	1dfb      	adds	r3, r7, #7
 8003a5c:	781b      	ldrb	r3, [r3, #0]
 8003a5e:	0018      	movs	r0, r3
 8003a60:	2303      	movs	r3, #3
 8003a62:	4003      	ands	r3, r0
 8003a64:	00db      	lsls	r3, r3, #3
 8003a66:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003a68:	4809      	ldr	r0, [pc, #36]	; (8003a90 <__NVIC_SetPriority+0xd8>)
 8003a6a:	1dfb      	adds	r3, r7, #7
 8003a6c:	781b      	ldrb	r3, [r3, #0]
 8003a6e:	001c      	movs	r4, r3
 8003a70:	230f      	movs	r3, #15
 8003a72:	4023      	ands	r3, r4
 8003a74:	3b08      	subs	r3, #8
 8003a76:	089b      	lsrs	r3, r3, #2
 8003a78:	430a      	orrs	r2, r1
 8003a7a:	3306      	adds	r3, #6
 8003a7c:	009b      	lsls	r3, r3, #2
 8003a7e:	18c3      	adds	r3, r0, r3
 8003a80:	3304      	adds	r3, #4
 8003a82:	601a      	str	r2, [r3, #0]
}
 8003a84:	46c0      	nop			; (mov r8, r8)
 8003a86:	46bd      	mov	sp, r7
 8003a88:	b003      	add	sp, #12
 8003a8a:	bd90      	pop	{r4, r7, pc}
 8003a8c:	e000e100 	.word	0xe000e100
 8003a90:	e000ed00 	.word	0xe000ed00

08003a94 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003a98:	f3bf 8f4f 	dsb	sy
}
 8003a9c:	46c0      	nop			; (mov r8, r8)
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003a9e:	4b04      	ldr	r3, [pc, #16]	; (8003ab0 <__NVIC_SystemReset+0x1c>)
 8003aa0:	4a04      	ldr	r2, [pc, #16]	; (8003ab4 <__NVIC_SystemReset+0x20>)
 8003aa2:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8003aa4:	f3bf 8f4f 	dsb	sy
}
 8003aa8:	46c0      	nop			; (mov r8, r8)
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8003aaa:	46c0      	nop			; (mov r8, r8)
 8003aac:	e7fd      	b.n	8003aaa <__NVIC_SystemReset+0x16>
 8003aae:	46c0      	nop			; (mov r8, r8)
 8003ab0:	e000ed00 	.word	0xe000ed00
 8003ab4:	05fa0004 	.word	0x05fa0004

08003ab8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	b082      	sub	sp, #8
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	1e5a      	subs	r2, r3, #1
 8003ac4:	2380      	movs	r3, #128	; 0x80
 8003ac6:	045b      	lsls	r3, r3, #17
 8003ac8:	429a      	cmp	r2, r3
 8003aca:	d301      	bcc.n	8003ad0 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003acc:	2301      	movs	r3, #1
 8003ace:	e010      	b.n	8003af2 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003ad0:	4b0a      	ldr	r3, [pc, #40]	; (8003afc <SysTick_Config+0x44>)
 8003ad2:	687a      	ldr	r2, [r7, #4]
 8003ad4:	3a01      	subs	r2, #1
 8003ad6:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003ad8:	2301      	movs	r3, #1
 8003ada:	425b      	negs	r3, r3
 8003adc:	2103      	movs	r1, #3
 8003ade:	0018      	movs	r0, r3
 8003ae0:	f7ff ff6a 	bl	80039b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003ae4:	4b05      	ldr	r3, [pc, #20]	; (8003afc <SysTick_Config+0x44>)
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003aea:	4b04      	ldr	r3, [pc, #16]	; (8003afc <SysTick_Config+0x44>)
 8003aec:	2207      	movs	r2, #7
 8003aee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003af0:	2300      	movs	r3, #0
}
 8003af2:	0018      	movs	r0, r3
 8003af4:	46bd      	mov	sp, r7
 8003af6:	b002      	add	sp, #8
 8003af8:	bd80      	pop	{r7, pc}
 8003afa:	46c0      	nop			; (mov r8, r8)
 8003afc:	e000e010 	.word	0xe000e010

08003b00 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b084      	sub	sp, #16
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	60b9      	str	r1, [r7, #8]
 8003b08:	607a      	str	r2, [r7, #4]
 8003b0a:	210f      	movs	r1, #15
 8003b0c:	187b      	adds	r3, r7, r1
 8003b0e:	1c02      	adds	r2, r0, #0
 8003b10:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8003b12:	68ba      	ldr	r2, [r7, #8]
 8003b14:	187b      	adds	r3, r7, r1
 8003b16:	781b      	ldrb	r3, [r3, #0]
 8003b18:	b25b      	sxtb	r3, r3
 8003b1a:	0011      	movs	r1, r2
 8003b1c:	0018      	movs	r0, r3
 8003b1e:	f7ff ff4b 	bl	80039b8 <__NVIC_SetPriority>
}
 8003b22:	46c0      	nop			; (mov r8, r8)
 8003b24:	46bd      	mov	sp, r7
 8003b26:	b004      	add	sp, #16
 8003b28:	bd80      	pop	{r7, pc}

08003b2a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b2a:	b580      	push	{r7, lr}
 8003b2c:	b082      	sub	sp, #8
 8003b2e:	af00      	add	r7, sp, #0
 8003b30:	0002      	movs	r2, r0
 8003b32:	1dfb      	adds	r3, r7, #7
 8003b34:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003b36:	1dfb      	adds	r3, r7, #7
 8003b38:	781b      	ldrb	r3, [r3, #0]
 8003b3a:	b25b      	sxtb	r3, r3
 8003b3c:	0018      	movs	r0, r3
 8003b3e:	f7ff ff21 	bl	8003984 <__NVIC_EnableIRQ>
}
 8003b42:	46c0      	nop			; (mov r8, r8)
 8003b44:	46bd      	mov	sp, r7
 8003b46:	b002      	add	sp, #8
 8003b48:	bd80      	pop	{r7, pc}

08003b4a <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiate a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8003b4a:	b580      	push	{r7, lr}
 8003b4c:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8003b4e:	f7ff ffa1 	bl	8003a94 <__NVIC_SystemReset>

08003b52 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003b52:	b580      	push	{r7, lr}
 8003b54:	b082      	sub	sp, #8
 8003b56:	af00      	add	r7, sp, #0
 8003b58:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	0018      	movs	r0, r3
 8003b5e:	f7ff ffab 	bl	8003ab8 <SysTick_Config>
 8003b62:	0003      	movs	r3, r0
}
 8003b64:	0018      	movs	r0, r3
 8003b66:	46bd      	mov	sp, r7
 8003b68:	b002      	add	sp, #8
 8003b6a:	bd80      	pop	{r7, pc}

08003b6c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	b086      	sub	sp, #24
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
 8003b74:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003b76:	2300      	movs	r3, #0
 8003b78:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003b7a:	e14d      	b.n	8003e18 <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	2101      	movs	r1, #1
 8003b82:	697a      	ldr	r2, [r7, #20]
 8003b84:	4091      	lsls	r1, r2
 8003b86:	000a      	movs	r2, r1
 8003b88:	4013      	ands	r3, r2
 8003b8a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d100      	bne.n	8003b94 <HAL_GPIO_Init+0x28>
 8003b92:	e13e      	b.n	8003e12 <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003b94:	683b      	ldr	r3, [r7, #0]
 8003b96:	685b      	ldr	r3, [r3, #4]
 8003b98:	2203      	movs	r2, #3
 8003b9a:	4013      	ands	r3, r2
 8003b9c:	2b01      	cmp	r3, #1
 8003b9e:	d005      	beq.n	8003bac <HAL_GPIO_Init+0x40>
 8003ba0:	683b      	ldr	r3, [r7, #0]
 8003ba2:	685b      	ldr	r3, [r3, #4]
 8003ba4:	2203      	movs	r2, #3
 8003ba6:	4013      	ands	r3, r2
 8003ba8:	2b02      	cmp	r3, #2
 8003baa:	d130      	bne.n	8003c0e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	689b      	ldr	r3, [r3, #8]
 8003bb0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003bb2:	697b      	ldr	r3, [r7, #20]
 8003bb4:	005b      	lsls	r3, r3, #1
 8003bb6:	2203      	movs	r2, #3
 8003bb8:	409a      	lsls	r2, r3
 8003bba:	0013      	movs	r3, r2
 8003bbc:	43da      	mvns	r2, r3
 8003bbe:	693b      	ldr	r3, [r7, #16]
 8003bc0:	4013      	ands	r3, r2
 8003bc2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003bc4:	683b      	ldr	r3, [r7, #0]
 8003bc6:	68da      	ldr	r2, [r3, #12]
 8003bc8:	697b      	ldr	r3, [r7, #20]
 8003bca:	005b      	lsls	r3, r3, #1
 8003bcc:	409a      	lsls	r2, r3
 8003bce:	0013      	movs	r3, r2
 8003bd0:	693a      	ldr	r2, [r7, #16]
 8003bd2:	4313      	orrs	r3, r2
 8003bd4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	693a      	ldr	r2, [r7, #16]
 8003bda:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	685b      	ldr	r3, [r3, #4]
 8003be0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003be2:	2201      	movs	r2, #1
 8003be4:	697b      	ldr	r3, [r7, #20]
 8003be6:	409a      	lsls	r2, r3
 8003be8:	0013      	movs	r3, r2
 8003bea:	43da      	mvns	r2, r3
 8003bec:	693b      	ldr	r3, [r7, #16]
 8003bee:	4013      	ands	r3, r2
 8003bf0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003bf2:	683b      	ldr	r3, [r7, #0]
 8003bf4:	685b      	ldr	r3, [r3, #4]
 8003bf6:	091b      	lsrs	r3, r3, #4
 8003bf8:	2201      	movs	r2, #1
 8003bfa:	401a      	ands	r2, r3
 8003bfc:	697b      	ldr	r3, [r7, #20]
 8003bfe:	409a      	lsls	r2, r3
 8003c00:	0013      	movs	r3, r2
 8003c02:	693a      	ldr	r2, [r7, #16]
 8003c04:	4313      	orrs	r3, r2
 8003c06:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	693a      	ldr	r2, [r7, #16]
 8003c0c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003c0e:	683b      	ldr	r3, [r7, #0]
 8003c10:	685b      	ldr	r3, [r3, #4]
 8003c12:	2203      	movs	r2, #3
 8003c14:	4013      	ands	r3, r2
 8003c16:	2b03      	cmp	r3, #3
 8003c18:	d017      	beq.n	8003c4a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	68db      	ldr	r3, [r3, #12]
 8003c1e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003c20:	697b      	ldr	r3, [r7, #20]
 8003c22:	005b      	lsls	r3, r3, #1
 8003c24:	2203      	movs	r2, #3
 8003c26:	409a      	lsls	r2, r3
 8003c28:	0013      	movs	r3, r2
 8003c2a:	43da      	mvns	r2, r3
 8003c2c:	693b      	ldr	r3, [r7, #16]
 8003c2e:	4013      	ands	r3, r2
 8003c30:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003c32:	683b      	ldr	r3, [r7, #0]
 8003c34:	689a      	ldr	r2, [r3, #8]
 8003c36:	697b      	ldr	r3, [r7, #20]
 8003c38:	005b      	lsls	r3, r3, #1
 8003c3a:	409a      	lsls	r2, r3
 8003c3c:	0013      	movs	r3, r2
 8003c3e:	693a      	ldr	r2, [r7, #16]
 8003c40:	4313      	orrs	r3, r2
 8003c42:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	693a      	ldr	r2, [r7, #16]
 8003c48:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003c4a:	683b      	ldr	r3, [r7, #0]
 8003c4c:	685b      	ldr	r3, [r3, #4]
 8003c4e:	2203      	movs	r2, #3
 8003c50:	4013      	ands	r3, r2
 8003c52:	2b02      	cmp	r3, #2
 8003c54:	d123      	bne.n	8003c9e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003c56:	697b      	ldr	r3, [r7, #20]
 8003c58:	08da      	lsrs	r2, r3, #3
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	3208      	adds	r2, #8
 8003c5e:	0092      	lsls	r2, r2, #2
 8003c60:	58d3      	ldr	r3, [r2, r3]
 8003c62:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003c64:	697b      	ldr	r3, [r7, #20]
 8003c66:	2207      	movs	r2, #7
 8003c68:	4013      	ands	r3, r2
 8003c6a:	009b      	lsls	r3, r3, #2
 8003c6c:	220f      	movs	r2, #15
 8003c6e:	409a      	lsls	r2, r3
 8003c70:	0013      	movs	r3, r2
 8003c72:	43da      	mvns	r2, r3
 8003c74:	693b      	ldr	r3, [r7, #16]
 8003c76:	4013      	ands	r3, r2
 8003c78:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003c7a:	683b      	ldr	r3, [r7, #0]
 8003c7c:	691a      	ldr	r2, [r3, #16]
 8003c7e:	697b      	ldr	r3, [r7, #20]
 8003c80:	2107      	movs	r1, #7
 8003c82:	400b      	ands	r3, r1
 8003c84:	009b      	lsls	r3, r3, #2
 8003c86:	409a      	lsls	r2, r3
 8003c88:	0013      	movs	r3, r2
 8003c8a:	693a      	ldr	r2, [r7, #16]
 8003c8c:	4313      	orrs	r3, r2
 8003c8e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003c90:	697b      	ldr	r3, [r7, #20]
 8003c92:	08da      	lsrs	r2, r3, #3
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	3208      	adds	r2, #8
 8003c98:	0092      	lsls	r2, r2, #2
 8003c9a:	6939      	ldr	r1, [r7, #16]
 8003c9c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003ca4:	697b      	ldr	r3, [r7, #20]
 8003ca6:	005b      	lsls	r3, r3, #1
 8003ca8:	2203      	movs	r2, #3
 8003caa:	409a      	lsls	r2, r3
 8003cac:	0013      	movs	r3, r2
 8003cae:	43da      	mvns	r2, r3
 8003cb0:	693b      	ldr	r3, [r7, #16]
 8003cb2:	4013      	ands	r3, r2
 8003cb4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003cb6:	683b      	ldr	r3, [r7, #0]
 8003cb8:	685b      	ldr	r3, [r3, #4]
 8003cba:	2203      	movs	r2, #3
 8003cbc:	401a      	ands	r2, r3
 8003cbe:	697b      	ldr	r3, [r7, #20]
 8003cc0:	005b      	lsls	r3, r3, #1
 8003cc2:	409a      	lsls	r2, r3
 8003cc4:	0013      	movs	r3, r2
 8003cc6:	693a      	ldr	r2, [r7, #16]
 8003cc8:	4313      	orrs	r3, r2
 8003cca:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	693a      	ldr	r2, [r7, #16]
 8003cd0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003cd2:	683b      	ldr	r3, [r7, #0]
 8003cd4:	685a      	ldr	r2, [r3, #4]
 8003cd6:	23c0      	movs	r3, #192	; 0xc0
 8003cd8:	029b      	lsls	r3, r3, #10
 8003cda:	4013      	ands	r3, r2
 8003cdc:	d100      	bne.n	8003ce0 <HAL_GPIO_Init+0x174>
 8003cde:	e098      	b.n	8003e12 <HAL_GPIO_Init+0x2a6>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8003ce0:	4a53      	ldr	r2, [pc, #332]	; (8003e30 <HAL_GPIO_Init+0x2c4>)
 8003ce2:	697b      	ldr	r3, [r7, #20]
 8003ce4:	089b      	lsrs	r3, r3, #2
 8003ce6:	3318      	adds	r3, #24
 8003ce8:	009b      	lsls	r3, r3, #2
 8003cea:	589b      	ldr	r3, [r3, r2]
 8003cec:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8003cee:	697b      	ldr	r3, [r7, #20]
 8003cf0:	2203      	movs	r2, #3
 8003cf2:	4013      	ands	r3, r2
 8003cf4:	00db      	lsls	r3, r3, #3
 8003cf6:	220f      	movs	r2, #15
 8003cf8:	409a      	lsls	r2, r3
 8003cfa:	0013      	movs	r3, r2
 8003cfc:	43da      	mvns	r2, r3
 8003cfe:	693b      	ldr	r3, [r7, #16]
 8003d00:	4013      	ands	r3, r2
 8003d02:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8003d04:	687a      	ldr	r2, [r7, #4]
 8003d06:	23a0      	movs	r3, #160	; 0xa0
 8003d08:	05db      	lsls	r3, r3, #23
 8003d0a:	429a      	cmp	r2, r3
 8003d0c:	d019      	beq.n	8003d42 <HAL_GPIO_Init+0x1d6>
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	4a48      	ldr	r2, [pc, #288]	; (8003e34 <HAL_GPIO_Init+0x2c8>)
 8003d12:	4293      	cmp	r3, r2
 8003d14:	d013      	beq.n	8003d3e <HAL_GPIO_Init+0x1d2>
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	4a47      	ldr	r2, [pc, #284]	; (8003e38 <HAL_GPIO_Init+0x2cc>)
 8003d1a:	4293      	cmp	r3, r2
 8003d1c:	d00d      	beq.n	8003d3a <HAL_GPIO_Init+0x1ce>
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	4a46      	ldr	r2, [pc, #280]	; (8003e3c <HAL_GPIO_Init+0x2d0>)
 8003d22:	4293      	cmp	r3, r2
 8003d24:	d007      	beq.n	8003d36 <HAL_GPIO_Init+0x1ca>
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	4a45      	ldr	r2, [pc, #276]	; (8003e40 <HAL_GPIO_Init+0x2d4>)
 8003d2a:	4293      	cmp	r3, r2
 8003d2c:	d101      	bne.n	8003d32 <HAL_GPIO_Init+0x1c6>
 8003d2e:	2304      	movs	r3, #4
 8003d30:	e008      	b.n	8003d44 <HAL_GPIO_Init+0x1d8>
 8003d32:	2305      	movs	r3, #5
 8003d34:	e006      	b.n	8003d44 <HAL_GPIO_Init+0x1d8>
 8003d36:	2303      	movs	r3, #3
 8003d38:	e004      	b.n	8003d44 <HAL_GPIO_Init+0x1d8>
 8003d3a:	2302      	movs	r3, #2
 8003d3c:	e002      	b.n	8003d44 <HAL_GPIO_Init+0x1d8>
 8003d3e:	2301      	movs	r3, #1
 8003d40:	e000      	b.n	8003d44 <HAL_GPIO_Init+0x1d8>
 8003d42:	2300      	movs	r3, #0
 8003d44:	697a      	ldr	r2, [r7, #20]
 8003d46:	2103      	movs	r1, #3
 8003d48:	400a      	ands	r2, r1
 8003d4a:	00d2      	lsls	r2, r2, #3
 8003d4c:	4093      	lsls	r3, r2
 8003d4e:	693a      	ldr	r2, [r7, #16]
 8003d50:	4313      	orrs	r3, r2
 8003d52:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8003d54:	4936      	ldr	r1, [pc, #216]	; (8003e30 <HAL_GPIO_Init+0x2c4>)
 8003d56:	697b      	ldr	r3, [r7, #20]
 8003d58:	089b      	lsrs	r3, r3, #2
 8003d5a:	3318      	adds	r3, #24
 8003d5c:	009b      	lsls	r3, r3, #2
 8003d5e:	693a      	ldr	r2, [r7, #16]
 8003d60:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003d62:	4b33      	ldr	r3, [pc, #204]	; (8003e30 <HAL_GPIO_Init+0x2c4>)
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	43da      	mvns	r2, r3
 8003d6c:	693b      	ldr	r3, [r7, #16]
 8003d6e:	4013      	ands	r3, r2
 8003d70:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003d72:	683b      	ldr	r3, [r7, #0]
 8003d74:	685a      	ldr	r2, [r3, #4]
 8003d76:	2380      	movs	r3, #128	; 0x80
 8003d78:	035b      	lsls	r3, r3, #13
 8003d7a:	4013      	ands	r3, r2
 8003d7c:	d003      	beq.n	8003d86 <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8003d7e:	693a      	ldr	r2, [r7, #16]
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	4313      	orrs	r3, r2
 8003d84:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003d86:	4b2a      	ldr	r3, [pc, #168]	; (8003e30 <HAL_GPIO_Init+0x2c4>)
 8003d88:	693a      	ldr	r2, [r7, #16]
 8003d8a:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8003d8c:	4b28      	ldr	r3, [pc, #160]	; (8003e30 <HAL_GPIO_Init+0x2c4>)
 8003d8e:	685b      	ldr	r3, [r3, #4]
 8003d90:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	43da      	mvns	r2, r3
 8003d96:	693b      	ldr	r3, [r7, #16]
 8003d98:	4013      	ands	r3, r2
 8003d9a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003d9c:	683b      	ldr	r3, [r7, #0]
 8003d9e:	685a      	ldr	r2, [r3, #4]
 8003da0:	2380      	movs	r3, #128	; 0x80
 8003da2:	039b      	lsls	r3, r3, #14
 8003da4:	4013      	ands	r3, r2
 8003da6:	d003      	beq.n	8003db0 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 8003da8:	693a      	ldr	r2, [r7, #16]
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	4313      	orrs	r3, r2
 8003dae:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003db0:	4b1f      	ldr	r3, [pc, #124]	; (8003e30 <HAL_GPIO_Init+0x2c4>)
 8003db2:	693a      	ldr	r2, [r7, #16]
 8003db4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003db6:	4a1e      	ldr	r2, [pc, #120]	; (8003e30 <HAL_GPIO_Init+0x2c4>)
 8003db8:	2384      	movs	r3, #132	; 0x84
 8003dba:	58d3      	ldr	r3, [r2, r3]
 8003dbc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	43da      	mvns	r2, r3
 8003dc2:	693b      	ldr	r3, [r7, #16]
 8003dc4:	4013      	ands	r3, r2
 8003dc6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003dc8:	683b      	ldr	r3, [r7, #0]
 8003dca:	685a      	ldr	r2, [r3, #4]
 8003dcc:	2380      	movs	r3, #128	; 0x80
 8003dce:	029b      	lsls	r3, r3, #10
 8003dd0:	4013      	ands	r3, r2
 8003dd2:	d003      	beq.n	8003ddc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003dd4:	693a      	ldr	r2, [r7, #16]
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	4313      	orrs	r3, r2
 8003dda:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003ddc:	4914      	ldr	r1, [pc, #80]	; (8003e30 <HAL_GPIO_Init+0x2c4>)
 8003dde:	2284      	movs	r2, #132	; 0x84
 8003de0:	693b      	ldr	r3, [r7, #16]
 8003de2:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8003de4:	4a12      	ldr	r2, [pc, #72]	; (8003e30 <HAL_GPIO_Init+0x2c4>)
 8003de6:	2380      	movs	r3, #128	; 0x80
 8003de8:	58d3      	ldr	r3, [r2, r3]
 8003dea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	43da      	mvns	r2, r3
 8003df0:	693b      	ldr	r3, [r7, #16]
 8003df2:	4013      	ands	r3, r2
 8003df4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003df6:	683b      	ldr	r3, [r7, #0]
 8003df8:	685a      	ldr	r2, [r3, #4]
 8003dfa:	2380      	movs	r3, #128	; 0x80
 8003dfc:	025b      	lsls	r3, r3, #9
 8003dfe:	4013      	ands	r3, r2
 8003e00:	d003      	beq.n	8003e0a <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8003e02:	693a      	ldr	r2, [r7, #16]
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	4313      	orrs	r3, r2
 8003e08:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003e0a:	4909      	ldr	r1, [pc, #36]	; (8003e30 <HAL_GPIO_Init+0x2c4>)
 8003e0c:	2280      	movs	r2, #128	; 0x80
 8003e0e:	693b      	ldr	r3, [r7, #16]
 8003e10:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8003e12:	697b      	ldr	r3, [r7, #20]
 8003e14:	3301      	adds	r3, #1
 8003e16:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003e18:	683b      	ldr	r3, [r7, #0]
 8003e1a:	681a      	ldr	r2, [r3, #0]
 8003e1c:	697b      	ldr	r3, [r7, #20]
 8003e1e:	40da      	lsrs	r2, r3
 8003e20:	1e13      	subs	r3, r2, #0
 8003e22:	d000      	beq.n	8003e26 <HAL_GPIO_Init+0x2ba>
 8003e24:	e6aa      	b.n	8003b7c <HAL_GPIO_Init+0x10>
  }
}
 8003e26:	46c0      	nop			; (mov r8, r8)
 8003e28:	46c0      	nop			; (mov r8, r8)
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	b006      	add	sp, #24
 8003e2e:	bd80      	pop	{r7, pc}
 8003e30:	40021800 	.word	0x40021800
 8003e34:	50000400 	.word	0x50000400
 8003e38:	50000800 	.word	0x50000800
 8003e3c:	50000c00 	.word	0x50000c00
 8003e40:	50001000 	.word	0x50001000

08003e44 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003e44:	b580      	push	{r7, lr}
 8003e46:	b086      	sub	sp, #24
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
 8003e4c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003e4e:	2300      	movs	r3, #0
 8003e50:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8003e52:	e0ba      	b.n	8003fca <HAL_GPIO_DeInit+0x186>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8003e54:	2201      	movs	r2, #1
 8003e56:	697b      	ldr	r3, [r7, #20]
 8003e58:	409a      	lsls	r2, r3
 8003e5a:	683b      	ldr	r3, [r7, #0]
 8003e5c:	4013      	ands	r3, r2
 8003e5e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8003e60:	693b      	ldr	r3, [r7, #16]
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d100      	bne.n	8003e68 <HAL_GPIO_DeInit+0x24>
 8003e66:	e0ad      	b.n	8003fc4 <HAL_GPIO_DeInit+0x180>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = EXTI->EXTICR[position >> 2u];
 8003e68:	4a5d      	ldr	r2, [pc, #372]	; (8003fe0 <HAL_GPIO_DeInit+0x19c>)
 8003e6a:	697b      	ldr	r3, [r7, #20]
 8003e6c:	089b      	lsrs	r3, r3, #2
 8003e6e:	3318      	adds	r3, #24
 8003e70:	009b      	lsls	r3, r3, #2
 8003e72:	589b      	ldr	r3, [r3, r2]
 8003e74:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (8u * (position & 0x03u)));
 8003e76:	697b      	ldr	r3, [r7, #20]
 8003e78:	2203      	movs	r2, #3
 8003e7a:	4013      	ands	r3, r2
 8003e7c:	00db      	lsls	r3, r3, #3
 8003e7e:	220f      	movs	r2, #15
 8003e80:	409a      	lsls	r2, r3
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	4013      	ands	r3, r2
 8003e86:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u))))
 8003e88:	687a      	ldr	r2, [r7, #4]
 8003e8a:	23a0      	movs	r3, #160	; 0xa0
 8003e8c:	05db      	lsls	r3, r3, #23
 8003e8e:	429a      	cmp	r2, r3
 8003e90:	d019      	beq.n	8003ec6 <HAL_GPIO_DeInit+0x82>
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	4a53      	ldr	r2, [pc, #332]	; (8003fe4 <HAL_GPIO_DeInit+0x1a0>)
 8003e96:	4293      	cmp	r3, r2
 8003e98:	d013      	beq.n	8003ec2 <HAL_GPIO_DeInit+0x7e>
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	4a52      	ldr	r2, [pc, #328]	; (8003fe8 <HAL_GPIO_DeInit+0x1a4>)
 8003e9e:	4293      	cmp	r3, r2
 8003ea0:	d00d      	beq.n	8003ebe <HAL_GPIO_DeInit+0x7a>
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	4a51      	ldr	r2, [pc, #324]	; (8003fec <HAL_GPIO_DeInit+0x1a8>)
 8003ea6:	4293      	cmp	r3, r2
 8003ea8:	d007      	beq.n	8003eba <HAL_GPIO_DeInit+0x76>
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	4a50      	ldr	r2, [pc, #320]	; (8003ff0 <HAL_GPIO_DeInit+0x1ac>)
 8003eae:	4293      	cmp	r3, r2
 8003eb0:	d101      	bne.n	8003eb6 <HAL_GPIO_DeInit+0x72>
 8003eb2:	2304      	movs	r3, #4
 8003eb4:	e008      	b.n	8003ec8 <HAL_GPIO_DeInit+0x84>
 8003eb6:	2305      	movs	r3, #5
 8003eb8:	e006      	b.n	8003ec8 <HAL_GPIO_DeInit+0x84>
 8003eba:	2303      	movs	r3, #3
 8003ebc:	e004      	b.n	8003ec8 <HAL_GPIO_DeInit+0x84>
 8003ebe:	2302      	movs	r3, #2
 8003ec0:	e002      	b.n	8003ec8 <HAL_GPIO_DeInit+0x84>
 8003ec2:	2301      	movs	r3, #1
 8003ec4:	e000      	b.n	8003ec8 <HAL_GPIO_DeInit+0x84>
 8003ec6:	2300      	movs	r3, #0
 8003ec8:	697a      	ldr	r2, [r7, #20]
 8003eca:	2103      	movs	r1, #3
 8003ecc:	400a      	ands	r2, r1
 8003ece:	00d2      	lsls	r2, r2, #3
 8003ed0:	4093      	lsls	r3, r2
 8003ed2:	68fa      	ldr	r2, [r7, #12]
 8003ed4:	429a      	cmp	r2, r3
 8003ed6:	d136      	bne.n	8003f46 <HAL_GPIO_DeInit+0x102>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8003ed8:	4a41      	ldr	r2, [pc, #260]	; (8003fe0 <HAL_GPIO_DeInit+0x19c>)
 8003eda:	2380      	movs	r3, #128	; 0x80
 8003edc:	58d3      	ldr	r3, [r2, r3]
 8003ede:	693a      	ldr	r2, [r7, #16]
 8003ee0:	43d2      	mvns	r2, r2
 8003ee2:	493f      	ldr	r1, [pc, #252]	; (8003fe0 <HAL_GPIO_DeInit+0x19c>)
 8003ee4:	4013      	ands	r3, r2
 8003ee6:	2280      	movs	r2, #128	; 0x80
 8003ee8:	508b      	str	r3, [r1, r2]
        EXTI->EMR1 &= ~(iocurrent);
 8003eea:	4a3d      	ldr	r2, [pc, #244]	; (8003fe0 <HAL_GPIO_DeInit+0x19c>)
 8003eec:	2384      	movs	r3, #132	; 0x84
 8003eee:	58d3      	ldr	r3, [r2, r3]
 8003ef0:	693a      	ldr	r2, [r7, #16]
 8003ef2:	43d2      	mvns	r2, r2
 8003ef4:	493a      	ldr	r1, [pc, #232]	; (8003fe0 <HAL_GPIO_DeInit+0x19c>)
 8003ef6:	4013      	ands	r3, r2
 8003ef8:	2284      	movs	r2, #132	; 0x84
 8003efa:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8003efc:	4b38      	ldr	r3, [pc, #224]	; (8003fe0 <HAL_GPIO_DeInit+0x19c>)
 8003efe:	685a      	ldr	r2, [r3, #4]
 8003f00:	693b      	ldr	r3, [r7, #16]
 8003f02:	43d9      	mvns	r1, r3
 8003f04:	4b36      	ldr	r3, [pc, #216]	; (8003fe0 <HAL_GPIO_DeInit+0x19c>)
 8003f06:	400a      	ands	r2, r1
 8003f08:	605a      	str	r2, [r3, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 8003f0a:	4b35      	ldr	r3, [pc, #212]	; (8003fe0 <HAL_GPIO_DeInit+0x19c>)
 8003f0c:	681a      	ldr	r2, [r3, #0]
 8003f0e:	693b      	ldr	r3, [r7, #16]
 8003f10:	43d9      	mvns	r1, r3
 8003f12:	4b33      	ldr	r3, [pc, #204]	; (8003fe0 <HAL_GPIO_DeInit+0x19c>)
 8003f14:	400a      	ands	r2, r1
 8003f16:	601a      	str	r2, [r3, #0]

        tmp = 0x0FuL << (8u * (position & 0x03u));
 8003f18:	697b      	ldr	r3, [r7, #20]
 8003f1a:	2203      	movs	r2, #3
 8003f1c:	4013      	ands	r3, r2
 8003f1e:	00db      	lsls	r3, r3, #3
 8003f20:	220f      	movs	r2, #15
 8003f22:	409a      	lsls	r2, r3
 8003f24:	0013      	movs	r3, r2
 8003f26:	60fb      	str	r3, [r7, #12]
        EXTI->EXTICR[position >> 2u] &= ~tmp;
 8003f28:	4a2d      	ldr	r2, [pc, #180]	; (8003fe0 <HAL_GPIO_DeInit+0x19c>)
 8003f2a:	697b      	ldr	r3, [r7, #20]
 8003f2c:	089b      	lsrs	r3, r3, #2
 8003f2e:	3318      	adds	r3, #24
 8003f30:	009b      	lsls	r3, r3, #2
 8003f32:	589a      	ldr	r2, [r3, r2]
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	43d9      	mvns	r1, r3
 8003f38:	4829      	ldr	r0, [pc, #164]	; (8003fe0 <HAL_GPIO_DeInit+0x19c>)
 8003f3a:	697b      	ldr	r3, [r7, #20]
 8003f3c:	089b      	lsrs	r3, r3, #2
 8003f3e:	400a      	ands	r2, r1
 8003f40:	3318      	adds	r3, #24
 8003f42:	009b      	lsls	r3, r3, #2
 8003f44:	501a      	str	r2, [r3, r0]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681a      	ldr	r2, [r3, #0]
 8003f4a:	697b      	ldr	r3, [r7, #20]
 8003f4c:	005b      	lsls	r3, r3, #1
 8003f4e:	2103      	movs	r1, #3
 8003f50:	4099      	lsls	r1, r3
 8003f52:	000b      	movs	r3, r1
 8003f54:	431a      	orrs	r2, r3
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8003f5a:	697b      	ldr	r3, [r7, #20]
 8003f5c:	08da      	lsrs	r2, r3, #3
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	3208      	adds	r2, #8
 8003f62:	0092      	lsls	r2, r2, #2
 8003f64:	58d3      	ldr	r3, [r2, r3]
 8003f66:	697a      	ldr	r2, [r7, #20]
 8003f68:	2107      	movs	r1, #7
 8003f6a:	400a      	ands	r2, r1
 8003f6c:	0092      	lsls	r2, r2, #2
 8003f6e:	210f      	movs	r1, #15
 8003f70:	4091      	lsls	r1, r2
 8003f72:	000a      	movs	r2, r1
 8003f74:	43d1      	mvns	r1, r2
 8003f76:	697a      	ldr	r2, [r7, #20]
 8003f78:	08d2      	lsrs	r2, r2, #3
 8003f7a:	4019      	ands	r1, r3
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	3208      	adds	r2, #8
 8003f80:	0092      	lsls	r2, r2, #2
 8003f82:	50d1      	str	r1, [r2, r3]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	689b      	ldr	r3, [r3, #8]
 8003f88:	697a      	ldr	r2, [r7, #20]
 8003f8a:	0052      	lsls	r2, r2, #1
 8003f8c:	2103      	movs	r1, #3
 8003f8e:	4091      	lsls	r1, r2
 8003f90:	000a      	movs	r2, r1
 8003f92:	43d2      	mvns	r2, r2
 8003f94:	401a      	ands	r2, r3
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	685b      	ldr	r3, [r3, #4]
 8003f9e:	2101      	movs	r1, #1
 8003fa0:	697a      	ldr	r2, [r7, #20]
 8003fa2:	4091      	lsls	r1, r2
 8003fa4:	000a      	movs	r2, r1
 8003fa6:	43d2      	mvns	r2, r2
 8003fa8:	401a      	ands	r2, r3
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	68db      	ldr	r3, [r3, #12]
 8003fb2:	697a      	ldr	r2, [r7, #20]
 8003fb4:	0052      	lsls	r2, r2, #1
 8003fb6:	2103      	movs	r1, #3
 8003fb8:	4091      	lsls	r1, r2
 8003fba:	000a      	movs	r2, r1
 8003fbc:	43d2      	mvns	r2, r2
 8003fbe:	401a      	ands	r2, r3
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	60da      	str	r2, [r3, #12]
    }

    position++;
 8003fc4:	697b      	ldr	r3, [r7, #20]
 8003fc6:	3301      	adds	r3, #1
 8003fc8:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8003fca:	683a      	ldr	r2, [r7, #0]
 8003fcc:	697b      	ldr	r3, [r7, #20]
 8003fce:	40da      	lsrs	r2, r3
 8003fd0:	1e13      	subs	r3, r2, #0
 8003fd2:	d000      	beq.n	8003fd6 <HAL_GPIO_DeInit+0x192>
 8003fd4:	e73e      	b.n	8003e54 <HAL_GPIO_DeInit+0x10>
  }
}
 8003fd6:	46c0      	nop			; (mov r8, r8)
 8003fd8:	46c0      	nop			; (mov r8, r8)
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	b006      	add	sp, #24
 8003fde:	bd80      	pop	{r7, pc}
 8003fe0:	40021800 	.word	0x40021800
 8003fe4:	50000400 	.word	0x50000400
 8003fe8:	50000800 	.word	0x50000800
 8003fec:	50000c00 	.word	0x50000c00
 8003ff0:	50001000 	.word	0x50001000

08003ff4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	b084      	sub	sp, #16
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]
 8003ffc:	000a      	movs	r2, r1
 8003ffe:	1cbb      	adds	r3, r7, #2
 8004000:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	691b      	ldr	r3, [r3, #16]
 8004006:	1cba      	adds	r2, r7, #2
 8004008:	8812      	ldrh	r2, [r2, #0]
 800400a:	4013      	ands	r3, r2
 800400c:	d004      	beq.n	8004018 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 800400e:	230f      	movs	r3, #15
 8004010:	18fb      	adds	r3, r7, r3
 8004012:	2201      	movs	r2, #1
 8004014:	701a      	strb	r2, [r3, #0]
 8004016:	e003      	b.n	8004020 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004018:	230f      	movs	r3, #15
 800401a:	18fb      	adds	r3, r7, r3
 800401c:	2200      	movs	r2, #0
 800401e:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8004020:	230f      	movs	r3, #15
 8004022:	18fb      	adds	r3, r7, r3
 8004024:	781b      	ldrb	r3, [r3, #0]
}
 8004026:	0018      	movs	r0, r3
 8004028:	46bd      	mov	sp, r7
 800402a:	b004      	add	sp, #16
 800402c:	bd80      	pop	{r7, pc}

0800402e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800402e:	b580      	push	{r7, lr}
 8004030:	b082      	sub	sp, #8
 8004032:	af00      	add	r7, sp, #0
 8004034:	6078      	str	r0, [r7, #4]
 8004036:	0008      	movs	r0, r1
 8004038:	0011      	movs	r1, r2
 800403a:	1cbb      	adds	r3, r7, #2
 800403c:	1c02      	adds	r2, r0, #0
 800403e:	801a      	strh	r2, [r3, #0]
 8004040:	1c7b      	adds	r3, r7, #1
 8004042:	1c0a      	adds	r2, r1, #0
 8004044:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004046:	1c7b      	adds	r3, r7, #1
 8004048:	781b      	ldrb	r3, [r3, #0]
 800404a:	2b00      	cmp	r3, #0
 800404c:	d004      	beq.n	8004058 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800404e:	1cbb      	adds	r3, r7, #2
 8004050:	881a      	ldrh	r2, [r3, #0]
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004056:	e003      	b.n	8004060 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004058:	1cbb      	adds	r3, r7, #2
 800405a:	881a      	ldrh	r2, [r3, #0]
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004060:	46c0      	nop			; (mov r8, r8)
 8004062:	46bd      	mov	sp, r7
 8004064:	b002      	add	sp, #8
 8004066:	bd80      	pop	{r7, pc}

08004068 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004068:	b580      	push	{r7, lr}
 800406a:	b082      	sub	sp, #8
 800406c:	af00      	add	r7, sp, #0
 800406e:	0002      	movs	r2, r0
 8004070:	1dbb      	adds	r3, r7, #6
 8004072:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 8004074:	4b10      	ldr	r3, [pc, #64]	; (80040b8 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8004076:	68db      	ldr	r3, [r3, #12]
 8004078:	1dba      	adds	r2, r7, #6
 800407a:	8812      	ldrh	r2, [r2, #0]
 800407c:	4013      	ands	r3, r2
 800407e:	d008      	beq.n	8004092 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8004080:	4b0d      	ldr	r3, [pc, #52]	; (80040b8 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8004082:	1dba      	adds	r2, r7, #6
 8004084:	8812      	ldrh	r2, [r2, #0]
 8004086:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8004088:	1dbb      	adds	r3, r7, #6
 800408a:	881b      	ldrh	r3, [r3, #0]
 800408c:	0018      	movs	r0, r3
 800408e:	f000 f815 	bl	80040bc <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 8004092:	4b09      	ldr	r3, [pc, #36]	; (80040b8 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8004094:	691b      	ldr	r3, [r3, #16]
 8004096:	1dba      	adds	r2, r7, #6
 8004098:	8812      	ldrh	r2, [r2, #0]
 800409a:	4013      	ands	r3, r2
 800409c:	d008      	beq.n	80040b0 <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 800409e:	4b06      	ldr	r3, [pc, #24]	; (80040b8 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80040a0:	1dba      	adds	r2, r7, #6
 80040a2:	8812      	ldrh	r2, [r2, #0]
 80040a4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 80040a6:	1dbb      	adds	r3, r7, #6
 80040a8:	881b      	ldrh	r3, [r3, #0]
 80040aa:	0018      	movs	r0, r3
 80040ac:	f000 f810 	bl	80040d0 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 80040b0:	46c0      	nop			; (mov r8, r8)
 80040b2:	46bd      	mov	sp, r7
 80040b4:	b002      	add	sp, #8
 80040b6:	bd80      	pop	{r7, pc}
 80040b8:	40021800 	.word	0x40021800

080040bc <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 80040bc:	b580      	push	{r7, lr}
 80040be:	b082      	sub	sp, #8
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	0002      	movs	r2, r0
 80040c4:	1dbb      	adds	r3, r7, #6
 80040c6:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 80040c8:	46c0      	nop			; (mov r8, r8)
 80040ca:	46bd      	mov	sp, r7
 80040cc:	b002      	add	sp, #8
 80040ce:	bd80      	pop	{r7, pc}

080040d0 <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 80040d0:	b580      	push	{r7, lr}
 80040d2:	b082      	sub	sp, #8
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	0002      	movs	r2, r0
 80040d8:	1dbb      	adds	r3, r7, #6
 80040da:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 80040dc:	46c0      	nop			; (mov r8, r8)
 80040de:	46bd      	mov	sp, r7
 80040e0:	b002      	add	sp, #8
 80040e2:	bd80      	pop	{r7, pc}

080040e4 <HAL_PWR_EnableBkUpAccess>:
  *         possible unwanted write accesses. All RTC & TAMP registers (backup
  *         registers included) and RCC BDCR register are concerned.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80040e4:	b580      	push	{r7, lr}
 80040e6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80040e8:	4b04      	ldr	r3, [pc, #16]	; (80040fc <HAL_PWR_EnableBkUpAccess+0x18>)
 80040ea:	681a      	ldr	r2, [r3, #0]
 80040ec:	4b03      	ldr	r3, [pc, #12]	; (80040fc <HAL_PWR_EnableBkUpAccess+0x18>)
 80040ee:	2180      	movs	r1, #128	; 0x80
 80040f0:	0049      	lsls	r1, r1, #1
 80040f2:	430a      	orrs	r2, r1
 80040f4:	601a      	str	r2, [r3, #0]
}
 80040f6:	46c0      	nop			; (mov r8, r8)
 80040f8:	46bd      	mov	sp, r7
 80040fa:	bd80      	pop	{r7, pc}
 80040fc:	40007000 	.word	0x40007000

08004100 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004100:	b580      	push	{r7, lr}
 8004102:	b084      	sub	sp, #16
 8004104:	af00      	add	r7, sp, #0
 8004106:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8004108:	4b19      	ldr	r3, [pc, #100]	; (8004170 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	4a19      	ldr	r2, [pc, #100]	; (8004174 <HAL_PWREx_ControlVoltageScaling+0x74>)
 800410e:	4013      	ands	r3, r2
 8004110:	0019      	movs	r1, r3
 8004112:	4b17      	ldr	r3, [pc, #92]	; (8004170 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8004114:	687a      	ldr	r2, [r7, #4]
 8004116:	430a      	orrs	r2, r1
 8004118:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800411a:	687a      	ldr	r2, [r7, #4]
 800411c:	2380      	movs	r3, #128	; 0x80
 800411e:	009b      	lsls	r3, r3, #2
 8004120:	429a      	cmp	r2, r3
 8004122:	d11f      	bne.n	8004164 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8004124:	4b14      	ldr	r3, [pc, #80]	; (8004178 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8004126:	681a      	ldr	r2, [r3, #0]
 8004128:	0013      	movs	r3, r2
 800412a:	005b      	lsls	r3, r3, #1
 800412c:	189b      	adds	r3, r3, r2
 800412e:	005b      	lsls	r3, r3, #1
 8004130:	4912      	ldr	r1, [pc, #72]	; (800417c <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8004132:	0018      	movs	r0, r3
 8004134:	f7fc f802 	bl	800013c <__udivsi3>
 8004138:	0003      	movs	r3, r0
 800413a:	3301      	adds	r3, #1
 800413c:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800413e:	e008      	b.n	8004152 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	2b00      	cmp	r3, #0
 8004144:	d003      	beq.n	800414e <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	3b01      	subs	r3, #1
 800414a:	60fb      	str	r3, [r7, #12]
 800414c:	e001      	b.n	8004152 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 800414e:	2303      	movs	r3, #3
 8004150:	e009      	b.n	8004166 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004152:	4b07      	ldr	r3, [pc, #28]	; (8004170 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8004154:	695a      	ldr	r2, [r3, #20]
 8004156:	2380      	movs	r3, #128	; 0x80
 8004158:	00db      	lsls	r3, r3, #3
 800415a:	401a      	ands	r2, r3
 800415c:	2380      	movs	r3, #128	; 0x80
 800415e:	00db      	lsls	r3, r3, #3
 8004160:	429a      	cmp	r2, r3
 8004162:	d0ed      	beq.n	8004140 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8004164:	2300      	movs	r3, #0
}
 8004166:	0018      	movs	r0, r3
 8004168:	46bd      	mov	sp, r7
 800416a:	b004      	add	sp, #16
 800416c:	bd80      	pop	{r7, pc}
 800416e:	46c0      	nop			; (mov r8, r8)
 8004170:	40007000 	.word	0x40007000
 8004174:	fffff9ff 	.word	0xfffff9ff
 8004178:	20000004 	.word	0x20000004
 800417c:	000f4240 	.word	0x000f4240

08004180 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8004180:	b580      	push	{r7, lr}
 8004182:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8004184:	4b03      	ldr	r3, [pc, #12]	; (8004194 <LL_RCC_GetAPB1Prescaler+0x14>)
 8004186:	689a      	ldr	r2, [r3, #8]
 8004188:	23e0      	movs	r3, #224	; 0xe0
 800418a:	01db      	lsls	r3, r3, #7
 800418c:	4013      	ands	r3, r2
}
 800418e:	0018      	movs	r0, r3
 8004190:	46bd      	mov	sp, r7
 8004192:	bd80      	pop	{r7, pc}
 8004194:	40021000 	.word	0x40021000

08004198 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004198:	b580      	push	{r7, lr}
 800419a:	b088      	sub	sp, #32
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d102      	bne.n	80041ac <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80041a6:	2301      	movs	r3, #1
 80041a8:	f000 fb50 	bl	800484c <HAL_RCC_OscConfig+0x6b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	2201      	movs	r2, #1
 80041b2:	4013      	ands	r3, r2
 80041b4:	d100      	bne.n	80041b8 <HAL_RCC_OscConfig+0x20>
 80041b6:	e07c      	b.n	80042b2 <HAL_RCC_OscConfig+0x11a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80041b8:	4bc3      	ldr	r3, [pc, #780]	; (80044c8 <HAL_RCC_OscConfig+0x330>)
 80041ba:	689b      	ldr	r3, [r3, #8]
 80041bc:	2238      	movs	r2, #56	; 0x38
 80041be:	4013      	ands	r3, r2
 80041c0:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80041c2:	4bc1      	ldr	r3, [pc, #772]	; (80044c8 <HAL_RCC_OscConfig+0x330>)
 80041c4:	68db      	ldr	r3, [r3, #12]
 80041c6:	2203      	movs	r2, #3
 80041c8:	4013      	ands	r3, r2
 80041ca:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80041cc:	69bb      	ldr	r3, [r7, #24]
 80041ce:	2b10      	cmp	r3, #16
 80041d0:	d102      	bne.n	80041d8 <HAL_RCC_OscConfig+0x40>
 80041d2:	697b      	ldr	r3, [r7, #20]
 80041d4:	2b03      	cmp	r3, #3
 80041d6:	d002      	beq.n	80041de <HAL_RCC_OscConfig+0x46>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 80041d8:	69bb      	ldr	r3, [r7, #24]
 80041da:	2b08      	cmp	r3, #8
 80041dc:	d10b      	bne.n	80041f6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041de:	4bba      	ldr	r3, [pc, #744]	; (80044c8 <HAL_RCC_OscConfig+0x330>)
 80041e0:	681a      	ldr	r2, [r3, #0]
 80041e2:	2380      	movs	r3, #128	; 0x80
 80041e4:	029b      	lsls	r3, r3, #10
 80041e6:	4013      	ands	r3, r2
 80041e8:	d062      	beq.n	80042b0 <HAL_RCC_OscConfig+0x118>
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	685b      	ldr	r3, [r3, #4]
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d15e      	bne.n	80042b0 <HAL_RCC_OscConfig+0x118>
      {
        return HAL_ERROR;
 80041f2:	2301      	movs	r3, #1
 80041f4:	e32a      	b.n	800484c <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	685a      	ldr	r2, [r3, #4]
 80041fa:	2380      	movs	r3, #128	; 0x80
 80041fc:	025b      	lsls	r3, r3, #9
 80041fe:	429a      	cmp	r2, r3
 8004200:	d107      	bne.n	8004212 <HAL_RCC_OscConfig+0x7a>
 8004202:	4bb1      	ldr	r3, [pc, #708]	; (80044c8 <HAL_RCC_OscConfig+0x330>)
 8004204:	681a      	ldr	r2, [r3, #0]
 8004206:	4bb0      	ldr	r3, [pc, #704]	; (80044c8 <HAL_RCC_OscConfig+0x330>)
 8004208:	2180      	movs	r1, #128	; 0x80
 800420a:	0249      	lsls	r1, r1, #9
 800420c:	430a      	orrs	r2, r1
 800420e:	601a      	str	r2, [r3, #0]
 8004210:	e020      	b.n	8004254 <HAL_RCC_OscConfig+0xbc>
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	685a      	ldr	r2, [r3, #4]
 8004216:	23a0      	movs	r3, #160	; 0xa0
 8004218:	02db      	lsls	r3, r3, #11
 800421a:	429a      	cmp	r2, r3
 800421c:	d10e      	bne.n	800423c <HAL_RCC_OscConfig+0xa4>
 800421e:	4baa      	ldr	r3, [pc, #680]	; (80044c8 <HAL_RCC_OscConfig+0x330>)
 8004220:	681a      	ldr	r2, [r3, #0]
 8004222:	4ba9      	ldr	r3, [pc, #676]	; (80044c8 <HAL_RCC_OscConfig+0x330>)
 8004224:	2180      	movs	r1, #128	; 0x80
 8004226:	02c9      	lsls	r1, r1, #11
 8004228:	430a      	orrs	r2, r1
 800422a:	601a      	str	r2, [r3, #0]
 800422c:	4ba6      	ldr	r3, [pc, #664]	; (80044c8 <HAL_RCC_OscConfig+0x330>)
 800422e:	681a      	ldr	r2, [r3, #0]
 8004230:	4ba5      	ldr	r3, [pc, #660]	; (80044c8 <HAL_RCC_OscConfig+0x330>)
 8004232:	2180      	movs	r1, #128	; 0x80
 8004234:	0249      	lsls	r1, r1, #9
 8004236:	430a      	orrs	r2, r1
 8004238:	601a      	str	r2, [r3, #0]
 800423a:	e00b      	b.n	8004254 <HAL_RCC_OscConfig+0xbc>
 800423c:	4ba2      	ldr	r3, [pc, #648]	; (80044c8 <HAL_RCC_OscConfig+0x330>)
 800423e:	681a      	ldr	r2, [r3, #0]
 8004240:	4ba1      	ldr	r3, [pc, #644]	; (80044c8 <HAL_RCC_OscConfig+0x330>)
 8004242:	49a2      	ldr	r1, [pc, #648]	; (80044cc <HAL_RCC_OscConfig+0x334>)
 8004244:	400a      	ands	r2, r1
 8004246:	601a      	str	r2, [r3, #0]
 8004248:	4b9f      	ldr	r3, [pc, #636]	; (80044c8 <HAL_RCC_OscConfig+0x330>)
 800424a:	681a      	ldr	r2, [r3, #0]
 800424c:	4b9e      	ldr	r3, [pc, #632]	; (80044c8 <HAL_RCC_OscConfig+0x330>)
 800424e:	49a0      	ldr	r1, [pc, #640]	; (80044d0 <HAL_RCC_OscConfig+0x338>)
 8004250:	400a      	ands	r2, r1
 8004252:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	685b      	ldr	r3, [r3, #4]
 8004258:	2b00      	cmp	r3, #0
 800425a:	d014      	beq.n	8004286 <HAL_RCC_OscConfig+0xee>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800425c:	f7ff fb64 	bl	8003928 <HAL_GetTick>
 8004260:	0003      	movs	r3, r0
 8004262:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004264:	e008      	b.n	8004278 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004266:	f7ff fb5f 	bl	8003928 <HAL_GetTick>
 800426a:	0002      	movs	r2, r0
 800426c:	693b      	ldr	r3, [r7, #16]
 800426e:	1ad3      	subs	r3, r2, r3
 8004270:	2b64      	cmp	r3, #100	; 0x64
 8004272:	d901      	bls.n	8004278 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 8004274:	2303      	movs	r3, #3
 8004276:	e2e9      	b.n	800484c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004278:	4b93      	ldr	r3, [pc, #588]	; (80044c8 <HAL_RCC_OscConfig+0x330>)
 800427a:	681a      	ldr	r2, [r3, #0]
 800427c:	2380      	movs	r3, #128	; 0x80
 800427e:	029b      	lsls	r3, r3, #10
 8004280:	4013      	ands	r3, r2
 8004282:	d0f0      	beq.n	8004266 <HAL_RCC_OscConfig+0xce>
 8004284:	e015      	b.n	80042b2 <HAL_RCC_OscConfig+0x11a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004286:	f7ff fb4f 	bl	8003928 <HAL_GetTick>
 800428a:	0003      	movs	r3, r0
 800428c:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800428e:	e008      	b.n	80042a2 <HAL_RCC_OscConfig+0x10a>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004290:	f7ff fb4a 	bl	8003928 <HAL_GetTick>
 8004294:	0002      	movs	r2, r0
 8004296:	693b      	ldr	r3, [r7, #16]
 8004298:	1ad3      	subs	r3, r2, r3
 800429a:	2b64      	cmp	r3, #100	; 0x64
 800429c:	d901      	bls.n	80042a2 <HAL_RCC_OscConfig+0x10a>
          {
            return HAL_TIMEOUT;
 800429e:	2303      	movs	r3, #3
 80042a0:	e2d4      	b.n	800484c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80042a2:	4b89      	ldr	r3, [pc, #548]	; (80044c8 <HAL_RCC_OscConfig+0x330>)
 80042a4:	681a      	ldr	r2, [r3, #0]
 80042a6:	2380      	movs	r3, #128	; 0x80
 80042a8:	029b      	lsls	r3, r3, #10
 80042aa:	4013      	ands	r3, r2
 80042ac:	d1f0      	bne.n	8004290 <HAL_RCC_OscConfig+0xf8>
 80042ae:	e000      	b.n	80042b2 <HAL_RCC_OscConfig+0x11a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042b0:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	2202      	movs	r2, #2
 80042b8:	4013      	ands	r3, r2
 80042ba:	d100      	bne.n	80042be <HAL_RCC_OscConfig+0x126>
 80042bc:	e099      	b.n	80043f2 <HAL_RCC_OscConfig+0x25a>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80042be:	4b82      	ldr	r3, [pc, #520]	; (80044c8 <HAL_RCC_OscConfig+0x330>)
 80042c0:	689b      	ldr	r3, [r3, #8]
 80042c2:	2238      	movs	r2, #56	; 0x38
 80042c4:	4013      	ands	r3, r2
 80042c6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80042c8:	4b7f      	ldr	r3, [pc, #508]	; (80044c8 <HAL_RCC_OscConfig+0x330>)
 80042ca:	68db      	ldr	r3, [r3, #12]
 80042cc:	2203      	movs	r2, #3
 80042ce:	4013      	ands	r3, r2
 80042d0:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 80042d2:	69bb      	ldr	r3, [r7, #24]
 80042d4:	2b10      	cmp	r3, #16
 80042d6:	d102      	bne.n	80042de <HAL_RCC_OscConfig+0x146>
 80042d8:	697b      	ldr	r3, [r7, #20]
 80042da:	2b02      	cmp	r3, #2
 80042dc:	d002      	beq.n	80042e4 <HAL_RCC_OscConfig+0x14c>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 80042de:	69bb      	ldr	r3, [r7, #24]
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d135      	bne.n	8004350 <HAL_RCC_OscConfig+0x1b8>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80042e4:	4b78      	ldr	r3, [pc, #480]	; (80044c8 <HAL_RCC_OscConfig+0x330>)
 80042e6:	681a      	ldr	r2, [r3, #0]
 80042e8:	2380      	movs	r3, #128	; 0x80
 80042ea:	00db      	lsls	r3, r3, #3
 80042ec:	4013      	ands	r3, r2
 80042ee:	d005      	beq.n	80042fc <HAL_RCC_OscConfig+0x164>
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	68db      	ldr	r3, [r3, #12]
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d101      	bne.n	80042fc <HAL_RCC_OscConfig+0x164>
      {
        return HAL_ERROR;
 80042f8:	2301      	movs	r3, #1
 80042fa:	e2a7      	b.n	800484c <HAL_RCC_OscConfig+0x6b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042fc:	4b72      	ldr	r3, [pc, #456]	; (80044c8 <HAL_RCC_OscConfig+0x330>)
 80042fe:	685b      	ldr	r3, [r3, #4]
 8004300:	4a74      	ldr	r2, [pc, #464]	; (80044d4 <HAL_RCC_OscConfig+0x33c>)
 8004302:	4013      	ands	r3, r2
 8004304:	0019      	movs	r1, r3
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	695b      	ldr	r3, [r3, #20]
 800430a:	021a      	lsls	r2, r3, #8
 800430c:	4b6e      	ldr	r3, [pc, #440]	; (80044c8 <HAL_RCC_OscConfig+0x330>)
 800430e:	430a      	orrs	r2, r1
 8004310:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004312:	69bb      	ldr	r3, [r7, #24]
 8004314:	2b00      	cmp	r3, #0
 8004316:	d112      	bne.n	800433e <HAL_RCC_OscConfig+0x1a6>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8004318:	4b6b      	ldr	r3, [pc, #428]	; (80044c8 <HAL_RCC_OscConfig+0x330>)
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	4a6e      	ldr	r2, [pc, #440]	; (80044d8 <HAL_RCC_OscConfig+0x340>)
 800431e:	4013      	ands	r3, r2
 8004320:	0019      	movs	r1, r3
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	691a      	ldr	r2, [r3, #16]
 8004326:	4b68      	ldr	r3, [pc, #416]	; (80044c8 <HAL_RCC_OscConfig+0x330>)
 8004328:	430a      	orrs	r2, r1
 800432a:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800432c:	4b66      	ldr	r3, [pc, #408]	; (80044c8 <HAL_RCC_OscConfig+0x330>)
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	0adb      	lsrs	r3, r3, #11
 8004332:	2207      	movs	r2, #7
 8004334:	4013      	ands	r3, r2
 8004336:	4a69      	ldr	r2, [pc, #420]	; (80044dc <HAL_RCC_OscConfig+0x344>)
 8004338:	40da      	lsrs	r2, r3
 800433a:	4b69      	ldr	r3, [pc, #420]	; (80044e0 <HAL_RCC_OscConfig+0x348>)
 800433c:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800433e:	4b69      	ldr	r3, [pc, #420]	; (80044e4 <HAL_RCC_OscConfig+0x34c>)
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	0018      	movs	r0, r3
 8004344:	f7ff fa94 	bl	8003870 <HAL_InitTick>
 8004348:	1e03      	subs	r3, r0, #0
 800434a:	d051      	beq.n	80043f0 <HAL_RCC_OscConfig+0x258>
        {
          return HAL_ERROR;
 800434c:	2301      	movs	r3, #1
 800434e:	e27d      	b.n	800484c <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	68db      	ldr	r3, [r3, #12]
 8004354:	2b00      	cmp	r3, #0
 8004356:	d030      	beq.n	80043ba <HAL_RCC_OscConfig+0x222>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8004358:	4b5b      	ldr	r3, [pc, #364]	; (80044c8 <HAL_RCC_OscConfig+0x330>)
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	4a5e      	ldr	r2, [pc, #376]	; (80044d8 <HAL_RCC_OscConfig+0x340>)
 800435e:	4013      	ands	r3, r2
 8004360:	0019      	movs	r1, r3
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	691a      	ldr	r2, [r3, #16]
 8004366:	4b58      	ldr	r3, [pc, #352]	; (80044c8 <HAL_RCC_OscConfig+0x330>)
 8004368:	430a      	orrs	r2, r1
 800436a:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 800436c:	4b56      	ldr	r3, [pc, #344]	; (80044c8 <HAL_RCC_OscConfig+0x330>)
 800436e:	681a      	ldr	r2, [r3, #0]
 8004370:	4b55      	ldr	r3, [pc, #340]	; (80044c8 <HAL_RCC_OscConfig+0x330>)
 8004372:	2180      	movs	r1, #128	; 0x80
 8004374:	0049      	lsls	r1, r1, #1
 8004376:	430a      	orrs	r2, r1
 8004378:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800437a:	f7ff fad5 	bl	8003928 <HAL_GetTick>
 800437e:	0003      	movs	r3, r0
 8004380:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004382:	e008      	b.n	8004396 <HAL_RCC_OscConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004384:	f7ff fad0 	bl	8003928 <HAL_GetTick>
 8004388:	0002      	movs	r2, r0
 800438a:	693b      	ldr	r3, [r7, #16]
 800438c:	1ad3      	subs	r3, r2, r3
 800438e:	2b02      	cmp	r3, #2
 8004390:	d901      	bls.n	8004396 <HAL_RCC_OscConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 8004392:	2303      	movs	r3, #3
 8004394:	e25a      	b.n	800484c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004396:	4b4c      	ldr	r3, [pc, #304]	; (80044c8 <HAL_RCC_OscConfig+0x330>)
 8004398:	681a      	ldr	r2, [r3, #0]
 800439a:	2380      	movs	r3, #128	; 0x80
 800439c:	00db      	lsls	r3, r3, #3
 800439e:	4013      	ands	r3, r2
 80043a0:	d0f0      	beq.n	8004384 <HAL_RCC_OscConfig+0x1ec>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043a2:	4b49      	ldr	r3, [pc, #292]	; (80044c8 <HAL_RCC_OscConfig+0x330>)
 80043a4:	685b      	ldr	r3, [r3, #4]
 80043a6:	4a4b      	ldr	r2, [pc, #300]	; (80044d4 <HAL_RCC_OscConfig+0x33c>)
 80043a8:	4013      	ands	r3, r2
 80043aa:	0019      	movs	r1, r3
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	695b      	ldr	r3, [r3, #20]
 80043b0:	021a      	lsls	r2, r3, #8
 80043b2:	4b45      	ldr	r3, [pc, #276]	; (80044c8 <HAL_RCC_OscConfig+0x330>)
 80043b4:	430a      	orrs	r2, r1
 80043b6:	605a      	str	r2, [r3, #4]
 80043b8:	e01b      	b.n	80043f2 <HAL_RCC_OscConfig+0x25a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 80043ba:	4b43      	ldr	r3, [pc, #268]	; (80044c8 <HAL_RCC_OscConfig+0x330>)
 80043bc:	681a      	ldr	r2, [r3, #0]
 80043be:	4b42      	ldr	r3, [pc, #264]	; (80044c8 <HAL_RCC_OscConfig+0x330>)
 80043c0:	4949      	ldr	r1, [pc, #292]	; (80044e8 <HAL_RCC_OscConfig+0x350>)
 80043c2:	400a      	ands	r2, r1
 80043c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043c6:	f7ff faaf 	bl	8003928 <HAL_GetTick>
 80043ca:	0003      	movs	r3, r0
 80043cc:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80043ce:	e008      	b.n	80043e2 <HAL_RCC_OscConfig+0x24a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80043d0:	f7ff faaa 	bl	8003928 <HAL_GetTick>
 80043d4:	0002      	movs	r2, r0
 80043d6:	693b      	ldr	r3, [r7, #16]
 80043d8:	1ad3      	subs	r3, r2, r3
 80043da:	2b02      	cmp	r3, #2
 80043dc:	d901      	bls.n	80043e2 <HAL_RCC_OscConfig+0x24a>
          {
            return HAL_TIMEOUT;
 80043de:	2303      	movs	r3, #3
 80043e0:	e234      	b.n	800484c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80043e2:	4b39      	ldr	r3, [pc, #228]	; (80044c8 <HAL_RCC_OscConfig+0x330>)
 80043e4:	681a      	ldr	r2, [r3, #0]
 80043e6:	2380      	movs	r3, #128	; 0x80
 80043e8:	00db      	lsls	r3, r3, #3
 80043ea:	4013      	ands	r3, r2
 80043ec:	d1f0      	bne.n	80043d0 <HAL_RCC_OscConfig+0x238>
 80043ee:	e000      	b.n	80043f2 <HAL_RCC_OscConfig+0x25a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80043f0:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	2208      	movs	r2, #8
 80043f8:	4013      	ands	r3, r2
 80043fa:	d047      	beq.n	800448c <HAL_RCC_OscConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80043fc:	4b32      	ldr	r3, [pc, #200]	; (80044c8 <HAL_RCC_OscConfig+0x330>)
 80043fe:	689b      	ldr	r3, [r3, #8]
 8004400:	2238      	movs	r2, #56	; 0x38
 8004402:	4013      	ands	r3, r2
 8004404:	2b18      	cmp	r3, #24
 8004406:	d10a      	bne.n	800441e <HAL_RCC_OscConfig+0x286>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8004408:	4b2f      	ldr	r3, [pc, #188]	; (80044c8 <HAL_RCC_OscConfig+0x330>)
 800440a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800440c:	2202      	movs	r2, #2
 800440e:	4013      	ands	r3, r2
 8004410:	d03c      	beq.n	800448c <HAL_RCC_OscConfig+0x2f4>
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	699b      	ldr	r3, [r3, #24]
 8004416:	2b00      	cmp	r3, #0
 8004418:	d138      	bne.n	800448c <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 800441a:	2301      	movs	r3, #1
 800441c:	e216      	b.n	800484c <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	699b      	ldr	r3, [r3, #24]
 8004422:	2b00      	cmp	r3, #0
 8004424:	d019      	beq.n	800445a <HAL_RCC_OscConfig+0x2c2>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8004426:	4b28      	ldr	r3, [pc, #160]	; (80044c8 <HAL_RCC_OscConfig+0x330>)
 8004428:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800442a:	4b27      	ldr	r3, [pc, #156]	; (80044c8 <HAL_RCC_OscConfig+0x330>)
 800442c:	2101      	movs	r1, #1
 800442e:	430a      	orrs	r2, r1
 8004430:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004432:	f7ff fa79 	bl	8003928 <HAL_GetTick>
 8004436:	0003      	movs	r3, r0
 8004438:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800443a:	e008      	b.n	800444e <HAL_RCC_OscConfig+0x2b6>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800443c:	f7ff fa74 	bl	8003928 <HAL_GetTick>
 8004440:	0002      	movs	r2, r0
 8004442:	693b      	ldr	r3, [r7, #16]
 8004444:	1ad3      	subs	r3, r2, r3
 8004446:	2b02      	cmp	r3, #2
 8004448:	d901      	bls.n	800444e <HAL_RCC_OscConfig+0x2b6>
          {
            return HAL_TIMEOUT;
 800444a:	2303      	movs	r3, #3
 800444c:	e1fe      	b.n	800484c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800444e:	4b1e      	ldr	r3, [pc, #120]	; (80044c8 <HAL_RCC_OscConfig+0x330>)
 8004450:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004452:	2202      	movs	r2, #2
 8004454:	4013      	ands	r3, r2
 8004456:	d0f1      	beq.n	800443c <HAL_RCC_OscConfig+0x2a4>
 8004458:	e018      	b.n	800448c <HAL_RCC_OscConfig+0x2f4>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 800445a:	4b1b      	ldr	r3, [pc, #108]	; (80044c8 <HAL_RCC_OscConfig+0x330>)
 800445c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800445e:	4b1a      	ldr	r3, [pc, #104]	; (80044c8 <HAL_RCC_OscConfig+0x330>)
 8004460:	2101      	movs	r1, #1
 8004462:	438a      	bics	r2, r1
 8004464:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004466:	f7ff fa5f 	bl	8003928 <HAL_GetTick>
 800446a:	0003      	movs	r3, r0
 800446c:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800446e:	e008      	b.n	8004482 <HAL_RCC_OscConfig+0x2ea>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004470:	f7ff fa5a 	bl	8003928 <HAL_GetTick>
 8004474:	0002      	movs	r2, r0
 8004476:	693b      	ldr	r3, [r7, #16]
 8004478:	1ad3      	subs	r3, r2, r3
 800447a:	2b02      	cmp	r3, #2
 800447c:	d901      	bls.n	8004482 <HAL_RCC_OscConfig+0x2ea>
          {
            return HAL_TIMEOUT;
 800447e:	2303      	movs	r3, #3
 8004480:	e1e4      	b.n	800484c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004482:	4b11      	ldr	r3, [pc, #68]	; (80044c8 <HAL_RCC_OscConfig+0x330>)
 8004484:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004486:	2202      	movs	r2, #2
 8004488:	4013      	ands	r3, r2
 800448a:	d1f1      	bne.n	8004470 <HAL_RCC_OscConfig+0x2d8>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	2204      	movs	r2, #4
 8004492:	4013      	ands	r3, r2
 8004494:	d100      	bne.n	8004498 <HAL_RCC_OscConfig+0x300>
 8004496:	e0c7      	b.n	8004628 <HAL_RCC_OscConfig+0x490>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004498:	231f      	movs	r3, #31
 800449a:	18fb      	adds	r3, r7, r3
 800449c:	2200      	movs	r2, #0
 800449e:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80044a0:	4b09      	ldr	r3, [pc, #36]	; (80044c8 <HAL_RCC_OscConfig+0x330>)
 80044a2:	689b      	ldr	r3, [r3, #8]
 80044a4:	2238      	movs	r2, #56	; 0x38
 80044a6:	4013      	ands	r3, r2
 80044a8:	2b20      	cmp	r3, #32
 80044aa:	d11f      	bne.n	80044ec <HAL_RCC_OscConfig+0x354>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 80044ac:	4b06      	ldr	r3, [pc, #24]	; (80044c8 <HAL_RCC_OscConfig+0x330>)
 80044ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044b0:	2202      	movs	r2, #2
 80044b2:	4013      	ands	r3, r2
 80044b4:	d100      	bne.n	80044b8 <HAL_RCC_OscConfig+0x320>
 80044b6:	e0b7      	b.n	8004628 <HAL_RCC_OscConfig+0x490>
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	689b      	ldr	r3, [r3, #8]
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d000      	beq.n	80044c2 <HAL_RCC_OscConfig+0x32a>
 80044c0:	e0b2      	b.n	8004628 <HAL_RCC_OscConfig+0x490>
      {
        return HAL_ERROR;
 80044c2:	2301      	movs	r3, #1
 80044c4:	e1c2      	b.n	800484c <HAL_RCC_OscConfig+0x6b4>
 80044c6:	46c0      	nop			; (mov r8, r8)
 80044c8:	40021000 	.word	0x40021000
 80044cc:	fffeffff 	.word	0xfffeffff
 80044d0:	fffbffff 	.word	0xfffbffff
 80044d4:	ffff80ff 	.word	0xffff80ff
 80044d8:	ffffc7ff 	.word	0xffffc7ff
 80044dc:	00f42400 	.word	0x00f42400
 80044e0:	20000004 	.word	0x20000004
 80044e4:	20000008 	.word	0x20000008
 80044e8:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80044ec:	4bb5      	ldr	r3, [pc, #724]	; (80047c4 <HAL_RCC_OscConfig+0x62c>)
 80044ee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80044f0:	2380      	movs	r3, #128	; 0x80
 80044f2:	055b      	lsls	r3, r3, #21
 80044f4:	4013      	ands	r3, r2
 80044f6:	d101      	bne.n	80044fc <HAL_RCC_OscConfig+0x364>
 80044f8:	2301      	movs	r3, #1
 80044fa:	e000      	b.n	80044fe <HAL_RCC_OscConfig+0x366>
 80044fc:	2300      	movs	r3, #0
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d011      	beq.n	8004526 <HAL_RCC_OscConfig+0x38e>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8004502:	4bb0      	ldr	r3, [pc, #704]	; (80047c4 <HAL_RCC_OscConfig+0x62c>)
 8004504:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004506:	4baf      	ldr	r3, [pc, #700]	; (80047c4 <HAL_RCC_OscConfig+0x62c>)
 8004508:	2180      	movs	r1, #128	; 0x80
 800450a:	0549      	lsls	r1, r1, #21
 800450c:	430a      	orrs	r2, r1
 800450e:	63da      	str	r2, [r3, #60]	; 0x3c
 8004510:	4bac      	ldr	r3, [pc, #688]	; (80047c4 <HAL_RCC_OscConfig+0x62c>)
 8004512:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004514:	2380      	movs	r3, #128	; 0x80
 8004516:	055b      	lsls	r3, r3, #21
 8004518:	4013      	ands	r3, r2
 800451a:	60fb      	str	r3, [r7, #12]
 800451c:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 800451e:	231f      	movs	r3, #31
 8004520:	18fb      	adds	r3, r7, r3
 8004522:	2201      	movs	r2, #1
 8004524:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004526:	4ba8      	ldr	r3, [pc, #672]	; (80047c8 <HAL_RCC_OscConfig+0x630>)
 8004528:	681a      	ldr	r2, [r3, #0]
 800452a:	2380      	movs	r3, #128	; 0x80
 800452c:	005b      	lsls	r3, r3, #1
 800452e:	4013      	ands	r3, r2
 8004530:	d11a      	bne.n	8004568 <HAL_RCC_OscConfig+0x3d0>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004532:	4ba5      	ldr	r3, [pc, #660]	; (80047c8 <HAL_RCC_OscConfig+0x630>)
 8004534:	681a      	ldr	r2, [r3, #0]
 8004536:	4ba4      	ldr	r3, [pc, #656]	; (80047c8 <HAL_RCC_OscConfig+0x630>)
 8004538:	2180      	movs	r1, #128	; 0x80
 800453a:	0049      	lsls	r1, r1, #1
 800453c:	430a      	orrs	r2, r1
 800453e:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8004540:	f7ff f9f2 	bl	8003928 <HAL_GetTick>
 8004544:	0003      	movs	r3, r0
 8004546:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004548:	e008      	b.n	800455c <HAL_RCC_OscConfig+0x3c4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800454a:	f7ff f9ed 	bl	8003928 <HAL_GetTick>
 800454e:	0002      	movs	r2, r0
 8004550:	693b      	ldr	r3, [r7, #16]
 8004552:	1ad3      	subs	r3, r2, r3
 8004554:	2b02      	cmp	r3, #2
 8004556:	d901      	bls.n	800455c <HAL_RCC_OscConfig+0x3c4>
          {
            return HAL_TIMEOUT;
 8004558:	2303      	movs	r3, #3
 800455a:	e177      	b.n	800484c <HAL_RCC_OscConfig+0x6b4>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800455c:	4b9a      	ldr	r3, [pc, #616]	; (80047c8 <HAL_RCC_OscConfig+0x630>)
 800455e:	681a      	ldr	r2, [r3, #0]
 8004560:	2380      	movs	r3, #128	; 0x80
 8004562:	005b      	lsls	r3, r3, #1
 8004564:	4013      	ands	r3, r2
 8004566:	d0f0      	beq.n	800454a <HAL_RCC_OscConfig+0x3b2>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	689b      	ldr	r3, [r3, #8]
 800456c:	2b01      	cmp	r3, #1
 800456e:	d106      	bne.n	800457e <HAL_RCC_OscConfig+0x3e6>
 8004570:	4b94      	ldr	r3, [pc, #592]	; (80047c4 <HAL_RCC_OscConfig+0x62c>)
 8004572:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004574:	4b93      	ldr	r3, [pc, #588]	; (80047c4 <HAL_RCC_OscConfig+0x62c>)
 8004576:	2101      	movs	r1, #1
 8004578:	430a      	orrs	r2, r1
 800457a:	65da      	str	r2, [r3, #92]	; 0x5c
 800457c:	e01c      	b.n	80045b8 <HAL_RCC_OscConfig+0x420>
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	689b      	ldr	r3, [r3, #8]
 8004582:	2b05      	cmp	r3, #5
 8004584:	d10c      	bne.n	80045a0 <HAL_RCC_OscConfig+0x408>
 8004586:	4b8f      	ldr	r3, [pc, #572]	; (80047c4 <HAL_RCC_OscConfig+0x62c>)
 8004588:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800458a:	4b8e      	ldr	r3, [pc, #568]	; (80047c4 <HAL_RCC_OscConfig+0x62c>)
 800458c:	2104      	movs	r1, #4
 800458e:	430a      	orrs	r2, r1
 8004590:	65da      	str	r2, [r3, #92]	; 0x5c
 8004592:	4b8c      	ldr	r3, [pc, #560]	; (80047c4 <HAL_RCC_OscConfig+0x62c>)
 8004594:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004596:	4b8b      	ldr	r3, [pc, #556]	; (80047c4 <HAL_RCC_OscConfig+0x62c>)
 8004598:	2101      	movs	r1, #1
 800459a:	430a      	orrs	r2, r1
 800459c:	65da      	str	r2, [r3, #92]	; 0x5c
 800459e:	e00b      	b.n	80045b8 <HAL_RCC_OscConfig+0x420>
 80045a0:	4b88      	ldr	r3, [pc, #544]	; (80047c4 <HAL_RCC_OscConfig+0x62c>)
 80045a2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80045a4:	4b87      	ldr	r3, [pc, #540]	; (80047c4 <HAL_RCC_OscConfig+0x62c>)
 80045a6:	2101      	movs	r1, #1
 80045a8:	438a      	bics	r2, r1
 80045aa:	65da      	str	r2, [r3, #92]	; 0x5c
 80045ac:	4b85      	ldr	r3, [pc, #532]	; (80047c4 <HAL_RCC_OscConfig+0x62c>)
 80045ae:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80045b0:	4b84      	ldr	r3, [pc, #528]	; (80047c4 <HAL_RCC_OscConfig+0x62c>)
 80045b2:	2104      	movs	r1, #4
 80045b4:	438a      	bics	r2, r1
 80045b6:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	689b      	ldr	r3, [r3, #8]
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d014      	beq.n	80045ea <HAL_RCC_OscConfig+0x452>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045c0:	f7ff f9b2 	bl	8003928 <HAL_GetTick>
 80045c4:	0003      	movs	r3, r0
 80045c6:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80045c8:	e009      	b.n	80045de <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045ca:	f7ff f9ad 	bl	8003928 <HAL_GetTick>
 80045ce:	0002      	movs	r2, r0
 80045d0:	693b      	ldr	r3, [r7, #16]
 80045d2:	1ad3      	subs	r3, r2, r3
 80045d4:	4a7d      	ldr	r2, [pc, #500]	; (80047cc <HAL_RCC_OscConfig+0x634>)
 80045d6:	4293      	cmp	r3, r2
 80045d8:	d901      	bls.n	80045de <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 80045da:	2303      	movs	r3, #3
 80045dc:	e136      	b.n	800484c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80045de:	4b79      	ldr	r3, [pc, #484]	; (80047c4 <HAL_RCC_OscConfig+0x62c>)
 80045e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045e2:	2202      	movs	r2, #2
 80045e4:	4013      	ands	r3, r2
 80045e6:	d0f0      	beq.n	80045ca <HAL_RCC_OscConfig+0x432>
 80045e8:	e013      	b.n	8004612 <HAL_RCC_OscConfig+0x47a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045ea:	f7ff f99d 	bl	8003928 <HAL_GetTick>
 80045ee:	0003      	movs	r3, r0
 80045f0:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80045f2:	e009      	b.n	8004608 <HAL_RCC_OscConfig+0x470>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045f4:	f7ff f998 	bl	8003928 <HAL_GetTick>
 80045f8:	0002      	movs	r2, r0
 80045fa:	693b      	ldr	r3, [r7, #16]
 80045fc:	1ad3      	subs	r3, r2, r3
 80045fe:	4a73      	ldr	r2, [pc, #460]	; (80047cc <HAL_RCC_OscConfig+0x634>)
 8004600:	4293      	cmp	r3, r2
 8004602:	d901      	bls.n	8004608 <HAL_RCC_OscConfig+0x470>
          {
            return HAL_TIMEOUT;
 8004604:	2303      	movs	r3, #3
 8004606:	e121      	b.n	800484c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004608:	4b6e      	ldr	r3, [pc, #440]	; (80047c4 <HAL_RCC_OscConfig+0x62c>)
 800460a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800460c:	2202      	movs	r2, #2
 800460e:	4013      	ands	r3, r2
 8004610:	d1f0      	bne.n	80045f4 <HAL_RCC_OscConfig+0x45c>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8004612:	231f      	movs	r3, #31
 8004614:	18fb      	adds	r3, r7, r3
 8004616:	781b      	ldrb	r3, [r3, #0]
 8004618:	2b01      	cmp	r3, #1
 800461a:	d105      	bne.n	8004628 <HAL_RCC_OscConfig+0x490>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 800461c:	4b69      	ldr	r3, [pc, #420]	; (80047c4 <HAL_RCC_OscConfig+0x62c>)
 800461e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004620:	4b68      	ldr	r3, [pc, #416]	; (80047c4 <HAL_RCC_OscConfig+0x62c>)
 8004622:	496b      	ldr	r1, [pc, #428]	; (80047d0 <HAL_RCC_OscConfig+0x638>)
 8004624:	400a      	ands	r2, r1
 8004626:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	2220      	movs	r2, #32
 800462e:	4013      	ands	r3, r2
 8004630:	d039      	beq.n	80046a6 <HAL_RCC_OscConfig+0x50e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	69db      	ldr	r3, [r3, #28]
 8004636:	2b00      	cmp	r3, #0
 8004638:	d01b      	beq.n	8004672 <HAL_RCC_OscConfig+0x4da>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800463a:	4b62      	ldr	r3, [pc, #392]	; (80047c4 <HAL_RCC_OscConfig+0x62c>)
 800463c:	681a      	ldr	r2, [r3, #0]
 800463e:	4b61      	ldr	r3, [pc, #388]	; (80047c4 <HAL_RCC_OscConfig+0x62c>)
 8004640:	2180      	movs	r1, #128	; 0x80
 8004642:	03c9      	lsls	r1, r1, #15
 8004644:	430a      	orrs	r2, r1
 8004646:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004648:	f7ff f96e 	bl	8003928 <HAL_GetTick>
 800464c:	0003      	movs	r3, r0
 800464e:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8004650:	e008      	b.n	8004664 <HAL_RCC_OscConfig+0x4cc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004652:	f7ff f969 	bl	8003928 <HAL_GetTick>
 8004656:	0002      	movs	r2, r0
 8004658:	693b      	ldr	r3, [r7, #16]
 800465a:	1ad3      	subs	r3, r2, r3
 800465c:	2b02      	cmp	r3, #2
 800465e:	d901      	bls.n	8004664 <HAL_RCC_OscConfig+0x4cc>
        {
          return HAL_TIMEOUT;
 8004660:	2303      	movs	r3, #3
 8004662:	e0f3      	b.n	800484c <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8004664:	4b57      	ldr	r3, [pc, #348]	; (80047c4 <HAL_RCC_OscConfig+0x62c>)
 8004666:	681a      	ldr	r2, [r3, #0]
 8004668:	2380      	movs	r3, #128	; 0x80
 800466a:	041b      	lsls	r3, r3, #16
 800466c:	4013      	ands	r3, r2
 800466e:	d0f0      	beq.n	8004652 <HAL_RCC_OscConfig+0x4ba>
 8004670:	e019      	b.n	80046a6 <HAL_RCC_OscConfig+0x50e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004672:	4b54      	ldr	r3, [pc, #336]	; (80047c4 <HAL_RCC_OscConfig+0x62c>)
 8004674:	681a      	ldr	r2, [r3, #0]
 8004676:	4b53      	ldr	r3, [pc, #332]	; (80047c4 <HAL_RCC_OscConfig+0x62c>)
 8004678:	4956      	ldr	r1, [pc, #344]	; (80047d4 <HAL_RCC_OscConfig+0x63c>)
 800467a:	400a      	ands	r2, r1
 800467c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800467e:	f7ff f953 	bl	8003928 <HAL_GetTick>
 8004682:	0003      	movs	r3, r0
 8004684:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8004686:	e008      	b.n	800469a <HAL_RCC_OscConfig+0x502>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004688:	f7ff f94e 	bl	8003928 <HAL_GetTick>
 800468c:	0002      	movs	r2, r0
 800468e:	693b      	ldr	r3, [r7, #16]
 8004690:	1ad3      	subs	r3, r2, r3
 8004692:	2b02      	cmp	r3, #2
 8004694:	d901      	bls.n	800469a <HAL_RCC_OscConfig+0x502>
        {
          return HAL_TIMEOUT;
 8004696:	2303      	movs	r3, #3
 8004698:	e0d8      	b.n	800484c <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800469a:	4b4a      	ldr	r3, [pc, #296]	; (80047c4 <HAL_RCC_OscConfig+0x62c>)
 800469c:	681a      	ldr	r2, [r3, #0]
 800469e:	2380      	movs	r3, #128	; 0x80
 80046a0:	041b      	lsls	r3, r3, #16
 80046a2:	4013      	ands	r3, r2
 80046a4:	d1f0      	bne.n	8004688 <HAL_RCC_OscConfig+0x4f0>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	6a1b      	ldr	r3, [r3, #32]
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d100      	bne.n	80046b0 <HAL_RCC_OscConfig+0x518>
 80046ae:	e0cc      	b.n	800484a <HAL_RCC_OscConfig+0x6b2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80046b0:	4b44      	ldr	r3, [pc, #272]	; (80047c4 <HAL_RCC_OscConfig+0x62c>)
 80046b2:	689b      	ldr	r3, [r3, #8]
 80046b4:	2238      	movs	r2, #56	; 0x38
 80046b6:	4013      	ands	r3, r2
 80046b8:	2b10      	cmp	r3, #16
 80046ba:	d100      	bne.n	80046be <HAL_RCC_OscConfig+0x526>
 80046bc:	e07b      	b.n	80047b6 <HAL_RCC_OscConfig+0x61e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	6a1b      	ldr	r3, [r3, #32]
 80046c2:	2b02      	cmp	r3, #2
 80046c4:	d156      	bne.n	8004774 <HAL_RCC_OscConfig+0x5dc>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046c6:	4b3f      	ldr	r3, [pc, #252]	; (80047c4 <HAL_RCC_OscConfig+0x62c>)
 80046c8:	681a      	ldr	r2, [r3, #0]
 80046ca:	4b3e      	ldr	r3, [pc, #248]	; (80047c4 <HAL_RCC_OscConfig+0x62c>)
 80046cc:	4942      	ldr	r1, [pc, #264]	; (80047d8 <HAL_RCC_OscConfig+0x640>)
 80046ce:	400a      	ands	r2, r1
 80046d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046d2:	f7ff f929 	bl	8003928 <HAL_GetTick>
 80046d6:	0003      	movs	r3, r0
 80046d8:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80046da:	e008      	b.n	80046ee <HAL_RCC_OscConfig+0x556>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046dc:	f7ff f924 	bl	8003928 <HAL_GetTick>
 80046e0:	0002      	movs	r2, r0
 80046e2:	693b      	ldr	r3, [r7, #16]
 80046e4:	1ad3      	subs	r3, r2, r3
 80046e6:	2b02      	cmp	r3, #2
 80046e8:	d901      	bls.n	80046ee <HAL_RCC_OscConfig+0x556>
          {
            return HAL_TIMEOUT;
 80046ea:	2303      	movs	r3, #3
 80046ec:	e0ae      	b.n	800484c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80046ee:	4b35      	ldr	r3, [pc, #212]	; (80047c4 <HAL_RCC_OscConfig+0x62c>)
 80046f0:	681a      	ldr	r2, [r3, #0]
 80046f2:	2380      	movs	r3, #128	; 0x80
 80046f4:	049b      	lsls	r3, r3, #18
 80046f6:	4013      	ands	r3, r2
 80046f8:	d1f0      	bne.n	80046dc <HAL_RCC_OscConfig+0x544>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80046fa:	4b32      	ldr	r3, [pc, #200]	; (80047c4 <HAL_RCC_OscConfig+0x62c>)
 80046fc:	68db      	ldr	r3, [r3, #12]
 80046fe:	4a37      	ldr	r2, [pc, #220]	; (80047dc <HAL_RCC_OscConfig+0x644>)
 8004700:	4013      	ands	r3, r2
 8004702:	0019      	movs	r1, r3
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800470c:	431a      	orrs	r2, r3
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004712:	021b      	lsls	r3, r3, #8
 8004714:	431a      	orrs	r2, r3
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800471a:	431a      	orrs	r2, r3
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004720:	431a      	orrs	r2, r3
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004726:	431a      	orrs	r2, r3
 8004728:	4b26      	ldr	r3, [pc, #152]	; (80047c4 <HAL_RCC_OscConfig+0x62c>)
 800472a:	430a      	orrs	r2, r1
 800472c:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800472e:	4b25      	ldr	r3, [pc, #148]	; (80047c4 <HAL_RCC_OscConfig+0x62c>)
 8004730:	681a      	ldr	r2, [r3, #0]
 8004732:	4b24      	ldr	r3, [pc, #144]	; (80047c4 <HAL_RCC_OscConfig+0x62c>)
 8004734:	2180      	movs	r1, #128	; 0x80
 8004736:	0449      	lsls	r1, r1, #17
 8004738:	430a      	orrs	r2, r1
 800473a:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 800473c:	4b21      	ldr	r3, [pc, #132]	; (80047c4 <HAL_RCC_OscConfig+0x62c>)
 800473e:	68da      	ldr	r2, [r3, #12]
 8004740:	4b20      	ldr	r3, [pc, #128]	; (80047c4 <HAL_RCC_OscConfig+0x62c>)
 8004742:	2180      	movs	r1, #128	; 0x80
 8004744:	0549      	lsls	r1, r1, #21
 8004746:	430a      	orrs	r2, r1
 8004748:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800474a:	f7ff f8ed 	bl	8003928 <HAL_GetTick>
 800474e:	0003      	movs	r3, r0
 8004750:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004752:	e008      	b.n	8004766 <HAL_RCC_OscConfig+0x5ce>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004754:	f7ff f8e8 	bl	8003928 <HAL_GetTick>
 8004758:	0002      	movs	r2, r0
 800475a:	693b      	ldr	r3, [r7, #16]
 800475c:	1ad3      	subs	r3, r2, r3
 800475e:	2b02      	cmp	r3, #2
 8004760:	d901      	bls.n	8004766 <HAL_RCC_OscConfig+0x5ce>
          {
            return HAL_TIMEOUT;
 8004762:	2303      	movs	r3, #3
 8004764:	e072      	b.n	800484c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004766:	4b17      	ldr	r3, [pc, #92]	; (80047c4 <HAL_RCC_OscConfig+0x62c>)
 8004768:	681a      	ldr	r2, [r3, #0]
 800476a:	2380      	movs	r3, #128	; 0x80
 800476c:	049b      	lsls	r3, r3, #18
 800476e:	4013      	ands	r3, r2
 8004770:	d0f0      	beq.n	8004754 <HAL_RCC_OscConfig+0x5bc>
 8004772:	e06a      	b.n	800484a <HAL_RCC_OscConfig+0x6b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004774:	4b13      	ldr	r3, [pc, #76]	; (80047c4 <HAL_RCC_OscConfig+0x62c>)
 8004776:	681a      	ldr	r2, [r3, #0]
 8004778:	4b12      	ldr	r3, [pc, #72]	; (80047c4 <HAL_RCC_OscConfig+0x62c>)
 800477a:	4917      	ldr	r1, [pc, #92]	; (80047d8 <HAL_RCC_OscConfig+0x640>)
 800477c:	400a      	ands	r2, r1
 800477e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004780:	f7ff f8d2 	bl	8003928 <HAL_GetTick>
 8004784:	0003      	movs	r3, r0
 8004786:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004788:	e008      	b.n	800479c <HAL_RCC_OscConfig+0x604>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800478a:	f7ff f8cd 	bl	8003928 <HAL_GetTick>
 800478e:	0002      	movs	r2, r0
 8004790:	693b      	ldr	r3, [r7, #16]
 8004792:	1ad3      	subs	r3, r2, r3
 8004794:	2b02      	cmp	r3, #2
 8004796:	d901      	bls.n	800479c <HAL_RCC_OscConfig+0x604>
          {
            return HAL_TIMEOUT;
 8004798:	2303      	movs	r3, #3
 800479a:	e057      	b.n	800484c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800479c:	4b09      	ldr	r3, [pc, #36]	; (80047c4 <HAL_RCC_OscConfig+0x62c>)
 800479e:	681a      	ldr	r2, [r3, #0]
 80047a0:	2380      	movs	r3, #128	; 0x80
 80047a2:	049b      	lsls	r3, r3, #18
 80047a4:	4013      	ands	r3, r2
 80047a6:	d1f0      	bne.n	800478a <HAL_RCC_OscConfig+0x5f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 80047a8:	4b06      	ldr	r3, [pc, #24]	; (80047c4 <HAL_RCC_OscConfig+0x62c>)
 80047aa:	68da      	ldr	r2, [r3, #12]
 80047ac:	4b05      	ldr	r3, [pc, #20]	; (80047c4 <HAL_RCC_OscConfig+0x62c>)
 80047ae:	490c      	ldr	r1, [pc, #48]	; (80047e0 <HAL_RCC_OscConfig+0x648>)
 80047b0:	400a      	ands	r2, r1
 80047b2:	60da      	str	r2, [r3, #12]
 80047b4:	e049      	b.n	800484a <HAL_RCC_OscConfig+0x6b2>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	6a1b      	ldr	r3, [r3, #32]
 80047ba:	2b01      	cmp	r3, #1
 80047bc:	d112      	bne.n	80047e4 <HAL_RCC_OscConfig+0x64c>
      {
        return HAL_ERROR;
 80047be:	2301      	movs	r3, #1
 80047c0:	e044      	b.n	800484c <HAL_RCC_OscConfig+0x6b4>
 80047c2:	46c0      	nop			; (mov r8, r8)
 80047c4:	40021000 	.word	0x40021000
 80047c8:	40007000 	.word	0x40007000
 80047cc:	00001388 	.word	0x00001388
 80047d0:	efffffff 	.word	0xefffffff
 80047d4:	ffbfffff 	.word	0xffbfffff
 80047d8:	feffffff 	.word	0xfeffffff
 80047dc:	11c1808c 	.word	0x11c1808c
 80047e0:	eefefffc 	.word	0xeefefffc
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80047e4:	4b1b      	ldr	r3, [pc, #108]	; (8004854 <HAL_RCC_OscConfig+0x6bc>)
 80047e6:	68db      	ldr	r3, [r3, #12]
 80047e8:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80047ea:	697b      	ldr	r3, [r7, #20]
 80047ec:	2203      	movs	r2, #3
 80047ee:	401a      	ands	r2, r3
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047f4:	429a      	cmp	r2, r3
 80047f6:	d126      	bne.n	8004846 <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80047f8:	697b      	ldr	r3, [r7, #20]
 80047fa:	2270      	movs	r2, #112	; 0x70
 80047fc:	401a      	ands	r2, r3
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004802:	429a      	cmp	r2, r3
 8004804:	d11f      	bne.n	8004846 <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004806:	697a      	ldr	r2, [r7, #20]
 8004808:	23fe      	movs	r3, #254	; 0xfe
 800480a:	01db      	lsls	r3, r3, #7
 800480c:	401a      	ands	r2, r3
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004812:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004814:	429a      	cmp	r2, r3
 8004816:	d116      	bne.n	8004846 <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004818:	697a      	ldr	r2, [r7, #20]
 800481a:	23f8      	movs	r3, #248	; 0xf8
 800481c:	039b      	lsls	r3, r3, #14
 800481e:	401a      	ands	r2, r3
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004824:	429a      	cmp	r2, r3
 8004826:	d10e      	bne.n	8004846 <HAL_RCC_OscConfig+0x6ae>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8004828:	697a      	ldr	r2, [r7, #20]
 800482a:	23e0      	movs	r3, #224	; 0xe0
 800482c:	051b      	lsls	r3, r3, #20
 800482e:	401a      	ands	r2, r3
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004834:	429a      	cmp	r2, r3
 8004836:	d106      	bne.n	8004846 <HAL_RCC_OscConfig+0x6ae>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8004838:	697b      	ldr	r3, [r7, #20]
 800483a:	0f5b      	lsrs	r3, r3, #29
 800483c:	075a      	lsls	r2, r3, #29
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6b9b      	ldr	r3, [r3, #56]	; 0x38
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8004842:	429a      	cmp	r2, r3
 8004844:	d001      	beq.n	800484a <HAL_RCC_OscConfig+0x6b2>
        {
          return HAL_ERROR;
 8004846:	2301      	movs	r3, #1
 8004848:	e000      	b.n	800484c <HAL_RCC_OscConfig+0x6b4>
        }
      }
    }
  }
  return HAL_OK;
 800484a:	2300      	movs	r3, #0
}
 800484c:	0018      	movs	r0, r3
 800484e:	46bd      	mov	sp, r7
 8004850:	b008      	add	sp, #32
 8004852:	bd80      	pop	{r7, pc}
 8004854:	40021000 	.word	0x40021000

08004858 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004858:	b580      	push	{r7, lr}
 800485a:	b084      	sub	sp, #16
 800485c:	af00      	add	r7, sp, #0
 800485e:	6078      	str	r0, [r7, #4]
 8004860:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	2b00      	cmp	r3, #0
 8004866:	d101      	bne.n	800486c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004868:	2301      	movs	r3, #1
 800486a:	e0e9      	b.n	8004a40 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800486c:	4b76      	ldr	r3, [pc, #472]	; (8004a48 <HAL_RCC_ClockConfig+0x1f0>)
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	2207      	movs	r2, #7
 8004872:	4013      	ands	r3, r2
 8004874:	683a      	ldr	r2, [r7, #0]
 8004876:	429a      	cmp	r2, r3
 8004878:	d91e      	bls.n	80048b8 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800487a:	4b73      	ldr	r3, [pc, #460]	; (8004a48 <HAL_RCC_ClockConfig+0x1f0>)
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	2207      	movs	r2, #7
 8004880:	4393      	bics	r3, r2
 8004882:	0019      	movs	r1, r3
 8004884:	4b70      	ldr	r3, [pc, #448]	; (8004a48 <HAL_RCC_ClockConfig+0x1f0>)
 8004886:	683a      	ldr	r2, [r7, #0]
 8004888:	430a      	orrs	r2, r1
 800488a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800488c:	f7ff f84c 	bl	8003928 <HAL_GetTick>
 8004890:	0003      	movs	r3, r0
 8004892:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004894:	e009      	b.n	80048aa <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004896:	f7ff f847 	bl	8003928 <HAL_GetTick>
 800489a:	0002      	movs	r2, r0
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	1ad3      	subs	r3, r2, r3
 80048a0:	4a6a      	ldr	r2, [pc, #424]	; (8004a4c <HAL_RCC_ClockConfig+0x1f4>)
 80048a2:	4293      	cmp	r3, r2
 80048a4:	d901      	bls.n	80048aa <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80048a6:	2303      	movs	r3, #3
 80048a8:	e0ca      	b.n	8004a40 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80048aa:	4b67      	ldr	r3, [pc, #412]	; (8004a48 <HAL_RCC_ClockConfig+0x1f0>)
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	2207      	movs	r2, #7
 80048b0:	4013      	ands	r3, r2
 80048b2:	683a      	ldr	r2, [r7, #0]
 80048b4:	429a      	cmp	r2, r3
 80048b6:	d1ee      	bne.n	8004896 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	2202      	movs	r2, #2
 80048be:	4013      	ands	r3, r2
 80048c0:	d015      	beq.n	80048ee <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	2204      	movs	r2, #4
 80048c8:	4013      	ands	r3, r2
 80048ca:	d006      	beq.n	80048da <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80048cc:	4b60      	ldr	r3, [pc, #384]	; (8004a50 <HAL_RCC_ClockConfig+0x1f8>)
 80048ce:	689a      	ldr	r2, [r3, #8]
 80048d0:	4b5f      	ldr	r3, [pc, #380]	; (8004a50 <HAL_RCC_ClockConfig+0x1f8>)
 80048d2:	21e0      	movs	r1, #224	; 0xe0
 80048d4:	01c9      	lsls	r1, r1, #7
 80048d6:	430a      	orrs	r2, r1
 80048d8:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80048da:	4b5d      	ldr	r3, [pc, #372]	; (8004a50 <HAL_RCC_ClockConfig+0x1f8>)
 80048dc:	689b      	ldr	r3, [r3, #8]
 80048de:	4a5d      	ldr	r2, [pc, #372]	; (8004a54 <HAL_RCC_ClockConfig+0x1fc>)
 80048e0:	4013      	ands	r3, r2
 80048e2:	0019      	movs	r1, r3
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	689a      	ldr	r2, [r3, #8]
 80048e8:	4b59      	ldr	r3, [pc, #356]	; (8004a50 <HAL_RCC_ClockConfig+0x1f8>)
 80048ea:	430a      	orrs	r2, r1
 80048ec:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	2201      	movs	r2, #1
 80048f4:	4013      	ands	r3, r2
 80048f6:	d057      	beq.n	80049a8 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	685b      	ldr	r3, [r3, #4]
 80048fc:	2b01      	cmp	r3, #1
 80048fe:	d107      	bne.n	8004910 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004900:	4b53      	ldr	r3, [pc, #332]	; (8004a50 <HAL_RCC_ClockConfig+0x1f8>)
 8004902:	681a      	ldr	r2, [r3, #0]
 8004904:	2380      	movs	r3, #128	; 0x80
 8004906:	029b      	lsls	r3, r3, #10
 8004908:	4013      	ands	r3, r2
 800490a:	d12b      	bne.n	8004964 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800490c:	2301      	movs	r3, #1
 800490e:	e097      	b.n	8004a40 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	685b      	ldr	r3, [r3, #4]
 8004914:	2b02      	cmp	r3, #2
 8004916:	d107      	bne.n	8004928 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004918:	4b4d      	ldr	r3, [pc, #308]	; (8004a50 <HAL_RCC_ClockConfig+0x1f8>)
 800491a:	681a      	ldr	r2, [r3, #0]
 800491c:	2380      	movs	r3, #128	; 0x80
 800491e:	049b      	lsls	r3, r3, #18
 8004920:	4013      	ands	r3, r2
 8004922:	d11f      	bne.n	8004964 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004924:	2301      	movs	r3, #1
 8004926:	e08b      	b.n	8004a40 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	685b      	ldr	r3, [r3, #4]
 800492c:	2b00      	cmp	r3, #0
 800492e:	d107      	bne.n	8004940 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004930:	4b47      	ldr	r3, [pc, #284]	; (8004a50 <HAL_RCC_ClockConfig+0x1f8>)
 8004932:	681a      	ldr	r2, [r3, #0]
 8004934:	2380      	movs	r3, #128	; 0x80
 8004936:	00db      	lsls	r3, r3, #3
 8004938:	4013      	ands	r3, r2
 800493a:	d113      	bne.n	8004964 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800493c:	2301      	movs	r3, #1
 800493e:	e07f      	b.n	8004a40 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	685b      	ldr	r3, [r3, #4]
 8004944:	2b03      	cmp	r3, #3
 8004946:	d106      	bne.n	8004956 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004948:	4b41      	ldr	r3, [pc, #260]	; (8004a50 <HAL_RCC_ClockConfig+0x1f8>)
 800494a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800494c:	2202      	movs	r2, #2
 800494e:	4013      	ands	r3, r2
 8004950:	d108      	bne.n	8004964 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004952:	2301      	movs	r3, #1
 8004954:	e074      	b.n	8004a40 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004956:	4b3e      	ldr	r3, [pc, #248]	; (8004a50 <HAL_RCC_ClockConfig+0x1f8>)
 8004958:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800495a:	2202      	movs	r2, #2
 800495c:	4013      	ands	r3, r2
 800495e:	d101      	bne.n	8004964 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004960:	2301      	movs	r3, #1
 8004962:	e06d      	b.n	8004a40 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004964:	4b3a      	ldr	r3, [pc, #232]	; (8004a50 <HAL_RCC_ClockConfig+0x1f8>)
 8004966:	689b      	ldr	r3, [r3, #8]
 8004968:	2207      	movs	r2, #7
 800496a:	4393      	bics	r3, r2
 800496c:	0019      	movs	r1, r3
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	685a      	ldr	r2, [r3, #4]
 8004972:	4b37      	ldr	r3, [pc, #220]	; (8004a50 <HAL_RCC_ClockConfig+0x1f8>)
 8004974:	430a      	orrs	r2, r1
 8004976:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004978:	f7fe ffd6 	bl	8003928 <HAL_GetTick>
 800497c:	0003      	movs	r3, r0
 800497e:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004980:	e009      	b.n	8004996 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004982:	f7fe ffd1 	bl	8003928 <HAL_GetTick>
 8004986:	0002      	movs	r2, r0
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	1ad3      	subs	r3, r2, r3
 800498c:	4a2f      	ldr	r2, [pc, #188]	; (8004a4c <HAL_RCC_ClockConfig+0x1f4>)
 800498e:	4293      	cmp	r3, r2
 8004990:	d901      	bls.n	8004996 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8004992:	2303      	movs	r3, #3
 8004994:	e054      	b.n	8004a40 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004996:	4b2e      	ldr	r3, [pc, #184]	; (8004a50 <HAL_RCC_ClockConfig+0x1f8>)
 8004998:	689b      	ldr	r3, [r3, #8]
 800499a:	2238      	movs	r2, #56	; 0x38
 800499c:	401a      	ands	r2, r3
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	685b      	ldr	r3, [r3, #4]
 80049a2:	00db      	lsls	r3, r3, #3
 80049a4:	429a      	cmp	r2, r3
 80049a6:	d1ec      	bne.n	8004982 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80049a8:	4b27      	ldr	r3, [pc, #156]	; (8004a48 <HAL_RCC_ClockConfig+0x1f0>)
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	2207      	movs	r2, #7
 80049ae:	4013      	ands	r3, r2
 80049b0:	683a      	ldr	r2, [r7, #0]
 80049b2:	429a      	cmp	r2, r3
 80049b4:	d21e      	bcs.n	80049f4 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049b6:	4b24      	ldr	r3, [pc, #144]	; (8004a48 <HAL_RCC_ClockConfig+0x1f0>)
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	2207      	movs	r2, #7
 80049bc:	4393      	bics	r3, r2
 80049be:	0019      	movs	r1, r3
 80049c0:	4b21      	ldr	r3, [pc, #132]	; (8004a48 <HAL_RCC_ClockConfig+0x1f0>)
 80049c2:	683a      	ldr	r2, [r7, #0]
 80049c4:	430a      	orrs	r2, r1
 80049c6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80049c8:	f7fe ffae 	bl	8003928 <HAL_GetTick>
 80049cc:	0003      	movs	r3, r0
 80049ce:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80049d0:	e009      	b.n	80049e6 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80049d2:	f7fe ffa9 	bl	8003928 <HAL_GetTick>
 80049d6:	0002      	movs	r2, r0
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	1ad3      	subs	r3, r2, r3
 80049dc:	4a1b      	ldr	r2, [pc, #108]	; (8004a4c <HAL_RCC_ClockConfig+0x1f4>)
 80049de:	4293      	cmp	r3, r2
 80049e0:	d901      	bls.n	80049e6 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80049e2:	2303      	movs	r3, #3
 80049e4:	e02c      	b.n	8004a40 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80049e6:	4b18      	ldr	r3, [pc, #96]	; (8004a48 <HAL_RCC_ClockConfig+0x1f0>)
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	2207      	movs	r2, #7
 80049ec:	4013      	ands	r3, r2
 80049ee:	683a      	ldr	r2, [r7, #0]
 80049f0:	429a      	cmp	r2, r3
 80049f2:	d1ee      	bne.n	80049d2 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	2204      	movs	r2, #4
 80049fa:	4013      	ands	r3, r2
 80049fc:	d009      	beq.n	8004a12 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80049fe:	4b14      	ldr	r3, [pc, #80]	; (8004a50 <HAL_RCC_ClockConfig+0x1f8>)
 8004a00:	689b      	ldr	r3, [r3, #8]
 8004a02:	4a15      	ldr	r2, [pc, #84]	; (8004a58 <HAL_RCC_ClockConfig+0x200>)
 8004a04:	4013      	ands	r3, r2
 8004a06:	0019      	movs	r1, r3
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	68da      	ldr	r2, [r3, #12]
 8004a0c:	4b10      	ldr	r3, [pc, #64]	; (8004a50 <HAL_RCC_ClockConfig+0x1f8>)
 8004a0e:	430a      	orrs	r2, r1
 8004a10:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8004a12:	f000 f829 	bl	8004a68 <HAL_RCC_GetSysClockFreq>
 8004a16:	0001      	movs	r1, r0
 8004a18:	4b0d      	ldr	r3, [pc, #52]	; (8004a50 <HAL_RCC_ClockConfig+0x1f8>)
 8004a1a:	689b      	ldr	r3, [r3, #8]
 8004a1c:	0a1b      	lsrs	r3, r3, #8
 8004a1e:	220f      	movs	r2, #15
 8004a20:	401a      	ands	r2, r3
 8004a22:	4b0e      	ldr	r3, [pc, #56]	; (8004a5c <HAL_RCC_ClockConfig+0x204>)
 8004a24:	0092      	lsls	r2, r2, #2
 8004a26:	58d3      	ldr	r3, [r2, r3]
 8004a28:	221f      	movs	r2, #31
 8004a2a:	4013      	ands	r3, r2
 8004a2c:	000a      	movs	r2, r1
 8004a2e:	40da      	lsrs	r2, r3
 8004a30:	4b0b      	ldr	r3, [pc, #44]	; (8004a60 <HAL_RCC_ClockConfig+0x208>)
 8004a32:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004a34:	4b0b      	ldr	r3, [pc, #44]	; (8004a64 <HAL_RCC_ClockConfig+0x20c>)
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	0018      	movs	r0, r3
 8004a3a:	f7fe ff19 	bl	8003870 <HAL_InitTick>
 8004a3e:	0003      	movs	r3, r0
}
 8004a40:	0018      	movs	r0, r3
 8004a42:	46bd      	mov	sp, r7
 8004a44:	b004      	add	sp, #16
 8004a46:	bd80      	pop	{r7, pc}
 8004a48:	40022000 	.word	0x40022000
 8004a4c:	00001388 	.word	0x00001388
 8004a50:	40021000 	.word	0x40021000
 8004a54:	fffff0ff 	.word	0xfffff0ff
 8004a58:	ffff8fff 	.word	0xffff8fff
 8004a5c:	08012964 	.word	0x08012964
 8004a60:	20000004 	.word	0x20000004
 8004a64:	20000008 	.word	0x20000008

08004a68 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004a68:	b580      	push	{r7, lr}
 8004a6a:	b086      	sub	sp, #24
 8004a6c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004a6e:	4b3c      	ldr	r3, [pc, #240]	; (8004b60 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004a70:	689b      	ldr	r3, [r3, #8]
 8004a72:	2238      	movs	r2, #56	; 0x38
 8004a74:	4013      	ands	r3, r2
 8004a76:	d10f      	bne.n	8004a98 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8004a78:	4b39      	ldr	r3, [pc, #228]	; (8004b60 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	0adb      	lsrs	r3, r3, #11
 8004a7e:	2207      	movs	r2, #7
 8004a80:	4013      	ands	r3, r2
 8004a82:	2201      	movs	r2, #1
 8004a84:	409a      	lsls	r2, r3
 8004a86:	0013      	movs	r3, r2
 8004a88:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8004a8a:	6839      	ldr	r1, [r7, #0]
 8004a8c:	4835      	ldr	r0, [pc, #212]	; (8004b64 <HAL_RCC_GetSysClockFreq+0xfc>)
 8004a8e:	f7fb fb55 	bl	800013c <__udivsi3>
 8004a92:	0003      	movs	r3, r0
 8004a94:	613b      	str	r3, [r7, #16]
 8004a96:	e05d      	b.n	8004b54 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004a98:	4b31      	ldr	r3, [pc, #196]	; (8004b60 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004a9a:	689b      	ldr	r3, [r3, #8]
 8004a9c:	2238      	movs	r2, #56	; 0x38
 8004a9e:	4013      	ands	r3, r2
 8004aa0:	2b08      	cmp	r3, #8
 8004aa2:	d102      	bne.n	8004aaa <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004aa4:	4b30      	ldr	r3, [pc, #192]	; (8004b68 <HAL_RCC_GetSysClockFreq+0x100>)
 8004aa6:	613b      	str	r3, [r7, #16]
 8004aa8:	e054      	b.n	8004b54 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004aaa:	4b2d      	ldr	r3, [pc, #180]	; (8004b60 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004aac:	689b      	ldr	r3, [r3, #8]
 8004aae:	2238      	movs	r2, #56	; 0x38
 8004ab0:	4013      	ands	r3, r2
 8004ab2:	2b10      	cmp	r3, #16
 8004ab4:	d138      	bne.n	8004b28 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8004ab6:	4b2a      	ldr	r3, [pc, #168]	; (8004b60 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004ab8:	68db      	ldr	r3, [r3, #12]
 8004aba:	2203      	movs	r2, #3
 8004abc:	4013      	ands	r3, r2
 8004abe:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004ac0:	4b27      	ldr	r3, [pc, #156]	; (8004b60 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004ac2:	68db      	ldr	r3, [r3, #12]
 8004ac4:	091b      	lsrs	r3, r3, #4
 8004ac6:	2207      	movs	r2, #7
 8004ac8:	4013      	ands	r3, r2
 8004aca:	3301      	adds	r3, #1
 8004acc:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	2b03      	cmp	r3, #3
 8004ad2:	d10d      	bne.n	8004af0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004ad4:	68b9      	ldr	r1, [r7, #8]
 8004ad6:	4824      	ldr	r0, [pc, #144]	; (8004b68 <HAL_RCC_GetSysClockFreq+0x100>)
 8004ad8:	f7fb fb30 	bl	800013c <__udivsi3>
 8004adc:	0003      	movs	r3, r0
 8004ade:	0019      	movs	r1, r3
 8004ae0:	4b1f      	ldr	r3, [pc, #124]	; (8004b60 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004ae2:	68db      	ldr	r3, [r3, #12]
 8004ae4:	0a1b      	lsrs	r3, r3, #8
 8004ae6:	227f      	movs	r2, #127	; 0x7f
 8004ae8:	4013      	ands	r3, r2
 8004aea:	434b      	muls	r3, r1
 8004aec:	617b      	str	r3, [r7, #20]
        break;
 8004aee:	e00d      	b.n	8004b0c <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8004af0:	68b9      	ldr	r1, [r7, #8]
 8004af2:	481c      	ldr	r0, [pc, #112]	; (8004b64 <HAL_RCC_GetSysClockFreq+0xfc>)
 8004af4:	f7fb fb22 	bl	800013c <__udivsi3>
 8004af8:	0003      	movs	r3, r0
 8004afa:	0019      	movs	r1, r3
 8004afc:	4b18      	ldr	r3, [pc, #96]	; (8004b60 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004afe:	68db      	ldr	r3, [r3, #12]
 8004b00:	0a1b      	lsrs	r3, r3, #8
 8004b02:	227f      	movs	r2, #127	; 0x7f
 8004b04:	4013      	ands	r3, r2
 8004b06:	434b      	muls	r3, r1
 8004b08:	617b      	str	r3, [r7, #20]
        break;
 8004b0a:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8004b0c:	4b14      	ldr	r3, [pc, #80]	; (8004b60 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004b0e:	68db      	ldr	r3, [r3, #12]
 8004b10:	0f5b      	lsrs	r3, r3, #29
 8004b12:	2207      	movs	r2, #7
 8004b14:	4013      	ands	r3, r2
 8004b16:	3301      	adds	r3, #1
 8004b18:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8004b1a:	6879      	ldr	r1, [r7, #4]
 8004b1c:	6978      	ldr	r0, [r7, #20]
 8004b1e:	f7fb fb0d 	bl	800013c <__udivsi3>
 8004b22:	0003      	movs	r3, r0
 8004b24:	613b      	str	r3, [r7, #16]
 8004b26:	e015      	b.n	8004b54 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8004b28:	4b0d      	ldr	r3, [pc, #52]	; (8004b60 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004b2a:	689b      	ldr	r3, [r3, #8]
 8004b2c:	2238      	movs	r2, #56	; 0x38
 8004b2e:	4013      	ands	r3, r2
 8004b30:	2b20      	cmp	r3, #32
 8004b32:	d103      	bne.n	8004b3c <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8004b34:	2380      	movs	r3, #128	; 0x80
 8004b36:	021b      	lsls	r3, r3, #8
 8004b38:	613b      	str	r3, [r7, #16]
 8004b3a:	e00b      	b.n	8004b54 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8004b3c:	4b08      	ldr	r3, [pc, #32]	; (8004b60 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004b3e:	689b      	ldr	r3, [r3, #8]
 8004b40:	2238      	movs	r2, #56	; 0x38
 8004b42:	4013      	ands	r3, r2
 8004b44:	2b18      	cmp	r3, #24
 8004b46:	d103      	bne.n	8004b50 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8004b48:	23fa      	movs	r3, #250	; 0xfa
 8004b4a:	01db      	lsls	r3, r3, #7
 8004b4c:	613b      	str	r3, [r7, #16]
 8004b4e:	e001      	b.n	8004b54 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8004b50:	2300      	movs	r3, #0
 8004b52:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004b54:	693b      	ldr	r3, [r7, #16]
}
 8004b56:	0018      	movs	r0, r3
 8004b58:	46bd      	mov	sp, r7
 8004b5a:	b006      	add	sp, #24
 8004b5c:	bd80      	pop	{r7, pc}
 8004b5e:	46c0      	nop			; (mov r8, r8)
 8004b60:	40021000 	.word	0x40021000
 8004b64:	00f42400 	.word	0x00f42400
 8004b68:	007a1200 	.word	0x007a1200

08004b6c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004b6c:	b580      	push	{r7, lr}
 8004b6e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004b70:	4b02      	ldr	r3, [pc, #8]	; (8004b7c <HAL_RCC_GetHCLKFreq+0x10>)
 8004b72:	681b      	ldr	r3, [r3, #0]
}
 8004b74:	0018      	movs	r0, r3
 8004b76:	46bd      	mov	sp, r7
 8004b78:	bd80      	pop	{r7, pc}
 8004b7a:	46c0      	nop			; (mov r8, r8)
 8004b7c:	20000004 	.word	0x20000004

08004b80 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004b80:	b5b0      	push	{r4, r5, r7, lr}
 8004b82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8004b84:	f7ff fff2 	bl	8004b6c <HAL_RCC_GetHCLKFreq>
 8004b88:	0004      	movs	r4, r0
 8004b8a:	f7ff faf9 	bl	8004180 <LL_RCC_GetAPB1Prescaler>
 8004b8e:	0003      	movs	r3, r0
 8004b90:	0b1a      	lsrs	r2, r3, #12
 8004b92:	4b05      	ldr	r3, [pc, #20]	; (8004ba8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004b94:	0092      	lsls	r2, r2, #2
 8004b96:	58d3      	ldr	r3, [r2, r3]
 8004b98:	221f      	movs	r2, #31
 8004b9a:	4013      	ands	r3, r2
 8004b9c:	40dc      	lsrs	r4, r3
 8004b9e:	0023      	movs	r3, r4
}
 8004ba0:	0018      	movs	r0, r3
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	bdb0      	pop	{r4, r5, r7, pc}
 8004ba6:	46c0      	nop			; (mov r8, r8)
 8004ba8:	080129a4 	.word	0x080129a4

08004bac <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004bac:	b580      	push	{r7, lr}
 8004bae:	b086      	sub	sp, #24
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8004bb4:	2313      	movs	r3, #19
 8004bb6:	18fb      	adds	r3, r7, r3
 8004bb8:	2200      	movs	r2, #0
 8004bba:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004bbc:	2312      	movs	r3, #18
 8004bbe:	18fb      	adds	r3, r7, r3
 8004bc0:	2200      	movs	r2, #0
 8004bc2:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681a      	ldr	r2, [r3, #0]
 8004bc8:	2380      	movs	r3, #128	; 0x80
 8004bca:	029b      	lsls	r3, r3, #10
 8004bcc:	4013      	ands	r3, r2
 8004bce:	d100      	bne.n	8004bd2 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8004bd0:	e0ad      	b.n	8004d2e <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004bd2:	2011      	movs	r0, #17
 8004bd4:	183b      	adds	r3, r7, r0
 8004bd6:	2200      	movs	r2, #0
 8004bd8:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004bda:	4b47      	ldr	r3, [pc, #284]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004bdc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004bde:	2380      	movs	r3, #128	; 0x80
 8004be0:	055b      	lsls	r3, r3, #21
 8004be2:	4013      	ands	r3, r2
 8004be4:	d110      	bne.n	8004c08 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004be6:	4b44      	ldr	r3, [pc, #272]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004be8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004bea:	4b43      	ldr	r3, [pc, #268]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004bec:	2180      	movs	r1, #128	; 0x80
 8004bee:	0549      	lsls	r1, r1, #21
 8004bf0:	430a      	orrs	r2, r1
 8004bf2:	63da      	str	r2, [r3, #60]	; 0x3c
 8004bf4:	4b40      	ldr	r3, [pc, #256]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004bf6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004bf8:	2380      	movs	r3, #128	; 0x80
 8004bfa:	055b      	lsls	r3, r3, #21
 8004bfc:	4013      	ands	r3, r2
 8004bfe:	60bb      	str	r3, [r7, #8]
 8004c00:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004c02:	183b      	adds	r3, r7, r0
 8004c04:	2201      	movs	r2, #1
 8004c06:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004c08:	4b3c      	ldr	r3, [pc, #240]	; (8004cfc <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8004c0a:	681a      	ldr	r2, [r3, #0]
 8004c0c:	4b3b      	ldr	r3, [pc, #236]	; (8004cfc <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8004c0e:	2180      	movs	r1, #128	; 0x80
 8004c10:	0049      	lsls	r1, r1, #1
 8004c12:	430a      	orrs	r2, r1
 8004c14:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004c16:	f7fe fe87 	bl	8003928 <HAL_GetTick>
 8004c1a:	0003      	movs	r3, r0
 8004c1c:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004c1e:	e00b      	b.n	8004c38 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c20:	f7fe fe82 	bl	8003928 <HAL_GetTick>
 8004c24:	0002      	movs	r2, r0
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	1ad3      	subs	r3, r2, r3
 8004c2a:	2b02      	cmp	r3, #2
 8004c2c:	d904      	bls.n	8004c38 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8004c2e:	2313      	movs	r3, #19
 8004c30:	18fb      	adds	r3, r7, r3
 8004c32:	2203      	movs	r2, #3
 8004c34:	701a      	strb	r2, [r3, #0]
        break;
 8004c36:	e005      	b.n	8004c44 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004c38:	4b30      	ldr	r3, [pc, #192]	; (8004cfc <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8004c3a:	681a      	ldr	r2, [r3, #0]
 8004c3c:	2380      	movs	r3, #128	; 0x80
 8004c3e:	005b      	lsls	r3, r3, #1
 8004c40:	4013      	ands	r3, r2
 8004c42:	d0ed      	beq.n	8004c20 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8004c44:	2313      	movs	r3, #19
 8004c46:	18fb      	adds	r3, r7, r3
 8004c48:	781b      	ldrb	r3, [r3, #0]
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d15e      	bne.n	8004d0c <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004c4e:	4b2a      	ldr	r3, [pc, #168]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004c50:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004c52:	23c0      	movs	r3, #192	; 0xc0
 8004c54:	009b      	lsls	r3, r3, #2
 8004c56:	4013      	ands	r3, r2
 8004c58:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004c5a:	697b      	ldr	r3, [r7, #20]
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d019      	beq.n	8004c94 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c64:	697a      	ldr	r2, [r7, #20]
 8004c66:	429a      	cmp	r2, r3
 8004c68:	d014      	beq.n	8004c94 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004c6a:	4b23      	ldr	r3, [pc, #140]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004c6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c6e:	4a24      	ldr	r2, [pc, #144]	; (8004d00 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8004c70:	4013      	ands	r3, r2
 8004c72:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004c74:	4b20      	ldr	r3, [pc, #128]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004c76:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004c78:	4b1f      	ldr	r3, [pc, #124]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004c7a:	2180      	movs	r1, #128	; 0x80
 8004c7c:	0249      	lsls	r1, r1, #9
 8004c7e:	430a      	orrs	r2, r1
 8004c80:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004c82:	4b1d      	ldr	r3, [pc, #116]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004c84:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004c86:	4b1c      	ldr	r3, [pc, #112]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004c88:	491e      	ldr	r1, [pc, #120]	; (8004d04 <HAL_RCCEx_PeriphCLKConfig+0x158>)
 8004c8a:	400a      	ands	r2, r1
 8004c8c:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004c8e:	4b1a      	ldr	r3, [pc, #104]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004c90:	697a      	ldr	r2, [r7, #20]
 8004c92:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004c94:	697b      	ldr	r3, [r7, #20]
 8004c96:	2201      	movs	r2, #1
 8004c98:	4013      	ands	r3, r2
 8004c9a:	d016      	beq.n	8004cca <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c9c:	f7fe fe44 	bl	8003928 <HAL_GetTick>
 8004ca0:	0003      	movs	r3, r0
 8004ca2:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004ca4:	e00c      	b.n	8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ca6:	f7fe fe3f 	bl	8003928 <HAL_GetTick>
 8004caa:	0002      	movs	r2, r0
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	1ad3      	subs	r3, r2, r3
 8004cb0:	4a15      	ldr	r2, [pc, #84]	; (8004d08 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8004cb2:	4293      	cmp	r3, r2
 8004cb4:	d904      	bls.n	8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8004cb6:	2313      	movs	r3, #19
 8004cb8:	18fb      	adds	r3, r7, r3
 8004cba:	2203      	movs	r2, #3
 8004cbc:	701a      	strb	r2, [r3, #0]
            break;
 8004cbe:	e004      	b.n	8004cca <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004cc0:	4b0d      	ldr	r3, [pc, #52]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004cc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004cc4:	2202      	movs	r2, #2
 8004cc6:	4013      	ands	r3, r2
 8004cc8:	d0ed      	beq.n	8004ca6 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8004cca:	2313      	movs	r3, #19
 8004ccc:	18fb      	adds	r3, r7, r3
 8004cce:	781b      	ldrb	r3, [r3, #0]
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d10a      	bne.n	8004cea <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004cd4:	4b08      	ldr	r3, [pc, #32]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004cd6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004cd8:	4a09      	ldr	r2, [pc, #36]	; (8004d00 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8004cda:	4013      	ands	r3, r2
 8004cdc:	0019      	movs	r1, r3
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004ce2:	4b05      	ldr	r3, [pc, #20]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004ce4:	430a      	orrs	r2, r1
 8004ce6:	65da      	str	r2, [r3, #92]	; 0x5c
 8004ce8:	e016      	b.n	8004d18 <HAL_RCCEx_PeriphCLKConfig+0x16c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004cea:	2312      	movs	r3, #18
 8004cec:	18fb      	adds	r3, r7, r3
 8004cee:	2213      	movs	r2, #19
 8004cf0:	18ba      	adds	r2, r7, r2
 8004cf2:	7812      	ldrb	r2, [r2, #0]
 8004cf4:	701a      	strb	r2, [r3, #0]
 8004cf6:	e00f      	b.n	8004d18 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8004cf8:	40021000 	.word	0x40021000
 8004cfc:	40007000 	.word	0x40007000
 8004d00:	fffffcff 	.word	0xfffffcff
 8004d04:	fffeffff 	.word	0xfffeffff
 8004d08:	00001388 	.word	0x00001388
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d0c:	2312      	movs	r3, #18
 8004d0e:	18fb      	adds	r3, r7, r3
 8004d10:	2213      	movs	r2, #19
 8004d12:	18ba      	adds	r2, r7, r2
 8004d14:	7812      	ldrb	r2, [r2, #0]
 8004d16:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004d18:	2311      	movs	r3, #17
 8004d1a:	18fb      	adds	r3, r7, r3
 8004d1c:	781b      	ldrb	r3, [r3, #0]
 8004d1e:	2b01      	cmp	r3, #1
 8004d20:	d105      	bne.n	8004d2e <HAL_RCCEx_PeriphCLKConfig+0x182>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004d22:	4bb6      	ldr	r3, [pc, #728]	; (8004ffc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004d24:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004d26:	4bb5      	ldr	r3, [pc, #724]	; (8004ffc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004d28:	49b5      	ldr	r1, [pc, #724]	; (8005000 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8004d2a:	400a      	ands	r2, r1
 8004d2c:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	2201      	movs	r2, #1
 8004d34:	4013      	ands	r3, r2
 8004d36:	d009      	beq.n	8004d4c <HAL_RCCEx_PeriphCLKConfig+0x1a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004d38:	4bb0      	ldr	r3, [pc, #704]	; (8004ffc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004d3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d3c:	2203      	movs	r2, #3
 8004d3e:	4393      	bics	r3, r2
 8004d40:	0019      	movs	r1, r3
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	685a      	ldr	r2, [r3, #4]
 8004d46:	4bad      	ldr	r3, [pc, #692]	; (8004ffc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004d48:	430a      	orrs	r2, r1
 8004d4a:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	2202      	movs	r2, #2
 8004d52:	4013      	ands	r3, r2
 8004d54:	d009      	beq.n	8004d6a <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004d56:	4ba9      	ldr	r3, [pc, #676]	; (8004ffc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004d58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d5a:	220c      	movs	r2, #12
 8004d5c:	4393      	bics	r3, r2
 8004d5e:	0019      	movs	r1, r3
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	689a      	ldr	r2, [r3, #8]
 8004d64:	4ba5      	ldr	r3, [pc, #660]	; (8004ffc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004d66:	430a      	orrs	r2, r1
 8004d68:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART2SEL */

#if defined(RCC_CCIPR_USART3SEL)
  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	2204      	movs	r2, #4
 8004d70:	4013      	ands	r3, r2
 8004d72:	d009      	beq.n	8004d88 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004d74:	4ba1      	ldr	r3, [pc, #644]	; (8004ffc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004d76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d78:	2230      	movs	r2, #48	; 0x30
 8004d7a:	4393      	bics	r3, r2
 8004d7c:	0019      	movs	r1, r3
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	68da      	ldr	r2, [r3, #12]
 8004d82:	4b9e      	ldr	r3, [pc, #632]	; (8004ffc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004d84:	430a      	orrs	r2, r1
 8004d86:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	2210      	movs	r2, #16
 8004d8e:	4013      	ands	r3, r2
 8004d90:	d009      	beq.n	8004da6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004d92:	4b9a      	ldr	r3, [pc, #616]	; (8004ffc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004d94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d96:	4a9b      	ldr	r2, [pc, #620]	; (8005004 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8004d98:	4013      	ands	r3, r2
 8004d9a:	0019      	movs	r1, r3
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	691a      	ldr	r2, [r3, #16]
 8004da0:	4b96      	ldr	r3, [pc, #600]	; (8004ffc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004da2:	430a      	orrs	r2, r1
 8004da4:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART1 */

#if defined(LPUART2)
  /*-------------------------- LPUART2 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART2) == RCC_PERIPHCLK_LPUART2)
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681a      	ldr	r2, [r3, #0]
 8004daa:	2380      	movs	r3, #128	; 0x80
 8004dac:	015b      	lsls	r3, r3, #5
 8004dae:	4013      	ands	r3, r2
 8004db0:	d009      	beq.n	8004dc6 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART2CLKSOURCE(PeriphClkInit->Lpuart2ClockSelection));

    /* Configure the LPUART clock source */
    __HAL_RCC_LPUART2_CONFIG(PeriphClkInit->Lpuart2ClockSelection);
 8004db2:	4b92      	ldr	r3, [pc, #584]	; (8004ffc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004db4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004db6:	4a94      	ldr	r2, [pc, #592]	; (8005008 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004db8:	4013      	ands	r3, r2
 8004dba:	0019      	movs	r1, r3
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	695a      	ldr	r2, [r3, #20]
 8004dc0:	4b8e      	ldr	r3, [pc, #568]	; (8004ffc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004dc2:	430a      	orrs	r2, r1
 8004dc4:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681a      	ldr	r2, [r3, #0]
 8004dca:	2380      	movs	r3, #128	; 0x80
 8004dcc:	009b      	lsls	r3, r3, #2
 8004dce:	4013      	ands	r3, r2
 8004dd0:	d009      	beq.n	8004de6 <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004dd2:	4b8a      	ldr	r3, [pc, #552]	; (8004ffc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004dd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004dd6:	4a8d      	ldr	r2, [pc, #564]	; (800500c <HAL_RCCEx_PeriphCLKConfig+0x460>)
 8004dd8:	4013      	ands	r3, r2
 8004dda:	0019      	movs	r1, r3
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004de0:	4b86      	ldr	r3, [pc, #536]	; (8004ffc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004de2:	430a      	orrs	r2, r1
 8004de4:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681a      	ldr	r2, [r3, #0]
 8004dea:	2380      	movs	r3, #128	; 0x80
 8004dec:	00db      	lsls	r3, r3, #3
 8004dee:	4013      	ands	r3, r2
 8004df0:	d009      	beq.n	8004e06 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004df2:	4b82      	ldr	r3, [pc, #520]	; (8004ffc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004df4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004df6:	4a86      	ldr	r2, [pc, #536]	; (8005010 <HAL_RCCEx_PeriphCLKConfig+0x464>)
 8004df8:	4013      	ands	r3, r2
 8004dfa:	0019      	movs	r1, r3
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e00:	4b7e      	ldr	r3, [pc, #504]	; (8004ffc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004e02:	430a      	orrs	r2, r1
 8004e04:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	2220      	movs	r2, #32
 8004e0c:	4013      	ands	r3, r2
 8004e0e:	d009      	beq.n	8004e24 <HAL_RCCEx_PeriphCLKConfig+0x278>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004e10:	4b7a      	ldr	r3, [pc, #488]	; (8004ffc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004e12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e14:	4a7f      	ldr	r2, [pc, #508]	; (8005014 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8004e16:	4013      	ands	r3, r2
 8004e18:	0019      	movs	r1, r3
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	699a      	ldr	r2, [r3, #24]
 8004e1e:	4b77      	ldr	r3, [pc, #476]	; (8004ffc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004e20:	430a      	orrs	r2, r1
 8004e22:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_I2C2SEL)
  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	2240      	movs	r2, #64	; 0x40
 8004e2a:	4013      	ands	r3, r2
 8004e2c:	d009      	beq.n	8004e42 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004e2e:	4b73      	ldr	r3, [pc, #460]	; (8004ffc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004e30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e32:	4a79      	ldr	r2, [pc, #484]	; (8005018 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 8004e34:	4013      	ands	r3, r2
 8004e36:	0019      	movs	r1, r3
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	69da      	ldr	r2, [r3, #28]
 8004e3c:	4b6f      	ldr	r3, [pc, #444]	; (8004ffc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004e3e:	430a      	orrs	r2, r1
 8004e40:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681a      	ldr	r2, [r3, #0]
 8004e46:	2380      	movs	r3, #128	; 0x80
 8004e48:	01db      	lsls	r3, r3, #7
 8004e4a:	4013      	ands	r3, r2
 8004e4c:	d015      	beq.n	8004e7a <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004e4e:	4b6b      	ldr	r3, [pc, #428]	; (8004ffc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004e50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e52:	009b      	lsls	r3, r3, #2
 8004e54:	0899      	lsrs	r1, r3, #2
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004e5a:	4b68      	ldr	r3, [pc, #416]	; (8004ffc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004e5c:	430a      	orrs	r2, r1
 8004e5e:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004e64:	2380      	movs	r3, #128	; 0x80
 8004e66:	05db      	lsls	r3, r3, #23
 8004e68:	429a      	cmp	r2, r3
 8004e6a:	d106      	bne.n	8004e7a <HAL_RCCEx_PeriphCLKConfig+0x2ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8004e6c:	4b63      	ldr	r3, [pc, #396]	; (8004ffc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004e6e:	68da      	ldr	r2, [r3, #12]
 8004e70:	4b62      	ldr	r3, [pc, #392]	; (8004ffc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004e72:	2180      	movs	r1, #128	; 0x80
 8004e74:	0249      	lsls	r1, r1, #9
 8004e76:	430a      	orrs	r2, r1
 8004e78:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681a      	ldr	r2, [r3, #0]
 8004e7e:	2380      	movs	r3, #128	; 0x80
 8004e80:	031b      	lsls	r3, r3, #12
 8004e82:	4013      	ands	r3, r2
 8004e84:	d009      	beq.n	8004e9a <HAL_RCCEx_PeriphCLKConfig+0x2ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004e86:	4b5d      	ldr	r3, [pc, #372]	; (8004ffc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004e88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e8a:	2240      	movs	r2, #64	; 0x40
 8004e8c:	4393      	bics	r3, r2
 8004e8e:	0019      	movs	r1, r3
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004e94:	4b59      	ldr	r3, [pc, #356]	; (8004ffc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004e96:	430a      	orrs	r2, r1
 8004e98:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681a      	ldr	r2, [r3, #0]
 8004e9e:	2380      	movs	r3, #128	; 0x80
 8004ea0:	039b      	lsls	r3, r3, #14
 8004ea2:	4013      	ands	r3, r2
 8004ea4:	d016      	beq.n	8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8004ea6:	4b55      	ldr	r3, [pc, #340]	; (8004ffc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004ea8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004eaa:	4a5c      	ldr	r2, [pc, #368]	; (800501c <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8004eac:	4013      	ands	r3, r2
 8004eae:	0019      	movs	r1, r3
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004eb4:	4b51      	ldr	r3, [pc, #324]	; (8004ffc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004eb6:	430a      	orrs	r2, r1
 8004eb8:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004ebe:	2380      	movs	r3, #128	; 0x80
 8004ec0:	03db      	lsls	r3, r3, #15
 8004ec2:	429a      	cmp	r2, r3
 8004ec4:	d106      	bne.n	8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8004ec6:	4b4d      	ldr	r3, [pc, #308]	; (8004ffc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004ec8:	68da      	ldr	r2, [r3, #12]
 8004eca:	4b4c      	ldr	r3, [pc, #304]	; (8004ffc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004ecc:	2180      	movs	r1, #128	; 0x80
 8004ece:	0449      	lsls	r1, r1, #17
 8004ed0:	430a      	orrs	r2, r1
 8004ed2:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681a      	ldr	r2, [r3, #0]
 8004ed8:	2380      	movs	r3, #128	; 0x80
 8004eda:	03db      	lsls	r3, r3, #15
 8004edc:	4013      	ands	r3, r2
 8004ede:	d016      	beq.n	8004f0e <HAL_RCCEx_PeriphCLKConfig+0x362>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8004ee0:	4b46      	ldr	r3, [pc, #280]	; (8004ffc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004ee2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ee4:	4a4e      	ldr	r2, [pc, #312]	; (8005020 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8004ee6:	4013      	ands	r3, r2
 8004ee8:	0019      	movs	r1, r3
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004eee:	4b43      	ldr	r3, [pc, #268]	; (8004ffc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004ef0:	430a      	orrs	r2, r1
 8004ef2:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004ef8:	2380      	movs	r3, #128	; 0x80
 8004efa:	045b      	lsls	r3, r3, #17
 8004efc:	429a      	cmp	r2, r3
 8004efe:	d106      	bne.n	8004f0e <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8004f00:	4b3e      	ldr	r3, [pc, #248]	; (8004ffc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004f02:	68da      	ldr	r2, [r3, #12]
 8004f04:	4b3d      	ldr	r3, [pc, #244]	; (8004ffc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004f06:	2180      	movs	r1, #128	; 0x80
 8004f08:	0449      	lsls	r1, r1, #17
 8004f0a:	430a      	orrs	r2, r1
 8004f0c:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681a      	ldr	r2, [r3, #0]
 8004f12:	2380      	movs	r3, #128	; 0x80
 8004f14:	011b      	lsls	r3, r3, #4
 8004f16:	4013      	ands	r3, r2
 8004f18:	d014      	beq.n	8004f44 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8004f1a:	4b38      	ldr	r3, [pc, #224]	; (8004ffc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004f1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f1e:	2203      	movs	r2, #3
 8004f20:	4393      	bics	r3, r2
 8004f22:	0019      	movs	r1, r3
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	6a1a      	ldr	r2, [r3, #32]
 8004f28:	4b34      	ldr	r3, [pc, #208]	; (8004ffc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004f2a:	430a      	orrs	r2, r1
 8004f2c:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	6a1b      	ldr	r3, [r3, #32]
 8004f32:	2b01      	cmp	r3, #1
 8004f34:	d106      	bne.n	8004f44 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8004f36:	4b31      	ldr	r3, [pc, #196]	; (8004ffc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004f38:	68da      	ldr	r2, [r3, #12]
 8004f3a:	4b30      	ldr	r3, [pc, #192]	; (8004ffc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004f3c:	2180      	movs	r1, #128	; 0x80
 8004f3e:	0249      	lsls	r1, r1, #9
 8004f40:	430a      	orrs	r2, r1
 8004f42:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(RCC_CCIPR2_I2S2SEL)
  /*-------------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681a      	ldr	r2, [r3, #0]
 8004f48:	2380      	movs	r3, #128	; 0x80
 8004f4a:	019b      	lsls	r3, r3, #6
 8004f4c:	4013      	ands	r3, r2
 8004f4e:	d014      	beq.n	8004f7a <HAL_RCCEx_PeriphCLKConfig+0x3ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8004f50:	4b2a      	ldr	r3, [pc, #168]	; (8004ffc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004f52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f54:	220c      	movs	r2, #12
 8004f56:	4393      	bics	r3, r2
 8004f58:	0019      	movs	r1, r3
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004f5e:	4b27      	ldr	r3, [pc, #156]	; (8004ffc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004f60:	430a      	orrs	r2, r1
 8004f62:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f68:	2b04      	cmp	r3, #4
 8004f6a:	d106      	bne.n	8004f7a <HAL_RCCEx_PeriphCLKConfig+0x3ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8004f6c:	4b23      	ldr	r3, [pc, #140]	; (8004ffc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004f6e:	68da      	ldr	r2, [r3, #12]
 8004f70:	4b22      	ldr	r3, [pc, #136]	; (8004ffc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004f72:	2180      	movs	r1, #128	; 0x80
 8004f74:	0249      	lsls	r1, r1, #9
 8004f76:	430a      	orrs	r2, r1
 8004f78:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR2_I2S2SEL */

#if defined(STM32G0C1xx) || defined(STM32G0B1xx)  || defined(STM32G0B0xx)
  /*-------------------------- USB clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681a      	ldr	r2, [r3, #0]
 8004f7e:	2380      	movs	r3, #128	; 0x80
 8004f80:	045b      	lsls	r3, r3, #17
 8004f82:	4013      	ands	r3, r2
 8004f84:	d016      	beq.n	8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004f86:	4b1d      	ldr	r3, [pc, #116]	; (8004ffc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004f88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f8a:	4a22      	ldr	r2, [pc, #136]	; (8005014 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8004f8c:	4013      	ands	r3, r2
 8004f8e:	0019      	movs	r1, r3
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004f94:	4b19      	ldr	r3, [pc, #100]	; (8004ffc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004f96:	430a      	orrs	r2, r1
 8004f98:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004f9e:	2380      	movs	r3, #128	; 0x80
 8004fa0:	019b      	lsls	r3, r3, #6
 8004fa2:	429a      	cmp	r2, r3
 8004fa4:	d106      	bne.n	8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8004fa6:	4b15      	ldr	r3, [pc, #84]	; (8004ffc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004fa8:	68da      	ldr	r2, [r3, #12]
 8004faa:	4b14      	ldr	r3, [pc, #80]	; (8004ffc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004fac:	2180      	movs	r1, #128	; 0x80
 8004fae:	0449      	lsls	r1, r1, #17
 8004fb0:	430a      	orrs	r2, r1
 8004fb2:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32G0C1xx || STM32G0B1xx || STM32G0B0xx */

#if defined(FDCAN1) || defined(FDCAN2)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681a      	ldr	r2, [r3, #0]
 8004fb8:	2380      	movs	r3, #128	; 0x80
 8004fba:	049b      	lsls	r3, r3, #18
 8004fbc:	4013      	ands	r3, r2
 8004fbe:	d016      	beq.n	8004fee <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004fc0:	4b0e      	ldr	r3, [pc, #56]	; (8004ffc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004fc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fc4:	4a10      	ldr	r2, [pc, #64]	; (8005008 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004fc6:	4013      	ands	r3, r2
 8004fc8:	0019      	movs	r1, r3
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004fce:	4b0b      	ldr	r3, [pc, #44]	; (8004ffc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004fd0:	430a      	orrs	r2, r1
 8004fd2:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004fd8:	2380      	movs	r3, #128	; 0x80
 8004fda:	005b      	lsls	r3, r3, #1
 8004fdc:	429a      	cmp	r2, r3
 8004fde:	d106      	bne.n	8004fee <HAL_RCCEx_PeriphCLKConfig+0x442>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8004fe0:	4b06      	ldr	r3, [pc, #24]	; (8004ffc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004fe2:	68da      	ldr	r2, [r3, #12]
 8004fe4:	4b05      	ldr	r3, [pc, #20]	; (8004ffc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004fe6:	2180      	movs	r1, #128	; 0x80
 8004fe8:	0449      	lsls	r1, r1, #17
 8004fea:	430a      	orrs	r2, r1
 8004fec:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8004fee:	2312      	movs	r3, #18
 8004ff0:	18fb      	adds	r3, r7, r3
 8004ff2:	781b      	ldrb	r3, [r3, #0]
}
 8004ff4:	0018      	movs	r0, r3
 8004ff6:	46bd      	mov	sp, r7
 8004ff8:	b006      	add	sp, #24
 8004ffa:	bd80      	pop	{r7, pc}
 8004ffc:	40021000 	.word	0x40021000
 8005000:	efffffff 	.word	0xefffffff
 8005004:	fffff3ff 	.word	0xfffff3ff
 8005008:	fffffcff 	.word	0xfffffcff
 800500c:	fff3ffff 	.word	0xfff3ffff
 8005010:	ffcfffff 	.word	0xffcfffff
 8005014:	ffffcfff 	.word	0xffffcfff
 8005018:	ffff3fff 	.word	0xffff3fff
 800501c:	ffbfffff 	.word	0xffbfffff
 8005020:	feffffff 	.word	0xfeffffff

08005024 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005024:	b5b0      	push	{r4, r5, r7, lr}
 8005026:	b084      	sub	sp, #16
 8005028:	af00      	add	r7, sp, #0
 800502a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800502c:	230f      	movs	r3, #15
 800502e:	18fb      	adds	r3, r7, r3
 8005030:	2201      	movs	r2, #1
 8005032:	701a      	strb	r2, [r3, #0]

  /* Check the RTC peripheral state */
  if(hrtc != NULL)
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	2b00      	cmp	r3, #0
 8005038:	d100      	bne.n	800503c <HAL_RTC_Init+0x18>
 800503a:	e08c      	b.n	8005156 <HAL_RTC_Init+0x132>
    assert_param(IS_RTC_OUTPUT_REMAP(hrtc->Init.OutPutRemap));
    assert_param(IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
    assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
    assert_param(IS_RTC_OUTPUT_PULLUP(hrtc->Init.OutPutPullUp));

    if(hrtc->State == HAL_RTC_STATE_RESET)
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	2229      	movs	r2, #41	; 0x29
 8005040:	5c9b      	ldrb	r3, [r3, r2]
 8005042:	b2db      	uxtb	r3, r3
 8005044:	2b00      	cmp	r3, #0
 8005046:	d10b      	bne.n	8005060 <HAL_RTC_Init+0x3c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2228      	movs	r2, #40	; 0x28
 800504c:	2100      	movs	r1, #0
 800504e:	5499      	strb	r1, [r3, r2]

      /* Process TAMP peripheral offset from RTC one */
      hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	2288      	movs	r2, #136	; 0x88
 8005054:	0212      	lsls	r2, r2, #8
 8005056:	605a      	str	r2, [r3, #4]
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
#else
      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	0018      	movs	r0, r3
 800505c:	f7fe f8ca 	bl	80031f4 <HAL_RTC_MspInit>
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */
    }

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	2229      	movs	r2, #41	; 0x29
 8005064:	2102      	movs	r1, #2
 8005066:	5499      	strb	r1, [r3, r2]

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	68db      	ldr	r3, [r3, #12]
 800506e:	2210      	movs	r2, #16
 8005070:	4013      	ands	r3, r2
 8005072:	2b10      	cmp	r3, #16
 8005074:	d062      	beq.n	800513c <HAL_RTC_Init+0x118>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	22ca      	movs	r2, #202	; 0xca
 800507c:	625a      	str	r2, [r3, #36]	; 0x24
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	2253      	movs	r2, #83	; 0x53
 8005084:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8005086:	250f      	movs	r5, #15
 8005088:	197c      	adds	r4, r7, r5
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	0018      	movs	r0, r3
 800508e:	f000 f9cc 	bl	800542a <RTC_EnterInitMode>
 8005092:	0003      	movs	r3, r0
 8005094:	7023      	strb	r3, [r4, #0]

      if(status == HAL_OK)
 8005096:	0028      	movs	r0, r5
 8005098:	183b      	adds	r3, r7, r0
 800509a:	781b      	ldrb	r3, [r3, #0]
 800509c:	2b00      	cmp	r3, #0
 800509e:	d12c      	bne.n	80050fa <HAL_RTC_Init+0xd6>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	699a      	ldr	r2, [r3, #24]
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	492e      	ldr	r1, [pc, #184]	; (8005164 <HAL_RTC_Init+0x140>)
 80050ac:	400a      	ands	r2, r1
 80050ae:	619a      	str	r2, [r3, #24]
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	6999      	ldr	r1, [r3, #24]
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	689a      	ldr	r2, [r3, #8]
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	695b      	ldr	r3, [r3, #20]
 80050be:	431a      	orrs	r2, r3
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	69db      	ldr	r3, [r3, #28]
 80050c4:	431a      	orrs	r2, r3
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	430a      	orrs	r2, r1
 80050cc:	619a      	str	r2, [r3, #24]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	687a      	ldr	r2, [r7, #4]
 80050d4:	6912      	ldr	r2, [r2, #16]
 80050d6:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	6919      	ldr	r1, [r3, #16]
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	68db      	ldr	r3, [r3, #12]
 80050e2:	041a      	lsls	r2, r3, #16
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	430a      	orrs	r2, r1
 80050ea:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 80050ec:	183c      	adds	r4, r7, r0
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	0018      	movs	r0, r3
 80050f2:	f000 f9dd 	bl	80054b0 <RTC_ExitInitMode>
 80050f6:	0003      	movs	r3, r0
 80050f8:	7023      	strb	r3, [r4, #0]
      }

      if (status == HAL_OK)
 80050fa:	230f      	movs	r3, #15
 80050fc:	18fb      	adds	r3, r7, r3
 80050fe:	781b      	ldrb	r3, [r3, #0]
 8005100:	2b00      	cmp	r3, #0
 8005102:	d116      	bne.n	8005132 <HAL_RTC_Init+0x10e>
      {
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU |RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	699a      	ldr	r2, [r3, #24]
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	00d2      	lsls	r2, r2, #3
 8005110:	08d2      	lsrs	r2, r2, #3
 8005112:	619a      	str	r2, [r3, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	6999      	ldr	r1, [r3, #24]
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	6a1b      	ldr	r3, [r3, #32]
 8005122:	431a      	orrs	r2, r3
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	699b      	ldr	r3, [r3, #24]
 8005128:	431a      	orrs	r2, r3
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	430a      	orrs	r2, r1
 8005130:	619a      	str	r2, [r3, #24]
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	22ff      	movs	r2, #255	; 0xff
 8005138:	625a      	str	r2, [r3, #36]	; 0x24
 800513a:	e003      	b.n	8005144 <HAL_RTC_Init+0x120>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 800513c:	230f      	movs	r3, #15
 800513e:	18fb      	adds	r3, r7, r3
 8005140:	2200      	movs	r2, #0
 8005142:	701a      	strb	r2, [r3, #0]
    }

    if (status == HAL_OK)
 8005144:	230f      	movs	r3, #15
 8005146:	18fb      	adds	r3, r7, r3
 8005148:	781b      	ldrb	r3, [r3, #0]
 800514a:	2b00      	cmp	r3, #0
 800514c:	d103      	bne.n	8005156 <HAL_RTC_Init+0x132>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	2229      	movs	r2, #41	; 0x29
 8005152:	2101      	movs	r1, #1
 8005154:	5499      	strb	r1, [r3, r2]
    }
  }

  return status;
 8005156:	230f      	movs	r3, #15
 8005158:	18fb      	adds	r3, r7, r3
 800515a:	781b      	ldrb	r3, [r3, #0]
}
 800515c:	0018      	movs	r0, r3
 800515e:	46bd      	mov	sp, r7
 8005160:	b004      	add	sp, #16
 8005162:	bdb0      	pop	{r4, r5, r7, pc}
 8005164:	fb8fffbf 	.word	0xfb8fffbf

08005168 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005168:	b5b0      	push	{r4, r5, r7, lr}
 800516a:	b086      	sub	sp, #24
 800516c:	af00      	add	r7, sp, #0
 800516e:	60f8      	str	r0, [r7, #12]
 8005170:	60b9      	str	r1, [r7, #8]
 8005172:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	2228      	movs	r2, #40	; 0x28
 8005178:	5c9b      	ldrb	r3, [r3, r2]
 800517a:	2b01      	cmp	r3, #1
 800517c:	d101      	bne.n	8005182 <HAL_RTC_SetTime+0x1a>
 800517e:	2302      	movs	r3, #2
 8005180:	e092      	b.n	80052a8 <HAL_RTC_SetTime+0x140>
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	2228      	movs	r2, #40	; 0x28
 8005186:	2101      	movs	r1, #1
 8005188:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	2229      	movs	r2, #41	; 0x29
 800518e:	2102      	movs	r1, #2
 8005190:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	22ca      	movs	r2, #202	; 0xca
 8005198:	625a      	str	r2, [r3, #36]	; 0x24
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	2253      	movs	r2, #83	; 0x53
 80051a0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80051a2:	2513      	movs	r5, #19
 80051a4:	197c      	adds	r4, r7, r5
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	0018      	movs	r0, r3
 80051aa:	f000 f93e 	bl	800542a <RTC_EnterInitMode>
 80051ae:	0003      	movs	r3, r0
 80051b0:	7023      	strb	r3, [r4, #0]
  if(status == HAL_OK)
 80051b2:	197b      	adds	r3, r7, r5
 80051b4:	781b      	ldrb	r3, [r3, #0]
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d162      	bne.n	8005280 <HAL_RTC_SetTime+0x118>
  {
    if(Format == RTC_FORMAT_BIN)
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d125      	bne.n	800520c <HAL_RTC_SetTime+0xa4>
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	699b      	ldr	r3, [r3, #24]
 80051c6:	2240      	movs	r2, #64	; 0x40
 80051c8:	4013      	ands	r3, r2
 80051ca:	d102      	bne.n	80051d2 <HAL_RTC_SetTime+0x6a>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 80051cc:	68bb      	ldr	r3, [r7, #8]
 80051ce:	2200      	movs	r2, #0
 80051d0:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80051d2:	68bb      	ldr	r3, [r7, #8]
 80051d4:	781b      	ldrb	r3, [r3, #0]
 80051d6:	0018      	movs	r0, r3
 80051d8:	f000 f9ae 	bl	8005538 <RTC_ByteToBcd2>
 80051dc:	0003      	movs	r3, r0
 80051de:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80051e0:	68bb      	ldr	r3, [r7, #8]
 80051e2:	785b      	ldrb	r3, [r3, #1]
 80051e4:	0018      	movs	r0, r3
 80051e6:	f000 f9a7 	bl	8005538 <RTC_ByteToBcd2>
 80051ea:	0003      	movs	r3, r0
 80051ec:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80051ee:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 80051f0:	68bb      	ldr	r3, [r7, #8]
 80051f2:	789b      	ldrb	r3, [r3, #2]
 80051f4:	0018      	movs	r0, r3
 80051f6:	f000 f99f 	bl	8005538 <RTC_ByteToBcd2>
 80051fa:	0003      	movs	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80051fc:	0022      	movs	r2, r4
 80051fe:	431a      	orrs	r2, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8005200:	68bb      	ldr	r3, [r7, #8]
 8005202:	78db      	ldrb	r3, [r3, #3]
 8005204:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005206:	4313      	orrs	r3, r2
 8005208:	617b      	str	r3, [r7, #20]
 800520a:	e017      	b.n	800523c <HAL_RTC_SetTime+0xd4>
    }
    else
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	699b      	ldr	r3, [r3, #24]
 8005212:	2240      	movs	r2, #64	; 0x40
 8005214:	4013      	ands	r3, r2
 8005216:	d102      	bne.n	800521e <HAL_RTC_SetTime+0xb6>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8005218:	68bb      	ldr	r3, [r7, #8]
 800521a:	2200      	movs	r2, #0
 800521c:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800521e:	68bb      	ldr	r3, [r7, #8]
 8005220:	781b      	ldrb	r3, [r3, #0]
 8005222:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005224:	68bb      	ldr	r3, [r7, #8]
 8005226:	785b      	ldrb	r3, [r3, #1]
 8005228:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800522a:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800522c:	68ba      	ldr	r2, [r7, #8]
 800522e:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005230:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8005232:	68bb      	ldr	r3, [r7, #8]
 8005234:	78db      	ldrb	r3, [r3, #3]
 8005236:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005238:	4313      	orrs	r3, r2
 800523a:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	697a      	ldr	r2, [r7, #20]
 8005242:	491b      	ldr	r1, [pc, #108]	; (80052b0 <HAL_RTC_SetTime+0x148>)
 8005244:	400a      	ands	r2, r1
 8005246:	601a      	str	r2, [r3, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	699a      	ldr	r2, [r3, #24]
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	4918      	ldr	r1, [pc, #96]	; (80052b4 <HAL_RTC_SetTime+0x14c>)
 8005254:	400a      	ands	r2, r1
 8005256:	619a      	str	r2, [r3, #24]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	6999      	ldr	r1, [r3, #24]
 800525e:	68bb      	ldr	r3, [r7, #8]
 8005260:	68da      	ldr	r2, [r3, #12]
 8005262:	68bb      	ldr	r3, [r7, #8]
 8005264:	691b      	ldr	r3, [r3, #16]
 8005266:	431a      	orrs	r2, r3
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	430a      	orrs	r2, r1
 800526e:	619a      	str	r2, [r3, #24]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005270:	2313      	movs	r3, #19
 8005272:	18fc      	adds	r4, r7, r3
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	0018      	movs	r0, r3
 8005278:	f000 f91a 	bl	80054b0 <RTC_ExitInitMode>
 800527c:	0003      	movs	r3, r0
 800527e:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	22ff      	movs	r2, #255	; 0xff
 8005286:	625a      	str	r2, [r3, #36]	; 0x24
  
  if (status == HAL_OK)
 8005288:	2313      	movs	r3, #19
 800528a:	18fb      	adds	r3, r7, r3
 800528c:	781b      	ldrb	r3, [r3, #0]
 800528e:	2b00      	cmp	r3, #0
 8005290:	d103      	bne.n	800529a <HAL_RTC_SetTime+0x132>
  {
   hrtc->State = HAL_RTC_STATE_READY;
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	2229      	movs	r2, #41	; 0x29
 8005296:	2101      	movs	r1, #1
 8005298:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	2228      	movs	r2, #40	; 0x28
 800529e:	2100      	movs	r1, #0
 80052a0:	5499      	strb	r1, [r3, r2]

  return status;
 80052a2:	2313      	movs	r3, #19
 80052a4:	18fb      	adds	r3, r7, r3
 80052a6:	781b      	ldrb	r3, [r3, #0]
}
 80052a8:	0018      	movs	r0, r3
 80052aa:	46bd      	mov	sp, r7
 80052ac:	b006      	add	sp, #24
 80052ae:	bdb0      	pop	{r4, r5, r7, pc}
 80052b0:	007f7f7f 	.word	0x007f7f7f
 80052b4:	fffbffff 	.word	0xfffbffff

080052b8 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80052b8:	b5b0      	push	{r4, r5, r7, lr}
 80052ba:	b086      	sub	sp, #24
 80052bc:	af00      	add	r7, sp, #0
 80052be:	60f8      	str	r0, [r7, #12]
 80052c0:	60b9      	str	r1, [r7, #8]
 80052c2:	607a      	str	r2, [r7, #4]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	2228      	movs	r2, #40	; 0x28
 80052c8:	5c9b      	ldrb	r3, [r3, r2]
 80052ca:	2b01      	cmp	r3, #1
 80052cc:	d101      	bne.n	80052d2 <HAL_RTC_SetDate+0x1a>
 80052ce:	2302      	movs	r3, #2
 80052d0:	e07e      	b.n	80053d0 <HAL_RTC_SetDate+0x118>
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	2228      	movs	r2, #40	; 0x28
 80052d6:	2101      	movs	r1, #1
 80052d8:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	2229      	movs	r2, #41	; 0x29
 80052de:	2102      	movs	r1, #2
 80052e0:	5499      	strb	r1, [r3, r2]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d10e      	bne.n	8005306 <HAL_RTC_SetDate+0x4e>
 80052e8:	68bb      	ldr	r3, [r7, #8]
 80052ea:	785b      	ldrb	r3, [r3, #1]
 80052ec:	001a      	movs	r2, r3
 80052ee:	2310      	movs	r3, #16
 80052f0:	4013      	ands	r3, r2
 80052f2:	d008      	beq.n	8005306 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80052f4:	68bb      	ldr	r3, [r7, #8]
 80052f6:	785b      	ldrb	r3, [r3, #1]
 80052f8:	2210      	movs	r2, #16
 80052fa:	4393      	bics	r3, r2
 80052fc:	b2db      	uxtb	r3, r3
 80052fe:	330a      	adds	r3, #10
 8005300:	b2da      	uxtb	r2, r3
 8005302:	68bb      	ldr	r3, [r7, #8]
 8005304:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	2b00      	cmp	r3, #0
 800530a:	d11c      	bne.n	8005346 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800530c:	68bb      	ldr	r3, [r7, #8]
 800530e:	78db      	ldrb	r3, [r3, #3]
 8005310:	0018      	movs	r0, r3
 8005312:	f000 f911 	bl	8005538 <RTC_ByteToBcd2>
 8005316:	0003      	movs	r3, r0
 8005318:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800531a:	68bb      	ldr	r3, [r7, #8]
 800531c:	785b      	ldrb	r3, [r3, #1]
 800531e:	0018      	movs	r0, r3
 8005320:	f000 f90a 	bl	8005538 <RTC_ByteToBcd2>
 8005324:	0003      	movs	r3, r0
 8005326:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005328:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 800532a:	68bb      	ldr	r3, [r7, #8]
 800532c:	789b      	ldrb	r3, [r3, #2]
 800532e:	0018      	movs	r0, r3
 8005330:	f000 f902 	bl	8005538 <RTC_ByteToBcd2>
 8005334:	0003      	movs	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8005336:	0022      	movs	r2, r4
 8005338:	431a      	orrs	r2, r3
                 ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 800533a:	68bb      	ldr	r3, [r7, #8]
 800533c:	781b      	ldrb	r3, [r3, #0]
 800533e:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005340:	4313      	orrs	r3, r2
 8005342:	617b      	str	r3, [r7, #20]
 8005344:	e00e      	b.n	8005364 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8005346:	68bb      	ldr	r3, [r7, #8]
 8005348:	78db      	ldrb	r3, [r3, #3]
 800534a:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 800534c:	68bb      	ldr	r3, [r7, #8]
 800534e:	785b      	ldrb	r3, [r3, #1]
 8005350:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8005352:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos)| \
 8005354:	68ba      	ldr	r2, [r7, #8]
 8005356:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8005358:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800535a:	68bb      	ldr	r3, [r7, #8]
 800535c:	781b      	ldrb	r3, [r3, #0]
 800535e:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8005360:	4313      	orrs	r3, r2
 8005362:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	22ca      	movs	r2, #202	; 0xca
 800536a:	625a      	str	r2, [r3, #36]	; 0x24
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	2253      	movs	r2, #83	; 0x53
 8005372:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005374:	2513      	movs	r5, #19
 8005376:	197c      	adds	r4, r7, r5
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	0018      	movs	r0, r3
 800537c:	f000 f855 	bl	800542a <RTC_EnterInitMode>
 8005380:	0003      	movs	r3, r0
 8005382:	7023      	strb	r3, [r4, #0]
  if(status == HAL_OK)
 8005384:	0028      	movs	r0, r5
 8005386:	183b      	adds	r3, r7, r0
 8005388:	781b      	ldrb	r3, [r3, #0]
 800538a:	2b00      	cmp	r3, #0
 800538c:	d10c      	bne.n	80053a8 <HAL_RTC_SetDate+0xf0>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	697a      	ldr	r2, [r7, #20]
 8005394:	4910      	ldr	r1, [pc, #64]	; (80053d8 <HAL_RTC_SetDate+0x120>)
 8005396:	400a      	ands	r2, r1
 8005398:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800539a:	183c      	adds	r4, r7, r0
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	0018      	movs	r0, r3
 80053a0:	f000 f886 	bl	80054b0 <RTC_ExitInitMode>
 80053a4:	0003      	movs	r3, r0
 80053a6:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	22ff      	movs	r2, #255	; 0xff
 80053ae:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 80053b0:	2313      	movs	r3, #19
 80053b2:	18fb      	adds	r3, r7, r3
 80053b4:	781b      	ldrb	r3, [r3, #0]
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d103      	bne.n	80053c2 <HAL_RTC_SetDate+0x10a>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	2229      	movs	r2, #41	; 0x29
 80053be:	2101      	movs	r1, #1
 80053c0:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	2228      	movs	r2, #40	; 0x28
 80053c6:	2100      	movs	r1, #0
 80053c8:	5499      	strb	r1, [r3, r2]

  return status;
 80053ca:	2313      	movs	r3, #19
 80053cc:	18fb      	adds	r3, r7, r3
 80053ce:	781b      	ldrb	r3, [r3, #0]
}
 80053d0:	0018      	movs	r0, r3
 80053d2:	46bd      	mov	sp, r7
 80053d4:	b006      	add	sp, #24
 80053d6:	bdb0      	pop	{r4, r5, r7, pc}
 80053d8:	00ffff3f 	.word	0x00ffff3f

080053dc <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 80053dc:	b580      	push	{r7, lr}
 80053de:	b084      	sub	sp, #16
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	68da      	ldr	r2, [r3, #12]
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	21a0      	movs	r1, #160	; 0xa0
 80053f0:	438a      	bics	r2, r1
 80053f2:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 80053f4:	f7fe fa98 	bl	8003928 <HAL_GetTick>
 80053f8:	0003      	movs	r3, r0
 80053fa:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 80053fc:	e00a      	b.n	8005414 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80053fe:	f7fe fa93 	bl	8003928 <HAL_GetTick>
 8005402:	0002      	movs	r2, r0
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	1ad2      	subs	r2, r2, r3
 8005408:	23fa      	movs	r3, #250	; 0xfa
 800540a:	009b      	lsls	r3, r3, #2
 800540c:	429a      	cmp	r2, r3
 800540e:	d901      	bls.n	8005414 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8005410:	2303      	movs	r3, #3
 8005412:	e006      	b.n	8005422 <HAL_RTC_WaitForSynchro+0x46>
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	68db      	ldr	r3, [r3, #12]
 800541a:	2220      	movs	r2, #32
 800541c:	4013      	ands	r3, r2
 800541e:	d0ee      	beq.n	80053fe <HAL_RTC_WaitForSynchro+0x22>
    }
  }

  return HAL_OK;
 8005420:	2300      	movs	r3, #0
}
 8005422:	0018      	movs	r0, r3
 8005424:	46bd      	mov	sp, r7
 8005426:	b004      	add	sp, #16
 8005428:	bd80      	pop	{r7, pc}

0800542a <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 800542a:	b580      	push	{r7, lr}
 800542c:	b084      	sub	sp, #16
 800542e:	af00      	add	r7, sp, #0
 8005430:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;  
 8005432:	230f      	movs	r3, #15
 8005434:	18fb      	adds	r3, r7, r3
 8005436:	2200      	movs	r2, #0
 8005438:	701a      	strb	r2, [r3, #0]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	68db      	ldr	r3, [r3, #12]
 8005440:	2240      	movs	r2, #64	; 0x40
 8005442:	4013      	ands	r3, r2
 8005444:	d12c      	bne.n	80054a0 <RTC_EnterInitMode+0x76>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	68da      	ldr	r2, [r3, #12]
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	2180      	movs	r1, #128	; 0x80
 8005452:	430a      	orrs	r2, r1
 8005454:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8005456:	f7fe fa67 	bl	8003928 <HAL_GetTick>
 800545a:	0003      	movs	r3, r0
 800545c:	60bb      	str	r3, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800545e:	e014      	b.n	800548a <RTC_EnterInitMode+0x60>
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 8005460:	f7fe fa62 	bl	8003928 <HAL_GetTick>
 8005464:	0002      	movs	r2, r0
 8005466:	68bb      	ldr	r3, [r7, #8]
 8005468:	1ad2      	subs	r2, r2, r3
 800546a:	200f      	movs	r0, #15
 800546c:	183b      	adds	r3, r7, r0
 800546e:	1839      	adds	r1, r7, r0
 8005470:	7809      	ldrb	r1, [r1, #0]
 8005472:	7019      	strb	r1, [r3, #0]
 8005474:	23fa      	movs	r3, #250	; 0xfa
 8005476:	009b      	lsls	r3, r3, #2
 8005478:	429a      	cmp	r2, r3
 800547a:	d906      	bls.n	800548a <RTC_EnterInitMode+0x60>
      {
        status = HAL_TIMEOUT;
 800547c:	183b      	adds	r3, r7, r0
 800547e:	2203      	movs	r2, #3
 8005480:	701a      	strb	r2, [r3, #0]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	2229      	movs	r2, #41	; 0x29
 8005486:	2103      	movs	r1, #3
 8005488:	5499      	strb	r1, [r3, r2]
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	68db      	ldr	r3, [r3, #12]
 8005490:	2240      	movs	r2, #64	; 0x40
 8005492:	4013      	ands	r3, r2
 8005494:	d104      	bne.n	80054a0 <RTC_EnterInitMode+0x76>
 8005496:	230f      	movs	r3, #15
 8005498:	18fb      	adds	r3, r7, r3
 800549a:	781b      	ldrb	r3, [r3, #0]
 800549c:	2b03      	cmp	r3, #3
 800549e:	d1df      	bne.n	8005460 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 80054a0:	230f      	movs	r3, #15
 80054a2:	18fb      	adds	r3, r7, r3
 80054a4:	781b      	ldrb	r3, [r3, #0]
}
 80054a6:	0018      	movs	r0, r3
 80054a8:	46bd      	mov	sp, r7
 80054aa:	b004      	add	sp, #16
 80054ac:	bd80      	pop	{r7, pc}
	...

080054b0 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80054b0:	b590      	push	{r4, r7, lr}
 80054b2:	b085      	sub	sp, #20
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80054b8:	240f      	movs	r4, #15
 80054ba:	193b      	adds	r3, r7, r4
 80054bc:	2200      	movs	r2, #0
 80054be:	701a      	strb	r2, [r3, #0]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 80054c0:	4b1c      	ldr	r3, [pc, #112]	; (8005534 <RTC_ExitInitMode+0x84>)
 80054c2:	68da      	ldr	r2, [r3, #12]
 80054c4:	4b1b      	ldr	r3, [pc, #108]	; (8005534 <RTC_ExitInitMode+0x84>)
 80054c6:	2180      	movs	r1, #128	; 0x80
 80054c8:	438a      	bics	r2, r1
 80054ca:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 80054cc:	4b19      	ldr	r3, [pc, #100]	; (8005534 <RTC_ExitInitMode+0x84>)
 80054ce:	699b      	ldr	r3, [r3, #24]
 80054d0:	2220      	movs	r2, #32
 80054d2:	4013      	ands	r3, r2
 80054d4:	d10d      	bne.n	80054f2 <RTC_ExitInitMode+0x42>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	0018      	movs	r0, r3
 80054da:	f7ff ff7f 	bl	80053dc <HAL_RTC_WaitForSynchro>
 80054de:	1e03      	subs	r3, r0, #0
 80054e0:	d021      	beq.n	8005526 <RTC_ExitInitMode+0x76>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	2229      	movs	r2, #41	; 0x29
 80054e6:	2103      	movs	r1, #3
 80054e8:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 80054ea:	193b      	adds	r3, r7, r4
 80054ec:	2203      	movs	r2, #3
 80054ee:	701a      	strb	r2, [r3, #0]
 80054f0:	e019      	b.n	8005526 <RTC_ExitInitMode+0x76>
  }
  else /* WA 2.7.1 Calendar initialization may fail in case of consecutive INIT mode entry.
          Please look at STM32G0 Errata sheet on the internet for details. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80054f2:	4b10      	ldr	r3, [pc, #64]	; (8005534 <RTC_ExitInitMode+0x84>)
 80054f4:	699a      	ldr	r2, [r3, #24]
 80054f6:	4b0f      	ldr	r3, [pc, #60]	; (8005534 <RTC_ExitInitMode+0x84>)
 80054f8:	2120      	movs	r1, #32
 80054fa:	438a      	bics	r2, r1
 80054fc:	619a      	str	r2, [r3, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	0018      	movs	r0, r3
 8005502:	f7ff ff6b 	bl	80053dc <HAL_RTC_WaitForSynchro>
 8005506:	1e03      	subs	r3, r0, #0
 8005508:	d007      	beq.n	800551a <RTC_ExitInitMode+0x6a>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	2229      	movs	r2, #41	; 0x29
 800550e:	2103      	movs	r1, #3
 8005510:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 8005512:	230f      	movs	r3, #15
 8005514:	18fb      	adds	r3, r7, r3
 8005516:	2203      	movs	r2, #3
 8005518:	701a      	strb	r2, [r3, #0]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800551a:	4b06      	ldr	r3, [pc, #24]	; (8005534 <RTC_ExitInitMode+0x84>)
 800551c:	699a      	ldr	r2, [r3, #24]
 800551e:	4b05      	ldr	r3, [pc, #20]	; (8005534 <RTC_ExitInitMode+0x84>)
 8005520:	2120      	movs	r1, #32
 8005522:	430a      	orrs	r2, r1
 8005524:	619a      	str	r2, [r3, #24]
  }

  return status;
 8005526:	230f      	movs	r3, #15
 8005528:	18fb      	adds	r3, r7, r3
 800552a:	781b      	ldrb	r3, [r3, #0]
}
 800552c:	0018      	movs	r0, r3
 800552e:	46bd      	mov	sp, r7
 8005530:	b005      	add	sp, #20
 8005532:	bd90      	pop	{r4, r7, pc}
 8005534:	40002800 	.word	0x40002800

08005538 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8005538:	b580      	push	{r7, lr}
 800553a:	b084      	sub	sp, #16
 800553c:	af00      	add	r7, sp, #0
 800553e:	0002      	movs	r2, r0
 8005540:	1dfb      	adds	r3, r7, #7
 8005542:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 8005544:	2300      	movs	r3, #0
 8005546:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 8005548:	230b      	movs	r3, #11
 800554a:	18fb      	adds	r3, r7, r3
 800554c:	1dfa      	adds	r2, r7, #7
 800554e:	7812      	ldrb	r2, [r2, #0]
 8005550:	701a      	strb	r2, [r3, #0]

  while(Param >= 10U)
 8005552:	e008      	b.n	8005566 <RTC_ByteToBcd2+0x2e>
  {
    bcdhigh++;
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	3301      	adds	r3, #1
 8005558:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 800555a:	220b      	movs	r2, #11
 800555c:	18bb      	adds	r3, r7, r2
 800555e:	18ba      	adds	r2, r7, r2
 8005560:	7812      	ldrb	r2, [r2, #0]
 8005562:	3a0a      	subs	r2, #10
 8005564:	701a      	strb	r2, [r3, #0]
  while(Param >= 10U)
 8005566:	210b      	movs	r1, #11
 8005568:	187b      	adds	r3, r7, r1
 800556a:	781b      	ldrb	r3, [r3, #0]
 800556c:	2b09      	cmp	r3, #9
 800556e:	d8f1      	bhi.n	8005554 <RTC_ByteToBcd2+0x1c>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Param);
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	b2db      	uxtb	r3, r3
 8005574:	011b      	lsls	r3, r3, #4
 8005576:	b2da      	uxtb	r2, r3
 8005578:	187b      	adds	r3, r7, r1
 800557a:	781b      	ldrb	r3, [r3, #0]
 800557c:	4313      	orrs	r3, r2
 800557e:	b2db      	uxtb	r3, r3
}
 8005580:	0018      	movs	r0, r3
 8005582:	46bd      	mov	sp, r7
 8005584:	b004      	add	sp, #16
 8005586:	bd80      	pop	{r7, pc}

08005588 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005588:	b580      	push	{r7, lr}
 800558a:	b084      	sub	sp, #16
 800558c:	af00      	add	r7, sp, #0
 800558e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	2b00      	cmp	r3, #0
 8005594:	d101      	bne.n	800559a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005596:	2301      	movs	r3, #1
 8005598:	e0a8      	b.n	80056ec <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d109      	bne.n	80055b6 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	685a      	ldr	r2, [r3, #4]
 80055a6:	2382      	movs	r3, #130	; 0x82
 80055a8:	005b      	lsls	r3, r3, #1
 80055aa:	429a      	cmp	r2, r3
 80055ac:	d009      	beq.n	80055c2 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	2200      	movs	r2, #0
 80055b2:	61da      	str	r2, [r3, #28]
 80055b4:	e005      	b.n	80055c2 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	2200      	movs	r2, #0
 80055ba:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	2200      	movs	r2, #0
 80055c0:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	2200      	movs	r2, #0
 80055c6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	225d      	movs	r2, #93	; 0x5d
 80055cc:	5c9b      	ldrb	r3, [r3, r2]
 80055ce:	b2db      	uxtb	r3, r3
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d107      	bne.n	80055e4 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	225c      	movs	r2, #92	; 0x5c
 80055d8:	2100      	movs	r1, #0
 80055da:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	0018      	movs	r0, r3
 80055e0:	f7fd fe46 	bl	8003270 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	225d      	movs	r2, #93	; 0x5d
 80055e8:	2102      	movs	r1, #2
 80055ea:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	681a      	ldr	r2, [r3, #0]
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	2140      	movs	r1, #64	; 0x40
 80055f8:	438a      	bics	r2, r1
 80055fa:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	68da      	ldr	r2, [r3, #12]
 8005600:	23e0      	movs	r3, #224	; 0xe0
 8005602:	00db      	lsls	r3, r3, #3
 8005604:	429a      	cmp	r2, r3
 8005606:	d902      	bls.n	800560e <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005608:	2300      	movs	r3, #0
 800560a:	60fb      	str	r3, [r7, #12]
 800560c:	e002      	b.n	8005614 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800560e:	2380      	movs	r3, #128	; 0x80
 8005610:	015b      	lsls	r3, r3, #5
 8005612:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	68da      	ldr	r2, [r3, #12]
 8005618:	23f0      	movs	r3, #240	; 0xf0
 800561a:	011b      	lsls	r3, r3, #4
 800561c:	429a      	cmp	r2, r3
 800561e:	d008      	beq.n	8005632 <HAL_SPI_Init+0xaa>
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	68da      	ldr	r2, [r3, #12]
 8005624:	23e0      	movs	r3, #224	; 0xe0
 8005626:	00db      	lsls	r3, r3, #3
 8005628:	429a      	cmp	r2, r3
 800562a:	d002      	beq.n	8005632 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	2200      	movs	r2, #0
 8005630:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	685a      	ldr	r2, [r3, #4]
 8005636:	2382      	movs	r3, #130	; 0x82
 8005638:	005b      	lsls	r3, r3, #1
 800563a:	401a      	ands	r2, r3
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	6899      	ldr	r1, [r3, #8]
 8005640:	2384      	movs	r3, #132	; 0x84
 8005642:	021b      	lsls	r3, r3, #8
 8005644:	400b      	ands	r3, r1
 8005646:	431a      	orrs	r2, r3
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	691b      	ldr	r3, [r3, #16]
 800564c:	2102      	movs	r1, #2
 800564e:	400b      	ands	r3, r1
 8005650:	431a      	orrs	r2, r3
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	695b      	ldr	r3, [r3, #20]
 8005656:	2101      	movs	r1, #1
 8005658:	400b      	ands	r3, r1
 800565a:	431a      	orrs	r2, r3
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	6999      	ldr	r1, [r3, #24]
 8005660:	2380      	movs	r3, #128	; 0x80
 8005662:	009b      	lsls	r3, r3, #2
 8005664:	400b      	ands	r3, r1
 8005666:	431a      	orrs	r2, r3
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	69db      	ldr	r3, [r3, #28]
 800566c:	2138      	movs	r1, #56	; 0x38
 800566e:	400b      	ands	r3, r1
 8005670:	431a      	orrs	r2, r3
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	6a1b      	ldr	r3, [r3, #32]
 8005676:	2180      	movs	r1, #128	; 0x80
 8005678:	400b      	ands	r3, r1
 800567a:	431a      	orrs	r2, r3
 800567c:	0011      	movs	r1, r2
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005682:	2380      	movs	r3, #128	; 0x80
 8005684:	019b      	lsls	r3, r3, #6
 8005686:	401a      	ands	r2, r3
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	430a      	orrs	r2, r1
 800568e:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	699b      	ldr	r3, [r3, #24]
 8005694:	0c1b      	lsrs	r3, r3, #16
 8005696:	2204      	movs	r2, #4
 8005698:	401a      	ands	r2, r3
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800569e:	2110      	movs	r1, #16
 80056a0:	400b      	ands	r3, r1
 80056a2:	431a      	orrs	r2, r3
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056a8:	2108      	movs	r1, #8
 80056aa:	400b      	ands	r3, r1
 80056ac:	431a      	orrs	r2, r3
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	68d9      	ldr	r1, [r3, #12]
 80056b2:	23f0      	movs	r3, #240	; 0xf0
 80056b4:	011b      	lsls	r3, r3, #4
 80056b6:	400b      	ands	r3, r1
 80056b8:	431a      	orrs	r2, r3
 80056ba:	0011      	movs	r1, r2
 80056bc:	68fa      	ldr	r2, [r7, #12]
 80056be:	2380      	movs	r3, #128	; 0x80
 80056c0:	015b      	lsls	r3, r3, #5
 80056c2:	401a      	ands	r2, r3
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	430a      	orrs	r2, r1
 80056ca:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	69da      	ldr	r2, [r3, #28]
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	4907      	ldr	r1, [pc, #28]	; (80056f4 <HAL_SPI_Init+0x16c>)
 80056d8:	400a      	ands	r2, r1
 80056da:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	2200      	movs	r2, #0
 80056e0:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	225d      	movs	r2, #93	; 0x5d
 80056e6:	2101      	movs	r1, #1
 80056e8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80056ea:	2300      	movs	r3, #0
}
 80056ec:	0018      	movs	r0, r3
 80056ee:	46bd      	mov	sp, r7
 80056f0:	b004      	add	sp, #16
 80056f2:	bd80      	pop	{r7, pc}
 80056f4:	fffff7ff 	.word	0xfffff7ff

080056f8 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80056f8:	b580      	push	{r7, lr}
 80056fa:	b088      	sub	sp, #32
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	60f8      	str	r0, [r7, #12]
 8005700:	60b9      	str	r1, [r7, #8]
 8005702:	603b      	str	r3, [r7, #0]
 8005704:	1dbb      	adds	r3, r7, #6
 8005706:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005708:	231f      	movs	r3, #31
 800570a:	18fb      	adds	r3, r7, r3
 800570c:	2200      	movs	r2, #0
 800570e:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	225c      	movs	r2, #92	; 0x5c
 8005714:	5c9b      	ldrb	r3, [r3, r2]
 8005716:	2b01      	cmp	r3, #1
 8005718:	d101      	bne.n	800571e <HAL_SPI_Transmit+0x26>
 800571a:	2302      	movs	r3, #2
 800571c:	e140      	b.n	80059a0 <HAL_SPI_Transmit+0x2a8>
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	225c      	movs	r2, #92	; 0x5c
 8005722:	2101      	movs	r1, #1
 8005724:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005726:	f7fe f8ff 	bl	8003928 <HAL_GetTick>
 800572a:	0003      	movs	r3, r0
 800572c:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800572e:	2316      	movs	r3, #22
 8005730:	18fb      	adds	r3, r7, r3
 8005732:	1dba      	adds	r2, r7, #6
 8005734:	8812      	ldrh	r2, [r2, #0]
 8005736:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	225d      	movs	r2, #93	; 0x5d
 800573c:	5c9b      	ldrb	r3, [r3, r2]
 800573e:	b2db      	uxtb	r3, r3
 8005740:	2b01      	cmp	r3, #1
 8005742:	d004      	beq.n	800574e <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8005744:	231f      	movs	r3, #31
 8005746:	18fb      	adds	r3, r7, r3
 8005748:	2202      	movs	r2, #2
 800574a:	701a      	strb	r2, [r3, #0]
    goto error;
 800574c:	e11d      	b.n	800598a <HAL_SPI_Transmit+0x292>
  }

  if ((pData == NULL) || (Size == 0U))
 800574e:	68bb      	ldr	r3, [r7, #8]
 8005750:	2b00      	cmp	r3, #0
 8005752:	d003      	beq.n	800575c <HAL_SPI_Transmit+0x64>
 8005754:	1dbb      	adds	r3, r7, #6
 8005756:	881b      	ldrh	r3, [r3, #0]
 8005758:	2b00      	cmp	r3, #0
 800575a:	d104      	bne.n	8005766 <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 800575c:	231f      	movs	r3, #31
 800575e:	18fb      	adds	r3, r7, r3
 8005760:	2201      	movs	r2, #1
 8005762:	701a      	strb	r2, [r3, #0]
    goto error;
 8005764:	e111      	b.n	800598a <HAL_SPI_Transmit+0x292>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	225d      	movs	r2, #93	; 0x5d
 800576a:	2103      	movs	r1, #3
 800576c:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	2200      	movs	r2, #0
 8005772:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	68ba      	ldr	r2, [r7, #8]
 8005778:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	1dba      	adds	r2, r7, #6
 800577e:	8812      	ldrh	r2, [r2, #0]
 8005780:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	1dba      	adds	r2, r7, #6
 8005786:	8812      	ldrh	r2, [r2, #0]
 8005788:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	2200      	movs	r2, #0
 800578e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	2244      	movs	r2, #68	; 0x44
 8005794:	2100      	movs	r1, #0
 8005796:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	2246      	movs	r2, #70	; 0x46
 800579c:	2100      	movs	r1, #0
 800579e:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	2200      	movs	r2, #0
 80057a4:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	2200      	movs	r2, #0
 80057aa:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	689a      	ldr	r2, [r3, #8]
 80057b0:	2380      	movs	r3, #128	; 0x80
 80057b2:	021b      	lsls	r3, r3, #8
 80057b4:	429a      	cmp	r2, r3
 80057b6:	d110      	bne.n	80057da <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	681a      	ldr	r2, [r3, #0]
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	2140      	movs	r1, #64	; 0x40
 80057c4:	438a      	bics	r2, r1
 80057c6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	681a      	ldr	r2, [r3, #0]
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	2180      	movs	r1, #128	; 0x80
 80057d4:	01c9      	lsls	r1, r1, #7
 80057d6:	430a      	orrs	r2, r1
 80057d8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	2240      	movs	r2, #64	; 0x40
 80057e2:	4013      	ands	r3, r2
 80057e4:	2b40      	cmp	r3, #64	; 0x40
 80057e6:	d007      	beq.n	80057f8 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	681a      	ldr	r2, [r3, #0]
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	2140      	movs	r1, #64	; 0x40
 80057f4:	430a      	orrs	r2, r1
 80057f6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	68da      	ldr	r2, [r3, #12]
 80057fc:	23e0      	movs	r3, #224	; 0xe0
 80057fe:	00db      	lsls	r3, r3, #3
 8005800:	429a      	cmp	r2, r3
 8005802:	d94e      	bls.n	80058a2 <HAL_SPI_Transmit+0x1aa>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	685b      	ldr	r3, [r3, #4]
 8005808:	2b00      	cmp	r3, #0
 800580a:	d004      	beq.n	8005816 <HAL_SPI_Transmit+0x11e>
 800580c:	2316      	movs	r3, #22
 800580e:	18fb      	adds	r3, r7, r3
 8005810:	881b      	ldrh	r3, [r3, #0]
 8005812:	2b01      	cmp	r3, #1
 8005814:	d13f      	bne.n	8005896 <HAL_SPI_Transmit+0x19e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800581a:	881a      	ldrh	r2, [r3, #0]
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005826:	1c9a      	adds	r2, r3, #2
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005830:	b29b      	uxth	r3, r3
 8005832:	3b01      	subs	r3, #1
 8005834:	b29a      	uxth	r2, r3
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800583a:	e02c      	b.n	8005896 <HAL_SPI_Transmit+0x19e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	689b      	ldr	r3, [r3, #8]
 8005842:	2202      	movs	r2, #2
 8005844:	4013      	ands	r3, r2
 8005846:	2b02      	cmp	r3, #2
 8005848:	d112      	bne.n	8005870 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800584e:	881a      	ldrh	r2, [r3, #0]
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800585a:	1c9a      	adds	r2, r3, #2
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005864:	b29b      	uxth	r3, r3
 8005866:	3b01      	subs	r3, #1
 8005868:	b29a      	uxth	r2, r3
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800586e:	e012      	b.n	8005896 <HAL_SPI_Transmit+0x19e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005870:	f7fe f85a 	bl	8003928 <HAL_GetTick>
 8005874:	0002      	movs	r2, r0
 8005876:	69bb      	ldr	r3, [r7, #24]
 8005878:	1ad3      	subs	r3, r2, r3
 800587a:	683a      	ldr	r2, [r7, #0]
 800587c:	429a      	cmp	r2, r3
 800587e:	d802      	bhi.n	8005886 <HAL_SPI_Transmit+0x18e>
 8005880:	683b      	ldr	r3, [r7, #0]
 8005882:	3301      	adds	r3, #1
 8005884:	d102      	bne.n	800588c <HAL_SPI_Transmit+0x194>
 8005886:	683b      	ldr	r3, [r7, #0]
 8005888:	2b00      	cmp	r3, #0
 800588a:	d104      	bne.n	8005896 <HAL_SPI_Transmit+0x19e>
        {
          errorcode = HAL_TIMEOUT;
 800588c:	231f      	movs	r3, #31
 800588e:	18fb      	adds	r3, r7, r3
 8005890:	2203      	movs	r2, #3
 8005892:	701a      	strb	r2, [r3, #0]
          goto error;
 8005894:	e079      	b.n	800598a <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800589a:	b29b      	uxth	r3, r3
 800589c:	2b00      	cmp	r3, #0
 800589e:	d1cd      	bne.n	800583c <HAL_SPI_Transmit+0x144>
 80058a0:	e04f      	b.n	8005942 <HAL_SPI_Transmit+0x24a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	685b      	ldr	r3, [r3, #4]
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d004      	beq.n	80058b4 <HAL_SPI_Transmit+0x1bc>
 80058aa:	2316      	movs	r3, #22
 80058ac:	18fb      	adds	r3, r7, r3
 80058ae:	881b      	ldrh	r3, [r3, #0]
 80058b0:	2b01      	cmp	r3, #1
 80058b2:	d141      	bne.n	8005938 <HAL_SPI_Transmit+0x240>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	330c      	adds	r3, #12
 80058be:	7812      	ldrb	r2, [r2, #0]
 80058c0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058c6:	1c5a      	adds	r2, r3, #1
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80058d0:	b29b      	uxth	r3, r3
 80058d2:	3b01      	subs	r3, #1
 80058d4:	b29a      	uxth	r2, r3
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while (hspi->TxXferCount > 0U)
 80058da:	e02d      	b.n	8005938 <HAL_SPI_Transmit+0x240>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	689b      	ldr	r3, [r3, #8]
 80058e2:	2202      	movs	r2, #2
 80058e4:	4013      	ands	r3, r2
 80058e6:	2b02      	cmp	r3, #2
 80058e8:	d113      	bne.n	8005912 <HAL_SPI_Transmit+0x21a>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	330c      	adds	r3, #12
 80058f4:	7812      	ldrb	r2, [r2, #0]
 80058f6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058fc:	1c5a      	adds	r2, r3, #1
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005906:	b29b      	uxth	r3, r3
 8005908:	3b01      	subs	r3, #1
 800590a:	b29a      	uxth	r2, r3
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005910:	e012      	b.n	8005938 <HAL_SPI_Transmit+0x240>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005912:	f7fe f809 	bl	8003928 <HAL_GetTick>
 8005916:	0002      	movs	r2, r0
 8005918:	69bb      	ldr	r3, [r7, #24]
 800591a:	1ad3      	subs	r3, r2, r3
 800591c:	683a      	ldr	r2, [r7, #0]
 800591e:	429a      	cmp	r2, r3
 8005920:	d802      	bhi.n	8005928 <HAL_SPI_Transmit+0x230>
 8005922:	683b      	ldr	r3, [r7, #0]
 8005924:	3301      	adds	r3, #1
 8005926:	d102      	bne.n	800592e <HAL_SPI_Transmit+0x236>
 8005928:	683b      	ldr	r3, [r7, #0]
 800592a:	2b00      	cmp	r3, #0
 800592c:	d104      	bne.n	8005938 <HAL_SPI_Transmit+0x240>
        {
          errorcode = HAL_TIMEOUT;
 800592e:	231f      	movs	r3, #31
 8005930:	18fb      	adds	r3, r7, r3
 8005932:	2203      	movs	r2, #3
 8005934:	701a      	strb	r2, [r3, #0]
          goto error;
 8005936:	e028      	b.n	800598a <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800593c:	b29b      	uxth	r3, r3
 800593e:	2b00      	cmp	r3, #0
 8005940:	d1cc      	bne.n	80058dc <HAL_SPI_Transmit+0x1e4>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005942:	69ba      	ldr	r2, [r7, #24]
 8005944:	6839      	ldr	r1, [r7, #0]
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	0018      	movs	r0, r3
 800594a:	f000 fcd9 	bl	8006300 <SPI_EndRxTxTransaction>
 800594e:	1e03      	subs	r3, r0, #0
 8005950:	d002      	beq.n	8005958 <HAL_SPI_Transmit+0x260>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	2220      	movs	r2, #32
 8005956:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	689b      	ldr	r3, [r3, #8]
 800595c:	2b00      	cmp	r3, #0
 800595e:	d10a      	bne.n	8005976 <HAL_SPI_Transmit+0x27e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005960:	2300      	movs	r3, #0
 8005962:	613b      	str	r3, [r7, #16]
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	68db      	ldr	r3, [r3, #12]
 800596a:	613b      	str	r3, [r7, #16]
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	689b      	ldr	r3, [r3, #8]
 8005972:	613b      	str	r3, [r7, #16]
 8005974:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800597a:	2b00      	cmp	r3, #0
 800597c:	d004      	beq.n	8005988 <HAL_SPI_Transmit+0x290>
  {
    errorcode = HAL_ERROR;
 800597e:	231f      	movs	r3, #31
 8005980:	18fb      	adds	r3, r7, r3
 8005982:	2201      	movs	r2, #1
 8005984:	701a      	strb	r2, [r3, #0]
 8005986:	e000      	b.n	800598a <HAL_SPI_Transmit+0x292>
  }

error:
 8005988:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	225d      	movs	r2, #93	; 0x5d
 800598e:	2101      	movs	r1, #1
 8005990:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	225c      	movs	r2, #92	; 0x5c
 8005996:	2100      	movs	r1, #0
 8005998:	5499      	strb	r1, [r3, r2]
  return errorcode;
 800599a:	231f      	movs	r3, #31
 800599c:	18fb      	adds	r3, r7, r3
 800599e:	781b      	ldrb	r3, [r3, #0]
}
 80059a0:	0018      	movs	r0, r3
 80059a2:	46bd      	mov	sp, r7
 80059a4:	b008      	add	sp, #32
 80059a6:	bd80      	pop	{r7, pc}

080059a8 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80059a8:	b590      	push	{r4, r7, lr}
 80059aa:	b089      	sub	sp, #36	; 0x24
 80059ac:	af02      	add	r7, sp, #8
 80059ae:	60f8      	str	r0, [r7, #12]
 80059b0:	60b9      	str	r1, [r7, #8]
 80059b2:	603b      	str	r3, [r7, #0]
 80059b4:	1dbb      	adds	r3, r7, #6
 80059b6:	801a      	strh	r2, [r3, #0]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80059b8:	2317      	movs	r3, #23
 80059ba:	18fb      	adds	r3, r7, r3
 80059bc:	2200      	movs	r2, #0
 80059be:	701a      	strb	r2, [r3, #0]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	685a      	ldr	r2, [r3, #4]
 80059c4:	2382      	movs	r3, #130	; 0x82
 80059c6:	005b      	lsls	r3, r3, #1
 80059c8:	429a      	cmp	r2, r3
 80059ca:	d113      	bne.n	80059f4 <HAL_SPI_Receive+0x4c>
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	689b      	ldr	r3, [r3, #8]
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d10f      	bne.n	80059f4 <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	225d      	movs	r2, #93	; 0x5d
 80059d8:	2104      	movs	r1, #4
 80059da:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80059dc:	1dbb      	adds	r3, r7, #6
 80059de:	881c      	ldrh	r4, [r3, #0]
 80059e0:	68ba      	ldr	r2, [r7, #8]
 80059e2:	68b9      	ldr	r1, [r7, #8]
 80059e4:	68f8      	ldr	r0, [r7, #12]
 80059e6:	683b      	ldr	r3, [r7, #0]
 80059e8:	9300      	str	r3, [sp, #0]
 80059ea:	0023      	movs	r3, r4
 80059ec:	f000 f928 	bl	8005c40 <HAL_SPI_TransmitReceive>
 80059f0:	0003      	movs	r3, r0
 80059f2:	e11c      	b.n	8005c2e <HAL_SPI_Receive+0x286>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	225c      	movs	r2, #92	; 0x5c
 80059f8:	5c9b      	ldrb	r3, [r3, r2]
 80059fa:	2b01      	cmp	r3, #1
 80059fc:	d101      	bne.n	8005a02 <HAL_SPI_Receive+0x5a>
 80059fe:	2302      	movs	r3, #2
 8005a00:	e115      	b.n	8005c2e <HAL_SPI_Receive+0x286>
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	225c      	movs	r2, #92	; 0x5c
 8005a06:	2101      	movs	r1, #1
 8005a08:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005a0a:	f7fd ff8d 	bl	8003928 <HAL_GetTick>
 8005a0e:	0003      	movs	r3, r0
 8005a10:	613b      	str	r3, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	225d      	movs	r2, #93	; 0x5d
 8005a16:	5c9b      	ldrb	r3, [r3, r2]
 8005a18:	b2db      	uxtb	r3, r3
 8005a1a:	2b01      	cmp	r3, #1
 8005a1c:	d004      	beq.n	8005a28 <HAL_SPI_Receive+0x80>
  {
    errorcode = HAL_BUSY;
 8005a1e:	2317      	movs	r3, #23
 8005a20:	18fb      	adds	r3, r7, r3
 8005a22:	2202      	movs	r2, #2
 8005a24:	701a      	strb	r2, [r3, #0]
    goto error;
 8005a26:	e0f7      	b.n	8005c18 <HAL_SPI_Receive+0x270>
  }

  if ((pData == NULL) || (Size == 0U))
 8005a28:	68bb      	ldr	r3, [r7, #8]
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d003      	beq.n	8005a36 <HAL_SPI_Receive+0x8e>
 8005a2e:	1dbb      	adds	r3, r7, #6
 8005a30:	881b      	ldrh	r3, [r3, #0]
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d104      	bne.n	8005a40 <HAL_SPI_Receive+0x98>
  {
    errorcode = HAL_ERROR;
 8005a36:	2317      	movs	r3, #23
 8005a38:	18fb      	adds	r3, r7, r3
 8005a3a:	2201      	movs	r2, #1
 8005a3c:	701a      	strb	r2, [r3, #0]
    goto error;
 8005a3e:	e0eb      	b.n	8005c18 <HAL_SPI_Receive+0x270>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	225d      	movs	r2, #93	; 0x5d
 8005a44:	2104      	movs	r1, #4
 8005a46:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	2200      	movs	r2, #0
 8005a4c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	68ba      	ldr	r2, [r7, #8]
 8005a52:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	1dba      	adds	r2, r7, #6
 8005a58:	2144      	movs	r1, #68	; 0x44
 8005a5a:	8812      	ldrh	r2, [r2, #0]
 8005a5c:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	1dba      	adds	r2, r7, #6
 8005a62:	2146      	movs	r1, #70	; 0x46
 8005a64:	8812      	ldrh	r2, [r2, #0]
 8005a66:	525a      	strh	r2, [r3, r1]

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	2200      	movs	r2, #0
 8005a6c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	2200      	movs	r2, #0
 8005a72:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	2200      	movs	r2, #0
 8005a78:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	2200      	movs	r2, #0
 8005a7e:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	2200      	movs	r2, #0
 8005a84:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	68da      	ldr	r2, [r3, #12]
 8005a8a:	23e0      	movs	r3, #224	; 0xe0
 8005a8c:	00db      	lsls	r3, r3, #3
 8005a8e:	429a      	cmp	r2, r3
 8005a90:	d908      	bls.n	8005aa4 <HAL_SPI_Receive+0xfc>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	685a      	ldr	r2, [r3, #4]
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	4966      	ldr	r1, [pc, #408]	; (8005c38 <HAL_SPI_Receive+0x290>)
 8005a9e:	400a      	ands	r2, r1
 8005aa0:	605a      	str	r2, [r3, #4]
 8005aa2:	e008      	b.n	8005ab6 <HAL_SPI_Receive+0x10e>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	685a      	ldr	r2, [r3, #4]
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	2180      	movs	r1, #128	; 0x80
 8005ab0:	0149      	lsls	r1, r1, #5
 8005ab2:	430a      	orrs	r2, r1
 8005ab4:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	689a      	ldr	r2, [r3, #8]
 8005aba:	2380      	movs	r3, #128	; 0x80
 8005abc:	021b      	lsls	r3, r3, #8
 8005abe:	429a      	cmp	r2, r3
 8005ac0:	d10f      	bne.n	8005ae2 <HAL_SPI_Receive+0x13a>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	681a      	ldr	r2, [r3, #0]
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	2140      	movs	r1, #64	; 0x40
 8005ace:	438a      	bics	r2, r1
 8005ad0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	681a      	ldr	r2, [r3, #0]
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	4957      	ldr	r1, [pc, #348]	; (8005c3c <HAL_SPI_Receive+0x294>)
 8005ade:	400a      	ands	r2, r1
 8005ae0:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	2240      	movs	r2, #64	; 0x40
 8005aea:	4013      	ands	r3, r2
 8005aec:	2b40      	cmp	r3, #64	; 0x40
 8005aee:	d007      	beq.n	8005b00 <HAL_SPI_Receive+0x158>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	681a      	ldr	r2, [r3, #0]
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	2140      	movs	r1, #64	; 0x40
 8005afc:	430a      	orrs	r2, r1
 8005afe:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	68da      	ldr	r2, [r3, #12]
 8005b04:	23e0      	movs	r3, #224	; 0xe0
 8005b06:	00db      	lsls	r3, r3, #3
 8005b08:	429a      	cmp	r2, r3
 8005b0a:	d900      	bls.n	8005b0e <HAL_SPI_Receive+0x166>
 8005b0c:	e069      	b.n	8005be2 <HAL_SPI_Receive+0x23a>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005b0e:	e031      	b.n	8005b74 <HAL_SPI_Receive+0x1cc>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	689b      	ldr	r3, [r3, #8]
 8005b16:	2201      	movs	r2, #1
 8005b18:	4013      	ands	r3, r2
 8005b1a:	2b01      	cmp	r3, #1
 8005b1c:	d117      	bne.n	8005b4e <HAL_SPI_Receive+0x1a6>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	330c      	adds	r3, #12
 8005b24:	001a      	movs	r2, r3
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b2a:	7812      	ldrb	r2, [r2, #0]
 8005b2c:	b2d2      	uxtb	r2, r2
 8005b2e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b34:	1c5a      	adds	r2, r3, #1
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	2246      	movs	r2, #70	; 0x46
 8005b3e:	5a9b      	ldrh	r3, [r3, r2]
 8005b40:	b29b      	uxth	r3, r3
 8005b42:	3b01      	subs	r3, #1
 8005b44:	b299      	uxth	r1, r3
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	2246      	movs	r2, #70	; 0x46
 8005b4a:	5299      	strh	r1, [r3, r2]
 8005b4c:	e012      	b.n	8005b74 <HAL_SPI_Receive+0x1cc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005b4e:	f7fd feeb 	bl	8003928 <HAL_GetTick>
 8005b52:	0002      	movs	r2, r0
 8005b54:	693b      	ldr	r3, [r7, #16]
 8005b56:	1ad3      	subs	r3, r2, r3
 8005b58:	683a      	ldr	r2, [r7, #0]
 8005b5a:	429a      	cmp	r2, r3
 8005b5c:	d802      	bhi.n	8005b64 <HAL_SPI_Receive+0x1bc>
 8005b5e:	683b      	ldr	r3, [r7, #0]
 8005b60:	3301      	adds	r3, #1
 8005b62:	d102      	bne.n	8005b6a <HAL_SPI_Receive+0x1c2>
 8005b64:	683b      	ldr	r3, [r7, #0]
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d104      	bne.n	8005b74 <HAL_SPI_Receive+0x1cc>
        {
          errorcode = HAL_TIMEOUT;
 8005b6a:	2317      	movs	r3, #23
 8005b6c:	18fb      	adds	r3, r7, r3
 8005b6e:	2203      	movs	r2, #3
 8005b70:	701a      	strb	r2, [r3, #0]
          goto error;
 8005b72:	e051      	b.n	8005c18 <HAL_SPI_Receive+0x270>
    while (hspi->RxXferCount > 0U)
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	2246      	movs	r2, #70	; 0x46
 8005b78:	5a9b      	ldrh	r3, [r3, r2]
 8005b7a:	b29b      	uxth	r3, r3
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d1c7      	bne.n	8005b10 <HAL_SPI_Receive+0x168>
 8005b80:	e035      	b.n	8005bee <HAL_SPI_Receive+0x246>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	689b      	ldr	r3, [r3, #8]
 8005b88:	2201      	movs	r2, #1
 8005b8a:	4013      	ands	r3, r2
 8005b8c:	2b01      	cmp	r3, #1
 8005b8e:	d115      	bne.n	8005bbc <HAL_SPI_Receive+0x214>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	68da      	ldr	r2, [r3, #12]
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b9a:	b292      	uxth	r2, r2
 8005b9c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ba2:	1c9a      	adds	r2, r3, #2
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	2246      	movs	r2, #70	; 0x46
 8005bac:	5a9b      	ldrh	r3, [r3, r2]
 8005bae:	b29b      	uxth	r3, r3
 8005bb0:	3b01      	subs	r3, #1
 8005bb2:	b299      	uxth	r1, r3
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	2246      	movs	r2, #70	; 0x46
 8005bb8:	5299      	strh	r1, [r3, r2]
 8005bba:	e012      	b.n	8005be2 <HAL_SPI_Receive+0x23a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005bbc:	f7fd feb4 	bl	8003928 <HAL_GetTick>
 8005bc0:	0002      	movs	r2, r0
 8005bc2:	693b      	ldr	r3, [r7, #16]
 8005bc4:	1ad3      	subs	r3, r2, r3
 8005bc6:	683a      	ldr	r2, [r7, #0]
 8005bc8:	429a      	cmp	r2, r3
 8005bca:	d802      	bhi.n	8005bd2 <HAL_SPI_Receive+0x22a>
 8005bcc:	683b      	ldr	r3, [r7, #0]
 8005bce:	3301      	adds	r3, #1
 8005bd0:	d102      	bne.n	8005bd8 <HAL_SPI_Receive+0x230>
 8005bd2:	683b      	ldr	r3, [r7, #0]
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d104      	bne.n	8005be2 <HAL_SPI_Receive+0x23a>
        {
          errorcode = HAL_TIMEOUT;
 8005bd8:	2317      	movs	r3, #23
 8005bda:	18fb      	adds	r3, r7, r3
 8005bdc:	2203      	movs	r2, #3
 8005bde:	701a      	strb	r2, [r3, #0]
          goto error;
 8005be0:	e01a      	b.n	8005c18 <HAL_SPI_Receive+0x270>
    while (hspi->RxXferCount > 0U)
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	2246      	movs	r2, #70	; 0x46
 8005be6:	5a9b      	ldrh	r3, [r3, r2]
 8005be8:	b29b      	uxth	r3, r3
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d1c9      	bne.n	8005b82 <HAL_SPI_Receive+0x1da>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005bee:	693a      	ldr	r2, [r7, #16]
 8005bf0:	6839      	ldr	r1, [r7, #0]
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	0018      	movs	r0, r3
 8005bf6:	f000 fb25 	bl	8006244 <SPI_EndRxTransaction>
 8005bfa:	1e03      	subs	r3, r0, #0
 8005bfc:	d002      	beq.n	8005c04 <HAL_SPI_Receive+0x25c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	2220      	movs	r2, #32
 8005c02:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d004      	beq.n	8005c16 <HAL_SPI_Receive+0x26e>
  {
    errorcode = HAL_ERROR;
 8005c0c:	2317      	movs	r3, #23
 8005c0e:	18fb      	adds	r3, r7, r3
 8005c10:	2201      	movs	r2, #1
 8005c12:	701a      	strb	r2, [r3, #0]
 8005c14:	e000      	b.n	8005c18 <HAL_SPI_Receive+0x270>
  }

error :
 8005c16:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	225d      	movs	r2, #93	; 0x5d
 8005c1c:	2101      	movs	r1, #1
 8005c1e:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	225c      	movs	r2, #92	; 0x5c
 8005c24:	2100      	movs	r1, #0
 8005c26:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8005c28:	2317      	movs	r3, #23
 8005c2a:	18fb      	adds	r3, r7, r3
 8005c2c:	781b      	ldrb	r3, [r3, #0]
}
 8005c2e:	0018      	movs	r0, r3
 8005c30:	46bd      	mov	sp, r7
 8005c32:	b007      	add	sp, #28
 8005c34:	bd90      	pop	{r4, r7, pc}
 8005c36:	46c0      	nop			; (mov r8, r8)
 8005c38:	ffffefff 	.word	0xffffefff
 8005c3c:	ffffbfff 	.word	0xffffbfff

08005c40 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005c40:	b580      	push	{r7, lr}
 8005c42:	b08a      	sub	sp, #40	; 0x28
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	60f8      	str	r0, [r7, #12]
 8005c48:	60b9      	str	r1, [r7, #8]
 8005c4a:	607a      	str	r2, [r7, #4]
 8005c4c:	001a      	movs	r2, r3
 8005c4e:	1cbb      	adds	r3, r7, #2
 8005c50:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005c52:	2301      	movs	r3, #1
 8005c54:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005c56:	2323      	movs	r3, #35	; 0x23
 8005c58:	18fb      	adds	r3, r7, r3
 8005c5a:	2200      	movs	r2, #0
 8005c5c:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	225c      	movs	r2, #92	; 0x5c
 8005c62:	5c9b      	ldrb	r3, [r3, r2]
 8005c64:	2b01      	cmp	r3, #1
 8005c66:	d101      	bne.n	8005c6c <HAL_SPI_TransmitReceive+0x2c>
 8005c68:	2302      	movs	r3, #2
 8005c6a:	e1b5      	b.n	8005fd8 <HAL_SPI_TransmitReceive+0x398>
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	225c      	movs	r2, #92	; 0x5c
 8005c70:	2101      	movs	r1, #1
 8005c72:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005c74:	f7fd fe58 	bl	8003928 <HAL_GetTick>
 8005c78:	0003      	movs	r3, r0
 8005c7a:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005c7c:	201b      	movs	r0, #27
 8005c7e:	183b      	adds	r3, r7, r0
 8005c80:	68fa      	ldr	r2, [r7, #12]
 8005c82:	215d      	movs	r1, #93	; 0x5d
 8005c84:	5c52      	ldrb	r2, [r2, r1]
 8005c86:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	685b      	ldr	r3, [r3, #4]
 8005c8c:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8005c8e:	2312      	movs	r3, #18
 8005c90:	18fb      	adds	r3, r7, r3
 8005c92:	1cba      	adds	r2, r7, #2
 8005c94:	8812      	ldrh	r2, [r2, #0]
 8005c96:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005c98:	183b      	adds	r3, r7, r0
 8005c9a:	781b      	ldrb	r3, [r3, #0]
 8005c9c:	2b01      	cmp	r3, #1
 8005c9e:	d011      	beq.n	8005cc4 <HAL_SPI_TransmitReceive+0x84>
 8005ca0:	697a      	ldr	r2, [r7, #20]
 8005ca2:	2382      	movs	r3, #130	; 0x82
 8005ca4:	005b      	lsls	r3, r3, #1
 8005ca6:	429a      	cmp	r2, r3
 8005ca8:	d107      	bne.n	8005cba <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	689b      	ldr	r3, [r3, #8]
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d103      	bne.n	8005cba <HAL_SPI_TransmitReceive+0x7a>
 8005cb2:	183b      	adds	r3, r7, r0
 8005cb4:	781b      	ldrb	r3, [r3, #0]
 8005cb6:	2b04      	cmp	r3, #4
 8005cb8:	d004      	beq.n	8005cc4 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 8005cba:	2323      	movs	r3, #35	; 0x23
 8005cbc:	18fb      	adds	r3, r7, r3
 8005cbe:	2202      	movs	r2, #2
 8005cc0:	701a      	strb	r2, [r3, #0]
    goto error;
 8005cc2:	e17e      	b.n	8005fc2 <HAL_SPI_TransmitReceive+0x382>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005cc4:	68bb      	ldr	r3, [r7, #8]
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d006      	beq.n	8005cd8 <HAL_SPI_TransmitReceive+0x98>
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d003      	beq.n	8005cd8 <HAL_SPI_TransmitReceive+0x98>
 8005cd0:	1cbb      	adds	r3, r7, #2
 8005cd2:	881b      	ldrh	r3, [r3, #0]
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d104      	bne.n	8005ce2 <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 8005cd8:	2323      	movs	r3, #35	; 0x23
 8005cda:	18fb      	adds	r3, r7, r3
 8005cdc:	2201      	movs	r2, #1
 8005cde:	701a      	strb	r2, [r3, #0]
    goto error;
 8005ce0:	e16f      	b.n	8005fc2 <HAL_SPI_TransmitReceive+0x382>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	225d      	movs	r2, #93	; 0x5d
 8005ce6:	5c9b      	ldrb	r3, [r3, r2]
 8005ce8:	b2db      	uxtb	r3, r3
 8005cea:	2b04      	cmp	r3, #4
 8005cec:	d003      	beq.n	8005cf6 <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	225d      	movs	r2, #93	; 0x5d
 8005cf2:	2105      	movs	r1, #5
 8005cf4:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	2200      	movs	r2, #0
 8005cfa:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	687a      	ldr	r2, [r7, #4]
 8005d00:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	1cba      	adds	r2, r7, #2
 8005d06:	2146      	movs	r1, #70	; 0x46
 8005d08:	8812      	ldrh	r2, [r2, #0]
 8005d0a:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	1cba      	adds	r2, r7, #2
 8005d10:	2144      	movs	r1, #68	; 0x44
 8005d12:	8812      	ldrh	r2, [r2, #0]
 8005d14:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	68ba      	ldr	r2, [r7, #8]
 8005d1a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	1cba      	adds	r2, r7, #2
 8005d20:	8812      	ldrh	r2, [r2, #0]
 8005d22:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	1cba      	adds	r2, r7, #2
 8005d28:	8812      	ldrh	r2, [r2, #0]
 8005d2a:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	2200      	movs	r2, #0
 8005d30:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	2200      	movs	r2, #0
 8005d36:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	68da      	ldr	r2, [r3, #12]
 8005d3c:	23e0      	movs	r3, #224	; 0xe0
 8005d3e:	00db      	lsls	r3, r3, #3
 8005d40:	429a      	cmp	r2, r3
 8005d42:	d908      	bls.n	8005d56 <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	685a      	ldr	r2, [r3, #4]
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	49a4      	ldr	r1, [pc, #656]	; (8005fe0 <HAL_SPI_TransmitReceive+0x3a0>)
 8005d50:	400a      	ands	r2, r1
 8005d52:	605a      	str	r2, [r3, #4]
 8005d54:	e008      	b.n	8005d68 <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	685a      	ldr	r2, [r3, #4]
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	2180      	movs	r1, #128	; 0x80
 8005d62:	0149      	lsls	r1, r1, #5
 8005d64:	430a      	orrs	r2, r1
 8005d66:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	2240      	movs	r2, #64	; 0x40
 8005d70:	4013      	ands	r3, r2
 8005d72:	2b40      	cmp	r3, #64	; 0x40
 8005d74:	d007      	beq.n	8005d86 <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	681a      	ldr	r2, [r3, #0]
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	2140      	movs	r1, #64	; 0x40
 8005d82:	430a      	orrs	r2, r1
 8005d84:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	68da      	ldr	r2, [r3, #12]
 8005d8a:	23e0      	movs	r3, #224	; 0xe0
 8005d8c:	00db      	lsls	r3, r3, #3
 8005d8e:	429a      	cmp	r2, r3
 8005d90:	d800      	bhi.n	8005d94 <HAL_SPI_TransmitReceive+0x154>
 8005d92:	e07f      	b.n	8005e94 <HAL_SPI_TransmitReceive+0x254>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	685b      	ldr	r3, [r3, #4]
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d005      	beq.n	8005da8 <HAL_SPI_TransmitReceive+0x168>
 8005d9c:	2312      	movs	r3, #18
 8005d9e:	18fb      	adds	r3, r7, r3
 8005da0:	881b      	ldrh	r3, [r3, #0]
 8005da2:	2b01      	cmp	r3, #1
 8005da4:	d000      	beq.n	8005da8 <HAL_SPI_TransmitReceive+0x168>
 8005da6:	e069      	b.n	8005e7c <HAL_SPI_TransmitReceive+0x23c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dac:	881a      	ldrh	r2, [r3, #0]
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005db8:	1c9a      	adds	r2, r3, #2
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005dc2:	b29b      	uxth	r3, r3
 8005dc4:	3b01      	subs	r3, #1
 8005dc6:	b29a      	uxth	r2, r3
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005dcc:	e056      	b.n	8005e7c <HAL_SPI_TransmitReceive+0x23c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	689b      	ldr	r3, [r3, #8]
 8005dd4:	2202      	movs	r2, #2
 8005dd6:	4013      	ands	r3, r2
 8005dd8:	2b02      	cmp	r3, #2
 8005dda:	d11b      	bne.n	8005e14 <HAL_SPI_TransmitReceive+0x1d4>
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005de0:	b29b      	uxth	r3, r3
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d016      	beq.n	8005e14 <HAL_SPI_TransmitReceive+0x1d4>
 8005de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005de8:	2b01      	cmp	r3, #1
 8005dea:	d113      	bne.n	8005e14 <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005df0:	881a      	ldrh	r2, [r3, #0]
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dfc:	1c9a      	adds	r2, r3, #2
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005e06:	b29b      	uxth	r3, r3
 8005e08:	3b01      	subs	r3, #1
 8005e0a:	b29a      	uxth	r2, r3
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005e10:	2300      	movs	r3, #0
 8005e12:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	689b      	ldr	r3, [r3, #8]
 8005e1a:	2201      	movs	r2, #1
 8005e1c:	4013      	ands	r3, r2
 8005e1e:	2b01      	cmp	r3, #1
 8005e20:	d11c      	bne.n	8005e5c <HAL_SPI_TransmitReceive+0x21c>
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	2246      	movs	r2, #70	; 0x46
 8005e26:	5a9b      	ldrh	r3, [r3, r2]
 8005e28:	b29b      	uxth	r3, r3
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d016      	beq.n	8005e5c <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	68da      	ldr	r2, [r3, #12]
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e38:	b292      	uxth	r2, r2
 8005e3a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e40:	1c9a      	adds	r2, r3, #2
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	2246      	movs	r2, #70	; 0x46
 8005e4a:	5a9b      	ldrh	r3, [r3, r2]
 8005e4c:	b29b      	uxth	r3, r3
 8005e4e:	3b01      	subs	r3, #1
 8005e50:	b299      	uxth	r1, r3
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	2246      	movs	r2, #70	; 0x46
 8005e56:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005e58:	2301      	movs	r3, #1
 8005e5a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005e5c:	f7fd fd64 	bl	8003928 <HAL_GetTick>
 8005e60:	0002      	movs	r2, r0
 8005e62:	69fb      	ldr	r3, [r7, #28]
 8005e64:	1ad3      	subs	r3, r2, r3
 8005e66:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005e68:	429a      	cmp	r2, r3
 8005e6a:	d807      	bhi.n	8005e7c <HAL_SPI_TransmitReceive+0x23c>
 8005e6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e6e:	3301      	adds	r3, #1
 8005e70:	d004      	beq.n	8005e7c <HAL_SPI_TransmitReceive+0x23c>
      {
        errorcode = HAL_TIMEOUT;
 8005e72:	2323      	movs	r3, #35	; 0x23
 8005e74:	18fb      	adds	r3, r7, r3
 8005e76:	2203      	movs	r2, #3
 8005e78:	701a      	strb	r2, [r3, #0]
        goto error;
 8005e7a:	e0a2      	b.n	8005fc2 <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005e80:	b29b      	uxth	r3, r3
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d1a3      	bne.n	8005dce <HAL_SPI_TransmitReceive+0x18e>
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	2246      	movs	r2, #70	; 0x46
 8005e8a:	5a9b      	ldrh	r3, [r3, r2]
 8005e8c:	b29b      	uxth	r3, r3
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d19d      	bne.n	8005dce <HAL_SPI_TransmitReceive+0x18e>
 8005e92:	e085      	b.n	8005fa0 <HAL_SPI_TransmitReceive+0x360>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	685b      	ldr	r3, [r3, #4]
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d005      	beq.n	8005ea8 <HAL_SPI_TransmitReceive+0x268>
 8005e9c:	2312      	movs	r3, #18
 8005e9e:	18fb      	adds	r3, r7, r3
 8005ea0:	881b      	ldrh	r3, [r3, #0]
 8005ea2:	2b01      	cmp	r3, #1
 8005ea4:	d000      	beq.n	8005ea8 <HAL_SPI_TransmitReceive+0x268>
 8005ea6:	e070      	b.n	8005f8a <HAL_SPI_TransmitReceive+0x34a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	330c      	adds	r3, #12
 8005eb2:	7812      	ldrb	r2, [r2, #0]
 8005eb4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005eba:	1c5a      	adds	r2, r3, #1
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005ec4:	b29b      	uxth	r3, r3
 8005ec6:	3b01      	subs	r3, #1
 8005ec8:	b29a      	uxth	r2, r3
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005ece:	e05c      	b.n	8005f8a <HAL_SPI_TransmitReceive+0x34a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	689b      	ldr	r3, [r3, #8]
 8005ed6:	2202      	movs	r2, #2
 8005ed8:	4013      	ands	r3, r2
 8005eda:	2b02      	cmp	r3, #2
 8005edc:	d11c      	bne.n	8005f18 <HAL_SPI_TransmitReceive+0x2d8>
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005ee2:	b29b      	uxth	r3, r3
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d017      	beq.n	8005f18 <HAL_SPI_TransmitReceive+0x2d8>
 8005ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eea:	2b01      	cmp	r3, #1
 8005eec:	d114      	bne.n	8005f18 <HAL_SPI_TransmitReceive+0x2d8>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	330c      	adds	r3, #12
 8005ef8:	7812      	ldrb	r2, [r2, #0]
 8005efa:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f00:	1c5a      	adds	r2, r3, #1
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005f0a:	b29b      	uxth	r3, r3
 8005f0c:	3b01      	subs	r3, #1
 8005f0e:	b29a      	uxth	r2, r3
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005f14:	2300      	movs	r3, #0
 8005f16:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	689b      	ldr	r3, [r3, #8]
 8005f1e:	2201      	movs	r2, #1
 8005f20:	4013      	ands	r3, r2
 8005f22:	2b01      	cmp	r3, #1
 8005f24:	d11e      	bne.n	8005f64 <HAL_SPI_TransmitReceive+0x324>
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	2246      	movs	r2, #70	; 0x46
 8005f2a:	5a9b      	ldrh	r3, [r3, r2]
 8005f2c:	b29b      	uxth	r3, r3
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d018      	beq.n	8005f64 <HAL_SPI_TransmitReceive+0x324>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	330c      	adds	r3, #12
 8005f38:	001a      	movs	r2, r3
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f3e:	7812      	ldrb	r2, [r2, #0]
 8005f40:	b2d2      	uxtb	r2, r2
 8005f42:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f48:	1c5a      	adds	r2, r3, #1
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	2246      	movs	r2, #70	; 0x46
 8005f52:	5a9b      	ldrh	r3, [r3, r2]
 8005f54:	b29b      	uxth	r3, r3
 8005f56:	3b01      	subs	r3, #1
 8005f58:	b299      	uxth	r1, r3
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	2246      	movs	r2, #70	; 0x46
 8005f5e:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005f60:	2301      	movs	r3, #1
 8005f62:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005f64:	f7fd fce0 	bl	8003928 <HAL_GetTick>
 8005f68:	0002      	movs	r2, r0
 8005f6a:	69fb      	ldr	r3, [r7, #28]
 8005f6c:	1ad3      	subs	r3, r2, r3
 8005f6e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005f70:	429a      	cmp	r2, r3
 8005f72:	d802      	bhi.n	8005f7a <HAL_SPI_TransmitReceive+0x33a>
 8005f74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f76:	3301      	adds	r3, #1
 8005f78:	d102      	bne.n	8005f80 <HAL_SPI_TransmitReceive+0x340>
 8005f7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d104      	bne.n	8005f8a <HAL_SPI_TransmitReceive+0x34a>
      {
        errorcode = HAL_TIMEOUT;
 8005f80:	2323      	movs	r3, #35	; 0x23
 8005f82:	18fb      	adds	r3, r7, r3
 8005f84:	2203      	movs	r2, #3
 8005f86:	701a      	strb	r2, [r3, #0]
        goto error;
 8005f88:	e01b      	b.n	8005fc2 <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005f8e:	b29b      	uxth	r3, r3
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d19d      	bne.n	8005ed0 <HAL_SPI_TransmitReceive+0x290>
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	2246      	movs	r2, #70	; 0x46
 8005f98:	5a9b      	ldrh	r3, [r3, r2]
 8005f9a:	b29b      	uxth	r3, r3
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d197      	bne.n	8005ed0 <HAL_SPI_TransmitReceive+0x290>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005fa0:	69fa      	ldr	r2, [r7, #28]
 8005fa2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	0018      	movs	r0, r3
 8005fa8:	f000 f9aa 	bl	8006300 <SPI_EndRxTxTransaction>
 8005fac:	1e03      	subs	r3, r0, #0
 8005fae:	d007      	beq.n	8005fc0 <HAL_SPI_TransmitReceive+0x380>
  {
    errorcode = HAL_ERROR;
 8005fb0:	2323      	movs	r3, #35	; 0x23
 8005fb2:	18fb      	adds	r3, r7, r3
 8005fb4:	2201      	movs	r2, #1
 8005fb6:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	2220      	movs	r2, #32
 8005fbc:	661a      	str	r2, [r3, #96]	; 0x60
 8005fbe:	e000      	b.n	8005fc2 <HAL_SPI_TransmitReceive+0x382>
  }

error :
 8005fc0:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	225d      	movs	r2, #93	; 0x5d
 8005fc6:	2101      	movs	r1, #1
 8005fc8:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	225c      	movs	r2, #92	; 0x5c
 8005fce:	2100      	movs	r1, #0
 8005fd0:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8005fd2:	2323      	movs	r3, #35	; 0x23
 8005fd4:	18fb      	adds	r3, r7, r3
 8005fd6:	781b      	ldrb	r3, [r3, #0]
}
 8005fd8:	0018      	movs	r0, r3
 8005fda:	46bd      	mov	sp, r7
 8005fdc:	b00a      	add	sp, #40	; 0x28
 8005fde:	bd80      	pop	{r7, pc}
 8005fe0:	ffffefff 	.word	0xffffefff

08005fe4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005fe4:	b580      	push	{r7, lr}
 8005fe6:	b088      	sub	sp, #32
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	60f8      	str	r0, [r7, #12]
 8005fec:	60b9      	str	r1, [r7, #8]
 8005fee:	603b      	str	r3, [r7, #0]
 8005ff0:	1dfb      	adds	r3, r7, #7
 8005ff2:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005ff4:	f7fd fc98 	bl	8003928 <HAL_GetTick>
 8005ff8:	0002      	movs	r2, r0
 8005ffa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ffc:	1a9b      	subs	r3, r3, r2
 8005ffe:	683a      	ldr	r2, [r7, #0]
 8006000:	18d3      	adds	r3, r2, r3
 8006002:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006004:	f7fd fc90 	bl	8003928 <HAL_GetTick>
 8006008:	0003      	movs	r3, r0
 800600a:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800600c:	4b3a      	ldr	r3, [pc, #232]	; (80060f8 <SPI_WaitFlagStateUntilTimeout+0x114>)
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	015b      	lsls	r3, r3, #5
 8006012:	0d1b      	lsrs	r3, r3, #20
 8006014:	69fa      	ldr	r2, [r7, #28]
 8006016:	4353      	muls	r3, r2
 8006018:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800601a:	e058      	b.n	80060ce <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 800601c:	683b      	ldr	r3, [r7, #0]
 800601e:	3301      	adds	r3, #1
 8006020:	d055      	beq.n	80060ce <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006022:	f7fd fc81 	bl	8003928 <HAL_GetTick>
 8006026:	0002      	movs	r2, r0
 8006028:	69bb      	ldr	r3, [r7, #24]
 800602a:	1ad3      	subs	r3, r2, r3
 800602c:	69fa      	ldr	r2, [r7, #28]
 800602e:	429a      	cmp	r2, r3
 8006030:	d902      	bls.n	8006038 <SPI_WaitFlagStateUntilTimeout+0x54>
 8006032:	69fb      	ldr	r3, [r7, #28]
 8006034:	2b00      	cmp	r3, #0
 8006036:	d142      	bne.n	80060be <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	685a      	ldr	r2, [r3, #4]
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	21e0      	movs	r1, #224	; 0xe0
 8006044:	438a      	bics	r2, r1
 8006046:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	685a      	ldr	r2, [r3, #4]
 800604c:	2382      	movs	r3, #130	; 0x82
 800604e:	005b      	lsls	r3, r3, #1
 8006050:	429a      	cmp	r2, r3
 8006052:	d113      	bne.n	800607c <SPI_WaitFlagStateUntilTimeout+0x98>
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	689a      	ldr	r2, [r3, #8]
 8006058:	2380      	movs	r3, #128	; 0x80
 800605a:	021b      	lsls	r3, r3, #8
 800605c:	429a      	cmp	r2, r3
 800605e:	d005      	beq.n	800606c <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	689a      	ldr	r2, [r3, #8]
 8006064:	2380      	movs	r3, #128	; 0x80
 8006066:	00db      	lsls	r3, r3, #3
 8006068:	429a      	cmp	r2, r3
 800606a:	d107      	bne.n	800607c <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	681a      	ldr	r2, [r3, #0]
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	2140      	movs	r1, #64	; 0x40
 8006078:	438a      	bics	r2, r1
 800607a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006080:	2380      	movs	r3, #128	; 0x80
 8006082:	019b      	lsls	r3, r3, #6
 8006084:	429a      	cmp	r2, r3
 8006086:	d110      	bne.n	80060aa <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	681a      	ldr	r2, [r3, #0]
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	491a      	ldr	r1, [pc, #104]	; (80060fc <SPI_WaitFlagStateUntilTimeout+0x118>)
 8006094:	400a      	ands	r2, r1
 8006096:	601a      	str	r2, [r3, #0]
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	681a      	ldr	r2, [r3, #0]
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	2180      	movs	r1, #128	; 0x80
 80060a4:	0189      	lsls	r1, r1, #6
 80060a6:	430a      	orrs	r2, r1
 80060a8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	225d      	movs	r2, #93	; 0x5d
 80060ae:	2101      	movs	r1, #1
 80060b0:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	225c      	movs	r2, #92	; 0x5c
 80060b6:	2100      	movs	r1, #0
 80060b8:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80060ba:	2303      	movs	r3, #3
 80060bc:	e017      	b.n	80060ee <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80060be:	697b      	ldr	r3, [r7, #20]
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d101      	bne.n	80060c8 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 80060c4:	2300      	movs	r3, #0
 80060c6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80060c8:	697b      	ldr	r3, [r7, #20]
 80060ca:	3b01      	subs	r3, #1
 80060cc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	689b      	ldr	r3, [r3, #8]
 80060d4:	68ba      	ldr	r2, [r7, #8]
 80060d6:	4013      	ands	r3, r2
 80060d8:	68ba      	ldr	r2, [r7, #8]
 80060da:	1ad3      	subs	r3, r2, r3
 80060dc:	425a      	negs	r2, r3
 80060de:	4153      	adcs	r3, r2
 80060e0:	b2db      	uxtb	r3, r3
 80060e2:	001a      	movs	r2, r3
 80060e4:	1dfb      	adds	r3, r7, #7
 80060e6:	781b      	ldrb	r3, [r3, #0]
 80060e8:	429a      	cmp	r2, r3
 80060ea:	d197      	bne.n	800601c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80060ec:	2300      	movs	r3, #0
}
 80060ee:	0018      	movs	r0, r3
 80060f0:	46bd      	mov	sp, r7
 80060f2:	b008      	add	sp, #32
 80060f4:	bd80      	pop	{r7, pc}
 80060f6:	46c0      	nop			; (mov r8, r8)
 80060f8:	20000004 	.word	0x20000004
 80060fc:	ffffdfff 	.word	0xffffdfff

08006100 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006100:	b580      	push	{r7, lr}
 8006102:	b08a      	sub	sp, #40	; 0x28
 8006104:	af00      	add	r7, sp, #0
 8006106:	60f8      	str	r0, [r7, #12]
 8006108:	60b9      	str	r1, [r7, #8]
 800610a:	607a      	str	r2, [r7, #4]
 800610c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800610e:	2317      	movs	r3, #23
 8006110:	18fb      	adds	r3, r7, r3
 8006112:	2200      	movs	r2, #0
 8006114:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8006116:	f7fd fc07 	bl	8003928 <HAL_GetTick>
 800611a:	0002      	movs	r2, r0
 800611c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800611e:	1a9b      	subs	r3, r3, r2
 8006120:	683a      	ldr	r2, [r7, #0]
 8006122:	18d3      	adds	r3, r2, r3
 8006124:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8006126:	f7fd fbff 	bl	8003928 <HAL_GetTick>
 800612a:	0003      	movs	r3, r0
 800612c:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	330c      	adds	r3, #12
 8006134:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8006136:	4b41      	ldr	r3, [pc, #260]	; (800623c <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8006138:	681a      	ldr	r2, [r3, #0]
 800613a:	0013      	movs	r3, r2
 800613c:	009b      	lsls	r3, r3, #2
 800613e:	189b      	adds	r3, r3, r2
 8006140:	00da      	lsls	r2, r3, #3
 8006142:	1ad3      	subs	r3, r2, r3
 8006144:	0d1b      	lsrs	r3, r3, #20
 8006146:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006148:	4353      	muls	r3, r2
 800614a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800614c:	e068      	b.n	8006220 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800614e:	68ba      	ldr	r2, [r7, #8]
 8006150:	23c0      	movs	r3, #192	; 0xc0
 8006152:	00db      	lsls	r3, r3, #3
 8006154:	429a      	cmp	r2, r3
 8006156:	d10a      	bne.n	800616e <SPI_WaitFifoStateUntilTimeout+0x6e>
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	2b00      	cmp	r3, #0
 800615c:	d107      	bne.n	800616e <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800615e:	69fb      	ldr	r3, [r7, #28]
 8006160:	781b      	ldrb	r3, [r3, #0]
 8006162:	b2da      	uxtb	r2, r3
 8006164:	2117      	movs	r1, #23
 8006166:	187b      	adds	r3, r7, r1
 8006168:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800616a:	187b      	adds	r3, r7, r1
 800616c:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 800616e:	683b      	ldr	r3, [r7, #0]
 8006170:	3301      	adds	r3, #1
 8006172:	d055      	beq.n	8006220 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006174:	f7fd fbd8 	bl	8003928 <HAL_GetTick>
 8006178:	0002      	movs	r2, r0
 800617a:	6a3b      	ldr	r3, [r7, #32]
 800617c:	1ad3      	subs	r3, r2, r3
 800617e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006180:	429a      	cmp	r2, r3
 8006182:	d902      	bls.n	800618a <SPI_WaitFifoStateUntilTimeout+0x8a>
 8006184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006186:	2b00      	cmp	r3, #0
 8006188:	d142      	bne.n	8006210 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	685a      	ldr	r2, [r3, #4]
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	21e0      	movs	r1, #224	; 0xe0
 8006196:	438a      	bics	r2, r1
 8006198:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	685a      	ldr	r2, [r3, #4]
 800619e:	2382      	movs	r3, #130	; 0x82
 80061a0:	005b      	lsls	r3, r3, #1
 80061a2:	429a      	cmp	r2, r3
 80061a4:	d113      	bne.n	80061ce <SPI_WaitFifoStateUntilTimeout+0xce>
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	689a      	ldr	r2, [r3, #8]
 80061aa:	2380      	movs	r3, #128	; 0x80
 80061ac:	021b      	lsls	r3, r3, #8
 80061ae:	429a      	cmp	r2, r3
 80061b0:	d005      	beq.n	80061be <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	689a      	ldr	r2, [r3, #8]
 80061b6:	2380      	movs	r3, #128	; 0x80
 80061b8:	00db      	lsls	r3, r3, #3
 80061ba:	429a      	cmp	r2, r3
 80061bc:	d107      	bne.n	80061ce <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	681a      	ldr	r2, [r3, #0]
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	2140      	movs	r1, #64	; 0x40
 80061ca:	438a      	bics	r2, r1
 80061cc:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80061d2:	2380      	movs	r3, #128	; 0x80
 80061d4:	019b      	lsls	r3, r3, #6
 80061d6:	429a      	cmp	r2, r3
 80061d8:	d110      	bne.n	80061fc <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	681a      	ldr	r2, [r3, #0]
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	4916      	ldr	r1, [pc, #88]	; (8006240 <SPI_WaitFifoStateUntilTimeout+0x140>)
 80061e6:	400a      	ands	r2, r1
 80061e8:	601a      	str	r2, [r3, #0]
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	681a      	ldr	r2, [r3, #0]
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	2180      	movs	r1, #128	; 0x80
 80061f6:	0189      	lsls	r1, r1, #6
 80061f8:	430a      	orrs	r2, r1
 80061fa:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	225d      	movs	r2, #93	; 0x5d
 8006200:	2101      	movs	r1, #1
 8006202:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	225c      	movs	r2, #92	; 0x5c
 8006208:	2100      	movs	r1, #0
 800620a:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800620c:	2303      	movs	r3, #3
 800620e:	e010      	b.n	8006232 <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006210:	69bb      	ldr	r3, [r7, #24]
 8006212:	2b00      	cmp	r3, #0
 8006214:	d101      	bne.n	800621a <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 8006216:	2300      	movs	r3, #0
 8006218:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800621a:	69bb      	ldr	r3, [r7, #24]
 800621c:	3b01      	subs	r3, #1
 800621e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	689b      	ldr	r3, [r3, #8]
 8006226:	68ba      	ldr	r2, [r7, #8]
 8006228:	4013      	ands	r3, r2
 800622a:	687a      	ldr	r2, [r7, #4]
 800622c:	429a      	cmp	r2, r3
 800622e:	d18e      	bne.n	800614e <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 8006230:	2300      	movs	r3, #0
}
 8006232:	0018      	movs	r0, r3
 8006234:	46bd      	mov	sp, r7
 8006236:	b00a      	add	sp, #40	; 0x28
 8006238:	bd80      	pop	{r7, pc}
 800623a:	46c0      	nop			; (mov r8, r8)
 800623c:	20000004 	.word	0x20000004
 8006240:	ffffdfff 	.word	0xffffdfff

08006244 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006244:	b580      	push	{r7, lr}
 8006246:	b086      	sub	sp, #24
 8006248:	af02      	add	r7, sp, #8
 800624a:	60f8      	str	r0, [r7, #12]
 800624c:	60b9      	str	r1, [r7, #8]
 800624e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	685a      	ldr	r2, [r3, #4]
 8006254:	2382      	movs	r3, #130	; 0x82
 8006256:	005b      	lsls	r3, r3, #1
 8006258:	429a      	cmp	r2, r3
 800625a:	d113      	bne.n	8006284 <SPI_EndRxTransaction+0x40>
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	689a      	ldr	r2, [r3, #8]
 8006260:	2380      	movs	r3, #128	; 0x80
 8006262:	021b      	lsls	r3, r3, #8
 8006264:	429a      	cmp	r2, r3
 8006266:	d005      	beq.n	8006274 <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	689a      	ldr	r2, [r3, #8]
 800626c:	2380      	movs	r3, #128	; 0x80
 800626e:	00db      	lsls	r3, r3, #3
 8006270:	429a      	cmp	r2, r3
 8006272:	d107      	bne.n	8006284 <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	681a      	ldr	r2, [r3, #0]
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	2140      	movs	r1, #64	; 0x40
 8006280:	438a      	bics	r2, r1
 8006282:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006284:	68ba      	ldr	r2, [r7, #8]
 8006286:	68f8      	ldr	r0, [r7, #12]
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	9300      	str	r3, [sp, #0]
 800628c:	0013      	movs	r3, r2
 800628e:	2200      	movs	r2, #0
 8006290:	2180      	movs	r1, #128	; 0x80
 8006292:	f7ff fea7 	bl	8005fe4 <SPI_WaitFlagStateUntilTimeout>
 8006296:	1e03      	subs	r3, r0, #0
 8006298:	d007      	beq.n	80062aa <SPI_EndRxTransaction+0x66>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800629e:	2220      	movs	r2, #32
 80062a0:	431a      	orrs	r2, r3
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80062a6:	2303      	movs	r3, #3
 80062a8:	e026      	b.n	80062f8 <SPI_EndRxTransaction+0xb4>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	685a      	ldr	r2, [r3, #4]
 80062ae:	2382      	movs	r3, #130	; 0x82
 80062b0:	005b      	lsls	r3, r3, #1
 80062b2:	429a      	cmp	r2, r3
 80062b4:	d11f      	bne.n	80062f6 <SPI_EndRxTransaction+0xb2>
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	689a      	ldr	r2, [r3, #8]
 80062ba:	2380      	movs	r3, #128	; 0x80
 80062bc:	021b      	lsls	r3, r3, #8
 80062be:	429a      	cmp	r2, r3
 80062c0:	d005      	beq.n	80062ce <SPI_EndRxTransaction+0x8a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	689a      	ldr	r2, [r3, #8]
 80062c6:	2380      	movs	r3, #128	; 0x80
 80062c8:	00db      	lsls	r3, r3, #3
 80062ca:	429a      	cmp	r2, r3
 80062cc:	d113      	bne.n	80062f6 <SPI_EndRxTransaction+0xb2>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80062ce:	68ba      	ldr	r2, [r7, #8]
 80062d0:	23c0      	movs	r3, #192	; 0xc0
 80062d2:	00d9      	lsls	r1, r3, #3
 80062d4:	68f8      	ldr	r0, [r7, #12]
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	9300      	str	r3, [sp, #0]
 80062da:	0013      	movs	r3, r2
 80062dc:	2200      	movs	r2, #0
 80062de:	f7ff ff0f 	bl	8006100 <SPI_WaitFifoStateUntilTimeout>
 80062e2:	1e03      	subs	r3, r0, #0
 80062e4:	d007      	beq.n	80062f6 <SPI_EndRxTransaction+0xb2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80062ea:	2220      	movs	r2, #32
 80062ec:	431a      	orrs	r2, r3
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 80062f2:	2303      	movs	r3, #3
 80062f4:	e000      	b.n	80062f8 <SPI_EndRxTransaction+0xb4>
    }
  }
  return HAL_OK;
 80062f6:	2300      	movs	r3, #0
}
 80062f8:	0018      	movs	r0, r3
 80062fa:	46bd      	mov	sp, r7
 80062fc:	b004      	add	sp, #16
 80062fe:	bd80      	pop	{r7, pc}

08006300 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006300:	b580      	push	{r7, lr}
 8006302:	b086      	sub	sp, #24
 8006304:	af02      	add	r7, sp, #8
 8006306:	60f8      	str	r0, [r7, #12]
 8006308:	60b9      	str	r1, [r7, #8]
 800630a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800630c:	68ba      	ldr	r2, [r7, #8]
 800630e:	23c0      	movs	r3, #192	; 0xc0
 8006310:	0159      	lsls	r1, r3, #5
 8006312:	68f8      	ldr	r0, [r7, #12]
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	9300      	str	r3, [sp, #0]
 8006318:	0013      	movs	r3, r2
 800631a:	2200      	movs	r2, #0
 800631c:	f7ff fef0 	bl	8006100 <SPI_WaitFifoStateUntilTimeout>
 8006320:	1e03      	subs	r3, r0, #0
 8006322:	d007      	beq.n	8006334 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006328:	2220      	movs	r2, #32
 800632a:	431a      	orrs	r2, r3
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006330:	2303      	movs	r3, #3
 8006332:	e027      	b.n	8006384 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006334:	68ba      	ldr	r2, [r7, #8]
 8006336:	68f8      	ldr	r0, [r7, #12]
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	9300      	str	r3, [sp, #0]
 800633c:	0013      	movs	r3, r2
 800633e:	2200      	movs	r2, #0
 8006340:	2180      	movs	r1, #128	; 0x80
 8006342:	f7ff fe4f 	bl	8005fe4 <SPI_WaitFlagStateUntilTimeout>
 8006346:	1e03      	subs	r3, r0, #0
 8006348:	d007      	beq.n	800635a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800634e:	2220      	movs	r2, #32
 8006350:	431a      	orrs	r2, r3
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006356:	2303      	movs	r3, #3
 8006358:	e014      	b.n	8006384 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800635a:	68ba      	ldr	r2, [r7, #8]
 800635c:	23c0      	movs	r3, #192	; 0xc0
 800635e:	00d9      	lsls	r1, r3, #3
 8006360:	68f8      	ldr	r0, [r7, #12]
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	9300      	str	r3, [sp, #0]
 8006366:	0013      	movs	r3, r2
 8006368:	2200      	movs	r2, #0
 800636a:	f7ff fec9 	bl	8006100 <SPI_WaitFifoStateUntilTimeout>
 800636e:	1e03      	subs	r3, r0, #0
 8006370:	d007      	beq.n	8006382 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006376:	2220      	movs	r2, #32
 8006378:	431a      	orrs	r2, r3
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800637e:	2303      	movs	r3, #3
 8006380:	e000      	b.n	8006384 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8006382:	2300      	movs	r3, #0
}
 8006384:	0018      	movs	r0, r3
 8006386:	46bd      	mov	sp, r7
 8006388:	b004      	add	sp, #16
 800638a:	bd80      	pop	{r7, pc}

0800638c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800638c:	b580      	push	{r7, lr}
 800638e:	b082      	sub	sp, #8
 8006390:	af00      	add	r7, sp, #0
 8006392:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	2b00      	cmp	r3, #0
 8006398:	d101      	bne.n	800639e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800639a:	2301      	movs	r3, #1
 800639c:	e04a      	b.n	8006434 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	223d      	movs	r2, #61	; 0x3d
 80063a2:	5c9b      	ldrb	r3, [r3, r2]
 80063a4:	b2db      	uxtb	r3, r3
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d107      	bne.n	80063ba <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	223c      	movs	r2, #60	; 0x3c
 80063ae:	2100      	movs	r1, #0
 80063b0:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	0018      	movs	r0, r3
 80063b6:	f7fc ffc9 	bl	800334c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	223d      	movs	r2, #61	; 0x3d
 80063be:	2102      	movs	r1, #2
 80063c0:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681a      	ldr	r2, [r3, #0]
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	3304      	adds	r3, #4
 80063ca:	0019      	movs	r1, r3
 80063cc:	0010      	movs	r0, r2
 80063ce:	f000 fa17 	bl	8006800 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	2248      	movs	r2, #72	; 0x48
 80063d6:	2101      	movs	r1, #1
 80063d8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	223e      	movs	r2, #62	; 0x3e
 80063de:	2101      	movs	r1, #1
 80063e0:	5499      	strb	r1, [r3, r2]
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	223f      	movs	r2, #63	; 0x3f
 80063e6:	2101      	movs	r1, #1
 80063e8:	5499      	strb	r1, [r3, r2]
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	2240      	movs	r2, #64	; 0x40
 80063ee:	2101      	movs	r1, #1
 80063f0:	5499      	strb	r1, [r3, r2]
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	2241      	movs	r2, #65	; 0x41
 80063f6:	2101      	movs	r1, #1
 80063f8:	5499      	strb	r1, [r3, r2]
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	2242      	movs	r2, #66	; 0x42
 80063fe:	2101      	movs	r1, #1
 8006400:	5499      	strb	r1, [r3, r2]
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	2243      	movs	r2, #67	; 0x43
 8006406:	2101      	movs	r1, #1
 8006408:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	2244      	movs	r2, #68	; 0x44
 800640e:	2101      	movs	r1, #1
 8006410:	5499      	strb	r1, [r3, r2]
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	2245      	movs	r2, #69	; 0x45
 8006416:	2101      	movs	r1, #1
 8006418:	5499      	strb	r1, [r3, r2]
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	2246      	movs	r2, #70	; 0x46
 800641e:	2101      	movs	r1, #1
 8006420:	5499      	strb	r1, [r3, r2]
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	2247      	movs	r2, #71	; 0x47
 8006426:	2101      	movs	r1, #1
 8006428:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	223d      	movs	r2, #61	; 0x3d
 800642e:	2101      	movs	r1, #1
 8006430:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006432:	2300      	movs	r3, #0
}
 8006434:	0018      	movs	r0, r3
 8006436:	46bd      	mov	sp, r7
 8006438:	b002      	add	sp, #8
 800643a:	bd80      	pop	{r7, pc}

0800643c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800643c:	b580      	push	{r7, lr}
 800643e:	b084      	sub	sp, #16
 8006440:	af00      	add	r7, sp, #0
 8006442:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	223d      	movs	r2, #61	; 0x3d
 8006448:	5c9b      	ldrb	r3, [r3, r2]
 800644a:	b2db      	uxtb	r3, r3
 800644c:	2b01      	cmp	r3, #1
 800644e:	d001      	beq.n	8006454 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006450:	2301      	movs	r3, #1
 8006452:	e047      	b.n	80064e4 <HAL_TIM_Base_Start_IT+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	223d      	movs	r2, #61	; 0x3d
 8006458:	2102      	movs	r1, #2
 800645a:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	68da      	ldr	r2, [r3, #12]
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	2101      	movs	r1, #1
 8006468:	430a      	orrs	r2, r1
 800646a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	4a1e      	ldr	r2, [pc, #120]	; (80064ec <HAL_TIM_Base_Start_IT+0xb0>)
 8006472:	4293      	cmp	r3, r2
 8006474:	d014      	beq.n	80064a0 <HAL_TIM_Base_Start_IT+0x64>
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681a      	ldr	r2, [r3, #0]
 800647a:	2380      	movs	r3, #128	; 0x80
 800647c:	05db      	lsls	r3, r3, #23
 800647e:	429a      	cmp	r2, r3
 8006480:	d00e      	beq.n	80064a0 <HAL_TIM_Base_Start_IT+0x64>
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	4a1a      	ldr	r2, [pc, #104]	; (80064f0 <HAL_TIM_Base_Start_IT+0xb4>)
 8006488:	4293      	cmp	r3, r2
 800648a:	d009      	beq.n	80064a0 <HAL_TIM_Base_Start_IT+0x64>
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	4a18      	ldr	r2, [pc, #96]	; (80064f4 <HAL_TIM_Base_Start_IT+0xb8>)
 8006492:	4293      	cmp	r3, r2
 8006494:	d004      	beq.n	80064a0 <HAL_TIM_Base_Start_IT+0x64>
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	4a17      	ldr	r2, [pc, #92]	; (80064f8 <HAL_TIM_Base_Start_IT+0xbc>)
 800649c:	4293      	cmp	r3, r2
 800649e:	d116      	bne.n	80064ce <HAL_TIM_Base_Start_IT+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	689b      	ldr	r3, [r3, #8]
 80064a6:	4a15      	ldr	r2, [pc, #84]	; (80064fc <HAL_TIM_Base_Start_IT+0xc0>)
 80064a8:	4013      	ands	r3, r2
 80064aa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	2b06      	cmp	r3, #6
 80064b0:	d016      	beq.n	80064e0 <HAL_TIM_Base_Start_IT+0xa4>
 80064b2:	68fa      	ldr	r2, [r7, #12]
 80064b4:	2380      	movs	r3, #128	; 0x80
 80064b6:	025b      	lsls	r3, r3, #9
 80064b8:	429a      	cmp	r2, r3
 80064ba:	d011      	beq.n	80064e0 <HAL_TIM_Base_Start_IT+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	681a      	ldr	r2, [r3, #0]
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	2101      	movs	r1, #1
 80064c8:	430a      	orrs	r2, r1
 80064ca:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80064cc:	e008      	b.n	80064e0 <HAL_TIM_Base_Start_IT+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	681a      	ldr	r2, [r3, #0]
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	2101      	movs	r1, #1
 80064da:	430a      	orrs	r2, r1
 80064dc:	601a      	str	r2, [r3, #0]
 80064de:	e000      	b.n	80064e2 <HAL_TIM_Base_Start_IT+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80064e0:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 80064e2:	2300      	movs	r3, #0
}
 80064e4:	0018      	movs	r0, r3
 80064e6:	46bd      	mov	sp, r7
 80064e8:	b004      	add	sp, #16
 80064ea:	bd80      	pop	{r7, pc}
 80064ec:	40012c00 	.word	0x40012c00
 80064f0:	40000400 	.word	0x40000400
 80064f4:	40000800 	.word	0x40000800
 80064f8:	40014000 	.word	0x40014000
 80064fc:	00010007 	.word	0x00010007

08006500 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8006500:	b580      	push	{r7, lr}
 8006502:	b082      	sub	sp, #8
 8006504:	af00      	add	r7, sp, #0
 8006506:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	68da      	ldr	r2, [r3, #12]
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	2101      	movs	r1, #1
 8006514:	438a      	bics	r2, r1
 8006516:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	6a1b      	ldr	r3, [r3, #32]
 800651e:	4a0d      	ldr	r2, [pc, #52]	; (8006554 <HAL_TIM_Base_Stop_IT+0x54>)
 8006520:	4013      	ands	r3, r2
 8006522:	d10d      	bne.n	8006540 <HAL_TIM_Base_Stop_IT+0x40>
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	6a1b      	ldr	r3, [r3, #32]
 800652a:	4a0b      	ldr	r2, [pc, #44]	; (8006558 <HAL_TIM_Base_Stop_IT+0x58>)
 800652c:	4013      	ands	r3, r2
 800652e:	d107      	bne.n	8006540 <HAL_TIM_Base_Stop_IT+0x40>
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	681a      	ldr	r2, [r3, #0]
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	2101      	movs	r1, #1
 800653c:	438a      	bics	r2, r1
 800653e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	223d      	movs	r2, #61	; 0x3d
 8006544:	2101      	movs	r1, #1
 8006546:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8006548:	2300      	movs	r3, #0
}
 800654a:	0018      	movs	r0, r3
 800654c:	46bd      	mov	sp, r7
 800654e:	b002      	add	sp, #8
 8006550:	bd80      	pop	{r7, pc}
 8006552:	46c0      	nop			; (mov r8, r8)
 8006554:	00001111 	.word	0x00001111
 8006558:	00000444 	.word	0x00000444

0800655c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800655c:	b580      	push	{r7, lr}
 800655e:	b082      	sub	sp, #8
 8006560:	af00      	add	r7, sp, #0
 8006562:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	691b      	ldr	r3, [r3, #16]
 800656a:	2202      	movs	r2, #2
 800656c:	4013      	ands	r3, r2
 800656e:	2b02      	cmp	r3, #2
 8006570:	d124      	bne.n	80065bc <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	68db      	ldr	r3, [r3, #12]
 8006578:	2202      	movs	r2, #2
 800657a:	4013      	ands	r3, r2
 800657c:	2b02      	cmp	r3, #2
 800657e:	d11d      	bne.n	80065bc <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	2203      	movs	r2, #3
 8006586:	4252      	negs	r2, r2
 8006588:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	2201      	movs	r2, #1
 800658e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	699b      	ldr	r3, [r3, #24]
 8006596:	2203      	movs	r2, #3
 8006598:	4013      	ands	r3, r2
 800659a:	d004      	beq.n	80065a6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	0018      	movs	r0, r3
 80065a0:	f000 f916 	bl	80067d0 <HAL_TIM_IC_CaptureCallback>
 80065a4:	e007      	b.n	80065b6 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	0018      	movs	r0, r3
 80065aa:	f000 f909 	bl	80067c0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	0018      	movs	r0, r3
 80065b2:	f000 f915 	bl	80067e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	2200      	movs	r2, #0
 80065ba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	691b      	ldr	r3, [r3, #16]
 80065c2:	2204      	movs	r2, #4
 80065c4:	4013      	ands	r3, r2
 80065c6:	2b04      	cmp	r3, #4
 80065c8:	d125      	bne.n	8006616 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	68db      	ldr	r3, [r3, #12]
 80065d0:	2204      	movs	r2, #4
 80065d2:	4013      	ands	r3, r2
 80065d4:	2b04      	cmp	r3, #4
 80065d6:	d11e      	bne.n	8006616 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	2205      	movs	r2, #5
 80065de:	4252      	negs	r2, r2
 80065e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	2202      	movs	r2, #2
 80065e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	699a      	ldr	r2, [r3, #24]
 80065ee:	23c0      	movs	r3, #192	; 0xc0
 80065f0:	009b      	lsls	r3, r3, #2
 80065f2:	4013      	ands	r3, r2
 80065f4:	d004      	beq.n	8006600 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	0018      	movs	r0, r3
 80065fa:	f000 f8e9 	bl	80067d0 <HAL_TIM_IC_CaptureCallback>
 80065fe:	e007      	b.n	8006610 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	0018      	movs	r0, r3
 8006604:	f000 f8dc 	bl	80067c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	0018      	movs	r0, r3
 800660c:	f000 f8e8 	bl	80067e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	2200      	movs	r2, #0
 8006614:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	691b      	ldr	r3, [r3, #16]
 800661c:	2208      	movs	r2, #8
 800661e:	4013      	ands	r3, r2
 8006620:	2b08      	cmp	r3, #8
 8006622:	d124      	bne.n	800666e <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	68db      	ldr	r3, [r3, #12]
 800662a:	2208      	movs	r2, #8
 800662c:	4013      	ands	r3, r2
 800662e:	2b08      	cmp	r3, #8
 8006630:	d11d      	bne.n	800666e <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	2209      	movs	r2, #9
 8006638:	4252      	negs	r2, r2
 800663a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	2204      	movs	r2, #4
 8006640:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	69db      	ldr	r3, [r3, #28]
 8006648:	2203      	movs	r2, #3
 800664a:	4013      	ands	r3, r2
 800664c:	d004      	beq.n	8006658 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	0018      	movs	r0, r3
 8006652:	f000 f8bd 	bl	80067d0 <HAL_TIM_IC_CaptureCallback>
 8006656:	e007      	b.n	8006668 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	0018      	movs	r0, r3
 800665c:	f000 f8b0 	bl	80067c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	0018      	movs	r0, r3
 8006664:	f000 f8bc 	bl	80067e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	2200      	movs	r2, #0
 800666c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	691b      	ldr	r3, [r3, #16]
 8006674:	2210      	movs	r2, #16
 8006676:	4013      	ands	r3, r2
 8006678:	2b10      	cmp	r3, #16
 800667a:	d125      	bne.n	80066c8 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	68db      	ldr	r3, [r3, #12]
 8006682:	2210      	movs	r2, #16
 8006684:	4013      	ands	r3, r2
 8006686:	2b10      	cmp	r3, #16
 8006688:	d11e      	bne.n	80066c8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	2211      	movs	r2, #17
 8006690:	4252      	negs	r2, r2
 8006692:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	2208      	movs	r2, #8
 8006698:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	69da      	ldr	r2, [r3, #28]
 80066a0:	23c0      	movs	r3, #192	; 0xc0
 80066a2:	009b      	lsls	r3, r3, #2
 80066a4:	4013      	ands	r3, r2
 80066a6:	d004      	beq.n	80066b2 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	0018      	movs	r0, r3
 80066ac:	f000 f890 	bl	80067d0 <HAL_TIM_IC_CaptureCallback>
 80066b0:	e007      	b.n	80066c2 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	0018      	movs	r0, r3
 80066b6:	f000 f883 	bl	80067c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	0018      	movs	r0, r3
 80066be:	f000 f88f 	bl	80067e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	2200      	movs	r2, #0
 80066c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	691b      	ldr	r3, [r3, #16]
 80066ce:	2201      	movs	r2, #1
 80066d0:	4013      	ands	r3, r2
 80066d2:	2b01      	cmp	r3, #1
 80066d4:	d10f      	bne.n	80066f6 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	68db      	ldr	r3, [r3, #12]
 80066dc:	2201      	movs	r2, #1
 80066de:	4013      	ands	r3, r2
 80066e0:	2b01      	cmp	r3, #1
 80066e2:	d108      	bne.n	80066f6 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	2202      	movs	r2, #2
 80066ea:	4252      	negs	r2, r2
 80066ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	0018      	movs	r0, r3
 80066f2:	f7fc fc9d 	bl	8003030 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	691b      	ldr	r3, [r3, #16]
 80066fc:	2280      	movs	r2, #128	; 0x80
 80066fe:	4013      	ands	r3, r2
 8006700:	2b80      	cmp	r3, #128	; 0x80
 8006702:	d10f      	bne.n	8006724 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	68db      	ldr	r3, [r3, #12]
 800670a:	2280      	movs	r2, #128	; 0x80
 800670c:	4013      	ands	r3, r2
 800670e:	2b80      	cmp	r3, #128	; 0x80
 8006710:	d108      	bne.n	8006724 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	2281      	movs	r2, #129	; 0x81
 8006718:	4252      	negs	r2, r2
 800671a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	0018      	movs	r0, r3
 8006720:	f000 f976 	bl	8006a10 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	691a      	ldr	r2, [r3, #16]
 800672a:	2380      	movs	r3, #128	; 0x80
 800672c:	005b      	lsls	r3, r3, #1
 800672e:	401a      	ands	r2, r3
 8006730:	2380      	movs	r3, #128	; 0x80
 8006732:	005b      	lsls	r3, r3, #1
 8006734:	429a      	cmp	r2, r3
 8006736:	d10e      	bne.n	8006756 <HAL_TIM_IRQHandler+0x1fa>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	68db      	ldr	r3, [r3, #12]
 800673e:	2280      	movs	r2, #128	; 0x80
 8006740:	4013      	ands	r3, r2
 8006742:	2b80      	cmp	r3, #128	; 0x80
 8006744:	d107      	bne.n	8006756 <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	4a1c      	ldr	r2, [pc, #112]	; (80067bc <HAL_TIM_IRQHandler+0x260>)
 800674c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	0018      	movs	r0, r3
 8006752:	f000 f965 	bl	8006a20 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	691b      	ldr	r3, [r3, #16]
 800675c:	2240      	movs	r2, #64	; 0x40
 800675e:	4013      	ands	r3, r2
 8006760:	2b40      	cmp	r3, #64	; 0x40
 8006762:	d10f      	bne.n	8006784 <HAL_TIM_IRQHandler+0x228>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	68db      	ldr	r3, [r3, #12]
 800676a:	2240      	movs	r2, #64	; 0x40
 800676c:	4013      	ands	r3, r2
 800676e:	2b40      	cmp	r3, #64	; 0x40
 8006770:	d108      	bne.n	8006784 <HAL_TIM_IRQHandler+0x228>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	2241      	movs	r2, #65	; 0x41
 8006778:	4252      	negs	r2, r2
 800677a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	0018      	movs	r0, r3
 8006780:	f000 f836 	bl	80067f0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	691b      	ldr	r3, [r3, #16]
 800678a:	2220      	movs	r2, #32
 800678c:	4013      	ands	r3, r2
 800678e:	2b20      	cmp	r3, #32
 8006790:	d10f      	bne.n	80067b2 <HAL_TIM_IRQHandler+0x256>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	68db      	ldr	r3, [r3, #12]
 8006798:	2220      	movs	r2, #32
 800679a:	4013      	ands	r3, r2
 800679c:	2b20      	cmp	r3, #32
 800679e:	d108      	bne.n	80067b2 <HAL_TIM_IRQHandler+0x256>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	2221      	movs	r2, #33	; 0x21
 80067a6:	4252      	negs	r2, r2
 80067a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	0018      	movs	r0, r3
 80067ae:	f000 f927 	bl	8006a00 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80067b2:	46c0      	nop			; (mov r8, r8)
 80067b4:	46bd      	mov	sp, r7
 80067b6:	b002      	add	sp, #8
 80067b8:	bd80      	pop	{r7, pc}
 80067ba:	46c0      	nop			; (mov r8, r8)
 80067bc:	fffffeff 	.word	0xfffffeff

080067c0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80067c0:	b580      	push	{r7, lr}
 80067c2:	b082      	sub	sp, #8
 80067c4:	af00      	add	r7, sp, #0
 80067c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80067c8:	46c0      	nop			; (mov r8, r8)
 80067ca:	46bd      	mov	sp, r7
 80067cc:	b002      	add	sp, #8
 80067ce:	bd80      	pop	{r7, pc}

080067d0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80067d0:	b580      	push	{r7, lr}
 80067d2:	b082      	sub	sp, #8
 80067d4:	af00      	add	r7, sp, #0
 80067d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80067d8:	46c0      	nop			; (mov r8, r8)
 80067da:	46bd      	mov	sp, r7
 80067dc:	b002      	add	sp, #8
 80067de:	bd80      	pop	{r7, pc}

080067e0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80067e0:	b580      	push	{r7, lr}
 80067e2:	b082      	sub	sp, #8
 80067e4:	af00      	add	r7, sp, #0
 80067e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80067e8:	46c0      	nop			; (mov r8, r8)
 80067ea:	46bd      	mov	sp, r7
 80067ec:	b002      	add	sp, #8
 80067ee:	bd80      	pop	{r7, pc}

080067f0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80067f0:	b580      	push	{r7, lr}
 80067f2:	b082      	sub	sp, #8
 80067f4:	af00      	add	r7, sp, #0
 80067f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80067f8:	46c0      	nop			; (mov r8, r8)
 80067fa:	46bd      	mov	sp, r7
 80067fc:	b002      	add	sp, #8
 80067fe:	bd80      	pop	{r7, pc}

08006800 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006800:	b580      	push	{r7, lr}
 8006802:	b084      	sub	sp, #16
 8006804:	af00      	add	r7, sp, #0
 8006806:	6078      	str	r0, [r7, #4]
 8006808:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	4a38      	ldr	r2, [pc, #224]	; (80068f4 <TIM_Base_SetConfig+0xf4>)
 8006814:	4293      	cmp	r3, r2
 8006816:	d00c      	beq.n	8006832 <TIM_Base_SetConfig+0x32>
 8006818:	687a      	ldr	r2, [r7, #4]
 800681a:	2380      	movs	r3, #128	; 0x80
 800681c:	05db      	lsls	r3, r3, #23
 800681e:	429a      	cmp	r2, r3
 8006820:	d007      	beq.n	8006832 <TIM_Base_SetConfig+0x32>
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	4a34      	ldr	r2, [pc, #208]	; (80068f8 <TIM_Base_SetConfig+0xf8>)
 8006826:	4293      	cmp	r3, r2
 8006828:	d003      	beq.n	8006832 <TIM_Base_SetConfig+0x32>
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	4a33      	ldr	r2, [pc, #204]	; (80068fc <TIM_Base_SetConfig+0xfc>)
 800682e:	4293      	cmp	r3, r2
 8006830:	d108      	bne.n	8006844 <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	2270      	movs	r2, #112	; 0x70
 8006836:	4393      	bics	r3, r2
 8006838:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800683a:	683b      	ldr	r3, [r7, #0]
 800683c:	685b      	ldr	r3, [r3, #4]
 800683e:	68fa      	ldr	r2, [r7, #12]
 8006840:	4313      	orrs	r3, r2
 8006842:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	4a2b      	ldr	r2, [pc, #172]	; (80068f4 <TIM_Base_SetConfig+0xf4>)
 8006848:	4293      	cmp	r3, r2
 800684a:	d01c      	beq.n	8006886 <TIM_Base_SetConfig+0x86>
 800684c:	687a      	ldr	r2, [r7, #4]
 800684e:	2380      	movs	r3, #128	; 0x80
 8006850:	05db      	lsls	r3, r3, #23
 8006852:	429a      	cmp	r2, r3
 8006854:	d017      	beq.n	8006886 <TIM_Base_SetConfig+0x86>
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	4a27      	ldr	r2, [pc, #156]	; (80068f8 <TIM_Base_SetConfig+0xf8>)
 800685a:	4293      	cmp	r3, r2
 800685c:	d013      	beq.n	8006886 <TIM_Base_SetConfig+0x86>
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	4a26      	ldr	r2, [pc, #152]	; (80068fc <TIM_Base_SetConfig+0xfc>)
 8006862:	4293      	cmp	r3, r2
 8006864:	d00f      	beq.n	8006886 <TIM_Base_SetConfig+0x86>
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	4a25      	ldr	r2, [pc, #148]	; (8006900 <TIM_Base_SetConfig+0x100>)
 800686a:	4293      	cmp	r3, r2
 800686c:	d00b      	beq.n	8006886 <TIM_Base_SetConfig+0x86>
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	4a24      	ldr	r2, [pc, #144]	; (8006904 <TIM_Base_SetConfig+0x104>)
 8006872:	4293      	cmp	r3, r2
 8006874:	d007      	beq.n	8006886 <TIM_Base_SetConfig+0x86>
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	4a23      	ldr	r2, [pc, #140]	; (8006908 <TIM_Base_SetConfig+0x108>)
 800687a:	4293      	cmp	r3, r2
 800687c:	d003      	beq.n	8006886 <TIM_Base_SetConfig+0x86>
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	4a22      	ldr	r2, [pc, #136]	; (800690c <TIM_Base_SetConfig+0x10c>)
 8006882:	4293      	cmp	r3, r2
 8006884:	d108      	bne.n	8006898 <TIM_Base_SetConfig+0x98>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	4a21      	ldr	r2, [pc, #132]	; (8006910 <TIM_Base_SetConfig+0x110>)
 800688a:	4013      	ands	r3, r2
 800688c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800688e:	683b      	ldr	r3, [r7, #0]
 8006890:	68db      	ldr	r3, [r3, #12]
 8006892:	68fa      	ldr	r2, [r7, #12]
 8006894:	4313      	orrs	r3, r2
 8006896:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	2280      	movs	r2, #128	; 0x80
 800689c:	4393      	bics	r3, r2
 800689e:	001a      	movs	r2, r3
 80068a0:	683b      	ldr	r3, [r7, #0]
 80068a2:	695b      	ldr	r3, [r3, #20]
 80068a4:	4313      	orrs	r3, r2
 80068a6:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	68fa      	ldr	r2, [r7, #12]
 80068ac:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80068ae:	683b      	ldr	r3, [r7, #0]
 80068b0:	689a      	ldr	r2, [r3, #8]
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80068b6:	683b      	ldr	r3, [r7, #0]
 80068b8:	681a      	ldr	r2, [r3, #0]
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	4a0c      	ldr	r2, [pc, #48]	; (80068f4 <TIM_Base_SetConfig+0xf4>)
 80068c2:	4293      	cmp	r3, r2
 80068c4:	d00b      	beq.n	80068de <TIM_Base_SetConfig+0xde>
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	4a0e      	ldr	r2, [pc, #56]	; (8006904 <TIM_Base_SetConfig+0x104>)
 80068ca:	4293      	cmp	r3, r2
 80068cc:	d007      	beq.n	80068de <TIM_Base_SetConfig+0xde>
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	4a0d      	ldr	r2, [pc, #52]	; (8006908 <TIM_Base_SetConfig+0x108>)
 80068d2:	4293      	cmp	r3, r2
 80068d4:	d003      	beq.n	80068de <TIM_Base_SetConfig+0xde>
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	4a0c      	ldr	r2, [pc, #48]	; (800690c <TIM_Base_SetConfig+0x10c>)
 80068da:	4293      	cmp	r3, r2
 80068dc:	d103      	bne.n	80068e6 <TIM_Base_SetConfig+0xe6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80068de:	683b      	ldr	r3, [r7, #0]
 80068e0:	691a      	ldr	r2, [r3, #16]
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	2201      	movs	r2, #1
 80068ea:	615a      	str	r2, [r3, #20]
}
 80068ec:	46c0      	nop			; (mov r8, r8)
 80068ee:	46bd      	mov	sp, r7
 80068f0:	b004      	add	sp, #16
 80068f2:	bd80      	pop	{r7, pc}
 80068f4:	40012c00 	.word	0x40012c00
 80068f8:	40000400 	.word	0x40000400
 80068fc:	40000800 	.word	0x40000800
 8006900:	40002000 	.word	0x40002000
 8006904:	40014000 	.word	0x40014000
 8006908:	40014400 	.word	0x40014400
 800690c:	40014800 	.word	0x40014800
 8006910:	fffffcff 	.word	0xfffffcff

08006914 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006914:	b580      	push	{r7, lr}
 8006916:	b084      	sub	sp, #16
 8006918:	af00      	add	r7, sp, #0
 800691a:	6078      	str	r0, [r7, #4]
 800691c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	223c      	movs	r2, #60	; 0x3c
 8006922:	5c9b      	ldrb	r3, [r3, r2]
 8006924:	2b01      	cmp	r3, #1
 8006926:	d101      	bne.n	800692c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006928:	2302      	movs	r3, #2
 800692a:	e05a      	b.n	80069e2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	223c      	movs	r2, #60	; 0x3c
 8006930:	2101      	movs	r1, #1
 8006932:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	223d      	movs	r2, #61	; 0x3d
 8006938:	2102      	movs	r1, #2
 800693a:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	685b      	ldr	r3, [r3, #4]
 8006942:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	689b      	ldr	r3, [r3, #8]
 800694a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	4a26      	ldr	r2, [pc, #152]	; (80069ec <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8006952:	4293      	cmp	r3, r2
 8006954:	d108      	bne.n	8006968 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	4a25      	ldr	r2, [pc, #148]	; (80069f0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800695a:	4013      	ands	r3, r2
 800695c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800695e:	683b      	ldr	r3, [r7, #0]
 8006960:	685b      	ldr	r3, [r3, #4]
 8006962:	68fa      	ldr	r2, [r7, #12]
 8006964:	4313      	orrs	r3, r2
 8006966:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	2270      	movs	r2, #112	; 0x70
 800696c:	4393      	bics	r3, r2
 800696e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006970:	683b      	ldr	r3, [r7, #0]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	68fa      	ldr	r2, [r7, #12]
 8006976:	4313      	orrs	r3, r2
 8006978:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	68fa      	ldr	r2, [r7, #12]
 8006980:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	4a19      	ldr	r2, [pc, #100]	; (80069ec <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8006988:	4293      	cmp	r3, r2
 800698a:	d014      	beq.n	80069b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681a      	ldr	r2, [r3, #0]
 8006990:	2380      	movs	r3, #128	; 0x80
 8006992:	05db      	lsls	r3, r3, #23
 8006994:	429a      	cmp	r2, r3
 8006996:	d00e      	beq.n	80069b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	4a15      	ldr	r2, [pc, #84]	; (80069f4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800699e:	4293      	cmp	r3, r2
 80069a0:	d009      	beq.n	80069b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	4a14      	ldr	r2, [pc, #80]	; (80069f8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80069a8:	4293      	cmp	r3, r2
 80069aa:	d004      	beq.n	80069b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	4a12      	ldr	r2, [pc, #72]	; (80069fc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80069b2:	4293      	cmp	r3, r2
 80069b4:	d10c      	bne.n	80069d0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80069b6:	68bb      	ldr	r3, [r7, #8]
 80069b8:	2280      	movs	r2, #128	; 0x80
 80069ba:	4393      	bics	r3, r2
 80069bc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80069be:	683b      	ldr	r3, [r7, #0]
 80069c0:	689b      	ldr	r3, [r3, #8]
 80069c2:	68ba      	ldr	r2, [r7, #8]
 80069c4:	4313      	orrs	r3, r2
 80069c6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	68ba      	ldr	r2, [r7, #8]
 80069ce:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	223d      	movs	r2, #61	; 0x3d
 80069d4:	2101      	movs	r1, #1
 80069d6:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	223c      	movs	r2, #60	; 0x3c
 80069dc:	2100      	movs	r1, #0
 80069de:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80069e0:	2300      	movs	r3, #0
}
 80069e2:	0018      	movs	r0, r3
 80069e4:	46bd      	mov	sp, r7
 80069e6:	b004      	add	sp, #16
 80069e8:	bd80      	pop	{r7, pc}
 80069ea:	46c0      	nop			; (mov r8, r8)
 80069ec:	40012c00 	.word	0x40012c00
 80069f0:	ff0fffff 	.word	0xff0fffff
 80069f4:	40000400 	.word	0x40000400
 80069f8:	40000800 	.word	0x40000800
 80069fc:	40014000 	.word	0x40014000

08006a00 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006a00:	b580      	push	{r7, lr}
 8006a02:	b082      	sub	sp, #8
 8006a04:	af00      	add	r7, sp, #0
 8006a06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006a08:	46c0      	nop			; (mov r8, r8)
 8006a0a:	46bd      	mov	sp, r7
 8006a0c:	b002      	add	sp, #8
 8006a0e:	bd80      	pop	{r7, pc}

08006a10 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006a10:	b580      	push	{r7, lr}
 8006a12:	b082      	sub	sp, #8
 8006a14:	af00      	add	r7, sp, #0
 8006a16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006a18:	46c0      	nop			; (mov r8, r8)
 8006a1a:	46bd      	mov	sp, r7
 8006a1c:	b002      	add	sp, #8
 8006a1e:	bd80      	pop	{r7, pc}

08006a20 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006a20:	b580      	push	{r7, lr}
 8006a22:	b082      	sub	sp, #8
 8006a24:	af00      	add	r7, sp, #0
 8006a26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006a28:	46c0      	nop			; (mov r8, r8)
 8006a2a:	46bd      	mov	sp, r7
 8006a2c:	b002      	add	sp, #8
 8006a2e:	bd80      	pop	{r7, pc}

08006a30 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006a30:	b580      	push	{r7, lr}
 8006a32:	b082      	sub	sp, #8
 8006a34:	af00      	add	r7, sp, #0
 8006a36:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d101      	bne.n	8006a42 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006a3e:	2301      	movs	r3, #1
 8006a40:	e046      	b.n	8006ad0 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	2288      	movs	r2, #136	; 0x88
 8006a46:	589b      	ldr	r3, [r3, r2]
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d107      	bne.n	8006a5c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	2284      	movs	r2, #132	; 0x84
 8006a50:	2100      	movs	r1, #0
 8006a52:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	0018      	movs	r0, r3
 8006a58:	f7fc fc9e 	bl	8003398 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	2288      	movs	r2, #136	; 0x88
 8006a60:	2124      	movs	r1, #36	; 0x24
 8006a62:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	681a      	ldr	r2, [r3, #0]
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	2101      	movs	r1, #1
 8006a70:	438a      	bics	r2, r1
 8006a72:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	0018      	movs	r0, r3
 8006a78:	f000 f9ee 	bl	8006e58 <UART_SetConfig>
 8006a7c:	0003      	movs	r3, r0
 8006a7e:	2b01      	cmp	r3, #1
 8006a80:	d101      	bne.n	8006a86 <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 8006a82:	2301      	movs	r3, #1
 8006a84:	e024      	b.n	8006ad0 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d003      	beq.n	8006a96 <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	0018      	movs	r0, r3
 8006a92:	f000 fd37 	bl	8007504 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	685a      	ldr	r2, [r3, #4]
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	490d      	ldr	r1, [pc, #52]	; (8006ad8 <HAL_UART_Init+0xa8>)
 8006aa2:	400a      	ands	r2, r1
 8006aa4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	689a      	ldr	r2, [r3, #8]
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	212a      	movs	r1, #42	; 0x2a
 8006ab2:	438a      	bics	r2, r1
 8006ab4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	681a      	ldr	r2, [r3, #0]
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	2101      	movs	r1, #1
 8006ac2:	430a      	orrs	r2, r1
 8006ac4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	0018      	movs	r0, r3
 8006aca:	f000 fdcf 	bl	800766c <UART_CheckIdleState>
 8006ace:	0003      	movs	r3, r0
}
 8006ad0:	0018      	movs	r0, r3
 8006ad2:	46bd      	mov	sp, r7
 8006ad4:	b002      	add	sp, #8
 8006ad6:	bd80      	pop	{r7, pc}
 8006ad8:	ffffb7ff 	.word	0xffffb7ff

08006adc <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8006adc:	b580      	push	{r7, lr}
 8006ade:	b082      	sub	sp, #8
 8006ae0:	af00      	add	r7, sp, #0
 8006ae2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d101      	bne.n	8006aee <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 8006aea:	2301      	movs	r3, #1
 8006aec:	e032      	b.n	8006b54 <HAL_UART_DeInit+0x78>
  }

  /* Check the parameters */
  assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));

  huart->gState = HAL_UART_STATE_BUSY;
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	2288      	movs	r2, #136	; 0x88
 8006af2:	2124      	movs	r1, #36	; 0x24
 8006af4:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	681a      	ldr	r2, [r3, #0]
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	2101      	movs	r1, #1
 8006b02:	438a      	bics	r2, r1
 8006b04:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	2200      	movs	r2, #0
 8006b0c:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	2200      	movs	r2, #0
 8006b14:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	2200      	movs	r2, #0
 8006b1c:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	0018      	movs	r0, r3
 8006b22:	f7fc fd1b 	bl	800355c <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	2290      	movs	r2, #144	; 0x90
 8006b2a:	2100      	movs	r1, #0
 8006b2c:	5099      	str	r1, [r3, r2]
  huart->gState = HAL_UART_STATE_RESET;
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	2288      	movs	r2, #136	; 0x88
 8006b32:	2100      	movs	r1, #0
 8006b34:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_RESET;
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	228c      	movs	r2, #140	; 0x8c
 8006b3a:	2100      	movs	r1, #0
 8006b3c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	2200      	movs	r2, #0
 8006b42:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	2200      	movs	r2, #0
 8006b48:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	2284      	movs	r2, #132	; 0x84
 8006b4e:	2100      	movs	r1, #0
 8006b50:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006b52:	2300      	movs	r3, #0
}
 8006b54:	0018      	movs	r0, r3
 8006b56:	46bd      	mov	sp, r7
 8006b58:	b002      	add	sp, #8
 8006b5a:	bd80      	pop	{r7, pc}

08006b5c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006b5c:	b580      	push	{r7, lr}
 8006b5e:	b08a      	sub	sp, #40	; 0x28
 8006b60:	af02      	add	r7, sp, #8
 8006b62:	60f8      	str	r0, [r7, #12]
 8006b64:	60b9      	str	r1, [r7, #8]
 8006b66:	603b      	str	r3, [r7, #0]
 8006b68:	1dbb      	adds	r3, r7, #6
 8006b6a:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	2288      	movs	r2, #136	; 0x88
 8006b70:	589b      	ldr	r3, [r3, r2]
 8006b72:	2b20      	cmp	r3, #32
 8006b74:	d000      	beq.n	8006b78 <HAL_UART_Transmit+0x1c>
 8006b76:	e088      	b.n	8006c8a <HAL_UART_Transmit+0x12e>
  {
    if ((pData == NULL) || (Size == 0U))
 8006b78:	68bb      	ldr	r3, [r7, #8]
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d003      	beq.n	8006b86 <HAL_UART_Transmit+0x2a>
 8006b7e:	1dbb      	adds	r3, r7, #6
 8006b80:	881b      	ldrh	r3, [r3, #0]
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d101      	bne.n	8006b8a <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8006b86:	2301      	movs	r3, #1
 8006b88:	e080      	b.n	8006c8c <HAL_UART_Transmit+0x130>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	689a      	ldr	r2, [r3, #8]
 8006b8e:	2380      	movs	r3, #128	; 0x80
 8006b90:	015b      	lsls	r3, r3, #5
 8006b92:	429a      	cmp	r2, r3
 8006b94:	d109      	bne.n	8006baa <HAL_UART_Transmit+0x4e>
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	691b      	ldr	r3, [r3, #16]
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d105      	bne.n	8006baa <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8006b9e:	68bb      	ldr	r3, [r7, #8]
 8006ba0:	2201      	movs	r2, #1
 8006ba2:	4013      	ands	r3, r2
 8006ba4:	d001      	beq.n	8006baa <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8006ba6:	2301      	movs	r3, #1
 8006ba8:	e070      	b.n	8006c8c <HAL_UART_Transmit+0x130>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	2290      	movs	r2, #144	; 0x90
 8006bae:	2100      	movs	r1, #0
 8006bb0:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	2288      	movs	r2, #136	; 0x88
 8006bb6:	2121      	movs	r1, #33	; 0x21
 8006bb8:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006bba:	f7fc feb5 	bl	8003928 <HAL_GetTick>
 8006bbe:	0003      	movs	r3, r0
 8006bc0:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	1dba      	adds	r2, r7, #6
 8006bc6:	2154      	movs	r1, #84	; 0x54
 8006bc8:	8812      	ldrh	r2, [r2, #0]
 8006bca:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	1dba      	adds	r2, r7, #6
 8006bd0:	2156      	movs	r1, #86	; 0x56
 8006bd2:	8812      	ldrh	r2, [r2, #0]
 8006bd4:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	689a      	ldr	r2, [r3, #8]
 8006bda:	2380      	movs	r3, #128	; 0x80
 8006bdc:	015b      	lsls	r3, r3, #5
 8006bde:	429a      	cmp	r2, r3
 8006be0:	d108      	bne.n	8006bf4 <HAL_UART_Transmit+0x98>
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	691b      	ldr	r3, [r3, #16]
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d104      	bne.n	8006bf4 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 8006bea:	2300      	movs	r3, #0
 8006bec:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006bee:	68bb      	ldr	r3, [r7, #8]
 8006bf0:	61bb      	str	r3, [r7, #24]
 8006bf2:	e003      	b.n	8006bfc <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8006bf4:	68bb      	ldr	r3, [r7, #8]
 8006bf6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006bf8:	2300      	movs	r3, #0
 8006bfa:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006bfc:	e02c      	b.n	8006c58 <HAL_UART_Transmit+0xfc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006bfe:	697a      	ldr	r2, [r7, #20]
 8006c00:	68f8      	ldr	r0, [r7, #12]
 8006c02:	683b      	ldr	r3, [r7, #0]
 8006c04:	9300      	str	r3, [sp, #0]
 8006c06:	0013      	movs	r3, r2
 8006c08:	2200      	movs	r2, #0
 8006c0a:	2180      	movs	r1, #128	; 0x80
 8006c0c:	f000 fd7c 	bl	8007708 <UART_WaitOnFlagUntilTimeout>
 8006c10:	1e03      	subs	r3, r0, #0
 8006c12:	d001      	beq.n	8006c18 <HAL_UART_Transmit+0xbc>
      {
        return HAL_TIMEOUT;
 8006c14:	2303      	movs	r3, #3
 8006c16:	e039      	b.n	8006c8c <HAL_UART_Transmit+0x130>
      }
      if (pdata8bits == NULL)
 8006c18:	69fb      	ldr	r3, [r7, #28]
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d10b      	bne.n	8006c36 <HAL_UART_Transmit+0xda>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006c1e:	69bb      	ldr	r3, [r7, #24]
 8006c20:	881b      	ldrh	r3, [r3, #0]
 8006c22:	001a      	movs	r2, r3
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	05d2      	lsls	r2, r2, #23
 8006c2a:	0dd2      	lsrs	r2, r2, #23
 8006c2c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006c2e:	69bb      	ldr	r3, [r7, #24]
 8006c30:	3302      	adds	r3, #2
 8006c32:	61bb      	str	r3, [r7, #24]
 8006c34:	e007      	b.n	8006c46 <HAL_UART_Transmit+0xea>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006c36:	69fb      	ldr	r3, [r7, #28]
 8006c38:	781a      	ldrb	r2, [r3, #0]
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006c40:	69fb      	ldr	r3, [r7, #28]
 8006c42:	3301      	adds	r3, #1
 8006c44:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	2256      	movs	r2, #86	; 0x56
 8006c4a:	5a9b      	ldrh	r3, [r3, r2]
 8006c4c:	b29b      	uxth	r3, r3
 8006c4e:	3b01      	subs	r3, #1
 8006c50:	b299      	uxth	r1, r3
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	2256      	movs	r2, #86	; 0x56
 8006c56:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	2256      	movs	r2, #86	; 0x56
 8006c5c:	5a9b      	ldrh	r3, [r3, r2]
 8006c5e:	b29b      	uxth	r3, r3
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d1cc      	bne.n	8006bfe <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006c64:	697a      	ldr	r2, [r7, #20]
 8006c66:	68f8      	ldr	r0, [r7, #12]
 8006c68:	683b      	ldr	r3, [r7, #0]
 8006c6a:	9300      	str	r3, [sp, #0]
 8006c6c:	0013      	movs	r3, r2
 8006c6e:	2200      	movs	r2, #0
 8006c70:	2140      	movs	r1, #64	; 0x40
 8006c72:	f000 fd49 	bl	8007708 <UART_WaitOnFlagUntilTimeout>
 8006c76:	1e03      	subs	r3, r0, #0
 8006c78:	d001      	beq.n	8006c7e <HAL_UART_Transmit+0x122>
    {
      return HAL_TIMEOUT;
 8006c7a:	2303      	movs	r3, #3
 8006c7c:	e006      	b.n	8006c8c <HAL_UART_Transmit+0x130>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	2288      	movs	r2, #136	; 0x88
 8006c82:	2120      	movs	r1, #32
 8006c84:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8006c86:	2300      	movs	r3, #0
 8006c88:	e000      	b.n	8006c8c <HAL_UART_Transmit+0x130>
  }
  else
  {
    return HAL_BUSY;
 8006c8a:	2302      	movs	r3, #2
  }
}
 8006c8c:	0018      	movs	r0, r3
 8006c8e:	46bd      	mov	sp, r7
 8006c90:	b008      	add	sp, #32
 8006c92:	bd80      	pop	{r7, pc}

08006c94 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006c94:	b580      	push	{r7, lr}
 8006c96:	b08a      	sub	sp, #40	; 0x28
 8006c98:	af02      	add	r7, sp, #8
 8006c9a:	60f8      	str	r0, [r7, #12]
 8006c9c:	60b9      	str	r1, [r7, #8]
 8006c9e:	603b      	str	r3, [r7, #0]
 8006ca0:	1dbb      	adds	r3, r7, #6
 8006ca2:	801a      	strh	r2, [r3, #0]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	228c      	movs	r2, #140	; 0x8c
 8006ca8:	589b      	ldr	r3, [r3, r2]
 8006caa:	2b20      	cmp	r3, #32
 8006cac:	d000      	beq.n	8006cb0 <HAL_UART_Receive+0x1c>
 8006cae:	e0cc      	b.n	8006e4a <HAL_UART_Receive+0x1b6>
  {
    if ((pData == NULL) || (Size == 0U))
 8006cb0:	68bb      	ldr	r3, [r7, #8]
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d003      	beq.n	8006cbe <HAL_UART_Receive+0x2a>
 8006cb6:	1dbb      	adds	r3, r7, #6
 8006cb8:	881b      	ldrh	r3, [r3, #0]
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d101      	bne.n	8006cc2 <HAL_UART_Receive+0x2e>
    {
      return  HAL_ERROR;
 8006cbe:	2301      	movs	r3, #1
 8006cc0:	e0c4      	b.n	8006e4c <HAL_UART_Receive+0x1b8>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	689a      	ldr	r2, [r3, #8]
 8006cc6:	2380      	movs	r3, #128	; 0x80
 8006cc8:	015b      	lsls	r3, r3, #5
 8006cca:	429a      	cmp	r2, r3
 8006ccc:	d109      	bne.n	8006ce2 <HAL_UART_Receive+0x4e>
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	691b      	ldr	r3, [r3, #16]
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d105      	bne.n	8006ce2 <HAL_UART_Receive+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8006cd6:	68bb      	ldr	r3, [r7, #8]
 8006cd8:	2201      	movs	r2, #1
 8006cda:	4013      	ands	r3, r2
 8006cdc:	d001      	beq.n	8006ce2 <HAL_UART_Receive+0x4e>
      {
        return  HAL_ERROR;
 8006cde:	2301      	movs	r3, #1
 8006ce0:	e0b4      	b.n	8006e4c <HAL_UART_Receive+0x1b8>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	2290      	movs	r2, #144	; 0x90
 8006ce6:	2100      	movs	r1, #0
 8006ce8:	5099      	str	r1, [r3, r2]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	228c      	movs	r2, #140	; 0x8c
 8006cee:	2122      	movs	r1, #34	; 0x22
 8006cf0:	5099      	str	r1, [r3, r2]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	2200      	movs	r2, #0
 8006cf6:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006cf8:	f7fc fe16 	bl	8003928 <HAL_GetTick>
 8006cfc:	0003      	movs	r3, r0
 8006cfe:	617b      	str	r3, [r7, #20]

    huart->RxXferSize  = Size;
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	1dba      	adds	r2, r7, #6
 8006d04:	215c      	movs	r1, #92	; 0x5c
 8006d06:	8812      	ldrh	r2, [r2, #0]
 8006d08:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	1dba      	adds	r2, r7, #6
 8006d0e:	215e      	movs	r1, #94	; 0x5e
 8006d10:	8812      	ldrh	r2, [r2, #0]
 8006d12:	525a      	strh	r2, [r3, r1]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	689a      	ldr	r2, [r3, #8]
 8006d18:	2380      	movs	r3, #128	; 0x80
 8006d1a:	015b      	lsls	r3, r3, #5
 8006d1c:	429a      	cmp	r2, r3
 8006d1e:	d10d      	bne.n	8006d3c <HAL_UART_Receive+0xa8>
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	691b      	ldr	r3, [r3, #16]
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d104      	bne.n	8006d32 <HAL_UART_Receive+0x9e>
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	2260      	movs	r2, #96	; 0x60
 8006d2c:	4949      	ldr	r1, [pc, #292]	; (8006e54 <HAL_UART_Receive+0x1c0>)
 8006d2e:	5299      	strh	r1, [r3, r2]
 8006d30:	e02e      	b.n	8006d90 <HAL_UART_Receive+0xfc>
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	2260      	movs	r2, #96	; 0x60
 8006d36:	21ff      	movs	r1, #255	; 0xff
 8006d38:	5299      	strh	r1, [r3, r2]
 8006d3a:	e029      	b.n	8006d90 <HAL_UART_Receive+0xfc>
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	689b      	ldr	r3, [r3, #8]
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d10d      	bne.n	8006d60 <HAL_UART_Receive+0xcc>
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	691b      	ldr	r3, [r3, #16]
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d104      	bne.n	8006d56 <HAL_UART_Receive+0xc2>
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	2260      	movs	r2, #96	; 0x60
 8006d50:	21ff      	movs	r1, #255	; 0xff
 8006d52:	5299      	strh	r1, [r3, r2]
 8006d54:	e01c      	b.n	8006d90 <HAL_UART_Receive+0xfc>
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	2260      	movs	r2, #96	; 0x60
 8006d5a:	217f      	movs	r1, #127	; 0x7f
 8006d5c:	5299      	strh	r1, [r3, r2]
 8006d5e:	e017      	b.n	8006d90 <HAL_UART_Receive+0xfc>
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	689a      	ldr	r2, [r3, #8]
 8006d64:	2380      	movs	r3, #128	; 0x80
 8006d66:	055b      	lsls	r3, r3, #21
 8006d68:	429a      	cmp	r2, r3
 8006d6a:	d10d      	bne.n	8006d88 <HAL_UART_Receive+0xf4>
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	691b      	ldr	r3, [r3, #16]
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d104      	bne.n	8006d7e <HAL_UART_Receive+0xea>
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	2260      	movs	r2, #96	; 0x60
 8006d78:	217f      	movs	r1, #127	; 0x7f
 8006d7a:	5299      	strh	r1, [r3, r2]
 8006d7c:	e008      	b.n	8006d90 <HAL_UART_Receive+0xfc>
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	2260      	movs	r2, #96	; 0x60
 8006d82:	213f      	movs	r1, #63	; 0x3f
 8006d84:	5299      	strh	r1, [r3, r2]
 8006d86:	e003      	b.n	8006d90 <HAL_UART_Receive+0xfc>
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	2260      	movs	r2, #96	; 0x60
 8006d8c:	2100      	movs	r1, #0
 8006d8e:	5299      	strh	r1, [r3, r2]
    uhMask = huart->Mask;
 8006d90:	2312      	movs	r3, #18
 8006d92:	18fb      	adds	r3, r7, r3
 8006d94:	68fa      	ldr	r2, [r7, #12]
 8006d96:	2160      	movs	r1, #96	; 0x60
 8006d98:	5a52      	ldrh	r2, [r2, r1]
 8006d9a:	801a      	strh	r2, [r3, #0]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	689a      	ldr	r2, [r3, #8]
 8006da0:	2380      	movs	r3, #128	; 0x80
 8006da2:	015b      	lsls	r3, r3, #5
 8006da4:	429a      	cmp	r2, r3
 8006da6:	d108      	bne.n	8006dba <HAL_UART_Receive+0x126>
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	691b      	ldr	r3, [r3, #16]
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d104      	bne.n	8006dba <HAL_UART_Receive+0x126>
    {
      pdata8bits  = NULL;
 8006db0:	2300      	movs	r3, #0
 8006db2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006db4:	68bb      	ldr	r3, [r7, #8]
 8006db6:	61bb      	str	r3, [r7, #24]
 8006db8:	e003      	b.n	8006dc2 <HAL_UART_Receive+0x12e>
    }
    else
    {
      pdata8bits  = pData;
 8006dba:	68bb      	ldr	r3, [r7, #8]
 8006dbc:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006dbe:	2300      	movs	r3, #0
 8006dc0:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8006dc2:	e036      	b.n	8006e32 <HAL_UART_Receive+0x19e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8006dc4:	697a      	ldr	r2, [r7, #20]
 8006dc6:	68f8      	ldr	r0, [r7, #12]
 8006dc8:	683b      	ldr	r3, [r7, #0]
 8006dca:	9300      	str	r3, [sp, #0]
 8006dcc:	0013      	movs	r3, r2
 8006dce:	2200      	movs	r2, #0
 8006dd0:	2120      	movs	r1, #32
 8006dd2:	f000 fc99 	bl	8007708 <UART_WaitOnFlagUntilTimeout>
 8006dd6:	1e03      	subs	r3, r0, #0
 8006dd8:	d001      	beq.n	8006dde <HAL_UART_Receive+0x14a>
      {
        return HAL_TIMEOUT;
 8006dda:	2303      	movs	r3, #3
 8006ddc:	e036      	b.n	8006e4c <HAL_UART_Receive+0x1b8>
      }
      if (pdata8bits == NULL)
 8006dde:	69fb      	ldr	r3, [r7, #28]
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d10e      	bne.n	8006e02 <HAL_UART_Receive+0x16e>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dea:	b29b      	uxth	r3, r3
 8006dec:	2212      	movs	r2, #18
 8006dee:	18ba      	adds	r2, r7, r2
 8006df0:	8812      	ldrh	r2, [r2, #0]
 8006df2:	4013      	ands	r3, r2
 8006df4:	b29a      	uxth	r2, r3
 8006df6:	69bb      	ldr	r3, [r7, #24]
 8006df8:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8006dfa:	69bb      	ldr	r3, [r7, #24]
 8006dfc:	3302      	adds	r3, #2
 8006dfe:	61bb      	str	r3, [r7, #24]
 8006e00:	e00e      	b.n	8006e20 <HAL_UART_Receive+0x18c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e08:	b2db      	uxtb	r3, r3
 8006e0a:	2212      	movs	r2, #18
 8006e0c:	18ba      	adds	r2, r7, r2
 8006e0e:	8812      	ldrh	r2, [r2, #0]
 8006e10:	b2d2      	uxtb	r2, r2
 8006e12:	4013      	ands	r3, r2
 8006e14:	b2da      	uxtb	r2, r3
 8006e16:	69fb      	ldr	r3, [r7, #28]
 8006e18:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8006e1a:	69fb      	ldr	r3, [r7, #28]
 8006e1c:	3301      	adds	r3, #1
 8006e1e:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	225e      	movs	r2, #94	; 0x5e
 8006e24:	5a9b      	ldrh	r3, [r3, r2]
 8006e26:	b29b      	uxth	r3, r3
 8006e28:	3b01      	subs	r3, #1
 8006e2a:	b299      	uxth	r1, r3
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	225e      	movs	r2, #94	; 0x5e
 8006e30:	5299      	strh	r1, [r3, r2]
    while (huart->RxXferCount > 0U)
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	225e      	movs	r2, #94	; 0x5e
 8006e36:	5a9b      	ldrh	r3, [r3, r2]
 8006e38:	b29b      	uxth	r3, r3
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d1c2      	bne.n	8006dc4 <HAL_UART_Receive+0x130>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	228c      	movs	r2, #140	; 0x8c
 8006e42:	2120      	movs	r1, #32
 8006e44:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8006e46:	2300      	movs	r3, #0
 8006e48:	e000      	b.n	8006e4c <HAL_UART_Receive+0x1b8>
  }
  else
  {
    return HAL_BUSY;
 8006e4a:	2302      	movs	r3, #2
  }
}
 8006e4c:	0018      	movs	r0, r3
 8006e4e:	46bd      	mov	sp, r7
 8006e50:	b008      	add	sp, #32
 8006e52:	bd80      	pop	{r7, pc}
 8006e54:	000001ff 	.word	0x000001ff

08006e58 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006e58:	b5b0      	push	{r4, r5, r7, lr}
 8006e5a:	b090      	sub	sp, #64	; 0x40
 8006e5c:	af00      	add	r7, sp, #0
 8006e5e:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006e60:	231a      	movs	r3, #26
 8006e62:	2220      	movs	r2, #32
 8006e64:	189b      	adds	r3, r3, r2
 8006e66:	19db      	adds	r3, r3, r7
 8006e68:	2200      	movs	r2, #0
 8006e6a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e6e:	689a      	ldr	r2, [r3, #8]
 8006e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e72:	691b      	ldr	r3, [r3, #16]
 8006e74:	431a      	orrs	r2, r3
 8006e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e78:	695b      	ldr	r3, [r3, #20]
 8006e7a:	431a      	orrs	r2, r3
 8006e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e7e:	69db      	ldr	r3, [r3, #28]
 8006e80:	4313      	orrs	r3, r2
 8006e82:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	4ac1      	ldr	r2, [pc, #772]	; (8007190 <UART_SetConfig+0x338>)
 8006e8c:	4013      	ands	r3, r2
 8006e8e:	0019      	movs	r1, r3
 8006e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e92:	681a      	ldr	r2, [r3, #0]
 8006e94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e96:	430b      	orrs	r3, r1
 8006e98:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	685b      	ldr	r3, [r3, #4]
 8006ea0:	4abc      	ldr	r2, [pc, #752]	; (8007194 <UART_SetConfig+0x33c>)
 8006ea2:	4013      	ands	r3, r2
 8006ea4:	0018      	movs	r0, r3
 8006ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ea8:	68d9      	ldr	r1, [r3, #12]
 8006eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eac:	681a      	ldr	r2, [r3, #0]
 8006eae:	0003      	movs	r3, r0
 8006eb0:	430b      	orrs	r3, r1
 8006eb2:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eb6:	699b      	ldr	r3, [r3, #24]
 8006eb8:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	4ab6      	ldr	r2, [pc, #728]	; (8007198 <UART_SetConfig+0x340>)
 8006ec0:	4293      	cmp	r3, r2
 8006ec2:	d009      	beq.n	8006ed8 <UART_SetConfig+0x80>
 8006ec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	4ab4      	ldr	r2, [pc, #720]	; (800719c <UART_SetConfig+0x344>)
 8006eca:	4293      	cmp	r3, r2
 8006ecc:	d004      	beq.n	8006ed8 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ed0:	6a1b      	ldr	r3, [r3, #32]
 8006ed2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006ed4:	4313      	orrs	r3, r2
 8006ed6:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	689b      	ldr	r3, [r3, #8]
 8006ede:	4ab0      	ldr	r2, [pc, #704]	; (80071a0 <UART_SetConfig+0x348>)
 8006ee0:	4013      	ands	r3, r2
 8006ee2:	0019      	movs	r1, r3
 8006ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ee6:	681a      	ldr	r2, [r3, #0]
 8006ee8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006eea:	430b      	orrs	r3, r1
 8006eec:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ef4:	220f      	movs	r2, #15
 8006ef6:	4393      	bics	r3, r2
 8006ef8:	0018      	movs	r0, r3
 8006efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006efc:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8006efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f00:	681a      	ldr	r2, [r3, #0]
 8006f02:	0003      	movs	r3, r0
 8006f04:	430b      	orrs	r3, r1
 8006f06:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	4aa5      	ldr	r2, [pc, #660]	; (80071a4 <UART_SetConfig+0x34c>)
 8006f0e:	4293      	cmp	r3, r2
 8006f10:	d131      	bne.n	8006f76 <UART_SetConfig+0x11e>
 8006f12:	4ba5      	ldr	r3, [pc, #660]	; (80071a8 <UART_SetConfig+0x350>)
 8006f14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f16:	2203      	movs	r2, #3
 8006f18:	4013      	ands	r3, r2
 8006f1a:	2b03      	cmp	r3, #3
 8006f1c:	d01d      	beq.n	8006f5a <UART_SetConfig+0x102>
 8006f1e:	d823      	bhi.n	8006f68 <UART_SetConfig+0x110>
 8006f20:	2b02      	cmp	r3, #2
 8006f22:	d00c      	beq.n	8006f3e <UART_SetConfig+0xe6>
 8006f24:	d820      	bhi.n	8006f68 <UART_SetConfig+0x110>
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d002      	beq.n	8006f30 <UART_SetConfig+0xd8>
 8006f2a:	2b01      	cmp	r3, #1
 8006f2c:	d00e      	beq.n	8006f4c <UART_SetConfig+0xf4>
 8006f2e:	e01b      	b.n	8006f68 <UART_SetConfig+0x110>
 8006f30:	231b      	movs	r3, #27
 8006f32:	2220      	movs	r2, #32
 8006f34:	189b      	adds	r3, r3, r2
 8006f36:	19db      	adds	r3, r3, r7
 8006f38:	2200      	movs	r2, #0
 8006f3a:	701a      	strb	r2, [r3, #0]
 8006f3c:	e154      	b.n	80071e8 <UART_SetConfig+0x390>
 8006f3e:	231b      	movs	r3, #27
 8006f40:	2220      	movs	r2, #32
 8006f42:	189b      	adds	r3, r3, r2
 8006f44:	19db      	adds	r3, r3, r7
 8006f46:	2202      	movs	r2, #2
 8006f48:	701a      	strb	r2, [r3, #0]
 8006f4a:	e14d      	b.n	80071e8 <UART_SetConfig+0x390>
 8006f4c:	231b      	movs	r3, #27
 8006f4e:	2220      	movs	r2, #32
 8006f50:	189b      	adds	r3, r3, r2
 8006f52:	19db      	adds	r3, r3, r7
 8006f54:	2204      	movs	r2, #4
 8006f56:	701a      	strb	r2, [r3, #0]
 8006f58:	e146      	b.n	80071e8 <UART_SetConfig+0x390>
 8006f5a:	231b      	movs	r3, #27
 8006f5c:	2220      	movs	r2, #32
 8006f5e:	189b      	adds	r3, r3, r2
 8006f60:	19db      	adds	r3, r3, r7
 8006f62:	2208      	movs	r2, #8
 8006f64:	701a      	strb	r2, [r3, #0]
 8006f66:	e13f      	b.n	80071e8 <UART_SetConfig+0x390>
 8006f68:	231b      	movs	r3, #27
 8006f6a:	2220      	movs	r2, #32
 8006f6c:	189b      	adds	r3, r3, r2
 8006f6e:	19db      	adds	r3, r3, r7
 8006f70:	2210      	movs	r2, #16
 8006f72:	701a      	strb	r2, [r3, #0]
 8006f74:	e138      	b.n	80071e8 <UART_SetConfig+0x390>
 8006f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	4a8c      	ldr	r2, [pc, #560]	; (80071ac <UART_SetConfig+0x354>)
 8006f7c:	4293      	cmp	r3, r2
 8006f7e:	d131      	bne.n	8006fe4 <UART_SetConfig+0x18c>
 8006f80:	4b89      	ldr	r3, [pc, #548]	; (80071a8 <UART_SetConfig+0x350>)
 8006f82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f84:	220c      	movs	r2, #12
 8006f86:	4013      	ands	r3, r2
 8006f88:	2b0c      	cmp	r3, #12
 8006f8a:	d01d      	beq.n	8006fc8 <UART_SetConfig+0x170>
 8006f8c:	d823      	bhi.n	8006fd6 <UART_SetConfig+0x17e>
 8006f8e:	2b08      	cmp	r3, #8
 8006f90:	d00c      	beq.n	8006fac <UART_SetConfig+0x154>
 8006f92:	d820      	bhi.n	8006fd6 <UART_SetConfig+0x17e>
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d002      	beq.n	8006f9e <UART_SetConfig+0x146>
 8006f98:	2b04      	cmp	r3, #4
 8006f9a:	d00e      	beq.n	8006fba <UART_SetConfig+0x162>
 8006f9c:	e01b      	b.n	8006fd6 <UART_SetConfig+0x17e>
 8006f9e:	231b      	movs	r3, #27
 8006fa0:	2220      	movs	r2, #32
 8006fa2:	189b      	adds	r3, r3, r2
 8006fa4:	19db      	adds	r3, r3, r7
 8006fa6:	2200      	movs	r2, #0
 8006fa8:	701a      	strb	r2, [r3, #0]
 8006faa:	e11d      	b.n	80071e8 <UART_SetConfig+0x390>
 8006fac:	231b      	movs	r3, #27
 8006fae:	2220      	movs	r2, #32
 8006fb0:	189b      	adds	r3, r3, r2
 8006fb2:	19db      	adds	r3, r3, r7
 8006fb4:	2202      	movs	r2, #2
 8006fb6:	701a      	strb	r2, [r3, #0]
 8006fb8:	e116      	b.n	80071e8 <UART_SetConfig+0x390>
 8006fba:	231b      	movs	r3, #27
 8006fbc:	2220      	movs	r2, #32
 8006fbe:	189b      	adds	r3, r3, r2
 8006fc0:	19db      	adds	r3, r3, r7
 8006fc2:	2204      	movs	r2, #4
 8006fc4:	701a      	strb	r2, [r3, #0]
 8006fc6:	e10f      	b.n	80071e8 <UART_SetConfig+0x390>
 8006fc8:	231b      	movs	r3, #27
 8006fca:	2220      	movs	r2, #32
 8006fcc:	189b      	adds	r3, r3, r2
 8006fce:	19db      	adds	r3, r3, r7
 8006fd0:	2208      	movs	r2, #8
 8006fd2:	701a      	strb	r2, [r3, #0]
 8006fd4:	e108      	b.n	80071e8 <UART_SetConfig+0x390>
 8006fd6:	231b      	movs	r3, #27
 8006fd8:	2220      	movs	r2, #32
 8006fda:	189b      	adds	r3, r3, r2
 8006fdc:	19db      	adds	r3, r3, r7
 8006fde:	2210      	movs	r2, #16
 8006fe0:	701a      	strb	r2, [r3, #0]
 8006fe2:	e101      	b.n	80071e8 <UART_SetConfig+0x390>
 8006fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	4a71      	ldr	r2, [pc, #452]	; (80071b0 <UART_SetConfig+0x358>)
 8006fea:	4293      	cmp	r3, r2
 8006fec:	d131      	bne.n	8007052 <UART_SetConfig+0x1fa>
 8006fee:	4b6e      	ldr	r3, [pc, #440]	; (80071a8 <UART_SetConfig+0x350>)
 8006ff0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ff2:	2230      	movs	r2, #48	; 0x30
 8006ff4:	4013      	ands	r3, r2
 8006ff6:	2b30      	cmp	r3, #48	; 0x30
 8006ff8:	d01d      	beq.n	8007036 <UART_SetConfig+0x1de>
 8006ffa:	d823      	bhi.n	8007044 <UART_SetConfig+0x1ec>
 8006ffc:	2b20      	cmp	r3, #32
 8006ffe:	d00c      	beq.n	800701a <UART_SetConfig+0x1c2>
 8007000:	d820      	bhi.n	8007044 <UART_SetConfig+0x1ec>
 8007002:	2b00      	cmp	r3, #0
 8007004:	d002      	beq.n	800700c <UART_SetConfig+0x1b4>
 8007006:	2b10      	cmp	r3, #16
 8007008:	d00e      	beq.n	8007028 <UART_SetConfig+0x1d0>
 800700a:	e01b      	b.n	8007044 <UART_SetConfig+0x1ec>
 800700c:	231b      	movs	r3, #27
 800700e:	2220      	movs	r2, #32
 8007010:	189b      	adds	r3, r3, r2
 8007012:	19db      	adds	r3, r3, r7
 8007014:	2200      	movs	r2, #0
 8007016:	701a      	strb	r2, [r3, #0]
 8007018:	e0e6      	b.n	80071e8 <UART_SetConfig+0x390>
 800701a:	231b      	movs	r3, #27
 800701c:	2220      	movs	r2, #32
 800701e:	189b      	adds	r3, r3, r2
 8007020:	19db      	adds	r3, r3, r7
 8007022:	2202      	movs	r2, #2
 8007024:	701a      	strb	r2, [r3, #0]
 8007026:	e0df      	b.n	80071e8 <UART_SetConfig+0x390>
 8007028:	231b      	movs	r3, #27
 800702a:	2220      	movs	r2, #32
 800702c:	189b      	adds	r3, r3, r2
 800702e:	19db      	adds	r3, r3, r7
 8007030:	2204      	movs	r2, #4
 8007032:	701a      	strb	r2, [r3, #0]
 8007034:	e0d8      	b.n	80071e8 <UART_SetConfig+0x390>
 8007036:	231b      	movs	r3, #27
 8007038:	2220      	movs	r2, #32
 800703a:	189b      	adds	r3, r3, r2
 800703c:	19db      	adds	r3, r3, r7
 800703e:	2208      	movs	r2, #8
 8007040:	701a      	strb	r2, [r3, #0]
 8007042:	e0d1      	b.n	80071e8 <UART_SetConfig+0x390>
 8007044:	231b      	movs	r3, #27
 8007046:	2220      	movs	r2, #32
 8007048:	189b      	adds	r3, r3, r2
 800704a:	19db      	adds	r3, r3, r7
 800704c:	2210      	movs	r2, #16
 800704e:	701a      	strb	r2, [r3, #0]
 8007050:	e0ca      	b.n	80071e8 <UART_SetConfig+0x390>
 8007052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	4a57      	ldr	r2, [pc, #348]	; (80071b4 <UART_SetConfig+0x35c>)
 8007058:	4293      	cmp	r3, r2
 800705a:	d106      	bne.n	800706a <UART_SetConfig+0x212>
 800705c:	231b      	movs	r3, #27
 800705e:	2220      	movs	r2, #32
 8007060:	189b      	adds	r3, r3, r2
 8007062:	19db      	adds	r3, r3, r7
 8007064:	2200      	movs	r2, #0
 8007066:	701a      	strb	r2, [r3, #0]
 8007068:	e0be      	b.n	80071e8 <UART_SetConfig+0x390>
 800706a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	4a52      	ldr	r2, [pc, #328]	; (80071b8 <UART_SetConfig+0x360>)
 8007070:	4293      	cmp	r3, r2
 8007072:	d106      	bne.n	8007082 <UART_SetConfig+0x22a>
 8007074:	231b      	movs	r3, #27
 8007076:	2220      	movs	r2, #32
 8007078:	189b      	adds	r3, r3, r2
 800707a:	19db      	adds	r3, r3, r7
 800707c:	2200      	movs	r2, #0
 800707e:	701a      	strb	r2, [r3, #0]
 8007080:	e0b2      	b.n	80071e8 <UART_SetConfig+0x390>
 8007082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	4a4d      	ldr	r2, [pc, #308]	; (80071bc <UART_SetConfig+0x364>)
 8007088:	4293      	cmp	r3, r2
 800708a:	d106      	bne.n	800709a <UART_SetConfig+0x242>
 800708c:	231b      	movs	r3, #27
 800708e:	2220      	movs	r2, #32
 8007090:	189b      	adds	r3, r3, r2
 8007092:	19db      	adds	r3, r3, r7
 8007094:	2200      	movs	r2, #0
 8007096:	701a      	strb	r2, [r3, #0]
 8007098:	e0a6      	b.n	80071e8 <UART_SetConfig+0x390>
 800709a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	4a3e      	ldr	r2, [pc, #248]	; (8007198 <UART_SetConfig+0x340>)
 80070a0:	4293      	cmp	r3, r2
 80070a2:	d13e      	bne.n	8007122 <UART_SetConfig+0x2ca>
 80070a4:	4b40      	ldr	r3, [pc, #256]	; (80071a8 <UART_SetConfig+0x350>)
 80070a6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80070a8:	23c0      	movs	r3, #192	; 0xc0
 80070aa:	011b      	lsls	r3, r3, #4
 80070ac:	4013      	ands	r3, r2
 80070ae:	22c0      	movs	r2, #192	; 0xc0
 80070b0:	0112      	lsls	r2, r2, #4
 80070b2:	4293      	cmp	r3, r2
 80070b4:	d027      	beq.n	8007106 <UART_SetConfig+0x2ae>
 80070b6:	22c0      	movs	r2, #192	; 0xc0
 80070b8:	0112      	lsls	r2, r2, #4
 80070ba:	4293      	cmp	r3, r2
 80070bc:	d82a      	bhi.n	8007114 <UART_SetConfig+0x2bc>
 80070be:	2280      	movs	r2, #128	; 0x80
 80070c0:	0112      	lsls	r2, r2, #4
 80070c2:	4293      	cmp	r3, r2
 80070c4:	d011      	beq.n	80070ea <UART_SetConfig+0x292>
 80070c6:	2280      	movs	r2, #128	; 0x80
 80070c8:	0112      	lsls	r2, r2, #4
 80070ca:	4293      	cmp	r3, r2
 80070cc:	d822      	bhi.n	8007114 <UART_SetConfig+0x2bc>
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d004      	beq.n	80070dc <UART_SetConfig+0x284>
 80070d2:	2280      	movs	r2, #128	; 0x80
 80070d4:	00d2      	lsls	r2, r2, #3
 80070d6:	4293      	cmp	r3, r2
 80070d8:	d00e      	beq.n	80070f8 <UART_SetConfig+0x2a0>
 80070da:	e01b      	b.n	8007114 <UART_SetConfig+0x2bc>
 80070dc:	231b      	movs	r3, #27
 80070de:	2220      	movs	r2, #32
 80070e0:	189b      	adds	r3, r3, r2
 80070e2:	19db      	adds	r3, r3, r7
 80070e4:	2200      	movs	r2, #0
 80070e6:	701a      	strb	r2, [r3, #0]
 80070e8:	e07e      	b.n	80071e8 <UART_SetConfig+0x390>
 80070ea:	231b      	movs	r3, #27
 80070ec:	2220      	movs	r2, #32
 80070ee:	189b      	adds	r3, r3, r2
 80070f0:	19db      	adds	r3, r3, r7
 80070f2:	2202      	movs	r2, #2
 80070f4:	701a      	strb	r2, [r3, #0]
 80070f6:	e077      	b.n	80071e8 <UART_SetConfig+0x390>
 80070f8:	231b      	movs	r3, #27
 80070fa:	2220      	movs	r2, #32
 80070fc:	189b      	adds	r3, r3, r2
 80070fe:	19db      	adds	r3, r3, r7
 8007100:	2204      	movs	r2, #4
 8007102:	701a      	strb	r2, [r3, #0]
 8007104:	e070      	b.n	80071e8 <UART_SetConfig+0x390>
 8007106:	231b      	movs	r3, #27
 8007108:	2220      	movs	r2, #32
 800710a:	189b      	adds	r3, r3, r2
 800710c:	19db      	adds	r3, r3, r7
 800710e:	2208      	movs	r2, #8
 8007110:	701a      	strb	r2, [r3, #0]
 8007112:	e069      	b.n	80071e8 <UART_SetConfig+0x390>
 8007114:	231b      	movs	r3, #27
 8007116:	2220      	movs	r2, #32
 8007118:	189b      	adds	r3, r3, r2
 800711a:	19db      	adds	r3, r3, r7
 800711c:	2210      	movs	r2, #16
 800711e:	701a      	strb	r2, [r3, #0]
 8007120:	e062      	b.n	80071e8 <UART_SetConfig+0x390>
 8007122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	4a1d      	ldr	r2, [pc, #116]	; (800719c <UART_SetConfig+0x344>)
 8007128:	4293      	cmp	r3, r2
 800712a:	d157      	bne.n	80071dc <UART_SetConfig+0x384>
 800712c:	4b1e      	ldr	r3, [pc, #120]	; (80071a8 <UART_SetConfig+0x350>)
 800712e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007130:	23c0      	movs	r3, #192	; 0xc0
 8007132:	009b      	lsls	r3, r3, #2
 8007134:	4013      	ands	r3, r2
 8007136:	22c0      	movs	r2, #192	; 0xc0
 8007138:	0092      	lsls	r2, r2, #2
 800713a:	4293      	cmp	r3, r2
 800713c:	d040      	beq.n	80071c0 <UART_SetConfig+0x368>
 800713e:	22c0      	movs	r2, #192	; 0xc0
 8007140:	0092      	lsls	r2, r2, #2
 8007142:	4293      	cmp	r3, r2
 8007144:	d843      	bhi.n	80071ce <UART_SetConfig+0x376>
 8007146:	2280      	movs	r2, #128	; 0x80
 8007148:	0092      	lsls	r2, r2, #2
 800714a:	4293      	cmp	r3, r2
 800714c:	d011      	beq.n	8007172 <UART_SetConfig+0x31a>
 800714e:	2280      	movs	r2, #128	; 0x80
 8007150:	0092      	lsls	r2, r2, #2
 8007152:	4293      	cmp	r3, r2
 8007154:	d83b      	bhi.n	80071ce <UART_SetConfig+0x376>
 8007156:	2b00      	cmp	r3, #0
 8007158:	d004      	beq.n	8007164 <UART_SetConfig+0x30c>
 800715a:	2280      	movs	r2, #128	; 0x80
 800715c:	0052      	lsls	r2, r2, #1
 800715e:	4293      	cmp	r3, r2
 8007160:	d00e      	beq.n	8007180 <UART_SetConfig+0x328>
 8007162:	e034      	b.n	80071ce <UART_SetConfig+0x376>
 8007164:	231b      	movs	r3, #27
 8007166:	2220      	movs	r2, #32
 8007168:	189b      	adds	r3, r3, r2
 800716a:	19db      	adds	r3, r3, r7
 800716c:	2200      	movs	r2, #0
 800716e:	701a      	strb	r2, [r3, #0]
 8007170:	e03a      	b.n	80071e8 <UART_SetConfig+0x390>
 8007172:	231b      	movs	r3, #27
 8007174:	2220      	movs	r2, #32
 8007176:	189b      	adds	r3, r3, r2
 8007178:	19db      	adds	r3, r3, r7
 800717a:	2202      	movs	r2, #2
 800717c:	701a      	strb	r2, [r3, #0]
 800717e:	e033      	b.n	80071e8 <UART_SetConfig+0x390>
 8007180:	231b      	movs	r3, #27
 8007182:	2220      	movs	r2, #32
 8007184:	189b      	adds	r3, r3, r2
 8007186:	19db      	adds	r3, r3, r7
 8007188:	2204      	movs	r2, #4
 800718a:	701a      	strb	r2, [r3, #0]
 800718c:	e02c      	b.n	80071e8 <UART_SetConfig+0x390>
 800718e:	46c0      	nop			; (mov r8, r8)
 8007190:	cfff69f3 	.word	0xcfff69f3
 8007194:	ffffcfff 	.word	0xffffcfff
 8007198:	40008000 	.word	0x40008000
 800719c:	40008400 	.word	0x40008400
 80071a0:	11fff4ff 	.word	0x11fff4ff
 80071a4:	40013800 	.word	0x40013800
 80071a8:	40021000 	.word	0x40021000
 80071ac:	40004400 	.word	0x40004400
 80071b0:	40004800 	.word	0x40004800
 80071b4:	40004c00 	.word	0x40004c00
 80071b8:	40005000 	.word	0x40005000
 80071bc:	40013c00 	.word	0x40013c00
 80071c0:	231b      	movs	r3, #27
 80071c2:	2220      	movs	r2, #32
 80071c4:	189b      	adds	r3, r3, r2
 80071c6:	19db      	adds	r3, r3, r7
 80071c8:	2208      	movs	r2, #8
 80071ca:	701a      	strb	r2, [r3, #0]
 80071cc:	e00c      	b.n	80071e8 <UART_SetConfig+0x390>
 80071ce:	231b      	movs	r3, #27
 80071d0:	2220      	movs	r2, #32
 80071d2:	189b      	adds	r3, r3, r2
 80071d4:	19db      	adds	r3, r3, r7
 80071d6:	2210      	movs	r2, #16
 80071d8:	701a      	strb	r2, [r3, #0]
 80071da:	e005      	b.n	80071e8 <UART_SetConfig+0x390>
 80071dc:	231b      	movs	r3, #27
 80071de:	2220      	movs	r2, #32
 80071e0:	189b      	adds	r3, r3, r2
 80071e2:	19db      	adds	r3, r3, r7
 80071e4:	2210      	movs	r2, #16
 80071e6:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80071e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	4ac1      	ldr	r2, [pc, #772]	; (80074f4 <UART_SetConfig+0x69c>)
 80071ee:	4293      	cmp	r3, r2
 80071f0:	d005      	beq.n	80071fe <UART_SetConfig+0x3a6>
 80071f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	4ac0      	ldr	r2, [pc, #768]	; (80074f8 <UART_SetConfig+0x6a0>)
 80071f8:	4293      	cmp	r3, r2
 80071fa:	d000      	beq.n	80071fe <UART_SetConfig+0x3a6>
 80071fc:	e093      	b.n	8007326 <UART_SetConfig+0x4ce>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80071fe:	231b      	movs	r3, #27
 8007200:	2220      	movs	r2, #32
 8007202:	189b      	adds	r3, r3, r2
 8007204:	19db      	adds	r3, r3, r7
 8007206:	781b      	ldrb	r3, [r3, #0]
 8007208:	2b08      	cmp	r3, #8
 800720a:	d015      	beq.n	8007238 <UART_SetConfig+0x3e0>
 800720c:	dc18      	bgt.n	8007240 <UART_SetConfig+0x3e8>
 800720e:	2b04      	cmp	r3, #4
 8007210:	d00d      	beq.n	800722e <UART_SetConfig+0x3d6>
 8007212:	dc15      	bgt.n	8007240 <UART_SetConfig+0x3e8>
 8007214:	2b00      	cmp	r3, #0
 8007216:	d002      	beq.n	800721e <UART_SetConfig+0x3c6>
 8007218:	2b02      	cmp	r3, #2
 800721a:	d005      	beq.n	8007228 <UART_SetConfig+0x3d0>
 800721c:	e010      	b.n	8007240 <UART_SetConfig+0x3e8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800721e:	f7fd fcaf 	bl	8004b80 <HAL_RCC_GetPCLK1Freq>
 8007222:	0003      	movs	r3, r0
 8007224:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007226:	e014      	b.n	8007252 <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007228:	4bb4      	ldr	r3, [pc, #720]	; (80074fc <UART_SetConfig+0x6a4>)
 800722a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800722c:	e011      	b.n	8007252 <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800722e:	f7fd fc1b 	bl	8004a68 <HAL_RCC_GetSysClockFreq>
 8007232:	0003      	movs	r3, r0
 8007234:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007236:	e00c      	b.n	8007252 <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007238:	2380      	movs	r3, #128	; 0x80
 800723a:	021b      	lsls	r3, r3, #8
 800723c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800723e:	e008      	b.n	8007252 <UART_SetConfig+0x3fa>
      default:
        pclk = 0U;
 8007240:	2300      	movs	r3, #0
 8007242:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8007244:	231a      	movs	r3, #26
 8007246:	2220      	movs	r2, #32
 8007248:	189b      	adds	r3, r3, r2
 800724a:	19db      	adds	r3, r3, r7
 800724c:	2201      	movs	r2, #1
 800724e:	701a      	strb	r2, [r3, #0]
        break;
 8007250:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007252:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007254:	2b00      	cmp	r3, #0
 8007256:	d100      	bne.n	800725a <UART_SetConfig+0x402>
 8007258:	e135      	b.n	80074c6 <UART_SetConfig+0x66e>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800725a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800725c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800725e:	4ba8      	ldr	r3, [pc, #672]	; (8007500 <UART_SetConfig+0x6a8>)
 8007260:	0052      	lsls	r2, r2, #1
 8007262:	5ad3      	ldrh	r3, [r2, r3]
 8007264:	0019      	movs	r1, r3
 8007266:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8007268:	f7f8 ff68 	bl	800013c <__udivsi3>
 800726c:	0003      	movs	r3, r0
 800726e:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007272:	685a      	ldr	r2, [r3, #4]
 8007274:	0013      	movs	r3, r2
 8007276:	005b      	lsls	r3, r3, #1
 8007278:	189b      	adds	r3, r3, r2
 800727a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800727c:	429a      	cmp	r2, r3
 800727e:	d305      	bcc.n	800728c <UART_SetConfig+0x434>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007282:	685b      	ldr	r3, [r3, #4]
 8007284:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007286:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007288:	429a      	cmp	r2, r3
 800728a:	d906      	bls.n	800729a <UART_SetConfig+0x442>
      {
        ret = HAL_ERROR;
 800728c:	231a      	movs	r3, #26
 800728e:	2220      	movs	r2, #32
 8007290:	189b      	adds	r3, r3, r2
 8007292:	19db      	adds	r3, r3, r7
 8007294:	2201      	movs	r2, #1
 8007296:	701a      	strb	r2, [r3, #0]
 8007298:	e044      	b.n	8007324 <UART_SetConfig+0x4cc>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800729a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800729c:	61bb      	str	r3, [r7, #24]
 800729e:	2300      	movs	r3, #0
 80072a0:	61fb      	str	r3, [r7, #28]
 80072a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072a4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80072a6:	4b96      	ldr	r3, [pc, #600]	; (8007500 <UART_SetConfig+0x6a8>)
 80072a8:	0052      	lsls	r2, r2, #1
 80072aa:	5ad3      	ldrh	r3, [r2, r3]
 80072ac:	613b      	str	r3, [r7, #16]
 80072ae:	2300      	movs	r3, #0
 80072b0:	617b      	str	r3, [r7, #20]
 80072b2:	693a      	ldr	r2, [r7, #16]
 80072b4:	697b      	ldr	r3, [r7, #20]
 80072b6:	69b8      	ldr	r0, [r7, #24]
 80072b8:	69f9      	ldr	r1, [r7, #28]
 80072ba:	f7f9 f8f3 	bl	80004a4 <__aeabi_uldivmod>
 80072be:	0002      	movs	r2, r0
 80072c0:	000b      	movs	r3, r1
 80072c2:	0e11      	lsrs	r1, r2, #24
 80072c4:	021d      	lsls	r5, r3, #8
 80072c6:	430d      	orrs	r5, r1
 80072c8:	0214      	lsls	r4, r2, #8
 80072ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072cc:	685b      	ldr	r3, [r3, #4]
 80072ce:	085b      	lsrs	r3, r3, #1
 80072d0:	60bb      	str	r3, [r7, #8]
 80072d2:	2300      	movs	r3, #0
 80072d4:	60fb      	str	r3, [r7, #12]
 80072d6:	68b8      	ldr	r0, [r7, #8]
 80072d8:	68f9      	ldr	r1, [r7, #12]
 80072da:	1900      	adds	r0, r0, r4
 80072dc:	4169      	adcs	r1, r5
 80072de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072e0:	685b      	ldr	r3, [r3, #4]
 80072e2:	603b      	str	r3, [r7, #0]
 80072e4:	2300      	movs	r3, #0
 80072e6:	607b      	str	r3, [r7, #4]
 80072e8:	683a      	ldr	r2, [r7, #0]
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	f7f9 f8da 	bl	80004a4 <__aeabi_uldivmod>
 80072f0:	0002      	movs	r2, r0
 80072f2:	000b      	movs	r3, r1
 80072f4:	0013      	movs	r3, r2
 80072f6:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80072f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80072fa:	23c0      	movs	r3, #192	; 0xc0
 80072fc:	009b      	lsls	r3, r3, #2
 80072fe:	429a      	cmp	r2, r3
 8007300:	d309      	bcc.n	8007316 <UART_SetConfig+0x4be>
 8007302:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007304:	2380      	movs	r3, #128	; 0x80
 8007306:	035b      	lsls	r3, r3, #13
 8007308:	429a      	cmp	r2, r3
 800730a:	d204      	bcs.n	8007316 <UART_SetConfig+0x4be>
        {
          huart->Instance->BRR = usartdiv;
 800730c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007312:	60da      	str	r2, [r3, #12]
 8007314:	e006      	b.n	8007324 <UART_SetConfig+0x4cc>
        }
        else
        {
          ret = HAL_ERROR;
 8007316:	231a      	movs	r3, #26
 8007318:	2220      	movs	r2, #32
 800731a:	189b      	adds	r3, r3, r2
 800731c:	19db      	adds	r3, r3, r7
 800731e:	2201      	movs	r2, #1
 8007320:	701a      	strb	r2, [r3, #0]
    if (pclk != 0U)
 8007322:	e0d0      	b.n	80074c6 <UART_SetConfig+0x66e>
 8007324:	e0cf      	b.n	80074c6 <UART_SetConfig+0x66e>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007328:	69da      	ldr	r2, [r3, #28]
 800732a:	2380      	movs	r3, #128	; 0x80
 800732c:	021b      	lsls	r3, r3, #8
 800732e:	429a      	cmp	r2, r3
 8007330:	d000      	beq.n	8007334 <UART_SetConfig+0x4dc>
 8007332:	e070      	b.n	8007416 <UART_SetConfig+0x5be>
  {
    switch (clocksource)
 8007334:	231b      	movs	r3, #27
 8007336:	2220      	movs	r2, #32
 8007338:	189b      	adds	r3, r3, r2
 800733a:	19db      	adds	r3, r3, r7
 800733c:	781b      	ldrb	r3, [r3, #0]
 800733e:	2b08      	cmp	r3, #8
 8007340:	d015      	beq.n	800736e <UART_SetConfig+0x516>
 8007342:	dc18      	bgt.n	8007376 <UART_SetConfig+0x51e>
 8007344:	2b04      	cmp	r3, #4
 8007346:	d00d      	beq.n	8007364 <UART_SetConfig+0x50c>
 8007348:	dc15      	bgt.n	8007376 <UART_SetConfig+0x51e>
 800734a:	2b00      	cmp	r3, #0
 800734c:	d002      	beq.n	8007354 <UART_SetConfig+0x4fc>
 800734e:	2b02      	cmp	r3, #2
 8007350:	d005      	beq.n	800735e <UART_SetConfig+0x506>
 8007352:	e010      	b.n	8007376 <UART_SetConfig+0x51e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007354:	f7fd fc14 	bl	8004b80 <HAL_RCC_GetPCLK1Freq>
 8007358:	0003      	movs	r3, r0
 800735a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800735c:	e014      	b.n	8007388 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800735e:	4b67      	ldr	r3, [pc, #412]	; (80074fc <UART_SetConfig+0x6a4>)
 8007360:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007362:	e011      	b.n	8007388 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007364:	f7fd fb80 	bl	8004a68 <HAL_RCC_GetSysClockFreq>
 8007368:	0003      	movs	r3, r0
 800736a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800736c:	e00c      	b.n	8007388 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800736e:	2380      	movs	r3, #128	; 0x80
 8007370:	021b      	lsls	r3, r3, #8
 8007372:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007374:	e008      	b.n	8007388 <UART_SetConfig+0x530>
      default:
        pclk = 0U;
 8007376:	2300      	movs	r3, #0
 8007378:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 800737a:	231a      	movs	r3, #26
 800737c:	2220      	movs	r2, #32
 800737e:	189b      	adds	r3, r3, r2
 8007380:	19db      	adds	r3, r3, r7
 8007382:	2201      	movs	r2, #1
 8007384:	701a      	strb	r2, [r3, #0]
        break;
 8007386:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007388:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800738a:	2b00      	cmp	r3, #0
 800738c:	d100      	bne.n	8007390 <UART_SetConfig+0x538>
 800738e:	e09a      	b.n	80074c6 <UART_SetConfig+0x66e>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007392:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007394:	4b5a      	ldr	r3, [pc, #360]	; (8007500 <UART_SetConfig+0x6a8>)
 8007396:	0052      	lsls	r2, r2, #1
 8007398:	5ad3      	ldrh	r3, [r2, r3]
 800739a:	0019      	movs	r1, r3
 800739c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800739e:	f7f8 fecd 	bl	800013c <__udivsi3>
 80073a2:	0003      	movs	r3, r0
 80073a4:	005a      	lsls	r2, r3, #1
 80073a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073a8:	685b      	ldr	r3, [r3, #4]
 80073aa:	085b      	lsrs	r3, r3, #1
 80073ac:	18d2      	adds	r2, r2, r3
 80073ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073b0:	685b      	ldr	r3, [r3, #4]
 80073b2:	0019      	movs	r1, r3
 80073b4:	0010      	movs	r0, r2
 80073b6:	f7f8 fec1 	bl	800013c <__udivsi3>
 80073ba:	0003      	movs	r3, r0
 80073bc:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80073be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073c0:	2b0f      	cmp	r3, #15
 80073c2:	d921      	bls.n	8007408 <UART_SetConfig+0x5b0>
 80073c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80073c6:	2380      	movs	r3, #128	; 0x80
 80073c8:	025b      	lsls	r3, r3, #9
 80073ca:	429a      	cmp	r2, r3
 80073cc:	d21c      	bcs.n	8007408 <UART_SetConfig+0x5b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80073ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073d0:	b29a      	uxth	r2, r3
 80073d2:	200e      	movs	r0, #14
 80073d4:	2420      	movs	r4, #32
 80073d6:	1903      	adds	r3, r0, r4
 80073d8:	19db      	adds	r3, r3, r7
 80073da:	210f      	movs	r1, #15
 80073dc:	438a      	bics	r2, r1
 80073de:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80073e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073e2:	085b      	lsrs	r3, r3, #1
 80073e4:	b29b      	uxth	r3, r3
 80073e6:	2207      	movs	r2, #7
 80073e8:	4013      	ands	r3, r2
 80073ea:	b299      	uxth	r1, r3
 80073ec:	1903      	adds	r3, r0, r4
 80073ee:	19db      	adds	r3, r3, r7
 80073f0:	1902      	adds	r2, r0, r4
 80073f2:	19d2      	adds	r2, r2, r7
 80073f4:	8812      	ldrh	r2, [r2, #0]
 80073f6:	430a      	orrs	r2, r1
 80073f8:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80073fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	1902      	adds	r2, r0, r4
 8007400:	19d2      	adds	r2, r2, r7
 8007402:	8812      	ldrh	r2, [r2, #0]
 8007404:	60da      	str	r2, [r3, #12]
 8007406:	e05e      	b.n	80074c6 <UART_SetConfig+0x66e>
      }
      else
      {
        ret = HAL_ERROR;
 8007408:	231a      	movs	r3, #26
 800740a:	2220      	movs	r2, #32
 800740c:	189b      	adds	r3, r3, r2
 800740e:	19db      	adds	r3, r3, r7
 8007410:	2201      	movs	r2, #1
 8007412:	701a      	strb	r2, [r3, #0]
 8007414:	e057      	b.n	80074c6 <UART_SetConfig+0x66e>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007416:	231b      	movs	r3, #27
 8007418:	2220      	movs	r2, #32
 800741a:	189b      	adds	r3, r3, r2
 800741c:	19db      	adds	r3, r3, r7
 800741e:	781b      	ldrb	r3, [r3, #0]
 8007420:	2b08      	cmp	r3, #8
 8007422:	d015      	beq.n	8007450 <UART_SetConfig+0x5f8>
 8007424:	dc18      	bgt.n	8007458 <UART_SetConfig+0x600>
 8007426:	2b04      	cmp	r3, #4
 8007428:	d00d      	beq.n	8007446 <UART_SetConfig+0x5ee>
 800742a:	dc15      	bgt.n	8007458 <UART_SetConfig+0x600>
 800742c:	2b00      	cmp	r3, #0
 800742e:	d002      	beq.n	8007436 <UART_SetConfig+0x5de>
 8007430:	2b02      	cmp	r3, #2
 8007432:	d005      	beq.n	8007440 <UART_SetConfig+0x5e8>
 8007434:	e010      	b.n	8007458 <UART_SetConfig+0x600>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007436:	f7fd fba3 	bl	8004b80 <HAL_RCC_GetPCLK1Freq>
 800743a:	0003      	movs	r3, r0
 800743c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800743e:	e014      	b.n	800746a <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007440:	4b2e      	ldr	r3, [pc, #184]	; (80074fc <UART_SetConfig+0x6a4>)
 8007442:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007444:	e011      	b.n	800746a <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007446:	f7fd fb0f 	bl	8004a68 <HAL_RCC_GetSysClockFreq>
 800744a:	0003      	movs	r3, r0
 800744c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800744e:	e00c      	b.n	800746a <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007450:	2380      	movs	r3, #128	; 0x80
 8007452:	021b      	lsls	r3, r3, #8
 8007454:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007456:	e008      	b.n	800746a <UART_SetConfig+0x612>
      default:
        pclk = 0U;
 8007458:	2300      	movs	r3, #0
 800745a:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 800745c:	231a      	movs	r3, #26
 800745e:	2220      	movs	r2, #32
 8007460:	189b      	adds	r3, r3, r2
 8007462:	19db      	adds	r3, r3, r7
 8007464:	2201      	movs	r2, #1
 8007466:	701a      	strb	r2, [r3, #0]
        break;
 8007468:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 800746a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800746c:	2b00      	cmp	r3, #0
 800746e:	d02a      	beq.n	80074c6 <UART_SetConfig+0x66e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007472:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007474:	4b22      	ldr	r3, [pc, #136]	; (8007500 <UART_SetConfig+0x6a8>)
 8007476:	0052      	lsls	r2, r2, #1
 8007478:	5ad3      	ldrh	r3, [r2, r3]
 800747a:	0019      	movs	r1, r3
 800747c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800747e:	f7f8 fe5d 	bl	800013c <__udivsi3>
 8007482:	0003      	movs	r3, r0
 8007484:	001a      	movs	r2, r3
 8007486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007488:	685b      	ldr	r3, [r3, #4]
 800748a:	085b      	lsrs	r3, r3, #1
 800748c:	18d2      	adds	r2, r2, r3
 800748e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007490:	685b      	ldr	r3, [r3, #4]
 8007492:	0019      	movs	r1, r3
 8007494:	0010      	movs	r0, r2
 8007496:	f7f8 fe51 	bl	800013c <__udivsi3>
 800749a:	0003      	movs	r3, r0
 800749c:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800749e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074a0:	2b0f      	cmp	r3, #15
 80074a2:	d90a      	bls.n	80074ba <UART_SetConfig+0x662>
 80074a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80074a6:	2380      	movs	r3, #128	; 0x80
 80074a8:	025b      	lsls	r3, r3, #9
 80074aa:	429a      	cmp	r2, r3
 80074ac:	d205      	bcs.n	80074ba <UART_SetConfig+0x662>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80074ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074b0:	b29a      	uxth	r2, r3
 80074b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	60da      	str	r2, [r3, #12]
 80074b8:	e005      	b.n	80074c6 <UART_SetConfig+0x66e>
      }
      else
      {
        ret = HAL_ERROR;
 80074ba:	231a      	movs	r3, #26
 80074bc:	2220      	movs	r2, #32
 80074be:	189b      	adds	r3, r3, r2
 80074c0:	19db      	adds	r3, r3, r7
 80074c2:	2201      	movs	r2, #1
 80074c4:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80074c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074c8:	226a      	movs	r2, #106	; 0x6a
 80074ca:	2101      	movs	r1, #1
 80074cc:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 80074ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074d0:	2268      	movs	r2, #104	; 0x68
 80074d2:	2101      	movs	r1, #1
 80074d4:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80074d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074d8:	2200      	movs	r2, #0
 80074da:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80074dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074de:	2200      	movs	r2, #0
 80074e0:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80074e2:	231a      	movs	r3, #26
 80074e4:	2220      	movs	r2, #32
 80074e6:	189b      	adds	r3, r3, r2
 80074e8:	19db      	adds	r3, r3, r7
 80074ea:	781b      	ldrb	r3, [r3, #0]
}
 80074ec:	0018      	movs	r0, r3
 80074ee:	46bd      	mov	sp, r7
 80074f0:	b010      	add	sp, #64	; 0x40
 80074f2:	bdb0      	pop	{r4, r5, r7, pc}
 80074f4:	40008000 	.word	0x40008000
 80074f8:	40008400 	.word	0x40008400
 80074fc:	00f42400 	.word	0x00f42400
 8007500:	080129c4 	.word	0x080129c4

08007504 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007504:	b580      	push	{r7, lr}
 8007506:	b082      	sub	sp, #8
 8007508:	af00      	add	r7, sp, #0
 800750a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007510:	2201      	movs	r2, #1
 8007512:	4013      	ands	r3, r2
 8007514:	d00b      	beq.n	800752e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	685b      	ldr	r3, [r3, #4]
 800751c:	4a4a      	ldr	r2, [pc, #296]	; (8007648 <UART_AdvFeatureConfig+0x144>)
 800751e:	4013      	ands	r3, r2
 8007520:	0019      	movs	r1, r3
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	430a      	orrs	r2, r1
 800752c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007532:	2202      	movs	r2, #2
 8007534:	4013      	ands	r3, r2
 8007536:	d00b      	beq.n	8007550 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	685b      	ldr	r3, [r3, #4]
 800753e:	4a43      	ldr	r2, [pc, #268]	; (800764c <UART_AdvFeatureConfig+0x148>)
 8007540:	4013      	ands	r3, r2
 8007542:	0019      	movs	r1, r3
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	430a      	orrs	r2, r1
 800754e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007554:	2204      	movs	r2, #4
 8007556:	4013      	ands	r3, r2
 8007558:	d00b      	beq.n	8007572 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	685b      	ldr	r3, [r3, #4]
 8007560:	4a3b      	ldr	r2, [pc, #236]	; (8007650 <UART_AdvFeatureConfig+0x14c>)
 8007562:	4013      	ands	r3, r2
 8007564:	0019      	movs	r1, r3
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	430a      	orrs	r2, r1
 8007570:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007576:	2208      	movs	r2, #8
 8007578:	4013      	ands	r3, r2
 800757a:	d00b      	beq.n	8007594 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	685b      	ldr	r3, [r3, #4]
 8007582:	4a34      	ldr	r2, [pc, #208]	; (8007654 <UART_AdvFeatureConfig+0x150>)
 8007584:	4013      	ands	r3, r2
 8007586:	0019      	movs	r1, r3
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	430a      	orrs	r2, r1
 8007592:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007598:	2210      	movs	r2, #16
 800759a:	4013      	ands	r3, r2
 800759c:	d00b      	beq.n	80075b6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	689b      	ldr	r3, [r3, #8]
 80075a4:	4a2c      	ldr	r2, [pc, #176]	; (8007658 <UART_AdvFeatureConfig+0x154>)
 80075a6:	4013      	ands	r3, r2
 80075a8:	0019      	movs	r1, r3
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	430a      	orrs	r2, r1
 80075b4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075ba:	2220      	movs	r2, #32
 80075bc:	4013      	ands	r3, r2
 80075be:	d00b      	beq.n	80075d8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	689b      	ldr	r3, [r3, #8]
 80075c6:	4a25      	ldr	r2, [pc, #148]	; (800765c <UART_AdvFeatureConfig+0x158>)
 80075c8:	4013      	ands	r3, r2
 80075ca:	0019      	movs	r1, r3
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	430a      	orrs	r2, r1
 80075d6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075dc:	2240      	movs	r2, #64	; 0x40
 80075de:	4013      	ands	r3, r2
 80075e0:	d01d      	beq.n	800761e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	685b      	ldr	r3, [r3, #4]
 80075e8:	4a1d      	ldr	r2, [pc, #116]	; (8007660 <UART_AdvFeatureConfig+0x15c>)
 80075ea:	4013      	ands	r3, r2
 80075ec:	0019      	movs	r1, r3
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	430a      	orrs	r2, r1
 80075f8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80075fe:	2380      	movs	r3, #128	; 0x80
 8007600:	035b      	lsls	r3, r3, #13
 8007602:	429a      	cmp	r2, r3
 8007604:	d10b      	bne.n	800761e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	685b      	ldr	r3, [r3, #4]
 800760c:	4a15      	ldr	r2, [pc, #84]	; (8007664 <UART_AdvFeatureConfig+0x160>)
 800760e:	4013      	ands	r3, r2
 8007610:	0019      	movs	r1, r3
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	430a      	orrs	r2, r1
 800761c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007622:	2280      	movs	r2, #128	; 0x80
 8007624:	4013      	ands	r3, r2
 8007626:	d00b      	beq.n	8007640 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	685b      	ldr	r3, [r3, #4]
 800762e:	4a0e      	ldr	r2, [pc, #56]	; (8007668 <UART_AdvFeatureConfig+0x164>)
 8007630:	4013      	ands	r3, r2
 8007632:	0019      	movs	r1, r3
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	430a      	orrs	r2, r1
 800763e:	605a      	str	r2, [r3, #4]
  }
}
 8007640:	46c0      	nop			; (mov r8, r8)
 8007642:	46bd      	mov	sp, r7
 8007644:	b002      	add	sp, #8
 8007646:	bd80      	pop	{r7, pc}
 8007648:	fffdffff 	.word	0xfffdffff
 800764c:	fffeffff 	.word	0xfffeffff
 8007650:	fffbffff 	.word	0xfffbffff
 8007654:	ffff7fff 	.word	0xffff7fff
 8007658:	ffffefff 	.word	0xffffefff
 800765c:	ffffdfff 	.word	0xffffdfff
 8007660:	ffefffff 	.word	0xffefffff
 8007664:	ff9fffff 	.word	0xff9fffff
 8007668:	fff7ffff 	.word	0xfff7ffff

0800766c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800766c:	b580      	push	{r7, lr}
 800766e:	b086      	sub	sp, #24
 8007670:	af02      	add	r7, sp, #8
 8007672:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	2290      	movs	r2, #144	; 0x90
 8007678:	2100      	movs	r1, #0
 800767a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800767c:	f7fc f954 	bl	8003928 <HAL_GetTick>
 8007680:	0003      	movs	r3, r0
 8007682:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	2208      	movs	r2, #8
 800768c:	4013      	ands	r3, r2
 800768e:	2b08      	cmp	r3, #8
 8007690:	d10c      	bne.n	80076ac <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	2280      	movs	r2, #128	; 0x80
 8007696:	0391      	lsls	r1, r2, #14
 8007698:	6878      	ldr	r0, [r7, #4]
 800769a:	4a1a      	ldr	r2, [pc, #104]	; (8007704 <UART_CheckIdleState+0x98>)
 800769c:	9200      	str	r2, [sp, #0]
 800769e:	2200      	movs	r2, #0
 80076a0:	f000 f832 	bl	8007708 <UART_WaitOnFlagUntilTimeout>
 80076a4:	1e03      	subs	r3, r0, #0
 80076a6:	d001      	beq.n	80076ac <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80076a8:	2303      	movs	r3, #3
 80076aa:	e026      	b.n	80076fa <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	2204      	movs	r2, #4
 80076b4:	4013      	ands	r3, r2
 80076b6:	2b04      	cmp	r3, #4
 80076b8:	d10c      	bne.n	80076d4 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	2280      	movs	r2, #128	; 0x80
 80076be:	03d1      	lsls	r1, r2, #15
 80076c0:	6878      	ldr	r0, [r7, #4]
 80076c2:	4a10      	ldr	r2, [pc, #64]	; (8007704 <UART_CheckIdleState+0x98>)
 80076c4:	9200      	str	r2, [sp, #0]
 80076c6:	2200      	movs	r2, #0
 80076c8:	f000 f81e 	bl	8007708 <UART_WaitOnFlagUntilTimeout>
 80076cc:	1e03      	subs	r3, r0, #0
 80076ce:	d001      	beq.n	80076d4 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80076d0:	2303      	movs	r3, #3
 80076d2:	e012      	b.n	80076fa <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	2288      	movs	r2, #136	; 0x88
 80076d8:	2120      	movs	r1, #32
 80076da:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	228c      	movs	r2, #140	; 0x8c
 80076e0:	2120      	movs	r1, #32
 80076e2:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	2200      	movs	r2, #0
 80076e8:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	2200      	movs	r2, #0
 80076ee:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	2284      	movs	r2, #132	; 0x84
 80076f4:	2100      	movs	r1, #0
 80076f6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80076f8:	2300      	movs	r3, #0
}
 80076fa:	0018      	movs	r0, r3
 80076fc:	46bd      	mov	sp, r7
 80076fe:	b004      	add	sp, #16
 8007700:	bd80      	pop	{r7, pc}
 8007702:	46c0      	nop			; (mov r8, r8)
 8007704:	01ffffff 	.word	0x01ffffff

08007708 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007708:	b580      	push	{r7, lr}
 800770a:	b094      	sub	sp, #80	; 0x50
 800770c:	af00      	add	r7, sp, #0
 800770e:	60f8      	str	r0, [r7, #12]
 8007710:	60b9      	str	r1, [r7, #8]
 8007712:	603b      	str	r3, [r7, #0]
 8007714:	1dfb      	adds	r3, r7, #7
 8007716:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007718:	e0a7      	b.n	800786a <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800771a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800771c:	3301      	adds	r3, #1
 800771e:	d100      	bne.n	8007722 <UART_WaitOnFlagUntilTimeout+0x1a>
 8007720:	e0a3      	b.n	800786a <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007722:	f7fc f901 	bl	8003928 <HAL_GetTick>
 8007726:	0002      	movs	r2, r0
 8007728:	683b      	ldr	r3, [r7, #0]
 800772a:	1ad3      	subs	r3, r2, r3
 800772c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800772e:	429a      	cmp	r2, r3
 8007730:	d302      	bcc.n	8007738 <UART_WaitOnFlagUntilTimeout+0x30>
 8007732:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007734:	2b00      	cmp	r3, #0
 8007736:	d13f      	bne.n	80077b8 <UART_WaitOnFlagUntilTimeout+0xb0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007738:	f3ef 8310 	mrs	r3, PRIMASK
 800773c:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 800773e:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8007740:	647b      	str	r3, [r7, #68]	; 0x44
 8007742:	2301      	movs	r3, #1
 8007744:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007746:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007748:	f383 8810 	msr	PRIMASK, r3
}
 800774c:	46c0      	nop			; (mov r8, r8)
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	681a      	ldr	r2, [r3, #0]
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	494e      	ldr	r1, [pc, #312]	; (8007894 <UART_WaitOnFlagUntilTimeout+0x18c>)
 800775a:	400a      	ands	r2, r1
 800775c:	601a      	str	r2, [r3, #0]
 800775e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007760:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007762:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007764:	f383 8810 	msr	PRIMASK, r3
}
 8007768:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800776a:	f3ef 8310 	mrs	r3, PRIMASK
 800776e:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8007770:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007772:	643b      	str	r3, [r7, #64]	; 0x40
 8007774:	2301      	movs	r3, #1
 8007776:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007778:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800777a:	f383 8810 	msr	PRIMASK, r3
}
 800777e:	46c0      	nop			; (mov r8, r8)
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	689a      	ldr	r2, [r3, #8]
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	2101      	movs	r1, #1
 800778c:	438a      	bics	r2, r1
 800778e:	609a      	str	r2, [r3, #8]
 8007790:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007792:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007794:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007796:	f383 8810 	msr	PRIMASK, r3
}
 800779a:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	2288      	movs	r2, #136	; 0x88
 80077a0:	2120      	movs	r1, #32
 80077a2:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	228c      	movs	r2, #140	; 0x8c
 80077a8:	2120      	movs	r1, #32
 80077aa:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	2284      	movs	r2, #132	; 0x84
 80077b0:	2100      	movs	r1, #0
 80077b2:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80077b4:	2303      	movs	r3, #3
 80077b6:	e069      	b.n	800788c <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	2204      	movs	r2, #4
 80077c0:	4013      	ands	r3, r2
 80077c2:	d052      	beq.n	800786a <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	69da      	ldr	r2, [r3, #28]
 80077ca:	2380      	movs	r3, #128	; 0x80
 80077cc:	011b      	lsls	r3, r3, #4
 80077ce:	401a      	ands	r2, r3
 80077d0:	2380      	movs	r3, #128	; 0x80
 80077d2:	011b      	lsls	r3, r3, #4
 80077d4:	429a      	cmp	r2, r3
 80077d6:	d148      	bne.n	800786a <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	2280      	movs	r2, #128	; 0x80
 80077de:	0112      	lsls	r2, r2, #4
 80077e0:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80077e2:	f3ef 8310 	mrs	r3, PRIMASK
 80077e6:	613b      	str	r3, [r7, #16]
  return(result);
 80077e8:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80077ea:	64fb      	str	r3, [r7, #76]	; 0x4c
 80077ec:	2301      	movs	r3, #1
 80077ee:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80077f0:	697b      	ldr	r3, [r7, #20]
 80077f2:	f383 8810 	msr	PRIMASK, r3
}
 80077f6:	46c0      	nop			; (mov r8, r8)
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	681a      	ldr	r2, [r3, #0]
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	4924      	ldr	r1, [pc, #144]	; (8007894 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8007804:	400a      	ands	r2, r1
 8007806:	601a      	str	r2, [r3, #0]
 8007808:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800780a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800780c:	69bb      	ldr	r3, [r7, #24]
 800780e:	f383 8810 	msr	PRIMASK, r3
}
 8007812:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007814:	f3ef 8310 	mrs	r3, PRIMASK
 8007818:	61fb      	str	r3, [r7, #28]
  return(result);
 800781a:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800781c:	64bb      	str	r3, [r7, #72]	; 0x48
 800781e:	2301      	movs	r3, #1
 8007820:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007822:	6a3b      	ldr	r3, [r7, #32]
 8007824:	f383 8810 	msr	PRIMASK, r3
}
 8007828:	46c0      	nop			; (mov r8, r8)
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	689a      	ldr	r2, [r3, #8]
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	2101      	movs	r1, #1
 8007836:	438a      	bics	r2, r1
 8007838:	609a      	str	r2, [r3, #8]
 800783a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800783c:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800783e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007840:	f383 8810 	msr	PRIMASK, r3
}
 8007844:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	2288      	movs	r2, #136	; 0x88
 800784a:	2120      	movs	r1, #32
 800784c:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	228c      	movs	r2, #140	; 0x8c
 8007852:	2120      	movs	r1, #32
 8007854:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	2290      	movs	r2, #144	; 0x90
 800785a:	2120      	movs	r1, #32
 800785c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	2284      	movs	r2, #132	; 0x84
 8007862:	2100      	movs	r1, #0
 8007864:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8007866:	2303      	movs	r3, #3
 8007868:	e010      	b.n	800788c <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	69db      	ldr	r3, [r3, #28]
 8007870:	68ba      	ldr	r2, [r7, #8]
 8007872:	4013      	ands	r3, r2
 8007874:	68ba      	ldr	r2, [r7, #8]
 8007876:	1ad3      	subs	r3, r2, r3
 8007878:	425a      	negs	r2, r3
 800787a:	4153      	adcs	r3, r2
 800787c:	b2db      	uxtb	r3, r3
 800787e:	001a      	movs	r2, r3
 8007880:	1dfb      	adds	r3, r7, #7
 8007882:	781b      	ldrb	r3, [r3, #0]
 8007884:	429a      	cmp	r2, r3
 8007886:	d100      	bne.n	800788a <UART_WaitOnFlagUntilTimeout+0x182>
 8007888:	e747      	b.n	800771a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800788a:	2300      	movs	r3, #0
}
 800788c:	0018      	movs	r0, r3
 800788e:	46bd      	mov	sp, r7
 8007890:	b014      	add	sp, #80	; 0x50
 8007892:	bd80      	pop	{r7, pc}
 8007894:	fffffe5f 	.word	0xfffffe5f

08007898 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007898:	b580      	push	{r7, lr}
 800789a:	b084      	sub	sp, #16
 800789c:	af00      	add	r7, sp, #0
 800789e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	2284      	movs	r2, #132	; 0x84
 80078a4:	5c9b      	ldrb	r3, [r3, r2]
 80078a6:	2b01      	cmp	r3, #1
 80078a8:	d101      	bne.n	80078ae <HAL_UARTEx_DisableFifoMode+0x16>
 80078aa:	2302      	movs	r3, #2
 80078ac:	e027      	b.n	80078fe <HAL_UARTEx_DisableFifoMode+0x66>
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	2284      	movs	r2, #132	; 0x84
 80078b2:	2101      	movs	r1, #1
 80078b4:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	2288      	movs	r2, #136	; 0x88
 80078ba:	2124      	movs	r1, #36	; 0x24
 80078bc:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	681a      	ldr	r2, [r3, #0]
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	2101      	movs	r1, #1
 80078d2:	438a      	bics	r2, r1
 80078d4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	4a0b      	ldr	r2, [pc, #44]	; (8007908 <HAL_UARTEx_DisableFifoMode+0x70>)
 80078da:	4013      	ands	r3, r2
 80078dc:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	2200      	movs	r2, #0
 80078e2:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	68fa      	ldr	r2, [r7, #12]
 80078ea:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	2288      	movs	r2, #136	; 0x88
 80078f0:	2120      	movs	r1, #32
 80078f2:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	2284      	movs	r2, #132	; 0x84
 80078f8:	2100      	movs	r1, #0
 80078fa:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80078fc:	2300      	movs	r3, #0
}
 80078fe:	0018      	movs	r0, r3
 8007900:	46bd      	mov	sp, r7
 8007902:	b004      	add	sp, #16
 8007904:	bd80      	pop	{r7, pc}
 8007906:	46c0      	nop			; (mov r8, r8)
 8007908:	dfffffff 	.word	0xdfffffff

0800790c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800790c:	b580      	push	{r7, lr}
 800790e:	b084      	sub	sp, #16
 8007910:	af00      	add	r7, sp, #0
 8007912:	6078      	str	r0, [r7, #4]
 8007914:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	2284      	movs	r2, #132	; 0x84
 800791a:	5c9b      	ldrb	r3, [r3, r2]
 800791c:	2b01      	cmp	r3, #1
 800791e:	d101      	bne.n	8007924 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007920:	2302      	movs	r3, #2
 8007922:	e02e      	b.n	8007982 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	2284      	movs	r2, #132	; 0x84
 8007928:	2101      	movs	r1, #1
 800792a:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	2288      	movs	r2, #136	; 0x88
 8007930:	2124      	movs	r1, #36	; 0x24
 8007932:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	681a      	ldr	r2, [r3, #0]
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	2101      	movs	r1, #1
 8007948:	438a      	bics	r2, r1
 800794a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	689b      	ldr	r3, [r3, #8]
 8007952:	00db      	lsls	r3, r3, #3
 8007954:	08d9      	lsrs	r1, r3, #3
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	683a      	ldr	r2, [r7, #0]
 800795c:	430a      	orrs	r2, r1
 800795e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	0018      	movs	r0, r3
 8007964:	f000 f854 	bl	8007a10 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	68fa      	ldr	r2, [r7, #12]
 800796e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	2288      	movs	r2, #136	; 0x88
 8007974:	2120      	movs	r1, #32
 8007976:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	2284      	movs	r2, #132	; 0x84
 800797c:	2100      	movs	r1, #0
 800797e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007980:	2300      	movs	r3, #0
}
 8007982:	0018      	movs	r0, r3
 8007984:	46bd      	mov	sp, r7
 8007986:	b004      	add	sp, #16
 8007988:	bd80      	pop	{r7, pc}
	...

0800798c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800798c:	b580      	push	{r7, lr}
 800798e:	b084      	sub	sp, #16
 8007990:	af00      	add	r7, sp, #0
 8007992:	6078      	str	r0, [r7, #4]
 8007994:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	2284      	movs	r2, #132	; 0x84
 800799a:	5c9b      	ldrb	r3, [r3, r2]
 800799c:	2b01      	cmp	r3, #1
 800799e:	d101      	bne.n	80079a4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80079a0:	2302      	movs	r3, #2
 80079a2:	e02f      	b.n	8007a04 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	2284      	movs	r2, #132	; 0x84
 80079a8:	2101      	movs	r1, #1
 80079aa:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	2288      	movs	r2, #136	; 0x88
 80079b0:	2124      	movs	r1, #36	; 0x24
 80079b2:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	681a      	ldr	r2, [r3, #0]
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	2101      	movs	r1, #1
 80079c8:	438a      	bics	r2, r1
 80079ca:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	689b      	ldr	r3, [r3, #8]
 80079d2:	4a0e      	ldr	r2, [pc, #56]	; (8007a0c <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 80079d4:	4013      	ands	r3, r2
 80079d6:	0019      	movs	r1, r3
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	683a      	ldr	r2, [r7, #0]
 80079de:	430a      	orrs	r2, r1
 80079e0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	0018      	movs	r0, r3
 80079e6:	f000 f813 	bl	8007a10 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	68fa      	ldr	r2, [r7, #12]
 80079f0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	2288      	movs	r2, #136	; 0x88
 80079f6:	2120      	movs	r1, #32
 80079f8:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	2284      	movs	r2, #132	; 0x84
 80079fe:	2100      	movs	r1, #0
 8007a00:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007a02:	2300      	movs	r3, #0
}
 8007a04:	0018      	movs	r0, r3
 8007a06:	46bd      	mov	sp, r7
 8007a08:	b004      	add	sp, #16
 8007a0a:	bd80      	pop	{r7, pc}
 8007a0c:	f1ffffff 	.word	0xf1ffffff

08007a10 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007a10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007a12:	b085      	sub	sp, #20
 8007a14:	af00      	add	r7, sp, #0
 8007a16:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d108      	bne.n	8007a32 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	226a      	movs	r2, #106	; 0x6a
 8007a24:	2101      	movs	r1, #1
 8007a26:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	2268      	movs	r2, #104	; 0x68
 8007a2c:	2101      	movs	r1, #1
 8007a2e:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007a30:	e043      	b.n	8007aba <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007a32:	260f      	movs	r6, #15
 8007a34:	19bb      	adds	r3, r7, r6
 8007a36:	2208      	movs	r2, #8
 8007a38:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007a3a:	200e      	movs	r0, #14
 8007a3c:	183b      	adds	r3, r7, r0
 8007a3e:	2208      	movs	r2, #8
 8007a40:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	689b      	ldr	r3, [r3, #8]
 8007a48:	0e5b      	lsrs	r3, r3, #25
 8007a4a:	b2da      	uxtb	r2, r3
 8007a4c:	240d      	movs	r4, #13
 8007a4e:	193b      	adds	r3, r7, r4
 8007a50:	2107      	movs	r1, #7
 8007a52:	400a      	ands	r2, r1
 8007a54:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	689b      	ldr	r3, [r3, #8]
 8007a5c:	0f5b      	lsrs	r3, r3, #29
 8007a5e:	b2da      	uxtb	r2, r3
 8007a60:	250c      	movs	r5, #12
 8007a62:	197b      	adds	r3, r7, r5
 8007a64:	2107      	movs	r1, #7
 8007a66:	400a      	ands	r2, r1
 8007a68:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007a6a:	183b      	adds	r3, r7, r0
 8007a6c:	781b      	ldrb	r3, [r3, #0]
 8007a6e:	197a      	adds	r2, r7, r5
 8007a70:	7812      	ldrb	r2, [r2, #0]
 8007a72:	4914      	ldr	r1, [pc, #80]	; (8007ac4 <UARTEx_SetNbDataToProcess+0xb4>)
 8007a74:	5c8a      	ldrb	r2, [r1, r2]
 8007a76:	435a      	muls	r2, r3
 8007a78:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8007a7a:	197b      	adds	r3, r7, r5
 8007a7c:	781b      	ldrb	r3, [r3, #0]
 8007a7e:	4a12      	ldr	r2, [pc, #72]	; (8007ac8 <UARTEx_SetNbDataToProcess+0xb8>)
 8007a80:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007a82:	0019      	movs	r1, r3
 8007a84:	f7f8 fbe4 	bl	8000250 <__divsi3>
 8007a88:	0003      	movs	r3, r0
 8007a8a:	b299      	uxth	r1, r3
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	226a      	movs	r2, #106	; 0x6a
 8007a90:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007a92:	19bb      	adds	r3, r7, r6
 8007a94:	781b      	ldrb	r3, [r3, #0]
 8007a96:	193a      	adds	r2, r7, r4
 8007a98:	7812      	ldrb	r2, [r2, #0]
 8007a9a:	490a      	ldr	r1, [pc, #40]	; (8007ac4 <UARTEx_SetNbDataToProcess+0xb4>)
 8007a9c:	5c8a      	ldrb	r2, [r1, r2]
 8007a9e:	435a      	muls	r2, r3
 8007aa0:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8007aa2:	193b      	adds	r3, r7, r4
 8007aa4:	781b      	ldrb	r3, [r3, #0]
 8007aa6:	4a08      	ldr	r2, [pc, #32]	; (8007ac8 <UARTEx_SetNbDataToProcess+0xb8>)
 8007aa8:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007aaa:	0019      	movs	r1, r3
 8007aac:	f7f8 fbd0 	bl	8000250 <__divsi3>
 8007ab0:	0003      	movs	r3, r0
 8007ab2:	b299      	uxth	r1, r3
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	2268      	movs	r2, #104	; 0x68
 8007ab8:	5299      	strh	r1, [r3, r2]
}
 8007aba:	46c0      	nop			; (mov r8, r8)
 8007abc:	46bd      	mov	sp, r7
 8007abe:	b005      	add	sp, #20
 8007ac0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007ac2:	46c0      	nop			; (mov r8, r8)
 8007ac4:	080129dc 	.word	0x080129dc
 8007ac8:	080129e4 	.word	0x080129e4

08007acc <astronode_send_cfg_wr>:
                            bool deep_sleep_mode,
                            bool message_ack_event_pin_mask,
                            bool reset_notification_event_pin_mask,
							bool command_available_event_pin_mask,
							bool message_tx_event_pin_mask)
{
 8007acc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007ace:	b0e7      	sub	sp, #412	; 0x19c
 8007ad0:	af00      	add	r7, sp, #0
 8007ad2:	0005      	movs	r5, r0
 8007ad4:	000c      	movs	r4, r1
 8007ad6:	0010      	movs	r0, r2
 8007ad8:	0019      	movs	r1, r3
 8007ada:	4b4b      	ldr	r3, [pc, #300]	; (8007c08 <astronode_send_cfg_wr+0x13c>)
 8007adc:	26cc      	movs	r6, #204	; 0xcc
 8007ade:	0076      	lsls	r6, r6, #1
 8007ae0:	199b      	adds	r3, r3, r6
 8007ae2:	19db      	adds	r3, r3, r7
 8007ae4:	1c2a      	adds	r2, r5, #0
 8007ae6:	701a      	strb	r2, [r3, #0]
 8007ae8:	4b48      	ldr	r3, [pc, #288]	; (8007c0c <astronode_send_cfg_wr+0x140>)
 8007aea:	0035      	movs	r5, r6
 8007aec:	195b      	adds	r3, r3, r5
 8007aee:	19db      	adds	r3, r3, r7
 8007af0:	1c22      	adds	r2, r4, #0
 8007af2:	701a      	strb	r2, [r3, #0]
 8007af4:	4b46      	ldr	r3, [pc, #280]	; (8007c10 <astronode_send_cfg_wr+0x144>)
 8007af6:	002c      	movs	r4, r5
 8007af8:	191b      	adds	r3, r3, r4
 8007afa:	19db      	adds	r3, r3, r7
 8007afc:	1c02      	adds	r2, r0, #0
 8007afe:	701a      	strb	r2, [r3, #0]
 8007b00:	4b44      	ldr	r3, [pc, #272]	; (8007c14 <astronode_send_cfg_wr+0x148>)
 8007b02:	191b      	adds	r3, r3, r4
 8007b04:	19db      	adds	r3, r3, r7
 8007b06:	1c0a      	adds	r2, r1, #0
 8007b08:	701a      	strb	r2, [r3, #0]
    astronode_app_msg_t request = {0};
 8007b0a:	25d0      	movs	r5, #208	; 0xd0
 8007b0c:	197b      	adds	r3, r7, r5
 8007b0e:	0018      	movs	r0, r3
 8007b10:	23c6      	movs	r3, #198	; 0xc6
 8007b12:	001a      	movs	r2, r3
 8007b14:	2100      	movs	r1, #0
 8007b16:	f002 fca7 	bl	800a468 <memset>
    astronode_app_msg_t answer = {0};
 8007b1a:	4b3f      	ldr	r3, [pc, #252]	; (8007c18 <astronode_send_cfg_wr+0x14c>)
 8007b1c:	191b      	adds	r3, r3, r4
 8007b1e:	19db      	adds	r3, r3, r7
 8007b20:	0018      	movs	r0, r3
 8007b22:	23c6      	movs	r3, #198	; 0xc6
 8007b24:	001a      	movs	r2, r3
 8007b26:	2100      	movs	r1, #0
 8007b28:	f002 fc9e 	bl	800a468 <memset>

    request.op_code = ASTRONODE_OP_CODE_CFG_WR;
 8007b2c:	0029      	movs	r1, r5
 8007b2e:	187b      	adds	r3, r7, r1
 8007b30:	2205      	movs	r2, #5
 8007b32:	701a      	strb	r2, [r3, #0]

    request.p_payload[ASTRONODE_BYTE_OFFSET_CFG_WR_CONFIG] = payload_acknowledgment << ASTRONODE_BIT_OFFSET_PAYLOAD_ACK
        | add_geolocation << ASTRONODE_BIT_OFFSET_ADD_GEO
 8007b34:	4b34      	ldr	r3, [pc, #208]	; (8007c08 <astronode_send_cfg_wr+0x13c>)
 8007b36:	191b      	adds	r3, r3, r4
 8007b38:	19db      	adds	r3, r3, r7
 8007b3a:	2200      	movs	r2, #0
 8007b3c:	569a      	ldrsb	r2, [r3, r2]
 8007b3e:	4b33      	ldr	r3, [pc, #204]	; (8007c0c <astronode_send_cfg_wr+0x140>)
 8007b40:	191b      	adds	r3, r3, r4
 8007b42:	19db      	adds	r3, r3, r7
 8007b44:	781b      	ldrb	r3, [r3, #0]
 8007b46:	005b      	lsls	r3, r3, #1
 8007b48:	b25b      	sxtb	r3, r3
 8007b4a:	4313      	orrs	r3, r2
 8007b4c:	b25a      	sxtb	r2, r3
        | enable_ephemeris << ASTRONODE_BIT_OFFSET_ENABLE_EPH
 8007b4e:	4b30      	ldr	r3, [pc, #192]	; (8007c10 <astronode_send_cfg_wr+0x144>)
 8007b50:	191b      	adds	r3, r3, r4
 8007b52:	19db      	adds	r3, r3, r7
 8007b54:	781b      	ldrb	r3, [r3, #0]
 8007b56:	009b      	lsls	r3, r3, #2
 8007b58:	b25b      	sxtb	r3, r3
 8007b5a:	4313      	orrs	r3, r2
 8007b5c:	b25a      	sxtb	r2, r3
        | deep_sleep_mode << ASTRONODE_BIT_OFFSET_DEEP_SLEEP_MODE;
 8007b5e:	4b2d      	ldr	r3, [pc, #180]	; (8007c14 <astronode_send_cfg_wr+0x148>)
 8007b60:	191b      	adds	r3, r3, r4
 8007b62:	19db      	adds	r3, r3, r7
 8007b64:	781b      	ldrb	r3, [r3, #0]
 8007b66:	00db      	lsls	r3, r3, #3
 8007b68:	b25b      	sxtb	r3, r3
 8007b6a:	4313      	orrs	r3, r2
 8007b6c:	b25b      	sxtb	r3, r3
 8007b6e:	b2da      	uxtb	r2, r3
    request.p_payload[ASTRONODE_BYTE_OFFSET_CFG_WR_CONFIG] = payload_acknowledgment << ASTRONODE_BIT_OFFSET_PAYLOAD_ACK
 8007b70:	187b      	adds	r3, r7, r1
 8007b72:	705a      	strb	r2, [r3, #1]

    request.p_payload[ASTRONODE_BYTE_OFFSET_CFG_WR_EVT_PIN_MASK] = message_ack_event_pin_mask << ASTRONODE_BIT_OFFSET_MSG_ACK_EVT_PIN_MASK
        | reset_notification_event_pin_mask << ASTRONODE_BIT_OFFSET_RST_NTF_EVT_PIN_MASK
 8007b74:	23d4      	movs	r3, #212	; 0xd4
 8007b76:	005b      	lsls	r3, r3, #1
 8007b78:	2508      	movs	r5, #8
 8007b7a:	195b      	adds	r3, r3, r5
 8007b7c:	19db      	adds	r3, r3, r7
 8007b7e:	2200      	movs	r2, #0
 8007b80:	569a      	ldrsb	r2, [r3, r2]
 8007b82:	23d6      	movs	r3, #214	; 0xd6
 8007b84:	005b      	lsls	r3, r3, #1
 8007b86:	195b      	adds	r3, r3, r5
 8007b88:	19db      	adds	r3, r3, r7
 8007b8a:	781b      	ldrb	r3, [r3, #0]
 8007b8c:	005b      	lsls	r3, r3, #1
 8007b8e:	b25b      	sxtb	r3, r3
 8007b90:	4313      	orrs	r3, r2
 8007b92:	b25a      	sxtb	r2, r3
        | command_available_event_pin_mask << ASTRONODE_BIT_OFFSET_CMD_AVA_EVT_PIN_MASK
 8007b94:	23d8      	movs	r3, #216	; 0xd8
 8007b96:	005b      	lsls	r3, r3, #1
 8007b98:	195b      	adds	r3, r3, r5
 8007b9a:	19db      	adds	r3, r3, r7
 8007b9c:	781b      	ldrb	r3, [r3, #0]
 8007b9e:	009b      	lsls	r3, r3, #2
 8007ba0:	b25b      	sxtb	r3, r3
 8007ba2:	4313      	orrs	r3, r2
 8007ba4:	b25a      	sxtb	r2, r3
        | message_tx_event_pin_mask << ASTRONODE_BIT_OFFSET_MSG_TXP_EVT_PIN_MASK;
 8007ba6:	23da      	movs	r3, #218	; 0xda
 8007ba8:	005b      	lsls	r3, r3, #1
 8007baa:	195b      	adds	r3, r3, r5
 8007bac:	19db      	adds	r3, r3, r7
 8007bae:	781b      	ldrb	r3, [r3, #0]
 8007bb0:	00db      	lsls	r3, r3, #3
 8007bb2:	b25b      	sxtb	r3, r3
 8007bb4:	4313      	orrs	r3, r2
 8007bb6:	b25b      	sxtb	r3, r3
 8007bb8:	b2da      	uxtb	r2, r3
    request.p_payload[ASTRONODE_BYTE_OFFSET_CFG_WR_EVT_PIN_MASK] = message_ack_event_pin_mask << ASTRONODE_BIT_OFFSET_MSG_ACK_EVT_PIN_MASK
 8007bba:	187b      	adds	r3, r7, r1
 8007bbc:	70da      	strb	r2, [r3, #3]

    request.payload_len = 3;
 8007bbe:	0008      	movs	r0, r1
 8007bc0:	187b      	adds	r3, r7, r1
 8007bc2:	22c4      	movs	r2, #196	; 0xc4
 8007bc4:	2103      	movs	r1, #3
 8007bc6:	5299      	strh	r1, [r3, r2]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 8007bc8:	002b      	movs	r3, r5
 8007bca:	18fa      	adds	r2, r7, r3
 8007bcc:	183b      	adds	r3, r7, r0
 8007bce:	0011      	movs	r1, r2
 8007bd0:	0018      	movs	r0, r3
 8007bd2:	f000 fb33 	bl	800823c <astronode_transport_send_receive>
 8007bd6:	0003      	movs	r3, r0
 8007bd8:	2b01      	cmp	r3, #1
 8007bda:	d10f      	bne.n	8007bfc <astronode_send_cfg_wr+0x130>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_CFG_WA)
 8007bdc:	4b0e      	ldr	r3, [pc, #56]	; (8007c18 <astronode_send_cfg_wr+0x14c>)
 8007bde:	191b      	adds	r3, r3, r4
 8007be0:	19db      	adds	r3, r3, r7
 8007be2:	781b      	ldrb	r3, [r3, #0]
 8007be4:	2b85      	cmp	r3, #133	; 0x85
 8007be6:	d105      	bne.n	8007bf4 <astronode_send_cfg_wr+0x128>
        {
            send_debug_logs("Astronode configuration successfully set.");
 8007be8:	4b0c      	ldr	r3, [pc, #48]	; (8007c1c <astronode_send_cfg_wr+0x150>)
 8007bea:	0018      	movs	r0, r3
 8007bec:	f7fb f94a 	bl	8002e84 <send_debug_logs>
            return true ;
 8007bf0:	2301      	movs	r3, #1
 8007bf2:	e004      	b.n	8007bfe <astronode_send_cfg_wr+0x132>
        }
        else
        {
            send_debug_logs("Failed to set the Astronode configuration.");
 8007bf4:	4b0a      	ldr	r3, [pc, #40]	; (8007c20 <astronode_send_cfg_wr+0x154>)
 8007bf6:	0018      	movs	r0, r3
 8007bf8:	f7fb f944 	bl	8002e84 <send_debug_logs>
        }
    }
    return false ;
 8007bfc:	2300      	movs	r3, #0
}
 8007bfe:	0018      	movs	r0, r3
 8007c00:	46bd      	mov	sp, r7
 8007c02:	b067      	add	sp, #412	; 0x19c
 8007c04:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007c06:	46c0      	nop			; (mov r8, r8)
 8007c08:	fffffe6f 	.word	0xfffffe6f
 8007c0c:	fffffe6e 	.word	0xfffffe6e
 8007c10:	fffffe6d 	.word	0xfffffe6d
 8007c14:	fffffe6c 	.word	0xfffffe6c
 8007c18:	fffffe70 	.word	0xfffffe70
 8007c1c:	080116dc 	.word	0x080116dc
 8007c20:	08011708 	.word	0x08011708

08007c24 <astronode_send_mpn_rr>:
        }
    }
}

void astronode_send_mpn_rr(void)
{
 8007c24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007c26:	b0ed      	sub	sp, #436	; 0x1b4
 8007c28:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 8007c2a:	21c8      	movs	r1, #200	; 0xc8
 8007c2c:	2318      	movs	r3, #24
 8007c2e:	18cb      	adds	r3, r1, r3
 8007c30:	19db      	adds	r3, r3, r7
 8007c32:	0018      	movs	r0, r3
 8007c34:	23c6      	movs	r3, #198	; 0xc6
 8007c36:	001a      	movs	r2, r3
 8007c38:	2100      	movs	r1, #0
 8007c3a:	f002 fc15 	bl	800a468 <memset>
    astronode_app_msg_t answer = {0};
 8007c3e:	4b4a      	ldr	r3, [pc, #296]	; (8007d68 <astronode_send_mpn_rr+0x144>)
 8007c40:	26cc      	movs	r6, #204	; 0xcc
 8007c42:	0076      	lsls	r6, r6, #1
 8007c44:	199b      	adds	r3, r3, r6
 8007c46:	2218      	movs	r2, #24
 8007c48:	4694      	mov	ip, r2
 8007c4a:	44bc      	add	ip, r7
 8007c4c:	4463      	add	r3, ip
 8007c4e:	0018      	movs	r0, r3
 8007c50:	23c6      	movs	r3, #198	; 0xc6
 8007c52:	001a      	movs	r2, r3
 8007c54:	2100      	movs	r1, #0
 8007c56:	f002 fc07 	bl	800a468 <memset>

    request.op_code = ASTRONODE_OP_CODE_MPN_RR;
 8007c5a:	21c8      	movs	r1, #200	; 0xc8
 8007c5c:	2318      	movs	r3, #24
 8007c5e:	18cb      	adds	r3, r1, r3
 8007c60:	19db      	adds	r3, r3, r7
 8007c62:	221b      	movs	r2, #27
 8007c64:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 8007c66:	2318      	movs	r3, #24
 8007c68:	18fa      	adds	r2, r7, r3
 8007c6a:	2318      	movs	r3, #24
 8007c6c:	18cb      	adds	r3, r1, r3
 8007c6e:	19db      	adds	r3, r3, r7
 8007c70:	0011      	movs	r1, r2
 8007c72:	0018      	movs	r0, r3
 8007c74:	f000 fae2 	bl	800823c <astronode_transport_send_receive>
 8007c78:	0003      	movs	r3, r0
 8007c7a:	2b01      	cmp	r3, #1
 8007c7c:	d16f      	bne.n	8007d5e <astronode_send_mpn_rr+0x13a>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_MPN_RA)
 8007c7e:	4b3a      	ldr	r3, [pc, #232]	; (8007d68 <astronode_send_mpn_rr+0x144>)
 8007c80:	0032      	movs	r2, r6
 8007c82:	189b      	adds	r3, r3, r2
 8007c84:	2118      	movs	r1, #24
 8007c86:	468c      	mov	ip, r1
 8007c88:	44bc      	add	ip, r7
 8007c8a:	4463      	add	r3, ip
 8007c8c:	781b      	ldrb	r3, [r3, #0]
 8007c8e:	2b9b      	cmp	r3, #155	; 0x9b
 8007c90:	d161      	bne.n	8007d56 <astronode_send_mpn_rr+0x132>
        {
 8007c92:	466b      	mov	r3, sp
 8007c94:	001e      	movs	r6, r3
            char product_number[answer.payload_len];
 8007c96:	4b34      	ldr	r3, [pc, #208]	; (8007d68 <astronode_send_mpn_rr+0x144>)
 8007c98:	189b      	adds	r3, r3, r2
 8007c9a:	2218      	movs	r2, #24
 8007c9c:	4694      	mov	ip, r2
 8007c9e:	44bc      	add	ip, r7
 8007ca0:	4463      	add	r3, ip
 8007ca2:	22c4      	movs	r2, #196	; 0xc4
 8007ca4:	5a9b      	ldrh	r3, [r3, r2]
 8007ca6:	001a      	movs	r2, r3
 8007ca8:	3a01      	subs	r2, #1
 8007caa:	21ca      	movs	r1, #202	; 0xca
 8007cac:	0049      	lsls	r1, r1, #1
 8007cae:	2018      	movs	r0, #24
 8007cb0:	1809      	adds	r1, r1, r0
 8007cb2:	19c9      	adds	r1, r1, r7
 8007cb4:	600a      	str	r2, [r1, #0]
 8007cb6:	001c      	movs	r4, r3
 8007cb8:	2200      	movs	r2, #0
 8007cba:	0015      	movs	r5, r2
 8007cbc:	0020      	movs	r0, r4
 8007cbe:	0029      	movs	r1, r5
 8007cc0:	0004      	movs	r4, r0
 8007cc2:	0f62      	lsrs	r2, r4, #29
 8007cc4:	000c      	movs	r4, r1
 8007cc6:	00e4      	lsls	r4, r4, #3
 8007cc8:	617c      	str	r4, [r7, #20]
 8007cca:	697c      	ldr	r4, [r7, #20]
 8007ccc:	4314      	orrs	r4, r2
 8007cce:	617c      	str	r4, [r7, #20]
 8007cd0:	0001      	movs	r1, r0
 8007cd2:	00c9      	lsls	r1, r1, #3
 8007cd4:	6139      	str	r1, [r7, #16]
 8007cd6:	603b      	str	r3, [r7, #0]
 8007cd8:	2200      	movs	r2, #0
 8007cda:	607a      	str	r2, [r7, #4]
 8007cdc:	6838      	ldr	r0, [r7, #0]
 8007cde:	6879      	ldr	r1, [r7, #4]
 8007ce0:	0004      	movs	r4, r0
 8007ce2:	0f62      	lsrs	r2, r4, #29
 8007ce4:	000c      	movs	r4, r1
 8007ce6:	00e4      	lsls	r4, r4, #3
 8007ce8:	60fc      	str	r4, [r7, #12]
 8007cea:	68fc      	ldr	r4, [r7, #12]
 8007cec:	4314      	orrs	r4, r2
 8007cee:	60fc      	str	r4, [r7, #12]
 8007cf0:	0001      	movs	r1, r0
 8007cf2:	00ca      	lsls	r2, r1, #3
 8007cf4:	60ba      	str	r2, [r7, #8]
 8007cf6:	3307      	adds	r3, #7
 8007cf8:	08db      	lsrs	r3, r3, #3
 8007cfa:	00db      	lsls	r3, r3, #3
 8007cfc:	4669      	mov	r1, sp
 8007cfe:	1acb      	subs	r3, r1, r3
 8007d00:	469d      	mov	sp, r3
 8007d02:	466b      	mov	r3, sp
 8007d04:	3300      	adds	r3, #0
 8007d06:	24c8      	movs	r4, #200	; 0xc8
 8007d08:	0064      	lsls	r4, r4, #1
 8007d0a:	2218      	movs	r2, #24
 8007d0c:	18a2      	adds	r2, r4, r2
 8007d0e:	19d1      	adds	r1, r2, r7
 8007d10:	600b      	str	r3, [r1, #0]
            send_debug_logs("Module's product number is:");
 8007d12:	4b16      	ldr	r3, [pc, #88]	; (8007d6c <astronode_send_mpn_rr+0x148>)
 8007d14:	0018      	movs	r0, r3
 8007d16:	f7fb f8b5 	bl	8002e84 <send_debug_logs>
            snprintf(product_number, answer.payload_len, "%s", answer.p_payload);
 8007d1a:	4b13      	ldr	r3, [pc, #76]	; (8007d68 <astronode_send_mpn_rr+0x144>)
 8007d1c:	22cc      	movs	r2, #204	; 0xcc
 8007d1e:	0052      	lsls	r2, r2, #1
 8007d20:	189b      	adds	r3, r3, r2
 8007d22:	2218      	movs	r2, #24
 8007d24:	4694      	mov	ip, r2
 8007d26:	44bc      	add	ip, r7
 8007d28:	4463      	add	r3, ip
 8007d2a:	22c4      	movs	r2, #196	; 0xc4
 8007d2c:	5a9b      	ldrh	r3, [r3, r2]
 8007d2e:	0019      	movs	r1, r3
 8007d30:	2318      	movs	r3, #24
 8007d32:	18fb      	adds	r3, r7, r3
 8007d34:	3301      	adds	r3, #1
 8007d36:	4a0e      	ldr	r2, [pc, #56]	; (8007d70 <astronode_send_mpn_rr+0x14c>)
 8007d38:	2018      	movs	r0, #24
 8007d3a:	1820      	adds	r0, r4, r0
 8007d3c:	19c0      	adds	r0, r0, r7
 8007d3e:	6800      	ldr	r0, [r0, #0]
 8007d40:	f002 fac8 	bl	800a2d4 <snprintf>
            send_debug_logs(product_number);
 8007d44:	2318      	movs	r3, #24
 8007d46:	18e3      	adds	r3, r4, r3
 8007d48:	19db      	adds	r3, r3, r7
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	0018      	movs	r0, r3
 8007d4e:	f7fb f899 	bl	8002e84 <send_debug_logs>
 8007d52:	46b5      	mov	sp, r6
        else
        {
            send_debug_logs("Failed to read module Serial Number.");
        }
    }
}
 8007d54:	e003      	b.n	8007d5e <astronode_send_mpn_rr+0x13a>
            send_debug_logs("Failed to read module Serial Number.");
 8007d56:	4b07      	ldr	r3, [pc, #28]	; (8007d74 <astronode_send_mpn_rr+0x150>)
 8007d58:	0018      	movs	r0, r3
 8007d5a:	f7fb f893 	bl	8002e84 <send_debug_logs>
}
 8007d5e:	46c0      	nop			; (mov r8, r8)
 8007d60:	46bd      	mov	sp, r7
 8007d62:	b06d      	add	sp, #436	; 0x1b4
 8007d64:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007d66:	46c0      	nop			; (mov r8, r8)
 8007d68:	fffffe68 	.word	0xfffffe68
 8007d6c:	08011c6c 	.word	0x08011c6c
 8007d70:	080117a4 	.word	0x080117a4
 8007d74:	080117e0 	.word	0x080117e0

08007d78 <ascii_to_value>:

//------------------------------------------------------------------------------
// Function definitions
//------------------------------------------------------------------------------
static bool ascii_to_value(const uint8_t ascii, uint8_t *p_value)
{
 8007d78:	b580      	push	{r7, lr}
 8007d7a:	b082      	sub	sp, #8
 8007d7c:	af00      	add	r7, sp, #0
 8007d7e:	0002      	movs	r2, r0
 8007d80:	6039      	str	r1, [r7, #0]
 8007d82:	1dfb      	adds	r3, r7, #7
 8007d84:	701a      	strb	r2, [r3, #0]
    if (ascii >= '0' && ascii <= '9')
 8007d86:	1dfb      	adds	r3, r7, #7
 8007d88:	781b      	ldrb	r3, [r3, #0]
 8007d8a:	2b2f      	cmp	r3, #47	; 0x2f
 8007d8c:	d90b      	bls.n	8007da6 <ascii_to_value+0x2e>
 8007d8e:	1dfb      	adds	r3, r7, #7
 8007d90:	781b      	ldrb	r3, [r3, #0]
 8007d92:	2b39      	cmp	r3, #57	; 0x39
 8007d94:	d807      	bhi.n	8007da6 <ascii_to_value+0x2e>
    {
        *p_value = ascii - '0';
 8007d96:	1dfb      	adds	r3, r7, #7
 8007d98:	781b      	ldrb	r3, [r3, #0]
 8007d9a:	3b30      	subs	r3, #48	; 0x30
 8007d9c:	b2da      	uxtb	r2, r3
 8007d9e:	683b      	ldr	r3, [r7, #0]
 8007da0:	701a      	strb	r2, [r3, #0]
        return true;
 8007da2:	2301      	movs	r3, #1
 8007da4:	e010      	b.n	8007dc8 <ascii_to_value+0x50>
    }
    else if (ascii >= 'A' && ascii <= 'F')
 8007da6:	1dfb      	adds	r3, r7, #7
 8007da8:	781b      	ldrb	r3, [r3, #0]
 8007daa:	2b40      	cmp	r3, #64	; 0x40
 8007dac:	d90b      	bls.n	8007dc6 <ascii_to_value+0x4e>
 8007dae:	1dfb      	adds	r3, r7, #7
 8007db0:	781b      	ldrb	r3, [r3, #0]
 8007db2:	2b46      	cmp	r3, #70	; 0x46
 8007db4:	d807      	bhi.n	8007dc6 <ascii_to_value+0x4e>
    {
        *p_value = ascii - 'A' + 10;
 8007db6:	1dfb      	adds	r3, r7, #7
 8007db8:	781b      	ldrb	r3, [r3, #0]
 8007dba:	3b37      	subs	r3, #55	; 0x37
 8007dbc:	b2da      	uxtb	r2, r3
 8007dbe:	683b      	ldr	r3, [r7, #0]
 8007dc0:	701a      	strb	r2, [r3, #0]
        return true;
 8007dc2:	2301      	movs	r3, #1
 8007dc4:	e000      	b.n	8007dc8 <ascii_to_value+0x50>
    }
    else
    {
        return false;
 8007dc6:	2300      	movs	r3, #0
    }
}
 8007dc8:	0018      	movs	r0, r3
 8007dca:	46bd      	mov	sp, r7
 8007dcc:	b002      	add	sp, #8
 8007dce:	bd80      	pop	{r7, pc}

08007dd0 <astronode_create_request_transport>:

static uint16_t astronode_create_request_transport(astronode_app_msg_t *p_source_message, uint8_t *p_destination_buffer)
{
 8007dd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007dd2:	b085      	sub	sp, #20
 8007dd4:	af00      	add	r7, sp, #0
 8007dd6:	6078      	str	r0, [r7, #4]
 8007dd8:	6039      	str	r1, [r7, #0]
    uint16_t index = 0;
 8007dda:	250e      	movs	r5, #14
 8007ddc:	197b      	adds	r3, r7, r5
 8007dde:	2200      	movs	r2, #0
 8007de0:	801a      	strh	r2, [r3, #0]

    p_destination_buffer[index++] = ASTRONODE_TRANSPORT_STX;
 8007de2:	197b      	adds	r3, r7, r5
 8007de4:	881b      	ldrh	r3, [r3, #0]
 8007de6:	197a      	adds	r2, r7, r5
 8007de8:	1c59      	adds	r1, r3, #1
 8007dea:	8011      	strh	r1, [r2, #0]
 8007dec:	001a      	movs	r2, r3
 8007dee:	683b      	ldr	r3, [r7, #0]
 8007df0:	189b      	adds	r3, r3, r2
 8007df2:	2202      	movs	r2, #2
 8007df4:	701a      	strb	r2, [r3, #0]

    uint16_t crc = calculate_crc((const uint8_t *)&p_source_message->op_code, 1, 0xFFFF);
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	260a      	movs	r6, #10
 8007dfa:	19bc      	adds	r4, r7, r6
 8007dfc:	4a44      	ldr	r2, [pc, #272]	; (8007f10 <astronode_create_request_transport+0x140>)
 8007dfe:	2101      	movs	r1, #1
 8007e00:	0018      	movs	r0, r3
 8007e02:	f000 fa7d 	bl	8008300 <calculate_crc>
 8007e06:	0003      	movs	r3, r0
 8007e08:	8023      	strh	r3, [r4, #0]
    crc = calculate_crc((const uint8_t *)&p_source_message->p_payload, p_source_message->payload_len, crc);
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	1c58      	adds	r0, r3, #1
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	22c4      	movs	r2, #196	; 0xc4
 8007e12:	5a99      	ldrh	r1, [r3, r2]
 8007e14:	19bc      	adds	r4, r7, r6
 8007e16:	19bb      	adds	r3, r7, r6
 8007e18:	881b      	ldrh	r3, [r3, #0]
 8007e1a:	001a      	movs	r2, r3
 8007e1c:	f000 fa70 	bl	8008300 <calculate_crc>
 8007e20:	0003      	movs	r3, r0
 8007e22:	8023      	strh	r3, [r4, #0]
    crc = ((crc << 8) & 0xff00) | ((crc >> 8) & 0x00ff);
 8007e24:	19bb      	adds	r3, r7, r6
 8007e26:	881b      	ldrh	r3, [r3, #0]
 8007e28:	021b      	lsls	r3, r3, #8
 8007e2a:	b21a      	sxth	r2, r3
 8007e2c:	0031      	movs	r1, r6
 8007e2e:	19bb      	adds	r3, r7, r6
 8007e30:	881b      	ldrh	r3, [r3, #0]
 8007e32:	0a1b      	lsrs	r3, r3, #8
 8007e34:	b29b      	uxth	r3, r3
 8007e36:	b21b      	sxth	r3, r3
 8007e38:	4313      	orrs	r3, r2
 8007e3a:	b21a      	sxth	r2, r3
 8007e3c:	187b      	adds	r3, r7, r1
 8007e3e:	801a      	strh	r2, [r3, #0]

    uint8_to_ascii_buffer(p_source_message->op_code, &p_destination_buffer[index]);
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	7818      	ldrb	r0, [r3, #0]
 8007e44:	197b      	adds	r3, r7, r5
 8007e46:	881b      	ldrh	r3, [r3, #0]
 8007e48:	683a      	ldr	r2, [r7, #0]
 8007e4a:	18d3      	adds	r3, r2, r3
 8007e4c:	0019      	movs	r1, r3
 8007e4e:	f000 fbeb 	bl	8008628 <uint8_to_ascii_buffer>
    index += 2;
 8007e52:	197b      	adds	r3, r7, r5
 8007e54:	197a      	adds	r2, r7, r5
 8007e56:	8812      	ldrh	r2, [r2, #0]
 8007e58:	3202      	adds	r2, #2
 8007e5a:	801a      	strh	r2, [r3, #0]

    for (uint16_t i = 0; i < p_source_message->payload_len; i++)
 8007e5c:	230c      	movs	r3, #12
 8007e5e:	18fb      	adds	r3, r7, r3
 8007e60:	2200      	movs	r2, #0
 8007e62:	801a      	strh	r2, [r3, #0]
 8007e64:	e017      	b.n	8007e96 <astronode_create_request_transport+0xc6>
    {
        uint8_to_ascii_buffer(p_source_message->p_payload[i], &p_destination_buffer[index]);
 8007e66:	240c      	movs	r4, #12
 8007e68:	193b      	adds	r3, r7, r4
 8007e6a:	881b      	ldrh	r3, [r3, #0]
 8007e6c:	687a      	ldr	r2, [r7, #4]
 8007e6e:	18d3      	adds	r3, r2, r3
 8007e70:	7858      	ldrb	r0, [r3, #1]
 8007e72:	250e      	movs	r5, #14
 8007e74:	197b      	adds	r3, r7, r5
 8007e76:	881b      	ldrh	r3, [r3, #0]
 8007e78:	683a      	ldr	r2, [r7, #0]
 8007e7a:	18d3      	adds	r3, r2, r3
 8007e7c:	0019      	movs	r1, r3
 8007e7e:	f000 fbd3 	bl	8008628 <uint8_to_ascii_buffer>
        index += 2;
 8007e82:	197b      	adds	r3, r7, r5
 8007e84:	197a      	adds	r2, r7, r5
 8007e86:	8812      	ldrh	r2, [r2, #0]
 8007e88:	3202      	adds	r2, #2
 8007e8a:	801a      	strh	r2, [r3, #0]
    for (uint16_t i = 0; i < p_source_message->payload_len; i++)
 8007e8c:	193b      	adds	r3, r7, r4
 8007e8e:	881a      	ldrh	r2, [r3, #0]
 8007e90:	193b      	adds	r3, r7, r4
 8007e92:	3201      	adds	r2, #1
 8007e94:	801a      	strh	r2, [r3, #0]
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	22c4      	movs	r2, #196	; 0xc4
 8007e9a:	5a9b      	ldrh	r3, [r3, r2]
 8007e9c:	220c      	movs	r2, #12
 8007e9e:	18ba      	adds	r2, r7, r2
 8007ea0:	8812      	ldrh	r2, [r2, #0]
 8007ea2:	429a      	cmp	r2, r3
 8007ea4:	d3df      	bcc.n	8007e66 <astronode_create_request_transport+0x96>
    }

    uint8_to_ascii_buffer(crc >> 8, &p_destination_buffer[index]);
 8007ea6:	250a      	movs	r5, #10
 8007ea8:	197b      	adds	r3, r7, r5
 8007eaa:	881b      	ldrh	r3, [r3, #0]
 8007eac:	0a1b      	lsrs	r3, r3, #8
 8007eae:	b29b      	uxth	r3, r3
 8007eb0:	b2d8      	uxtb	r0, r3
 8007eb2:	240e      	movs	r4, #14
 8007eb4:	193b      	adds	r3, r7, r4
 8007eb6:	881b      	ldrh	r3, [r3, #0]
 8007eb8:	683a      	ldr	r2, [r7, #0]
 8007eba:	18d3      	adds	r3, r2, r3
 8007ebc:	0019      	movs	r1, r3
 8007ebe:	f000 fbb3 	bl	8008628 <uint8_to_ascii_buffer>
    index += 2;
 8007ec2:	0021      	movs	r1, r4
 8007ec4:	187b      	adds	r3, r7, r1
 8007ec6:	187a      	adds	r2, r7, r1
 8007ec8:	8812      	ldrh	r2, [r2, #0]
 8007eca:	3202      	adds	r2, #2
 8007ecc:	801a      	strh	r2, [r3, #0]
    uint8_to_ascii_buffer(crc & 0xFF, &p_destination_buffer[index]);
 8007ece:	197b      	adds	r3, r7, r5
 8007ed0:	881b      	ldrh	r3, [r3, #0]
 8007ed2:	b2d8      	uxtb	r0, r3
 8007ed4:	000c      	movs	r4, r1
 8007ed6:	187b      	adds	r3, r7, r1
 8007ed8:	881b      	ldrh	r3, [r3, #0]
 8007eda:	683a      	ldr	r2, [r7, #0]
 8007edc:	18d3      	adds	r3, r2, r3
 8007ede:	0019      	movs	r1, r3
 8007ee0:	f000 fba2 	bl	8008628 <uint8_to_ascii_buffer>
    index += 2;
 8007ee4:	0020      	movs	r0, r4
 8007ee6:	183b      	adds	r3, r7, r0
 8007ee8:	183a      	adds	r2, r7, r0
 8007eea:	8812      	ldrh	r2, [r2, #0]
 8007eec:	3202      	adds	r2, #2
 8007eee:	801a      	strh	r2, [r3, #0]

    p_destination_buffer[index++] = ASTRONODE_TRANSPORT_ETX;
 8007ef0:	183b      	adds	r3, r7, r0
 8007ef2:	881b      	ldrh	r3, [r3, #0]
 8007ef4:	183a      	adds	r2, r7, r0
 8007ef6:	1c59      	adds	r1, r3, #1
 8007ef8:	8011      	strh	r1, [r2, #0]
 8007efa:	001a      	movs	r2, r3
 8007efc:	683b      	ldr	r3, [r7, #0]
 8007efe:	189b      	adds	r3, r3, r2
 8007f00:	2203      	movs	r2, #3
 8007f02:	701a      	strb	r2, [r3, #0]

    return index;
 8007f04:	183b      	adds	r3, r7, r0
 8007f06:	881b      	ldrh	r3, [r3, #0]
}
 8007f08:	0018      	movs	r0, r3
 8007f0a:	46bd      	mov	sp, r7
 8007f0c:	b005      	add	sp, #20
 8007f0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007f10:	0000ffff 	.word	0x0000ffff

08007f14 <astronode_decode_answer_transport>:

static return_status_t astronode_decode_answer_transport(uint8_t *p_source_buffer, uint16_t length_buffer, astronode_app_msg_t *p_destination_message)
{
 8007f14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007f16:	b089      	sub	sp, #36	; 0x24
 8007f18:	af00      	add	r7, sp, #0
 8007f1a:	60f8      	str	r0, [r7, #12]
 8007f1c:	607a      	str	r2, [r7, #4]
 8007f1e:	230a      	movs	r3, #10
 8007f20:	18fb      	adds	r3, r7, r3
 8007f22:	1c0a      	adds	r2, r1, #0
 8007f24:	801a      	strh	r2, [r3, #0]
    if (p_source_buffer[0] != ASTRONODE_TRANSPORT_STX)
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	781b      	ldrb	r3, [r3, #0]
 8007f2a:	2b02      	cmp	r3, #2
 8007f2c:	d005      	beq.n	8007f3a <astronode_decode_answer_transport+0x26>
    {
        send_debug_logs("ERROR : Message received from the Astronode does not start with STX character.");
 8007f2e:	4bbd      	ldr	r3, [pc, #756]	; (8008224 <astronode_decode_answer_transport+0x310>)
 8007f30:	0018      	movs	r0, r3
 8007f32:	f7fa ffa7 	bl	8002e84 <send_debug_logs>
        return RS_FAILURE;
 8007f36:	2300      	movs	r3, #0
 8007f38:	e170      	b.n	800821c <astronode_decode_answer_transport+0x308>
    }

    if (length_buffer % 2 == 1 || length_buffer < 8) // 8: STX, ETX, 2 x opcode, 4 x CRC
 8007f3a:	210a      	movs	r1, #10
 8007f3c:	187b      	adds	r3, r7, r1
 8007f3e:	881b      	ldrh	r3, [r3, #0]
 8007f40:	2201      	movs	r2, #1
 8007f42:	4013      	ands	r3, r2
 8007f44:	b29b      	uxth	r3, r3
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d103      	bne.n	8007f52 <astronode_decode_answer_transport+0x3e>
 8007f4a:	187b      	adds	r3, r7, r1
 8007f4c:	881b      	ldrh	r3, [r3, #0]
 8007f4e:	2b07      	cmp	r3, #7
 8007f50:	d805      	bhi.n	8007f5e <astronode_decode_answer_transport+0x4a>
    {
        send_debug_logs("ERROR : Message received from the Astronode is missing at least one character.");
 8007f52:	4bb5      	ldr	r3, [pc, #724]	; (8008228 <astronode_decode_answer_transport+0x314>)
 8007f54:	0018      	movs	r0, r3
 8007f56:	f7fa ff95 	bl	8002e84 <send_debug_logs>
        return RS_FAILURE;
 8007f5a:	2300      	movs	r3, #0
 8007f5c:	e15e      	b.n	800821c <astronode_decode_answer_transport+0x308>
    }

    p_destination_message->payload_len = (length_buffer - 8) / 2;
 8007f5e:	230a      	movs	r3, #10
 8007f60:	18fb      	adds	r3, r7, r3
 8007f62:	881b      	ldrh	r3, [r3, #0]
 8007f64:	3b08      	subs	r3, #8
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	da00      	bge.n	8007f6c <astronode_decode_answer_transport+0x58>
 8007f6a:	3301      	adds	r3, #1
 8007f6c:	105b      	asrs	r3, r3, #1
 8007f6e:	b299      	uxth	r1, r3
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	22c4      	movs	r2, #196	; 0xc4
 8007f74:	5299      	strh	r1, [r3, r2]

    if (p_source_buffer[length_buffer - 1] != ASTRONODE_TRANSPORT_ETX)
 8007f76:	230a      	movs	r3, #10
 8007f78:	18fb      	adds	r3, r7, r3
 8007f7a:	881b      	ldrh	r3, [r3, #0]
 8007f7c:	3b01      	subs	r3, #1
 8007f7e:	68fa      	ldr	r2, [r7, #12]
 8007f80:	18d3      	adds	r3, r2, r3
 8007f82:	781b      	ldrb	r3, [r3, #0]
 8007f84:	2b03      	cmp	r3, #3
 8007f86:	d005      	beq.n	8007f94 <astronode_decode_answer_transport+0x80>
    {
        send_debug_logs("ERROR : Message received from the Astronode does not end with ETX character.");
 8007f88:	4ba8      	ldr	r3, [pc, #672]	; (800822c <astronode_decode_answer_transport+0x318>)
 8007f8a:	0018      	movs	r0, r3
 8007f8c:	f7fa ff7a 	bl	8002e84 <send_debug_logs>
        return RS_FAILURE;
 8007f90:	2300      	movs	r3, #0
 8007f92:	e143      	b.n	800821c <astronode_decode_answer_transport+0x308>
    }

    uint8_t nibble_high = 0;
 8007f94:	2117      	movs	r1, #23
 8007f96:	187b      	adds	r3, r7, r1
 8007f98:	2200      	movs	r2, #0
 8007f9a:	701a      	strb	r2, [r3, #0]
    uint8_t nibble_low = 0;
 8007f9c:	2416      	movs	r4, #22
 8007f9e:	193b      	adds	r3, r7, r4
 8007fa0:	2200      	movs	r2, #0
 8007fa2:	701a      	strb	r2, [r3, #0]

    // Op code
    if (ascii_to_value(p_source_buffer[1], &nibble_high) == false
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	3301      	adds	r3, #1
 8007fa8:	781b      	ldrb	r3, [r3, #0]
 8007faa:	187a      	adds	r2, r7, r1
 8007fac:	0011      	movs	r1, r2
 8007fae:	0018      	movs	r0, r3
 8007fb0:	f7ff fee2 	bl	8007d78 <ascii_to_value>
 8007fb4:	0003      	movs	r3, r0
 8007fb6:	001a      	movs	r2, r3
 8007fb8:	2301      	movs	r3, #1
 8007fba:	4053      	eors	r3, r2
 8007fbc:	b2db      	uxtb	r3, r3
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d10e      	bne.n	8007fe0 <astronode_decode_answer_transport+0xcc>
        || ascii_to_value(p_source_buffer[2], &nibble_low) == false)
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	3302      	adds	r3, #2
 8007fc6:	781b      	ldrb	r3, [r3, #0]
 8007fc8:	193a      	adds	r2, r7, r4
 8007fca:	0011      	movs	r1, r2
 8007fcc:	0018      	movs	r0, r3
 8007fce:	f7ff fed3 	bl	8007d78 <ascii_to_value>
 8007fd2:	0003      	movs	r3, r0
 8007fd4:	001a      	movs	r2, r3
 8007fd6:	2301      	movs	r3, #1
 8007fd8:	4053      	eors	r3, r2
 8007fda:	b2db      	uxtb	r3, r3
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d005      	beq.n	8007fec <astronode_decode_answer_transport+0xd8>
    {
        send_debug_logs("ERROR : Message received from the Astronode contains a non-ASCII character.");
 8007fe0:	4b93      	ldr	r3, [pc, #588]	; (8008230 <astronode_decode_answer_transport+0x31c>)
 8007fe2:	0018      	movs	r0, r3
 8007fe4:	f7fa ff4e 	bl	8002e84 <send_debug_logs>
        return RS_FAILURE;
 8007fe8:	2300      	movs	r3, #0
 8007fea:	e117      	b.n	800821c <astronode_decode_answer_transport+0x308>
    }

    p_destination_message->op_code = (nibble_high << 4) + nibble_low;
 8007fec:	2317      	movs	r3, #23
 8007fee:	18fb      	adds	r3, r7, r3
 8007ff0:	781b      	ldrb	r3, [r3, #0]
 8007ff2:	011b      	lsls	r3, r3, #4
 8007ff4:	b2da      	uxtb	r2, r3
 8007ff6:	2316      	movs	r3, #22
 8007ff8:	18fb      	adds	r3, r7, r3
 8007ffa:	781b      	ldrb	r3, [r3, #0]
 8007ffc:	18d3      	adds	r3, r2, r3
 8007ffe:	b2da      	uxtb	r2, r3
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	701a      	strb	r2, [r3, #0]

    // Payload
    for (uint16_t i = 3, j = 0; i < length_buffer - 5; i += 2)
 8008004:	231e      	movs	r3, #30
 8008006:	18fb      	adds	r3, r7, r3
 8008008:	2203      	movs	r2, #3
 800800a:	801a      	strh	r2, [r3, #0]
 800800c:	231c      	movs	r3, #28
 800800e:	18fb      	adds	r3, r7, r3
 8008010:	2200      	movs	r2, #0
 8008012:	801a      	strh	r2, [r3, #0]
 8008014:	e045      	b.n	80080a2 <astronode_decode_answer_transport+0x18e>
    {
        if (ascii_to_value(p_source_buffer[i], &nibble_high) == false
 8008016:	241e      	movs	r4, #30
 8008018:	193b      	adds	r3, r7, r4
 800801a:	881b      	ldrh	r3, [r3, #0]
 800801c:	68fa      	ldr	r2, [r7, #12]
 800801e:	18d3      	adds	r3, r2, r3
 8008020:	781b      	ldrb	r3, [r3, #0]
 8008022:	2217      	movs	r2, #23
 8008024:	18ba      	adds	r2, r7, r2
 8008026:	0011      	movs	r1, r2
 8008028:	0018      	movs	r0, r3
 800802a:	f7ff fea5 	bl	8007d78 <ascii_to_value>
 800802e:	0003      	movs	r3, r0
 8008030:	001a      	movs	r2, r3
 8008032:	2301      	movs	r3, #1
 8008034:	4053      	eors	r3, r2
 8008036:	b2db      	uxtb	r3, r3
 8008038:	2b00      	cmp	r3, #0
 800803a:	d112      	bne.n	8008062 <astronode_decode_answer_transport+0x14e>
            || ascii_to_value(p_source_buffer[i + 1], &nibble_low) == false)
 800803c:	193b      	adds	r3, r7, r4
 800803e:	881b      	ldrh	r3, [r3, #0]
 8008040:	3301      	adds	r3, #1
 8008042:	68fa      	ldr	r2, [r7, #12]
 8008044:	18d3      	adds	r3, r2, r3
 8008046:	781b      	ldrb	r3, [r3, #0]
 8008048:	2216      	movs	r2, #22
 800804a:	18ba      	adds	r2, r7, r2
 800804c:	0011      	movs	r1, r2
 800804e:	0018      	movs	r0, r3
 8008050:	f7ff fe92 	bl	8007d78 <ascii_to_value>
 8008054:	0003      	movs	r3, r0
 8008056:	001a      	movs	r2, r3
 8008058:	2301      	movs	r3, #1
 800805a:	4053      	eors	r3, r2
 800805c:	b2db      	uxtb	r3, r3
 800805e:	2b00      	cmp	r3, #0
 8008060:	d005      	beq.n	800806e <astronode_decode_answer_transport+0x15a>
        {
            send_debug_logs("ERROR : Message received from the Astronode contains a non-ASCII character.");
 8008062:	4b73      	ldr	r3, [pc, #460]	; (8008230 <astronode_decode_answer_transport+0x31c>)
 8008064:	0018      	movs	r0, r3
 8008066:	f7fa ff0d 	bl	8002e84 <send_debug_logs>
            return RS_FAILURE;
 800806a:	2300      	movs	r3, #0
 800806c:	e0d6      	b.n	800821c <astronode_decode_answer_transport+0x308>
        }

        p_destination_message->p_payload[j++] = (nibble_high << 4) + nibble_low;
 800806e:	2317      	movs	r3, #23
 8008070:	18fb      	adds	r3, r7, r3
 8008072:	781b      	ldrb	r3, [r3, #0]
 8008074:	011b      	lsls	r3, r3, #4
 8008076:	b2d9      	uxtb	r1, r3
 8008078:	2316      	movs	r3, #22
 800807a:	18fb      	adds	r3, r7, r3
 800807c:	781a      	ldrb	r2, [r3, #0]
 800807e:	201c      	movs	r0, #28
 8008080:	183b      	adds	r3, r7, r0
 8008082:	881b      	ldrh	r3, [r3, #0]
 8008084:	1838      	adds	r0, r7, r0
 8008086:	1c5c      	adds	r4, r3, #1
 8008088:	8004      	strh	r4, [r0, #0]
 800808a:	0018      	movs	r0, r3
 800808c:	188b      	adds	r3, r1, r2
 800808e:	b2da      	uxtb	r2, r3
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	181b      	adds	r3, r3, r0
 8008094:	705a      	strb	r2, [r3, #1]
    for (uint16_t i = 3, j = 0; i < length_buffer - 5; i += 2)
 8008096:	221e      	movs	r2, #30
 8008098:	18bb      	adds	r3, r7, r2
 800809a:	18ba      	adds	r2, r7, r2
 800809c:	8812      	ldrh	r2, [r2, #0]
 800809e:	3202      	adds	r2, #2
 80080a0:	801a      	strh	r2, [r3, #0]
 80080a2:	231e      	movs	r3, #30
 80080a4:	18fb      	adds	r3, r7, r3
 80080a6:	881a      	ldrh	r2, [r3, #0]
 80080a8:	260a      	movs	r6, #10
 80080aa:	19bb      	adds	r3, r7, r6
 80080ac:	881b      	ldrh	r3, [r3, #0]
 80080ae:	3b05      	subs	r3, #5
 80080b0:	429a      	cmp	r2, r3
 80080b2:	dbb0      	blt.n	8008016 <astronode_decode_answer_transport+0x102>
    }

    // CRC
    uint16_t crc_calculated = calculate_crc((const uint8_t *)&p_destination_message->op_code, 1, 0xFFFF);
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	251a      	movs	r5, #26
 80080b8:	197c      	adds	r4, r7, r5
 80080ba:	4a5e      	ldr	r2, [pc, #376]	; (8008234 <astronode_decode_answer_transport+0x320>)
 80080bc:	2101      	movs	r1, #1
 80080be:	0018      	movs	r0, r3
 80080c0:	f000 f91e 	bl	8008300 <calculate_crc>
 80080c4:	0003      	movs	r3, r0
 80080c6:	8023      	strh	r3, [r4, #0]
    crc_calculated = calculate_crc((const uint8_t *)&p_destination_message->p_payload, p_destination_message->payload_len, crc_calculated);
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	1c58      	adds	r0, r3, #1
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	22c4      	movs	r2, #196	; 0xc4
 80080d0:	5a99      	ldrh	r1, [r3, r2]
 80080d2:	197c      	adds	r4, r7, r5
 80080d4:	197b      	adds	r3, r7, r5
 80080d6:	881b      	ldrh	r3, [r3, #0]
 80080d8:	001a      	movs	r2, r3
 80080da:	f000 f911 	bl	8008300 <calculate_crc>
 80080de:	0003      	movs	r3, r0
 80080e0:	8023      	strh	r3, [r4, #0]
    crc_calculated = ((crc_calculated << 8) & 0xff00) | ((crc_calculated >> 8) & 0x00ff);
 80080e2:	197b      	adds	r3, r7, r5
 80080e4:	881b      	ldrh	r3, [r3, #0]
 80080e6:	021b      	lsls	r3, r3, #8
 80080e8:	b21a      	sxth	r2, r3
 80080ea:	0029      	movs	r1, r5
 80080ec:	197b      	adds	r3, r7, r5
 80080ee:	881b      	ldrh	r3, [r3, #0]
 80080f0:	0a1b      	lsrs	r3, r3, #8
 80080f2:	b29b      	uxth	r3, r3
 80080f4:	b21b      	sxth	r3, r3
 80080f6:	4313      	orrs	r3, r2
 80080f8:	b21a      	sxth	r2, r3
 80080fa:	187b      	adds	r3, r7, r1
 80080fc:	801a      	strh	r2, [r3, #0]


    if (ascii_to_value(p_source_buffer[length_buffer - 5], &nibble_high) == false
 80080fe:	19bb      	adds	r3, r7, r6
 8008100:	881b      	ldrh	r3, [r3, #0]
 8008102:	3b05      	subs	r3, #5
 8008104:	68fa      	ldr	r2, [r7, #12]
 8008106:	18d3      	adds	r3, r2, r3
 8008108:	781b      	ldrb	r3, [r3, #0]
 800810a:	2217      	movs	r2, #23
 800810c:	18ba      	adds	r2, r7, r2
 800810e:	0011      	movs	r1, r2
 8008110:	0018      	movs	r0, r3
 8008112:	f7ff fe31 	bl	8007d78 <ascii_to_value>
 8008116:	0003      	movs	r3, r0
 8008118:	001a      	movs	r2, r3
 800811a:	2301      	movs	r3, #1
 800811c:	4053      	eors	r3, r2
 800811e:	b2db      	uxtb	r3, r3
 8008120:	2b00      	cmp	r3, #0
 8008122:	d112      	bne.n	800814a <astronode_decode_answer_transport+0x236>
        || ascii_to_value(p_source_buffer[length_buffer - 4], &nibble_low) == false)
 8008124:	19bb      	adds	r3, r7, r6
 8008126:	881b      	ldrh	r3, [r3, #0]
 8008128:	3b04      	subs	r3, #4
 800812a:	68fa      	ldr	r2, [r7, #12]
 800812c:	18d3      	adds	r3, r2, r3
 800812e:	781b      	ldrb	r3, [r3, #0]
 8008130:	2216      	movs	r2, #22
 8008132:	18ba      	adds	r2, r7, r2
 8008134:	0011      	movs	r1, r2
 8008136:	0018      	movs	r0, r3
 8008138:	f7ff fe1e 	bl	8007d78 <ascii_to_value>
 800813c:	0003      	movs	r3, r0
 800813e:	001a      	movs	r2, r3
 8008140:	2301      	movs	r3, #1
 8008142:	4053      	eors	r3, r2
 8008144:	b2db      	uxtb	r3, r3
 8008146:	2b00      	cmp	r3, #0
 8008148:	d005      	beq.n	8008156 <astronode_decode_answer_transport+0x242>
    {
        send_debug_logs("ERROR : Message received from the Astronode contains a non-ASCII character.");
 800814a:	4b39      	ldr	r3, [pc, #228]	; (8008230 <astronode_decode_answer_transport+0x31c>)
 800814c:	0018      	movs	r0, r3
 800814e:	f7fa fe99 	bl	8002e84 <send_debug_logs>
        return RS_FAILURE;
 8008152:	2300      	movs	r3, #0
 8008154:	e062      	b.n	800821c <astronode_decode_answer_transport+0x308>
    }

    uint16_t crc_received = (nibble_high << 12) + (nibble_low << 8);
 8008156:	2017      	movs	r0, #23
 8008158:	183b      	adds	r3, r7, r0
 800815a:	781b      	ldrb	r3, [r3, #0]
 800815c:	b29b      	uxth	r3, r3
 800815e:	031b      	lsls	r3, r3, #12
 8008160:	b299      	uxth	r1, r3
 8008162:	2416      	movs	r4, #22
 8008164:	193b      	adds	r3, r7, r4
 8008166:	781b      	ldrb	r3, [r3, #0]
 8008168:	b29b      	uxth	r3, r3
 800816a:	021b      	lsls	r3, r3, #8
 800816c:	b29a      	uxth	r2, r3
 800816e:	2318      	movs	r3, #24
 8008170:	18fb      	adds	r3, r7, r3
 8008172:	188a      	adds	r2, r1, r2
 8008174:	801a      	strh	r2, [r3, #0]

    if (ascii_to_value(p_source_buffer[length_buffer - 3], &nibble_high) == false
 8008176:	250a      	movs	r5, #10
 8008178:	197b      	adds	r3, r7, r5
 800817a:	881b      	ldrh	r3, [r3, #0]
 800817c:	3b03      	subs	r3, #3
 800817e:	68fa      	ldr	r2, [r7, #12]
 8008180:	18d3      	adds	r3, r2, r3
 8008182:	781b      	ldrb	r3, [r3, #0]
 8008184:	183a      	adds	r2, r7, r0
 8008186:	0011      	movs	r1, r2
 8008188:	0018      	movs	r0, r3
 800818a:	f7ff fdf5 	bl	8007d78 <ascii_to_value>
 800818e:	0003      	movs	r3, r0
 8008190:	001a      	movs	r2, r3
 8008192:	2301      	movs	r3, #1
 8008194:	4053      	eors	r3, r2
 8008196:	b2db      	uxtb	r3, r3
 8008198:	2b00      	cmp	r3, #0
 800819a:	d111      	bne.n	80081c0 <astronode_decode_answer_transport+0x2ac>
        || ascii_to_value(p_source_buffer[length_buffer - 2], &nibble_low) == false)
 800819c:	197b      	adds	r3, r7, r5
 800819e:	881b      	ldrh	r3, [r3, #0]
 80081a0:	3b02      	subs	r3, #2
 80081a2:	68fa      	ldr	r2, [r7, #12]
 80081a4:	18d3      	adds	r3, r2, r3
 80081a6:	781b      	ldrb	r3, [r3, #0]
 80081a8:	193a      	adds	r2, r7, r4
 80081aa:	0011      	movs	r1, r2
 80081ac:	0018      	movs	r0, r3
 80081ae:	f7ff fde3 	bl	8007d78 <ascii_to_value>
 80081b2:	0003      	movs	r3, r0
 80081b4:	001a      	movs	r2, r3
 80081b6:	2301      	movs	r3, #1
 80081b8:	4053      	eors	r3, r2
 80081ba:	b2db      	uxtb	r3, r3
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d005      	beq.n	80081cc <astronode_decode_answer_transport+0x2b8>
    {
        send_debug_logs("ERROR : Message received from the Astronode contains a non-ASCII character.");
 80081c0:	4b1b      	ldr	r3, [pc, #108]	; (8008230 <astronode_decode_answer_transport+0x31c>)
 80081c2:	0018      	movs	r0, r3
 80081c4:	f7fa fe5e 	bl	8002e84 <send_debug_logs>
        return RS_FAILURE;
 80081c8:	2300      	movs	r3, #0
 80081ca:	e027      	b.n	800821c <astronode_decode_answer_transport+0x308>
    }

    crc_received += (nibble_high << 4) + nibble_low;
 80081cc:	2317      	movs	r3, #23
 80081ce:	18fb      	adds	r3, r7, r3
 80081d0:	781b      	ldrb	r3, [r3, #0]
 80081d2:	b29b      	uxth	r3, r3
 80081d4:	011b      	lsls	r3, r3, #4
 80081d6:	b29a      	uxth	r2, r3
 80081d8:	2316      	movs	r3, #22
 80081da:	18fb      	adds	r3, r7, r3
 80081dc:	781b      	ldrb	r3, [r3, #0]
 80081de:	b29b      	uxth	r3, r3
 80081e0:	18d3      	adds	r3, r2, r3
 80081e2:	b299      	uxth	r1, r3
 80081e4:	2018      	movs	r0, #24
 80081e6:	183b      	adds	r3, r7, r0
 80081e8:	183a      	adds	r2, r7, r0
 80081ea:	8812      	ldrh	r2, [r2, #0]
 80081ec:	188a      	adds	r2, r1, r2
 80081ee:	801a      	strh	r2, [r3, #0]

    if (crc_received != crc_calculated)
 80081f0:	183a      	adds	r2, r7, r0
 80081f2:	231a      	movs	r3, #26
 80081f4:	18fb      	adds	r3, r7, r3
 80081f6:	8812      	ldrh	r2, [r2, #0]
 80081f8:	881b      	ldrh	r3, [r3, #0]
 80081fa:	429a      	cmp	r2, r3
 80081fc:	d005      	beq.n	800820a <astronode_decode_answer_transport+0x2f6>
    {
        send_debug_logs("ERROR : CRC sent by the Astronode does not match the expected CRC");
 80081fe:	4b0e      	ldr	r3, [pc, #56]	; (8008238 <astronode_decode_answer_transport+0x324>)
 8008200:	0018      	movs	r0, r3
 8008202:	f7fa fe3f 	bl	8002e84 <send_debug_logs>
        return RS_FAILURE;
 8008206:	2300      	movs	r3, #0
 8008208:	e008      	b.n	800821c <astronode_decode_answer_transport+0x308>
    }

    if (p_destination_message->op_code == ASTRONODE_OP_CODE_ERROR)
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	781b      	ldrb	r3, [r3, #0]
 800820e:	2bff      	cmp	r3, #255	; 0xff
 8008210:	d103      	bne.n	800821a <astronode_decode_answer_transport+0x306>
    {
        check_for_error(p_destination_message);
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	0018      	movs	r0, r3
 8008216:	f000 f8c3 	bl	80083a0 <check_for_error>
    }

    return RS_SUCCESS;
 800821a:	2301      	movs	r3, #1
}
 800821c:	0018      	movs	r0, r3
 800821e:	46bd      	mov	sp, r7
 8008220:	b009      	add	sp, #36	; 0x24
 8008222:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008224:	08012250 	.word	0x08012250
 8008228:	080122a0 	.word	0x080122a0
 800822c:	080122f0 	.word	0x080122f0
 8008230:	08012340 	.word	0x08012340
 8008234:	0000ffff 	.word	0x0000ffff
 8008238:	0801238c 	.word	0x0801238c

0800823c <astronode_transport_send_receive>:

return_status_t astronode_transport_send_receive(astronode_app_msg_t *p_request, astronode_app_msg_t *p_answer)
{
 800823c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800823e:	4c2b      	ldr	r4, [pc, #172]	; (80082ec <astronode_transport_send_receive+0xb0>)
 8008240:	44a5      	add	sp, r4
 8008242:	af00      	add	r7, sp, #0
 8008244:	6078      	str	r0, [r7, #4]
 8008246:	6039      	str	r1, [r7, #0]
    uint8_t request_transport[ASTRONODE_TRANSPORT_MSG_MAX_LEN_BYTES] = {0};
 8008248:	4b29      	ldr	r3, [pc, #164]	; (80082f0 <astronode_transport_send_receive+0xb4>)
 800824a:	25ca      	movs	r5, #202	; 0xca
 800824c:	00ad      	lsls	r5, r5, #2
 800824e:	195b      	adds	r3, r3, r5
 8008250:	19db      	adds	r3, r3, r7
 8008252:	2200      	movs	r2, #0
 8008254:	601a      	str	r2, [r3, #0]
 8008256:	3304      	adds	r3, #4
 8008258:	22c4      	movs	r2, #196	; 0xc4
 800825a:	0052      	lsls	r2, r2, #1
 800825c:	2100      	movs	r1, #0
 800825e:	0018      	movs	r0, r3
 8008260:	f002 f902 	bl	800a468 <memset>
    uint8_t answer_transport[ASTRONODE_TRANSPORT_MSG_MAX_LEN_BYTES] = {0};
 8008264:	4b23      	ldr	r3, [pc, #140]	; (80082f4 <astronode_transport_send_receive+0xb8>)
 8008266:	195b      	adds	r3, r3, r5
 8008268:	19db      	adds	r3, r3, r7
 800826a:	2200      	movs	r2, #0
 800826c:	601a      	str	r2, [r3, #0]
 800826e:	3304      	adds	r3, #4
 8008270:	22c4      	movs	r2, #196	; 0xc4
 8008272:	0052      	lsls	r2, r2, #1
 8008274:	2100      	movs	r1, #0
 8008276:	0018      	movs	r0, r3
 8008278:	f002 f8f6 	bl	800a468 <memset>
    uint16_t answer_length =  0;
 800827c:	4b1e      	ldr	r3, [pc, #120]	; (80082f8 <astronode_transport_send_receive+0xbc>)
 800827e:	195b      	adds	r3, r3, r5
 8008280:	19db      	adds	r3, r3, r7
 8008282:	2200      	movs	r2, #0
 8008284:	801a      	strh	r2, [r3, #0]

    uint16_t request_length = astronode_create_request_transport(p_request, request_transport);
 8008286:	4e1d      	ldr	r6, [pc, #116]	; (80082fc <astronode_transport_send_receive+0xc0>)
 8008288:	19bc      	adds	r4, r7, r6
 800828a:	23cc      	movs	r3, #204	; 0xcc
 800828c:	005b      	lsls	r3, r3, #1
 800828e:	18fa      	adds	r2, r7, r3
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	0011      	movs	r1, r2
 8008294:	0018      	movs	r0, r3
 8008296:	f7ff fd9b 	bl	8007dd0 <astronode_create_request_transport>
 800829a:	0003      	movs	r3, r0
 800829c:	8023      	strh	r3, [r4, #0]

    send_astronode_request(request_transport, request_length);
 800829e:	19bb      	adds	r3, r7, r6
 80082a0:	881a      	ldrh	r2, [r3, #0]
 80082a2:	23cc      	movs	r3, #204	; 0xcc
 80082a4:	005b      	lsls	r3, r3, #1
 80082a6:	18fb      	adds	r3, r7, r3
 80082a8:	0011      	movs	r1, r2
 80082aa:	0018      	movs	r0, r3
 80082ac:	f7fa ff28 	bl	8003100 <send_astronode_request>
    if(receive_astronode_answer(answer_transport, &answer_length) == RS_SUCCESS)
 80082b0:	230a      	movs	r3, #10
 80082b2:	18fa      	adds	r2, r7, r3
 80082b4:	240c      	movs	r4, #12
 80082b6:	193b      	adds	r3, r7, r4
 80082b8:	0011      	movs	r1, r2
 80082ba:	0018      	movs	r0, r3
 80082bc:	f000 f92c 	bl	8008518 <receive_astronode_answer>
 80082c0:	0003      	movs	r3, r0
 80082c2:	2b01      	cmp	r3, #1
 80082c4:	d10a      	bne.n	80082dc <astronode_transport_send_receive+0xa0>
    {
        return astronode_decode_answer_transport(answer_transport, answer_length, p_answer);
 80082c6:	4b0c      	ldr	r3, [pc, #48]	; (80082f8 <astronode_transport_send_receive+0xbc>)
 80082c8:	195b      	adds	r3, r3, r5
 80082ca:	19db      	adds	r3, r3, r7
 80082cc:	8819      	ldrh	r1, [r3, #0]
 80082ce:	683a      	ldr	r2, [r7, #0]
 80082d0:	193b      	adds	r3, r7, r4
 80082d2:	0018      	movs	r0, r3
 80082d4:	f7ff fe1e 	bl	8007f14 <astronode_decode_answer_transport>
 80082d8:	0003      	movs	r3, r0
 80082da:	e000      	b.n	80082de <astronode_transport_send_receive+0xa2>
    }
    else
    {
        return RS_FAILURE;
 80082dc:	2300      	movs	r3, #0
    }
}
 80082de:	0018      	movs	r0, r3
 80082e0:	46bd      	mov	sp, r7
 80082e2:	23cb      	movs	r3, #203	; 0xcb
 80082e4:	009b      	lsls	r3, r3, #2
 80082e6:	449d      	add	sp, r3
 80082e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80082ea:	46c0      	nop			; (mov r8, r8)
 80082ec:	fffffcd4 	.word	0xfffffcd4
 80082f0:	fffffe70 	.word	0xfffffe70
 80082f4:	fffffce4 	.word	0xfffffce4
 80082f8:	fffffce2 	.word	0xfffffce2
 80082fc:	00000326 	.word	0x00000326

08008300 <calculate_crc>:

static uint16_t calculate_crc(const uint8_t *p_data, uint16_t data_len, uint16_t init_value)
{
 8008300:	b590      	push	{r4, r7, lr}
 8008302:	b085      	sub	sp, #20
 8008304:	af00      	add	r7, sp, #0
 8008306:	6078      	str	r0, [r7, #4]
 8008308:	0008      	movs	r0, r1
 800830a:	0011      	movs	r1, r2
 800830c:	1cbb      	adds	r3, r7, #2
 800830e:	1c02      	adds	r2, r0, #0
 8008310:	801a      	strh	r2, [r3, #0]
 8008312:	003b      	movs	r3, r7
 8008314:	1c0a      	adds	r2, r1, #0
 8008316:	801a      	strh	r2, [r3, #0]
    uint16_t crc = init_value;
 8008318:	230e      	movs	r3, #14
 800831a:	18fb      	adds	r3, r7, r3
 800831c:	003a      	movs	r2, r7
 800831e:	8812      	ldrh	r2, [r2, #0]
 8008320:	801a      	strh	r2, [r3, #0]

    while (data_len--)
 8008322:	e02e      	b.n	8008382 <calculate_crc+0x82>
    {
        uint16_t x = crc >> 8 ^ *p_data++;
 8008324:	240e      	movs	r4, #14
 8008326:	193b      	adds	r3, r7, r4
 8008328:	881b      	ldrh	r3, [r3, #0]
 800832a:	0a1b      	lsrs	r3, r3, #8
 800832c:	b299      	uxth	r1, r3
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	1c5a      	adds	r2, r3, #1
 8008332:	607a      	str	r2, [r7, #4]
 8008334:	781b      	ldrb	r3, [r3, #0]
 8008336:	b29a      	uxth	r2, r3
 8008338:	200c      	movs	r0, #12
 800833a:	183b      	adds	r3, r7, r0
 800833c:	404a      	eors	r2, r1
 800833e:	801a      	strh	r2, [r3, #0]
        x ^= x >> 4;
 8008340:	183b      	adds	r3, r7, r0
 8008342:	881b      	ldrh	r3, [r3, #0]
 8008344:	091b      	lsrs	r3, r3, #4
 8008346:	b299      	uxth	r1, r3
 8008348:	183b      	adds	r3, r7, r0
 800834a:	183a      	adds	r2, r7, r0
 800834c:	8812      	ldrh	r2, [r2, #0]
 800834e:	404a      	eors	r2, r1
 8008350:	801a      	strh	r2, [r3, #0]
        crc = (crc << 8) ^ (x << 12) ^ (x << 5) ^ (x);
 8008352:	0021      	movs	r1, r4
 8008354:	187b      	adds	r3, r7, r1
 8008356:	881b      	ldrh	r3, [r3, #0]
 8008358:	021b      	lsls	r3, r3, #8
 800835a:	b21a      	sxth	r2, r3
 800835c:	183b      	adds	r3, r7, r0
 800835e:	881b      	ldrh	r3, [r3, #0]
 8008360:	031b      	lsls	r3, r3, #12
 8008362:	b21b      	sxth	r3, r3
 8008364:	4053      	eors	r3, r2
 8008366:	b21a      	sxth	r2, r3
 8008368:	183b      	adds	r3, r7, r0
 800836a:	881b      	ldrh	r3, [r3, #0]
 800836c:	015b      	lsls	r3, r3, #5
 800836e:	b21b      	sxth	r3, r3
 8008370:	4053      	eors	r3, r2
 8008372:	b21a      	sxth	r2, r3
 8008374:	183b      	adds	r3, r7, r0
 8008376:	2000      	movs	r0, #0
 8008378:	5e1b      	ldrsh	r3, [r3, r0]
 800837a:	4053      	eors	r3, r2
 800837c:	b21a      	sxth	r2, r3
 800837e:	187b      	adds	r3, r7, r1
 8008380:	801a      	strh	r2, [r3, #0]
    while (data_len--)
 8008382:	1cbb      	adds	r3, r7, #2
 8008384:	881b      	ldrh	r3, [r3, #0]
 8008386:	1cba      	adds	r2, r7, #2
 8008388:	1e59      	subs	r1, r3, #1
 800838a:	8011      	strh	r1, [r2, #0]
 800838c:	2b00      	cmp	r3, #0
 800838e:	d1c9      	bne.n	8008324 <calculate_crc+0x24>
    }
    return crc;
 8008390:	230e      	movs	r3, #14
 8008392:	18fb      	adds	r3, r7, r3
 8008394:	881b      	ldrh	r3, [r3, #0]
}
 8008396:	0018      	movs	r0, r3
 8008398:	46bd      	mov	sp, r7
 800839a:	b005      	add	sp, #20
 800839c:	bd90      	pop	{r4, r7, pc}
	...

080083a0 <check_for_error>:

static void check_for_error(astronode_app_msg_t *p_answer)
{
 80083a0:	b580      	push	{r7, lr}
 80083a2:	b084      	sub	sp, #16
 80083a4:	af00      	add	r7, sp, #0
 80083a6:	6078      	str	r0, [r7, #4]
    uint16_t error_code = p_answer->p_payload[0] + (p_answer->p_payload[1] << 8);
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	785b      	ldrb	r3, [r3, #1]
 80083ac:	b299      	uxth	r1, r3
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	789b      	ldrb	r3, [r3, #2]
 80083b2:	b29b      	uxth	r3, r3
 80083b4:	021b      	lsls	r3, r3, #8
 80083b6:	b29a      	uxth	r2, r3
 80083b8:	200e      	movs	r0, #14
 80083ba:	183b      	adds	r3, r7, r0
 80083bc:	188a      	adds	r2, r1, r2
 80083be:	801a      	strh	r2, [r3, #0]

    switch (error_code)
 80083c0:	183b      	adds	r3, r7, r0
 80083c2:	881b      	ldrh	r3, [r3, #0]
 80083c4:	4a40      	ldr	r2, [pc, #256]	; (80084c8 <check_for_error+0x128>)
 80083c6:	4293      	cmp	r3, r2
 80083c8:	d100      	bne.n	80083cc <check_for_error+0x2c>
 80083ca:	e06f      	b.n	80084ac <check_for_error+0x10c>
 80083cc:	4a3e      	ldr	r2, [pc, #248]	; (80084c8 <check_for_error+0x128>)
 80083ce:	4293      	cmp	r3, r2
 80083d0:	dd00      	ble.n	80083d4 <check_for_error+0x34>
 80083d2:	e070      	b.n	80084b6 <check_for_error+0x116>
 80083d4:	4a3d      	ldr	r2, [pc, #244]	; (80084cc <check_for_error+0x12c>)
 80083d6:	4293      	cmp	r3, r2
 80083d8:	d100      	bne.n	80083dc <check_for_error+0x3c>
 80083da:	e062      	b.n	80084a2 <check_for_error+0x102>
 80083dc:	4a3b      	ldr	r2, [pc, #236]	; (80084cc <check_for_error+0x12c>)
 80083de:	4293      	cmp	r3, r2
 80083e0:	dd00      	ble.n	80083e4 <check_for_error+0x44>
 80083e2:	e068      	b.n	80084b6 <check_for_error+0x116>
 80083e4:	4a3a      	ldr	r2, [pc, #232]	; (80084d0 <check_for_error+0x130>)
 80083e6:	4293      	cmp	r3, r2
 80083e8:	d056      	beq.n	8008498 <check_for_error+0xf8>
 80083ea:	4a39      	ldr	r2, [pc, #228]	; (80084d0 <check_for_error+0x130>)
 80083ec:	4293      	cmp	r3, r2
 80083ee:	dd00      	ble.n	80083f2 <check_for_error+0x52>
 80083f0:	e061      	b.n	80084b6 <check_for_error+0x116>
 80083f2:	4a38      	ldr	r2, [pc, #224]	; (80084d4 <check_for_error+0x134>)
 80083f4:	4293      	cmp	r3, r2
 80083f6:	d04a      	beq.n	800848e <check_for_error+0xee>
 80083f8:	4a36      	ldr	r2, [pc, #216]	; (80084d4 <check_for_error+0x134>)
 80083fa:	4293      	cmp	r3, r2
 80083fc:	dc5b      	bgt.n	80084b6 <check_for_error+0x116>
 80083fe:	4a36      	ldr	r2, [pc, #216]	; (80084d8 <check_for_error+0x138>)
 8008400:	4293      	cmp	r3, r2
 8008402:	d03f      	beq.n	8008484 <check_for_error+0xe4>
 8008404:	4a34      	ldr	r2, [pc, #208]	; (80084d8 <check_for_error+0x138>)
 8008406:	4293      	cmp	r3, r2
 8008408:	dc55      	bgt.n	80084b6 <check_for_error+0x116>
 800840a:	4a34      	ldr	r2, [pc, #208]	; (80084dc <check_for_error+0x13c>)
 800840c:	4293      	cmp	r3, r2
 800840e:	d034      	beq.n	800847a <check_for_error+0xda>
 8008410:	4a32      	ldr	r2, [pc, #200]	; (80084dc <check_for_error+0x13c>)
 8008412:	4293      	cmp	r3, r2
 8008414:	dc4f      	bgt.n	80084b6 <check_for_error+0x116>
 8008416:	4a32      	ldr	r2, [pc, #200]	; (80084e0 <check_for_error+0x140>)
 8008418:	4293      	cmp	r3, r2
 800841a:	d029      	beq.n	8008470 <check_for_error+0xd0>
 800841c:	4a30      	ldr	r2, [pc, #192]	; (80084e0 <check_for_error+0x140>)
 800841e:	4293      	cmp	r3, r2
 8008420:	dc49      	bgt.n	80084b6 <check_for_error+0x116>
 8008422:	4a30      	ldr	r2, [pc, #192]	; (80084e4 <check_for_error+0x144>)
 8008424:	4293      	cmp	r3, r2
 8008426:	d01e      	beq.n	8008466 <check_for_error+0xc6>
 8008428:	4a2e      	ldr	r2, [pc, #184]	; (80084e4 <check_for_error+0x144>)
 800842a:	4293      	cmp	r3, r2
 800842c:	dc43      	bgt.n	80084b6 <check_for_error+0x116>
 800842e:	2222      	movs	r2, #34	; 0x22
 8008430:	32ff      	adds	r2, #255	; 0xff
 8008432:	4293      	cmp	r3, r2
 8008434:	d012      	beq.n	800845c <check_for_error+0xbc>
 8008436:	2291      	movs	r2, #145	; 0x91
 8008438:	0052      	lsls	r2, r2, #1
 800843a:	4293      	cmp	r3, r2
 800843c:	da3b      	bge.n	80084b6 <check_for_error+0x116>
 800843e:	2b01      	cmp	r3, #1
 8008440:	d002      	beq.n	8008448 <check_for_error+0xa8>
 8008442:	2b11      	cmp	r3, #17
 8008444:	d005      	beq.n	8008452 <check_for_error+0xb2>
 8008446:	e036      	b.n	80084b6 <check_for_error+0x116>
    {
        case ASTRONODE_ERR_CODE_CRC_NOT_VALID:
            send_debug_logs("[ERROR] CRC_NOT_VALID : Discrepancy between provided CRC and expected CRC.");
 8008448:	4b27      	ldr	r3, [pc, #156]	; (80084e8 <check_for_error+0x148>)
 800844a:	0018      	movs	r0, r3
 800844c:	f7fa fd1a 	bl	8002e84 <send_debug_logs>
            break;
 8008450:	e036      	b.n	80084c0 <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_LENGTH_NOT_VALID:
            send_debug_logs("[ERROR] LENGTH_NOT_VALID : Message exceeds the maximum length allowed by the given operation code.");
 8008452:	4b26      	ldr	r3, [pc, #152]	; (80084ec <check_for_error+0x14c>)
 8008454:	0018      	movs	r0, r3
 8008456:	f7fa fd15 	bl	8002e84 <send_debug_logs>
            break;
 800845a:	e031      	b.n	80084c0 <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_OPCODE_NOT_VALID:
            send_debug_logs("[ERROR] OPCODE_NOT_VALID : Invalid operation code used.");
 800845c:	4b24      	ldr	r3, [pc, #144]	; (80084f0 <check_for_error+0x150>)
 800845e:	0018      	movs	r0, r3
 8008460:	f7fa fd10 	bl	8002e84 <send_debug_logs>
            break;
 8008464:	e02c      	b.n	80084c0 <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_FORMAT_NOT_VALID:
            send_debug_logs("[ERROR] FORMAT_NOT_VALID : At least one of the fields (SSID, password, token) is not composed of exclusively printable standard ASCII characters (0x20 to 0x7E).");
 8008466:	4b23      	ldr	r3, [pc, #140]	; (80084f4 <check_for_error+0x154>)
 8008468:	0018      	movs	r0, r3
 800846a:	f7fa fd0b 	bl	8002e84 <send_debug_logs>
            break;
 800846e:	e027      	b.n	80084c0 <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_FLASH_WRITING_FAILED:
            send_debug_logs("[ERROR] FLASH_WRITING_FAILED : Failed to write the Wi-Fi settings (SSID, password, token) to the flash.");
 8008470:	4b21      	ldr	r3, [pc, #132]	; (80084f8 <check_for_error+0x158>)
 8008472:	0018      	movs	r0, r3
 8008474:	f7fa fd06 	bl	8002e84 <send_debug_logs>
            break;
 8008478:	e022      	b.n	80084c0 <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_BUFFER_FULL:
            send_debug_logs("[ERROR] BUFFER_FULL : Failed to queue the payload because the sending queue is already full.");
 800847a:	4b20      	ldr	r3, [pc, #128]	; (80084fc <check_for_error+0x15c>)
 800847c:	0018      	movs	r0, r3
 800847e:	f7fa fd01 	bl	8002e84 <send_debug_logs>
            break;
 8008482:	e01d      	b.n	80084c0 <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_DUPLICATE_ID:
            send_debug_logs("[ERROR] DUPLICATE_ID : Failed to queue the payload because the Payload ID provided by the asset is already in use in the Astronode queue.");
 8008484:	4b1e      	ldr	r3, [pc, #120]	; (8008500 <check_for_error+0x160>)
 8008486:	0018      	movs	r0, r3
 8008488:	f7fa fcfc 	bl	8002e84 <send_debug_logs>
            break;
 800848c:	e018      	b.n	80084c0 <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_BUFFER_EMPTY:
            send_debug_logs("[ERROR] BUFFER_EMPTY : Failed to dequeue a payload from the buffer because the buffer is empty.");
 800848e:	4b1d      	ldr	r3, [pc, #116]	; (8008504 <check_for_error+0x164>)
 8008490:	0018      	movs	r0, r3
 8008492:	f7fa fcf7 	bl	8002e84 <send_debug_logs>
            break;
 8008496:	e013      	b.n	80084c0 <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_INVALID_POS:
            send_debug_logs("[ERROR] INVALID_POS : Failed to update the geolocation information. Latitude and longitude fields must in the range [-90,90] degrees and [-180,180] degrees, respectively.");
 8008498:	4b1b      	ldr	r3, [pc, #108]	; (8008508 <check_for_error+0x168>)
 800849a:	0018      	movs	r0, r3
 800849c:	f7fa fcf2 	bl	8002e84 <send_debug_logs>
            break;
 80084a0:	e00e      	b.n	80084c0 <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_NO_ACK:
            send_debug_logs("[ERROR] NO_ACK : No satellite acknowledgement available for any payload.");
 80084a2:	4b1a      	ldr	r3, [pc, #104]	; (800850c <check_for_error+0x16c>)
 80084a4:	0018      	movs	r0, r3
 80084a6:	f7fa fced 	bl	8002e84 <send_debug_logs>
            break;
 80084aa:	e009      	b.n	80084c0 <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_NO_CLEAR:
            send_debug_logs("[ERROR] NO_CLEAR : No payload ack to clear, or it was already cleared.");
 80084ac:	4b18      	ldr	r3, [pc, #96]	; (8008510 <check_for_error+0x170>)
 80084ae:	0018      	movs	r0, r3
 80084b0:	f7fa fce8 	bl	8002e84 <send_debug_logs>
            break;
 80084b4:	e004      	b.n	80084c0 <check_for_error+0x120>

        default:
            send_debug_logs("[ERROR] error_code is not defined.");
 80084b6:	4b17      	ldr	r3, [pc, #92]	; (8008514 <check_for_error+0x174>)
 80084b8:	0018      	movs	r0, r3
 80084ba:	f7fa fce3 	bl	8002e84 <send_debug_logs>
            break;
 80084be:	46c0      	nop			; (mov r8, r8)
    }
}
 80084c0:	46c0      	nop			; (mov r8, r8)
 80084c2:	46bd      	mov	sp, r7
 80084c4:	b004      	add	sp, #16
 80084c6:	bd80      	pop	{r7, pc}
 80084c8:	00004601 	.word	0x00004601
 80084cc:	00004501 	.word	0x00004501
 80084d0:	00003501 	.word	0x00003501
 80084d4:	00002601 	.word	0x00002601
 80084d8:	00002511 	.word	0x00002511
 80084dc:	00002501 	.word	0x00002501
 80084e0:	00000611 	.word	0x00000611
 80084e4:	00000601 	.word	0x00000601
 80084e8:	080123d0 	.word	0x080123d0
 80084ec:	0801241c 	.word	0x0801241c
 80084f0:	08012480 	.word	0x08012480
 80084f4:	080124b8 	.word	0x080124b8
 80084f8:	0801255c 	.word	0x0801255c
 80084fc:	080125c4 	.word	0x080125c4
 8008500:	08012624 	.word	0x08012624
 8008504:	080126b0 	.word	0x080126b0
 8008508:	08012710 	.word	0x08012710
 800850c:	080127bc 	.word	0x080127bc
 8008510:	08012808 	.word	0x08012808
 8008514:	08012850 	.word	0x08012850

08008518 <receive_astronode_answer>:

static return_status_t receive_astronode_answer(uint8_t *p_rx_buffer, uint16_t *p_buffer_length)
{
 8008518:	b5b0      	push	{r4, r5, r7, lr}
 800851a:	b086      	sub	sp, #24
 800851c:	af00      	add	r7, sp, #0
 800851e:	6078      	str	r0, [r7, #4]
 8008520:	6039      	str	r1, [r7, #0]
    uint8_t rx_char = 0;
 8008522:	230f      	movs	r3, #15
 8008524:	18fb      	adds	r3, r7, r3
 8008526:	2200      	movs	r2, #0
 8008528:	701a      	strb	r2, [r3, #0]
    uint16_t length = 0;
 800852a:	2316      	movs	r3, #22
 800852c:	18fb      	adds	r3, r7, r3
 800852e:	2200      	movs	r2, #0
 8008530:	801a      	strh	r2, [r3, #0]
    uint32_t timeout_answer_received = get_systick();
 8008532:	f7fa fe03 	bl	800313c <get_systick>
 8008536:	0003      	movs	r3, r0
 8008538:	613b      	str	r3, [r7, #16]
    bool is_answer_received = false;
 800853a:	2315      	movs	r3, #21
 800853c:	18fb      	adds	r3, r7, r3
 800853e:	2200      	movs	r2, #0
 8008540:	701a      	strb	r2, [r3, #0]

    while (is_answer_received == false)
 8008542:	e054      	b.n	80085ee <receive_astronode_answer+0xd6>
    {
        if (is_systick_timeout_over(timeout_answer_received, ASTRONODE_ANSWER_TIMEOUT_MS))
 8008544:	4a34      	ldr	r2, [pc, #208]	; (8008618 <receive_astronode_answer+0x100>)
 8008546:	693b      	ldr	r3, [r7, #16]
 8008548:	0011      	movs	r1, r2
 800854a:	0018      	movs	r0, r3
 800854c:	f7fa fdfe 	bl	800314c <is_systick_timeout_over>
 8008550:	1e03      	subs	r3, r0, #0
 8008552:	d005      	beq.n	8008560 <receive_astronode_answer+0x48>
        {
            send_debug_logs("ERROR : Received answer timeout..");
 8008554:	4b31      	ldr	r3, [pc, #196]	; (800861c <receive_astronode_answer+0x104>)
 8008556:	0018      	movs	r0, r3
 8008558:	f7fa fc94 	bl	8002e84 <send_debug_logs>
            return RS_FAILURE;
 800855c:	2300      	movs	r3, #0
 800855e:	e057      	b.n	8008610 <receive_astronode_answer+0xf8>
        }
        if (is_astronode_character_received(&rx_char))
 8008560:	250f      	movs	r5, #15
 8008562:	197b      	adds	r3, r7, r5
 8008564:	0018      	movs	r0, r3
 8008566:	f7fa fe07 	bl	8003178 <is_astronode_character_received>
 800856a:	0003      	movs	r3, r0
 800856c:	0019      	movs	r1, r3
 800856e:	2016      	movs	r0, #22
 8008570:	183b      	adds	r3, r7, r0
 8008572:	183a      	adds	r2, r7, r0
 8008574:	8812      	ldrh	r2, [r2, #0]
 8008576:	801a      	strh	r2, [r3, #0]
 8008578:	2415      	movs	r4, #21
 800857a:	193b      	adds	r3, r7, r4
 800857c:	193a      	adds	r2, r7, r4
 800857e:	7812      	ldrb	r2, [r2, #0]
 8008580:	701a      	strb	r2, [r3, #0]
 8008582:	2900      	cmp	r1, #0
 8008584:	d033      	beq.n	80085ee <receive_astronode_answer+0xd6>
        {
            if (rx_char == ASTRONODE_TRANSPORT_STX)
 8008586:	197b      	adds	r3, r7, r5
 8008588:	781b      	ldrb	r3, [r3, #0]
 800858a:	2b02      	cmp	r3, #2
 800858c:	d105      	bne.n	800859a <receive_astronode_answer+0x82>
            {
                is_answer_received = false;
 800858e:	193b      	adds	r3, r7, r4
 8008590:	2200      	movs	r2, #0
 8008592:	701a      	strb	r2, [r3, #0]
                length = 0;
 8008594:	183b      	adds	r3, r7, r0
 8008596:	2200      	movs	r2, #0
 8008598:	801a      	strh	r2, [r3, #0]
            }

            p_rx_buffer[length] = rx_char;
 800859a:	2116      	movs	r1, #22
 800859c:	187b      	adds	r3, r7, r1
 800859e:	881b      	ldrh	r3, [r3, #0]
 80085a0:	687a      	ldr	r2, [r7, #4]
 80085a2:	18d3      	adds	r3, r2, r3
 80085a4:	220f      	movs	r2, #15
 80085a6:	18ba      	adds	r2, r7, r2
 80085a8:	7812      	ldrb	r2, [r2, #0]
 80085aa:	701a      	strb	r2, [r3, #0]
            length++;
 80085ac:	187b      	adds	r3, r7, r1
 80085ae:	881a      	ldrh	r2, [r3, #0]
 80085b0:	187b      	adds	r3, r7, r1
 80085b2:	3201      	adds	r2, #1
 80085b4:	801a      	strh	r2, [r3, #0]

            if (length > ASTRONODE_MAX_LENGTH_RESPONSE)
 80085b6:	187b      	adds	r3, r7, r1
 80085b8:	881b      	ldrh	r3, [r3, #0]
 80085ba:	2bb2      	cmp	r3, #178	; 0xb2
 80085bc:	d905      	bls.n	80085ca <receive_astronode_answer+0xb2>
            {
                send_debug_logs("ERROR : Message received from the Astronode exceed maximum length allowed.");
 80085be:	4b18      	ldr	r3, [pc, #96]	; (8008620 <receive_astronode_answer+0x108>)
 80085c0:	0018      	movs	r0, r3
 80085c2:	f7fa fc5f 	bl	8002e84 <send_debug_logs>
                return RS_FAILURE;
 80085c6:	2300      	movs	r3, #0
 80085c8:	e022      	b.n	8008610 <receive_astronode_answer+0xf8>
            }

            if (rx_char == ASTRONODE_TRANSPORT_ETX)
 80085ca:	230f      	movs	r3, #15
 80085cc:	18fb      	adds	r3, r7, r3
 80085ce:	781b      	ldrb	r3, [r3, #0]
 80085d0:	2b03      	cmp	r3, #3
 80085d2:	d10c      	bne.n	80085ee <receive_astronode_answer+0xd6>
            {
                if (length > 1)
 80085d4:	2216      	movs	r2, #22
 80085d6:	18bb      	adds	r3, r7, r2
 80085d8:	881b      	ldrh	r3, [r3, #0]
 80085da:	2b01      	cmp	r3, #1
 80085dc:	d907      	bls.n	80085ee <receive_astronode_answer+0xd6>
                {
                    *p_buffer_length = length;
 80085de:	683b      	ldr	r3, [r7, #0]
 80085e0:	18ba      	adds	r2, r7, r2
 80085e2:	8812      	ldrh	r2, [r2, #0]
 80085e4:	801a      	strh	r2, [r3, #0]
                    is_answer_received = true;
 80085e6:	2315      	movs	r3, #21
 80085e8:	18fb      	adds	r3, r7, r3
 80085ea:	2201      	movs	r2, #1
 80085ec:	701a      	strb	r2, [r3, #0]
    while (is_answer_received == false)
 80085ee:	2315      	movs	r3, #21
 80085f0:	18fb      	adds	r3, r7, r3
 80085f2:	781b      	ldrb	r3, [r3, #0]
 80085f4:	2201      	movs	r2, #1
 80085f6:	4053      	eors	r3, r2
 80085f8:	b2db      	uxtb	r3, r3
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d1a2      	bne.n	8008544 <receive_astronode_answer+0x2c>
                }
            }
        }
    }
    send_debug_logs("Message received from the Astronode <-- ");
 80085fe:	4b09      	ldr	r3, [pc, #36]	; (8008624 <receive_astronode_answer+0x10c>)
 8008600:	0018      	movs	r0, r3
 8008602:	f7fa fc3f 	bl	8002e84 <send_debug_logs>
    send_debug_logs((char *) p_rx_buffer);
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	0018      	movs	r0, r3
 800860a:	f7fa fc3b 	bl	8002e84 <send_debug_logs>

    return RS_SUCCESS;
 800860e:	2301      	movs	r3, #1
}
 8008610:	0018      	movs	r0, r3
 8008612:	46bd      	mov	sp, r7
 8008614:	b006      	add	sp, #24
 8008616:	bdb0      	pop	{r4, r5, r7, pc}
 8008618:	000005dc 	.word	0x000005dc
 800861c:	08012874 	.word	0x08012874
 8008620:	08012898 	.word	0x08012898
 8008624:	080128e4 	.word	0x080128e4

08008628 <uint8_to_ascii_buffer>:

static void uint8_to_ascii_buffer(const uint8_t value, uint8_t *p_target_buffer)
{
 8008628:	b580      	push	{r7, lr}
 800862a:	b082      	sub	sp, #8
 800862c:	af00      	add	r7, sp, #0
 800862e:	0002      	movs	r2, r0
 8008630:	6039      	str	r1, [r7, #0]
 8008632:	1dfb      	adds	r3, r7, #7
 8008634:	701a      	strb	r2, [r3, #0]
    p_target_buffer[0] = g_ascii_lookup[value >> 4];
 8008636:	1dfb      	adds	r3, r7, #7
 8008638:	781b      	ldrb	r3, [r3, #0]
 800863a:	091b      	lsrs	r3, r3, #4
 800863c:	b2db      	uxtb	r3, r3
 800863e:	001a      	movs	r2, r3
 8008640:	4b08      	ldr	r3, [pc, #32]	; (8008664 <uint8_to_ascii_buffer+0x3c>)
 8008642:	5c9a      	ldrb	r2, [r3, r2]
 8008644:	683b      	ldr	r3, [r7, #0]
 8008646:	701a      	strb	r2, [r3, #0]
    p_target_buffer[1] = g_ascii_lookup[value & 0x0F];
 8008648:	1dfb      	adds	r3, r7, #7
 800864a:	781b      	ldrb	r3, [r3, #0]
 800864c:	220f      	movs	r2, #15
 800864e:	401a      	ands	r2, r3
 8008650:	683b      	ldr	r3, [r7, #0]
 8008652:	3301      	adds	r3, #1
 8008654:	4903      	ldr	r1, [pc, #12]	; (8008664 <uint8_to_ascii_buffer+0x3c>)
 8008656:	5c8a      	ldrb	r2, [r1, r2]
 8008658:	701a      	strb	r2, [r3, #0]
}
 800865a:	46c0      	nop			; (mov r8, r8)
 800865c:	46bd      	mov	sp, r7
 800865e:	b002      	add	sp, #8
 8008660:	bd80      	pop	{r7, pc}
 8008662:	46c0      	nop			; (mov r8, r8)
 8008664:	080129ec 	.word	0x080129ec

08008668 <lis2dw12_read_reg>:
  *
  */
int32_t __weak lis2dw12_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                 uint8_t *data,
                                 uint16_t len)
{
 8008668:	b5f0      	push	{r4, r5, r6, r7, lr}
 800866a:	b087      	sub	sp, #28
 800866c:	af00      	add	r7, sp, #0
 800866e:	60f8      	str	r0, [r7, #12]
 8008670:	0008      	movs	r0, r1
 8008672:	607a      	str	r2, [r7, #4]
 8008674:	0019      	movs	r1, r3
 8008676:	260b      	movs	r6, #11
 8008678:	19bb      	adds	r3, r7, r6
 800867a:	1c02      	adds	r2, r0, #0
 800867c:	701a      	strb	r2, [r3, #0]
 800867e:	2508      	movs	r5, #8
 8008680:	197b      	adds	r3, r7, r5
 8008682:	1c0a      	adds	r2, r1, #0
 8008684:	801a      	strh	r2, [r3, #0]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	685c      	ldr	r4, [r3, #4]
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	68d8      	ldr	r0, [r3, #12]
 800868e:	197b      	adds	r3, r7, r5
 8008690:	881d      	ldrh	r5, [r3, #0]
 8008692:	687a      	ldr	r2, [r7, #4]
 8008694:	19bb      	adds	r3, r7, r6
 8008696:	7819      	ldrb	r1, [r3, #0]
 8008698:	002b      	movs	r3, r5
 800869a:	47a0      	blx	r4
 800869c:	0003      	movs	r3, r0
 800869e:	617b      	str	r3, [r7, #20]

  return ret;
 80086a0:	697b      	ldr	r3, [r7, #20]
}
 80086a2:	0018      	movs	r0, r3
 80086a4:	46bd      	mov	sp, r7
 80086a6:	b007      	add	sp, #28
 80086a8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080086aa <lis2dw12_write_reg>:
  *
  */
int32_t __weak lis2dw12_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                  uint8_t *data,
                                  uint16_t len)
{
 80086aa:	b5f0      	push	{r4, r5, r6, r7, lr}
 80086ac:	b087      	sub	sp, #28
 80086ae:	af00      	add	r7, sp, #0
 80086b0:	60f8      	str	r0, [r7, #12]
 80086b2:	0008      	movs	r0, r1
 80086b4:	607a      	str	r2, [r7, #4]
 80086b6:	0019      	movs	r1, r3
 80086b8:	260b      	movs	r6, #11
 80086ba:	19bb      	adds	r3, r7, r6
 80086bc:	1c02      	adds	r2, r0, #0
 80086be:	701a      	strb	r2, [r3, #0]
 80086c0:	2508      	movs	r5, #8
 80086c2:	197b      	adds	r3, r7, r5
 80086c4:	1c0a      	adds	r2, r1, #0
 80086c6:	801a      	strh	r2, [r3, #0]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	681c      	ldr	r4, [r3, #0]
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	68d8      	ldr	r0, [r3, #12]
 80086d0:	197b      	adds	r3, r7, r5
 80086d2:	881d      	ldrh	r5, [r3, #0]
 80086d4:	687a      	ldr	r2, [r7, #4]
 80086d6:	19bb      	adds	r3, r7, r6
 80086d8:	7819      	ldrb	r1, [r3, #0]
 80086da:	002b      	movs	r3, r5
 80086dc:	47a0      	blx	r4
 80086de:	0003      	movs	r3, r0
 80086e0:	617b      	str	r3, [r7, #20]

  return ret;
 80086e2:	697b      	ldr	r3, [r7, #20]
}
 80086e4:	0018      	movs	r0, r3
 80086e6:	46bd      	mov	sp, r7
 80086e8:	b007      	add	sp, #28
 80086ea:	bdf0      	pop	{r4, r5, r6, r7, pc}

080086ec <lis2dw12_power_mode_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_power_mode_set(stmdev_ctx_t *ctx,
                                lis2dw12_mode_t val)
{
 80086ec:	b590      	push	{r4, r7, lr}
 80086ee:	b087      	sub	sp, #28
 80086f0:	af00      	add	r7, sp, #0
 80086f2:	6078      	str	r0, [r7, #4]
 80086f4:	000a      	movs	r2, r1
 80086f6:	1cfb      	adds	r3, r7, #3
 80086f8:	701a      	strb	r2, [r3, #0]
  lis2dw12_ctrl1_t ctrl1;
  lis2dw12_ctrl6_t ctrl6;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 80086fa:	2410      	movs	r4, #16
 80086fc:	193a      	adds	r2, r7, r4
 80086fe:	6878      	ldr	r0, [r7, #4]
 8008700:	2301      	movs	r3, #1
 8008702:	2120      	movs	r1, #32
 8008704:	f7ff ffb0 	bl	8008668 <lis2dw12_read_reg>
 8008708:	0003      	movs	r3, r0
 800870a:	617b      	str	r3, [r7, #20]

  if (ret == 0)
 800870c:	697b      	ldr	r3, [r7, #20]
 800870e:	2b00      	cmp	r3, #0
 8008710:	d129      	bne.n	8008766 <lis2dw12_power_mode_set+0x7a>
  {
    ctrl1.mode = ((uint8_t) val & 0x0CU) >> 2;
 8008712:	1cfb      	adds	r3, r7, #3
 8008714:	781b      	ldrb	r3, [r3, #0]
 8008716:	089b      	lsrs	r3, r3, #2
 8008718:	1c1a      	adds	r2, r3, #0
 800871a:	2303      	movs	r3, #3
 800871c:	4013      	ands	r3, r2
 800871e:	b2da      	uxtb	r2, r3
 8008720:	193b      	adds	r3, r7, r4
 8008722:	2103      	movs	r1, #3
 8008724:	400a      	ands	r2, r1
 8008726:	0090      	lsls	r0, r2, #2
 8008728:	781a      	ldrb	r2, [r3, #0]
 800872a:	210c      	movs	r1, #12
 800872c:	438a      	bics	r2, r1
 800872e:	1c11      	adds	r1, r2, #0
 8008730:	1c02      	adds	r2, r0, #0
 8008732:	430a      	orrs	r2, r1
 8008734:	701a      	strb	r2, [r3, #0]
    ctrl1.lp_mode = (uint8_t) val & 0x03U ;
 8008736:	1cfb      	adds	r3, r7, #3
 8008738:	781b      	ldrb	r3, [r3, #0]
 800873a:	2203      	movs	r2, #3
 800873c:	4013      	ands	r3, r2
 800873e:	b2da      	uxtb	r2, r3
 8008740:	193b      	adds	r3, r7, r4
 8008742:	2103      	movs	r1, #3
 8008744:	400a      	ands	r2, r1
 8008746:	0010      	movs	r0, r2
 8008748:	781a      	ldrb	r2, [r3, #0]
 800874a:	2103      	movs	r1, #3
 800874c:	438a      	bics	r2, r1
 800874e:	1c11      	adds	r1, r2, #0
 8008750:	1c02      	adds	r2, r0, #0
 8008752:	430a      	orrs	r2, r1
 8008754:	701a      	strb	r2, [r3, #0]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 8008756:	193a      	adds	r2, r7, r4
 8008758:	6878      	ldr	r0, [r7, #4]
 800875a:	2301      	movs	r3, #1
 800875c:	2120      	movs	r1, #32
 800875e:	f7ff ffa4 	bl	80086aa <lis2dw12_write_reg>
 8008762:	0003      	movs	r3, r0
 8008764:	617b      	str	r3, [r7, #20]
  }

  if (ret == 0)
 8008766:	697b      	ldr	r3, [r7, #20]
 8008768:	2b00      	cmp	r3, #0
 800876a:	d108      	bne.n	800877e <lis2dw12_power_mode_set+0x92>
  {
    ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &ctrl6, 1);
 800876c:	230c      	movs	r3, #12
 800876e:	18fa      	adds	r2, r7, r3
 8008770:	6878      	ldr	r0, [r7, #4]
 8008772:	2301      	movs	r3, #1
 8008774:	2125      	movs	r1, #37	; 0x25
 8008776:	f7ff ff77 	bl	8008668 <lis2dw12_read_reg>
 800877a:	0003      	movs	r3, r0
 800877c:	617b      	str	r3, [r7, #20]
  }

  if (ret == 0)
 800877e:	697b      	ldr	r3, [r7, #20]
 8008780:	2b00      	cmp	r3, #0
 8008782:	d11a      	bne.n	80087ba <lis2dw12_power_mode_set+0xce>
  {
    ctrl6.low_noise = ((uint8_t) val & 0x10U) >> 4;
 8008784:	1cfb      	adds	r3, r7, #3
 8008786:	781b      	ldrb	r3, [r3, #0]
 8008788:	091b      	lsrs	r3, r3, #4
 800878a:	1c1a      	adds	r2, r3, #0
 800878c:	2301      	movs	r3, #1
 800878e:	4013      	ands	r3, r2
 8008790:	b2da      	uxtb	r2, r3
 8008792:	240c      	movs	r4, #12
 8008794:	193b      	adds	r3, r7, r4
 8008796:	2101      	movs	r1, #1
 8008798:	400a      	ands	r2, r1
 800879a:	0090      	lsls	r0, r2, #2
 800879c:	781a      	ldrb	r2, [r3, #0]
 800879e:	2104      	movs	r1, #4
 80087a0:	438a      	bics	r2, r1
 80087a2:	1c11      	adds	r1, r2, #0
 80087a4:	1c02      	adds	r2, r0, #0
 80087a6:	430a      	orrs	r2, r1
 80087a8:	701a      	strb	r2, [r3, #0]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &ctrl6, 1);
 80087aa:	193a      	adds	r2, r7, r4
 80087ac:	6878      	ldr	r0, [r7, #4]
 80087ae:	2301      	movs	r3, #1
 80087b0:	2125      	movs	r1, #37	; 0x25
 80087b2:	f7ff ff7a 	bl	80086aa <lis2dw12_write_reg>
 80087b6:	0003      	movs	r3, r0
 80087b8:	617b      	str	r3, [r7, #20]
  }

  return ret;
 80087ba:	697b      	ldr	r3, [r7, #20]
}
 80087bc:	0018      	movs	r0, r3
 80087be:	46bd      	mov	sp, r7
 80087c0:	b007      	add	sp, #28
 80087c2:	bd90      	pop	{r4, r7, pc}

080087c4 <lis2dw12_data_rate_set>:
  * @param  val      change the values of odr in reg CTRL1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_data_rate_set(stmdev_ctx_t *ctx, lis2dw12_odr_t val)
{
 80087c4:	b590      	push	{r4, r7, lr}
 80087c6:	b087      	sub	sp, #28
 80087c8:	af00      	add	r7, sp, #0
 80087ca:	6078      	str	r0, [r7, #4]
 80087cc:	000a      	movs	r2, r1
 80087ce:	1cfb      	adds	r3, r7, #3
 80087d0:	701a      	strb	r2, [r3, #0]
  lis2dw12_ctrl1_t ctrl1;
  lis2dw12_ctrl3_t ctrl3;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 80087d2:	2410      	movs	r4, #16
 80087d4:	193a      	adds	r2, r7, r4
 80087d6:	6878      	ldr	r0, [r7, #4]
 80087d8:	2301      	movs	r3, #1
 80087da:	2120      	movs	r1, #32
 80087dc:	f7ff ff44 	bl	8008668 <lis2dw12_read_reg>
 80087e0:	0003      	movs	r3, r0
 80087e2:	617b      	str	r3, [r7, #20]

  if (ret == 0)
 80087e4:	697b      	ldr	r3, [r7, #20]
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d115      	bne.n	8008816 <lis2dw12_data_rate_set+0x52>
  {
    ctrl1.odr = (uint8_t) val;
 80087ea:	1cfb      	adds	r3, r7, #3
 80087ec:	781b      	ldrb	r3, [r3, #0]
 80087ee:	220f      	movs	r2, #15
 80087f0:	4013      	ands	r3, r2
 80087f2:	b2da      	uxtb	r2, r3
 80087f4:	193b      	adds	r3, r7, r4
 80087f6:	0110      	lsls	r0, r2, #4
 80087f8:	781a      	ldrb	r2, [r3, #0]
 80087fa:	210f      	movs	r1, #15
 80087fc:	400a      	ands	r2, r1
 80087fe:	1c11      	adds	r1, r2, #0
 8008800:	1c02      	adds	r2, r0, #0
 8008802:	430a      	orrs	r2, r1
 8008804:	701a      	strb	r2, [r3, #0]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 8008806:	193a      	adds	r2, r7, r4
 8008808:	6878      	ldr	r0, [r7, #4]
 800880a:	2301      	movs	r3, #1
 800880c:	2120      	movs	r1, #32
 800880e:	f7ff ff4c 	bl	80086aa <lis2dw12_write_reg>
 8008812:	0003      	movs	r3, r0
 8008814:	617b      	str	r3, [r7, #20]
  }

  if (ret == 0)
 8008816:	697b      	ldr	r3, [r7, #20]
 8008818:	2b00      	cmp	r3, #0
 800881a:	d108      	bne.n	800882e <lis2dw12_data_rate_set+0x6a>
  {
    ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL3, (uint8_t *) &ctrl3, 1);
 800881c:	230c      	movs	r3, #12
 800881e:	18fa      	adds	r2, r7, r3
 8008820:	6878      	ldr	r0, [r7, #4]
 8008822:	2301      	movs	r3, #1
 8008824:	2122      	movs	r1, #34	; 0x22
 8008826:	f7ff ff1f 	bl	8008668 <lis2dw12_read_reg>
 800882a:	0003      	movs	r3, r0
 800882c:	617b      	str	r3, [r7, #20]
  }

  if (ret == 0)
 800882e:	697b      	ldr	r3, [r7, #20]
 8008830:	2b00      	cmp	r3, #0
 8008832:	d11a      	bne.n	800886a <lis2dw12_data_rate_set+0xa6>
  {
    ctrl3.slp_mode = ((uint8_t) val & 0x30U) >> 4;
 8008834:	1cfb      	adds	r3, r7, #3
 8008836:	781b      	ldrb	r3, [r3, #0]
 8008838:	091b      	lsrs	r3, r3, #4
 800883a:	1c1a      	adds	r2, r3, #0
 800883c:	2303      	movs	r3, #3
 800883e:	4013      	ands	r3, r2
 8008840:	b2da      	uxtb	r2, r3
 8008842:	240c      	movs	r4, #12
 8008844:	193b      	adds	r3, r7, r4
 8008846:	2103      	movs	r1, #3
 8008848:	400a      	ands	r2, r1
 800884a:	0010      	movs	r0, r2
 800884c:	781a      	ldrb	r2, [r3, #0]
 800884e:	2103      	movs	r1, #3
 8008850:	438a      	bics	r2, r1
 8008852:	1c11      	adds	r1, r2, #0
 8008854:	1c02      	adds	r2, r0, #0
 8008856:	430a      	orrs	r2, r1
 8008858:	701a      	strb	r2, [r3, #0]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL3, (uint8_t *) &ctrl3, 1);
 800885a:	193a      	adds	r2, r7, r4
 800885c:	6878      	ldr	r0, [r7, #4]
 800885e:	2301      	movs	r3, #1
 8008860:	2122      	movs	r1, #34	; 0x22
 8008862:	f7ff ff22 	bl	80086aa <lis2dw12_write_reg>
 8008866:	0003      	movs	r3, r0
 8008868:	617b      	str	r3, [r7, #20]
  }

  return ret;
 800886a:	697b      	ldr	r3, [r7, #20]
}
 800886c:	0018      	movs	r0, r3
 800886e:	46bd      	mov	sp, r7
 8008870:	b007      	add	sp, #28
 8008872:	bd90      	pop	{r4, r7, pc}

08008874 <lis2dw12_full_scale_set>:
  * @param  val      change the values of fs in reg CTRL6
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_full_scale_set(stmdev_ctx_t *ctx, lis2dw12_fs_t val)
{
 8008874:	b590      	push	{r4, r7, lr}
 8008876:	b085      	sub	sp, #20
 8008878:	af00      	add	r7, sp, #0
 800887a:	6078      	str	r0, [r7, #4]
 800887c:	000a      	movs	r2, r1
 800887e:	1cfb      	adds	r3, r7, #3
 8008880:	701a      	strb	r2, [r3, #0]
  lis2dw12_ctrl6_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &reg, 1);
 8008882:	2408      	movs	r4, #8
 8008884:	193a      	adds	r2, r7, r4
 8008886:	6878      	ldr	r0, [r7, #4]
 8008888:	2301      	movs	r3, #1
 800888a:	2125      	movs	r1, #37	; 0x25
 800888c:	f7ff feec 	bl	8008668 <lis2dw12_read_reg>
 8008890:	0003      	movs	r3, r0
 8008892:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	2b00      	cmp	r3, #0
 8008898:	d117      	bne.n	80088ca <lis2dw12_full_scale_set+0x56>
  {
    reg.fs = (uint8_t) val;
 800889a:	1cfb      	adds	r3, r7, #3
 800889c:	781b      	ldrb	r3, [r3, #0]
 800889e:	2203      	movs	r2, #3
 80088a0:	4013      	ands	r3, r2
 80088a2:	b2da      	uxtb	r2, r3
 80088a4:	193b      	adds	r3, r7, r4
 80088a6:	2103      	movs	r1, #3
 80088a8:	400a      	ands	r2, r1
 80088aa:	0110      	lsls	r0, r2, #4
 80088ac:	781a      	ldrb	r2, [r3, #0]
 80088ae:	2130      	movs	r1, #48	; 0x30
 80088b0:	438a      	bics	r2, r1
 80088b2:	1c11      	adds	r1, r2, #0
 80088b4:	1c02      	adds	r2, r0, #0
 80088b6:	430a      	orrs	r2, r1
 80088b8:	701a      	strb	r2, [r3, #0]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &reg, 1);
 80088ba:	193a      	adds	r2, r7, r4
 80088bc:	6878      	ldr	r0, [r7, #4]
 80088be:	2301      	movs	r3, #1
 80088c0:	2125      	movs	r1, #37	; 0x25
 80088c2:	f7ff fef2 	bl	80086aa <lis2dw12_write_reg>
 80088c6:	0003      	movs	r3, r0
 80088c8:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80088ca:	68fb      	ldr	r3, [r7, #12]
}
 80088cc:	0018      	movs	r0, r3
 80088ce:	46bd      	mov	sp, r7
 80088d0:	b005      	add	sp, #20
 80088d2:	bd90      	pop	{r4, r7, pc}

080088d4 <lis2dw12_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 80088d4:	b580      	push	{r7, lr}
 80088d6:	b084      	sub	sp, #16
 80088d8:	af00      	add	r7, sp, #0
 80088da:	6078      	str	r0, [r7, #4]
 80088dc:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_WHO_AM_I, buff, 1);
 80088de:	683a      	ldr	r2, [r7, #0]
 80088e0:	6878      	ldr	r0, [r7, #4]
 80088e2:	2301      	movs	r3, #1
 80088e4:	210f      	movs	r1, #15
 80088e6:	f7ff febf 	bl	8008668 <lis2dw12_read_reg>
 80088ea:	0003      	movs	r3, r0
 80088ec:	60fb      	str	r3, [r7, #12]

  return ret;
 80088ee:	68fb      	ldr	r3, [r7, #12]
}
 80088f0:	0018      	movs	r0, r3
 80088f2:	46bd      	mov	sp, r7
 80088f4:	b004      	add	sp, #16
 80088f6:	bd80      	pop	{r7, pc}

080088f8 <lis2dw12_reset_set>:
  * @param  val      change the values of soft_reset in reg CTRL2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_reset_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80088f8:	b590      	push	{r4, r7, lr}
 80088fa:	b085      	sub	sp, #20
 80088fc:	af00      	add	r7, sp, #0
 80088fe:	6078      	str	r0, [r7, #4]
 8008900:	000a      	movs	r2, r1
 8008902:	1cfb      	adds	r3, r7, #3
 8008904:	701a      	strb	r2, [r3, #0]
  lis2dw12_ctrl2_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL2, (uint8_t *) &reg, 1);
 8008906:	2408      	movs	r4, #8
 8008908:	193a      	adds	r2, r7, r4
 800890a:	6878      	ldr	r0, [r7, #4]
 800890c:	2301      	movs	r3, #1
 800890e:	2121      	movs	r1, #33	; 0x21
 8008910:	f7ff feaa 	bl	8008668 <lis2dw12_read_reg>
 8008914:	0003      	movs	r3, r0
 8008916:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	2b00      	cmp	r3, #0
 800891c:	d117      	bne.n	800894e <lis2dw12_reset_set+0x56>
  {
    reg.soft_reset = val;
 800891e:	1cfb      	adds	r3, r7, #3
 8008920:	781b      	ldrb	r3, [r3, #0]
 8008922:	2201      	movs	r2, #1
 8008924:	4013      	ands	r3, r2
 8008926:	b2da      	uxtb	r2, r3
 8008928:	193b      	adds	r3, r7, r4
 800892a:	2101      	movs	r1, #1
 800892c:	400a      	ands	r2, r1
 800892e:	0190      	lsls	r0, r2, #6
 8008930:	781a      	ldrb	r2, [r3, #0]
 8008932:	2140      	movs	r1, #64	; 0x40
 8008934:	438a      	bics	r2, r1
 8008936:	1c11      	adds	r1, r2, #0
 8008938:	1c02      	adds	r2, r0, #0
 800893a:	430a      	orrs	r2, r1
 800893c:	701a      	strb	r2, [r3, #0]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL2, (uint8_t *) &reg, 1);
 800893e:	193a      	adds	r2, r7, r4
 8008940:	6878      	ldr	r0, [r7, #4]
 8008942:	2301      	movs	r3, #1
 8008944:	2121      	movs	r1, #33	; 0x21
 8008946:	f7ff feb0 	bl	80086aa <lis2dw12_write_reg>
 800894a:	0003      	movs	r3, r0
 800894c:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800894e:	68fb      	ldr	r3, [r7, #12]
}
 8008950:	0018      	movs	r0, r3
 8008952:	46bd      	mov	sp, r7
 8008954:	b005      	add	sp, #20
 8008956:	bd90      	pop	{r4, r7, pc}

08008958 <lis2dw12_reset_get>:
  * @param  val      change the values of soft_reset in reg CTRL2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_reset_get(stmdev_ctx_t *ctx, uint8_t *val)
{
 8008958:	b590      	push	{r4, r7, lr}
 800895a:	b085      	sub	sp, #20
 800895c:	af00      	add	r7, sp, #0
 800895e:	6078      	str	r0, [r7, #4]
 8008960:	6039      	str	r1, [r7, #0]
  lis2dw12_ctrl2_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL2, (uint8_t *) &reg, 1);
 8008962:	2408      	movs	r4, #8
 8008964:	193a      	adds	r2, r7, r4
 8008966:	6878      	ldr	r0, [r7, #4]
 8008968:	2301      	movs	r3, #1
 800896a:	2121      	movs	r1, #33	; 0x21
 800896c:	f7ff fe7c 	bl	8008668 <lis2dw12_read_reg>
 8008970:	0003      	movs	r3, r0
 8008972:	60fb      	str	r3, [r7, #12]
  *val = reg.soft_reset;
 8008974:	193b      	adds	r3, r7, r4
 8008976:	781b      	ldrb	r3, [r3, #0]
 8008978:	065b      	lsls	r3, r3, #25
 800897a:	0fdb      	lsrs	r3, r3, #31
 800897c:	b2db      	uxtb	r3, r3
 800897e:	001a      	movs	r2, r3
 8008980:	683b      	ldr	r3, [r7, #0]
 8008982:	701a      	strb	r2, [r3, #0]

  return ret;
 8008984:	68fb      	ldr	r3, [r7, #12]
}
 8008986:	0018      	movs	r0, r3
 8008988:	46bd      	mov	sp, r7
 800898a:	b005      	add	sp, #20
 800898c:	bd90      	pop	{r4, r7, pc}

0800898e <lis2dw12_filter_path_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_filter_path_set(stmdev_ctx_t *ctx,
                                 lis2dw12_fds_t val)
{
 800898e:	b590      	push	{r4, r7, lr}
 8008990:	b087      	sub	sp, #28
 8008992:	af00      	add	r7, sp, #0
 8008994:	6078      	str	r0, [r7, #4]
 8008996:	000a      	movs	r2, r1
 8008998:	1cfb      	adds	r3, r7, #3
 800899a:	701a      	strb	r2, [r3, #0]
  lis2dw12_ctrl6_t ctrl6;
  lis2dw12_ctrl_reg7_t ctrl_reg7;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &ctrl6, 1);
 800899c:	2410      	movs	r4, #16
 800899e:	193a      	adds	r2, r7, r4
 80089a0:	6878      	ldr	r0, [r7, #4]
 80089a2:	2301      	movs	r3, #1
 80089a4:	2125      	movs	r1, #37	; 0x25
 80089a6:	f7ff fe5f 	bl	8008668 <lis2dw12_read_reg>
 80089aa:	0003      	movs	r3, r0
 80089ac:	617b      	str	r3, [r7, #20]

  if (ret == 0)
 80089ae:	697b      	ldr	r3, [r7, #20]
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d119      	bne.n	80089e8 <lis2dw12_filter_path_set+0x5a>
  {
    ctrl6.fds = ((uint8_t) val & 0x10U) >> 4;
 80089b4:	1cfb      	adds	r3, r7, #3
 80089b6:	781b      	ldrb	r3, [r3, #0]
 80089b8:	091b      	lsrs	r3, r3, #4
 80089ba:	1c1a      	adds	r2, r3, #0
 80089bc:	2301      	movs	r3, #1
 80089be:	4013      	ands	r3, r2
 80089c0:	b2da      	uxtb	r2, r3
 80089c2:	193b      	adds	r3, r7, r4
 80089c4:	2101      	movs	r1, #1
 80089c6:	400a      	ands	r2, r1
 80089c8:	00d0      	lsls	r0, r2, #3
 80089ca:	781a      	ldrb	r2, [r3, #0]
 80089cc:	2108      	movs	r1, #8
 80089ce:	438a      	bics	r2, r1
 80089d0:	1c11      	adds	r1, r2, #0
 80089d2:	1c02      	adds	r2, r0, #0
 80089d4:	430a      	orrs	r2, r1
 80089d6:	701a      	strb	r2, [r3, #0]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &ctrl6, 1);
 80089d8:	193a      	adds	r2, r7, r4
 80089da:	6878      	ldr	r0, [r7, #4]
 80089dc:	2301      	movs	r3, #1
 80089de:	2125      	movs	r1, #37	; 0x25
 80089e0:	f7ff fe63 	bl	80086aa <lis2dw12_write_reg>
 80089e4:	0003      	movs	r3, r0
 80089e6:	617b      	str	r3, [r7, #20]
  }

  if (ret == 0)
 80089e8:	697b      	ldr	r3, [r7, #20]
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d108      	bne.n	8008a00 <lis2dw12_filter_path_set+0x72>
  {
    ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL_REG7,
 80089ee:	230c      	movs	r3, #12
 80089f0:	18fa      	adds	r2, r7, r3
 80089f2:	6878      	ldr	r0, [r7, #4]
 80089f4:	2301      	movs	r3, #1
 80089f6:	213f      	movs	r1, #63	; 0x3f
 80089f8:	f7ff fe36 	bl	8008668 <lis2dw12_read_reg>
 80089fc:	0003      	movs	r3, r0
 80089fe:	617b      	str	r3, [r7, #20]
                            (uint8_t *) &ctrl_reg7, 1);
  }

  if (ret == 0)
 8008a00:	697b      	ldr	r3, [r7, #20]
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d118      	bne.n	8008a38 <lis2dw12_filter_path_set+0xaa>
  {
    ctrl_reg7.usr_off_on_out = (uint8_t) val & 0x01U;
 8008a06:	1cfb      	adds	r3, r7, #3
 8008a08:	781b      	ldrb	r3, [r3, #0]
 8008a0a:	2201      	movs	r2, #1
 8008a0c:	4013      	ands	r3, r2
 8008a0e:	b2da      	uxtb	r2, r3
 8008a10:	240c      	movs	r4, #12
 8008a12:	193b      	adds	r3, r7, r4
 8008a14:	2101      	movs	r1, #1
 8008a16:	400a      	ands	r2, r1
 8008a18:	0110      	lsls	r0, r2, #4
 8008a1a:	781a      	ldrb	r2, [r3, #0]
 8008a1c:	2110      	movs	r1, #16
 8008a1e:	438a      	bics	r2, r1
 8008a20:	1c11      	adds	r1, r2, #0
 8008a22:	1c02      	adds	r2, r0, #0
 8008a24:	430a      	orrs	r2, r1
 8008a26:	701a      	strb	r2, [r3, #0]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL_REG7,
 8008a28:	193a      	adds	r2, r7, r4
 8008a2a:	6878      	ldr	r0, [r7, #4]
 8008a2c:	2301      	movs	r3, #1
 8008a2e:	213f      	movs	r1, #63	; 0x3f
 8008a30:	f7ff fe3b 	bl	80086aa <lis2dw12_write_reg>
 8008a34:	0003      	movs	r3, r0
 8008a36:	617b      	str	r3, [r7, #20]
                             (uint8_t *) &ctrl_reg7, 1);
  }

  return ret;
 8008a38:	697b      	ldr	r3, [r7, #20]
}
 8008a3a:	0018      	movs	r0, r3
 8008a3c:	46bd      	mov	sp, r7
 8008a3e:	b007      	add	sp, #28
 8008a40:	bd90      	pop	{r4, r7, pc}

08008a42 <lis2dw12_pin_int1_route_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_pin_int1_route_set(stmdev_ctx_t *ctx,
                                    lis2dw12_ctrl4_int1_pad_ctrl_t *val)
{
 8008a42:	b580      	push	{r7, lr}
 8008a44:	b086      	sub	sp, #24
 8008a46:	af00      	add	r7, sp, #0
 8008a48:	6078      	str	r0, [r7, #4]
 8008a4a:	6039      	str	r1, [r7, #0]
  lis2dw12_ctrl5_int2_pad_ctrl_t ctrl5_int2_pad_ctrl;
  lis2dw12_ctrl_reg7_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL5_INT2_PAD_CTRL,
 8008a4c:	2310      	movs	r3, #16
 8008a4e:	18fa      	adds	r2, r7, r3
 8008a50:	6878      	ldr	r0, [r7, #4]
 8008a52:	2301      	movs	r3, #1
 8008a54:	2124      	movs	r1, #36	; 0x24
 8008a56:	f7ff fe07 	bl	8008668 <lis2dw12_read_reg>
 8008a5a:	0003      	movs	r3, r0
 8008a5c:	617b      	str	r3, [r7, #20]
                          (uint8_t *)&ctrl5_int2_pad_ctrl, 1);

  if (ret == 0)
 8008a5e:	697b      	ldr	r3, [r7, #20]
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d108      	bne.n	8008a76 <lis2dw12_pin_int1_route_set+0x34>
  {
    ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL_REG7, (uint8_t *) &reg, 1);
 8008a64:	230c      	movs	r3, #12
 8008a66:	18fa      	adds	r2, r7, r3
 8008a68:	6878      	ldr	r0, [r7, #4]
 8008a6a:	2301      	movs	r3, #1
 8008a6c:	213f      	movs	r1, #63	; 0x3f
 8008a6e:	f7ff fdfb 	bl	8008668 <lis2dw12_read_reg>
 8008a72:	0003      	movs	r3, r0
 8008a74:	617b      	str	r3, [r7, #20]
  }

  if (ret == 0)
 8008a76:	697b      	ldr	r3, [r7, #20]
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d146      	bne.n	8008b0a <lis2dw12_pin_int1_route_set+0xc8>
  {
    if ((val->int1_tap |
 8008a7c:	683b      	ldr	r3, [r7, #0]
 8008a7e:	781b      	ldrb	r3, [r3, #0]
 8008a80:	071b      	lsls	r3, r3, #28
 8008a82:	0fdb      	lsrs	r3, r3, #31
 8008a84:	b2da      	uxtb	r2, r3
         val->int1_ff |
 8008a86:	683b      	ldr	r3, [r7, #0]
 8008a88:	781b      	ldrb	r3, [r3, #0]
 8008a8a:	06db      	lsls	r3, r3, #27
 8008a8c:	0fdb      	lsrs	r3, r3, #31
 8008a8e:	b2db      	uxtb	r3, r3
    if ((val->int1_tap |
 8008a90:	4313      	orrs	r3, r2
 8008a92:	b2da      	uxtb	r2, r3
         val->int1_wu |
 8008a94:	683b      	ldr	r3, [r7, #0]
 8008a96:	781b      	ldrb	r3, [r3, #0]
 8008a98:	069b      	lsls	r3, r3, #26
 8008a9a:	0fdb      	lsrs	r3, r3, #31
 8008a9c:	b2db      	uxtb	r3, r3
         val->int1_ff |
 8008a9e:	4313      	orrs	r3, r2
 8008aa0:	b2da      	uxtb	r2, r3
         val->int1_single_tap |
 8008aa2:	683b      	ldr	r3, [r7, #0]
 8008aa4:	781b      	ldrb	r3, [r3, #0]
 8008aa6:	065b      	lsls	r3, r3, #25
 8008aa8:	0fdb      	lsrs	r3, r3, #31
 8008aaa:	b2db      	uxtb	r3, r3
         val->int1_wu |
 8008aac:	4313      	orrs	r3, r2
 8008aae:	b2da      	uxtb	r2, r3
         val->int1_6d |
 8008ab0:	683b      	ldr	r3, [r7, #0]
 8008ab2:	781b      	ldrb	r3, [r3, #0]
 8008ab4:	061b      	lsls	r3, r3, #24
 8008ab6:	0fdb      	lsrs	r3, r3, #31
 8008ab8:	b2db      	uxtb	r3, r3
         val->int1_single_tap |
 8008aba:	4313      	orrs	r3, r2
 8008abc:	b2da      	uxtb	r2, r3
         ctrl5_int2_pad_ctrl.int2_sleep_state |
 8008abe:	2110      	movs	r1, #16
 8008ac0:	187b      	adds	r3, r7, r1
 8008ac2:	781b      	ldrb	r3, [r3, #0]
 8008ac4:	061b      	lsls	r3, r3, #24
 8008ac6:	0fdb      	lsrs	r3, r3, #31
 8008ac8:	b2db      	uxtb	r3, r3
         val->int1_6d |
 8008aca:	4313      	orrs	r3, r2
 8008acc:	b2da      	uxtb	r2, r3
         ctrl5_int2_pad_ctrl.int2_sleep_chg) != PROPERTY_DISABLE)
 8008ace:	187b      	adds	r3, r7, r1
 8008ad0:	781b      	ldrb	r3, [r3, #0]
 8008ad2:	065b      	lsls	r3, r3, #25
 8008ad4:	0fdb      	lsrs	r3, r3, #31
 8008ad6:	b2db      	uxtb	r3, r3
         ctrl5_int2_pad_ctrl.int2_sleep_state |
 8008ad8:	4313      	orrs	r3, r2
 8008ada:	b2db      	uxtb	r3, r3
    if ((val->int1_tap |
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d006      	beq.n	8008aee <lis2dw12_pin_int1_route_set+0xac>
    {
      reg.interrupts_enable = PROPERTY_ENABLE;
 8008ae0:	230c      	movs	r3, #12
 8008ae2:	18fb      	adds	r3, r7, r3
 8008ae4:	781a      	ldrb	r2, [r3, #0]
 8008ae6:	2120      	movs	r1, #32
 8008ae8:	430a      	orrs	r2, r1
 8008aea:	701a      	strb	r2, [r3, #0]
 8008aec:	e005      	b.n	8008afa <lis2dw12_pin_int1_route_set+0xb8>
    }

    else
    {
      reg.interrupts_enable = PROPERTY_DISABLE;
 8008aee:	230c      	movs	r3, #12
 8008af0:	18fb      	adds	r3, r7, r3
 8008af2:	781a      	ldrb	r2, [r3, #0]
 8008af4:	2120      	movs	r1, #32
 8008af6:	438a      	bics	r2, r1
 8008af8:	701a      	strb	r2, [r3, #0]
    }

    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL4_INT1_PAD_CTRL,
 8008afa:	683a      	ldr	r2, [r7, #0]
 8008afc:	6878      	ldr	r0, [r7, #4]
 8008afe:	2301      	movs	r3, #1
 8008b00:	2123      	movs	r1, #35	; 0x23
 8008b02:	f7ff fdd2 	bl	80086aa <lis2dw12_write_reg>
 8008b06:	0003      	movs	r3, r0
 8008b08:	617b      	str	r3, [r7, #20]
                             (uint8_t *) val, 1);
  }

  if (ret == 0)
 8008b0a:	697b      	ldr	r3, [r7, #20]
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d108      	bne.n	8008b22 <lis2dw12_pin_int1_route_set+0xe0>
  {
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL_REG7, (uint8_t *) &reg, 1);
 8008b10:	230c      	movs	r3, #12
 8008b12:	18fa      	adds	r2, r7, r3
 8008b14:	6878      	ldr	r0, [r7, #4]
 8008b16:	2301      	movs	r3, #1
 8008b18:	213f      	movs	r1, #63	; 0x3f
 8008b1a:	f7ff fdc6 	bl	80086aa <lis2dw12_write_reg>
 8008b1e:	0003      	movs	r3, r0
 8008b20:	617b      	str	r3, [r7, #20]
  }

  return ret;
 8008b22:	697b      	ldr	r3, [r7, #20]
}
 8008b24:	0018      	movs	r0, r3
 8008b26:	46bd      	mov	sp, r7
 8008b28:	b006      	add	sp, #24
 8008b2a:	bd80      	pop	{r7, pc}

08008b2c <lis2dw12_pin_int1_route_get>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_pin_int1_route_get(stmdev_ctx_t *ctx,
                                    lis2dw12_ctrl4_int1_pad_ctrl_t *val)
{
 8008b2c:	b580      	push	{r7, lr}
 8008b2e:	b084      	sub	sp, #16
 8008b30:	af00      	add	r7, sp, #0
 8008b32:	6078      	str	r0, [r7, #4]
 8008b34:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL4_INT1_PAD_CTRL,
 8008b36:	683a      	ldr	r2, [r7, #0]
 8008b38:	6878      	ldr	r0, [r7, #4]
 8008b3a:	2301      	movs	r3, #1
 8008b3c:	2123      	movs	r1, #35	; 0x23
 8008b3e:	f7ff fd93 	bl	8008668 <lis2dw12_read_reg>
 8008b42:	0003      	movs	r3, r0
 8008b44:	60fb      	str	r3, [r7, #12]
                          (uint8_t *) val, 1);

  return ret;
 8008b46:	68fb      	ldr	r3, [r7, #12]
}
 8008b48:	0018      	movs	r0, r3
 8008b4a:	46bd      	mov	sp, r7
 8008b4c:	b004      	add	sp, #16
 8008b4e:	bd80      	pop	{r7, pc}

08008b50 <lis2dw12_wkup_threshold_set>:
  * @param  val      change the values of wk_ths in reg WAKE_UP_THS
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_wkup_threshold_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8008b50:	b590      	push	{r4, r7, lr}
 8008b52:	b085      	sub	sp, #20
 8008b54:	af00      	add	r7, sp, #0
 8008b56:	6078      	str	r0, [r7, #4]
 8008b58:	000a      	movs	r2, r1
 8008b5a:	1cfb      	adds	r3, r7, #3
 8008b5c:	701a      	strb	r2, [r3, #0]
  lis2dw12_wake_up_ths_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_WAKE_UP_THS, (uint8_t *) &reg, 1);
 8008b5e:	2408      	movs	r4, #8
 8008b60:	193a      	adds	r2, r7, r4
 8008b62:	6878      	ldr	r0, [r7, #4]
 8008b64:	2301      	movs	r3, #1
 8008b66:	2134      	movs	r1, #52	; 0x34
 8008b68:	f7ff fd7e 	bl	8008668 <lis2dw12_read_reg>
 8008b6c:	0003      	movs	r3, r0
 8008b6e:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d117      	bne.n	8008ba6 <lis2dw12_wkup_threshold_set+0x56>
  {
    reg.wk_ths = val;
 8008b76:	1cfb      	adds	r3, r7, #3
 8008b78:	781b      	ldrb	r3, [r3, #0]
 8008b7a:	223f      	movs	r2, #63	; 0x3f
 8008b7c:	4013      	ands	r3, r2
 8008b7e:	b2da      	uxtb	r2, r3
 8008b80:	193b      	adds	r3, r7, r4
 8008b82:	213f      	movs	r1, #63	; 0x3f
 8008b84:	400a      	ands	r2, r1
 8008b86:	0010      	movs	r0, r2
 8008b88:	781a      	ldrb	r2, [r3, #0]
 8008b8a:	213f      	movs	r1, #63	; 0x3f
 8008b8c:	438a      	bics	r2, r1
 8008b8e:	1c11      	adds	r1, r2, #0
 8008b90:	1c02      	adds	r2, r0, #0
 8008b92:	430a      	orrs	r2, r1
 8008b94:	701a      	strb	r2, [r3, #0]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_WAKE_UP_THS, (uint8_t *) &reg, 1);
 8008b96:	193a      	adds	r2, r7, r4
 8008b98:	6878      	ldr	r0, [r7, #4]
 8008b9a:	2301      	movs	r3, #1
 8008b9c:	2134      	movs	r1, #52	; 0x34
 8008b9e:	f7ff fd84 	bl	80086aa <lis2dw12_write_reg>
 8008ba2:	0003      	movs	r3, r0
 8008ba4:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8008ba6:	68fb      	ldr	r3, [r7, #12]
}
 8008ba8:	0018      	movs	r0, r3
 8008baa:	46bd      	mov	sp, r7
 8008bac:	b005      	add	sp, #20
 8008bae:	bd90      	pop	{r4, r7, pc}

08008bb0 <lis2dw12_wkup_dur_set>:
  * @param  val      change the values of wake_dur in reg WAKE_UP_DUR
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_wkup_dur_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8008bb0:	b590      	push	{r4, r7, lr}
 8008bb2:	b085      	sub	sp, #20
 8008bb4:	af00      	add	r7, sp, #0
 8008bb6:	6078      	str	r0, [r7, #4]
 8008bb8:	000a      	movs	r2, r1
 8008bba:	1cfb      	adds	r3, r7, #3
 8008bbc:	701a      	strb	r2, [r3, #0]
  lis2dw12_wake_up_dur_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_WAKE_UP_DUR, (uint8_t *) &reg, 1);
 8008bbe:	2408      	movs	r4, #8
 8008bc0:	193a      	adds	r2, r7, r4
 8008bc2:	6878      	ldr	r0, [r7, #4]
 8008bc4:	2301      	movs	r3, #1
 8008bc6:	2135      	movs	r1, #53	; 0x35
 8008bc8:	f7ff fd4e 	bl	8008668 <lis2dw12_read_reg>
 8008bcc:	0003      	movs	r3, r0
 8008bce:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d117      	bne.n	8008c06 <lis2dw12_wkup_dur_set+0x56>
  {
    reg.wake_dur = val;
 8008bd6:	1cfb      	adds	r3, r7, #3
 8008bd8:	781b      	ldrb	r3, [r3, #0]
 8008bda:	2203      	movs	r2, #3
 8008bdc:	4013      	ands	r3, r2
 8008bde:	b2da      	uxtb	r2, r3
 8008be0:	193b      	adds	r3, r7, r4
 8008be2:	2103      	movs	r1, #3
 8008be4:	400a      	ands	r2, r1
 8008be6:	0150      	lsls	r0, r2, #5
 8008be8:	781a      	ldrb	r2, [r3, #0]
 8008bea:	2160      	movs	r1, #96	; 0x60
 8008bec:	438a      	bics	r2, r1
 8008bee:	1c11      	adds	r1, r2, #0
 8008bf0:	1c02      	adds	r2, r0, #0
 8008bf2:	430a      	orrs	r2, r1
 8008bf4:	701a      	strb	r2, [r3, #0]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_WAKE_UP_DUR, (uint8_t *) &reg, 1);
 8008bf6:	193a      	adds	r2, r7, r4
 8008bf8:	6878      	ldr	r0, [r7, #4]
 8008bfa:	2301      	movs	r3, #1
 8008bfc:	2135      	movs	r1, #53	; 0x35
 8008bfe:	f7ff fd54 	bl	80086aa <lis2dw12_write_reg>
 8008c02:	0003      	movs	r3, r0
 8008c04:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8008c06:	68fb      	ldr	r3, [r7, #12]
}
 8008c08:	0018      	movs	r0, r3
 8008c0a:	46bd      	mov	sp, r7
 8008c0c:	b005      	add	sp, #20
 8008c0e:	bd90      	pop	{r4, r7, pc}

08008c10 <my_lis2dw12_init>:
 */

#include "my_lis2dw12.h"

bool my_lis2dw12_init ( stmdev_ctx_t* ctx )
{
 8008c10:	b590      	push	{r4, r7, lr}
 8008c12:	b085      	sub	sp, #20
 8008c14:	af00      	add	r7, sp, #0
 8008c16:	6078      	str	r0, [r7, #4]
	uint8_t rst = 1 ;
 8008c18:	230f      	movs	r3, #15
 8008c1a:	18fb      	adds	r3, r7, r3
 8008c1c:	2201      	movs	r2, #1
 8008c1e:	701a      	strb	r2, [r3, #0]

	/*Restore default configuration */
	lis2dw12_reset_set ( ctx , PROPERTY_ENABLE ) ;
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	2101      	movs	r1, #1
 8008c24:	0018      	movs	r0, r3
 8008c26:	f7ff fe67 	bl	80088f8 <lis2dw12_reset_set>
	do {
		lis2dw12_reset_get ( ctx, &rst ) ;
 8008c2a:	240f      	movs	r4, #15
 8008c2c:	193a      	adds	r2, r7, r4
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	0011      	movs	r1, r2
 8008c32:	0018      	movs	r0, r3
 8008c34:	f7ff fe90 	bl	8008958 <lis2dw12_reset_get>
	} while ( rst ) ;
 8008c38:	193b      	adds	r3, r7, r4
 8008c3a:	781b      	ldrb	r3, [r3, #0]
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d1f4      	bne.n	8008c2a <my_lis2dw12_init+0x1a>
	if ( my_lis2dw12_get_id ( ctx ) == LIS2DW12_ID )
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	0018      	movs	r0, r3
 8008c44:	f000 f828 	bl	8008c98 <my_lis2dw12_get_id>
 8008c48:	0003      	movs	r3, r0
 8008c4a:	2b44      	cmp	r3, #68	; 0x44
 8008c4c:	d11f      	bne.n	8008c8e <my_lis2dw12_init+0x7e>
	{
		lis2dw12_full_scale_set 	( ctx , LIS2DW12_2g ) ;
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	2100      	movs	r1, #0
 8008c52:	0018      	movs	r0, r3
 8008c54:	f7ff fe0e 	bl	8008874 <lis2dw12_full_scale_set>
		lis2dw12_power_mode_set 	( ctx , LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit ) ;
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	2110      	movs	r1, #16
 8008c5c:	0018      	movs	r0, r3
 8008c5e:	f7ff fd45 	bl	80086ec <lis2dw12_power_mode_set>
		lis2dw12_data_rate_set 		( ctx , LIS2DW12_XL_ODR_200Hz ) ;
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	2106      	movs	r1, #6
 8008c66:	0018      	movs	r0, r3
 8008c68:	f7ff fdac 	bl	80087c4 <lis2dw12_data_rate_set>
		lis2dw12_filter_path_set 	( ctx , LIS2DW12_HIGH_PASS_ON_OUT ) ;
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	2110      	movs	r1, #16
 8008c70:	0018      	movs	r0, r3
 8008c72:	f7ff fe8c 	bl	800898e <lis2dw12_filter_path_set>
		lis2dw12_wkup_dur_set		( ctx , 0 ) ;
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	2100      	movs	r1, #0
 8008c7a:	0018      	movs	r0, r3
 8008c7c:	f7ff ff98 	bl	8008bb0 <lis2dw12_wkup_dur_set>
		lis2dw12_wkup_threshold_set	( ctx, 2 ) ;
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	2102      	movs	r1, #2
 8008c84:	0018      	movs	r0, r3
 8008c86:	f7ff ff63 	bl	8008b50 <lis2dw12_wkup_threshold_set>
		return true ;
 8008c8a:	2301      	movs	r3, #1
 8008c8c:	e000      	b.n	8008c90 <my_lis2dw12_init+0x80>
	}
	return 0 ;
 8008c8e:	2300      	movs	r3, #0
}
 8008c90:	0018      	movs	r0, r3
 8008c92:	46bd      	mov	sp, r7
 8008c94:	b005      	add	sp, #20
 8008c96:	bd90      	pop	{r4, r7, pc}

08008c98 <my_lis2dw12_get_id>:

uint8_t my_lis2dw12_get_id ( stmdev_ctx_t* ctx )
{
 8008c98:	b590      	push	{r4, r7, lr}
 8008c9a:	b085      	sub	sp, #20
 8008c9c:	af00      	add	r7, sp, #0
 8008c9e:	6078      	str	r0, [r7, #4]
	uint8_t id = 0 ;
 8008ca0:	210f      	movs	r1, #15
 8008ca2:	187b      	adds	r3, r7, r1
 8008ca4:	2200      	movs	r2, #0
 8008ca6:	701a      	strb	r2, [r3, #0]
	lis2dw12_device_id_get ( ctx , &id ) ;
 8008ca8:	000c      	movs	r4, r1
 8008caa:	187a      	adds	r2, r7, r1
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	0011      	movs	r1, r2
 8008cb0:	0018      	movs	r0, r3
 8008cb2:	f7ff fe0f 	bl	80088d4 <lis2dw12_device_id_get>
	return id ;
 8008cb6:	193b      	adds	r3, r7, r4
 8008cb8:	781b      	ldrb	r3, [r3, #0]
}
 8008cba:	0018      	movs	r0, r3
 8008cbc:	46bd      	mov	sp, r7
 8008cbe:	b005      	add	sp, #20
 8008cc0:	bd90      	pop	{r4, r7, pc}

08008cc2 <my_lis2dw12_int1_wu_enable>:

void my_lis2dw12_int1_wu_enable ( stmdev_ctx_t* ctx )
{
 8008cc2:	b590      	push	{r4, r7, lr}
 8008cc4:	b085      	sub	sp, #20
 8008cc6:	af00      	add	r7, sp, #0
 8008cc8:	6078      	str	r0, [r7, #4]
	lis2dw12_reg_t int_route ;
	lis2dw12_pin_int1_route_get	( ctx, &int_route.ctrl4_int1_pad_ctrl ) ;
 8008cca:	240c      	movs	r4, #12
 8008ccc:	193a      	adds	r2, r7, r4
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	0011      	movs	r1, r2
 8008cd2:	0018      	movs	r0, r3
 8008cd4:	f7ff ff2a 	bl	8008b2c <lis2dw12_pin_int1_route_get>
	int_route.ctrl4_int1_pad_ctrl.int1_wu = PROPERTY_ENABLE ;
 8008cd8:	0020      	movs	r0, r4
 8008cda:	183b      	adds	r3, r7, r0
 8008cdc:	781a      	ldrb	r2, [r3, #0]
 8008cde:	2120      	movs	r1, #32
 8008ce0:	430a      	orrs	r2, r1
 8008ce2:	701a      	strb	r2, [r3, #0]
	lis2dw12_pin_int1_route_set	( ctx , &int_route.ctrl4_int1_pad_ctrl ) ;
 8008ce4:	183a      	adds	r2, r7, r0
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	0011      	movs	r1, r2
 8008cea:	0018      	movs	r0, r3
 8008cec:	f7ff fea9 	bl	8008a42 <lis2dw12_pin_int1_route_set>
}
 8008cf0:	46c0      	nop			; (mov r8, r8)
 8008cf2:	46bd      	mov	sp, r7
 8008cf4:	b005      	add	sp, #20
 8008cf6:	bd90      	pop	{r4, r7, pc}

08008cf8 <my_find_char_position>:
    return f ;
}

//Find position in string of n occurance of the comma
uint8_t my_find_char_position ( const char* m , const char c , uint8_t n )
{
 8008cf8:	b580      	push	{r7, lr}
 8008cfa:	b084      	sub	sp, #16
 8008cfc:	af00      	add	r7, sp, #0
 8008cfe:	6078      	str	r0, [r7, #4]
 8008d00:	0008      	movs	r0, r1
 8008d02:	0011      	movs	r1, r2
 8008d04:	1cfb      	adds	r3, r7, #3
 8008d06:	1c02      	adds	r2, r0, #0
 8008d08:	701a      	strb	r2, [r3, #0]
 8008d0a:	1cbb      	adds	r3, r7, #2
 8008d0c:	1c0a      	adds	r2, r1, #0
 8008d0e:	701a      	strb	r2, [r3, #0]
	uint8_t i = 0 ;
 8008d10:	230f      	movs	r3, #15
 8008d12:	18fb      	adds	r3, r7, r3
 8008d14:	2200      	movs	r2, #0
 8008d16:	701a      	strb	r2, [r3, #0]
	uint8_t p = 0 ;
 8008d18:	230e      	movs	r3, #14
 8008d1a:	18fb      	adds	r3, r7, r3
 8008d1c:	2200      	movs	r2, #0
 8008d1e:	701a      	strb	r2, [r3, #0]

	while ( m[i] != '\0' )
 8008d20:	e01c      	b.n	8008d5c <my_find_char_position+0x64>
	{
		if ( m[i] == c )
 8008d22:	230f      	movs	r3, #15
 8008d24:	18fb      	adds	r3, r7, r3
 8008d26:	781b      	ldrb	r3, [r3, #0]
 8008d28:	687a      	ldr	r2, [r7, #4]
 8008d2a:	18d3      	adds	r3, r2, r3
 8008d2c:	781b      	ldrb	r3, [r3, #0]
 8008d2e:	1cfa      	adds	r2, r7, #3
 8008d30:	7812      	ldrb	r2, [r2, #0]
 8008d32:	429a      	cmp	r2, r3
 8008d34:	d105      	bne.n	8008d42 <my_find_char_position+0x4a>
			p++ ;
 8008d36:	210e      	movs	r1, #14
 8008d38:	187b      	adds	r3, r7, r1
 8008d3a:	781a      	ldrb	r2, [r3, #0]
 8008d3c:	187b      	adds	r3, r7, r1
 8008d3e:	3201      	adds	r2, #1
 8008d40:	701a      	strb	r2, [r3, #0]
		if ( p == n )
 8008d42:	230e      	movs	r3, #14
 8008d44:	18fa      	adds	r2, r7, r3
 8008d46:	1cbb      	adds	r3, r7, #2
 8008d48:	7812      	ldrb	r2, [r2, #0]
 8008d4a:	781b      	ldrb	r3, [r3, #0]
 8008d4c:	429a      	cmp	r2, r3
 8008d4e:	d00e      	beq.n	8008d6e <my_find_char_position+0x76>
			break ;
		i++ ;
 8008d50:	210f      	movs	r1, #15
 8008d52:	187b      	adds	r3, r7, r1
 8008d54:	781a      	ldrb	r2, [r3, #0]
 8008d56:	187b      	adds	r3, r7, r1
 8008d58:	3201      	adds	r2, #1
 8008d5a:	701a      	strb	r2, [r3, #0]
	while ( m[i] != '\0' )
 8008d5c:	230f      	movs	r3, #15
 8008d5e:	18fb      	adds	r3, r7, r3
 8008d60:	781b      	ldrb	r3, [r3, #0]
 8008d62:	687a      	ldr	r2, [r7, #4]
 8008d64:	18d3      	adds	r3, r2, r3
 8008d66:	781b      	ldrb	r3, [r3, #0]
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d1da      	bne.n	8008d22 <my_find_char_position+0x2a>
 8008d6c:	e000      	b.n	8008d70 <my_find_char_position+0x78>
			break ;
 8008d6e:	46c0      	nop			; (mov r8, r8)
	}
	return i ;
 8008d70:	230f      	movs	r3, #15
 8008d72:	18fb      	adds	r3, r7, r3
 8008d74:	781b      	ldrb	r3, [r3, #0]
}
 8008d76:	0018      	movs	r0, r3
 8008d78:	46bd      	mov	sp, r7
 8008d7a:	b004      	add	sp, #16
 8008d7c:	bd80      	pop	{r7, pc}

08008d7e <my_nmea_message>:
#include <inttypes.h>
#include "my_nmea.h"


int my_nmea_message ( uint8_t* c , uint8_t* m , uint8_t* i )
{
 8008d7e:	b580      	push	{r7, lr}
 8008d80:	b084      	sub	sp, #16
 8008d82:	af00      	add	r7, sp, #0
 8008d84:	60f8      	str	r0, [r7, #12]
 8008d86:	60b9      	str	r1, [r7, #8]
 8008d88:	607a      	str	r2, [r7, #4]
    if ( *c == '$' )
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	781b      	ldrb	r3, [r3, #0]
 8008d8e:	2b24      	cmp	r3, #36	; 0x24
 8008d90:	d117      	bne.n	8008dc2 <my_nmea_message+0x44>
    {
        *i = 0 ;
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	2200      	movs	r2, #0
 8008d96:	701a      	strb	r2, [r3, #0]
        m[(*i)++] = *c ;
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	781b      	ldrb	r3, [r3, #0]
 8008d9c:	1c5a      	adds	r2, r3, #1
 8008d9e:	b2d1      	uxtb	r1, r2
 8008da0:	687a      	ldr	r2, [r7, #4]
 8008da2:	7011      	strb	r1, [r2, #0]
 8008da4:	001a      	movs	r2, r3
 8008da6:	68bb      	ldr	r3, [r7, #8]
 8008da8:	189b      	adds	r3, r3, r2
 8008daa:	68fa      	ldr	r2, [r7, #12]
 8008dac:	7812      	ldrb	r2, [r2, #0]
 8008dae:	701a      	strb	r2, [r3, #0]
        m[*i] = '\0' ;
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	781b      	ldrb	r3, [r3, #0]
 8008db4:	001a      	movs	r2, r3
 8008db6:	68bb      	ldr	r3, [r7, #8]
 8008db8:	189b      	adds	r3, r3, r2
 8008dba:	2200      	movs	r2, #0
 8008dbc:	701a      	strb	r2, [r3, #0]
        return 0 ;
 8008dbe:	2300      	movs	r3, #0
 8008dc0:	e045      	b.n	8008e4e <my_nmea_message+0xd0>
    }
    if ( ( *c >= ' ' && *c <= '~' && *i > 0 ) || *c == '\r' )
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	781b      	ldrb	r3, [r3, #0]
 8008dc6:	2b1f      	cmp	r3, #31
 8008dc8:	d907      	bls.n	8008dda <my_nmea_message+0x5c>
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	781b      	ldrb	r3, [r3, #0]
 8008dce:	2b7e      	cmp	r3, #126	; 0x7e
 8008dd0:	d803      	bhi.n	8008dda <my_nmea_message+0x5c>
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	781b      	ldrb	r3, [r3, #0]
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d103      	bne.n	8008de2 <my_nmea_message+0x64>
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	781b      	ldrb	r3, [r3, #0]
 8008dde:	2b0d      	cmp	r3, #13
 8008de0:	d114      	bne.n	8008e0c <my_nmea_message+0x8e>
    {
        m[(*i)++] = *c ;
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	781b      	ldrb	r3, [r3, #0]
 8008de6:	1c5a      	adds	r2, r3, #1
 8008de8:	b2d1      	uxtb	r1, r2
 8008dea:	687a      	ldr	r2, [r7, #4]
 8008dec:	7011      	strb	r1, [r2, #0]
 8008dee:	001a      	movs	r2, r3
 8008df0:	68bb      	ldr	r3, [r7, #8]
 8008df2:	189b      	adds	r3, r3, r2
 8008df4:	68fa      	ldr	r2, [r7, #12]
 8008df6:	7812      	ldrb	r2, [r2, #0]
 8008df8:	701a      	strb	r2, [r3, #0]
        m[*i] = '\0' ;
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	781b      	ldrb	r3, [r3, #0]
 8008dfe:	001a      	movs	r2, r3
 8008e00:	68bb      	ldr	r3, [r7, #8]
 8008e02:	189b      	adds	r3, r3, r2
 8008e04:	2200      	movs	r2, #0
 8008e06:	701a      	strb	r2, [r3, #0]
        return 1 ;
 8008e08:	2301      	movs	r3, #1
 8008e0a:	e020      	b.n	8008e4e <my_nmea_message+0xd0>
    }
    if ( *c == '\n' && *i > 1 )
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	781b      	ldrb	r3, [r3, #0]
 8008e10:	2b0a      	cmp	r3, #10
 8008e12:	d11a      	bne.n	8008e4a <my_nmea_message+0xcc>
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	781b      	ldrb	r3, [r3, #0]
 8008e18:	2b01      	cmp	r3, #1
 8008e1a:	d916      	bls.n	8008e4a <my_nmea_message+0xcc>
    {
        if ( m[--(*i)] == '\r' )
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	781b      	ldrb	r3, [r3, #0]
 8008e20:	3b01      	subs	r3, #1
 8008e22:	b2da      	uxtb	r2, r3
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	701a      	strb	r2, [r3, #0]
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	781b      	ldrb	r3, [r3, #0]
 8008e2c:	001a      	movs	r2, r3
 8008e2e:	68bb      	ldr	r3, [r7, #8]
 8008e30:	189b      	adds	r3, r3, r2
 8008e32:	781b      	ldrb	r3, [r3, #0]
 8008e34:	2b0d      	cmp	r3, #13
 8008e36:	d108      	bne.n	8008e4a <my_nmea_message+0xcc>
        {
            m[*i] = '\0' ;
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	781b      	ldrb	r3, [r3, #0]
 8008e3c:	001a      	movs	r2, r3
 8008e3e:	68bb      	ldr	r3, [r7, #8]
 8008e40:	189b      	adds	r3, r3, r2
 8008e42:	2200      	movs	r2, #0
 8008e44:	701a      	strb	r2, [r3, #0]
            return 2 ;
 8008e46:	2302      	movs	r3, #2
 8008e48:	e001      	b.n	8008e4e <my_nmea_message+0xd0>
        }
    }
    return -1 ;
 8008e4a:	2301      	movs	r3, #1
 8008e4c:	425b      	negs	r3, r3
}
 8008e4e:	0018      	movs	r0, r3
 8008e50:	46bd      	mov	sp, r7
 8008e52:	b004      	add	sp, #16
 8008e54:	bd80      	pop	{r7, pc}

08008e56 <is_my_nmea_checksum_ok>:
	return pdop ; // przed zwróceniem zaokrąglij do 2 miejsc po przecinku
}


bool is_my_nmea_checksum_ok ( const char* s )
{
 8008e56:	b590      	push	{r4, r7, lr}
 8008e58:	b085      	sub	sp, #20
 8008e5a:	af00      	add	r7, sp, #0
 8008e5c:	6078      	str	r0, [r7, #4]
    uint8_t cs = 0 ;
 8008e5e:	230f      	movs	r3, #15
 8008e60:	18fb      	adds	r3, r7, r3
 8008e62:	2200      	movs	r2, #0
 8008e64:	701a      	strb	r2, [r3, #0]
    uint8_t i = 1 ; // Start from index 1 to skip the '$' character
 8008e66:	230e      	movs	r3, #14
 8008e68:	18fb      	adds	r3, r7, r3
 8008e6a:	2201      	movs	r2, #1
 8008e6c:	701a      	strb	r2, [r3, #0]
    while ( s[i] != '*' && s[i] != '\0' && i != 0 )
 8008e6e:	e00f      	b.n	8008e90 <is_my_nmea_checksum_ok+0x3a>
        cs ^= s[i++] ;
 8008e70:	220e      	movs	r2, #14
 8008e72:	18bb      	adds	r3, r7, r2
 8008e74:	781b      	ldrb	r3, [r3, #0]
 8008e76:	18ba      	adds	r2, r7, r2
 8008e78:	1c59      	adds	r1, r3, #1
 8008e7a:	7011      	strb	r1, [r2, #0]
 8008e7c:	001a      	movs	r2, r3
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	189b      	adds	r3, r3, r2
 8008e82:	7819      	ldrb	r1, [r3, #0]
 8008e84:	220f      	movs	r2, #15
 8008e86:	18bb      	adds	r3, r7, r2
 8008e88:	18ba      	adds	r2, r7, r2
 8008e8a:	7812      	ldrb	r2, [r2, #0]
 8008e8c:	404a      	eors	r2, r1
 8008e8e:	701a      	strb	r2, [r3, #0]
    while ( s[i] != '*' && s[i] != '\0' && i != 0 )
 8008e90:	210e      	movs	r1, #14
 8008e92:	187b      	adds	r3, r7, r1
 8008e94:	781b      	ldrb	r3, [r3, #0]
 8008e96:	687a      	ldr	r2, [r7, #4]
 8008e98:	18d3      	adds	r3, r2, r3
 8008e9a:	781b      	ldrb	r3, [r3, #0]
 8008e9c:	2b2a      	cmp	r3, #42	; 0x2a
 8008e9e:	d00a      	beq.n	8008eb6 <is_my_nmea_checksum_ok+0x60>
 8008ea0:	187b      	adds	r3, r7, r1
 8008ea2:	781b      	ldrb	r3, [r3, #0]
 8008ea4:	687a      	ldr	r2, [r7, #4]
 8008ea6:	18d3      	adds	r3, r2, r3
 8008ea8:	781b      	ldrb	r3, [r3, #0]
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d003      	beq.n	8008eb6 <is_my_nmea_checksum_ok+0x60>
 8008eae:	187b      	adds	r3, r7, r1
 8008eb0:	781b      	ldrb	r3, [r3, #0]
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d1dc      	bne.n	8008e70 <is_my_nmea_checksum_ok+0x1a>
    //uint8_t* b = &s[++i] ;
    //uint8_t* c = strtol ( b , NULL, 16 ) ;
    return ( cs == strtol ( (char*) &s[++i] , NULL, 16 ) ) ? true : false ;
 8008eb6:	230f      	movs	r3, #15
 8008eb8:	18fb      	adds	r3, r7, r3
 8008eba:	781c      	ldrb	r4, [r3, #0]
 8008ebc:	210e      	movs	r1, #14
 8008ebe:	187b      	adds	r3, r7, r1
 8008ec0:	187a      	adds	r2, r7, r1
 8008ec2:	7812      	ldrb	r2, [r2, #0]
 8008ec4:	3201      	adds	r2, #1
 8008ec6:	701a      	strb	r2, [r3, #0]
 8008ec8:	187b      	adds	r3, r7, r1
 8008eca:	781b      	ldrb	r3, [r3, #0]
 8008ecc:	687a      	ldr	r2, [r7, #4]
 8008ece:	18d3      	adds	r3, r2, r3
 8008ed0:	2210      	movs	r2, #16
 8008ed2:	2100      	movs	r1, #0
 8008ed4:	0018      	movs	r0, r3
 8008ed6:	f001 f92d 	bl	800a134 <strtol>
 8008eda:	0003      	movs	r3, r0
 8008edc:	1ae3      	subs	r3, r4, r3
 8008ede:	425a      	negs	r2, r3
 8008ee0:	4153      	adcs	r3, r2
 8008ee2:	b2db      	uxtb	r3, r3
}
 8008ee4:	0018      	movs	r0, r3
 8008ee6:	46bd      	mov	sp, r7
 8008ee8:	b005      	add	sp, #20
 8008eea:	bd90      	pop	{r4, r7, pc}

08008eec <my_nmea_get_gsv_tns>:
	longitude_d = round ( longitude_d * 1e6 ) / 1e6 ;
	snprintf ( longitude_s , 12 , "%.6lf" , longitude_d ) ;
	*longitude_astro_geo_wr = (int32_t) ( longitude_d * 10000000 ) ;
}
uint16_t my_nmea_get_gsv_tns ( const char* m ) //tns = Total Number Satelites
{
 8008eec:	b5b0      	push	{r4, r5, r7, lr}
 8008eee:	b086      	sub	sp, #24
 8008ef0:	af00      	add	r7, sp, #0
 8008ef2:	6078      	str	r0, [r7, #4]
	uint16_t tns = 0 ;
 8008ef4:	240e      	movs	r4, #14
 8008ef6:	193b      	adds	r3, r7, r4
 8008ef8:	2200      	movs	r2, #0
 8008efa:	801a      	strh	r2, [r3, #0]
	uint8_t position = my_find_char_position ( m , NMEA_DELIMETER , GSV_TNS_POSITION ) + 1 ;
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	2203      	movs	r2, #3
 8008f00:	212c      	movs	r1, #44	; 0x2c
 8008f02:	0018      	movs	r0, r3
 8008f04:	f7ff fef8 	bl	8008cf8 <my_find_char_position>
 8008f08:	0003      	movs	r3, r0
 8008f0a:	001a      	movs	r2, r3
 8008f0c:	2517      	movs	r5, #23
 8008f0e:	197b      	adds	r3, r7, r5
 8008f10:	3201      	adds	r2, #1
 8008f12:	701a      	strb	r2, [r3, #0]
	char* s = (char*) malloc ( ( GSV_TNS_LENGTH +1 ) * sizeof ( uint8_t ) ) ;
 8008f14:	2003      	movs	r0, #3
 8008f16:	f000 f821 	bl	8008f5c <malloc>
 8008f1a:	0003      	movs	r3, r0
 8008f1c:	613b      	str	r3, [r7, #16]
	strncpy ( s , m + position , GSV_TNS_LENGTH ) ; // Kopiowanie fragmentu łańcucha
 8008f1e:	197b      	adds	r3, r7, r5
 8008f20:	781b      	ldrb	r3, [r3, #0]
 8008f22:	687a      	ldr	r2, [r7, #4]
 8008f24:	18d1      	adds	r1, r2, r3
 8008f26:	693b      	ldr	r3, [r7, #16]
 8008f28:	2202      	movs	r2, #2
 8008f2a:	0018      	movs	r0, r3
 8008f2c:	f001 fab5 	bl	800a49a <strncpy>
	s[GSV_TNS_LENGTH] = '\0';
 8008f30:	693b      	ldr	r3, [r7, #16]
 8008f32:	3302      	adds	r3, #2
 8008f34:	2200      	movs	r2, #0
 8008f36:	701a      	strb	r2, [r3, #0]
	sscanf ( s , "%hu" , &tns ) ;
 8008f38:	193a      	adds	r2, r7, r4
 8008f3a:	4907      	ldr	r1, [pc, #28]	; (8008f58 <my_nmea_get_gsv_tns+0x6c>)
 8008f3c:	693b      	ldr	r3, [r7, #16]
 8008f3e:	0018      	movs	r0, r3
 8008f40:	f001 fa1c 	bl	800a37c <sscanf>
	free ( s ) ;
 8008f44:	693b      	ldr	r3, [r7, #16]
 8008f46:	0018      	movs	r0, r3
 8008f48:	f000 f812 	bl	8008f70 <free>
	return tns ;
 8008f4c:	193b      	adds	r3, r7, r4
 8008f4e:	881b      	ldrh	r3, [r3, #0]
}
 8008f50:	0018      	movs	r0, r3
 8008f52:	46bd      	mov	sp, r7
 8008f54:	b006      	add	sp, #24
 8008f56:	bdb0      	pop	{r4, r5, r7, pc}
 8008f58:	0801291c 	.word	0x0801291c

08008f5c <malloc>:
 8008f5c:	b510      	push	{r4, lr}
 8008f5e:	4b03      	ldr	r3, [pc, #12]	; (8008f6c <malloc+0x10>)
 8008f60:	0001      	movs	r1, r0
 8008f62:	6818      	ldr	r0, [r3, #0]
 8008f64:	f000 f80e 	bl	8008f84 <_malloc_r>
 8008f68:	bd10      	pop	{r4, pc}
 8008f6a:	46c0      	nop			; (mov r8, r8)
 8008f6c:	200006b8 	.word	0x200006b8

08008f70 <free>:
 8008f70:	b510      	push	{r4, lr}
 8008f72:	4b03      	ldr	r3, [pc, #12]	; (8008f80 <free+0x10>)
 8008f74:	0001      	movs	r1, r0
 8008f76:	6818      	ldr	r0, [r3, #0]
 8008f78:	f001 fbd6 	bl	800a728 <_free_r>
 8008f7c:	bd10      	pop	{r4, pc}
 8008f7e:	46c0      	nop			; (mov r8, r8)
 8008f80:	200006b8 	.word	0x200006b8

08008f84 <_malloc_r>:
 8008f84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008f86:	000d      	movs	r5, r1
 8008f88:	b087      	sub	sp, #28
 8008f8a:	350b      	adds	r5, #11
 8008f8c:	9001      	str	r0, [sp, #4]
 8008f8e:	2d16      	cmp	r5, #22
 8008f90:	d908      	bls.n	8008fa4 <_malloc_r+0x20>
 8008f92:	2207      	movs	r2, #7
 8008f94:	4395      	bics	r5, r2
 8008f96:	d506      	bpl.n	8008fa6 <_malloc_r+0x22>
 8008f98:	230c      	movs	r3, #12
 8008f9a:	9a01      	ldr	r2, [sp, #4]
 8008f9c:	6013      	str	r3, [r2, #0]
 8008f9e:	2000      	movs	r0, #0
 8008fa0:	b007      	add	sp, #28
 8008fa2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008fa4:	2510      	movs	r5, #16
 8008fa6:	42a9      	cmp	r1, r5
 8008fa8:	d8f6      	bhi.n	8008f98 <_malloc_r+0x14>
 8008faa:	9801      	ldr	r0, [sp, #4]
 8008fac:	f000 f9fe 	bl	80093ac <__malloc_lock>
 8008fb0:	23fc      	movs	r3, #252	; 0xfc
 8008fb2:	4ebe      	ldr	r6, [pc, #760]	; (80092ac <_malloc_r+0x328>)
 8008fb4:	005b      	lsls	r3, r3, #1
 8008fb6:	429d      	cmp	r5, r3
 8008fb8:	d219      	bcs.n	8008fee <_malloc_r+0x6a>
 8008fba:	002a      	movs	r2, r5
 8008fbc:	3208      	adds	r2, #8
 8008fbe:	18b2      	adds	r2, r6, r2
 8008fc0:	0011      	movs	r1, r2
 8008fc2:	6854      	ldr	r4, [r2, #4]
 8008fc4:	3908      	subs	r1, #8
 8008fc6:	08eb      	lsrs	r3, r5, #3
 8008fc8:	428c      	cmp	r4, r1
 8008fca:	d103      	bne.n	8008fd4 <_malloc_r+0x50>
 8008fcc:	68d4      	ldr	r4, [r2, #12]
 8008fce:	3302      	adds	r3, #2
 8008fd0:	42a2      	cmp	r2, r4
 8008fd2:	d022      	beq.n	800901a <_malloc_r+0x96>
 8008fd4:	2203      	movs	r2, #3
 8008fd6:	6863      	ldr	r3, [r4, #4]
 8008fd8:	68a1      	ldr	r1, [r4, #8]
 8008fda:	4393      	bics	r3, r2
 8008fdc:	68e2      	ldr	r2, [r4, #12]
 8008fde:	18e3      	adds	r3, r4, r3
 8008fe0:	60ca      	str	r2, [r1, #12]
 8008fe2:	6091      	str	r1, [r2, #8]
 8008fe4:	2201      	movs	r2, #1
 8008fe6:	6859      	ldr	r1, [r3, #4]
 8008fe8:	430a      	orrs	r2, r1
 8008fea:	605a      	str	r2, [r3, #4]
 8008fec:	e02a      	b.n	8009044 <_malloc_r+0xc0>
 8008fee:	233f      	movs	r3, #63	; 0x3f
 8008ff0:	0a6a      	lsrs	r2, r5, #9
 8008ff2:	d003      	beq.n	8008ffc <_malloc_r+0x78>
 8008ff4:	2a04      	cmp	r2, #4
 8008ff6:	d82b      	bhi.n	8009050 <_malloc_r+0xcc>
 8008ff8:	09ab      	lsrs	r3, r5, #6
 8008ffa:	3338      	adds	r3, #56	; 0x38
 8008ffc:	2203      	movs	r2, #3
 8008ffe:	4694      	mov	ip, r2
 8009000:	00d9      	lsls	r1, r3, #3
 8009002:	1989      	adds	r1, r1, r6
 8009004:	68cc      	ldr	r4, [r1, #12]
 8009006:	428c      	cmp	r4, r1
 8009008:	d006      	beq.n	8009018 <_malloc_r+0x94>
 800900a:	4660      	mov	r0, ip
 800900c:	6862      	ldr	r2, [r4, #4]
 800900e:	4382      	bics	r2, r0
 8009010:	1b57      	subs	r7, r2, r5
 8009012:	2f0f      	cmp	r7, #15
 8009014:	dd34      	ble.n	8009080 <_malloc_r+0xfc>
 8009016:	3b01      	subs	r3, #1
 8009018:	3301      	adds	r3, #1
 800901a:	6934      	ldr	r4, [r6, #16]
 800901c:	49a4      	ldr	r1, [pc, #656]	; (80092b0 <_malloc_r+0x32c>)
 800901e:	428c      	cmp	r4, r1
 8009020:	d055      	beq.n	80090ce <_malloc_r+0x14a>
 8009022:	2003      	movs	r0, #3
 8009024:	6862      	ldr	r2, [r4, #4]
 8009026:	4382      	bics	r2, r0
 8009028:	1b50      	subs	r0, r2, r5
 800902a:	280f      	cmp	r0, #15
 800902c:	dd36      	ble.n	800909c <_malloc_r+0x118>
 800902e:	2301      	movs	r3, #1
 8009030:	1967      	adds	r7, r4, r5
 8009032:	431d      	orrs	r5, r3
 8009034:	4303      	orrs	r3, r0
 8009036:	6065      	str	r5, [r4, #4]
 8009038:	6177      	str	r7, [r6, #20]
 800903a:	6137      	str	r7, [r6, #16]
 800903c:	60f9      	str	r1, [r7, #12]
 800903e:	60b9      	str	r1, [r7, #8]
 8009040:	607b      	str	r3, [r7, #4]
 8009042:	50a0      	str	r0, [r4, r2]
 8009044:	9801      	ldr	r0, [sp, #4]
 8009046:	f000 f9b9 	bl	80093bc <__malloc_unlock>
 800904a:	0020      	movs	r0, r4
 800904c:	3008      	adds	r0, #8
 800904e:	e7a7      	b.n	8008fa0 <_malloc_r+0x1c>
 8009050:	2a14      	cmp	r2, #20
 8009052:	d802      	bhi.n	800905a <_malloc_r+0xd6>
 8009054:	0013      	movs	r3, r2
 8009056:	335b      	adds	r3, #91	; 0x5b
 8009058:	e7d0      	b.n	8008ffc <_malloc_r+0x78>
 800905a:	2a54      	cmp	r2, #84	; 0x54
 800905c:	d802      	bhi.n	8009064 <_malloc_r+0xe0>
 800905e:	0b2b      	lsrs	r3, r5, #12
 8009060:	336e      	adds	r3, #110	; 0x6e
 8009062:	e7cb      	b.n	8008ffc <_malloc_r+0x78>
 8009064:	23aa      	movs	r3, #170	; 0xaa
 8009066:	005b      	lsls	r3, r3, #1
 8009068:	429a      	cmp	r2, r3
 800906a:	d802      	bhi.n	8009072 <_malloc_r+0xee>
 800906c:	0beb      	lsrs	r3, r5, #15
 800906e:	3377      	adds	r3, #119	; 0x77
 8009070:	e7c4      	b.n	8008ffc <_malloc_r+0x78>
 8009072:	4990      	ldr	r1, [pc, #576]	; (80092b4 <_malloc_r+0x330>)
 8009074:	237e      	movs	r3, #126	; 0x7e
 8009076:	428a      	cmp	r2, r1
 8009078:	d8c0      	bhi.n	8008ffc <_malloc_r+0x78>
 800907a:	0cab      	lsrs	r3, r5, #18
 800907c:	337c      	adds	r3, #124	; 0x7c
 800907e:	e7bd      	b.n	8008ffc <_malloc_r+0x78>
 8009080:	68e0      	ldr	r0, [r4, #12]
 8009082:	2f00      	cmp	r7, #0
 8009084:	db08      	blt.n	8009098 <_malloc_r+0x114>
 8009086:	68a3      	ldr	r3, [r4, #8]
 8009088:	60d8      	str	r0, [r3, #12]
 800908a:	6083      	str	r3, [r0, #8]
 800908c:	2301      	movs	r3, #1
 800908e:	18a2      	adds	r2, r4, r2
 8009090:	6851      	ldr	r1, [r2, #4]
 8009092:	430b      	orrs	r3, r1
 8009094:	6053      	str	r3, [r2, #4]
 8009096:	e7d5      	b.n	8009044 <_malloc_r+0xc0>
 8009098:	0004      	movs	r4, r0
 800909a:	e7b4      	b.n	8009006 <_malloc_r+0x82>
 800909c:	6171      	str	r1, [r6, #20]
 800909e:	6131      	str	r1, [r6, #16]
 80090a0:	2800      	cmp	r0, #0
 80090a2:	daf3      	bge.n	800908c <_malloc_r+0x108>
 80090a4:	6871      	ldr	r1, [r6, #4]
 80090a6:	468c      	mov	ip, r1
 80090a8:	2180      	movs	r1, #128	; 0x80
 80090aa:	0089      	lsls	r1, r1, #2
 80090ac:	428a      	cmp	r2, r1
 80090ae:	d300      	bcc.n	80090b2 <_malloc_r+0x12e>
 80090b0:	e08c      	b.n	80091cc <_malloc_r+0x248>
 80090b2:	08d1      	lsrs	r1, r2, #3
 80090b4:	0950      	lsrs	r0, r2, #5
 80090b6:	2201      	movs	r2, #1
 80090b8:	4082      	lsls	r2, r0
 80090ba:	4660      	mov	r0, ip
 80090bc:	4302      	orrs	r2, r0
 80090be:	6072      	str	r2, [r6, #4]
 80090c0:	00ca      	lsls	r2, r1, #3
 80090c2:	1992      	adds	r2, r2, r6
 80090c4:	6891      	ldr	r1, [r2, #8]
 80090c6:	60e2      	str	r2, [r4, #12]
 80090c8:	60a1      	str	r1, [r4, #8]
 80090ca:	6094      	str	r4, [r2, #8]
 80090cc:	60cc      	str	r4, [r1, #12]
 80090ce:	2201      	movs	r2, #1
 80090d0:	4876      	ldr	r0, [pc, #472]	; (80092ac <_malloc_r+0x328>)
 80090d2:	1099      	asrs	r1, r3, #2
 80090d4:	408a      	lsls	r2, r1
 80090d6:	6841      	ldr	r1, [r0, #4]
 80090d8:	4291      	cmp	r1, r2
 80090da:	d328      	bcc.n	800912e <_malloc_r+0x1aa>
 80090dc:	420a      	tst	r2, r1
 80090de:	d105      	bne.n	80090ec <_malloc_r+0x168>
 80090e0:	2403      	movs	r4, #3
 80090e2:	43a3      	bics	r3, r4
 80090e4:	0052      	lsls	r2, r2, #1
 80090e6:	3304      	adds	r3, #4
 80090e8:	420a      	tst	r2, r1
 80090ea:	d0fb      	beq.n	80090e4 <_malloc_r+0x160>
 80090ec:	496f      	ldr	r1, [pc, #444]	; (80092ac <_malloc_r+0x328>)
 80090ee:	9104      	str	r1, [sp, #16]
 80090f0:	00d9      	lsls	r1, r3, #3
 80090f2:	1841      	adds	r1, r0, r1
 80090f4:	468c      	mov	ip, r1
 80090f6:	000f      	movs	r7, r1
 80090f8:	9302      	str	r3, [sp, #8]
 80090fa:	68fc      	ldr	r4, [r7, #12]
 80090fc:	42bc      	cmp	r4, r7
 80090fe:	d000      	beq.n	8009102 <_malloc_r+0x17e>
 8009100:	e09b      	b.n	800923a <_malloc_r+0x2b6>
 8009102:	2403      	movs	r4, #3
 8009104:	9902      	ldr	r1, [sp, #8]
 8009106:	3708      	adds	r7, #8
 8009108:	3101      	adds	r1, #1
 800910a:	9102      	str	r1, [sp, #8]
 800910c:	4221      	tst	r1, r4
 800910e:	d1f4      	bne.n	80090fa <_malloc_r+0x176>
 8009110:	2103      	movs	r1, #3
 8009112:	420b      	tst	r3, r1
 8009114:	d000      	beq.n	8009118 <_malloc_r+0x194>
 8009116:	e0b7      	b.n	8009288 <_malloc_r+0x304>
 8009118:	6843      	ldr	r3, [r0, #4]
 800911a:	4393      	bics	r3, r2
 800911c:	6043      	str	r3, [r0, #4]
 800911e:	9b04      	ldr	r3, [sp, #16]
 8009120:	0052      	lsls	r2, r2, #1
 8009122:	6859      	ldr	r1, [r3, #4]
 8009124:	4291      	cmp	r1, r2
 8009126:	d302      	bcc.n	800912e <_malloc_r+0x1aa>
 8009128:	2a00      	cmp	r2, #0
 800912a:	d000      	beq.n	800912e <_malloc_r+0x1aa>
 800912c:	e0bb      	b.n	80092a6 <_malloc_r+0x322>
 800912e:	2203      	movs	r2, #3
 8009130:	6883      	ldr	r3, [r0, #8]
 8009132:	9302      	str	r3, [sp, #8]
 8009134:	685b      	ldr	r3, [r3, #4]
 8009136:	4393      	bics	r3, r2
 8009138:	9303      	str	r3, [sp, #12]
 800913a:	42ab      	cmp	r3, r5
 800913c:	d303      	bcc.n	8009146 <_malloc_r+0x1c2>
 800913e:	1b59      	subs	r1, r3, r5
 8009140:	290f      	cmp	r1, #15
 8009142:	dd00      	ble.n	8009146 <_malloc_r+0x1c2>
 8009144:	e123      	b.n	800938e <_malloc_r+0x40a>
 8009146:	9b02      	ldr	r3, [sp, #8]
 8009148:	9a03      	ldr	r2, [sp, #12]
 800914a:	2008      	movs	r0, #8
 800914c:	189e      	adds	r6, r3, r2
 800914e:	4b5a      	ldr	r3, [pc, #360]	; (80092b8 <_malloc_r+0x334>)
 8009150:	681f      	ldr	r7, [r3, #0]
 8009152:	f001 fa63 	bl	800a61c <sysconf>
 8009156:	4b59      	ldr	r3, [pc, #356]	; (80092bc <_malloc_r+0x338>)
 8009158:	3710      	adds	r7, #16
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	197f      	adds	r7, r7, r5
 800915e:	9004      	str	r0, [sp, #16]
 8009160:	3301      	adds	r3, #1
 8009162:	d003      	beq.n	800916c <_malloc_r+0x1e8>
 8009164:	1e7b      	subs	r3, r7, #1
 8009166:	181b      	adds	r3, r3, r0
 8009168:	4247      	negs	r7, r0
 800916a:	401f      	ands	r7, r3
 800916c:	0039      	movs	r1, r7
 800916e:	9801      	ldr	r0, [sp, #4]
 8009170:	f001 fa00 	bl	800a574 <_sbrk_r>
 8009174:	0004      	movs	r4, r0
 8009176:	1c43      	adds	r3, r0, #1
 8009178:	d100      	bne.n	800917c <_malloc_r+0x1f8>
 800917a:	e0de      	b.n	800933a <_malloc_r+0x3b6>
 800917c:	4286      	cmp	r6, r0
 800917e:	d904      	bls.n	800918a <_malloc_r+0x206>
 8009180:	4b4a      	ldr	r3, [pc, #296]	; (80092ac <_malloc_r+0x328>)
 8009182:	9a02      	ldr	r2, [sp, #8]
 8009184:	429a      	cmp	r2, r3
 8009186:	d000      	beq.n	800918a <_malloc_r+0x206>
 8009188:	e0d7      	b.n	800933a <_malloc_r+0x3b6>
 800918a:	4a4d      	ldr	r2, [pc, #308]	; (80092c0 <_malloc_r+0x33c>)
 800918c:	6813      	ldr	r3, [r2, #0]
 800918e:	18fb      	adds	r3, r7, r3
 8009190:	6013      	str	r3, [r2, #0]
 8009192:	9a04      	ldr	r2, [sp, #16]
 8009194:	3a01      	subs	r2, #1
 8009196:	42a6      	cmp	r6, r4
 8009198:	d000      	beq.n	800919c <_malloc_r+0x218>
 800919a:	e097      	b.n	80092cc <_malloc_r+0x348>
 800919c:	4216      	tst	r6, r2
 800919e:	d000      	beq.n	80091a2 <_malloc_r+0x21e>
 80091a0:	e094      	b.n	80092cc <_malloc_r+0x348>
 80091a2:	4b42      	ldr	r3, [pc, #264]	; (80092ac <_malloc_r+0x328>)
 80091a4:	689a      	ldr	r2, [r3, #8]
 80091a6:	9b03      	ldr	r3, [sp, #12]
 80091a8:	19df      	adds	r7, r3, r7
 80091aa:	2301      	movs	r3, #1
 80091ac:	433b      	orrs	r3, r7
 80091ae:	6053      	str	r3, [r2, #4]
 80091b0:	4b43      	ldr	r3, [pc, #268]	; (80092c0 <_malloc_r+0x33c>)
 80091b2:	4a44      	ldr	r2, [pc, #272]	; (80092c4 <_malloc_r+0x340>)
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	6811      	ldr	r1, [r2, #0]
 80091b8:	428b      	cmp	r3, r1
 80091ba:	d900      	bls.n	80091be <_malloc_r+0x23a>
 80091bc:	6013      	str	r3, [r2, #0]
 80091be:	4a42      	ldr	r2, [pc, #264]	; (80092c8 <_malloc_r+0x344>)
 80091c0:	6811      	ldr	r1, [r2, #0]
 80091c2:	428b      	cmp	r3, r1
 80091c4:	d800      	bhi.n	80091c8 <_malloc_r+0x244>
 80091c6:	e0b8      	b.n	800933a <_malloc_r+0x3b6>
 80091c8:	6013      	str	r3, [r2, #0]
 80091ca:	e0b6      	b.n	800933a <_malloc_r+0x3b6>
 80091cc:	0a50      	lsrs	r0, r2, #9
 80091ce:	2804      	cmp	r0, #4
 80091d0:	d811      	bhi.n	80091f6 <_malloc_r+0x272>
 80091d2:	0991      	lsrs	r1, r2, #6
 80091d4:	3138      	adds	r1, #56	; 0x38
 80091d6:	00cf      	lsls	r7, r1, #3
 80091d8:	19bf      	adds	r7, r7, r6
 80091da:	68b8      	ldr	r0, [r7, #8]
 80091dc:	4287      	cmp	r7, r0
 80091de:	d125      	bne.n	800922c <_malloc_r+0x2a8>
 80091e0:	2201      	movs	r2, #1
 80091e2:	1089      	asrs	r1, r1, #2
 80091e4:	408a      	lsls	r2, r1
 80091e6:	4661      	mov	r1, ip
 80091e8:	430a      	orrs	r2, r1
 80091ea:	6072      	str	r2, [r6, #4]
 80091ec:	60e7      	str	r7, [r4, #12]
 80091ee:	60a0      	str	r0, [r4, #8]
 80091f0:	60bc      	str	r4, [r7, #8]
 80091f2:	60c4      	str	r4, [r0, #12]
 80091f4:	e76b      	b.n	80090ce <_malloc_r+0x14a>
 80091f6:	2814      	cmp	r0, #20
 80091f8:	d802      	bhi.n	8009200 <_malloc_r+0x27c>
 80091fa:	0001      	movs	r1, r0
 80091fc:	315b      	adds	r1, #91	; 0x5b
 80091fe:	e7ea      	b.n	80091d6 <_malloc_r+0x252>
 8009200:	2854      	cmp	r0, #84	; 0x54
 8009202:	d802      	bhi.n	800920a <_malloc_r+0x286>
 8009204:	0b11      	lsrs	r1, r2, #12
 8009206:	316e      	adds	r1, #110	; 0x6e
 8009208:	e7e5      	b.n	80091d6 <_malloc_r+0x252>
 800920a:	21aa      	movs	r1, #170	; 0xaa
 800920c:	0049      	lsls	r1, r1, #1
 800920e:	4288      	cmp	r0, r1
 8009210:	d802      	bhi.n	8009218 <_malloc_r+0x294>
 8009212:	0bd1      	lsrs	r1, r2, #15
 8009214:	3177      	adds	r1, #119	; 0x77
 8009216:	e7de      	b.n	80091d6 <_malloc_r+0x252>
 8009218:	4f26      	ldr	r7, [pc, #152]	; (80092b4 <_malloc_r+0x330>)
 800921a:	217e      	movs	r1, #126	; 0x7e
 800921c:	42b8      	cmp	r0, r7
 800921e:	d8da      	bhi.n	80091d6 <_malloc_r+0x252>
 8009220:	0c91      	lsrs	r1, r2, #18
 8009222:	317c      	adds	r1, #124	; 0x7c
 8009224:	e7d7      	b.n	80091d6 <_malloc_r+0x252>
 8009226:	6880      	ldr	r0, [r0, #8]
 8009228:	4287      	cmp	r7, r0
 800922a:	d004      	beq.n	8009236 <_malloc_r+0x2b2>
 800922c:	2603      	movs	r6, #3
 800922e:	6841      	ldr	r1, [r0, #4]
 8009230:	43b1      	bics	r1, r6
 8009232:	4291      	cmp	r1, r2
 8009234:	d8f7      	bhi.n	8009226 <_malloc_r+0x2a2>
 8009236:	68c7      	ldr	r7, [r0, #12]
 8009238:	e7d8      	b.n	80091ec <_malloc_r+0x268>
 800923a:	2603      	movs	r6, #3
 800923c:	6861      	ldr	r1, [r4, #4]
 800923e:	43b1      	bics	r1, r6
 8009240:	9103      	str	r1, [sp, #12]
 8009242:	68e6      	ldr	r6, [r4, #12]
 8009244:	1b49      	subs	r1, r1, r5
 8009246:	290f      	cmp	r1, #15
 8009248:	dd10      	ble.n	800926c <_malloc_r+0x2e8>
 800924a:	2201      	movs	r2, #1
 800924c:	1963      	adds	r3, r4, r5
 800924e:	4315      	orrs	r5, r2
 8009250:	6065      	str	r5, [r4, #4]
 8009252:	68a5      	ldr	r5, [r4, #8]
 8009254:	430a      	orrs	r2, r1
 8009256:	60ee      	str	r6, [r5, #12]
 8009258:	60b5      	str	r5, [r6, #8]
 800925a:	6143      	str	r3, [r0, #20]
 800925c:	6103      	str	r3, [r0, #16]
 800925e:	4814      	ldr	r0, [pc, #80]	; (80092b0 <_malloc_r+0x32c>)
 8009260:	605a      	str	r2, [r3, #4]
 8009262:	60d8      	str	r0, [r3, #12]
 8009264:	6098      	str	r0, [r3, #8]
 8009266:	9b03      	ldr	r3, [sp, #12]
 8009268:	50e1      	str	r1, [r4, r3]
 800926a:	e6eb      	b.n	8009044 <_malloc_r+0xc0>
 800926c:	2900      	cmp	r1, #0
 800926e:	db09      	blt.n	8009284 <_malloc_r+0x300>
 8009270:	9b03      	ldr	r3, [sp, #12]
 8009272:	18e1      	adds	r1, r4, r3
 8009274:	2301      	movs	r3, #1
 8009276:	684a      	ldr	r2, [r1, #4]
 8009278:	4313      	orrs	r3, r2
 800927a:	604b      	str	r3, [r1, #4]
 800927c:	68a3      	ldr	r3, [r4, #8]
 800927e:	60de      	str	r6, [r3, #12]
 8009280:	60b3      	str	r3, [r6, #8]
 8009282:	e6df      	b.n	8009044 <_malloc_r+0xc0>
 8009284:	0034      	movs	r4, r6
 8009286:	e739      	b.n	80090fc <_malloc_r+0x178>
 8009288:	2108      	movs	r1, #8
 800928a:	4249      	negs	r1, r1
 800928c:	448c      	add	ip, r1
 800928e:	4661      	mov	r1, ip
 8009290:	6889      	ldr	r1, [r1, #8]
 8009292:	3b01      	subs	r3, #1
 8009294:	4561      	cmp	r1, ip
 8009296:	d100      	bne.n	800929a <_malloc_r+0x316>
 8009298:	e73a      	b.n	8009110 <_malloc_r+0x18c>
 800929a:	e740      	b.n	800911e <_malloc_r+0x19a>
 800929c:	3304      	adds	r3, #4
 800929e:	0052      	lsls	r2, r2, #1
 80092a0:	420a      	tst	r2, r1
 80092a2:	d0fb      	beq.n	800929c <_malloc_r+0x318>
 80092a4:	e724      	b.n	80090f0 <_malloc_r+0x16c>
 80092a6:	9b02      	ldr	r3, [sp, #8]
 80092a8:	e7fa      	b.n	80092a0 <_malloc_r+0x31c>
 80092aa:	46c0      	nop			; (mov r8, r8)
 80092ac:	20000010 	.word	0x20000010
 80092b0:	20000018 	.word	0x20000018
 80092b4:	00000554 	.word	0x00000554
 80092b8:	20000ac0 	.word	0x20000ac0
 80092bc:	20000418 	.word	0x20000418
 80092c0:	20000a90 	.word	0x20000a90
 80092c4:	20000ab8 	.word	0x20000ab8
 80092c8:	20000abc 	.word	0x20000abc
 80092cc:	4934      	ldr	r1, [pc, #208]	; (80093a0 <_malloc_r+0x41c>)
 80092ce:	6808      	ldr	r0, [r1, #0]
 80092d0:	3001      	adds	r0, #1
 80092d2:	d140      	bne.n	8009356 <_malloc_r+0x3d2>
 80092d4:	600c      	str	r4, [r1, #0]
 80092d6:	2107      	movs	r1, #7
 80092d8:	0026      	movs	r6, r4
 80092da:	2300      	movs	r3, #0
 80092dc:	400e      	ands	r6, r1
 80092de:	420c      	tst	r4, r1
 80092e0:	d002      	beq.n	80092e8 <_malloc_r+0x364>
 80092e2:	3308      	adds	r3, #8
 80092e4:	1b9b      	subs	r3, r3, r6
 80092e6:	18e4      	adds	r4, r4, r3
 80092e8:	19e1      	adds	r1, r4, r7
 80092ea:	9105      	str	r1, [sp, #20]
 80092ec:	9f05      	ldr	r7, [sp, #20]
 80092ee:	9904      	ldr	r1, [sp, #16]
 80092f0:	4017      	ands	r7, r2
 80092f2:	18cb      	adds	r3, r1, r3
 80092f4:	1bdf      	subs	r7, r3, r7
 80092f6:	4017      	ands	r7, r2
 80092f8:	0039      	movs	r1, r7
 80092fa:	9801      	ldr	r0, [sp, #4]
 80092fc:	f001 f93a 	bl	800a574 <_sbrk_r>
 8009300:	1c43      	adds	r3, r0, #1
 8009302:	d107      	bne.n	8009314 <_malloc_r+0x390>
 8009304:	1e37      	subs	r7, r6, #0
 8009306:	9805      	ldr	r0, [sp, #20]
 8009308:	d004      	beq.n	8009314 <_malloc_r+0x390>
 800930a:	0030      	movs	r0, r6
 800930c:	2700      	movs	r7, #0
 800930e:	9b05      	ldr	r3, [sp, #20]
 8009310:	3808      	subs	r0, #8
 8009312:	1818      	adds	r0, r3, r0
 8009314:	4a23      	ldr	r2, [pc, #140]	; (80093a4 <_malloc_r+0x420>)
 8009316:	1b00      	subs	r0, r0, r4
 8009318:	6813      	ldr	r3, [r2, #0]
 800931a:	19c0      	adds	r0, r0, r7
 800931c:	19db      	adds	r3, r3, r7
 800931e:	6013      	str	r3, [r2, #0]
 8009320:	2201      	movs	r2, #1
 8009322:	4b21      	ldr	r3, [pc, #132]	; (80093a8 <_malloc_r+0x424>)
 8009324:	9902      	ldr	r1, [sp, #8]
 8009326:	4310      	orrs	r0, r2
 8009328:	609c      	str	r4, [r3, #8]
 800932a:	6060      	str	r0, [r4, #4]
 800932c:	4299      	cmp	r1, r3
 800932e:	d100      	bne.n	8009332 <_malloc_r+0x3ae>
 8009330:	e73e      	b.n	80091b0 <_malloc_r+0x22c>
 8009332:	9b03      	ldr	r3, [sp, #12]
 8009334:	2b0f      	cmp	r3, #15
 8009336:	d813      	bhi.n	8009360 <_malloc_r+0x3dc>
 8009338:	6062      	str	r2, [r4, #4]
 800933a:	2203      	movs	r2, #3
 800933c:	4b1a      	ldr	r3, [pc, #104]	; (80093a8 <_malloc_r+0x424>)
 800933e:	689b      	ldr	r3, [r3, #8]
 8009340:	685b      	ldr	r3, [r3, #4]
 8009342:	4393      	bics	r3, r2
 8009344:	1b59      	subs	r1, r3, r5
 8009346:	42ab      	cmp	r3, r5
 8009348:	d301      	bcc.n	800934e <_malloc_r+0x3ca>
 800934a:	290f      	cmp	r1, #15
 800934c:	dc1f      	bgt.n	800938e <_malloc_r+0x40a>
 800934e:	9801      	ldr	r0, [sp, #4]
 8009350:	f000 f834 	bl	80093bc <__malloc_unlock>
 8009354:	e623      	b.n	8008f9e <_malloc_r+0x1a>
 8009356:	4913      	ldr	r1, [pc, #76]	; (80093a4 <_malloc_r+0x420>)
 8009358:	1ba6      	subs	r6, r4, r6
 800935a:	18f6      	adds	r6, r6, r3
 800935c:	600e      	str	r6, [r1, #0]
 800935e:	e7ba      	b.n	80092d6 <_malloc_r+0x352>
 8009360:	2107      	movs	r1, #7
 8009362:	9b03      	ldr	r3, [sp, #12]
 8009364:	3b0c      	subs	r3, #12
 8009366:	438b      	bics	r3, r1
 8009368:	9902      	ldr	r1, [sp, #8]
 800936a:	6849      	ldr	r1, [r1, #4]
 800936c:	400a      	ands	r2, r1
 800936e:	9902      	ldr	r1, [sp, #8]
 8009370:	431a      	orrs	r2, r3
 8009372:	604a      	str	r2, [r1, #4]
 8009374:	18ca      	adds	r2, r1, r3
 8009376:	2105      	movs	r1, #5
 8009378:	6051      	str	r1, [r2, #4]
 800937a:	6091      	str	r1, [r2, #8]
 800937c:	2b0f      	cmp	r3, #15
 800937e:	d800      	bhi.n	8009382 <_malloc_r+0x3fe>
 8009380:	e716      	b.n	80091b0 <_malloc_r+0x22c>
 8009382:	9902      	ldr	r1, [sp, #8]
 8009384:	9801      	ldr	r0, [sp, #4]
 8009386:	3108      	adds	r1, #8
 8009388:	f001 f9ce 	bl	800a728 <_free_r>
 800938c:	e710      	b.n	80091b0 <_malloc_r+0x22c>
 800938e:	2201      	movs	r2, #1
 8009390:	0013      	movs	r3, r2
 8009392:	4805      	ldr	r0, [pc, #20]	; (80093a8 <_malloc_r+0x424>)
 8009394:	432b      	orrs	r3, r5
 8009396:	6884      	ldr	r4, [r0, #8]
 8009398:	6063      	str	r3, [r4, #4]
 800939a:	1963      	adds	r3, r4, r5
 800939c:	6083      	str	r3, [r0, #8]
 800939e:	e623      	b.n	8008fe8 <_malloc_r+0x64>
 80093a0:	20000418 	.word	0x20000418
 80093a4:	20000a90 	.word	0x20000a90
 80093a8:	20000010 	.word	0x20000010

080093ac <__malloc_lock>:
 80093ac:	b510      	push	{r4, lr}
 80093ae:	4802      	ldr	r0, [pc, #8]	; (80093b8 <__malloc_lock+0xc>)
 80093b0:	f001 f932 	bl	800a618 <__retarget_lock_acquire_recursive>
 80093b4:	bd10      	pop	{r4, pc}
 80093b6:	46c0      	nop			; (mov r8, r8)
 80093b8:	20000c05 	.word	0x20000c05

080093bc <__malloc_unlock>:
 80093bc:	b510      	push	{r4, lr}
 80093be:	4802      	ldr	r0, [pc, #8]	; (80093c8 <__malloc_unlock+0xc>)
 80093c0:	f001 f92b 	bl	800a61a <__retarget_lock_release_recursive>
 80093c4:	bd10      	pop	{r4, pc}
 80093c6:	46c0      	nop			; (mov r8, r8)
 80093c8:	20000c05 	.word	0x20000c05

080093cc <sulp>:
 80093cc:	b570      	push	{r4, r5, r6, lr}
 80093ce:	0016      	movs	r6, r2
 80093d0:	000d      	movs	r5, r1
 80093d2:	f002 f8ff 	bl	800b5d4 <__ulp>
 80093d6:	2e00      	cmp	r6, #0
 80093d8:	d00d      	beq.n	80093f6 <sulp+0x2a>
 80093da:	236b      	movs	r3, #107	; 0x6b
 80093dc:	006a      	lsls	r2, r5, #1
 80093de:	0d52      	lsrs	r2, r2, #21
 80093e0:	1a9b      	subs	r3, r3, r2
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	dd07      	ble.n	80093f6 <sulp+0x2a>
 80093e6:	2400      	movs	r4, #0
 80093e8:	4a03      	ldr	r2, [pc, #12]	; (80093f8 <sulp+0x2c>)
 80093ea:	051b      	lsls	r3, r3, #20
 80093ec:	189d      	adds	r5, r3, r2
 80093ee:	002b      	movs	r3, r5
 80093f0:	0022      	movs	r2, r4
 80093f2:	f7f8 f93b 	bl	800166c <__aeabi_dmul>
 80093f6:	bd70      	pop	{r4, r5, r6, pc}
 80093f8:	3ff00000 	.word	0x3ff00000

080093fc <_strtod_l>:
 80093fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80093fe:	b0a1      	sub	sp, #132	; 0x84
 8009400:	9219      	str	r2, [sp, #100]	; 0x64
 8009402:	2200      	movs	r2, #0
 8009404:	2600      	movs	r6, #0
 8009406:	2700      	movs	r7, #0
 8009408:	9004      	str	r0, [sp, #16]
 800940a:	9107      	str	r1, [sp, #28]
 800940c:	921c      	str	r2, [sp, #112]	; 0x70
 800940e:	911b      	str	r1, [sp, #108]	; 0x6c
 8009410:	780a      	ldrb	r2, [r1, #0]
 8009412:	2a2b      	cmp	r2, #43	; 0x2b
 8009414:	d055      	beq.n	80094c2 <_strtod_l+0xc6>
 8009416:	d841      	bhi.n	800949c <_strtod_l+0xa0>
 8009418:	2a0d      	cmp	r2, #13
 800941a:	d83b      	bhi.n	8009494 <_strtod_l+0x98>
 800941c:	2a08      	cmp	r2, #8
 800941e:	d83b      	bhi.n	8009498 <_strtod_l+0x9c>
 8009420:	2a00      	cmp	r2, #0
 8009422:	d044      	beq.n	80094ae <_strtod_l+0xb2>
 8009424:	2200      	movs	r2, #0
 8009426:	920f      	str	r2, [sp, #60]	; 0x3c
 8009428:	2100      	movs	r1, #0
 800942a:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800942c:	9109      	str	r1, [sp, #36]	; 0x24
 800942e:	782a      	ldrb	r2, [r5, #0]
 8009430:	2a30      	cmp	r2, #48	; 0x30
 8009432:	d000      	beq.n	8009436 <_strtod_l+0x3a>
 8009434:	e085      	b.n	8009542 <_strtod_l+0x146>
 8009436:	786a      	ldrb	r2, [r5, #1]
 8009438:	3120      	adds	r1, #32
 800943a:	438a      	bics	r2, r1
 800943c:	2a58      	cmp	r2, #88	; 0x58
 800943e:	d000      	beq.n	8009442 <_strtod_l+0x46>
 8009440:	e075      	b.n	800952e <_strtod_l+0x132>
 8009442:	9302      	str	r3, [sp, #8]
 8009444:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009446:	4a97      	ldr	r2, [pc, #604]	; (80096a4 <_strtod_l+0x2a8>)
 8009448:	9301      	str	r3, [sp, #4]
 800944a:	ab1c      	add	r3, sp, #112	; 0x70
 800944c:	9300      	str	r3, [sp, #0]
 800944e:	9804      	ldr	r0, [sp, #16]
 8009450:	ab1d      	add	r3, sp, #116	; 0x74
 8009452:	a91b      	add	r1, sp, #108	; 0x6c
 8009454:	f001 fa84 	bl	800a960 <__gethex>
 8009458:	230f      	movs	r3, #15
 800945a:	0002      	movs	r2, r0
 800945c:	401a      	ands	r2, r3
 800945e:	0004      	movs	r4, r0
 8009460:	9205      	str	r2, [sp, #20]
 8009462:	4218      	tst	r0, r3
 8009464:	d005      	beq.n	8009472 <_strtod_l+0x76>
 8009466:	2a06      	cmp	r2, #6
 8009468:	d12d      	bne.n	80094c6 <_strtod_l+0xca>
 800946a:	1c6b      	adds	r3, r5, #1
 800946c:	931b      	str	r3, [sp, #108]	; 0x6c
 800946e:	2300      	movs	r3, #0
 8009470:	930f      	str	r3, [sp, #60]	; 0x3c
 8009472:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009474:	2b00      	cmp	r3, #0
 8009476:	d002      	beq.n	800947e <_strtod_l+0x82>
 8009478:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800947a:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800947c:	6013      	str	r3, [r2, #0]
 800947e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009480:	2b00      	cmp	r3, #0
 8009482:	d01b      	beq.n	80094bc <_strtod_l+0xc0>
 8009484:	2380      	movs	r3, #128	; 0x80
 8009486:	0032      	movs	r2, r6
 8009488:	061b      	lsls	r3, r3, #24
 800948a:	18fb      	adds	r3, r7, r3
 800948c:	0010      	movs	r0, r2
 800948e:	0019      	movs	r1, r3
 8009490:	b021      	add	sp, #132	; 0x84
 8009492:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009494:	2a20      	cmp	r2, #32
 8009496:	d1c5      	bne.n	8009424 <_strtod_l+0x28>
 8009498:	3101      	adds	r1, #1
 800949a:	e7b8      	b.n	800940e <_strtod_l+0x12>
 800949c:	2a2d      	cmp	r2, #45	; 0x2d
 800949e:	d1c1      	bne.n	8009424 <_strtod_l+0x28>
 80094a0:	3a2c      	subs	r2, #44	; 0x2c
 80094a2:	920f      	str	r2, [sp, #60]	; 0x3c
 80094a4:	1c4a      	adds	r2, r1, #1
 80094a6:	921b      	str	r2, [sp, #108]	; 0x6c
 80094a8:	784a      	ldrb	r2, [r1, #1]
 80094aa:	2a00      	cmp	r2, #0
 80094ac:	d1bc      	bne.n	8009428 <_strtod_l+0x2c>
 80094ae:	9b07      	ldr	r3, [sp, #28]
 80094b0:	931b      	str	r3, [sp, #108]	; 0x6c
 80094b2:	2300      	movs	r3, #0
 80094b4:	930f      	str	r3, [sp, #60]	; 0x3c
 80094b6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	d1dd      	bne.n	8009478 <_strtod_l+0x7c>
 80094bc:	0032      	movs	r2, r6
 80094be:	003b      	movs	r3, r7
 80094c0:	e7e4      	b.n	800948c <_strtod_l+0x90>
 80094c2:	2200      	movs	r2, #0
 80094c4:	e7ed      	b.n	80094a2 <_strtod_l+0xa6>
 80094c6:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80094c8:	2a00      	cmp	r2, #0
 80094ca:	d007      	beq.n	80094dc <_strtod_l+0xe0>
 80094cc:	2135      	movs	r1, #53	; 0x35
 80094ce:	a81e      	add	r0, sp, #120	; 0x78
 80094d0:	f002 f971 	bl	800b7b6 <__copybits>
 80094d4:	991c      	ldr	r1, [sp, #112]	; 0x70
 80094d6:	9804      	ldr	r0, [sp, #16]
 80094d8:	f001 fd6e 	bl	800afb8 <_Bfree>
 80094dc:	9805      	ldr	r0, [sp, #20]
 80094de:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80094e0:	3801      	subs	r0, #1
 80094e2:	2804      	cmp	r0, #4
 80094e4:	d806      	bhi.n	80094f4 <_strtod_l+0xf8>
 80094e6:	f7f6 fe15 	bl	8000114 <__gnu_thumb1_case_uqi>
 80094ea:	0312      	.short	0x0312
 80094ec:	1e1c      	.short	0x1e1c
 80094ee:	12          	.byte	0x12
 80094ef:	00          	.byte	0x00
 80094f0:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 80094f2:	9f1f      	ldr	r7, [sp, #124]	; 0x7c
 80094f4:	05e4      	lsls	r4, r4, #23
 80094f6:	d502      	bpl.n	80094fe <_strtod_l+0x102>
 80094f8:	2380      	movs	r3, #128	; 0x80
 80094fa:	061b      	lsls	r3, r3, #24
 80094fc:	431f      	orrs	r7, r3
 80094fe:	4b6a      	ldr	r3, [pc, #424]	; (80096a8 <_strtod_l+0x2ac>)
 8009500:	423b      	tst	r3, r7
 8009502:	d1b6      	bne.n	8009472 <_strtod_l+0x76>
 8009504:	f001 f85c 	bl	800a5c0 <__errno>
 8009508:	2322      	movs	r3, #34	; 0x22
 800950a:	6003      	str	r3, [r0, #0]
 800950c:	e7b1      	b.n	8009472 <_strtod_l+0x76>
 800950e:	4967      	ldr	r1, [pc, #412]	; (80096ac <_strtod_l+0x2b0>)
 8009510:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8009512:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 8009514:	400a      	ands	r2, r1
 8009516:	4966      	ldr	r1, [pc, #408]	; (80096b0 <_strtod_l+0x2b4>)
 8009518:	185b      	adds	r3, r3, r1
 800951a:	051b      	lsls	r3, r3, #20
 800951c:	431a      	orrs	r2, r3
 800951e:	0017      	movs	r7, r2
 8009520:	e7e8      	b.n	80094f4 <_strtod_l+0xf8>
 8009522:	4f61      	ldr	r7, [pc, #388]	; (80096a8 <_strtod_l+0x2ac>)
 8009524:	e7e6      	b.n	80094f4 <_strtod_l+0xf8>
 8009526:	2601      	movs	r6, #1
 8009528:	4f62      	ldr	r7, [pc, #392]	; (80096b4 <_strtod_l+0x2b8>)
 800952a:	4276      	negs	r6, r6
 800952c:	e7e2      	b.n	80094f4 <_strtod_l+0xf8>
 800952e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009530:	1c5a      	adds	r2, r3, #1
 8009532:	921b      	str	r2, [sp, #108]	; 0x6c
 8009534:	785b      	ldrb	r3, [r3, #1]
 8009536:	2b30      	cmp	r3, #48	; 0x30
 8009538:	d0f9      	beq.n	800952e <_strtod_l+0x132>
 800953a:	2b00      	cmp	r3, #0
 800953c:	d099      	beq.n	8009472 <_strtod_l+0x76>
 800953e:	2301      	movs	r3, #1
 8009540:	9309      	str	r3, [sp, #36]	; 0x24
 8009542:	2500      	movs	r5, #0
 8009544:	220a      	movs	r2, #10
 8009546:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009548:	950d      	str	r5, [sp, #52]	; 0x34
 800954a:	9310      	str	r3, [sp, #64]	; 0x40
 800954c:	9508      	str	r5, [sp, #32]
 800954e:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8009550:	7804      	ldrb	r4, [r0, #0]
 8009552:	0023      	movs	r3, r4
 8009554:	3b30      	subs	r3, #48	; 0x30
 8009556:	b2d9      	uxtb	r1, r3
 8009558:	2909      	cmp	r1, #9
 800955a:	d927      	bls.n	80095ac <_strtod_l+0x1b0>
 800955c:	2201      	movs	r2, #1
 800955e:	4956      	ldr	r1, [pc, #344]	; (80096b8 <_strtod_l+0x2bc>)
 8009560:	f000 ff8a 	bl	800a478 <strncmp>
 8009564:	2800      	cmp	r0, #0
 8009566:	d031      	beq.n	80095cc <_strtod_l+0x1d0>
 8009568:	2000      	movs	r0, #0
 800956a:	0023      	movs	r3, r4
 800956c:	4684      	mov	ip, r0
 800956e:	9a08      	ldr	r2, [sp, #32]
 8009570:	900c      	str	r0, [sp, #48]	; 0x30
 8009572:	9205      	str	r2, [sp, #20]
 8009574:	2220      	movs	r2, #32
 8009576:	0019      	movs	r1, r3
 8009578:	4391      	bics	r1, r2
 800957a:	000a      	movs	r2, r1
 800957c:	2100      	movs	r1, #0
 800957e:	9106      	str	r1, [sp, #24]
 8009580:	2a45      	cmp	r2, #69	; 0x45
 8009582:	d000      	beq.n	8009586 <_strtod_l+0x18a>
 8009584:	e0c2      	b.n	800970c <_strtod_l+0x310>
 8009586:	9b05      	ldr	r3, [sp, #20]
 8009588:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800958a:	4303      	orrs	r3, r0
 800958c:	4313      	orrs	r3, r2
 800958e:	428b      	cmp	r3, r1
 8009590:	d08d      	beq.n	80094ae <_strtod_l+0xb2>
 8009592:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009594:	9307      	str	r3, [sp, #28]
 8009596:	3301      	adds	r3, #1
 8009598:	931b      	str	r3, [sp, #108]	; 0x6c
 800959a:	9b07      	ldr	r3, [sp, #28]
 800959c:	785b      	ldrb	r3, [r3, #1]
 800959e:	2b2b      	cmp	r3, #43	; 0x2b
 80095a0:	d071      	beq.n	8009686 <_strtod_l+0x28a>
 80095a2:	000c      	movs	r4, r1
 80095a4:	2b2d      	cmp	r3, #45	; 0x2d
 80095a6:	d174      	bne.n	8009692 <_strtod_l+0x296>
 80095a8:	2401      	movs	r4, #1
 80095aa:	e06d      	b.n	8009688 <_strtod_l+0x28c>
 80095ac:	9908      	ldr	r1, [sp, #32]
 80095ae:	2908      	cmp	r1, #8
 80095b0:	dc09      	bgt.n	80095c6 <_strtod_l+0x1ca>
 80095b2:	990d      	ldr	r1, [sp, #52]	; 0x34
 80095b4:	4351      	muls	r1, r2
 80095b6:	185b      	adds	r3, r3, r1
 80095b8:	930d      	str	r3, [sp, #52]	; 0x34
 80095ba:	9b08      	ldr	r3, [sp, #32]
 80095bc:	3001      	adds	r0, #1
 80095be:	3301      	adds	r3, #1
 80095c0:	9308      	str	r3, [sp, #32]
 80095c2:	901b      	str	r0, [sp, #108]	; 0x6c
 80095c4:	e7c3      	b.n	800954e <_strtod_l+0x152>
 80095c6:	4355      	muls	r5, r2
 80095c8:	195d      	adds	r5, r3, r5
 80095ca:	e7f6      	b.n	80095ba <_strtod_l+0x1be>
 80095cc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80095ce:	1c5a      	adds	r2, r3, #1
 80095d0:	921b      	str	r2, [sp, #108]	; 0x6c
 80095d2:	9a08      	ldr	r2, [sp, #32]
 80095d4:	785b      	ldrb	r3, [r3, #1]
 80095d6:	2a00      	cmp	r2, #0
 80095d8:	d03a      	beq.n	8009650 <_strtod_l+0x254>
 80095da:	900c      	str	r0, [sp, #48]	; 0x30
 80095dc:	9205      	str	r2, [sp, #20]
 80095de:	001a      	movs	r2, r3
 80095e0:	3a30      	subs	r2, #48	; 0x30
 80095e2:	2a09      	cmp	r2, #9
 80095e4:	d912      	bls.n	800960c <_strtod_l+0x210>
 80095e6:	2201      	movs	r2, #1
 80095e8:	4694      	mov	ip, r2
 80095ea:	e7c3      	b.n	8009574 <_strtod_l+0x178>
 80095ec:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80095ee:	3001      	adds	r0, #1
 80095f0:	1c5a      	adds	r2, r3, #1
 80095f2:	921b      	str	r2, [sp, #108]	; 0x6c
 80095f4:	785b      	ldrb	r3, [r3, #1]
 80095f6:	2b30      	cmp	r3, #48	; 0x30
 80095f8:	d0f8      	beq.n	80095ec <_strtod_l+0x1f0>
 80095fa:	001a      	movs	r2, r3
 80095fc:	3a31      	subs	r2, #49	; 0x31
 80095fe:	2a08      	cmp	r2, #8
 8009600:	d83c      	bhi.n	800967c <_strtod_l+0x280>
 8009602:	900c      	str	r0, [sp, #48]	; 0x30
 8009604:	2000      	movs	r0, #0
 8009606:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8009608:	9005      	str	r0, [sp, #20]
 800960a:	9210      	str	r2, [sp, #64]	; 0x40
 800960c:	001a      	movs	r2, r3
 800960e:	1c41      	adds	r1, r0, #1
 8009610:	3a30      	subs	r2, #48	; 0x30
 8009612:	2b30      	cmp	r3, #48	; 0x30
 8009614:	d016      	beq.n	8009644 <_strtod_l+0x248>
 8009616:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009618:	185b      	adds	r3, r3, r1
 800961a:	930c      	str	r3, [sp, #48]	; 0x30
 800961c:	9b05      	ldr	r3, [sp, #20]
 800961e:	210a      	movs	r1, #10
 8009620:	469c      	mov	ip, r3
 8009622:	4484      	add	ip, r0
 8009624:	4563      	cmp	r3, ip
 8009626:	d115      	bne.n	8009654 <_strtod_l+0x258>
 8009628:	9905      	ldr	r1, [sp, #20]
 800962a:	9b05      	ldr	r3, [sp, #20]
 800962c:	3101      	adds	r1, #1
 800962e:	1809      	adds	r1, r1, r0
 8009630:	181b      	adds	r3, r3, r0
 8009632:	9105      	str	r1, [sp, #20]
 8009634:	2b08      	cmp	r3, #8
 8009636:	dc19      	bgt.n	800966c <_strtod_l+0x270>
 8009638:	230a      	movs	r3, #10
 800963a:	990d      	ldr	r1, [sp, #52]	; 0x34
 800963c:	434b      	muls	r3, r1
 800963e:	2100      	movs	r1, #0
 8009640:	18d3      	adds	r3, r2, r3
 8009642:	930d      	str	r3, [sp, #52]	; 0x34
 8009644:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009646:	0008      	movs	r0, r1
 8009648:	1c5a      	adds	r2, r3, #1
 800964a:	921b      	str	r2, [sp, #108]	; 0x6c
 800964c:	785b      	ldrb	r3, [r3, #1]
 800964e:	e7c6      	b.n	80095de <_strtod_l+0x1e2>
 8009650:	9808      	ldr	r0, [sp, #32]
 8009652:	e7d0      	b.n	80095f6 <_strtod_l+0x1fa>
 8009654:	1c5c      	adds	r4, r3, #1
 8009656:	2b08      	cmp	r3, #8
 8009658:	dc04      	bgt.n	8009664 <_strtod_l+0x268>
 800965a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800965c:	434b      	muls	r3, r1
 800965e:	930d      	str	r3, [sp, #52]	; 0x34
 8009660:	0023      	movs	r3, r4
 8009662:	e7df      	b.n	8009624 <_strtod_l+0x228>
 8009664:	2c10      	cmp	r4, #16
 8009666:	dcfb      	bgt.n	8009660 <_strtod_l+0x264>
 8009668:	434d      	muls	r5, r1
 800966a:	e7f9      	b.n	8009660 <_strtod_l+0x264>
 800966c:	9b05      	ldr	r3, [sp, #20]
 800966e:	2100      	movs	r1, #0
 8009670:	2b10      	cmp	r3, #16
 8009672:	dce7      	bgt.n	8009644 <_strtod_l+0x248>
 8009674:	230a      	movs	r3, #10
 8009676:	435d      	muls	r5, r3
 8009678:	1955      	adds	r5, r2, r5
 800967a:	e7e3      	b.n	8009644 <_strtod_l+0x248>
 800967c:	2200      	movs	r2, #0
 800967e:	920c      	str	r2, [sp, #48]	; 0x30
 8009680:	9205      	str	r2, [sp, #20]
 8009682:	3201      	adds	r2, #1
 8009684:	e7b0      	b.n	80095e8 <_strtod_l+0x1ec>
 8009686:	2400      	movs	r4, #0
 8009688:	9b07      	ldr	r3, [sp, #28]
 800968a:	3302      	adds	r3, #2
 800968c:	931b      	str	r3, [sp, #108]	; 0x6c
 800968e:	9b07      	ldr	r3, [sp, #28]
 8009690:	789b      	ldrb	r3, [r3, #2]
 8009692:	001a      	movs	r2, r3
 8009694:	3a30      	subs	r2, #48	; 0x30
 8009696:	2a09      	cmp	r2, #9
 8009698:	d914      	bls.n	80096c4 <_strtod_l+0x2c8>
 800969a:	9a07      	ldr	r2, [sp, #28]
 800969c:	921b      	str	r2, [sp, #108]	; 0x6c
 800969e:	2200      	movs	r2, #0
 80096a0:	e033      	b.n	800970a <_strtod_l+0x30e>
 80096a2:	46c0      	nop			; (mov r8, r8)
 80096a4:	08012a00 	.word	0x08012a00
 80096a8:	7ff00000 	.word	0x7ff00000
 80096ac:	ffefffff 	.word	0xffefffff
 80096b0:	00000433 	.word	0x00000433
 80096b4:	7fffffff 	.word	0x7fffffff
 80096b8:	080129fc 	.word	0x080129fc
 80096bc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80096be:	1c5a      	adds	r2, r3, #1
 80096c0:	921b      	str	r2, [sp, #108]	; 0x6c
 80096c2:	785b      	ldrb	r3, [r3, #1]
 80096c4:	2b30      	cmp	r3, #48	; 0x30
 80096c6:	d0f9      	beq.n	80096bc <_strtod_l+0x2c0>
 80096c8:	2200      	movs	r2, #0
 80096ca:	9206      	str	r2, [sp, #24]
 80096cc:	001a      	movs	r2, r3
 80096ce:	3a31      	subs	r2, #49	; 0x31
 80096d0:	2a08      	cmp	r2, #8
 80096d2:	d81b      	bhi.n	800970c <_strtod_l+0x310>
 80096d4:	3b30      	subs	r3, #48	; 0x30
 80096d6:	930e      	str	r3, [sp, #56]	; 0x38
 80096d8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80096da:	9306      	str	r3, [sp, #24]
 80096dc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80096de:	1c59      	adds	r1, r3, #1
 80096e0:	911b      	str	r1, [sp, #108]	; 0x6c
 80096e2:	785b      	ldrb	r3, [r3, #1]
 80096e4:	001a      	movs	r2, r3
 80096e6:	3a30      	subs	r2, #48	; 0x30
 80096e8:	2a09      	cmp	r2, #9
 80096ea:	d93a      	bls.n	8009762 <_strtod_l+0x366>
 80096ec:	9a06      	ldr	r2, [sp, #24]
 80096ee:	1a8a      	subs	r2, r1, r2
 80096f0:	49b2      	ldr	r1, [pc, #712]	; (80099bc <_strtod_l+0x5c0>)
 80096f2:	9106      	str	r1, [sp, #24]
 80096f4:	2a08      	cmp	r2, #8
 80096f6:	dc04      	bgt.n	8009702 <_strtod_l+0x306>
 80096f8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80096fa:	9206      	str	r2, [sp, #24]
 80096fc:	428a      	cmp	r2, r1
 80096fe:	dd00      	ble.n	8009702 <_strtod_l+0x306>
 8009700:	9106      	str	r1, [sp, #24]
 8009702:	2c00      	cmp	r4, #0
 8009704:	d002      	beq.n	800970c <_strtod_l+0x310>
 8009706:	9a06      	ldr	r2, [sp, #24]
 8009708:	4252      	negs	r2, r2
 800970a:	9206      	str	r2, [sp, #24]
 800970c:	9a05      	ldr	r2, [sp, #20]
 800970e:	2a00      	cmp	r2, #0
 8009710:	d14d      	bne.n	80097ae <_strtod_l+0x3b2>
 8009712:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009714:	4310      	orrs	r0, r2
 8009716:	d000      	beq.n	800971a <_strtod_l+0x31e>
 8009718:	e6ab      	b.n	8009472 <_strtod_l+0x76>
 800971a:	4662      	mov	r2, ip
 800971c:	2a00      	cmp	r2, #0
 800971e:	d000      	beq.n	8009722 <_strtod_l+0x326>
 8009720:	e6c5      	b.n	80094ae <_strtod_l+0xb2>
 8009722:	2b69      	cmp	r3, #105	; 0x69
 8009724:	d027      	beq.n	8009776 <_strtod_l+0x37a>
 8009726:	dc23      	bgt.n	8009770 <_strtod_l+0x374>
 8009728:	2b49      	cmp	r3, #73	; 0x49
 800972a:	d024      	beq.n	8009776 <_strtod_l+0x37a>
 800972c:	2b4e      	cmp	r3, #78	; 0x4e
 800972e:	d000      	beq.n	8009732 <_strtod_l+0x336>
 8009730:	e6bd      	b.n	80094ae <_strtod_l+0xb2>
 8009732:	49a3      	ldr	r1, [pc, #652]	; (80099c0 <_strtod_l+0x5c4>)
 8009734:	a81b      	add	r0, sp, #108	; 0x6c
 8009736:	f001 fb49 	bl	800adcc <__match>
 800973a:	2800      	cmp	r0, #0
 800973c:	d100      	bne.n	8009740 <_strtod_l+0x344>
 800973e:	e6b6      	b.n	80094ae <_strtod_l+0xb2>
 8009740:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009742:	781b      	ldrb	r3, [r3, #0]
 8009744:	2b28      	cmp	r3, #40	; 0x28
 8009746:	d12c      	bne.n	80097a2 <_strtod_l+0x3a6>
 8009748:	499e      	ldr	r1, [pc, #632]	; (80099c4 <_strtod_l+0x5c8>)
 800974a:	aa1e      	add	r2, sp, #120	; 0x78
 800974c:	a81b      	add	r0, sp, #108	; 0x6c
 800974e:	f001 fb51 	bl	800adf4 <__hexnan>
 8009752:	2805      	cmp	r0, #5
 8009754:	d125      	bne.n	80097a2 <_strtod_l+0x3a6>
 8009756:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8009758:	4a9b      	ldr	r2, [pc, #620]	; (80099c8 <_strtod_l+0x5cc>)
 800975a:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 800975c:	431a      	orrs	r2, r3
 800975e:	0017      	movs	r7, r2
 8009760:	e687      	b.n	8009472 <_strtod_l+0x76>
 8009762:	220a      	movs	r2, #10
 8009764:	990e      	ldr	r1, [sp, #56]	; 0x38
 8009766:	434a      	muls	r2, r1
 8009768:	18d2      	adds	r2, r2, r3
 800976a:	3a30      	subs	r2, #48	; 0x30
 800976c:	920e      	str	r2, [sp, #56]	; 0x38
 800976e:	e7b5      	b.n	80096dc <_strtod_l+0x2e0>
 8009770:	2b6e      	cmp	r3, #110	; 0x6e
 8009772:	d0de      	beq.n	8009732 <_strtod_l+0x336>
 8009774:	e69b      	b.n	80094ae <_strtod_l+0xb2>
 8009776:	4995      	ldr	r1, [pc, #596]	; (80099cc <_strtod_l+0x5d0>)
 8009778:	a81b      	add	r0, sp, #108	; 0x6c
 800977a:	f001 fb27 	bl	800adcc <__match>
 800977e:	2800      	cmp	r0, #0
 8009780:	d100      	bne.n	8009784 <_strtod_l+0x388>
 8009782:	e694      	b.n	80094ae <_strtod_l+0xb2>
 8009784:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009786:	4992      	ldr	r1, [pc, #584]	; (80099d0 <_strtod_l+0x5d4>)
 8009788:	3b01      	subs	r3, #1
 800978a:	a81b      	add	r0, sp, #108	; 0x6c
 800978c:	931b      	str	r3, [sp, #108]	; 0x6c
 800978e:	f001 fb1d 	bl	800adcc <__match>
 8009792:	2800      	cmp	r0, #0
 8009794:	d102      	bne.n	800979c <_strtod_l+0x3a0>
 8009796:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009798:	3301      	adds	r3, #1
 800979a:	931b      	str	r3, [sp, #108]	; 0x6c
 800979c:	2600      	movs	r6, #0
 800979e:	4f8a      	ldr	r7, [pc, #552]	; (80099c8 <_strtod_l+0x5cc>)
 80097a0:	e667      	b.n	8009472 <_strtod_l+0x76>
 80097a2:	488c      	ldr	r0, [pc, #560]	; (80099d4 <_strtod_l+0x5d8>)
 80097a4:	f000 ff4e 	bl	800a644 <nan>
 80097a8:	0006      	movs	r6, r0
 80097aa:	000f      	movs	r7, r1
 80097ac:	e661      	b.n	8009472 <_strtod_l+0x76>
 80097ae:	9b06      	ldr	r3, [sp, #24]
 80097b0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80097b2:	1a9b      	subs	r3, r3, r2
 80097b4:	9309      	str	r3, [sp, #36]	; 0x24
 80097b6:	9b08      	ldr	r3, [sp, #32]
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	d101      	bne.n	80097c0 <_strtod_l+0x3c4>
 80097bc:	9b05      	ldr	r3, [sp, #20]
 80097be:	9308      	str	r3, [sp, #32]
 80097c0:	9c05      	ldr	r4, [sp, #20]
 80097c2:	2c10      	cmp	r4, #16
 80097c4:	dd00      	ble.n	80097c8 <_strtod_l+0x3cc>
 80097c6:	2410      	movs	r4, #16
 80097c8:	980d      	ldr	r0, [sp, #52]	; 0x34
 80097ca:	f7f8 fe17 	bl	80023fc <__aeabi_ui2d>
 80097ce:	9b05      	ldr	r3, [sp, #20]
 80097d0:	0006      	movs	r6, r0
 80097d2:	000f      	movs	r7, r1
 80097d4:	2b09      	cmp	r3, #9
 80097d6:	dd15      	ble.n	8009804 <_strtod_l+0x408>
 80097d8:	0022      	movs	r2, r4
 80097da:	4b7f      	ldr	r3, [pc, #508]	; (80099d8 <_strtod_l+0x5dc>)
 80097dc:	3a09      	subs	r2, #9
 80097de:	00d2      	lsls	r2, r2, #3
 80097e0:	189b      	adds	r3, r3, r2
 80097e2:	681a      	ldr	r2, [r3, #0]
 80097e4:	685b      	ldr	r3, [r3, #4]
 80097e6:	f7f7 ff41 	bl	800166c <__aeabi_dmul>
 80097ea:	0006      	movs	r6, r0
 80097ec:	0028      	movs	r0, r5
 80097ee:	000f      	movs	r7, r1
 80097f0:	f7f8 fe04 	bl	80023fc <__aeabi_ui2d>
 80097f4:	0002      	movs	r2, r0
 80097f6:	000b      	movs	r3, r1
 80097f8:	0030      	movs	r0, r6
 80097fa:	0039      	movs	r1, r7
 80097fc:	f7f6 ffdc 	bl	80007b8 <__aeabi_dadd>
 8009800:	0006      	movs	r6, r0
 8009802:	000f      	movs	r7, r1
 8009804:	9b05      	ldr	r3, [sp, #20]
 8009806:	2b0f      	cmp	r3, #15
 8009808:	dc39      	bgt.n	800987e <_strtod_l+0x482>
 800980a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800980c:	2b00      	cmp	r3, #0
 800980e:	d100      	bne.n	8009812 <_strtod_l+0x416>
 8009810:	e62f      	b.n	8009472 <_strtod_l+0x76>
 8009812:	dd24      	ble.n	800985e <_strtod_l+0x462>
 8009814:	2b16      	cmp	r3, #22
 8009816:	dc09      	bgt.n	800982c <_strtod_l+0x430>
 8009818:	496f      	ldr	r1, [pc, #444]	; (80099d8 <_strtod_l+0x5dc>)
 800981a:	00db      	lsls	r3, r3, #3
 800981c:	18c9      	adds	r1, r1, r3
 800981e:	0032      	movs	r2, r6
 8009820:	6808      	ldr	r0, [r1, #0]
 8009822:	6849      	ldr	r1, [r1, #4]
 8009824:	003b      	movs	r3, r7
 8009826:	f7f7 ff21 	bl	800166c <__aeabi_dmul>
 800982a:	e7bd      	b.n	80097a8 <_strtod_l+0x3ac>
 800982c:	2325      	movs	r3, #37	; 0x25
 800982e:	9a05      	ldr	r2, [sp, #20]
 8009830:	1a9b      	subs	r3, r3, r2
 8009832:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009834:	4293      	cmp	r3, r2
 8009836:	db22      	blt.n	800987e <_strtod_l+0x482>
 8009838:	240f      	movs	r4, #15
 800983a:	9b05      	ldr	r3, [sp, #20]
 800983c:	4d66      	ldr	r5, [pc, #408]	; (80099d8 <_strtod_l+0x5dc>)
 800983e:	1ae4      	subs	r4, r4, r3
 8009840:	00e1      	lsls	r1, r4, #3
 8009842:	1869      	adds	r1, r5, r1
 8009844:	0032      	movs	r2, r6
 8009846:	6808      	ldr	r0, [r1, #0]
 8009848:	6849      	ldr	r1, [r1, #4]
 800984a:	003b      	movs	r3, r7
 800984c:	f7f7 ff0e 	bl	800166c <__aeabi_dmul>
 8009850:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009852:	1b1c      	subs	r4, r3, r4
 8009854:	00e4      	lsls	r4, r4, #3
 8009856:	192d      	adds	r5, r5, r4
 8009858:	682a      	ldr	r2, [r5, #0]
 800985a:	686b      	ldr	r3, [r5, #4]
 800985c:	e7e3      	b.n	8009826 <_strtod_l+0x42a>
 800985e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009860:	3316      	adds	r3, #22
 8009862:	db0c      	blt.n	800987e <_strtod_l+0x482>
 8009864:	9906      	ldr	r1, [sp, #24]
 8009866:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009868:	4b5b      	ldr	r3, [pc, #364]	; (80099d8 <_strtod_l+0x5dc>)
 800986a:	1a52      	subs	r2, r2, r1
 800986c:	00d2      	lsls	r2, r2, #3
 800986e:	189b      	adds	r3, r3, r2
 8009870:	0030      	movs	r0, r6
 8009872:	681a      	ldr	r2, [r3, #0]
 8009874:	685b      	ldr	r3, [r3, #4]
 8009876:	0039      	movs	r1, r7
 8009878:	f7f7 fafe 	bl	8000e78 <__aeabi_ddiv>
 800987c:	e794      	b.n	80097a8 <_strtod_l+0x3ac>
 800987e:	9b05      	ldr	r3, [sp, #20]
 8009880:	1b1c      	subs	r4, r3, r4
 8009882:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009884:	18e4      	adds	r4, r4, r3
 8009886:	2c00      	cmp	r4, #0
 8009888:	dd72      	ble.n	8009970 <_strtod_l+0x574>
 800988a:	220f      	movs	r2, #15
 800988c:	0023      	movs	r3, r4
 800988e:	4013      	ands	r3, r2
 8009890:	4214      	tst	r4, r2
 8009892:	d00a      	beq.n	80098aa <_strtod_l+0x4ae>
 8009894:	4950      	ldr	r1, [pc, #320]	; (80099d8 <_strtod_l+0x5dc>)
 8009896:	00db      	lsls	r3, r3, #3
 8009898:	18c9      	adds	r1, r1, r3
 800989a:	0032      	movs	r2, r6
 800989c:	6808      	ldr	r0, [r1, #0]
 800989e:	6849      	ldr	r1, [r1, #4]
 80098a0:	003b      	movs	r3, r7
 80098a2:	f7f7 fee3 	bl	800166c <__aeabi_dmul>
 80098a6:	0006      	movs	r6, r0
 80098a8:	000f      	movs	r7, r1
 80098aa:	230f      	movs	r3, #15
 80098ac:	439c      	bics	r4, r3
 80098ae:	d04a      	beq.n	8009946 <_strtod_l+0x54a>
 80098b0:	3326      	adds	r3, #38	; 0x26
 80098b2:	33ff      	adds	r3, #255	; 0xff
 80098b4:	429c      	cmp	r4, r3
 80098b6:	dd22      	ble.n	80098fe <_strtod_l+0x502>
 80098b8:	2300      	movs	r3, #0
 80098ba:	9305      	str	r3, [sp, #20]
 80098bc:	9306      	str	r3, [sp, #24]
 80098be:	930d      	str	r3, [sp, #52]	; 0x34
 80098c0:	9308      	str	r3, [sp, #32]
 80098c2:	2322      	movs	r3, #34	; 0x22
 80098c4:	2600      	movs	r6, #0
 80098c6:	9a04      	ldr	r2, [sp, #16]
 80098c8:	4f3f      	ldr	r7, [pc, #252]	; (80099c8 <_strtod_l+0x5cc>)
 80098ca:	6013      	str	r3, [r2, #0]
 80098cc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80098ce:	42b3      	cmp	r3, r6
 80098d0:	d100      	bne.n	80098d4 <_strtod_l+0x4d8>
 80098d2:	e5ce      	b.n	8009472 <_strtod_l+0x76>
 80098d4:	991c      	ldr	r1, [sp, #112]	; 0x70
 80098d6:	9804      	ldr	r0, [sp, #16]
 80098d8:	f001 fb6e 	bl	800afb8 <_Bfree>
 80098dc:	9908      	ldr	r1, [sp, #32]
 80098de:	9804      	ldr	r0, [sp, #16]
 80098e0:	f001 fb6a 	bl	800afb8 <_Bfree>
 80098e4:	9906      	ldr	r1, [sp, #24]
 80098e6:	9804      	ldr	r0, [sp, #16]
 80098e8:	f001 fb66 	bl	800afb8 <_Bfree>
 80098ec:	990d      	ldr	r1, [sp, #52]	; 0x34
 80098ee:	9804      	ldr	r0, [sp, #16]
 80098f0:	f001 fb62 	bl	800afb8 <_Bfree>
 80098f4:	9905      	ldr	r1, [sp, #20]
 80098f6:	9804      	ldr	r0, [sp, #16]
 80098f8:	f001 fb5e 	bl	800afb8 <_Bfree>
 80098fc:	e5b9      	b.n	8009472 <_strtod_l+0x76>
 80098fe:	2300      	movs	r3, #0
 8009900:	0030      	movs	r0, r6
 8009902:	0039      	movs	r1, r7
 8009904:	4d35      	ldr	r5, [pc, #212]	; (80099dc <_strtod_l+0x5e0>)
 8009906:	1124      	asrs	r4, r4, #4
 8009908:	9307      	str	r3, [sp, #28]
 800990a:	2c01      	cmp	r4, #1
 800990c:	dc1e      	bgt.n	800994c <_strtod_l+0x550>
 800990e:	2b00      	cmp	r3, #0
 8009910:	d001      	beq.n	8009916 <_strtod_l+0x51a>
 8009912:	0006      	movs	r6, r0
 8009914:	000f      	movs	r7, r1
 8009916:	4b32      	ldr	r3, [pc, #200]	; (80099e0 <_strtod_l+0x5e4>)
 8009918:	9a07      	ldr	r2, [sp, #28]
 800991a:	18ff      	adds	r7, r7, r3
 800991c:	4b2f      	ldr	r3, [pc, #188]	; (80099dc <_strtod_l+0x5e0>)
 800991e:	00d2      	lsls	r2, r2, #3
 8009920:	189d      	adds	r5, r3, r2
 8009922:	6828      	ldr	r0, [r5, #0]
 8009924:	6869      	ldr	r1, [r5, #4]
 8009926:	0032      	movs	r2, r6
 8009928:	003b      	movs	r3, r7
 800992a:	f7f7 fe9f 	bl	800166c <__aeabi_dmul>
 800992e:	4b26      	ldr	r3, [pc, #152]	; (80099c8 <_strtod_l+0x5cc>)
 8009930:	4a2c      	ldr	r2, [pc, #176]	; (80099e4 <_strtod_l+0x5e8>)
 8009932:	0006      	movs	r6, r0
 8009934:	400b      	ands	r3, r1
 8009936:	4293      	cmp	r3, r2
 8009938:	d8be      	bhi.n	80098b8 <_strtod_l+0x4bc>
 800993a:	4a2b      	ldr	r2, [pc, #172]	; (80099e8 <_strtod_l+0x5ec>)
 800993c:	4293      	cmp	r3, r2
 800993e:	d913      	bls.n	8009968 <_strtod_l+0x56c>
 8009940:	2601      	movs	r6, #1
 8009942:	4f2a      	ldr	r7, [pc, #168]	; (80099ec <_strtod_l+0x5f0>)
 8009944:	4276      	negs	r6, r6
 8009946:	2300      	movs	r3, #0
 8009948:	9307      	str	r3, [sp, #28]
 800994a:	e088      	b.n	8009a5e <_strtod_l+0x662>
 800994c:	2201      	movs	r2, #1
 800994e:	4214      	tst	r4, r2
 8009950:	d004      	beq.n	800995c <_strtod_l+0x560>
 8009952:	682a      	ldr	r2, [r5, #0]
 8009954:	686b      	ldr	r3, [r5, #4]
 8009956:	f7f7 fe89 	bl	800166c <__aeabi_dmul>
 800995a:	2301      	movs	r3, #1
 800995c:	9a07      	ldr	r2, [sp, #28]
 800995e:	1064      	asrs	r4, r4, #1
 8009960:	3201      	adds	r2, #1
 8009962:	9207      	str	r2, [sp, #28]
 8009964:	3508      	adds	r5, #8
 8009966:	e7d0      	b.n	800990a <_strtod_l+0x50e>
 8009968:	23d4      	movs	r3, #212	; 0xd4
 800996a:	049b      	lsls	r3, r3, #18
 800996c:	18cf      	adds	r7, r1, r3
 800996e:	e7ea      	b.n	8009946 <_strtod_l+0x54a>
 8009970:	2c00      	cmp	r4, #0
 8009972:	d0e8      	beq.n	8009946 <_strtod_l+0x54a>
 8009974:	4264      	negs	r4, r4
 8009976:	230f      	movs	r3, #15
 8009978:	0022      	movs	r2, r4
 800997a:	401a      	ands	r2, r3
 800997c:	421c      	tst	r4, r3
 800997e:	d00a      	beq.n	8009996 <_strtod_l+0x59a>
 8009980:	4b15      	ldr	r3, [pc, #84]	; (80099d8 <_strtod_l+0x5dc>)
 8009982:	00d2      	lsls	r2, r2, #3
 8009984:	189b      	adds	r3, r3, r2
 8009986:	0030      	movs	r0, r6
 8009988:	681a      	ldr	r2, [r3, #0]
 800998a:	685b      	ldr	r3, [r3, #4]
 800998c:	0039      	movs	r1, r7
 800998e:	f7f7 fa73 	bl	8000e78 <__aeabi_ddiv>
 8009992:	0006      	movs	r6, r0
 8009994:	000f      	movs	r7, r1
 8009996:	1124      	asrs	r4, r4, #4
 8009998:	d0d5      	beq.n	8009946 <_strtod_l+0x54a>
 800999a:	2c1f      	cmp	r4, #31
 800999c:	dd28      	ble.n	80099f0 <_strtod_l+0x5f4>
 800999e:	2300      	movs	r3, #0
 80099a0:	9305      	str	r3, [sp, #20]
 80099a2:	9306      	str	r3, [sp, #24]
 80099a4:	930d      	str	r3, [sp, #52]	; 0x34
 80099a6:	9308      	str	r3, [sp, #32]
 80099a8:	2322      	movs	r3, #34	; 0x22
 80099aa:	9a04      	ldr	r2, [sp, #16]
 80099ac:	2600      	movs	r6, #0
 80099ae:	6013      	str	r3, [r2, #0]
 80099b0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80099b2:	2700      	movs	r7, #0
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	d18d      	bne.n	80098d4 <_strtod_l+0x4d8>
 80099b8:	e55b      	b.n	8009472 <_strtod_l+0x76>
 80099ba:	46c0      	nop			; (mov r8, r8)
 80099bc:	00004e1f 	.word	0x00004e1f
 80099c0:	08012d31 	.word	0x08012d31
 80099c4:	08012a14 	.word	0x08012a14
 80099c8:	7ff00000 	.word	0x7ff00000
 80099cc:	08012d29 	.word	0x08012d29
 80099d0:	08012ddf 	.word	0x08012ddf
 80099d4:	08012ddb 	.word	0x08012ddb
 80099d8:	08012c50 	.word	0x08012c50
 80099dc:	08012c28 	.word	0x08012c28
 80099e0:	fcb00000 	.word	0xfcb00000
 80099e4:	7ca00000 	.word	0x7ca00000
 80099e8:	7c900000 	.word	0x7c900000
 80099ec:	7fefffff 	.word	0x7fefffff
 80099f0:	2310      	movs	r3, #16
 80099f2:	0022      	movs	r2, r4
 80099f4:	401a      	ands	r2, r3
 80099f6:	9207      	str	r2, [sp, #28]
 80099f8:	421c      	tst	r4, r3
 80099fa:	d001      	beq.n	8009a00 <_strtod_l+0x604>
 80099fc:	335a      	adds	r3, #90	; 0x5a
 80099fe:	9307      	str	r3, [sp, #28]
 8009a00:	0030      	movs	r0, r6
 8009a02:	0039      	movs	r1, r7
 8009a04:	2300      	movs	r3, #0
 8009a06:	4dc4      	ldr	r5, [pc, #784]	; (8009d18 <_strtod_l+0x91c>)
 8009a08:	2201      	movs	r2, #1
 8009a0a:	4214      	tst	r4, r2
 8009a0c:	d004      	beq.n	8009a18 <_strtod_l+0x61c>
 8009a0e:	682a      	ldr	r2, [r5, #0]
 8009a10:	686b      	ldr	r3, [r5, #4]
 8009a12:	f7f7 fe2b 	bl	800166c <__aeabi_dmul>
 8009a16:	2301      	movs	r3, #1
 8009a18:	1064      	asrs	r4, r4, #1
 8009a1a:	3508      	adds	r5, #8
 8009a1c:	2c00      	cmp	r4, #0
 8009a1e:	d1f3      	bne.n	8009a08 <_strtod_l+0x60c>
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	d001      	beq.n	8009a28 <_strtod_l+0x62c>
 8009a24:	0006      	movs	r6, r0
 8009a26:	000f      	movs	r7, r1
 8009a28:	9b07      	ldr	r3, [sp, #28]
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	d00f      	beq.n	8009a4e <_strtod_l+0x652>
 8009a2e:	236b      	movs	r3, #107	; 0x6b
 8009a30:	007a      	lsls	r2, r7, #1
 8009a32:	0d52      	lsrs	r2, r2, #21
 8009a34:	0039      	movs	r1, r7
 8009a36:	1a9b      	subs	r3, r3, r2
 8009a38:	2b00      	cmp	r3, #0
 8009a3a:	dd08      	ble.n	8009a4e <_strtod_l+0x652>
 8009a3c:	2b1f      	cmp	r3, #31
 8009a3e:	dc00      	bgt.n	8009a42 <_strtod_l+0x646>
 8009a40:	e121      	b.n	8009c86 <_strtod_l+0x88a>
 8009a42:	2600      	movs	r6, #0
 8009a44:	2b34      	cmp	r3, #52	; 0x34
 8009a46:	dc00      	bgt.n	8009a4a <_strtod_l+0x64e>
 8009a48:	e116      	b.n	8009c78 <_strtod_l+0x87c>
 8009a4a:	27dc      	movs	r7, #220	; 0xdc
 8009a4c:	04bf      	lsls	r7, r7, #18
 8009a4e:	2200      	movs	r2, #0
 8009a50:	2300      	movs	r3, #0
 8009a52:	0030      	movs	r0, r6
 8009a54:	0039      	movs	r1, r7
 8009a56:	f7f6 fcf7 	bl	8000448 <__aeabi_dcmpeq>
 8009a5a:	2800      	cmp	r0, #0
 8009a5c:	d19f      	bne.n	800999e <_strtod_l+0x5a2>
 8009a5e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009a60:	9a08      	ldr	r2, [sp, #32]
 8009a62:	9300      	str	r3, [sp, #0]
 8009a64:	9910      	ldr	r1, [sp, #64]	; 0x40
 8009a66:	9b05      	ldr	r3, [sp, #20]
 8009a68:	9804      	ldr	r0, [sp, #16]
 8009a6a:	f001 faf3 	bl	800b054 <__s2b>
 8009a6e:	900d      	str	r0, [sp, #52]	; 0x34
 8009a70:	2800      	cmp	r0, #0
 8009a72:	d100      	bne.n	8009a76 <_strtod_l+0x67a>
 8009a74:	e720      	b.n	80098b8 <_strtod_l+0x4bc>
 8009a76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009a78:	9906      	ldr	r1, [sp, #24]
 8009a7a:	17da      	asrs	r2, r3, #31
 8009a7c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009a7e:	1a5b      	subs	r3, r3, r1
 8009a80:	401a      	ands	r2, r3
 8009a82:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009a84:	9215      	str	r2, [sp, #84]	; 0x54
 8009a86:	43db      	mvns	r3, r3
 8009a88:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009a8a:	17db      	asrs	r3, r3, #31
 8009a8c:	401a      	ands	r2, r3
 8009a8e:	2300      	movs	r3, #0
 8009a90:	9218      	str	r2, [sp, #96]	; 0x60
 8009a92:	9305      	str	r3, [sp, #20]
 8009a94:	9306      	str	r3, [sp, #24]
 8009a96:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009a98:	9804      	ldr	r0, [sp, #16]
 8009a9a:	6859      	ldr	r1, [r3, #4]
 8009a9c:	f001 fa64 	bl	800af68 <_Balloc>
 8009aa0:	9008      	str	r0, [sp, #32]
 8009aa2:	2800      	cmp	r0, #0
 8009aa4:	d100      	bne.n	8009aa8 <_strtod_l+0x6ac>
 8009aa6:	e70c      	b.n	80098c2 <_strtod_l+0x4c6>
 8009aa8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009aaa:	300c      	adds	r0, #12
 8009aac:	0019      	movs	r1, r3
 8009aae:	691a      	ldr	r2, [r3, #16]
 8009ab0:	310c      	adds	r1, #12
 8009ab2:	3202      	adds	r2, #2
 8009ab4:	0092      	lsls	r2, r2, #2
 8009ab6:	f000 fdbc 	bl	800a632 <memcpy>
 8009aba:	ab1e      	add	r3, sp, #120	; 0x78
 8009abc:	9301      	str	r3, [sp, #4]
 8009abe:	ab1d      	add	r3, sp, #116	; 0x74
 8009ac0:	9300      	str	r3, [sp, #0]
 8009ac2:	0032      	movs	r2, r6
 8009ac4:	003b      	movs	r3, r7
 8009ac6:	9804      	ldr	r0, [sp, #16]
 8009ac8:	9610      	str	r6, [sp, #64]	; 0x40
 8009aca:	9711      	str	r7, [sp, #68]	; 0x44
 8009acc:	f001 fdea 	bl	800b6a4 <__d2b>
 8009ad0:	901c      	str	r0, [sp, #112]	; 0x70
 8009ad2:	2800      	cmp	r0, #0
 8009ad4:	d100      	bne.n	8009ad8 <_strtod_l+0x6dc>
 8009ad6:	e6f4      	b.n	80098c2 <_strtod_l+0x4c6>
 8009ad8:	2101      	movs	r1, #1
 8009ada:	9804      	ldr	r0, [sp, #16]
 8009adc:	f001 fb4e 	bl	800b17c <__i2b>
 8009ae0:	9006      	str	r0, [sp, #24]
 8009ae2:	2800      	cmp	r0, #0
 8009ae4:	d100      	bne.n	8009ae8 <_strtod_l+0x6ec>
 8009ae6:	e6ec      	b.n	80098c2 <_strtod_l+0x4c6>
 8009ae8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009aea:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8009aec:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8009aee:	1ad4      	subs	r4, r2, r3
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	db01      	blt.n	8009af8 <_strtod_l+0x6fc>
 8009af4:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8009af6:	195d      	adds	r5, r3, r5
 8009af8:	9907      	ldr	r1, [sp, #28]
 8009afa:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8009afc:	1a5b      	subs	r3, r3, r1
 8009afe:	2136      	movs	r1, #54	; 0x36
 8009b00:	189b      	adds	r3, r3, r2
 8009b02:	1a8a      	subs	r2, r1, r2
 8009b04:	4985      	ldr	r1, [pc, #532]	; (8009d1c <_strtod_l+0x920>)
 8009b06:	2001      	movs	r0, #1
 8009b08:	468c      	mov	ip, r1
 8009b0a:	2100      	movs	r1, #0
 8009b0c:	3b01      	subs	r3, #1
 8009b0e:	9114      	str	r1, [sp, #80]	; 0x50
 8009b10:	9012      	str	r0, [sp, #72]	; 0x48
 8009b12:	4563      	cmp	r3, ip
 8009b14:	da07      	bge.n	8009b26 <_strtod_l+0x72a>
 8009b16:	4661      	mov	r1, ip
 8009b18:	1ac9      	subs	r1, r1, r3
 8009b1a:	1a52      	subs	r2, r2, r1
 8009b1c:	291f      	cmp	r1, #31
 8009b1e:	dd00      	ble.n	8009b22 <_strtod_l+0x726>
 8009b20:	e0b6      	b.n	8009c90 <_strtod_l+0x894>
 8009b22:	4088      	lsls	r0, r1
 8009b24:	9012      	str	r0, [sp, #72]	; 0x48
 8009b26:	18ab      	adds	r3, r5, r2
 8009b28:	930c      	str	r3, [sp, #48]	; 0x30
 8009b2a:	18a4      	adds	r4, r4, r2
 8009b2c:	9b07      	ldr	r3, [sp, #28]
 8009b2e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009b30:	191c      	adds	r4, r3, r4
 8009b32:	002b      	movs	r3, r5
 8009b34:	4295      	cmp	r5, r2
 8009b36:	dd00      	ble.n	8009b3a <_strtod_l+0x73e>
 8009b38:	0013      	movs	r3, r2
 8009b3a:	42a3      	cmp	r3, r4
 8009b3c:	dd00      	ble.n	8009b40 <_strtod_l+0x744>
 8009b3e:	0023      	movs	r3, r4
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	dd04      	ble.n	8009b4e <_strtod_l+0x752>
 8009b44:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009b46:	1ae4      	subs	r4, r4, r3
 8009b48:	1ad2      	subs	r2, r2, r3
 8009b4a:	920c      	str	r2, [sp, #48]	; 0x30
 8009b4c:	1aed      	subs	r5, r5, r3
 8009b4e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	dd17      	ble.n	8009b84 <_strtod_l+0x788>
 8009b54:	001a      	movs	r2, r3
 8009b56:	9906      	ldr	r1, [sp, #24]
 8009b58:	9804      	ldr	r0, [sp, #16]
 8009b5a:	f001 fbd7 	bl	800b30c <__pow5mult>
 8009b5e:	9006      	str	r0, [sp, #24]
 8009b60:	2800      	cmp	r0, #0
 8009b62:	d100      	bne.n	8009b66 <_strtod_l+0x76a>
 8009b64:	e6ad      	b.n	80098c2 <_strtod_l+0x4c6>
 8009b66:	0001      	movs	r1, r0
 8009b68:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8009b6a:	9804      	ldr	r0, [sp, #16]
 8009b6c:	f001 fb1e 	bl	800b1ac <__multiply>
 8009b70:	900e      	str	r0, [sp, #56]	; 0x38
 8009b72:	2800      	cmp	r0, #0
 8009b74:	d100      	bne.n	8009b78 <_strtod_l+0x77c>
 8009b76:	e6a4      	b.n	80098c2 <_strtod_l+0x4c6>
 8009b78:	991c      	ldr	r1, [sp, #112]	; 0x70
 8009b7a:	9804      	ldr	r0, [sp, #16]
 8009b7c:	f001 fa1c 	bl	800afb8 <_Bfree>
 8009b80:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009b82:	931c      	str	r3, [sp, #112]	; 0x70
 8009b84:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	dd00      	ble.n	8009b8c <_strtod_l+0x790>
 8009b8a:	e087      	b.n	8009c9c <_strtod_l+0x8a0>
 8009b8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	dd08      	ble.n	8009ba4 <_strtod_l+0x7a8>
 8009b92:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8009b94:	9908      	ldr	r1, [sp, #32]
 8009b96:	9804      	ldr	r0, [sp, #16]
 8009b98:	f001 fbb8 	bl	800b30c <__pow5mult>
 8009b9c:	9008      	str	r0, [sp, #32]
 8009b9e:	2800      	cmp	r0, #0
 8009ba0:	d100      	bne.n	8009ba4 <_strtod_l+0x7a8>
 8009ba2:	e68e      	b.n	80098c2 <_strtod_l+0x4c6>
 8009ba4:	2c00      	cmp	r4, #0
 8009ba6:	dd08      	ble.n	8009bba <_strtod_l+0x7be>
 8009ba8:	0022      	movs	r2, r4
 8009baa:	9908      	ldr	r1, [sp, #32]
 8009bac:	9804      	ldr	r0, [sp, #16]
 8009bae:	f001 fbef 	bl	800b390 <__lshift>
 8009bb2:	9008      	str	r0, [sp, #32]
 8009bb4:	2800      	cmp	r0, #0
 8009bb6:	d100      	bne.n	8009bba <_strtod_l+0x7be>
 8009bb8:	e683      	b.n	80098c2 <_strtod_l+0x4c6>
 8009bba:	2d00      	cmp	r5, #0
 8009bbc:	dd08      	ble.n	8009bd0 <_strtod_l+0x7d4>
 8009bbe:	002a      	movs	r2, r5
 8009bc0:	9906      	ldr	r1, [sp, #24]
 8009bc2:	9804      	ldr	r0, [sp, #16]
 8009bc4:	f001 fbe4 	bl	800b390 <__lshift>
 8009bc8:	9006      	str	r0, [sp, #24]
 8009bca:	2800      	cmp	r0, #0
 8009bcc:	d100      	bne.n	8009bd0 <_strtod_l+0x7d4>
 8009bce:	e678      	b.n	80098c2 <_strtod_l+0x4c6>
 8009bd0:	9a08      	ldr	r2, [sp, #32]
 8009bd2:	991c      	ldr	r1, [sp, #112]	; 0x70
 8009bd4:	9804      	ldr	r0, [sp, #16]
 8009bd6:	f001 fc65 	bl	800b4a4 <__mdiff>
 8009bda:	9005      	str	r0, [sp, #20]
 8009bdc:	2800      	cmp	r0, #0
 8009bde:	d100      	bne.n	8009be2 <_strtod_l+0x7e6>
 8009be0:	e66f      	b.n	80098c2 <_strtod_l+0x4c6>
 8009be2:	2200      	movs	r2, #0
 8009be4:	68c3      	ldr	r3, [r0, #12]
 8009be6:	9906      	ldr	r1, [sp, #24]
 8009be8:	60c2      	str	r2, [r0, #12]
 8009bea:	930c      	str	r3, [sp, #48]	; 0x30
 8009bec:	f001 fc3e 	bl	800b46c <__mcmp>
 8009bf0:	2800      	cmp	r0, #0
 8009bf2:	da5d      	bge.n	8009cb0 <_strtod_l+0x8b4>
 8009bf4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009bf6:	4333      	orrs	r3, r6
 8009bf8:	d000      	beq.n	8009bfc <_strtod_l+0x800>
 8009bfa:	e088      	b.n	8009d0e <_strtod_l+0x912>
 8009bfc:	033b      	lsls	r3, r7, #12
 8009bfe:	d000      	beq.n	8009c02 <_strtod_l+0x806>
 8009c00:	e085      	b.n	8009d0e <_strtod_l+0x912>
 8009c02:	22d6      	movs	r2, #214	; 0xd6
 8009c04:	4b46      	ldr	r3, [pc, #280]	; (8009d20 <_strtod_l+0x924>)
 8009c06:	04d2      	lsls	r2, r2, #19
 8009c08:	403b      	ands	r3, r7
 8009c0a:	4293      	cmp	r3, r2
 8009c0c:	d97f      	bls.n	8009d0e <_strtod_l+0x912>
 8009c0e:	9b05      	ldr	r3, [sp, #20]
 8009c10:	695b      	ldr	r3, [r3, #20]
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	d103      	bne.n	8009c1e <_strtod_l+0x822>
 8009c16:	9b05      	ldr	r3, [sp, #20]
 8009c18:	691b      	ldr	r3, [r3, #16]
 8009c1a:	2b01      	cmp	r3, #1
 8009c1c:	dd77      	ble.n	8009d0e <_strtod_l+0x912>
 8009c1e:	9905      	ldr	r1, [sp, #20]
 8009c20:	2201      	movs	r2, #1
 8009c22:	9804      	ldr	r0, [sp, #16]
 8009c24:	f001 fbb4 	bl	800b390 <__lshift>
 8009c28:	9906      	ldr	r1, [sp, #24]
 8009c2a:	9005      	str	r0, [sp, #20]
 8009c2c:	f001 fc1e 	bl	800b46c <__mcmp>
 8009c30:	2800      	cmp	r0, #0
 8009c32:	dd6c      	ble.n	8009d0e <_strtod_l+0x912>
 8009c34:	9907      	ldr	r1, [sp, #28]
 8009c36:	003b      	movs	r3, r7
 8009c38:	4a39      	ldr	r2, [pc, #228]	; (8009d20 <_strtod_l+0x924>)
 8009c3a:	2900      	cmp	r1, #0
 8009c3c:	d100      	bne.n	8009c40 <_strtod_l+0x844>
 8009c3e:	e094      	b.n	8009d6a <_strtod_l+0x96e>
 8009c40:	0011      	movs	r1, r2
 8009c42:	20d6      	movs	r0, #214	; 0xd6
 8009c44:	4039      	ands	r1, r7
 8009c46:	04c0      	lsls	r0, r0, #19
 8009c48:	4281      	cmp	r1, r0
 8009c4a:	dd00      	ble.n	8009c4e <_strtod_l+0x852>
 8009c4c:	e08d      	b.n	8009d6a <_strtod_l+0x96e>
 8009c4e:	23dc      	movs	r3, #220	; 0xdc
 8009c50:	049b      	lsls	r3, r3, #18
 8009c52:	4299      	cmp	r1, r3
 8009c54:	dc00      	bgt.n	8009c58 <_strtod_l+0x85c>
 8009c56:	e6a7      	b.n	80099a8 <_strtod_l+0x5ac>
 8009c58:	0030      	movs	r0, r6
 8009c5a:	0039      	movs	r1, r7
 8009c5c:	4b31      	ldr	r3, [pc, #196]	; (8009d24 <_strtod_l+0x928>)
 8009c5e:	2200      	movs	r2, #0
 8009c60:	f7f7 fd04 	bl	800166c <__aeabi_dmul>
 8009c64:	4b2e      	ldr	r3, [pc, #184]	; (8009d20 <_strtod_l+0x924>)
 8009c66:	0006      	movs	r6, r0
 8009c68:	000f      	movs	r7, r1
 8009c6a:	420b      	tst	r3, r1
 8009c6c:	d000      	beq.n	8009c70 <_strtod_l+0x874>
 8009c6e:	e631      	b.n	80098d4 <_strtod_l+0x4d8>
 8009c70:	2322      	movs	r3, #34	; 0x22
 8009c72:	9a04      	ldr	r2, [sp, #16]
 8009c74:	6013      	str	r3, [r2, #0]
 8009c76:	e62d      	b.n	80098d4 <_strtod_l+0x4d8>
 8009c78:	234b      	movs	r3, #75	; 0x4b
 8009c7a:	1a9a      	subs	r2, r3, r2
 8009c7c:	3b4c      	subs	r3, #76	; 0x4c
 8009c7e:	4093      	lsls	r3, r2
 8009c80:	4019      	ands	r1, r3
 8009c82:	000f      	movs	r7, r1
 8009c84:	e6e3      	b.n	8009a4e <_strtod_l+0x652>
 8009c86:	2201      	movs	r2, #1
 8009c88:	4252      	negs	r2, r2
 8009c8a:	409a      	lsls	r2, r3
 8009c8c:	4016      	ands	r6, r2
 8009c8e:	e6de      	b.n	8009a4e <_strtod_l+0x652>
 8009c90:	4925      	ldr	r1, [pc, #148]	; (8009d28 <_strtod_l+0x92c>)
 8009c92:	1acb      	subs	r3, r1, r3
 8009c94:	0001      	movs	r1, r0
 8009c96:	4099      	lsls	r1, r3
 8009c98:	9114      	str	r1, [sp, #80]	; 0x50
 8009c9a:	e743      	b.n	8009b24 <_strtod_l+0x728>
 8009c9c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009c9e:	991c      	ldr	r1, [sp, #112]	; 0x70
 8009ca0:	9804      	ldr	r0, [sp, #16]
 8009ca2:	f001 fb75 	bl	800b390 <__lshift>
 8009ca6:	901c      	str	r0, [sp, #112]	; 0x70
 8009ca8:	2800      	cmp	r0, #0
 8009caa:	d000      	beq.n	8009cae <_strtod_l+0x8b2>
 8009cac:	e76e      	b.n	8009b8c <_strtod_l+0x790>
 8009cae:	e608      	b.n	80098c2 <_strtod_l+0x4c6>
 8009cb0:	970e      	str	r7, [sp, #56]	; 0x38
 8009cb2:	2800      	cmp	r0, #0
 8009cb4:	d177      	bne.n	8009da6 <_strtod_l+0x9aa>
 8009cb6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009cb8:	033b      	lsls	r3, r7, #12
 8009cba:	0b1b      	lsrs	r3, r3, #12
 8009cbc:	2a00      	cmp	r2, #0
 8009cbe:	d039      	beq.n	8009d34 <_strtod_l+0x938>
 8009cc0:	4a1a      	ldr	r2, [pc, #104]	; (8009d2c <_strtod_l+0x930>)
 8009cc2:	4293      	cmp	r3, r2
 8009cc4:	d139      	bne.n	8009d3a <_strtod_l+0x93e>
 8009cc6:	2101      	movs	r1, #1
 8009cc8:	9b07      	ldr	r3, [sp, #28]
 8009cca:	4249      	negs	r1, r1
 8009ccc:	0032      	movs	r2, r6
 8009cce:	0008      	movs	r0, r1
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	d00b      	beq.n	8009cec <_strtod_l+0x8f0>
 8009cd4:	24d4      	movs	r4, #212	; 0xd4
 8009cd6:	4b12      	ldr	r3, [pc, #72]	; (8009d20 <_strtod_l+0x924>)
 8009cd8:	0008      	movs	r0, r1
 8009cda:	403b      	ands	r3, r7
 8009cdc:	04e4      	lsls	r4, r4, #19
 8009cde:	42a3      	cmp	r3, r4
 8009ce0:	d804      	bhi.n	8009cec <_strtod_l+0x8f0>
 8009ce2:	306c      	adds	r0, #108	; 0x6c
 8009ce4:	0d1b      	lsrs	r3, r3, #20
 8009ce6:	1ac3      	subs	r3, r0, r3
 8009ce8:	4099      	lsls	r1, r3
 8009cea:	0008      	movs	r0, r1
 8009cec:	4282      	cmp	r2, r0
 8009cee:	d124      	bne.n	8009d3a <_strtod_l+0x93e>
 8009cf0:	4b0f      	ldr	r3, [pc, #60]	; (8009d30 <_strtod_l+0x934>)
 8009cf2:	990e      	ldr	r1, [sp, #56]	; 0x38
 8009cf4:	4299      	cmp	r1, r3
 8009cf6:	d102      	bne.n	8009cfe <_strtod_l+0x902>
 8009cf8:	3201      	adds	r2, #1
 8009cfa:	d100      	bne.n	8009cfe <_strtod_l+0x902>
 8009cfc:	e5e1      	b.n	80098c2 <_strtod_l+0x4c6>
 8009cfe:	4b08      	ldr	r3, [pc, #32]	; (8009d20 <_strtod_l+0x924>)
 8009d00:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009d02:	2600      	movs	r6, #0
 8009d04:	401a      	ands	r2, r3
 8009d06:	0013      	movs	r3, r2
 8009d08:	2280      	movs	r2, #128	; 0x80
 8009d0a:	0352      	lsls	r2, r2, #13
 8009d0c:	189f      	adds	r7, r3, r2
 8009d0e:	9b07      	ldr	r3, [sp, #28]
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	d1a1      	bne.n	8009c58 <_strtod_l+0x85c>
 8009d14:	e5de      	b.n	80098d4 <_strtod_l+0x4d8>
 8009d16:	46c0      	nop			; (mov r8, r8)
 8009d18:	08012a28 	.word	0x08012a28
 8009d1c:	fffffc02 	.word	0xfffffc02
 8009d20:	7ff00000 	.word	0x7ff00000
 8009d24:	39500000 	.word	0x39500000
 8009d28:	fffffbe2 	.word	0xfffffbe2
 8009d2c:	000fffff 	.word	0x000fffff
 8009d30:	7fefffff 	.word	0x7fefffff
 8009d34:	4333      	orrs	r3, r6
 8009d36:	d100      	bne.n	8009d3a <_strtod_l+0x93e>
 8009d38:	e77c      	b.n	8009c34 <_strtod_l+0x838>
 8009d3a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	d01d      	beq.n	8009d7c <_strtod_l+0x980>
 8009d40:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009d42:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009d44:	4213      	tst	r3, r2
 8009d46:	d0e2      	beq.n	8009d0e <_strtod_l+0x912>
 8009d48:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009d4a:	0030      	movs	r0, r6
 8009d4c:	0039      	movs	r1, r7
 8009d4e:	9a07      	ldr	r2, [sp, #28]
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	d017      	beq.n	8009d84 <_strtod_l+0x988>
 8009d54:	f7ff fb3a 	bl	80093cc <sulp>
 8009d58:	0002      	movs	r2, r0
 8009d5a:	000b      	movs	r3, r1
 8009d5c:	9810      	ldr	r0, [sp, #64]	; 0x40
 8009d5e:	9911      	ldr	r1, [sp, #68]	; 0x44
 8009d60:	f7f6 fd2a 	bl	80007b8 <__aeabi_dadd>
 8009d64:	0006      	movs	r6, r0
 8009d66:	000f      	movs	r7, r1
 8009d68:	e7d1      	b.n	8009d0e <_strtod_l+0x912>
 8009d6a:	2601      	movs	r6, #1
 8009d6c:	4013      	ands	r3, r2
 8009d6e:	4a98      	ldr	r2, [pc, #608]	; (8009fd0 <_strtod_l+0xbd4>)
 8009d70:	4276      	negs	r6, r6
 8009d72:	189b      	adds	r3, r3, r2
 8009d74:	4a97      	ldr	r2, [pc, #604]	; (8009fd4 <_strtod_l+0xbd8>)
 8009d76:	431a      	orrs	r2, r3
 8009d78:	0017      	movs	r7, r2
 8009d7a:	e7c8      	b.n	8009d0e <_strtod_l+0x912>
 8009d7c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009d7e:	4233      	tst	r3, r6
 8009d80:	d0c5      	beq.n	8009d0e <_strtod_l+0x912>
 8009d82:	e7e1      	b.n	8009d48 <_strtod_l+0x94c>
 8009d84:	f7ff fb22 	bl	80093cc <sulp>
 8009d88:	0002      	movs	r2, r0
 8009d8a:	000b      	movs	r3, r1
 8009d8c:	9810      	ldr	r0, [sp, #64]	; 0x40
 8009d8e:	9911      	ldr	r1, [sp, #68]	; 0x44
 8009d90:	f7f7 ff2e 	bl	8001bf0 <__aeabi_dsub>
 8009d94:	2200      	movs	r2, #0
 8009d96:	2300      	movs	r3, #0
 8009d98:	0006      	movs	r6, r0
 8009d9a:	000f      	movs	r7, r1
 8009d9c:	f7f6 fb54 	bl	8000448 <__aeabi_dcmpeq>
 8009da0:	2800      	cmp	r0, #0
 8009da2:	d0b4      	beq.n	8009d0e <_strtod_l+0x912>
 8009da4:	e600      	b.n	80099a8 <_strtod_l+0x5ac>
 8009da6:	9906      	ldr	r1, [sp, #24]
 8009da8:	9805      	ldr	r0, [sp, #20]
 8009daa:	f001 fcdb 	bl	800b764 <__ratio>
 8009dae:	2380      	movs	r3, #128	; 0x80
 8009db0:	2200      	movs	r2, #0
 8009db2:	05db      	lsls	r3, r3, #23
 8009db4:	0004      	movs	r4, r0
 8009db6:	000d      	movs	r5, r1
 8009db8:	f7f6 fb56 	bl	8000468 <__aeabi_dcmple>
 8009dbc:	2800      	cmp	r0, #0
 8009dbe:	d06d      	beq.n	8009e9c <_strtod_l+0xaa0>
 8009dc0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	d000      	beq.n	8009dc8 <_strtod_l+0x9cc>
 8009dc6:	e07e      	b.n	8009ec6 <_strtod_l+0xaca>
 8009dc8:	2e00      	cmp	r6, #0
 8009dca:	d158      	bne.n	8009e7e <_strtod_l+0xa82>
 8009dcc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009dce:	031b      	lsls	r3, r3, #12
 8009dd0:	d000      	beq.n	8009dd4 <_strtod_l+0x9d8>
 8009dd2:	e07f      	b.n	8009ed4 <_strtod_l+0xad8>
 8009dd4:	2200      	movs	r2, #0
 8009dd6:	0020      	movs	r0, r4
 8009dd8:	0029      	movs	r1, r5
 8009dda:	4b7f      	ldr	r3, [pc, #508]	; (8009fd8 <_strtod_l+0xbdc>)
 8009ddc:	f7f6 fb3a 	bl	8000454 <__aeabi_dcmplt>
 8009de0:	2800      	cmp	r0, #0
 8009de2:	d158      	bne.n	8009e96 <_strtod_l+0xa9a>
 8009de4:	0020      	movs	r0, r4
 8009de6:	0029      	movs	r1, r5
 8009de8:	2200      	movs	r2, #0
 8009dea:	4b7c      	ldr	r3, [pc, #496]	; (8009fdc <_strtod_l+0xbe0>)
 8009dec:	f7f7 fc3e 	bl	800166c <__aeabi_dmul>
 8009df0:	0004      	movs	r4, r0
 8009df2:	000d      	movs	r5, r1
 8009df4:	2380      	movs	r3, #128	; 0x80
 8009df6:	061b      	lsls	r3, r3, #24
 8009df8:	940a      	str	r4, [sp, #40]	; 0x28
 8009dfa:	18eb      	adds	r3, r5, r3
 8009dfc:	930b      	str	r3, [sp, #44]	; 0x2c
 8009dfe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009e00:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009e02:	9212      	str	r2, [sp, #72]	; 0x48
 8009e04:	9313      	str	r3, [sp, #76]	; 0x4c
 8009e06:	4a76      	ldr	r2, [pc, #472]	; (8009fe0 <_strtod_l+0xbe4>)
 8009e08:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009e0a:	4013      	ands	r3, r2
 8009e0c:	9314      	str	r3, [sp, #80]	; 0x50
 8009e0e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009e10:	4b74      	ldr	r3, [pc, #464]	; (8009fe4 <_strtod_l+0xbe8>)
 8009e12:	429a      	cmp	r2, r3
 8009e14:	d000      	beq.n	8009e18 <_strtod_l+0xa1c>
 8009e16:	e091      	b.n	8009f3c <_strtod_l+0xb40>
 8009e18:	4a73      	ldr	r2, [pc, #460]	; (8009fe8 <_strtod_l+0xbec>)
 8009e1a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009e1c:	4694      	mov	ip, r2
 8009e1e:	4463      	add	r3, ip
 8009e20:	001f      	movs	r7, r3
 8009e22:	0030      	movs	r0, r6
 8009e24:	0019      	movs	r1, r3
 8009e26:	f001 fbd5 	bl	800b5d4 <__ulp>
 8009e2a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009e2c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009e2e:	f7f7 fc1d 	bl	800166c <__aeabi_dmul>
 8009e32:	0032      	movs	r2, r6
 8009e34:	003b      	movs	r3, r7
 8009e36:	f7f6 fcbf 	bl	80007b8 <__aeabi_dadd>
 8009e3a:	4a69      	ldr	r2, [pc, #420]	; (8009fe0 <_strtod_l+0xbe4>)
 8009e3c:	4b6b      	ldr	r3, [pc, #428]	; (8009fec <_strtod_l+0xbf0>)
 8009e3e:	0006      	movs	r6, r0
 8009e40:	400a      	ands	r2, r1
 8009e42:	429a      	cmp	r2, r3
 8009e44:	d949      	bls.n	8009eda <_strtod_l+0xade>
 8009e46:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8009e48:	4b69      	ldr	r3, [pc, #420]	; (8009ff0 <_strtod_l+0xbf4>)
 8009e4a:	429a      	cmp	r2, r3
 8009e4c:	d103      	bne.n	8009e56 <_strtod_l+0xa5a>
 8009e4e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009e50:	3301      	adds	r3, #1
 8009e52:	d100      	bne.n	8009e56 <_strtod_l+0xa5a>
 8009e54:	e535      	b.n	80098c2 <_strtod_l+0x4c6>
 8009e56:	2601      	movs	r6, #1
 8009e58:	4f65      	ldr	r7, [pc, #404]	; (8009ff0 <_strtod_l+0xbf4>)
 8009e5a:	4276      	negs	r6, r6
 8009e5c:	991c      	ldr	r1, [sp, #112]	; 0x70
 8009e5e:	9804      	ldr	r0, [sp, #16]
 8009e60:	f001 f8aa 	bl	800afb8 <_Bfree>
 8009e64:	9908      	ldr	r1, [sp, #32]
 8009e66:	9804      	ldr	r0, [sp, #16]
 8009e68:	f001 f8a6 	bl	800afb8 <_Bfree>
 8009e6c:	9906      	ldr	r1, [sp, #24]
 8009e6e:	9804      	ldr	r0, [sp, #16]
 8009e70:	f001 f8a2 	bl	800afb8 <_Bfree>
 8009e74:	9905      	ldr	r1, [sp, #20]
 8009e76:	9804      	ldr	r0, [sp, #16]
 8009e78:	f001 f89e 	bl	800afb8 <_Bfree>
 8009e7c:	e60b      	b.n	8009a96 <_strtod_l+0x69a>
 8009e7e:	2e01      	cmp	r6, #1
 8009e80:	d103      	bne.n	8009e8a <_strtod_l+0xa8e>
 8009e82:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	d100      	bne.n	8009e8a <_strtod_l+0xa8e>
 8009e88:	e58e      	b.n	80099a8 <_strtod_l+0x5ac>
 8009e8a:	2300      	movs	r3, #0
 8009e8c:	4c59      	ldr	r4, [pc, #356]	; (8009ff4 <_strtod_l+0xbf8>)
 8009e8e:	930a      	str	r3, [sp, #40]	; 0x28
 8009e90:	940b      	str	r4, [sp, #44]	; 0x2c
 8009e92:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8009e94:	e01c      	b.n	8009ed0 <_strtod_l+0xad4>
 8009e96:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8009e98:	4d50      	ldr	r5, [pc, #320]	; (8009fdc <_strtod_l+0xbe0>)
 8009e9a:	e7ab      	b.n	8009df4 <_strtod_l+0x9f8>
 8009e9c:	2200      	movs	r2, #0
 8009e9e:	0020      	movs	r0, r4
 8009ea0:	0029      	movs	r1, r5
 8009ea2:	4b4e      	ldr	r3, [pc, #312]	; (8009fdc <_strtod_l+0xbe0>)
 8009ea4:	f7f7 fbe2 	bl	800166c <__aeabi_dmul>
 8009ea8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009eaa:	0004      	movs	r4, r0
 8009eac:	000b      	movs	r3, r1
 8009eae:	000d      	movs	r5, r1
 8009eb0:	2a00      	cmp	r2, #0
 8009eb2:	d104      	bne.n	8009ebe <_strtod_l+0xac2>
 8009eb4:	2280      	movs	r2, #128	; 0x80
 8009eb6:	0612      	lsls	r2, r2, #24
 8009eb8:	900a      	str	r0, [sp, #40]	; 0x28
 8009eba:	188b      	adds	r3, r1, r2
 8009ebc:	e79e      	b.n	8009dfc <_strtod_l+0xa00>
 8009ebe:	0002      	movs	r2, r0
 8009ec0:	920a      	str	r2, [sp, #40]	; 0x28
 8009ec2:	930b      	str	r3, [sp, #44]	; 0x2c
 8009ec4:	e79b      	b.n	8009dfe <_strtod_l+0xa02>
 8009ec6:	2300      	movs	r3, #0
 8009ec8:	4c43      	ldr	r4, [pc, #268]	; (8009fd8 <_strtod_l+0xbdc>)
 8009eca:	930a      	str	r3, [sp, #40]	; 0x28
 8009ecc:	940b      	str	r4, [sp, #44]	; 0x2c
 8009ece:	2400      	movs	r4, #0
 8009ed0:	4d41      	ldr	r5, [pc, #260]	; (8009fd8 <_strtod_l+0xbdc>)
 8009ed2:	e794      	b.n	8009dfe <_strtod_l+0xa02>
 8009ed4:	2300      	movs	r3, #0
 8009ed6:	4c47      	ldr	r4, [pc, #284]	; (8009ff4 <_strtod_l+0xbf8>)
 8009ed8:	e7f7      	b.n	8009eca <_strtod_l+0xace>
 8009eda:	23d4      	movs	r3, #212	; 0xd4
 8009edc:	049b      	lsls	r3, r3, #18
 8009ede:	18cf      	adds	r7, r1, r3
 8009ee0:	9b07      	ldr	r3, [sp, #28]
 8009ee2:	970e      	str	r7, [sp, #56]	; 0x38
 8009ee4:	2b00      	cmp	r3, #0
 8009ee6:	d1b9      	bne.n	8009e5c <_strtod_l+0xa60>
 8009ee8:	4b3d      	ldr	r3, [pc, #244]	; (8009fe0 <_strtod_l+0xbe4>)
 8009eea:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009eec:	403b      	ands	r3, r7
 8009eee:	429a      	cmp	r2, r3
 8009ef0:	d1b4      	bne.n	8009e5c <_strtod_l+0xa60>
 8009ef2:	0020      	movs	r0, r4
 8009ef4:	0029      	movs	r1, r5
 8009ef6:	f7f6 fb41 	bl	800057c <__aeabi_d2lz>
 8009efa:	f7f6 fb7b 	bl	80005f4 <__aeabi_l2d>
 8009efe:	0002      	movs	r2, r0
 8009f00:	000b      	movs	r3, r1
 8009f02:	0020      	movs	r0, r4
 8009f04:	0029      	movs	r1, r5
 8009f06:	f7f7 fe73 	bl	8001bf0 <__aeabi_dsub>
 8009f0a:	033b      	lsls	r3, r7, #12
 8009f0c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009f0e:	0b1b      	lsrs	r3, r3, #12
 8009f10:	4333      	orrs	r3, r6
 8009f12:	4313      	orrs	r3, r2
 8009f14:	0004      	movs	r4, r0
 8009f16:	000d      	movs	r5, r1
 8009f18:	4a37      	ldr	r2, [pc, #220]	; (8009ff8 <_strtod_l+0xbfc>)
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	d054      	beq.n	8009fc8 <_strtod_l+0xbcc>
 8009f1e:	4b37      	ldr	r3, [pc, #220]	; (8009ffc <_strtod_l+0xc00>)
 8009f20:	f7f6 fa98 	bl	8000454 <__aeabi_dcmplt>
 8009f24:	2800      	cmp	r0, #0
 8009f26:	d000      	beq.n	8009f2a <_strtod_l+0xb2e>
 8009f28:	e4d4      	b.n	80098d4 <_strtod_l+0x4d8>
 8009f2a:	0020      	movs	r0, r4
 8009f2c:	0029      	movs	r1, r5
 8009f2e:	4a34      	ldr	r2, [pc, #208]	; (800a000 <_strtod_l+0xc04>)
 8009f30:	4b2a      	ldr	r3, [pc, #168]	; (8009fdc <_strtod_l+0xbe0>)
 8009f32:	f7f6 faa3 	bl	800047c <__aeabi_dcmpgt>
 8009f36:	2800      	cmp	r0, #0
 8009f38:	d090      	beq.n	8009e5c <_strtod_l+0xa60>
 8009f3a:	e4cb      	b.n	80098d4 <_strtod_l+0x4d8>
 8009f3c:	9b07      	ldr	r3, [sp, #28]
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	d02b      	beq.n	8009f9a <_strtod_l+0xb9e>
 8009f42:	23d4      	movs	r3, #212	; 0xd4
 8009f44:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009f46:	04db      	lsls	r3, r3, #19
 8009f48:	429a      	cmp	r2, r3
 8009f4a:	d826      	bhi.n	8009f9a <_strtod_l+0xb9e>
 8009f4c:	0020      	movs	r0, r4
 8009f4e:	0029      	movs	r1, r5
 8009f50:	4a2c      	ldr	r2, [pc, #176]	; (800a004 <_strtod_l+0xc08>)
 8009f52:	4b2d      	ldr	r3, [pc, #180]	; (800a008 <_strtod_l+0xc0c>)
 8009f54:	f7f6 fa88 	bl	8000468 <__aeabi_dcmple>
 8009f58:	2800      	cmp	r0, #0
 8009f5a:	d017      	beq.n	8009f8c <_strtod_l+0xb90>
 8009f5c:	0020      	movs	r0, r4
 8009f5e:	0029      	movs	r1, r5
 8009f60:	f7f6 faee 	bl	8000540 <__aeabi_d2uiz>
 8009f64:	2800      	cmp	r0, #0
 8009f66:	d100      	bne.n	8009f6a <_strtod_l+0xb6e>
 8009f68:	3001      	adds	r0, #1
 8009f6a:	f7f8 fa47 	bl	80023fc <__aeabi_ui2d>
 8009f6e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009f70:	0004      	movs	r4, r0
 8009f72:	000b      	movs	r3, r1
 8009f74:	000d      	movs	r5, r1
 8009f76:	2a00      	cmp	r2, #0
 8009f78:	d122      	bne.n	8009fc0 <_strtod_l+0xbc4>
 8009f7a:	2280      	movs	r2, #128	; 0x80
 8009f7c:	0612      	lsls	r2, r2, #24
 8009f7e:	188b      	adds	r3, r1, r2
 8009f80:	9016      	str	r0, [sp, #88]	; 0x58
 8009f82:	9317      	str	r3, [sp, #92]	; 0x5c
 8009f84:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8009f86:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009f88:	9212      	str	r2, [sp, #72]	; 0x48
 8009f8a:	9313      	str	r3, [sp, #76]	; 0x4c
 8009f8c:	22d6      	movs	r2, #214	; 0xd6
 8009f8e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009f90:	04d2      	lsls	r2, r2, #19
 8009f92:	189b      	adds	r3, r3, r2
 8009f94:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009f96:	1a9b      	subs	r3, r3, r2
 8009f98:	9313      	str	r3, [sp, #76]	; 0x4c
 8009f9a:	9810      	ldr	r0, [sp, #64]	; 0x40
 8009f9c:	9911      	ldr	r1, [sp, #68]	; 0x44
 8009f9e:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8009fa0:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 8009fa2:	f001 fb17 	bl	800b5d4 <__ulp>
 8009fa6:	0002      	movs	r2, r0
 8009fa8:	000b      	movs	r3, r1
 8009faa:	0030      	movs	r0, r6
 8009fac:	0039      	movs	r1, r7
 8009fae:	f7f7 fb5d 	bl	800166c <__aeabi_dmul>
 8009fb2:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009fb4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009fb6:	f7f6 fbff 	bl	80007b8 <__aeabi_dadd>
 8009fba:	0006      	movs	r6, r0
 8009fbc:	000f      	movs	r7, r1
 8009fbe:	e78f      	b.n	8009ee0 <_strtod_l+0xae4>
 8009fc0:	0002      	movs	r2, r0
 8009fc2:	9216      	str	r2, [sp, #88]	; 0x58
 8009fc4:	9317      	str	r3, [sp, #92]	; 0x5c
 8009fc6:	e7dd      	b.n	8009f84 <_strtod_l+0xb88>
 8009fc8:	4b10      	ldr	r3, [pc, #64]	; (800a00c <_strtod_l+0xc10>)
 8009fca:	f7f6 fa43 	bl	8000454 <__aeabi_dcmplt>
 8009fce:	e7b2      	b.n	8009f36 <_strtod_l+0xb3a>
 8009fd0:	fff00000 	.word	0xfff00000
 8009fd4:	000fffff 	.word	0x000fffff
 8009fd8:	3ff00000 	.word	0x3ff00000
 8009fdc:	3fe00000 	.word	0x3fe00000
 8009fe0:	7ff00000 	.word	0x7ff00000
 8009fe4:	7fe00000 	.word	0x7fe00000
 8009fe8:	fcb00000 	.word	0xfcb00000
 8009fec:	7c9fffff 	.word	0x7c9fffff
 8009ff0:	7fefffff 	.word	0x7fefffff
 8009ff4:	bff00000 	.word	0xbff00000
 8009ff8:	94a03595 	.word	0x94a03595
 8009ffc:	3fdfffff 	.word	0x3fdfffff
 800a000:	35afe535 	.word	0x35afe535
 800a004:	ffc00000 	.word	0xffc00000
 800a008:	41dfffff 	.word	0x41dfffff
 800a00c:	3fcfffff 	.word	0x3fcfffff

0800a010 <_strtod_r>:
 800a010:	b510      	push	{r4, lr}
 800a012:	4b02      	ldr	r3, [pc, #8]	; (800a01c <_strtod_r+0xc>)
 800a014:	f7ff f9f2 	bl	80093fc <_strtod_l>
 800a018:	bd10      	pop	{r4, pc}
 800a01a:	46c0      	nop			; (mov r8, r8)
 800a01c:	2000042c 	.word	0x2000042c

0800a020 <_strtol_l.constprop.0>:
 800a020:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a022:	b087      	sub	sp, #28
 800a024:	001e      	movs	r6, r3
 800a026:	9005      	str	r0, [sp, #20]
 800a028:	9101      	str	r1, [sp, #4]
 800a02a:	9202      	str	r2, [sp, #8]
 800a02c:	2b01      	cmp	r3, #1
 800a02e:	d048      	beq.n	800a0c2 <_strtol_l.constprop.0+0xa2>
 800a030:	000b      	movs	r3, r1
 800a032:	2e24      	cmp	r6, #36	; 0x24
 800a034:	d845      	bhi.n	800a0c2 <_strtol_l.constprop.0+0xa2>
 800a036:	4a3b      	ldr	r2, [pc, #236]	; (800a124 <_strtol_l.constprop.0+0x104>)
 800a038:	2108      	movs	r1, #8
 800a03a:	4694      	mov	ip, r2
 800a03c:	001a      	movs	r2, r3
 800a03e:	4660      	mov	r0, ip
 800a040:	7814      	ldrb	r4, [r2, #0]
 800a042:	3301      	adds	r3, #1
 800a044:	5d00      	ldrb	r0, [r0, r4]
 800a046:	001d      	movs	r5, r3
 800a048:	0007      	movs	r7, r0
 800a04a:	400f      	ands	r7, r1
 800a04c:	4208      	tst	r0, r1
 800a04e:	d1f5      	bne.n	800a03c <_strtol_l.constprop.0+0x1c>
 800a050:	2c2d      	cmp	r4, #45	; 0x2d
 800a052:	d13d      	bne.n	800a0d0 <_strtol_l.constprop.0+0xb0>
 800a054:	2701      	movs	r7, #1
 800a056:	781c      	ldrb	r4, [r3, #0]
 800a058:	1c95      	adds	r5, r2, #2
 800a05a:	2e00      	cmp	r6, #0
 800a05c:	d05e      	beq.n	800a11c <_strtol_l.constprop.0+0xfc>
 800a05e:	2e10      	cmp	r6, #16
 800a060:	d109      	bne.n	800a076 <_strtol_l.constprop.0+0x56>
 800a062:	2c30      	cmp	r4, #48	; 0x30
 800a064:	d107      	bne.n	800a076 <_strtol_l.constprop.0+0x56>
 800a066:	2220      	movs	r2, #32
 800a068:	782b      	ldrb	r3, [r5, #0]
 800a06a:	4393      	bics	r3, r2
 800a06c:	2b58      	cmp	r3, #88	; 0x58
 800a06e:	d150      	bne.n	800a112 <_strtol_l.constprop.0+0xf2>
 800a070:	2610      	movs	r6, #16
 800a072:	786c      	ldrb	r4, [r5, #1]
 800a074:	3502      	adds	r5, #2
 800a076:	4b2c      	ldr	r3, [pc, #176]	; (800a128 <_strtol_l.constprop.0+0x108>)
 800a078:	0031      	movs	r1, r6
 800a07a:	18fb      	adds	r3, r7, r3
 800a07c:	0018      	movs	r0, r3
 800a07e:	9303      	str	r3, [sp, #12]
 800a080:	f7f6 f8e2 	bl	8000248 <__aeabi_uidivmod>
 800a084:	2200      	movs	r2, #0
 800a086:	9104      	str	r1, [sp, #16]
 800a088:	2101      	movs	r1, #1
 800a08a:	4684      	mov	ip, r0
 800a08c:	0010      	movs	r0, r2
 800a08e:	4249      	negs	r1, r1
 800a090:	0023      	movs	r3, r4
 800a092:	3b30      	subs	r3, #48	; 0x30
 800a094:	2b09      	cmp	r3, #9
 800a096:	d903      	bls.n	800a0a0 <_strtol_l.constprop.0+0x80>
 800a098:	3b11      	subs	r3, #17
 800a09a:	2b19      	cmp	r3, #25
 800a09c:	d81d      	bhi.n	800a0da <_strtol_l.constprop.0+0xba>
 800a09e:	330a      	adds	r3, #10
 800a0a0:	429e      	cmp	r6, r3
 800a0a2:	dd1e      	ble.n	800a0e2 <_strtol_l.constprop.0+0xc2>
 800a0a4:	1c54      	adds	r4, r2, #1
 800a0a6:	d009      	beq.n	800a0bc <_strtol_l.constprop.0+0x9c>
 800a0a8:	000a      	movs	r2, r1
 800a0aa:	4584      	cmp	ip, r0
 800a0ac:	d306      	bcc.n	800a0bc <_strtol_l.constprop.0+0x9c>
 800a0ae:	d102      	bne.n	800a0b6 <_strtol_l.constprop.0+0x96>
 800a0b0:	9c04      	ldr	r4, [sp, #16]
 800a0b2:	429c      	cmp	r4, r3
 800a0b4:	db02      	blt.n	800a0bc <_strtol_l.constprop.0+0x9c>
 800a0b6:	2201      	movs	r2, #1
 800a0b8:	4370      	muls	r0, r6
 800a0ba:	1818      	adds	r0, r3, r0
 800a0bc:	782c      	ldrb	r4, [r5, #0]
 800a0be:	3501      	adds	r5, #1
 800a0c0:	e7e6      	b.n	800a090 <_strtol_l.constprop.0+0x70>
 800a0c2:	f000 fa7d 	bl	800a5c0 <__errno>
 800a0c6:	2316      	movs	r3, #22
 800a0c8:	6003      	str	r3, [r0, #0]
 800a0ca:	2000      	movs	r0, #0
 800a0cc:	b007      	add	sp, #28
 800a0ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a0d0:	2c2b      	cmp	r4, #43	; 0x2b
 800a0d2:	d1c2      	bne.n	800a05a <_strtol_l.constprop.0+0x3a>
 800a0d4:	781c      	ldrb	r4, [r3, #0]
 800a0d6:	1c95      	adds	r5, r2, #2
 800a0d8:	e7bf      	b.n	800a05a <_strtol_l.constprop.0+0x3a>
 800a0da:	0023      	movs	r3, r4
 800a0dc:	3b61      	subs	r3, #97	; 0x61
 800a0de:	2b19      	cmp	r3, #25
 800a0e0:	d9dd      	bls.n	800a09e <_strtol_l.constprop.0+0x7e>
 800a0e2:	1c53      	adds	r3, r2, #1
 800a0e4:	d109      	bne.n	800a0fa <_strtol_l.constprop.0+0xda>
 800a0e6:	2322      	movs	r3, #34	; 0x22
 800a0e8:	9a05      	ldr	r2, [sp, #20]
 800a0ea:	9803      	ldr	r0, [sp, #12]
 800a0ec:	6013      	str	r3, [r2, #0]
 800a0ee:	9b02      	ldr	r3, [sp, #8]
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	d0eb      	beq.n	800a0cc <_strtol_l.constprop.0+0xac>
 800a0f4:	1e6b      	subs	r3, r5, #1
 800a0f6:	9301      	str	r3, [sp, #4]
 800a0f8:	e007      	b.n	800a10a <_strtol_l.constprop.0+0xea>
 800a0fa:	2f00      	cmp	r7, #0
 800a0fc:	d000      	beq.n	800a100 <_strtol_l.constprop.0+0xe0>
 800a0fe:	4240      	negs	r0, r0
 800a100:	9b02      	ldr	r3, [sp, #8]
 800a102:	2b00      	cmp	r3, #0
 800a104:	d0e2      	beq.n	800a0cc <_strtol_l.constprop.0+0xac>
 800a106:	2a00      	cmp	r2, #0
 800a108:	d1f4      	bne.n	800a0f4 <_strtol_l.constprop.0+0xd4>
 800a10a:	9b02      	ldr	r3, [sp, #8]
 800a10c:	9a01      	ldr	r2, [sp, #4]
 800a10e:	601a      	str	r2, [r3, #0]
 800a110:	e7dc      	b.n	800a0cc <_strtol_l.constprop.0+0xac>
 800a112:	2430      	movs	r4, #48	; 0x30
 800a114:	2e00      	cmp	r6, #0
 800a116:	d1ae      	bne.n	800a076 <_strtol_l.constprop.0+0x56>
 800a118:	3608      	adds	r6, #8
 800a11a:	e7ac      	b.n	800a076 <_strtol_l.constprop.0+0x56>
 800a11c:	2c30      	cmp	r4, #48	; 0x30
 800a11e:	d0a2      	beq.n	800a066 <_strtol_l.constprop.0+0x46>
 800a120:	260a      	movs	r6, #10
 800a122:	e7a8      	b.n	800a076 <_strtol_l.constprop.0+0x56>
 800a124:	08012a51 	.word	0x08012a51
 800a128:	7fffffff 	.word	0x7fffffff

0800a12c <_strtol_r>:
 800a12c:	b510      	push	{r4, lr}
 800a12e:	f7ff ff77 	bl	800a020 <_strtol_l.constprop.0>
 800a132:	bd10      	pop	{r4, pc}

0800a134 <strtol>:
 800a134:	b510      	push	{r4, lr}
 800a136:	4c04      	ldr	r4, [pc, #16]	; (800a148 <strtol+0x14>)
 800a138:	0013      	movs	r3, r2
 800a13a:	000a      	movs	r2, r1
 800a13c:	0001      	movs	r1, r0
 800a13e:	6820      	ldr	r0, [r4, #0]
 800a140:	f7ff ff6e 	bl	800a020 <_strtol_l.constprop.0>
 800a144:	bd10      	pop	{r4, pc}
 800a146:	46c0      	nop			; (mov r8, r8)
 800a148:	200006b8 	.word	0x200006b8

0800a14c <std>:
 800a14c:	2300      	movs	r3, #0
 800a14e:	b510      	push	{r4, lr}
 800a150:	0004      	movs	r4, r0
 800a152:	6003      	str	r3, [r0, #0]
 800a154:	6043      	str	r3, [r0, #4]
 800a156:	6083      	str	r3, [r0, #8]
 800a158:	8181      	strh	r1, [r0, #12]
 800a15a:	6643      	str	r3, [r0, #100]	; 0x64
 800a15c:	81c2      	strh	r2, [r0, #14]
 800a15e:	6103      	str	r3, [r0, #16]
 800a160:	6143      	str	r3, [r0, #20]
 800a162:	6183      	str	r3, [r0, #24]
 800a164:	0019      	movs	r1, r3
 800a166:	2208      	movs	r2, #8
 800a168:	305c      	adds	r0, #92	; 0x5c
 800a16a:	f000 f97d 	bl	800a468 <memset>
 800a16e:	4b0b      	ldr	r3, [pc, #44]	; (800a19c <std+0x50>)
 800a170:	61e4      	str	r4, [r4, #28]
 800a172:	6223      	str	r3, [r4, #32]
 800a174:	4b0a      	ldr	r3, [pc, #40]	; (800a1a0 <std+0x54>)
 800a176:	6263      	str	r3, [r4, #36]	; 0x24
 800a178:	4b0a      	ldr	r3, [pc, #40]	; (800a1a4 <std+0x58>)
 800a17a:	62a3      	str	r3, [r4, #40]	; 0x28
 800a17c:	4b0a      	ldr	r3, [pc, #40]	; (800a1a8 <std+0x5c>)
 800a17e:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a180:	4b0a      	ldr	r3, [pc, #40]	; (800a1ac <std+0x60>)
 800a182:	429c      	cmp	r4, r3
 800a184:	d005      	beq.n	800a192 <std+0x46>
 800a186:	4b0a      	ldr	r3, [pc, #40]	; (800a1b0 <std+0x64>)
 800a188:	429c      	cmp	r4, r3
 800a18a:	d002      	beq.n	800a192 <std+0x46>
 800a18c:	4b09      	ldr	r3, [pc, #36]	; (800a1b4 <std+0x68>)
 800a18e:	429c      	cmp	r4, r3
 800a190:	d103      	bne.n	800a19a <std+0x4e>
 800a192:	0020      	movs	r0, r4
 800a194:	3058      	adds	r0, #88	; 0x58
 800a196:	f000 fa3d 	bl	800a614 <__retarget_lock_init_recursive>
 800a19a:	bd10      	pop	{r4, pc}
 800a19c:	0800a3cd 	.word	0x0800a3cd
 800a1a0:	0800a3f9 	.word	0x0800a3f9
 800a1a4:	0800a431 	.word	0x0800a431
 800a1a8:	0800a45d 	.word	0x0800a45d
 800a1ac:	20000ac4 	.word	0x20000ac4
 800a1b0:	20000b2c 	.word	0x20000b2c
 800a1b4:	20000b94 	.word	0x20000b94

0800a1b8 <stdio_exit_handler>:
 800a1b8:	b510      	push	{r4, lr}
 800a1ba:	4a03      	ldr	r2, [pc, #12]	; (800a1c8 <stdio_exit_handler+0x10>)
 800a1bc:	4903      	ldr	r1, [pc, #12]	; (800a1cc <stdio_exit_handler+0x14>)
 800a1be:	4804      	ldr	r0, [pc, #16]	; (800a1d0 <stdio_exit_handler+0x18>)
 800a1c0:	f000 f86c 	bl	800a29c <_fwalk_sglue>
 800a1c4:	bd10      	pop	{r4, pc}
 800a1c6:	46c0      	nop			; (mov r8, r8)
 800a1c8:	20000420 	.word	0x20000420
 800a1cc:	0800e115 	.word	0x0800e115
 800a1d0:	20000598 	.word	0x20000598

0800a1d4 <cleanup_stdio>:
 800a1d4:	6841      	ldr	r1, [r0, #4]
 800a1d6:	4b0b      	ldr	r3, [pc, #44]	; (800a204 <cleanup_stdio+0x30>)
 800a1d8:	b510      	push	{r4, lr}
 800a1da:	0004      	movs	r4, r0
 800a1dc:	4299      	cmp	r1, r3
 800a1de:	d001      	beq.n	800a1e4 <cleanup_stdio+0x10>
 800a1e0:	f003 ff98 	bl	800e114 <_fclose_r>
 800a1e4:	68a1      	ldr	r1, [r4, #8]
 800a1e6:	4b08      	ldr	r3, [pc, #32]	; (800a208 <cleanup_stdio+0x34>)
 800a1e8:	4299      	cmp	r1, r3
 800a1ea:	d002      	beq.n	800a1f2 <cleanup_stdio+0x1e>
 800a1ec:	0020      	movs	r0, r4
 800a1ee:	f003 ff91 	bl	800e114 <_fclose_r>
 800a1f2:	68e1      	ldr	r1, [r4, #12]
 800a1f4:	4b05      	ldr	r3, [pc, #20]	; (800a20c <cleanup_stdio+0x38>)
 800a1f6:	4299      	cmp	r1, r3
 800a1f8:	d002      	beq.n	800a200 <cleanup_stdio+0x2c>
 800a1fa:	0020      	movs	r0, r4
 800a1fc:	f003 ff8a 	bl	800e114 <_fclose_r>
 800a200:	bd10      	pop	{r4, pc}
 800a202:	46c0      	nop			; (mov r8, r8)
 800a204:	20000ac4 	.word	0x20000ac4
 800a208:	20000b2c 	.word	0x20000b2c
 800a20c:	20000b94 	.word	0x20000b94

0800a210 <global_stdio_init.part.0>:
 800a210:	b510      	push	{r4, lr}
 800a212:	4b09      	ldr	r3, [pc, #36]	; (800a238 <global_stdio_init.part.0+0x28>)
 800a214:	4a09      	ldr	r2, [pc, #36]	; (800a23c <global_stdio_init.part.0+0x2c>)
 800a216:	2104      	movs	r1, #4
 800a218:	601a      	str	r2, [r3, #0]
 800a21a:	4809      	ldr	r0, [pc, #36]	; (800a240 <global_stdio_init.part.0+0x30>)
 800a21c:	2200      	movs	r2, #0
 800a21e:	f7ff ff95 	bl	800a14c <std>
 800a222:	2201      	movs	r2, #1
 800a224:	2109      	movs	r1, #9
 800a226:	4807      	ldr	r0, [pc, #28]	; (800a244 <global_stdio_init.part.0+0x34>)
 800a228:	f7ff ff90 	bl	800a14c <std>
 800a22c:	2202      	movs	r2, #2
 800a22e:	2112      	movs	r1, #18
 800a230:	4805      	ldr	r0, [pc, #20]	; (800a248 <global_stdio_init.part.0+0x38>)
 800a232:	f7ff ff8b 	bl	800a14c <std>
 800a236:	bd10      	pop	{r4, pc}
 800a238:	20000bfc 	.word	0x20000bfc
 800a23c:	0800a1b9 	.word	0x0800a1b9
 800a240:	20000ac4 	.word	0x20000ac4
 800a244:	20000b2c 	.word	0x20000b2c
 800a248:	20000b94 	.word	0x20000b94

0800a24c <__sfp_lock_acquire>:
 800a24c:	b510      	push	{r4, lr}
 800a24e:	4802      	ldr	r0, [pc, #8]	; (800a258 <__sfp_lock_acquire+0xc>)
 800a250:	f000 f9e2 	bl	800a618 <__retarget_lock_acquire_recursive>
 800a254:	bd10      	pop	{r4, pc}
 800a256:	46c0      	nop			; (mov r8, r8)
 800a258:	20000c06 	.word	0x20000c06

0800a25c <__sfp_lock_release>:
 800a25c:	b510      	push	{r4, lr}
 800a25e:	4802      	ldr	r0, [pc, #8]	; (800a268 <__sfp_lock_release+0xc>)
 800a260:	f000 f9db 	bl	800a61a <__retarget_lock_release_recursive>
 800a264:	bd10      	pop	{r4, pc}
 800a266:	46c0      	nop			; (mov r8, r8)
 800a268:	20000c06 	.word	0x20000c06

0800a26c <__sinit>:
 800a26c:	b510      	push	{r4, lr}
 800a26e:	0004      	movs	r4, r0
 800a270:	f7ff ffec 	bl	800a24c <__sfp_lock_acquire>
 800a274:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a276:	2b00      	cmp	r3, #0
 800a278:	d002      	beq.n	800a280 <__sinit+0x14>
 800a27a:	f7ff ffef 	bl	800a25c <__sfp_lock_release>
 800a27e:	bd10      	pop	{r4, pc}
 800a280:	4b04      	ldr	r3, [pc, #16]	; (800a294 <__sinit+0x28>)
 800a282:	6363      	str	r3, [r4, #52]	; 0x34
 800a284:	4b04      	ldr	r3, [pc, #16]	; (800a298 <__sinit+0x2c>)
 800a286:	681b      	ldr	r3, [r3, #0]
 800a288:	2b00      	cmp	r3, #0
 800a28a:	d1f6      	bne.n	800a27a <__sinit+0xe>
 800a28c:	f7ff ffc0 	bl	800a210 <global_stdio_init.part.0>
 800a290:	e7f3      	b.n	800a27a <__sinit+0xe>
 800a292:	46c0      	nop			; (mov r8, r8)
 800a294:	0800a1d5 	.word	0x0800a1d5
 800a298:	20000bfc 	.word	0x20000bfc

0800a29c <_fwalk_sglue>:
 800a29c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a29e:	0014      	movs	r4, r2
 800a2a0:	2600      	movs	r6, #0
 800a2a2:	9000      	str	r0, [sp, #0]
 800a2a4:	9101      	str	r1, [sp, #4]
 800a2a6:	68a5      	ldr	r5, [r4, #8]
 800a2a8:	6867      	ldr	r7, [r4, #4]
 800a2aa:	3f01      	subs	r7, #1
 800a2ac:	d504      	bpl.n	800a2b8 <_fwalk_sglue+0x1c>
 800a2ae:	6824      	ldr	r4, [r4, #0]
 800a2b0:	2c00      	cmp	r4, #0
 800a2b2:	d1f8      	bne.n	800a2a6 <_fwalk_sglue+0xa>
 800a2b4:	0030      	movs	r0, r6
 800a2b6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a2b8:	89ab      	ldrh	r3, [r5, #12]
 800a2ba:	2b01      	cmp	r3, #1
 800a2bc:	d908      	bls.n	800a2d0 <_fwalk_sglue+0x34>
 800a2be:	220e      	movs	r2, #14
 800a2c0:	5eab      	ldrsh	r3, [r5, r2]
 800a2c2:	3301      	adds	r3, #1
 800a2c4:	d004      	beq.n	800a2d0 <_fwalk_sglue+0x34>
 800a2c6:	0029      	movs	r1, r5
 800a2c8:	9800      	ldr	r0, [sp, #0]
 800a2ca:	9b01      	ldr	r3, [sp, #4]
 800a2cc:	4798      	blx	r3
 800a2ce:	4306      	orrs	r6, r0
 800a2d0:	3568      	adds	r5, #104	; 0x68
 800a2d2:	e7ea      	b.n	800a2aa <_fwalk_sglue+0xe>

0800a2d4 <snprintf>:
 800a2d4:	b40c      	push	{r2, r3}
 800a2d6:	b530      	push	{r4, r5, lr}
 800a2d8:	4b17      	ldr	r3, [pc, #92]	; (800a338 <snprintf+0x64>)
 800a2da:	000c      	movs	r4, r1
 800a2dc:	681d      	ldr	r5, [r3, #0]
 800a2de:	b09d      	sub	sp, #116	; 0x74
 800a2e0:	2900      	cmp	r1, #0
 800a2e2:	da08      	bge.n	800a2f6 <snprintf+0x22>
 800a2e4:	238b      	movs	r3, #139	; 0x8b
 800a2e6:	2001      	movs	r0, #1
 800a2e8:	602b      	str	r3, [r5, #0]
 800a2ea:	4240      	negs	r0, r0
 800a2ec:	b01d      	add	sp, #116	; 0x74
 800a2ee:	bc30      	pop	{r4, r5}
 800a2f0:	bc08      	pop	{r3}
 800a2f2:	b002      	add	sp, #8
 800a2f4:	4718      	bx	r3
 800a2f6:	2382      	movs	r3, #130	; 0x82
 800a2f8:	466a      	mov	r2, sp
 800a2fa:	009b      	lsls	r3, r3, #2
 800a2fc:	8293      	strh	r3, [r2, #20]
 800a2fe:	2300      	movs	r3, #0
 800a300:	9002      	str	r0, [sp, #8]
 800a302:	9006      	str	r0, [sp, #24]
 800a304:	4299      	cmp	r1, r3
 800a306:	d000      	beq.n	800a30a <snprintf+0x36>
 800a308:	1e4b      	subs	r3, r1, #1
 800a30a:	9304      	str	r3, [sp, #16]
 800a30c:	9307      	str	r3, [sp, #28]
 800a30e:	2301      	movs	r3, #1
 800a310:	466a      	mov	r2, sp
 800a312:	425b      	negs	r3, r3
 800a314:	82d3      	strh	r3, [r2, #22]
 800a316:	0028      	movs	r0, r5
 800a318:	ab21      	add	r3, sp, #132	; 0x84
 800a31a:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800a31c:	a902      	add	r1, sp, #8
 800a31e:	9301      	str	r3, [sp, #4]
 800a320:	f001 fa9a 	bl	800b858 <_svfprintf_r>
 800a324:	1c43      	adds	r3, r0, #1
 800a326:	da01      	bge.n	800a32c <snprintf+0x58>
 800a328:	238b      	movs	r3, #139	; 0x8b
 800a32a:	602b      	str	r3, [r5, #0]
 800a32c:	2c00      	cmp	r4, #0
 800a32e:	d0dd      	beq.n	800a2ec <snprintf+0x18>
 800a330:	2200      	movs	r2, #0
 800a332:	9b02      	ldr	r3, [sp, #8]
 800a334:	701a      	strb	r2, [r3, #0]
 800a336:	e7d9      	b.n	800a2ec <snprintf+0x18>
 800a338:	200006b8 	.word	0x200006b8

0800a33c <sprintf>:
 800a33c:	b40e      	push	{r1, r2, r3}
 800a33e:	b500      	push	{lr}
 800a340:	490b      	ldr	r1, [pc, #44]	; (800a370 <sprintf+0x34>)
 800a342:	b09c      	sub	sp, #112	; 0x70
 800a344:	ab1d      	add	r3, sp, #116	; 0x74
 800a346:	9002      	str	r0, [sp, #8]
 800a348:	9006      	str	r0, [sp, #24]
 800a34a:	9107      	str	r1, [sp, #28]
 800a34c:	9104      	str	r1, [sp, #16]
 800a34e:	4809      	ldr	r0, [pc, #36]	; (800a374 <sprintf+0x38>)
 800a350:	4909      	ldr	r1, [pc, #36]	; (800a378 <sprintf+0x3c>)
 800a352:	cb04      	ldmia	r3!, {r2}
 800a354:	9105      	str	r1, [sp, #20]
 800a356:	6800      	ldr	r0, [r0, #0]
 800a358:	a902      	add	r1, sp, #8
 800a35a:	9301      	str	r3, [sp, #4]
 800a35c:	f001 fa7c 	bl	800b858 <_svfprintf_r>
 800a360:	2200      	movs	r2, #0
 800a362:	9b02      	ldr	r3, [sp, #8]
 800a364:	701a      	strb	r2, [r3, #0]
 800a366:	b01c      	add	sp, #112	; 0x70
 800a368:	bc08      	pop	{r3}
 800a36a:	b003      	add	sp, #12
 800a36c:	4718      	bx	r3
 800a36e:	46c0      	nop			; (mov r8, r8)
 800a370:	7fffffff 	.word	0x7fffffff
 800a374:	200006b8 	.word	0x200006b8
 800a378:	ffff0208 	.word	0xffff0208

0800a37c <sscanf>:
 800a37c:	b40e      	push	{r1, r2, r3}
 800a37e:	b530      	push	{r4, r5, lr}
 800a380:	2381      	movs	r3, #129	; 0x81
 800a382:	b09c      	sub	sp, #112	; 0x70
 800a384:	466a      	mov	r2, sp
 800a386:	ac1f      	add	r4, sp, #124	; 0x7c
 800a388:	009b      	lsls	r3, r3, #2
 800a38a:	cc20      	ldmia	r4!, {r5}
 800a38c:	8293      	strh	r3, [r2, #20]
 800a38e:	9002      	str	r0, [sp, #8]
 800a390:	9006      	str	r0, [sp, #24]
 800a392:	f7f5 feb7 	bl	8000104 <strlen>
 800a396:	4b0b      	ldr	r3, [pc, #44]	; (800a3c4 <sscanf+0x48>)
 800a398:	466a      	mov	r2, sp
 800a39a:	930a      	str	r3, [sp, #40]	; 0x28
 800a39c:	2300      	movs	r3, #0
 800a39e:	9003      	str	r0, [sp, #12]
 800a3a0:	9007      	str	r0, [sp, #28]
 800a3a2:	4809      	ldr	r0, [pc, #36]	; (800a3c8 <sscanf+0x4c>)
 800a3a4:	930e      	str	r3, [sp, #56]	; 0x38
 800a3a6:	9313      	str	r3, [sp, #76]	; 0x4c
 800a3a8:	3b01      	subs	r3, #1
 800a3aa:	82d3      	strh	r3, [r2, #22]
 800a3ac:	a902      	add	r1, sp, #8
 800a3ae:	0023      	movs	r3, r4
 800a3b0:	002a      	movs	r2, r5
 800a3b2:	6800      	ldr	r0, [r0, #0]
 800a3b4:	9401      	str	r4, [sp, #4]
 800a3b6:	f002 fc91 	bl	800ccdc <__ssvfscanf_r>
 800a3ba:	b01c      	add	sp, #112	; 0x70
 800a3bc:	bc30      	pop	{r4, r5}
 800a3be:	bc08      	pop	{r3}
 800a3c0:	b003      	add	sp, #12
 800a3c2:	4718      	bx	r3
 800a3c4:	0800a3f5 	.word	0x0800a3f5
 800a3c8:	200006b8 	.word	0x200006b8

0800a3cc <__sread>:
 800a3cc:	b570      	push	{r4, r5, r6, lr}
 800a3ce:	000c      	movs	r4, r1
 800a3d0:	250e      	movs	r5, #14
 800a3d2:	5f49      	ldrsh	r1, [r1, r5]
 800a3d4:	f000 f8ba 	bl	800a54c <_read_r>
 800a3d8:	2800      	cmp	r0, #0
 800a3da:	db03      	blt.n	800a3e4 <__sread+0x18>
 800a3dc:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800a3de:	181b      	adds	r3, r3, r0
 800a3e0:	6523      	str	r3, [r4, #80]	; 0x50
 800a3e2:	bd70      	pop	{r4, r5, r6, pc}
 800a3e4:	89a3      	ldrh	r3, [r4, #12]
 800a3e6:	4a02      	ldr	r2, [pc, #8]	; (800a3f0 <__sread+0x24>)
 800a3e8:	4013      	ands	r3, r2
 800a3ea:	81a3      	strh	r3, [r4, #12]
 800a3ec:	e7f9      	b.n	800a3e2 <__sread+0x16>
 800a3ee:	46c0      	nop			; (mov r8, r8)
 800a3f0:	ffffefff 	.word	0xffffefff

0800a3f4 <__seofread>:
 800a3f4:	2000      	movs	r0, #0
 800a3f6:	4770      	bx	lr

0800a3f8 <__swrite>:
 800a3f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a3fa:	001f      	movs	r7, r3
 800a3fc:	898b      	ldrh	r3, [r1, #12]
 800a3fe:	0005      	movs	r5, r0
 800a400:	000c      	movs	r4, r1
 800a402:	0016      	movs	r6, r2
 800a404:	05db      	lsls	r3, r3, #23
 800a406:	d505      	bpl.n	800a414 <__swrite+0x1c>
 800a408:	230e      	movs	r3, #14
 800a40a:	5ec9      	ldrsh	r1, [r1, r3]
 800a40c:	2200      	movs	r2, #0
 800a40e:	2302      	movs	r3, #2
 800a410:	f000 f888 	bl	800a524 <_lseek_r>
 800a414:	89a3      	ldrh	r3, [r4, #12]
 800a416:	4a05      	ldr	r2, [pc, #20]	; (800a42c <__swrite+0x34>)
 800a418:	0028      	movs	r0, r5
 800a41a:	4013      	ands	r3, r2
 800a41c:	81a3      	strh	r3, [r4, #12]
 800a41e:	0032      	movs	r2, r6
 800a420:	230e      	movs	r3, #14
 800a422:	5ee1      	ldrsh	r1, [r4, r3]
 800a424:	003b      	movs	r3, r7
 800a426:	f000 f8b7 	bl	800a598 <_write_r>
 800a42a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a42c:	ffffefff 	.word	0xffffefff

0800a430 <__sseek>:
 800a430:	b570      	push	{r4, r5, r6, lr}
 800a432:	000c      	movs	r4, r1
 800a434:	250e      	movs	r5, #14
 800a436:	5f49      	ldrsh	r1, [r1, r5]
 800a438:	f000 f874 	bl	800a524 <_lseek_r>
 800a43c:	89a3      	ldrh	r3, [r4, #12]
 800a43e:	1c42      	adds	r2, r0, #1
 800a440:	d103      	bne.n	800a44a <__sseek+0x1a>
 800a442:	4a05      	ldr	r2, [pc, #20]	; (800a458 <__sseek+0x28>)
 800a444:	4013      	ands	r3, r2
 800a446:	81a3      	strh	r3, [r4, #12]
 800a448:	bd70      	pop	{r4, r5, r6, pc}
 800a44a:	2280      	movs	r2, #128	; 0x80
 800a44c:	0152      	lsls	r2, r2, #5
 800a44e:	4313      	orrs	r3, r2
 800a450:	81a3      	strh	r3, [r4, #12]
 800a452:	6520      	str	r0, [r4, #80]	; 0x50
 800a454:	e7f8      	b.n	800a448 <__sseek+0x18>
 800a456:	46c0      	nop			; (mov r8, r8)
 800a458:	ffffefff 	.word	0xffffefff

0800a45c <__sclose>:
 800a45c:	b510      	push	{r4, lr}
 800a45e:	230e      	movs	r3, #14
 800a460:	5ec9      	ldrsh	r1, [r1, r3]
 800a462:	f000 f84d 	bl	800a500 <_close_r>
 800a466:	bd10      	pop	{r4, pc}

0800a468 <memset>:
 800a468:	0003      	movs	r3, r0
 800a46a:	1882      	adds	r2, r0, r2
 800a46c:	4293      	cmp	r3, r2
 800a46e:	d100      	bne.n	800a472 <memset+0xa>
 800a470:	4770      	bx	lr
 800a472:	7019      	strb	r1, [r3, #0]
 800a474:	3301      	adds	r3, #1
 800a476:	e7f9      	b.n	800a46c <memset+0x4>

0800a478 <strncmp>:
 800a478:	b530      	push	{r4, r5, lr}
 800a47a:	0005      	movs	r5, r0
 800a47c:	1e10      	subs	r0, r2, #0
 800a47e:	d00b      	beq.n	800a498 <strncmp+0x20>
 800a480:	2400      	movs	r4, #0
 800a482:	3a01      	subs	r2, #1
 800a484:	5d2b      	ldrb	r3, [r5, r4]
 800a486:	5d08      	ldrb	r0, [r1, r4]
 800a488:	4283      	cmp	r3, r0
 800a48a:	d104      	bne.n	800a496 <strncmp+0x1e>
 800a48c:	42a2      	cmp	r2, r4
 800a48e:	d002      	beq.n	800a496 <strncmp+0x1e>
 800a490:	3401      	adds	r4, #1
 800a492:	2b00      	cmp	r3, #0
 800a494:	d1f6      	bne.n	800a484 <strncmp+0xc>
 800a496:	1a18      	subs	r0, r3, r0
 800a498:	bd30      	pop	{r4, r5, pc}

0800a49a <strncpy>:
 800a49a:	0003      	movs	r3, r0
 800a49c:	b530      	push	{r4, r5, lr}
 800a49e:	001d      	movs	r5, r3
 800a4a0:	2a00      	cmp	r2, #0
 800a4a2:	d006      	beq.n	800a4b2 <strncpy+0x18>
 800a4a4:	780c      	ldrb	r4, [r1, #0]
 800a4a6:	3a01      	subs	r2, #1
 800a4a8:	3301      	adds	r3, #1
 800a4aa:	702c      	strb	r4, [r5, #0]
 800a4ac:	3101      	adds	r1, #1
 800a4ae:	2c00      	cmp	r4, #0
 800a4b0:	d1f5      	bne.n	800a49e <strncpy+0x4>
 800a4b2:	2100      	movs	r1, #0
 800a4b4:	189a      	adds	r2, r3, r2
 800a4b6:	4293      	cmp	r3, r2
 800a4b8:	d100      	bne.n	800a4bc <strncpy+0x22>
 800a4ba:	bd30      	pop	{r4, r5, pc}
 800a4bc:	7019      	strb	r1, [r3, #0]
 800a4be:	3301      	adds	r3, #1
 800a4c0:	e7f9      	b.n	800a4b6 <strncpy+0x1c>

0800a4c2 <strstr>:
 800a4c2:	780a      	ldrb	r2, [r1, #0]
 800a4c4:	b530      	push	{r4, r5, lr}
 800a4c6:	2a00      	cmp	r2, #0
 800a4c8:	d10c      	bne.n	800a4e4 <strstr+0x22>
 800a4ca:	bd30      	pop	{r4, r5, pc}
 800a4cc:	429a      	cmp	r2, r3
 800a4ce:	d108      	bne.n	800a4e2 <strstr+0x20>
 800a4d0:	2301      	movs	r3, #1
 800a4d2:	5ccc      	ldrb	r4, [r1, r3]
 800a4d4:	2c00      	cmp	r4, #0
 800a4d6:	d0f8      	beq.n	800a4ca <strstr+0x8>
 800a4d8:	5cc5      	ldrb	r5, [r0, r3]
 800a4da:	42a5      	cmp	r5, r4
 800a4dc:	d101      	bne.n	800a4e2 <strstr+0x20>
 800a4de:	3301      	adds	r3, #1
 800a4e0:	e7f7      	b.n	800a4d2 <strstr+0x10>
 800a4e2:	3001      	adds	r0, #1
 800a4e4:	7803      	ldrb	r3, [r0, #0]
 800a4e6:	2b00      	cmp	r3, #0
 800a4e8:	d1f0      	bne.n	800a4cc <strstr+0xa>
 800a4ea:	0018      	movs	r0, r3
 800a4ec:	e7ed      	b.n	800a4ca <strstr+0x8>
	...

0800a4f0 <__locale_mb_cur_max>:
 800a4f0:	2294      	movs	r2, #148	; 0x94
 800a4f2:	4b02      	ldr	r3, [pc, #8]	; (800a4fc <__locale_mb_cur_max+0xc>)
 800a4f4:	0052      	lsls	r2, r2, #1
 800a4f6:	5c98      	ldrb	r0, [r3, r2]
 800a4f8:	4770      	bx	lr
 800a4fa:	46c0      	nop			; (mov r8, r8)
 800a4fc:	2000042c 	.word	0x2000042c

0800a500 <_close_r>:
 800a500:	2300      	movs	r3, #0
 800a502:	b570      	push	{r4, r5, r6, lr}
 800a504:	4d06      	ldr	r5, [pc, #24]	; (800a520 <_close_r+0x20>)
 800a506:	0004      	movs	r4, r0
 800a508:	0008      	movs	r0, r1
 800a50a:	602b      	str	r3, [r5, #0]
 800a50c:	f7f9 f8fd 	bl	800370a <_close>
 800a510:	1c43      	adds	r3, r0, #1
 800a512:	d103      	bne.n	800a51c <_close_r+0x1c>
 800a514:	682b      	ldr	r3, [r5, #0]
 800a516:	2b00      	cmp	r3, #0
 800a518:	d000      	beq.n	800a51c <_close_r+0x1c>
 800a51a:	6023      	str	r3, [r4, #0]
 800a51c:	bd70      	pop	{r4, r5, r6, pc}
 800a51e:	46c0      	nop			; (mov r8, r8)
 800a520:	20000c00 	.word	0x20000c00

0800a524 <_lseek_r>:
 800a524:	b570      	push	{r4, r5, r6, lr}
 800a526:	0004      	movs	r4, r0
 800a528:	0008      	movs	r0, r1
 800a52a:	0011      	movs	r1, r2
 800a52c:	001a      	movs	r2, r3
 800a52e:	2300      	movs	r3, #0
 800a530:	4d05      	ldr	r5, [pc, #20]	; (800a548 <_lseek_r+0x24>)
 800a532:	602b      	str	r3, [r5, #0]
 800a534:	f7f9 f90a 	bl	800374c <_lseek>
 800a538:	1c43      	adds	r3, r0, #1
 800a53a:	d103      	bne.n	800a544 <_lseek_r+0x20>
 800a53c:	682b      	ldr	r3, [r5, #0]
 800a53e:	2b00      	cmp	r3, #0
 800a540:	d000      	beq.n	800a544 <_lseek_r+0x20>
 800a542:	6023      	str	r3, [r4, #0]
 800a544:	bd70      	pop	{r4, r5, r6, pc}
 800a546:	46c0      	nop			; (mov r8, r8)
 800a548:	20000c00 	.word	0x20000c00

0800a54c <_read_r>:
 800a54c:	b570      	push	{r4, r5, r6, lr}
 800a54e:	0004      	movs	r4, r0
 800a550:	0008      	movs	r0, r1
 800a552:	0011      	movs	r1, r2
 800a554:	001a      	movs	r2, r3
 800a556:	2300      	movs	r3, #0
 800a558:	4d05      	ldr	r5, [pc, #20]	; (800a570 <_read_r+0x24>)
 800a55a:	602b      	str	r3, [r5, #0]
 800a55c:	f7f9 f89c 	bl	8003698 <_read>
 800a560:	1c43      	adds	r3, r0, #1
 800a562:	d103      	bne.n	800a56c <_read_r+0x20>
 800a564:	682b      	ldr	r3, [r5, #0]
 800a566:	2b00      	cmp	r3, #0
 800a568:	d000      	beq.n	800a56c <_read_r+0x20>
 800a56a:	6023      	str	r3, [r4, #0]
 800a56c:	bd70      	pop	{r4, r5, r6, pc}
 800a56e:	46c0      	nop			; (mov r8, r8)
 800a570:	20000c00 	.word	0x20000c00

0800a574 <_sbrk_r>:
 800a574:	2300      	movs	r3, #0
 800a576:	b570      	push	{r4, r5, r6, lr}
 800a578:	4d06      	ldr	r5, [pc, #24]	; (800a594 <_sbrk_r+0x20>)
 800a57a:	0004      	movs	r4, r0
 800a57c:	0008      	movs	r0, r1
 800a57e:	602b      	str	r3, [r5, #0]
 800a580:	f7f9 f8f0 	bl	8003764 <_sbrk>
 800a584:	1c43      	adds	r3, r0, #1
 800a586:	d103      	bne.n	800a590 <_sbrk_r+0x1c>
 800a588:	682b      	ldr	r3, [r5, #0]
 800a58a:	2b00      	cmp	r3, #0
 800a58c:	d000      	beq.n	800a590 <_sbrk_r+0x1c>
 800a58e:	6023      	str	r3, [r4, #0]
 800a590:	bd70      	pop	{r4, r5, r6, pc}
 800a592:	46c0      	nop			; (mov r8, r8)
 800a594:	20000c00 	.word	0x20000c00

0800a598 <_write_r>:
 800a598:	b570      	push	{r4, r5, r6, lr}
 800a59a:	0004      	movs	r4, r0
 800a59c:	0008      	movs	r0, r1
 800a59e:	0011      	movs	r1, r2
 800a5a0:	001a      	movs	r2, r3
 800a5a2:	2300      	movs	r3, #0
 800a5a4:	4d05      	ldr	r5, [pc, #20]	; (800a5bc <_write_r+0x24>)
 800a5a6:	602b      	str	r3, [r5, #0]
 800a5a8:	f7f9 f893 	bl	80036d2 <_write>
 800a5ac:	1c43      	adds	r3, r0, #1
 800a5ae:	d103      	bne.n	800a5b8 <_write_r+0x20>
 800a5b0:	682b      	ldr	r3, [r5, #0]
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	d000      	beq.n	800a5b8 <_write_r+0x20>
 800a5b6:	6023      	str	r3, [r4, #0]
 800a5b8:	bd70      	pop	{r4, r5, r6, pc}
 800a5ba:	46c0      	nop			; (mov r8, r8)
 800a5bc:	20000c00 	.word	0x20000c00

0800a5c0 <__errno>:
 800a5c0:	4b01      	ldr	r3, [pc, #4]	; (800a5c8 <__errno+0x8>)
 800a5c2:	6818      	ldr	r0, [r3, #0]
 800a5c4:	4770      	bx	lr
 800a5c6:	46c0      	nop			; (mov r8, r8)
 800a5c8:	200006b8 	.word	0x200006b8

0800a5cc <__libc_init_array>:
 800a5cc:	b570      	push	{r4, r5, r6, lr}
 800a5ce:	2600      	movs	r6, #0
 800a5d0:	4c0c      	ldr	r4, [pc, #48]	; (800a604 <__libc_init_array+0x38>)
 800a5d2:	4d0d      	ldr	r5, [pc, #52]	; (800a608 <__libc_init_array+0x3c>)
 800a5d4:	1b64      	subs	r4, r4, r5
 800a5d6:	10a4      	asrs	r4, r4, #2
 800a5d8:	42a6      	cmp	r6, r4
 800a5da:	d109      	bne.n	800a5f0 <__libc_init_array+0x24>
 800a5dc:	2600      	movs	r6, #0
 800a5de:	f006 fc79 	bl	8010ed4 <_init>
 800a5e2:	4c0a      	ldr	r4, [pc, #40]	; (800a60c <__libc_init_array+0x40>)
 800a5e4:	4d0a      	ldr	r5, [pc, #40]	; (800a610 <__libc_init_array+0x44>)
 800a5e6:	1b64      	subs	r4, r4, r5
 800a5e8:	10a4      	asrs	r4, r4, #2
 800a5ea:	42a6      	cmp	r6, r4
 800a5ec:	d105      	bne.n	800a5fa <__libc_init_array+0x2e>
 800a5ee:	bd70      	pop	{r4, r5, r6, pc}
 800a5f0:	00b3      	lsls	r3, r6, #2
 800a5f2:	58eb      	ldr	r3, [r5, r3]
 800a5f4:	4798      	blx	r3
 800a5f6:	3601      	adds	r6, #1
 800a5f8:	e7ee      	b.n	800a5d8 <__libc_init_array+0xc>
 800a5fa:	00b3      	lsls	r3, r6, #2
 800a5fc:	58eb      	ldr	r3, [r5, r3]
 800a5fe:	4798      	blx	r3
 800a600:	3601      	adds	r6, #1
 800a602:	e7f2      	b.n	800a5ea <__libc_init_array+0x1e>
 800a604:	08012e6c 	.word	0x08012e6c
 800a608:	08012e6c 	.word	0x08012e6c
 800a60c:	08012e74 	.word	0x08012e74
 800a610:	08012e6c 	.word	0x08012e6c

0800a614 <__retarget_lock_init_recursive>:
 800a614:	4770      	bx	lr

0800a616 <__retarget_lock_close_recursive>:
 800a616:	4770      	bx	lr

0800a618 <__retarget_lock_acquire_recursive>:
 800a618:	4770      	bx	lr

0800a61a <__retarget_lock_release_recursive>:
 800a61a:	4770      	bx	lr

0800a61c <sysconf>:
 800a61c:	2380      	movs	r3, #128	; 0x80
 800a61e:	b510      	push	{r4, lr}
 800a620:	2808      	cmp	r0, #8
 800a622:	d004      	beq.n	800a62e <sysconf+0x12>
 800a624:	f7ff ffcc 	bl	800a5c0 <__errno>
 800a628:	2316      	movs	r3, #22
 800a62a:	6003      	str	r3, [r0, #0]
 800a62c:	3b17      	subs	r3, #23
 800a62e:	0018      	movs	r0, r3
 800a630:	bd10      	pop	{r4, pc}

0800a632 <memcpy>:
 800a632:	2300      	movs	r3, #0
 800a634:	b510      	push	{r4, lr}
 800a636:	429a      	cmp	r2, r3
 800a638:	d100      	bne.n	800a63c <memcpy+0xa>
 800a63a:	bd10      	pop	{r4, pc}
 800a63c:	5ccc      	ldrb	r4, [r1, r3]
 800a63e:	54c4      	strb	r4, [r0, r3]
 800a640:	3301      	adds	r3, #1
 800a642:	e7f8      	b.n	800a636 <memcpy+0x4>

0800a644 <nan>:
 800a644:	2000      	movs	r0, #0
 800a646:	4901      	ldr	r1, [pc, #4]	; (800a64c <nan+0x8>)
 800a648:	4770      	bx	lr
 800a64a:	46c0      	nop			; (mov r8, r8)
 800a64c:	7ff80000 	.word	0x7ff80000

0800a650 <nanf>:
 800a650:	4800      	ldr	r0, [pc, #0]	; (800a654 <nanf+0x4>)
 800a652:	4770      	bx	lr
 800a654:	7fc00000 	.word	0x7fc00000

0800a658 <register_fini>:
 800a658:	4b03      	ldr	r3, [pc, #12]	; (800a668 <register_fini+0x10>)
 800a65a:	b510      	push	{r4, lr}
 800a65c:	2b00      	cmp	r3, #0
 800a65e:	d002      	beq.n	800a666 <register_fini+0xe>
 800a660:	4802      	ldr	r0, [pc, #8]	; (800a66c <register_fini+0x14>)
 800a662:	f000 f805 	bl	800a670 <atexit>
 800a666:	bd10      	pop	{r4, pc}
 800a668:	00000000 	.word	0x00000000
 800a66c:	0800e3cd 	.word	0x0800e3cd

0800a670 <atexit>:
 800a670:	2300      	movs	r3, #0
 800a672:	b510      	push	{r4, lr}
 800a674:	0001      	movs	r1, r0
 800a676:	001a      	movs	r2, r3
 800a678:	0018      	movs	r0, r3
 800a67a:	f003 fef9 	bl	800e470 <__register_exitproc>
 800a67e:	bd10      	pop	{r4, pc}

0800a680 <_malloc_trim_r>:
 800a680:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a682:	0004      	movs	r4, r0
 800a684:	2008      	movs	r0, #8
 800a686:	000d      	movs	r5, r1
 800a688:	f7ff ffc8 	bl	800a61c <sysconf>
 800a68c:	0006      	movs	r6, r0
 800a68e:	0020      	movs	r0, r4
 800a690:	f7fe fe8c 	bl	80093ac <__malloc_lock>
 800a694:	2203      	movs	r2, #3
 800a696:	4f21      	ldr	r7, [pc, #132]	; (800a71c <_malloc_trim_r+0x9c>)
 800a698:	0031      	movs	r1, r6
 800a69a:	68bb      	ldr	r3, [r7, #8]
 800a69c:	685b      	ldr	r3, [r3, #4]
 800a69e:	4393      	bics	r3, r2
 800a6a0:	1b58      	subs	r0, r3, r5
 800a6a2:	3811      	subs	r0, #17
 800a6a4:	1980      	adds	r0, r0, r6
 800a6a6:	9301      	str	r3, [sp, #4]
 800a6a8:	f7f5 fd48 	bl	800013c <__udivsi3>
 800a6ac:	1e45      	subs	r5, r0, #1
 800a6ae:	4375      	muls	r5, r6
 800a6b0:	42ae      	cmp	r6, r5
 800a6b2:	dd04      	ble.n	800a6be <_malloc_trim_r+0x3e>
 800a6b4:	0020      	movs	r0, r4
 800a6b6:	f7fe fe81 	bl	80093bc <__malloc_unlock>
 800a6ba:	2000      	movs	r0, #0
 800a6bc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a6be:	2100      	movs	r1, #0
 800a6c0:	0020      	movs	r0, r4
 800a6c2:	f7ff ff57 	bl	800a574 <_sbrk_r>
 800a6c6:	68bb      	ldr	r3, [r7, #8]
 800a6c8:	9a01      	ldr	r2, [sp, #4]
 800a6ca:	189b      	adds	r3, r3, r2
 800a6cc:	4298      	cmp	r0, r3
 800a6ce:	d1f1      	bne.n	800a6b4 <_malloc_trim_r+0x34>
 800a6d0:	0020      	movs	r0, r4
 800a6d2:	4269      	negs	r1, r5
 800a6d4:	f7ff ff4e 	bl	800a574 <_sbrk_r>
 800a6d8:	3001      	adds	r0, #1
 800a6da:	d110      	bne.n	800a6fe <_malloc_trim_r+0x7e>
 800a6dc:	2100      	movs	r1, #0
 800a6de:	0020      	movs	r0, r4
 800a6e0:	f7ff ff48 	bl	800a574 <_sbrk_r>
 800a6e4:	68ba      	ldr	r2, [r7, #8]
 800a6e6:	1a81      	subs	r1, r0, r2
 800a6e8:	290f      	cmp	r1, #15
 800a6ea:	dde3      	ble.n	800a6b4 <_malloc_trim_r+0x34>
 800a6ec:	4d0c      	ldr	r5, [pc, #48]	; (800a720 <_malloc_trim_r+0xa0>)
 800a6ee:	4b0d      	ldr	r3, [pc, #52]	; (800a724 <_malloc_trim_r+0xa4>)
 800a6f0:	682d      	ldr	r5, [r5, #0]
 800a6f2:	1b40      	subs	r0, r0, r5
 800a6f4:	6018      	str	r0, [r3, #0]
 800a6f6:	2301      	movs	r3, #1
 800a6f8:	430b      	orrs	r3, r1
 800a6fa:	6053      	str	r3, [r2, #4]
 800a6fc:	e7da      	b.n	800a6b4 <_malloc_trim_r+0x34>
 800a6fe:	2601      	movs	r6, #1
 800a700:	9b01      	ldr	r3, [sp, #4]
 800a702:	68ba      	ldr	r2, [r7, #8]
 800a704:	1b5b      	subs	r3, r3, r5
 800a706:	4333      	orrs	r3, r6
 800a708:	6053      	str	r3, [r2, #4]
 800a70a:	4a06      	ldr	r2, [pc, #24]	; (800a724 <_malloc_trim_r+0xa4>)
 800a70c:	0020      	movs	r0, r4
 800a70e:	6813      	ldr	r3, [r2, #0]
 800a710:	1b5b      	subs	r3, r3, r5
 800a712:	6013      	str	r3, [r2, #0]
 800a714:	f7fe fe52 	bl	80093bc <__malloc_unlock>
 800a718:	0030      	movs	r0, r6
 800a71a:	e7cf      	b.n	800a6bc <_malloc_trim_r+0x3c>
 800a71c:	20000010 	.word	0x20000010
 800a720:	20000418 	.word	0x20000418
 800a724:	20000a90 	.word	0x20000a90

0800a728 <_free_r>:
 800a728:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a72a:	1e0d      	subs	r5, r1, #0
 800a72c:	9001      	str	r0, [sp, #4]
 800a72e:	d02d      	beq.n	800a78c <_free_r+0x64>
 800a730:	f7fe fe3c 	bl	80093ac <__malloc_lock>
 800a734:	2301      	movs	r3, #1
 800a736:	0029      	movs	r1, r5
 800a738:	469c      	mov	ip, r3
 800a73a:	3908      	subs	r1, #8
 800a73c:	684f      	ldr	r7, [r1, #4]
 800a73e:	4662      	mov	r2, ip
 800a740:	003b      	movs	r3, r7
 800a742:	4664      	mov	r4, ip
 800a744:	4393      	bics	r3, r2
 800a746:	18c8      	adds	r0, r1, r3
 800a748:	6845      	ldr	r5, [r0, #4]
 800a74a:	3202      	adds	r2, #2
 800a74c:	4395      	bics	r5, r2
 800a74e:	4a4a      	ldr	r2, [pc, #296]	; (800a878 <_free_r+0x150>)
 800a750:	4027      	ands	r7, r4
 800a752:	6896      	ldr	r6, [r2, #8]
 800a754:	4286      	cmp	r6, r0
 800a756:	d11a      	bne.n	800a78e <_free_r+0x66>
 800a758:	195b      	adds	r3, r3, r5
 800a75a:	2f00      	cmp	r7, #0
 800a75c:	d106      	bne.n	800a76c <_free_r+0x44>
 800a75e:	6808      	ldr	r0, [r1, #0]
 800a760:	1a09      	subs	r1, r1, r0
 800a762:	688d      	ldr	r5, [r1, #8]
 800a764:	181b      	adds	r3, r3, r0
 800a766:	68c8      	ldr	r0, [r1, #12]
 800a768:	60e8      	str	r0, [r5, #12]
 800a76a:	6085      	str	r5, [r0, #8]
 800a76c:	2001      	movs	r0, #1
 800a76e:	4318      	orrs	r0, r3
 800a770:	6048      	str	r0, [r1, #4]
 800a772:	6091      	str	r1, [r2, #8]
 800a774:	4a41      	ldr	r2, [pc, #260]	; (800a87c <_free_r+0x154>)
 800a776:	6812      	ldr	r2, [r2, #0]
 800a778:	429a      	cmp	r2, r3
 800a77a:	d804      	bhi.n	800a786 <_free_r+0x5e>
 800a77c:	4b40      	ldr	r3, [pc, #256]	; (800a880 <_free_r+0x158>)
 800a77e:	9801      	ldr	r0, [sp, #4]
 800a780:	6819      	ldr	r1, [r3, #0]
 800a782:	f7ff ff7d 	bl	800a680 <_malloc_trim_r>
 800a786:	9801      	ldr	r0, [sp, #4]
 800a788:	f7fe fe18 	bl	80093bc <__malloc_unlock>
 800a78c:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800a78e:	2600      	movs	r6, #0
 800a790:	6045      	str	r5, [r0, #4]
 800a792:	42b7      	cmp	r7, r6
 800a794:	d109      	bne.n	800a7aa <_free_r+0x82>
 800a796:	680f      	ldr	r7, [r1, #0]
 800a798:	4c3a      	ldr	r4, [pc, #232]	; (800a884 <_free_r+0x15c>)
 800a79a:	1bc9      	subs	r1, r1, r7
 800a79c:	19db      	adds	r3, r3, r7
 800a79e:	688f      	ldr	r7, [r1, #8]
 800a7a0:	42a7      	cmp	r7, r4
 800a7a2:	d02c      	beq.n	800a7fe <_free_r+0xd6>
 800a7a4:	68cc      	ldr	r4, [r1, #12]
 800a7a6:	60fc      	str	r4, [r7, #12]
 800a7a8:	60a7      	str	r7, [r4, #8]
 800a7aa:	1947      	adds	r7, r0, r5
 800a7ac:	687c      	ldr	r4, [r7, #4]
 800a7ae:	2701      	movs	r7, #1
 800a7b0:	423c      	tst	r4, r7
 800a7b2:	d10b      	bne.n	800a7cc <_free_r+0xa4>
 800a7b4:	195b      	adds	r3, r3, r5
 800a7b6:	6885      	ldr	r5, [r0, #8]
 800a7b8:	2e00      	cmp	r6, #0
 800a7ba:	d122      	bne.n	800a802 <_free_r+0xda>
 800a7bc:	4c31      	ldr	r4, [pc, #196]	; (800a884 <_free_r+0x15c>)
 800a7be:	42a5      	cmp	r5, r4
 800a7c0:	d11f      	bne.n	800a802 <_free_r+0xda>
 800a7c2:	003e      	movs	r6, r7
 800a7c4:	6151      	str	r1, [r2, #20]
 800a7c6:	6111      	str	r1, [r2, #16]
 800a7c8:	60cd      	str	r5, [r1, #12]
 800a7ca:	608d      	str	r5, [r1, #8]
 800a7cc:	2501      	movs	r5, #1
 800a7ce:	0028      	movs	r0, r5
 800a7d0:	4318      	orrs	r0, r3
 800a7d2:	6048      	str	r0, [r1, #4]
 800a7d4:	50cb      	str	r3, [r1, r3]
 800a7d6:	2e00      	cmp	r6, #0
 800a7d8:	d1d5      	bne.n	800a786 <_free_r+0x5e>
 800a7da:	2080      	movs	r0, #128	; 0x80
 800a7dc:	0080      	lsls	r0, r0, #2
 800a7de:	4283      	cmp	r3, r0
 800a7e0:	d213      	bcs.n	800a80a <_free_r+0xe2>
 800a7e2:	08d8      	lsrs	r0, r3, #3
 800a7e4:	095b      	lsrs	r3, r3, #5
 800a7e6:	409d      	lsls	r5, r3
 800a7e8:	6853      	ldr	r3, [r2, #4]
 800a7ea:	431d      	orrs	r5, r3
 800a7ec:	00c3      	lsls	r3, r0, #3
 800a7ee:	189b      	adds	r3, r3, r2
 800a7f0:	6055      	str	r5, [r2, #4]
 800a7f2:	689a      	ldr	r2, [r3, #8]
 800a7f4:	60cb      	str	r3, [r1, #12]
 800a7f6:	608a      	str	r2, [r1, #8]
 800a7f8:	6099      	str	r1, [r3, #8]
 800a7fa:	60d1      	str	r1, [r2, #12]
 800a7fc:	e7c3      	b.n	800a786 <_free_r+0x5e>
 800a7fe:	4666      	mov	r6, ip
 800a800:	e7d3      	b.n	800a7aa <_free_r+0x82>
 800a802:	68c0      	ldr	r0, [r0, #12]
 800a804:	60e8      	str	r0, [r5, #12]
 800a806:	6085      	str	r5, [r0, #8]
 800a808:	e7e0      	b.n	800a7cc <_free_r+0xa4>
 800a80a:	0a5d      	lsrs	r5, r3, #9
 800a80c:	2d04      	cmp	r5, #4
 800a80e:	d812      	bhi.n	800a836 <_free_r+0x10e>
 800a810:	0998      	lsrs	r0, r3, #6
 800a812:	3038      	adds	r0, #56	; 0x38
 800a814:	00c6      	lsls	r6, r0, #3
 800a816:	18b6      	adds	r6, r6, r2
 800a818:	68b5      	ldr	r5, [r6, #8]
 800a81a:	2703      	movs	r7, #3
 800a81c:	42ae      	cmp	r6, r5
 800a81e:	d125      	bne.n	800a86c <_free_r+0x144>
 800a820:	2301      	movs	r3, #1
 800a822:	1080      	asrs	r0, r0, #2
 800a824:	4083      	lsls	r3, r0
 800a826:	6850      	ldr	r0, [r2, #4]
 800a828:	4303      	orrs	r3, r0
 800a82a:	6053      	str	r3, [r2, #4]
 800a82c:	60ce      	str	r6, [r1, #12]
 800a82e:	608d      	str	r5, [r1, #8]
 800a830:	60b1      	str	r1, [r6, #8]
 800a832:	60e9      	str	r1, [r5, #12]
 800a834:	e7a7      	b.n	800a786 <_free_r+0x5e>
 800a836:	2d14      	cmp	r5, #20
 800a838:	d802      	bhi.n	800a840 <_free_r+0x118>
 800a83a:	0028      	movs	r0, r5
 800a83c:	305b      	adds	r0, #91	; 0x5b
 800a83e:	e7e9      	b.n	800a814 <_free_r+0xec>
 800a840:	2d54      	cmp	r5, #84	; 0x54
 800a842:	d802      	bhi.n	800a84a <_free_r+0x122>
 800a844:	0b18      	lsrs	r0, r3, #12
 800a846:	306e      	adds	r0, #110	; 0x6e
 800a848:	e7e4      	b.n	800a814 <_free_r+0xec>
 800a84a:	20aa      	movs	r0, #170	; 0xaa
 800a84c:	0040      	lsls	r0, r0, #1
 800a84e:	4285      	cmp	r5, r0
 800a850:	d802      	bhi.n	800a858 <_free_r+0x130>
 800a852:	0bd8      	lsrs	r0, r3, #15
 800a854:	3077      	adds	r0, #119	; 0x77
 800a856:	e7dd      	b.n	800a814 <_free_r+0xec>
 800a858:	4e0b      	ldr	r6, [pc, #44]	; (800a888 <_free_r+0x160>)
 800a85a:	207e      	movs	r0, #126	; 0x7e
 800a85c:	42b5      	cmp	r5, r6
 800a85e:	d8d9      	bhi.n	800a814 <_free_r+0xec>
 800a860:	0c98      	lsrs	r0, r3, #18
 800a862:	307c      	adds	r0, #124	; 0x7c
 800a864:	e7d6      	b.n	800a814 <_free_r+0xec>
 800a866:	68ad      	ldr	r5, [r5, #8]
 800a868:	42ae      	cmp	r6, r5
 800a86a:	d003      	beq.n	800a874 <_free_r+0x14c>
 800a86c:	686a      	ldr	r2, [r5, #4]
 800a86e:	43ba      	bics	r2, r7
 800a870:	429a      	cmp	r2, r3
 800a872:	d8f8      	bhi.n	800a866 <_free_r+0x13e>
 800a874:	68ee      	ldr	r6, [r5, #12]
 800a876:	e7d9      	b.n	800a82c <_free_r+0x104>
 800a878:	20000010 	.word	0x20000010
 800a87c:	2000041c 	.word	0x2000041c
 800a880:	20000ac0 	.word	0x20000ac0
 800a884:	20000018 	.word	0x20000018
 800a888:	00000554 	.word	0x00000554

0800a88c <rshift>:
 800a88c:	0002      	movs	r2, r0
 800a88e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a890:	6904      	ldr	r4, [r0, #16]
 800a892:	114b      	asrs	r3, r1, #5
 800a894:	b085      	sub	sp, #20
 800a896:	3214      	adds	r2, #20
 800a898:	9302      	str	r3, [sp, #8]
 800a89a:	114d      	asrs	r5, r1, #5
 800a89c:	0013      	movs	r3, r2
 800a89e:	42ac      	cmp	r4, r5
 800a8a0:	dd32      	ble.n	800a908 <rshift+0x7c>
 800a8a2:	261f      	movs	r6, #31
 800a8a4:	000f      	movs	r7, r1
 800a8a6:	114b      	asrs	r3, r1, #5
 800a8a8:	009b      	lsls	r3, r3, #2
 800a8aa:	00a5      	lsls	r5, r4, #2
 800a8ac:	18d3      	adds	r3, r2, r3
 800a8ae:	4037      	ands	r7, r6
 800a8b0:	1955      	adds	r5, r2, r5
 800a8b2:	9300      	str	r3, [sp, #0]
 800a8b4:	9701      	str	r7, [sp, #4]
 800a8b6:	4231      	tst	r1, r6
 800a8b8:	d10d      	bne.n	800a8d6 <rshift+0x4a>
 800a8ba:	0016      	movs	r6, r2
 800a8bc:	0019      	movs	r1, r3
 800a8be:	428d      	cmp	r5, r1
 800a8c0:	d836      	bhi.n	800a930 <rshift+0xa4>
 800a8c2:	9900      	ldr	r1, [sp, #0]
 800a8c4:	2300      	movs	r3, #0
 800a8c6:	3903      	subs	r1, #3
 800a8c8:	428d      	cmp	r5, r1
 800a8ca:	d302      	bcc.n	800a8d2 <rshift+0x46>
 800a8cc:	9b02      	ldr	r3, [sp, #8]
 800a8ce:	1ae4      	subs	r4, r4, r3
 800a8d0:	00a3      	lsls	r3, r4, #2
 800a8d2:	18d3      	adds	r3, r2, r3
 800a8d4:	e018      	b.n	800a908 <rshift+0x7c>
 800a8d6:	2120      	movs	r1, #32
 800a8d8:	9e01      	ldr	r6, [sp, #4]
 800a8da:	9f01      	ldr	r7, [sp, #4]
 800a8dc:	1b89      	subs	r1, r1, r6
 800a8de:	9e00      	ldr	r6, [sp, #0]
 800a8e0:	9103      	str	r1, [sp, #12]
 800a8e2:	ce02      	ldmia	r6!, {r1}
 800a8e4:	4694      	mov	ip, r2
 800a8e6:	40f9      	lsrs	r1, r7
 800a8e8:	42b5      	cmp	r5, r6
 800a8ea:	d816      	bhi.n	800a91a <rshift+0x8e>
 800a8ec:	9e00      	ldr	r6, [sp, #0]
 800a8ee:	2300      	movs	r3, #0
 800a8f0:	3601      	adds	r6, #1
 800a8f2:	42b5      	cmp	r5, r6
 800a8f4:	d303      	bcc.n	800a8fe <rshift+0x72>
 800a8f6:	9b02      	ldr	r3, [sp, #8]
 800a8f8:	1ae3      	subs	r3, r4, r3
 800a8fa:	009b      	lsls	r3, r3, #2
 800a8fc:	3b04      	subs	r3, #4
 800a8fe:	18d3      	adds	r3, r2, r3
 800a900:	6019      	str	r1, [r3, #0]
 800a902:	2900      	cmp	r1, #0
 800a904:	d000      	beq.n	800a908 <rshift+0x7c>
 800a906:	3304      	adds	r3, #4
 800a908:	1a99      	subs	r1, r3, r2
 800a90a:	1089      	asrs	r1, r1, #2
 800a90c:	6101      	str	r1, [r0, #16]
 800a90e:	4293      	cmp	r3, r2
 800a910:	d101      	bne.n	800a916 <rshift+0x8a>
 800a912:	2300      	movs	r3, #0
 800a914:	6143      	str	r3, [r0, #20]
 800a916:	b005      	add	sp, #20
 800a918:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a91a:	6837      	ldr	r7, [r6, #0]
 800a91c:	9b03      	ldr	r3, [sp, #12]
 800a91e:	409f      	lsls	r7, r3
 800a920:	430f      	orrs	r7, r1
 800a922:	4661      	mov	r1, ip
 800a924:	c180      	stmia	r1!, {r7}
 800a926:	468c      	mov	ip, r1
 800a928:	9b01      	ldr	r3, [sp, #4]
 800a92a:	ce02      	ldmia	r6!, {r1}
 800a92c:	40d9      	lsrs	r1, r3
 800a92e:	e7db      	b.n	800a8e8 <rshift+0x5c>
 800a930:	c980      	ldmia	r1!, {r7}
 800a932:	c680      	stmia	r6!, {r7}
 800a934:	e7c3      	b.n	800a8be <rshift+0x32>

0800a936 <__hexdig_fun>:
 800a936:	0002      	movs	r2, r0
 800a938:	3a30      	subs	r2, #48	; 0x30
 800a93a:	0003      	movs	r3, r0
 800a93c:	2a09      	cmp	r2, #9
 800a93e:	d802      	bhi.n	800a946 <__hexdig_fun+0x10>
 800a940:	3b20      	subs	r3, #32
 800a942:	b2d8      	uxtb	r0, r3
 800a944:	4770      	bx	lr
 800a946:	0002      	movs	r2, r0
 800a948:	3a61      	subs	r2, #97	; 0x61
 800a94a:	2a05      	cmp	r2, #5
 800a94c:	d801      	bhi.n	800a952 <__hexdig_fun+0x1c>
 800a94e:	3b47      	subs	r3, #71	; 0x47
 800a950:	e7f7      	b.n	800a942 <__hexdig_fun+0xc>
 800a952:	001a      	movs	r2, r3
 800a954:	3a41      	subs	r2, #65	; 0x41
 800a956:	2000      	movs	r0, #0
 800a958:	2a05      	cmp	r2, #5
 800a95a:	d8f3      	bhi.n	800a944 <__hexdig_fun+0xe>
 800a95c:	3b27      	subs	r3, #39	; 0x27
 800a95e:	e7f0      	b.n	800a942 <__hexdig_fun+0xc>

0800a960 <__gethex>:
 800a960:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a962:	b089      	sub	sp, #36	; 0x24
 800a964:	9307      	str	r3, [sp, #28]
 800a966:	2302      	movs	r3, #2
 800a968:	9201      	str	r2, [sp, #4]
 800a96a:	680a      	ldr	r2, [r1, #0]
 800a96c:	425b      	negs	r3, r3
 800a96e:	9003      	str	r0, [sp, #12]
 800a970:	9106      	str	r1, [sp, #24]
 800a972:	1c96      	adds	r6, r2, #2
 800a974:	1a9b      	subs	r3, r3, r2
 800a976:	199a      	adds	r2, r3, r6
 800a978:	9600      	str	r6, [sp, #0]
 800a97a:	9205      	str	r2, [sp, #20]
 800a97c:	9a00      	ldr	r2, [sp, #0]
 800a97e:	3601      	adds	r6, #1
 800a980:	7810      	ldrb	r0, [r2, #0]
 800a982:	2830      	cmp	r0, #48	; 0x30
 800a984:	d0f7      	beq.n	800a976 <__gethex+0x16>
 800a986:	f7ff ffd6 	bl	800a936 <__hexdig_fun>
 800a98a:	2300      	movs	r3, #0
 800a98c:	001d      	movs	r5, r3
 800a98e:	9302      	str	r3, [sp, #8]
 800a990:	4298      	cmp	r0, r3
 800a992:	d11d      	bne.n	800a9d0 <__gethex+0x70>
 800a994:	2201      	movs	r2, #1
 800a996:	49a6      	ldr	r1, [pc, #664]	; (800ac30 <__gethex+0x2d0>)
 800a998:	9800      	ldr	r0, [sp, #0]
 800a99a:	f7ff fd6d 	bl	800a478 <strncmp>
 800a99e:	0007      	movs	r7, r0
 800a9a0:	42a8      	cmp	r0, r5
 800a9a2:	d169      	bne.n	800aa78 <__gethex+0x118>
 800a9a4:	9b00      	ldr	r3, [sp, #0]
 800a9a6:	0034      	movs	r4, r6
 800a9a8:	7858      	ldrb	r0, [r3, #1]
 800a9aa:	f7ff ffc4 	bl	800a936 <__hexdig_fun>
 800a9ae:	2301      	movs	r3, #1
 800a9b0:	9302      	str	r3, [sp, #8]
 800a9b2:	42a8      	cmp	r0, r5
 800a9b4:	d02f      	beq.n	800aa16 <__gethex+0xb6>
 800a9b6:	9600      	str	r6, [sp, #0]
 800a9b8:	9b00      	ldr	r3, [sp, #0]
 800a9ba:	7818      	ldrb	r0, [r3, #0]
 800a9bc:	2830      	cmp	r0, #48	; 0x30
 800a9be:	d009      	beq.n	800a9d4 <__gethex+0x74>
 800a9c0:	f7ff ffb9 	bl	800a936 <__hexdig_fun>
 800a9c4:	4242      	negs	r2, r0
 800a9c6:	4142      	adcs	r2, r0
 800a9c8:	2301      	movs	r3, #1
 800a9ca:	0035      	movs	r5, r6
 800a9cc:	9202      	str	r2, [sp, #8]
 800a9ce:	9305      	str	r3, [sp, #20]
 800a9d0:	9c00      	ldr	r4, [sp, #0]
 800a9d2:	e004      	b.n	800a9de <__gethex+0x7e>
 800a9d4:	9b00      	ldr	r3, [sp, #0]
 800a9d6:	3301      	adds	r3, #1
 800a9d8:	9300      	str	r3, [sp, #0]
 800a9da:	e7ed      	b.n	800a9b8 <__gethex+0x58>
 800a9dc:	3401      	adds	r4, #1
 800a9de:	7820      	ldrb	r0, [r4, #0]
 800a9e0:	f7ff ffa9 	bl	800a936 <__hexdig_fun>
 800a9e4:	1e07      	subs	r7, r0, #0
 800a9e6:	d1f9      	bne.n	800a9dc <__gethex+0x7c>
 800a9e8:	2201      	movs	r2, #1
 800a9ea:	0020      	movs	r0, r4
 800a9ec:	4990      	ldr	r1, [pc, #576]	; (800ac30 <__gethex+0x2d0>)
 800a9ee:	f7ff fd43 	bl	800a478 <strncmp>
 800a9f2:	2800      	cmp	r0, #0
 800a9f4:	d10d      	bne.n	800aa12 <__gethex+0xb2>
 800a9f6:	2d00      	cmp	r5, #0
 800a9f8:	d106      	bne.n	800aa08 <__gethex+0xa8>
 800a9fa:	3401      	adds	r4, #1
 800a9fc:	0025      	movs	r5, r4
 800a9fe:	7820      	ldrb	r0, [r4, #0]
 800aa00:	f7ff ff99 	bl	800a936 <__hexdig_fun>
 800aa04:	2800      	cmp	r0, #0
 800aa06:	d102      	bne.n	800aa0e <__gethex+0xae>
 800aa08:	1b2d      	subs	r5, r5, r4
 800aa0a:	00af      	lsls	r7, r5, #2
 800aa0c:	e003      	b.n	800aa16 <__gethex+0xb6>
 800aa0e:	3401      	adds	r4, #1
 800aa10:	e7f5      	b.n	800a9fe <__gethex+0x9e>
 800aa12:	2d00      	cmp	r5, #0
 800aa14:	d1f8      	bne.n	800aa08 <__gethex+0xa8>
 800aa16:	2220      	movs	r2, #32
 800aa18:	7823      	ldrb	r3, [r4, #0]
 800aa1a:	0026      	movs	r6, r4
 800aa1c:	4393      	bics	r3, r2
 800aa1e:	2b50      	cmp	r3, #80	; 0x50
 800aa20:	d11d      	bne.n	800aa5e <__gethex+0xfe>
 800aa22:	7863      	ldrb	r3, [r4, #1]
 800aa24:	2b2b      	cmp	r3, #43	; 0x2b
 800aa26:	d02c      	beq.n	800aa82 <__gethex+0x122>
 800aa28:	2b2d      	cmp	r3, #45	; 0x2d
 800aa2a:	d02e      	beq.n	800aa8a <__gethex+0x12a>
 800aa2c:	2300      	movs	r3, #0
 800aa2e:	1c66      	adds	r6, r4, #1
 800aa30:	9304      	str	r3, [sp, #16]
 800aa32:	7830      	ldrb	r0, [r6, #0]
 800aa34:	f7ff ff7f 	bl	800a936 <__hexdig_fun>
 800aa38:	1e43      	subs	r3, r0, #1
 800aa3a:	b2db      	uxtb	r3, r3
 800aa3c:	2b18      	cmp	r3, #24
 800aa3e:	d82b      	bhi.n	800aa98 <__gethex+0x138>
 800aa40:	3810      	subs	r0, #16
 800aa42:	0005      	movs	r5, r0
 800aa44:	7870      	ldrb	r0, [r6, #1]
 800aa46:	f7ff ff76 	bl	800a936 <__hexdig_fun>
 800aa4a:	1e43      	subs	r3, r0, #1
 800aa4c:	b2db      	uxtb	r3, r3
 800aa4e:	3601      	adds	r6, #1
 800aa50:	2b18      	cmp	r3, #24
 800aa52:	d91c      	bls.n	800aa8e <__gethex+0x12e>
 800aa54:	9b04      	ldr	r3, [sp, #16]
 800aa56:	2b00      	cmp	r3, #0
 800aa58:	d000      	beq.n	800aa5c <__gethex+0xfc>
 800aa5a:	426d      	negs	r5, r5
 800aa5c:	197f      	adds	r7, r7, r5
 800aa5e:	9b06      	ldr	r3, [sp, #24]
 800aa60:	601e      	str	r6, [r3, #0]
 800aa62:	9b02      	ldr	r3, [sp, #8]
 800aa64:	2b00      	cmp	r3, #0
 800aa66:	d019      	beq.n	800aa9c <__gethex+0x13c>
 800aa68:	2600      	movs	r6, #0
 800aa6a:	9b05      	ldr	r3, [sp, #20]
 800aa6c:	42b3      	cmp	r3, r6
 800aa6e:	d100      	bne.n	800aa72 <__gethex+0x112>
 800aa70:	3606      	adds	r6, #6
 800aa72:	0030      	movs	r0, r6
 800aa74:	b009      	add	sp, #36	; 0x24
 800aa76:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aa78:	2301      	movs	r3, #1
 800aa7a:	2700      	movs	r7, #0
 800aa7c:	9c00      	ldr	r4, [sp, #0]
 800aa7e:	9302      	str	r3, [sp, #8]
 800aa80:	e7c9      	b.n	800aa16 <__gethex+0xb6>
 800aa82:	2300      	movs	r3, #0
 800aa84:	9304      	str	r3, [sp, #16]
 800aa86:	1ca6      	adds	r6, r4, #2
 800aa88:	e7d3      	b.n	800aa32 <__gethex+0xd2>
 800aa8a:	2301      	movs	r3, #1
 800aa8c:	e7fa      	b.n	800aa84 <__gethex+0x124>
 800aa8e:	230a      	movs	r3, #10
 800aa90:	435d      	muls	r5, r3
 800aa92:	182d      	adds	r5, r5, r0
 800aa94:	3d10      	subs	r5, #16
 800aa96:	e7d5      	b.n	800aa44 <__gethex+0xe4>
 800aa98:	0026      	movs	r6, r4
 800aa9a:	e7e0      	b.n	800aa5e <__gethex+0xfe>
 800aa9c:	9b00      	ldr	r3, [sp, #0]
 800aa9e:	9902      	ldr	r1, [sp, #8]
 800aaa0:	1ae3      	subs	r3, r4, r3
 800aaa2:	3b01      	subs	r3, #1
 800aaa4:	2b07      	cmp	r3, #7
 800aaa6:	dc0a      	bgt.n	800aabe <__gethex+0x15e>
 800aaa8:	9803      	ldr	r0, [sp, #12]
 800aaaa:	f000 fa5d 	bl	800af68 <_Balloc>
 800aaae:	1e05      	subs	r5, r0, #0
 800aab0:	d108      	bne.n	800aac4 <__gethex+0x164>
 800aab2:	002a      	movs	r2, r5
 800aab4:	21e4      	movs	r1, #228	; 0xe4
 800aab6:	4b5f      	ldr	r3, [pc, #380]	; (800ac34 <__gethex+0x2d4>)
 800aab8:	485f      	ldr	r0, [pc, #380]	; (800ac38 <__gethex+0x2d8>)
 800aaba:	f003 fd19 	bl	800e4f0 <__assert_func>
 800aabe:	3101      	adds	r1, #1
 800aac0:	105b      	asrs	r3, r3, #1
 800aac2:	e7ef      	b.n	800aaa4 <__gethex+0x144>
 800aac4:	0003      	movs	r3, r0
 800aac6:	3314      	adds	r3, #20
 800aac8:	9302      	str	r3, [sp, #8]
 800aaca:	9305      	str	r3, [sp, #20]
 800aacc:	2300      	movs	r3, #0
 800aace:	001e      	movs	r6, r3
 800aad0:	9304      	str	r3, [sp, #16]
 800aad2:	9b00      	ldr	r3, [sp, #0]
 800aad4:	42a3      	cmp	r3, r4
 800aad6:	d33f      	bcc.n	800ab58 <__gethex+0x1f8>
 800aad8:	9c05      	ldr	r4, [sp, #20]
 800aada:	9b02      	ldr	r3, [sp, #8]
 800aadc:	c440      	stmia	r4!, {r6}
 800aade:	1ae4      	subs	r4, r4, r3
 800aae0:	10a4      	asrs	r4, r4, #2
 800aae2:	0030      	movs	r0, r6
 800aae4:	612c      	str	r4, [r5, #16]
 800aae6:	f000 fb01 	bl	800b0ec <__hi0bits>
 800aaea:	9b01      	ldr	r3, [sp, #4]
 800aaec:	0164      	lsls	r4, r4, #5
 800aaee:	681b      	ldr	r3, [r3, #0]
 800aaf0:	1a26      	subs	r6, r4, r0
 800aaf2:	9300      	str	r3, [sp, #0]
 800aaf4:	429e      	cmp	r6, r3
 800aaf6:	dd51      	ble.n	800ab9c <__gethex+0x23c>
 800aaf8:	1af6      	subs	r6, r6, r3
 800aafa:	0031      	movs	r1, r6
 800aafc:	0028      	movs	r0, r5
 800aafe:	f000 fe7b 	bl	800b7f8 <__any_on>
 800ab02:	1e04      	subs	r4, r0, #0
 800ab04:	d016      	beq.n	800ab34 <__gethex+0x1d4>
 800ab06:	2401      	movs	r4, #1
 800ab08:	231f      	movs	r3, #31
 800ab0a:	0020      	movs	r0, r4
 800ab0c:	1e72      	subs	r2, r6, #1
 800ab0e:	4013      	ands	r3, r2
 800ab10:	4098      	lsls	r0, r3
 800ab12:	0003      	movs	r3, r0
 800ab14:	1151      	asrs	r1, r2, #5
 800ab16:	9802      	ldr	r0, [sp, #8]
 800ab18:	0089      	lsls	r1, r1, #2
 800ab1a:	5809      	ldr	r1, [r1, r0]
 800ab1c:	4219      	tst	r1, r3
 800ab1e:	d009      	beq.n	800ab34 <__gethex+0x1d4>
 800ab20:	42a2      	cmp	r2, r4
 800ab22:	dd06      	ble.n	800ab32 <__gethex+0x1d2>
 800ab24:	0028      	movs	r0, r5
 800ab26:	1eb1      	subs	r1, r6, #2
 800ab28:	f000 fe66 	bl	800b7f8 <__any_on>
 800ab2c:	3402      	adds	r4, #2
 800ab2e:	2800      	cmp	r0, #0
 800ab30:	d100      	bne.n	800ab34 <__gethex+0x1d4>
 800ab32:	2402      	movs	r4, #2
 800ab34:	0031      	movs	r1, r6
 800ab36:	0028      	movs	r0, r5
 800ab38:	f7ff fea8 	bl	800a88c <rshift>
 800ab3c:	19bf      	adds	r7, r7, r6
 800ab3e:	9b01      	ldr	r3, [sp, #4]
 800ab40:	689b      	ldr	r3, [r3, #8]
 800ab42:	42bb      	cmp	r3, r7
 800ab44:	da3a      	bge.n	800abbc <__gethex+0x25c>
 800ab46:	0029      	movs	r1, r5
 800ab48:	9803      	ldr	r0, [sp, #12]
 800ab4a:	f000 fa35 	bl	800afb8 <_Bfree>
 800ab4e:	2300      	movs	r3, #0
 800ab50:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ab52:	26a3      	movs	r6, #163	; 0xa3
 800ab54:	6013      	str	r3, [r2, #0]
 800ab56:	e78c      	b.n	800aa72 <__gethex+0x112>
 800ab58:	3c01      	subs	r4, #1
 800ab5a:	7823      	ldrb	r3, [r4, #0]
 800ab5c:	2b2e      	cmp	r3, #46	; 0x2e
 800ab5e:	d012      	beq.n	800ab86 <__gethex+0x226>
 800ab60:	9b04      	ldr	r3, [sp, #16]
 800ab62:	2b20      	cmp	r3, #32
 800ab64:	d104      	bne.n	800ab70 <__gethex+0x210>
 800ab66:	9b05      	ldr	r3, [sp, #20]
 800ab68:	c340      	stmia	r3!, {r6}
 800ab6a:	2600      	movs	r6, #0
 800ab6c:	9305      	str	r3, [sp, #20]
 800ab6e:	9604      	str	r6, [sp, #16]
 800ab70:	7820      	ldrb	r0, [r4, #0]
 800ab72:	f7ff fee0 	bl	800a936 <__hexdig_fun>
 800ab76:	230f      	movs	r3, #15
 800ab78:	4018      	ands	r0, r3
 800ab7a:	9b04      	ldr	r3, [sp, #16]
 800ab7c:	4098      	lsls	r0, r3
 800ab7e:	3304      	adds	r3, #4
 800ab80:	4306      	orrs	r6, r0
 800ab82:	9304      	str	r3, [sp, #16]
 800ab84:	e7a5      	b.n	800aad2 <__gethex+0x172>
 800ab86:	9b00      	ldr	r3, [sp, #0]
 800ab88:	42a3      	cmp	r3, r4
 800ab8a:	d8e9      	bhi.n	800ab60 <__gethex+0x200>
 800ab8c:	2201      	movs	r2, #1
 800ab8e:	0020      	movs	r0, r4
 800ab90:	4927      	ldr	r1, [pc, #156]	; (800ac30 <__gethex+0x2d0>)
 800ab92:	f7ff fc71 	bl	800a478 <strncmp>
 800ab96:	2800      	cmp	r0, #0
 800ab98:	d1e2      	bne.n	800ab60 <__gethex+0x200>
 800ab9a:	e79a      	b.n	800aad2 <__gethex+0x172>
 800ab9c:	9b00      	ldr	r3, [sp, #0]
 800ab9e:	2400      	movs	r4, #0
 800aba0:	429e      	cmp	r6, r3
 800aba2:	dacc      	bge.n	800ab3e <__gethex+0x1de>
 800aba4:	1b9e      	subs	r6, r3, r6
 800aba6:	0029      	movs	r1, r5
 800aba8:	0032      	movs	r2, r6
 800abaa:	9803      	ldr	r0, [sp, #12]
 800abac:	f000 fbf0 	bl	800b390 <__lshift>
 800abb0:	0003      	movs	r3, r0
 800abb2:	3314      	adds	r3, #20
 800abb4:	0005      	movs	r5, r0
 800abb6:	1bbf      	subs	r7, r7, r6
 800abb8:	9302      	str	r3, [sp, #8]
 800abba:	e7c0      	b.n	800ab3e <__gethex+0x1de>
 800abbc:	9b01      	ldr	r3, [sp, #4]
 800abbe:	685e      	ldr	r6, [r3, #4]
 800abc0:	42be      	cmp	r6, r7
 800abc2:	dd70      	ble.n	800aca6 <__gethex+0x346>
 800abc4:	9b00      	ldr	r3, [sp, #0]
 800abc6:	1bf6      	subs	r6, r6, r7
 800abc8:	42b3      	cmp	r3, r6
 800abca:	dc37      	bgt.n	800ac3c <__gethex+0x2dc>
 800abcc:	9b01      	ldr	r3, [sp, #4]
 800abce:	68db      	ldr	r3, [r3, #12]
 800abd0:	2b02      	cmp	r3, #2
 800abd2:	d024      	beq.n	800ac1e <__gethex+0x2be>
 800abd4:	2b03      	cmp	r3, #3
 800abd6:	d026      	beq.n	800ac26 <__gethex+0x2c6>
 800abd8:	2b01      	cmp	r3, #1
 800abda:	d117      	bne.n	800ac0c <__gethex+0x2ac>
 800abdc:	9b00      	ldr	r3, [sp, #0]
 800abde:	42b3      	cmp	r3, r6
 800abe0:	d114      	bne.n	800ac0c <__gethex+0x2ac>
 800abe2:	2b01      	cmp	r3, #1
 800abe4:	d10b      	bne.n	800abfe <__gethex+0x29e>
 800abe6:	9b01      	ldr	r3, [sp, #4]
 800abe8:	9a07      	ldr	r2, [sp, #28]
 800abea:	685b      	ldr	r3, [r3, #4]
 800abec:	2662      	movs	r6, #98	; 0x62
 800abee:	6013      	str	r3, [r2, #0]
 800abf0:	2301      	movs	r3, #1
 800abf2:	9a02      	ldr	r2, [sp, #8]
 800abf4:	612b      	str	r3, [r5, #16]
 800abf6:	6013      	str	r3, [r2, #0]
 800abf8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800abfa:	601d      	str	r5, [r3, #0]
 800abfc:	e739      	b.n	800aa72 <__gethex+0x112>
 800abfe:	9900      	ldr	r1, [sp, #0]
 800ac00:	0028      	movs	r0, r5
 800ac02:	3901      	subs	r1, #1
 800ac04:	f000 fdf8 	bl	800b7f8 <__any_on>
 800ac08:	2800      	cmp	r0, #0
 800ac0a:	d1ec      	bne.n	800abe6 <__gethex+0x286>
 800ac0c:	0029      	movs	r1, r5
 800ac0e:	9803      	ldr	r0, [sp, #12]
 800ac10:	f000 f9d2 	bl	800afb8 <_Bfree>
 800ac14:	2300      	movs	r3, #0
 800ac16:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ac18:	2650      	movs	r6, #80	; 0x50
 800ac1a:	6013      	str	r3, [r2, #0]
 800ac1c:	e729      	b.n	800aa72 <__gethex+0x112>
 800ac1e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ac20:	2b00      	cmp	r3, #0
 800ac22:	d1f3      	bne.n	800ac0c <__gethex+0x2ac>
 800ac24:	e7df      	b.n	800abe6 <__gethex+0x286>
 800ac26:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ac28:	2b00      	cmp	r3, #0
 800ac2a:	d1dc      	bne.n	800abe6 <__gethex+0x286>
 800ac2c:	e7ee      	b.n	800ac0c <__gethex+0x2ac>
 800ac2e:	46c0      	nop			; (mov r8, r8)
 800ac30:	080129fc 	.word	0x080129fc
 800ac34:	08012b59 	.word	0x08012b59
 800ac38:	08012b6a 	.word	0x08012b6a
 800ac3c:	1e77      	subs	r7, r6, #1
 800ac3e:	2c00      	cmp	r4, #0
 800ac40:	d12f      	bne.n	800aca2 <__gethex+0x342>
 800ac42:	2f00      	cmp	r7, #0
 800ac44:	d004      	beq.n	800ac50 <__gethex+0x2f0>
 800ac46:	0039      	movs	r1, r7
 800ac48:	0028      	movs	r0, r5
 800ac4a:	f000 fdd5 	bl	800b7f8 <__any_on>
 800ac4e:	0004      	movs	r4, r0
 800ac50:	231f      	movs	r3, #31
 800ac52:	117a      	asrs	r2, r7, #5
 800ac54:	401f      	ands	r7, r3
 800ac56:	3b1e      	subs	r3, #30
 800ac58:	40bb      	lsls	r3, r7
 800ac5a:	9902      	ldr	r1, [sp, #8]
 800ac5c:	0092      	lsls	r2, r2, #2
 800ac5e:	5852      	ldr	r2, [r2, r1]
 800ac60:	421a      	tst	r2, r3
 800ac62:	d001      	beq.n	800ac68 <__gethex+0x308>
 800ac64:	2302      	movs	r3, #2
 800ac66:	431c      	orrs	r4, r3
 800ac68:	9b00      	ldr	r3, [sp, #0]
 800ac6a:	0031      	movs	r1, r6
 800ac6c:	1b9b      	subs	r3, r3, r6
 800ac6e:	2602      	movs	r6, #2
 800ac70:	0028      	movs	r0, r5
 800ac72:	9300      	str	r3, [sp, #0]
 800ac74:	f7ff fe0a 	bl	800a88c <rshift>
 800ac78:	9b01      	ldr	r3, [sp, #4]
 800ac7a:	685f      	ldr	r7, [r3, #4]
 800ac7c:	2c00      	cmp	r4, #0
 800ac7e:	d041      	beq.n	800ad04 <__gethex+0x3a4>
 800ac80:	9b01      	ldr	r3, [sp, #4]
 800ac82:	68db      	ldr	r3, [r3, #12]
 800ac84:	2b02      	cmp	r3, #2
 800ac86:	d010      	beq.n	800acaa <__gethex+0x34a>
 800ac88:	2b03      	cmp	r3, #3
 800ac8a:	d012      	beq.n	800acb2 <__gethex+0x352>
 800ac8c:	2b01      	cmp	r3, #1
 800ac8e:	d106      	bne.n	800ac9e <__gethex+0x33e>
 800ac90:	07a2      	lsls	r2, r4, #30
 800ac92:	d504      	bpl.n	800ac9e <__gethex+0x33e>
 800ac94:	9a02      	ldr	r2, [sp, #8]
 800ac96:	6812      	ldr	r2, [r2, #0]
 800ac98:	4314      	orrs	r4, r2
 800ac9a:	421c      	tst	r4, r3
 800ac9c:	d10c      	bne.n	800acb8 <__gethex+0x358>
 800ac9e:	2310      	movs	r3, #16
 800aca0:	e02f      	b.n	800ad02 <__gethex+0x3a2>
 800aca2:	2401      	movs	r4, #1
 800aca4:	e7d4      	b.n	800ac50 <__gethex+0x2f0>
 800aca6:	2601      	movs	r6, #1
 800aca8:	e7e8      	b.n	800ac7c <__gethex+0x31c>
 800acaa:	2301      	movs	r3, #1
 800acac:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800acae:	1a9b      	subs	r3, r3, r2
 800acb0:	930f      	str	r3, [sp, #60]	; 0x3c
 800acb2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800acb4:	2b00      	cmp	r3, #0
 800acb6:	d0f2      	beq.n	800ac9e <__gethex+0x33e>
 800acb8:	692b      	ldr	r3, [r5, #16]
 800acba:	2000      	movs	r0, #0
 800acbc:	9302      	str	r3, [sp, #8]
 800acbe:	009b      	lsls	r3, r3, #2
 800acc0:	9304      	str	r3, [sp, #16]
 800acc2:	002b      	movs	r3, r5
 800acc4:	9a04      	ldr	r2, [sp, #16]
 800acc6:	3314      	adds	r3, #20
 800acc8:	1899      	adds	r1, r3, r2
 800acca:	681a      	ldr	r2, [r3, #0]
 800accc:	1c54      	adds	r4, r2, #1
 800acce:	d01e      	beq.n	800ad0e <__gethex+0x3ae>
 800acd0:	3201      	adds	r2, #1
 800acd2:	601a      	str	r2, [r3, #0]
 800acd4:	002b      	movs	r3, r5
 800acd6:	3314      	adds	r3, #20
 800acd8:	2e02      	cmp	r6, #2
 800acda:	d141      	bne.n	800ad60 <__gethex+0x400>
 800acdc:	9a01      	ldr	r2, [sp, #4]
 800acde:	9900      	ldr	r1, [sp, #0]
 800ace0:	6812      	ldr	r2, [r2, #0]
 800ace2:	3a01      	subs	r2, #1
 800ace4:	428a      	cmp	r2, r1
 800ace6:	d10b      	bne.n	800ad00 <__gethex+0x3a0>
 800ace8:	221f      	movs	r2, #31
 800acea:	9800      	ldr	r0, [sp, #0]
 800acec:	1149      	asrs	r1, r1, #5
 800acee:	4002      	ands	r2, r0
 800acf0:	2001      	movs	r0, #1
 800acf2:	0004      	movs	r4, r0
 800acf4:	4094      	lsls	r4, r2
 800acf6:	0089      	lsls	r1, r1, #2
 800acf8:	58cb      	ldr	r3, [r1, r3]
 800acfa:	4223      	tst	r3, r4
 800acfc:	d000      	beq.n	800ad00 <__gethex+0x3a0>
 800acfe:	2601      	movs	r6, #1
 800ad00:	2320      	movs	r3, #32
 800ad02:	431e      	orrs	r6, r3
 800ad04:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ad06:	601d      	str	r5, [r3, #0]
 800ad08:	9b07      	ldr	r3, [sp, #28]
 800ad0a:	601f      	str	r7, [r3, #0]
 800ad0c:	e6b1      	b.n	800aa72 <__gethex+0x112>
 800ad0e:	c301      	stmia	r3!, {r0}
 800ad10:	4299      	cmp	r1, r3
 800ad12:	d8da      	bhi.n	800acca <__gethex+0x36a>
 800ad14:	68ab      	ldr	r3, [r5, #8]
 800ad16:	9a02      	ldr	r2, [sp, #8]
 800ad18:	429a      	cmp	r2, r3
 800ad1a:	db18      	blt.n	800ad4e <__gethex+0x3ee>
 800ad1c:	6869      	ldr	r1, [r5, #4]
 800ad1e:	9803      	ldr	r0, [sp, #12]
 800ad20:	3101      	adds	r1, #1
 800ad22:	f000 f921 	bl	800af68 <_Balloc>
 800ad26:	1e04      	subs	r4, r0, #0
 800ad28:	d104      	bne.n	800ad34 <__gethex+0x3d4>
 800ad2a:	0022      	movs	r2, r4
 800ad2c:	2184      	movs	r1, #132	; 0x84
 800ad2e:	4b1c      	ldr	r3, [pc, #112]	; (800ada0 <__gethex+0x440>)
 800ad30:	481c      	ldr	r0, [pc, #112]	; (800ada4 <__gethex+0x444>)
 800ad32:	e6c2      	b.n	800aaba <__gethex+0x15a>
 800ad34:	0029      	movs	r1, r5
 800ad36:	692a      	ldr	r2, [r5, #16]
 800ad38:	310c      	adds	r1, #12
 800ad3a:	3202      	adds	r2, #2
 800ad3c:	0092      	lsls	r2, r2, #2
 800ad3e:	300c      	adds	r0, #12
 800ad40:	f7ff fc77 	bl	800a632 <memcpy>
 800ad44:	0029      	movs	r1, r5
 800ad46:	9803      	ldr	r0, [sp, #12]
 800ad48:	f000 f936 	bl	800afb8 <_Bfree>
 800ad4c:	0025      	movs	r5, r4
 800ad4e:	692b      	ldr	r3, [r5, #16]
 800ad50:	1c5a      	adds	r2, r3, #1
 800ad52:	612a      	str	r2, [r5, #16]
 800ad54:	2201      	movs	r2, #1
 800ad56:	3304      	adds	r3, #4
 800ad58:	009b      	lsls	r3, r3, #2
 800ad5a:	18eb      	adds	r3, r5, r3
 800ad5c:	605a      	str	r2, [r3, #4]
 800ad5e:	e7b9      	b.n	800acd4 <__gethex+0x374>
 800ad60:	692a      	ldr	r2, [r5, #16]
 800ad62:	9902      	ldr	r1, [sp, #8]
 800ad64:	428a      	cmp	r2, r1
 800ad66:	dd09      	ble.n	800ad7c <__gethex+0x41c>
 800ad68:	2101      	movs	r1, #1
 800ad6a:	0028      	movs	r0, r5
 800ad6c:	f7ff fd8e 	bl	800a88c <rshift>
 800ad70:	9b01      	ldr	r3, [sp, #4]
 800ad72:	3701      	adds	r7, #1
 800ad74:	689b      	ldr	r3, [r3, #8]
 800ad76:	42bb      	cmp	r3, r7
 800ad78:	dac1      	bge.n	800acfe <__gethex+0x39e>
 800ad7a:	e6e4      	b.n	800ab46 <__gethex+0x1e6>
 800ad7c:	221f      	movs	r2, #31
 800ad7e:	9c00      	ldr	r4, [sp, #0]
 800ad80:	9900      	ldr	r1, [sp, #0]
 800ad82:	2601      	movs	r6, #1
 800ad84:	4014      	ands	r4, r2
 800ad86:	4211      	tst	r1, r2
 800ad88:	d0ba      	beq.n	800ad00 <__gethex+0x3a0>
 800ad8a:	9a04      	ldr	r2, [sp, #16]
 800ad8c:	189b      	adds	r3, r3, r2
 800ad8e:	3b04      	subs	r3, #4
 800ad90:	6818      	ldr	r0, [r3, #0]
 800ad92:	f000 f9ab 	bl	800b0ec <__hi0bits>
 800ad96:	2320      	movs	r3, #32
 800ad98:	1b1b      	subs	r3, r3, r4
 800ad9a:	4298      	cmp	r0, r3
 800ad9c:	dbe4      	blt.n	800ad68 <__gethex+0x408>
 800ad9e:	e7af      	b.n	800ad00 <__gethex+0x3a0>
 800ada0:	08012b59 	.word	0x08012b59
 800ada4:	08012b6a 	.word	0x08012b6a

0800ada8 <L_shift>:
 800ada8:	2308      	movs	r3, #8
 800adaa:	b570      	push	{r4, r5, r6, lr}
 800adac:	2520      	movs	r5, #32
 800adae:	1a9a      	subs	r2, r3, r2
 800adb0:	0092      	lsls	r2, r2, #2
 800adb2:	1aad      	subs	r5, r5, r2
 800adb4:	6843      	ldr	r3, [r0, #4]
 800adb6:	6804      	ldr	r4, [r0, #0]
 800adb8:	001e      	movs	r6, r3
 800adba:	40ae      	lsls	r6, r5
 800adbc:	40d3      	lsrs	r3, r2
 800adbe:	4334      	orrs	r4, r6
 800adc0:	6004      	str	r4, [r0, #0]
 800adc2:	6043      	str	r3, [r0, #4]
 800adc4:	3004      	adds	r0, #4
 800adc6:	4288      	cmp	r0, r1
 800adc8:	d3f4      	bcc.n	800adb4 <L_shift+0xc>
 800adca:	bd70      	pop	{r4, r5, r6, pc}

0800adcc <__match>:
 800adcc:	b530      	push	{r4, r5, lr}
 800adce:	6803      	ldr	r3, [r0, #0]
 800add0:	780c      	ldrb	r4, [r1, #0]
 800add2:	3301      	adds	r3, #1
 800add4:	2c00      	cmp	r4, #0
 800add6:	d102      	bne.n	800adde <__match+0x12>
 800add8:	6003      	str	r3, [r0, #0]
 800adda:	2001      	movs	r0, #1
 800addc:	bd30      	pop	{r4, r5, pc}
 800adde:	781a      	ldrb	r2, [r3, #0]
 800ade0:	0015      	movs	r5, r2
 800ade2:	3d41      	subs	r5, #65	; 0x41
 800ade4:	2d19      	cmp	r5, #25
 800ade6:	d800      	bhi.n	800adea <__match+0x1e>
 800ade8:	3220      	adds	r2, #32
 800adea:	3101      	adds	r1, #1
 800adec:	42a2      	cmp	r2, r4
 800adee:	d0ef      	beq.n	800add0 <__match+0x4>
 800adf0:	2000      	movs	r0, #0
 800adf2:	e7f3      	b.n	800addc <__match+0x10>

0800adf4 <__hexnan>:
 800adf4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800adf6:	680b      	ldr	r3, [r1, #0]
 800adf8:	b08b      	sub	sp, #44	; 0x2c
 800adfa:	9201      	str	r2, [sp, #4]
 800adfc:	9901      	ldr	r1, [sp, #4]
 800adfe:	115a      	asrs	r2, r3, #5
 800ae00:	0092      	lsls	r2, r2, #2
 800ae02:	188a      	adds	r2, r1, r2
 800ae04:	9202      	str	r2, [sp, #8]
 800ae06:	0019      	movs	r1, r3
 800ae08:	221f      	movs	r2, #31
 800ae0a:	4011      	ands	r1, r2
 800ae0c:	9008      	str	r0, [sp, #32]
 800ae0e:	9106      	str	r1, [sp, #24]
 800ae10:	4213      	tst	r3, r2
 800ae12:	d002      	beq.n	800ae1a <__hexnan+0x26>
 800ae14:	9b02      	ldr	r3, [sp, #8]
 800ae16:	3304      	adds	r3, #4
 800ae18:	9302      	str	r3, [sp, #8]
 800ae1a:	9b02      	ldr	r3, [sp, #8]
 800ae1c:	2500      	movs	r5, #0
 800ae1e:	1f1f      	subs	r7, r3, #4
 800ae20:	003e      	movs	r6, r7
 800ae22:	003c      	movs	r4, r7
 800ae24:	9b08      	ldr	r3, [sp, #32]
 800ae26:	603d      	str	r5, [r7, #0]
 800ae28:	681b      	ldr	r3, [r3, #0]
 800ae2a:	9507      	str	r5, [sp, #28]
 800ae2c:	9305      	str	r3, [sp, #20]
 800ae2e:	9503      	str	r5, [sp, #12]
 800ae30:	9b05      	ldr	r3, [sp, #20]
 800ae32:	3301      	adds	r3, #1
 800ae34:	9309      	str	r3, [sp, #36]	; 0x24
 800ae36:	9b05      	ldr	r3, [sp, #20]
 800ae38:	785b      	ldrb	r3, [r3, #1]
 800ae3a:	9304      	str	r3, [sp, #16]
 800ae3c:	2b00      	cmp	r3, #0
 800ae3e:	d028      	beq.n	800ae92 <__hexnan+0x9e>
 800ae40:	9804      	ldr	r0, [sp, #16]
 800ae42:	f7ff fd78 	bl	800a936 <__hexdig_fun>
 800ae46:	2800      	cmp	r0, #0
 800ae48:	d154      	bne.n	800aef4 <__hexnan+0x100>
 800ae4a:	9b04      	ldr	r3, [sp, #16]
 800ae4c:	2b20      	cmp	r3, #32
 800ae4e:	d819      	bhi.n	800ae84 <__hexnan+0x90>
 800ae50:	9b03      	ldr	r3, [sp, #12]
 800ae52:	9a07      	ldr	r2, [sp, #28]
 800ae54:	4293      	cmp	r3, r2
 800ae56:	dd12      	ble.n	800ae7e <__hexnan+0x8a>
 800ae58:	42b4      	cmp	r4, r6
 800ae5a:	d206      	bcs.n	800ae6a <__hexnan+0x76>
 800ae5c:	2d07      	cmp	r5, #7
 800ae5e:	dc04      	bgt.n	800ae6a <__hexnan+0x76>
 800ae60:	002a      	movs	r2, r5
 800ae62:	0031      	movs	r1, r6
 800ae64:	0020      	movs	r0, r4
 800ae66:	f7ff ff9f 	bl	800ada8 <L_shift>
 800ae6a:	9b01      	ldr	r3, [sp, #4]
 800ae6c:	2508      	movs	r5, #8
 800ae6e:	429c      	cmp	r4, r3
 800ae70:	d905      	bls.n	800ae7e <__hexnan+0x8a>
 800ae72:	1f26      	subs	r6, r4, #4
 800ae74:	2500      	movs	r5, #0
 800ae76:	0034      	movs	r4, r6
 800ae78:	9b03      	ldr	r3, [sp, #12]
 800ae7a:	6035      	str	r5, [r6, #0]
 800ae7c:	9307      	str	r3, [sp, #28]
 800ae7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ae80:	9305      	str	r3, [sp, #20]
 800ae82:	e7d5      	b.n	800ae30 <__hexnan+0x3c>
 800ae84:	9b04      	ldr	r3, [sp, #16]
 800ae86:	2b29      	cmp	r3, #41	; 0x29
 800ae88:	d159      	bne.n	800af3e <__hexnan+0x14a>
 800ae8a:	9b05      	ldr	r3, [sp, #20]
 800ae8c:	9a08      	ldr	r2, [sp, #32]
 800ae8e:	3302      	adds	r3, #2
 800ae90:	6013      	str	r3, [r2, #0]
 800ae92:	9b03      	ldr	r3, [sp, #12]
 800ae94:	2b00      	cmp	r3, #0
 800ae96:	d052      	beq.n	800af3e <__hexnan+0x14a>
 800ae98:	42b4      	cmp	r4, r6
 800ae9a:	d206      	bcs.n	800aeaa <__hexnan+0xb6>
 800ae9c:	2d07      	cmp	r5, #7
 800ae9e:	dc04      	bgt.n	800aeaa <__hexnan+0xb6>
 800aea0:	002a      	movs	r2, r5
 800aea2:	0031      	movs	r1, r6
 800aea4:	0020      	movs	r0, r4
 800aea6:	f7ff ff7f 	bl	800ada8 <L_shift>
 800aeaa:	9b01      	ldr	r3, [sp, #4]
 800aeac:	429c      	cmp	r4, r3
 800aeae:	d935      	bls.n	800af1c <__hexnan+0x128>
 800aeb0:	001a      	movs	r2, r3
 800aeb2:	0023      	movs	r3, r4
 800aeb4:	cb02      	ldmia	r3!, {r1}
 800aeb6:	c202      	stmia	r2!, {r1}
 800aeb8:	429f      	cmp	r7, r3
 800aeba:	d2fb      	bcs.n	800aeb4 <__hexnan+0xc0>
 800aebc:	9b02      	ldr	r3, [sp, #8]
 800aebe:	1c62      	adds	r2, r4, #1
 800aec0:	1ed9      	subs	r1, r3, #3
 800aec2:	2304      	movs	r3, #4
 800aec4:	4291      	cmp	r1, r2
 800aec6:	d305      	bcc.n	800aed4 <__hexnan+0xe0>
 800aec8:	9b02      	ldr	r3, [sp, #8]
 800aeca:	3b04      	subs	r3, #4
 800aecc:	1b1b      	subs	r3, r3, r4
 800aece:	089b      	lsrs	r3, r3, #2
 800aed0:	3301      	adds	r3, #1
 800aed2:	009b      	lsls	r3, r3, #2
 800aed4:	9a01      	ldr	r2, [sp, #4]
 800aed6:	18d3      	adds	r3, r2, r3
 800aed8:	2200      	movs	r2, #0
 800aeda:	c304      	stmia	r3!, {r2}
 800aedc:	429f      	cmp	r7, r3
 800aede:	d2fc      	bcs.n	800aeda <__hexnan+0xe6>
 800aee0:	683b      	ldr	r3, [r7, #0]
 800aee2:	2b00      	cmp	r3, #0
 800aee4:	d104      	bne.n	800aef0 <__hexnan+0xfc>
 800aee6:	9b01      	ldr	r3, [sp, #4]
 800aee8:	429f      	cmp	r7, r3
 800aeea:	d126      	bne.n	800af3a <__hexnan+0x146>
 800aeec:	2301      	movs	r3, #1
 800aeee:	603b      	str	r3, [r7, #0]
 800aef0:	2005      	movs	r0, #5
 800aef2:	e025      	b.n	800af40 <__hexnan+0x14c>
 800aef4:	9b03      	ldr	r3, [sp, #12]
 800aef6:	3501      	adds	r5, #1
 800aef8:	3301      	adds	r3, #1
 800aefa:	9303      	str	r3, [sp, #12]
 800aefc:	2d08      	cmp	r5, #8
 800aefe:	dd06      	ble.n	800af0e <__hexnan+0x11a>
 800af00:	9b01      	ldr	r3, [sp, #4]
 800af02:	429c      	cmp	r4, r3
 800af04:	d9bb      	bls.n	800ae7e <__hexnan+0x8a>
 800af06:	2300      	movs	r3, #0
 800af08:	2501      	movs	r5, #1
 800af0a:	3c04      	subs	r4, #4
 800af0c:	6023      	str	r3, [r4, #0]
 800af0e:	220f      	movs	r2, #15
 800af10:	6823      	ldr	r3, [r4, #0]
 800af12:	4010      	ands	r0, r2
 800af14:	011b      	lsls	r3, r3, #4
 800af16:	4303      	orrs	r3, r0
 800af18:	6023      	str	r3, [r4, #0]
 800af1a:	e7b0      	b.n	800ae7e <__hexnan+0x8a>
 800af1c:	9b06      	ldr	r3, [sp, #24]
 800af1e:	2b00      	cmp	r3, #0
 800af20:	d0de      	beq.n	800aee0 <__hexnan+0xec>
 800af22:	2320      	movs	r3, #32
 800af24:	9a06      	ldr	r2, [sp, #24]
 800af26:	9902      	ldr	r1, [sp, #8]
 800af28:	1a9b      	subs	r3, r3, r2
 800af2a:	2201      	movs	r2, #1
 800af2c:	4252      	negs	r2, r2
 800af2e:	40da      	lsrs	r2, r3
 800af30:	3904      	subs	r1, #4
 800af32:	680b      	ldr	r3, [r1, #0]
 800af34:	4013      	ands	r3, r2
 800af36:	600b      	str	r3, [r1, #0]
 800af38:	e7d2      	b.n	800aee0 <__hexnan+0xec>
 800af3a:	3f04      	subs	r7, #4
 800af3c:	e7d0      	b.n	800aee0 <__hexnan+0xec>
 800af3e:	2004      	movs	r0, #4
 800af40:	b00b      	add	sp, #44	; 0x2c
 800af42:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800af44 <__ascii_mbtowc>:
 800af44:	b082      	sub	sp, #8
 800af46:	2900      	cmp	r1, #0
 800af48:	d100      	bne.n	800af4c <__ascii_mbtowc+0x8>
 800af4a:	a901      	add	r1, sp, #4
 800af4c:	1e10      	subs	r0, r2, #0
 800af4e:	d006      	beq.n	800af5e <__ascii_mbtowc+0x1a>
 800af50:	2b00      	cmp	r3, #0
 800af52:	d006      	beq.n	800af62 <__ascii_mbtowc+0x1e>
 800af54:	7813      	ldrb	r3, [r2, #0]
 800af56:	600b      	str	r3, [r1, #0]
 800af58:	7810      	ldrb	r0, [r2, #0]
 800af5a:	1e43      	subs	r3, r0, #1
 800af5c:	4198      	sbcs	r0, r3
 800af5e:	b002      	add	sp, #8
 800af60:	4770      	bx	lr
 800af62:	2002      	movs	r0, #2
 800af64:	4240      	negs	r0, r0
 800af66:	e7fa      	b.n	800af5e <__ascii_mbtowc+0x1a>

0800af68 <_Balloc>:
 800af68:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800af6a:	b570      	push	{r4, r5, r6, lr}
 800af6c:	0006      	movs	r6, r0
 800af6e:	000c      	movs	r4, r1
 800af70:	2b00      	cmp	r3, #0
 800af72:	d012      	beq.n	800af9a <_Balloc+0x32>
 800af74:	6c73      	ldr	r3, [r6, #68]	; 0x44
 800af76:	00a2      	lsls	r2, r4, #2
 800af78:	189b      	adds	r3, r3, r2
 800af7a:	6818      	ldr	r0, [r3, #0]
 800af7c:	2800      	cmp	r0, #0
 800af7e:	d115      	bne.n	800afac <_Balloc+0x44>
 800af80:	2101      	movs	r1, #1
 800af82:	000d      	movs	r5, r1
 800af84:	40a5      	lsls	r5, r4
 800af86:	1d6a      	adds	r2, r5, #5
 800af88:	0030      	movs	r0, r6
 800af8a:	0092      	lsls	r2, r2, #2
 800af8c:	f003 face 	bl	800e52c <_calloc_r>
 800af90:	2800      	cmp	r0, #0
 800af92:	d009      	beq.n	800afa8 <_Balloc+0x40>
 800af94:	6044      	str	r4, [r0, #4]
 800af96:	6085      	str	r5, [r0, #8]
 800af98:	e00a      	b.n	800afb0 <_Balloc+0x48>
 800af9a:	2221      	movs	r2, #33	; 0x21
 800af9c:	2104      	movs	r1, #4
 800af9e:	f003 fac5 	bl	800e52c <_calloc_r>
 800afa2:	6470      	str	r0, [r6, #68]	; 0x44
 800afa4:	2800      	cmp	r0, #0
 800afa6:	d1e5      	bne.n	800af74 <_Balloc+0xc>
 800afa8:	2000      	movs	r0, #0
 800afaa:	bd70      	pop	{r4, r5, r6, pc}
 800afac:	6802      	ldr	r2, [r0, #0]
 800afae:	601a      	str	r2, [r3, #0]
 800afb0:	2300      	movs	r3, #0
 800afb2:	6103      	str	r3, [r0, #16]
 800afb4:	60c3      	str	r3, [r0, #12]
 800afb6:	e7f8      	b.n	800afaa <_Balloc+0x42>

0800afb8 <_Bfree>:
 800afb8:	2900      	cmp	r1, #0
 800afba:	d006      	beq.n	800afca <_Bfree+0x12>
 800afbc:	684a      	ldr	r2, [r1, #4]
 800afbe:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800afc0:	0092      	lsls	r2, r2, #2
 800afc2:	189b      	adds	r3, r3, r2
 800afc4:	681a      	ldr	r2, [r3, #0]
 800afc6:	600a      	str	r2, [r1, #0]
 800afc8:	6019      	str	r1, [r3, #0]
 800afca:	4770      	bx	lr

0800afcc <__multadd>:
 800afcc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800afce:	000e      	movs	r6, r1
 800afd0:	9001      	str	r0, [sp, #4]
 800afd2:	000c      	movs	r4, r1
 800afd4:	001d      	movs	r5, r3
 800afd6:	2000      	movs	r0, #0
 800afd8:	690f      	ldr	r7, [r1, #16]
 800afda:	3614      	adds	r6, #20
 800afdc:	6833      	ldr	r3, [r6, #0]
 800afde:	3001      	adds	r0, #1
 800afe0:	b299      	uxth	r1, r3
 800afe2:	4351      	muls	r1, r2
 800afe4:	0c1b      	lsrs	r3, r3, #16
 800afe6:	4353      	muls	r3, r2
 800afe8:	1949      	adds	r1, r1, r5
 800afea:	0c0d      	lsrs	r5, r1, #16
 800afec:	195b      	adds	r3, r3, r5
 800afee:	0c1d      	lsrs	r5, r3, #16
 800aff0:	b289      	uxth	r1, r1
 800aff2:	041b      	lsls	r3, r3, #16
 800aff4:	185b      	adds	r3, r3, r1
 800aff6:	c608      	stmia	r6!, {r3}
 800aff8:	4287      	cmp	r7, r0
 800affa:	dcef      	bgt.n	800afdc <__multadd+0x10>
 800affc:	2d00      	cmp	r5, #0
 800affe:	d022      	beq.n	800b046 <__multadd+0x7a>
 800b000:	68a3      	ldr	r3, [r4, #8]
 800b002:	42bb      	cmp	r3, r7
 800b004:	dc19      	bgt.n	800b03a <__multadd+0x6e>
 800b006:	6861      	ldr	r1, [r4, #4]
 800b008:	9801      	ldr	r0, [sp, #4]
 800b00a:	3101      	adds	r1, #1
 800b00c:	f7ff ffac 	bl	800af68 <_Balloc>
 800b010:	1e06      	subs	r6, r0, #0
 800b012:	d105      	bne.n	800b020 <__multadd+0x54>
 800b014:	0032      	movs	r2, r6
 800b016:	21ba      	movs	r1, #186	; 0xba
 800b018:	4b0c      	ldr	r3, [pc, #48]	; (800b04c <__multadd+0x80>)
 800b01a:	480d      	ldr	r0, [pc, #52]	; (800b050 <__multadd+0x84>)
 800b01c:	f003 fa68 	bl	800e4f0 <__assert_func>
 800b020:	0021      	movs	r1, r4
 800b022:	6922      	ldr	r2, [r4, #16]
 800b024:	310c      	adds	r1, #12
 800b026:	3202      	adds	r2, #2
 800b028:	0092      	lsls	r2, r2, #2
 800b02a:	300c      	adds	r0, #12
 800b02c:	f7ff fb01 	bl	800a632 <memcpy>
 800b030:	0021      	movs	r1, r4
 800b032:	9801      	ldr	r0, [sp, #4]
 800b034:	f7ff ffc0 	bl	800afb8 <_Bfree>
 800b038:	0034      	movs	r4, r6
 800b03a:	1d3b      	adds	r3, r7, #4
 800b03c:	009b      	lsls	r3, r3, #2
 800b03e:	18e3      	adds	r3, r4, r3
 800b040:	605d      	str	r5, [r3, #4]
 800b042:	1c7b      	adds	r3, r7, #1
 800b044:	6123      	str	r3, [r4, #16]
 800b046:	0020      	movs	r0, r4
 800b048:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800b04a:	46c0      	nop			; (mov r8, r8)
 800b04c:	08012b59 	.word	0x08012b59
 800b050:	08012bca 	.word	0x08012bca

0800b054 <__s2b>:
 800b054:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b056:	0006      	movs	r6, r0
 800b058:	0018      	movs	r0, r3
 800b05a:	000c      	movs	r4, r1
 800b05c:	3008      	adds	r0, #8
 800b05e:	2109      	movs	r1, #9
 800b060:	9301      	str	r3, [sp, #4]
 800b062:	0015      	movs	r5, r2
 800b064:	f7f5 f8f4 	bl	8000250 <__divsi3>
 800b068:	2301      	movs	r3, #1
 800b06a:	2100      	movs	r1, #0
 800b06c:	4283      	cmp	r3, r0
 800b06e:	db0a      	blt.n	800b086 <__s2b+0x32>
 800b070:	0030      	movs	r0, r6
 800b072:	f7ff ff79 	bl	800af68 <_Balloc>
 800b076:	1e01      	subs	r1, r0, #0
 800b078:	d108      	bne.n	800b08c <__s2b+0x38>
 800b07a:	000a      	movs	r2, r1
 800b07c:	4b19      	ldr	r3, [pc, #100]	; (800b0e4 <__s2b+0x90>)
 800b07e:	481a      	ldr	r0, [pc, #104]	; (800b0e8 <__s2b+0x94>)
 800b080:	31d3      	adds	r1, #211	; 0xd3
 800b082:	f003 fa35 	bl	800e4f0 <__assert_func>
 800b086:	005b      	lsls	r3, r3, #1
 800b088:	3101      	adds	r1, #1
 800b08a:	e7ef      	b.n	800b06c <__s2b+0x18>
 800b08c:	9b08      	ldr	r3, [sp, #32]
 800b08e:	6143      	str	r3, [r0, #20]
 800b090:	2301      	movs	r3, #1
 800b092:	6103      	str	r3, [r0, #16]
 800b094:	2d09      	cmp	r5, #9
 800b096:	dd18      	ble.n	800b0ca <__s2b+0x76>
 800b098:	0023      	movs	r3, r4
 800b09a:	3309      	adds	r3, #9
 800b09c:	001f      	movs	r7, r3
 800b09e:	9300      	str	r3, [sp, #0]
 800b0a0:	1964      	adds	r4, r4, r5
 800b0a2:	783b      	ldrb	r3, [r7, #0]
 800b0a4:	220a      	movs	r2, #10
 800b0a6:	0030      	movs	r0, r6
 800b0a8:	3b30      	subs	r3, #48	; 0x30
 800b0aa:	f7ff ff8f 	bl	800afcc <__multadd>
 800b0ae:	3701      	adds	r7, #1
 800b0b0:	0001      	movs	r1, r0
 800b0b2:	42a7      	cmp	r7, r4
 800b0b4:	d1f5      	bne.n	800b0a2 <__s2b+0x4e>
 800b0b6:	002c      	movs	r4, r5
 800b0b8:	9b00      	ldr	r3, [sp, #0]
 800b0ba:	3c08      	subs	r4, #8
 800b0bc:	191c      	adds	r4, r3, r4
 800b0be:	002f      	movs	r7, r5
 800b0c0:	9b01      	ldr	r3, [sp, #4]
 800b0c2:	429f      	cmp	r7, r3
 800b0c4:	db04      	blt.n	800b0d0 <__s2b+0x7c>
 800b0c6:	0008      	movs	r0, r1
 800b0c8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800b0ca:	2509      	movs	r5, #9
 800b0cc:	340a      	adds	r4, #10
 800b0ce:	e7f6      	b.n	800b0be <__s2b+0x6a>
 800b0d0:	1b63      	subs	r3, r4, r5
 800b0d2:	5ddb      	ldrb	r3, [r3, r7]
 800b0d4:	220a      	movs	r2, #10
 800b0d6:	0030      	movs	r0, r6
 800b0d8:	3b30      	subs	r3, #48	; 0x30
 800b0da:	f7ff ff77 	bl	800afcc <__multadd>
 800b0de:	3701      	adds	r7, #1
 800b0e0:	0001      	movs	r1, r0
 800b0e2:	e7ed      	b.n	800b0c0 <__s2b+0x6c>
 800b0e4:	08012b59 	.word	0x08012b59
 800b0e8:	08012bca 	.word	0x08012bca

0800b0ec <__hi0bits>:
 800b0ec:	0003      	movs	r3, r0
 800b0ee:	0c02      	lsrs	r2, r0, #16
 800b0f0:	2000      	movs	r0, #0
 800b0f2:	4282      	cmp	r2, r0
 800b0f4:	d101      	bne.n	800b0fa <__hi0bits+0xe>
 800b0f6:	041b      	lsls	r3, r3, #16
 800b0f8:	3010      	adds	r0, #16
 800b0fa:	0e1a      	lsrs	r2, r3, #24
 800b0fc:	d101      	bne.n	800b102 <__hi0bits+0x16>
 800b0fe:	3008      	adds	r0, #8
 800b100:	021b      	lsls	r3, r3, #8
 800b102:	0f1a      	lsrs	r2, r3, #28
 800b104:	d101      	bne.n	800b10a <__hi0bits+0x1e>
 800b106:	3004      	adds	r0, #4
 800b108:	011b      	lsls	r3, r3, #4
 800b10a:	0f9a      	lsrs	r2, r3, #30
 800b10c:	d101      	bne.n	800b112 <__hi0bits+0x26>
 800b10e:	3002      	adds	r0, #2
 800b110:	009b      	lsls	r3, r3, #2
 800b112:	2b00      	cmp	r3, #0
 800b114:	db03      	blt.n	800b11e <__hi0bits+0x32>
 800b116:	3001      	adds	r0, #1
 800b118:	005b      	lsls	r3, r3, #1
 800b11a:	d400      	bmi.n	800b11e <__hi0bits+0x32>
 800b11c:	2020      	movs	r0, #32
 800b11e:	4770      	bx	lr

0800b120 <__lo0bits>:
 800b120:	6803      	ldr	r3, [r0, #0]
 800b122:	0001      	movs	r1, r0
 800b124:	2207      	movs	r2, #7
 800b126:	0018      	movs	r0, r3
 800b128:	4010      	ands	r0, r2
 800b12a:	4213      	tst	r3, r2
 800b12c:	d00d      	beq.n	800b14a <__lo0bits+0x2a>
 800b12e:	3a06      	subs	r2, #6
 800b130:	2000      	movs	r0, #0
 800b132:	4213      	tst	r3, r2
 800b134:	d105      	bne.n	800b142 <__lo0bits+0x22>
 800b136:	3002      	adds	r0, #2
 800b138:	4203      	tst	r3, r0
 800b13a:	d003      	beq.n	800b144 <__lo0bits+0x24>
 800b13c:	40d3      	lsrs	r3, r2
 800b13e:	0010      	movs	r0, r2
 800b140:	600b      	str	r3, [r1, #0]
 800b142:	4770      	bx	lr
 800b144:	089b      	lsrs	r3, r3, #2
 800b146:	600b      	str	r3, [r1, #0]
 800b148:	e7fb      	b.n	800b142 <__lo0bits+0x22>
 800b14a:	b29a      	uxth	r2, r3
 800b14c:	2a00      	cmp	r2, #0
 800b14e:	d101      	bne.n	800b154 <__lo0bits+0x34>
 800b150:	2010      	movs	r0, #16
 800b152:	0c1b      	lsrs	r3, r3, #16
 800b154:	b2da      	uxtb	r2, r3
 800b156:	2a00      	cmp	r2, #0
 800b158:	d101      	bne.n	800b15e <__lo0bits+0x3e>
 800b15a:	3008      	adds	r0, #8
 800b15c:	0a1b      	lsrs	r3, r3, #8
 800b15e:	071a      	lsls	r2, r3, #28
 800b160:	d101      	bne.n	800b166 <__lo0bits+0x46>
 800b162:	3004      	adds	r0, #4
 800b164:	091b      	lsrs	r3, r3, #4
 800b166:	079a      	lsls	r2, r3, #30
 800b168:	d101      	bne.n	800b16e <__lo0bits+0x4e>
 800b16a:	3002      	adds	r0, #2
 800b16c:	089b      	lsrs	r3, r3, #2
 800b16e:	07da      	lsls	r2, r3, #31
 800b170:	d4e9      	bmi.n	800b146 <__lo0bits+0x26>
 800b172:	3001      	adds	r0, #1
 800b174:	085b      	lsrs	r3, r3, #1
 800b176:	d1e6      	bne.n	800b146 <__lo0bits+0x26>
 800b178:	2020      	movs	r0, #32
 800b17a:	e7e2      	b.n	800b142 <__lo0bits+0x22>

0800b17c <__i2b>:
 800b17c:	b510      	push	{r4, lr}
 800b17e:	000c      	movs	r4, r1
 800b180:	2101      	movs	r1, #1
 800b182:	f7ff fef1 	bl	800af68 <_Balloc>
 800b186:	2800      	cmp	r0, #0
 800b188:	d107      	bne.n	800b19a <__i2b+0x1e>
 800b18a:	2146      	movs	r1, #70	; 0x46
 800b18c:	4c05      	ldr	r4, [pc, #20]	; (800b1a4 <__i2b+0x28>)
 800b18e:	0002      	movs	r2, r0
 800b190:	4b05      	ldr	r3, [pc, #20]	; (800b1a8 <__i2b+0x2c>)
 800b192:	0020      	movs	r0, r4
 800b194:	31ff      	adds	r1, #255	; 0xff
 800b196:	f003 f9ab 	bl	800e4f0 <__assert_func>
 800b19a:	2301      	movs	r3, #1
 800b19c:	6144      	str	r4, [r0, #20]
 800b19e:	6103      	str	r3, [r0, #16]
 800b1a0:	bd10      	pop	{r4, pc}
 800b1a2:	46c0      	nop			; (mov r8, r8)
 800b1a4:	08012bca 	.word	0x08012bca
 800b1a8:	08012b59 	.word	0x08012b59

0800b1ac <__multiply>:
 800b1ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b1ae:	0015      	movs	r5, r2
 800b1b0:	690a      	ldr	r2, [r1, #16]
 800b1b2:	692b      	ldr	r3, [r5, #16]
 800b1b4:	000c      	movs	r4, r1
 800b1b6:	b08b      	sub	sp, #44	; 0x2c
 800b1b8:	429a      	cmp	r2, r3
 800b1ba:	da01      	bge.n	800b1c0 <__multiply+0x14>
 800b1bc:	002c      	movs	r4, r5
 800b1be:	000d      	movs	r5, r1
 800b1c0:	6927      	ldr	r7, [r4, #16]
 800b1c2:	692e      	ldr	r6, [r5, #16]
 800b1c4:	6861      	ldr	r1, [r4, #4]
 800b1c6:	19bb      	adds	r3, r7, r6
 800b1c8:	9303      	str	r3, [sp, #12]
 800b1ca:	68a3      	ldr	r3, [r4, #8]
 800b1cc:	19ba      	adds	r2, r7, r6
 800b1ce:	4293      	cmp	r3, r2
 800b1d0:	da00      	bge.n	800b1d4 <__multiply+0x28>
 800b1d2:	3101      	adds	r1, #1
 800b1d4:	f7ff fec8 	bl	800af68 <_Balloc>
 800b1d8:	9002      	str	r0, [sp, #8]
 800b1da:	2800      	cmp	r0, #0
 800b1dc:	d106      	bne.n	800b1ec <__multiply+0x40>
 800b1de:	21b1      	movs	r1, #177	; 0xb1
 800b1e0:	4b48      	ldr	r3, [pc, #288]	; (800b304 <__multiply+0x158>)
 800b1e2:	4849      	ldr	r0, [pc, #292]	; (800b308 <__multiply+0x15c>)
 800b1e4:	9a02      	ldr	r2, [sp, #8]
 800b1e6:	0049      	lsls	r1, r1, #1
 800b1e8:	f003 f982 	bl	800e4f0 <__assert_func>
 800b1ec:	9b02      	ldr	r3, [sp, #8]
 800b1ee:	2200      	movs	r2, #0
 800b1f0:	3314      	adds	r3, #20
 800b1f2:	469c      	mov	ip, r3
 800b1f4:	19bb      	adds	r3, r7, r6
 800b1f6:	009b      	lsls	r3, r3, #2
 800b1f8:	4463      	add	r3, ip
 800b1fa:	9304      	str	r3, [sp, #16]
 800b1fc:	4663      	mov	r3, ip
 800b1fe:	9904      	ldr	r1, [sp, #16]
 800b200:	428b      	cmp	r3, r1
 800b202:	d32a      	bcc.n	800b25a <__multiply+0xae>
 800b204:	0023      	movs	r3, r4
 800b206:	00bf      	lsls	r7, r7, #2
 800b208:	3314      	adds	r3, #20
 800b20a:	3514      	adds	r5, #20
 800b20c:	9308      	str	r3, [sp, #32]
 800b20e:	00b6      	lsls	r6, r6, #2
 800b210:	19db      	adds	r3, r3, r7
 800b212:	9305      	str	r3, [sp, #20]
 800b214:	19ab      	adds	r3, r5, r6
 800b216:	9309      	str	r3, [sp, #36]	; 0x24
 800b218:	2304      	movs	r3, #4
 800b21a:	9306      	str	r3, [sp, #24]
 800b21c:	0023      	movs	r3, r4
 800b21e:	9a05      	ldr	r2, [sp, #20]
 800b220:	3315      	adds	r3, #21
 800b222:	9501      	str	r5, [sp, #4]
 800b224:	429a      	cmp	r2, r3
 800b226:	d305      	bcc.n	800b234 <__multiply+0x88>
 800b228:	1b13      	subs	r3, r2, r4
 800b22a:	3b15      	subs	r3, #21
 800b22c:	089b      	lsrs	r3, r3, #2
 800b22e:	3301      	adds	r3, #1
 800b230:	009b      	lsls	r3, r3, #2
 800b232:	9306      	str	r3, [sp, #24]
 800b234:	9b01      	ldr	r3, [sp, #4]
 800b236:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b238:	4293      	cmp	r3, r2
 800b23a:	d310      	bcc.n	800b25e <__multiply+0xb2>
 800b23c:	9b03      	ldr	r3, [sp, #12]
 800b23e:	2b00      	cmp	r3, #0
 800b240:	dd05      	ble.n	800b24e <__multiply+0xa2>
 800b242:	9b04      	ldr	r3, [sp, #16]
 800b244:	3b04      	subs	r3, #4
 800b246:	9304      	str	r3, [sp, #16]
 800b248:	681b      	ldr	r3, [r3, #0]
 800b24a:	2b00      	cmp	r3, #0
 800b24c:	d056      	beq.n	800b2fc <__multiply+0x150>
 800b24e:	9b02      	ldr	r3, [sp, #8]
 800b250:	9a03      	ldr	r2, [sp, #12]
 800b252:	0018      	movs	r0, r3
 800b254:	611a      	str	r2, [r3, #16]
 800b256:	b00b      	add	sp, #44	; 0x2c
 800b258:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b25a:	c304      	stmia	r3!, {r2}
 800b25c:	e7cf      	b.n	800b1fe <__multiply+0x52>
 800b25e:	9b01      	ldr	r3, [sp, #4]
 800b260:	6818      	ldr	r0, [r3, #0]
 800b262:	b280      	uxth	r0, r0
 800b264:	2800      	cmp	r0, #0
 800b266:	d01e      	beq.n	800b2a6 <__multiply+0xfa>
 800b268:	4667      	mov	r7, ip
 800b26a:	2500      	movs	r5, #0
 800b26c:	9e08      	ldr	r6, [sp, #32]
 800b26e:	ce02      	ldmia	r6!, {r1}
 800b270:	683b      	ldr	r3, [r7, #0]
 800b272:	9307      	str	r3, [sp, #28]
 800b274:	b28b      	uxth	r3, r1
 800b276:	4343      	muls	r3, r0
 800b278:	001a      	movs	r2, r3
 800b27a:	466b      	mov	r3, sp
 800b27c:	8b9b      	ldrh	r3, [r3, #28]
 800b27e:	18d3      	adds	r3, r2, r3
 800b280:	195b      	adds	r3, r3, r5
 800b282:	0c0d      	lsrs	r5, r1, #16
 800b284:	4345      	muls	r5, r0
 800b286:	9a07      	ldr	r2, [sp, #28]
 800b288:	0c11      	lsrs	r1, r2, #16
 800b28a:	1869      	adds	r1, r5, r1
 800b28c:	0c1a      	lsrs	r2, r3, #16
 800b28e:	188a      	adds	r2, r1, r2
 800b290:	b29b      	uxth	r3, r3
 800b292:	0c15      	lsrs	r5, r2, #16
 800b294:	0412      	lsls	r2, r2, #16
 800b296:	431a      	orrs	r2, r3
 800b298:	9b05      	ldr	r3, [sp, #20]
 800b29a:	c704      	stmia	r7!, {r2}
 800b29c:	42b3      	cmp	r3, r6
 800b29e:	d8e6      	bhi.n	800b26e <__multiply+0xc2>
 800b2a0:	4663      	mov	r3, ip
 800b2a2:	9a06      	ldr	r2, [sp, #24]
 800b2a4:	509d      	str	r5, [r3, r2]
 800b2a6:	9b01      	ldr	r3, [sp, #4]
 800b2a8:	6818      	ldr	r0, [r3, #0]
 800b2aa:	0c00      	lsrs	r0, r0, #16
 800b2ac:	d020      	beq.n	800b2f0 <__multiply+0x144>
 800b2ae:	4663      	mov	r3, ip
 800b2b0:	0025      	movs	r5, r4
 800b2b2:	4661      	mov	r1, ip
 800b2b4:	2700      	movs	r7, #0
 800b2b6:	681b      	ldr	r3, [r3, #0]
 800b2b8:	3514      	adds	r5, #20
 800b2ba:	682a      	ldr	r2, [r5, #0]
 800b2bc:	680e      	ldr	r6, [r1, #0]
 800b2be:	b292      	uxth	r2, r2
 800b2c0:	4342      	muls	r2, r0
 800b2c2:	0c36      	lsrs	r6, r6, #16
 800b2c4:	1992      	adds	r2, r2, r6
 800b2c6:	19d2      	adds	r2, r2, r7
 800b2c8:	0416      	lsls	r6, r2, #16
 800b2ca:	b29b      	uxth	r3, r3
 800b2cc:	431e      	orrs	r6, r3
 800b2ce:	600e      	str	r6, [r1, #0]
 800b2d0:	cd40      	ldmia	r5!, {r6}
 800b2d2:	684b      	ldr	r3, [r1, #4]
 800b2d4:	0c36      	lsrs	r6, r6, #16
 800b2d6:	4346      	muls	r6, r0
 800b2d8:	b29b      	uxth	r3, r3
 800b2da:	0c12      	lsrs	r2, r2, #16
 800b2dc:	18f3      	adds	r3, r6, r3
 800b2de:	189b      	adds	r3, r3, r2
 800b2e0:	9a05      	ldr	r2, [sp, #20]
 800b2e2:	0c1f      	lsrs	r7, r3, #16
 800b2e4:	3104      	adds	r1, #4
 800b2e6:	42aa      	cmp	r2, r5
 800b2e8:	d8e7      	bhi.n	800b2ba <__multiply+0x10e>
 800b2ea:	4662      	mov	r2, ip
 800b2ec:	9906      	ldr	r1, [sp, #24]
 800b2ee:	5053      	str	r3, [r2, r1]
 800b2f0:	9b01      	ldr	r3, [sp, #4]
 800b2f2:	3304      	adds	r3, #4
 800b2f4:	9301      	str	r3, [sp, #4]
 800b2f6:	2304      	movs	r3, #4
 800b2f8:	449c      	add	ip, r3
 800b2fa:	e79b      	b.n	800b234 <__multiply+0x88>
 800b2fc:	9b03      	ldr	r3, [sp, #12]
 800b2fe:	3b01      	subs	r3, #1
 800b300:	9303      	str	r3, [sp, #12]
 800b302:	e79b      	b.n	800b23c <__multiply+0x90>
 800b304:	08012b59 	.word	0x08012b59
 800b308:	08012bca 	.word	0x08012bca

0800b30c <__pow5mult>:
 800b30c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b30e:	2303      	movs	r3, #3
 800b310:	0015      	movs	r5, r2
 800b312:	0007      	movs	r7, r0
 800b314:	000e      	movs	r6, r1
 800b316:	401a      	ands	r2, r3
 800b318:	421d      	tst	r5, r3
 800b31a:	d008      	beq.n	800b32e <__pow5mult+0x22>
 800b31c:	491a      	ldr	r1, [pc, #104]	; (800b388 <__pow5mult+0x7c>)
 800b31e:	3a01      	subs	r2, #1
 800b320:	0092      	lsls	r2, r2, #2
 800b322:	5852      	ldr	r2, [r2, r1]
 800b324:	2300      	movs	r3, #0
 800b326:	0031      	movs	r1, r6
 800b328:	f7ff fe50 	bl	800afcc <__multadd>
 800b32c:	0006      	movs	r6, r0
 800b32e:	10ad      	asrs	r5, r5, #2
 800b330:	d027      	beq.n	800b382 <__pow5mult+0x76>
 800b332:	6c3c      	ldr	r4, [r7, #64]	; 0x40
 800b334:	2c00      	cmp	r4, #0
 800b336:	d107      	bne.n	800b348 <__pow5mult+0x3c>
 800b338:	0038      	movs	r0, r7
 800b33a:	4914      	ldr	r1, [pc, #80]	; (800b38c <__pow5mult+0x80>)
 800b33c:	f7ff ff1e 	bl	800b17c <__i2b>
 800b340:	2300      	movs	r3, #0
 800b342:	0004      	movs	r4, r0
 800b344:	6438      	str	r0, [r7, #64]	; 0x40
 800b346:	6003      	str	r3, [r0, #0]
 800b348:	2301      	movs	r3, #1
 800b34a:	421d      	tst	r5, r3
 800b34c:	d00a      	beq.n	800b364 <__pow5mult+0x58>
 800b34e:	0031      	movs	r1, r6
 800b350:	0022      	movs	r2, r4
 800b352:	0038      	movs	r0, r7
 800b354:	f7ff ff2a 	bl	800b1ac <__multiply>
 800b358:	0031      	movs	r1, r6
 800b35a:	9001      	str	r0, [sp, #4]
 800b35c:	0038      	movs	r0, r7
 800b35e:	f7ff fe2b 	bl	800afb8 <_Bfree>
 800b362:	9e01      	ldr	r6, [sp, #4]
 800b364:	106d      	asrs	r5, r5, #1
 800b366:	d00c      	beq.n	800b382 <__pow5mult+0x76>
 800b368:	6820      	ldr	r0, [r4, #0]
 800b36a:	2800      	cmp	r0, #0
 800b36c:	d107      	bne.n	800b37e <__pow5mult+0x72>
 800b36e:	0022      	movs	r2, r4
 800b370:	0021      	movs	r1, r4
 800b372:	0038      	movs	r0, r7
 800b374:	f7ff ff1a 	bl	800b1ac <__multiply>
 800b378:	2300      	movs	r3, #0
 800b37a:	6020      	str	r0, [r4, #0]
 800b37c:	6003      	str	r3, [r0, #0]
 800b37e:	0004      	movs	r4, r0
 800b380:	e7e2      	b.n	800b348 <__pow5mult+0x3c>
 800b382:	0030      	movs	r0, r6
 800b384:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800b386:	46c0      	nop			; (mov r8, r8)
 800b388:	08012d18 	.word	0x08012d18
 800b38c:	00000271 	.word	0x00000271

0800b390 <__lshift>:
 800b390:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b392:	000c      	movs	r4, r1
 800b394:	0017      	movs	r7, r2
 800b396:	6923      	ldr	r3, [r4, #16]
 800b398:	1155      	asrs	r5, r2, #5
 800b39a:	b087      	sub	sp, #28
 800b39c:	18eb      	adds	r3, r5, r3
 800b39e:	9302      	str	r3, [sp, #8]
 800b3a0:	3301      	adds	r3, #1
 800b3a2:	9301      	str	r3, [sp, #4]
 800b3a4:	6849      	ldr	r1, [r1, #4]
 800b3a6:	68a3      	ldr	r3, [r4, #8]
 800b3a8:	9004      	str	r0, [sp, #16]
 800b3aa:	9a01      	ldr	r2, [sp, #4]
 800b3ac:	4293      	cmp	r3, r2
 800b3ae:	db10      	blt.n	800b3d2 <__lshift+0x42>
 800b3b0:	9804      	ldr	r0, [sp, #16]
 800b3b2:	f7ff fdd9 	bl	800af68 <_Balloc>
 800b3b6:	2300      	movs	r3, #0
 800b3b8:	0002      	movs	r2, r0
 800b3ba:	0006      	movs	r6, r0
 800b3bc:	0019      	movs	r1, r3
 800b3be:	3214      	adds	r2, #20
 800b3c0:	4298      	cmp	r0, r3
 800b3c2:	d10c      	bne.n	800b3de <__lshift+0x4e>
 800b3c4:	31df      	adds	r1, #223	; 0xdf
 800b3c6:	0032      	movs	r2, r6
 800b3c8:	4b26      	ldr	r3, [pc, #152]	; (800b464 <__lshift+0xd4>)
 800b3ca:	4827      	ldr	r0, [pc, #156]	; (800b468 <__lshift+0xd8>)
 800b3cc:	31ff      	adds	r1, #255	; 0xff
 800b3ce:	f003 f88f 	bl	800e4f0 <__assert_func>
 800b3d2:	3101      	adds	r1, #1
 800b3d4:	005b      	lsls	r3, r3, #1
 800b3d6:	e7e8      	b.n	800b3aa <__lshift+0x1a>
 800b3d8:	0098      	lsls	r0, r3, #2
 800b3da:	5011      	str	r1, [r2, r0]
 800b3dc:	3301      	adds	r3, #1
 800b3de:	42ab      	cmp	r3, r5
 800b3e0:	dbfa      	blt.n	800b3d8 <__lshift+0x48>
 800b3e2:	43eb      	mvns	r3, r5
 800b3e4:	17db      	asrs	r3, r3, #31
 800b3e6:	401d      	ands	r5, r3
 800b3e8:	211f      	movs	r1, #31
 800b3ea:	0023      	movs	r3, r4
 800b3ec:	0038      	movs	r0, r7
 800b3ee:	00ad      	lsls	r5, r5, #2
 800b3f0:	1955      	adds	r5, r2, r5
 800b3f2:	6922      	ldr	r2, [r4, #16]
 800b3f4:	3314      	adds	r3, #20
 800b3f6:	0092      	lsls	r2, r2, #2
 800b3f8:	4008      	ands	r0, r1
 800b3fa:	4684      	mov	ip, r0
 800b3fc:	189a      	adds	r2, r3, r2
 800b3fe:	420f      	tst	r7, r1
 800b400:	d02a      	beq.n	800b458 <__lshift+0xc8>
 800b402:	3101      	adds	r1, #1
 800b404:	1a09      	subs	r1, r1, r0
 800b406:	9105      	str	r1, [sp, #20]
 800b408:	2100      	movs	r1, #0
 800b40a:	9503      	str	r5, [sp, #12]
 800b40c:	4667      	mov	r7, ip
 800b40e:	6818      	ldr	r0, [r3, #0]
 800b410:	40b8      	lsls	r0, r7
 800b412:	4308      	orrs	r0, r1
 800b414:	9903      	ldr	r1, [sp, #12]
 800b416:	c101      	stmia	r1!, {r0}
 800b418:	9103      	str	r1, [sp, #12]
 800b41a:	9805      	ldr	r0, [sp, #20]
 800b41c:	cb02      	ldmia	r3!, {r1}
 800b41e:	40c1      	lsrs	r1, r0
 800b420:	429a      	cmp	r2, r3
 800b422:	d8f3      	bhi.n	800b40c <__lshift+0x7c>
 800b424:	0020      	movs	r0, r4
 800b426:	3015      	adds	r0, #21
 800b428:	2304      	movs	r3, #4
 800b42a:	4282      	cmp	r2, r0
 800b42c:	d304      	bcc.n	800b438 <__lshift+0xa8>
 800b42e:	1b13      	subs	r3, r2, r4
 800b430:	3b15      	subs	r3, #21
 800b432:	089b      	lsrs	r3, r3, #2
 800b434:	3301      	adds	r3, #1
 800b436:	009b      	lsls	r3, r3, #2
 800b438:	50e9      	str	r1, [r5, r3]
 800b43a:	2900      	cmp	r1, #0
 800b43c:	d002      	beq.n	800b444 <__lshift+0xb4>
 800b43e:	9b02      	ldr	r3, [sp, #8]
 800b440:	3302      	adds	r3, #2
 800b442:	9301      	str	r3, [sp, #4]
 800b444:	9b01      	ldr	r3, [sp, #4]
 800b446:	9804      	ldr	r0, [sp, #16]
 800b448:	3b01      	subs	r3, #1
 800b44a:	0021      	movs	r1, r4
 800b44c:	6133      	str	r3, [r6, #16]
 800b44e:	f7ff fdb3 	bl	800afb8 <_Bfree>
 800b452:	0030      	movs	r0, r6
 800b454:	b007      	add	sp, #28
 800b456:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b458:	cb02      	ldmia	r3!, {r1}
 800b45a:	c502      	stmia	r5!, {r1}
 800b45c:	429a      	cmp	r2, r3
 800b45e:	d8fb      	bhi.n	800b458 <__lshift+0xc8>
 800b460:	e7f0      	b.n	800b444 <__lshift+0xb4>
 800b462:	46c0      	nop			; (mov r8, r8)
 800b464:	08012b59 	.word	0x08012b59
 800b468:	08012bca 	.word	0x08012bca

0800b46c <__mcmp>:
 800b46c:	b530      	push	{r4, r5, lr}
 800b46e:	690b      	ldr	r3, [r1, #16]
 800b470:	6904      	ldr	r4, [r0, #16]
 800b472:	0002      	movs	r2, r0
 800b474:	1ae0      	subs	r0, r4, r3
 800b476:	429c      	cmp	r4, r3
 800b478:	d10e      	bne.n	800b498 <__mcmp+0x2c>
 800b47a:	3214      	adds	r2, #20
 800b47c:	009b      	lsls	r3, r3, #2
 800b47e:	3114      	adds	r1, #20
 800b480:	0014      	movs	r4, r2
 800b482:	18c9      	adds	r1, r1, r3
 800b484:	18d2      	adds	r2, r2, r3
 800b486:	3a04      	subs	r2, #4
 800b488:	3904      	subs	r1, #4
 800b48a:	6815      	ldr	r5, [r2, #0]
 800b48c:	680b      	ldr	r3, [r1, #0]
 800b48e:	429d      	cmp	r5, r3
 800b490:	d003      	beq.n	800b49a <__mcmp+0x2e>
 800b492:	2001      	movs	r0, #1
 800b494:	429d      	cmp	r5, r3
 800b496:	d303      	bcc.n	800b4a0 <__mcmp+0x34>
 800b498:	bd30      	pop	{r4, r5, pc}
 800b49a:	4294      	cmp	r4, r2
 800b49c:	d3f3      	bcc.n	800b486 <__mcmp+0x1a>
 800b49e:	e7fb      	b.n	800b498 <__mcmp+0x2c>
 800b4a0:	4240      	negs	r0, r0
 800b4a2:	e7f9      	b.n	800b498 <__mcmp+0x2c>

0800b4a4 <__mdiff>:
 800b4a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b4a6:	000e      	movs	r6, r1
 800b4a8:	0007      	movs	r7, r0
 800b4aa:	0011      	movs	r1, r2
 800b4ac:	0030      	movs	r0, r6
 800b4ae:	b087      	sub	sp, #28
 800b4b0:	0014      	movs	r4, r2
 800b4b2:	f7ff ffdb 	bl	800b46c <__mcmp>
 800b4b6:	1e05      	subs	r5, r0, #0
 800b4b8:	d110      	bne.n	800b4dc <__mdiff+0x38>
 800b4ba:	0001      	movs	r1, r0
 800b4bc:	0038      	movs	r0, r7
 800b4be:	f7ff fd53 	bl	800af68 <_Balloc>
 800b4c2:	1e02      	subs	r2, r0, #0
 800b4c4:	d104      	bne.n	800b4d0 <__mdiff+0x2c>
 800b4c6:	4b3f      	ldr	r3, [pc, #252]	; (800b5c4 <__mdiff+0x120>)
 800b4c8:	483f      	ldr	r0, [pc, #252]	; (800b5c8 <__mdiff+0x124>)
 800b4ca:	4940      	ldr	r1, [pc, #256]	; (800b5cc <__mdiff+0x128>)
 800b4cc:	f003 f810 	bl	800e4f0 <__assert_func>
 800b4d0:	2301      	movs	r3, #1
 800b4d2:	6145      	str	r5, [r0, #20]
 800b4d4:	6103      	str	r3, [r0, #16]
 800b4d6:	0010      	movs	r0, r2
 800b4d8:	b007      	add	sp, #28
 800b4da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b4dc:	2301      	movs	r3, #1
 800b4de:	9301      	str	r3, [sp, #4]
 800b4e0:	2800      	cmp	r0, #0
 800b4e2:	db04      	blt.n	800b4ee <__mdiff+0x4a>
 800b4e4:	0023      	movs	r3, r4
 800b4e6:	0034      	movs	r4, r6
 800b4e8:	001e      	movs	r6, r3
 800b4ea:	2300      	movs	r3, #0
 800b4ec:	9301      	str	r3, [sp, #4]
 800b4ee:	0038      	movs	r0, r7
 800b4f0:	6861      	ldr	r1, [r4, #4]
 800b4f2:	f7ff fd39 	bl	800af68 <_Balloc>
 800b4f6:	1e02      	subs	r2, r0, #0
 800b4f8:	d103      	bne.n	800b502 <__mdiff+0x5e>
 800b4fa:	4b32      	ldr	r3, [pc, #200]	; (800b5c4 <__mdiff+0x120>)
 800b4fc:	4832      	ldr	r0, [pc, #200]	; (800b5c8 <__mdiff+0x124>)
 800b4fe:	4934      	ldr	r1, [pc, #208]	; (800b5d0 <__mdiff+0x12c>)
 800b500:	e7e4      	b.n	800b4cc <__mdiff+0x28>
 800b502:	9b01      	ldr	r3, [sp, #4]
 800b504:	2700      	movs	r7, #0
 800b506:	60c3      	str	r3, [r0, #12]
 800b508:	6920      	ldr	r0, [r4, #16]
 800b50a:	3414      	adds	r4, #20
 800b50c:	0083      	lsls	r3, r0, #2
 800b50e:	18e3      	adds	r3, r4, r3
 800b510:	0021      	movs	r1, r4
 800b512:	9401      	str	r4, [sp, #4]
 800b514:	0034      	movs	r4, r6
 800b516:	9302      	str	r3, [sp, #8]
 800b518:	6933      	ldr	r3, [r6, #16]
 800b51a:	3414      	adds	r4, #20
 800b51c:	009b      	lsls	r3, r3, #2
 800b51e:	18e3      	adds	r3, r4, r3
 800b520:	9303      	str	r3, [sp, #12]
 800b522:	0013      	movs	r3, r2
 800b524:	3314      	adds	r3, #20
 800b526:	469c      	mov	ip, r3
 800b528:	9305      	str	r3, [sp, #20]
 800b52a:	9104      	str	r1, [sp, #16]
 800b52c:	9b04      	ldr	r3, [sp, #16]
 800b52e:	cc02      	ldmia	r4!, {r1}
 800b530:	cb20      	ldmia	r3!, {r5}
 800b532:	9304      	str	r3, [sp, #16]
 800b534:	b2ab      	uxth	r3, r5
 800b536:	19df      	adds	r7, r3, r7
 800b538:	b28b      	uxth	r3, r1
 800b53a:	1afb      	subs	r3, r7, r3
 800b53c:	0c09      	lsrs	r1, r1, #16
 800b53e:	0c2d      	lsrs	r5, r5, #16
 800b540:	1a6d      	subs	r5, r5, r1
 800b542:	1419      	asrs	r1, r3, #16
 800b544:	1869      	adds	r1, r5, r1
 800b546:	b29b      	uxth	r3, r3
 800b548:	140f      	asrs	r7, r1, #16
 800b54a:	0409      	lsls	r1, r1, #16
 800b54c:	4319      	orrs	r1, r3
 800b54e:	4663      	mov	r3, ip
 800b550:	c302      	stmia	r3!, {r1}
 800b552:	469c      	mov	ip, r3
 800b554:	9b03      	ldr	r3, [sp, #12]
 800b556:	42a3      	cmp	r3, r4
 800b558:	d8e8      	bhi.n	800b52c <__mdiff+0x88>
 800b55a:	0031      	movs	r1, r6
 800b55c:	9c03      	ldr	r4, [sp, #12]
 800b55e:	3115      	adds	r1, #21
 800b560:	2304      	movs	r3, #4
 800b562:	428c      	cmp	r4, r1
 800b564:	d304      	bcc.n	800b570 <__mdiff+0xcc>
 800b566:	1ba3      	subs	r3, r4, r6
 800b568:	3b15      	subs	r3, #21
 800b56a:	089b      	lsrs	r3, r3, #2
 800b56c:	3301      	adds	r3, #1
 800b56e:	009b      	lsls	r3, r3, #2
 800b570:	9901      	ldr	r1, [sp, #4]
 800b572:	18cd      	adds	r5, r1, r3
 800b574:	9905      	ldr	r1, [sp, #20]
 800b576:	002e      	movs	r6, r5
 800b578:	18cb      	adds	r3, r1, r3
 800b57a:	469c      	mov	ip, r3
 800b57c:	9902      	ldr	r1, [sp, #8]
 800b57e:	428e      	cmp	r6, r1
 800b580:	d310      	bcc.n	800b5a4 <__mdiff+0x100>
 800b582:	9e02      	ldr	r6, [sp, #8]
 800b584:	1ee9      	subs	r1, r5, #3
 800b586:	2400      	movs	r4, #0
 800b588:	428e      	cmp	r6, r1
 800b58a:	d304      	bcc.n	800b596 <__mdiff+0xf2>
 800b58c:	0031      	movs	r1, r6
 800b58e:	3103      	adds	r1, #3
 800b590:	1b49      	subs	r1, r1, r5
 800b592:	0889      	lsrs	r1, r1, #2
 800b594:	008c      	lsls	r4, r1, #2
 800b596:	191b      	adds	r3, r3, r4
 800b598:	3b04      	subs	r3, #4
 800b59a:	6819      	ldr	r1, [r3, #0]
 800b59c:	2900      	cmp	r1, #0
 800b59e:	d00f      	beq.n	800b5c0 <__mdiff+0x11c>
 800b5a0:	6110      	str	r0, [r2, #16]
 800b5a2:	e798      	b.n	800b4d6 <__mdiff+0x32>
 800b5a4:	ce02      	ldmia	r6!, {r1}
 800b5a6:	b28c      	uxth	r4, r1
 800b5a8:	19e4      	adds	r4, r4, r7
 800b5aa:	0c0f      	lsrs	r7, r1, #16
 800b5ac:	1421      	asrs	r1, r4, #16
 800b5ae:	1879      	adds	r1, r7, r1
 800b5b0:	b2a4      	uxth	r4, r4
 800b5b2:	140f      	asrs	r7, r1, #16
 800b5b4:	0409      	lsls	r1, r1, #16
 800b5b6:	4321      	orrs	r1, r4
 800b5b8:	4664      	mov	r4, ip
 800b5ba:	c402      	stmia	r4!, {r1}
 800b5bc:	46a4      	mov	ip, r4
 800b5be:	e7dd      	b.n	800b57c <__mdiff+0xd8>
 800b5c0:	3801      	subs	r0, #1
 800b5c2:	e7e9      	b.n	800b598 <__mdiff+0xf4>
 800b5c4:	08012b59 	.word	0x08012b59
 800b5c8:	08012bca 	.word	0x08012bca
 800b5cc:	00000237 	.word	0x00000237
 800b5d0:	00000245 	.word	0x00000245

0800b5d4 <__ulp>:
 800b5d4:	2000      	movs	r0, #0
 800b5d6:	4b0b      	ldr	r3, [pc, #44]	; (800b604 <__ulp+0x30>)
 800b5d8:	4019      	ands	r1, r3
 800b5da:	4b0b      	ldr	r3, [pc, #44]	; (800b608 <__ulp+0x34>)
 800b5dc:	18c9      	adds	r1, r1, r3
 800b5de:	4281      	cmp	r1, r0
 800b5e0:	dc06      	bgt.n	800b5f0 <__ulp+0x1c>
 800b5e2:	4249      	negs	r1, r1
 800b5e4:	150b      	asrs	r3, r1, #20
 800b5e6:	2b13      	cmp	r3, #19
 800b5e8:	dc03      	bgt.n	800b5f2 <__ulp+0x1e>
 800b5ea:	2180      	movs	r1, #128	; 0x80
 800b5ec:	0309      	lsls	r1, r1, #12
 800b5ee:	4119      	asrs	r1, r3
 800b5f0:	4770      	bx	lr
 800b5f2:	3b14      	subs	r3, #20
 800b5f4:	2001      	movs	r0, #1
 800b5f6:	2b1e      	cmp	r3, #30
 800b5f8:	dc02      	bgt.n	800b600 <__ulp+0x2c>
 800b5fa:	2080      	movs	r0, #128	; 0x80
 800b5fc:	0600      	lsls	r0, r0, #24
 800b5fe:	40d8      	lsrs	r0, r3
 800b600:	2100      	movs	r1, #0
 800b602:	e7f5      	b.n	800b5f0 <__ulp+0x1c>
 800b604:	7ff00000 	.word	0x7ff00000
 800b608:	fcc00000 	.word	0xfcc00000

0800b60c <__b2d>:
 800b60c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b60e:	0006      	movs	r6, r0
 800b610:	6903      	ldr	r3, [r0, #16]
 800b612:	3614      	adds	r6, #20
 800b614:	009b      	lsls	r3, r3, #2
 800b616:	18f3      	adds	r3, r6, r3
 800b618:	1f1d      	subs	r5, r3, #4
 800b61a:	682c      	ldr	r4, [r5, #0]
 800b61c:	000f      	movs	r7, r1
 800b61e:	0020      	movs	r0, r4
 800b620:	9301      	str	r3, [sp, #4]
 800b622:	f7ff fd63 	bl	800b0ec <__hi0bits>
 800b626:	2220      	movs	r2, #32
 800b628:	1a12      	subs	r2, r2, r0
 800b62a:	603a      	str	r2, [r7, #0]
 800b62c:	0003      	movs	r3, r0
 800b62e:	4a1c      	ldr	r2, [pc, #112]	; (800b6a0 <__b2d+0x94>)
 800b630:	280a      	cmp	r0, #10
 800b632:	dc15      	bgt.n	800b660 <__b2d+0x54>
 800b634:	210b      	movs	r1, #11
 800b636:	0027      	movs	r7, r4
 800b638:	1a09      	subs	r1, r1, r0
 800b63a:	40cf      	lsrs	r7, r1
 800b63c:	433a      	orrs	r2, r7
 800b63e:	468c      	mov	ip, r1
 800b640:	0011      	movs	r1, r2
 800b642:	2200      	movs	r2, #0
 800b644:	42ae      	cmp	r6, r5
 800b646:	d202      	bcs.n	800b64e <__b2d+0x42>
 800b648:	9a01      	ldr	r2, [sp, #4]
 800b64a:	3a08      	subs	r2, #8
 800b64c:	6812      	ldr	r2, [r2, #0]
 800b64e:	3315      	adds	r3, #21
 800b650:	409c      	lsls	r4, r3
 800b652:	4663      	mov	r3, ip
 800b654:	0027      	movs	r7, r4
 800b656:	40da      	lsrs	r2, r3
 800b658:	4317      	orrs	r7, r2
 800b65a:	0038      	movs	r0, r7
 800b65c:	b003      	add	sp, #12
 800b65e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b660:	2700      	movs	r7, #0
 800b662:	42ae      	cmp	r6, r5
 800b664:	d202      	bcs.n	800b66c <__b2d+0x60>
 800b666:	9d01      	ldr	r5, [sp, #4]
 800b668:	3d08      	subs	r5, #8
 800b66a:	682f      	ldr	r7, [r5, #0]
 800b66c:	210b      	movs	r1, #11
 800b66e:	4249      	negs	r1, r1
 800b670:	468c      	mov	ip, r1
 800b672:	449c      	add	ip, r3
 800b674:	2b0b      	cmp	r3, #11
 800b676:	d010      	beq.n	800b69a <__b2d+0x8e>
 800b678:	4661      	mov	r1, ip
 800b67a:	2320      	movs	r3, #32
 800b67c:	408c      	lsls	r4, r1
 800b67e:	1a5b      	subs	r3, r3, r1
 800b680:	0039      	movs	r1, r7
 800b682:	40d9      	lsrs	r1, r3
 800b684:	430c      	orrs	r4, r1
 800b686:	4322      	orrs	r2, r4
 800b688:	0011      	movs	r1, r2
 800b68a:	2200      	movs	r2, #0
 800b68c:	42b5      	cmp	r5, r6
 800b68e:	d901      	bls.n	800b694 <__b2d+0x88>
 800b690:	3d04      	subs	r5, #4
 800b692:	682a      	ldr	r2, [r5, #0]
 800b694:	4664      	mov	r4, ip
 800b696:	40a7      	lsls	r7, r4
 800b698:	e7dd      	b.n	800b656 <__b2d+0x4a>
 800b69a:	4322      	orrs	r2, r4
 800b69c:	0011      	movs	r1, r2
 800b69e:	e7dc      	b.n	800b65a <__b2d+0x4e>
 800b6a0:	3ff00000 	.word	0x3ff00000

0800b6a4 <__d2b>:
 800b6a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b6a6:	2101      	movs	r1, #1
 800b6a8:	0014      	movs	r4, r2
 800b6aa:	001d      	movs	r5, r3
 800b6ac:	9f08      	ldr	r7, [sp, #32]
 800b6ae:	f7ff fc5b 	bl	800af68 <_Balloc>
 800b6b2:	1e06      	subs	r6, r0, #0
 800b6b4:	d105      	bne.n	800b6c2 <__d2b+0x1e>
 800b6b6:	0032      	movs	r2, r6
 800b6b8:	4b24      	ldr	r3, [pc, #144]	; (800b74c <__d2b+0xa8>)
 800b6ba:	4825      	ldr	r0, [pc, #148]	; (800b750 <__d2b+0xac>)
 800b6bc:	4925      	ldr	r1, [pc, #148]	; (800b754 <__d2b+0xb0>)
 800b6be:	f002 ff17 	bl	800e4f0 <__assert_func>
 800b6c2:	032b      	lsls	r3, r5, #12
 800b6c4:	006d      	lsls	r5, r5, #1
 800b6c6:	0b1b      	lsrs	r3, r3, #12
 800b6c8:	0d6d      	lsrs	r5, r5, #21
 800b6ca:	d125      	bne.n	800b718 <__d2b+0x74>
 800b6cc:	9301      	str	r3, [sp, #4]
 800b6ce:	2c00      	cmp	r4, #0
 800b6d0:	d028      	beq.n	800b724 <__d2b+0x80>
 800b6d2:	4668      	mov	r0, sp
 800b6d4:	9400      	str	r4, [sp, #0]
 800b6d6:	f7ff fd23 	bl	800b120 <__lo0bits>
 800b6da:	9b01      	ldr	r3, [sp, #4]
 800b6dc:	9900      	ldr	r1, [sp, #0]
 800b6de:	2800      	cmp	r0, #0
 800b6e0:	d01e      	beq.n	800b720 <__d2b+0x7c>
 800b6e2:	2220      	movs	r2, #32
 800b6e4:	001c      	movs	r4, r3
 800b6e6:	1a12      	subs	r2, r2, r0
 800b6e8:	4094      	lsls	r4, r2
 800b6ea:	0022      	movs	r2, r4
 800b6ec:	40c3      	lsrs	r3, r0
 800b6ee:	430a      	orrs	r2, r1
 800b6f0:	6172      	str	r2, [r6, #20]
 800b6f2:	9301      	str	r3, [sp, #4]
 800b6f4:	9c01      	ldr	r4, [sp, #4]
 800b6f6:	61b4      	str	r4, [r6, #24]
 800b6f8:	1e63      	subs	r3, r4, #1
 800b6fa:	419c      	sbcs	r4, r3
 800b6fc:	3401      	adds	r4, #1
 800b6fe:	6134      	str	r4, [r6, #16]
 800b700:	2d00      	cmp	r5, #0
 800b702:	d017      	beq.n	800b734 <__d2b+0x90>
 800b704:	2435      	movs	r4, #53	; 0x35
 800b706:	4b14      	ldr	r3, [pc, #80]	; (800b758 <__d2b+0xb4>)
 800b708:	18ed      	adds	r5, r5, r3
 800b70a:	182d      	adds	r5, r5, r0
 800b70c:	603d      	str	r5, [r7, #0]
 800b70e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b710:	1a24      	subs	r4, r4, r0
 800b712:	601c      	str	r4, [r3, #0]
 800b714:	0030      	movs	r0, r6
 800b716:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800b718:	2280      	movs	r2, #128	; 0x80
 800b71a:	0352      	lsls	r2, r2, #13
 800b71c:	4313      	orrs	r3, r2
 800b71e:	e7d5      	b.n	800b6cc <__d2b+0x28>
 800b720:	6171      	str	r1, [r6, #20]
 800b722:	e7e7      	b.n	800b6f4 <__d2b+0x50>
 800b724:	a801      	add	r0, sp, #4
 800b726:	f7ff fcfb 	bl	800b120 <__lo0bits>
 800b72a:	9b01      	ldr	r3, [sp, #4]
 800b72c:	2401      	movs	r4, #1
 800b72e:	6173      	str	r3, [r6, #20]
 800b730:	3020      	adds	r0, #32
 800b732:	e7e4      	b.n	800b6fe <__d2b+0x5a>
 800b734:	4b09      	ldr	r3, [pc, #36]	; (800b75c <__d2b+0xb8>)
 800b736:	18c0      	adds	r0, r0, r3
 800b738:	4b09      	ldr	r3, [pc, #36]	; (800b760 <__d2b+0xbc>)
 800b73a:	6038      	str	r0, [r7, #0]
 800b73c:	18e3      	adds	r3, r4, r3
 800b73e:	009b      	lsls	r3, r3, #2
 800b740:	18f3      	adds	r3, r6, r3
 800b742:	6958      	ldr	r0, [r3, #20]
 800b744:	f7ff fcd2 	bl	800b0ec <__hi0bits>
 800b748:	0164      	lsls	r4, r4, #5
 800b74a:	e7e0      	b.n	800b70e <__d2b+0x6a>
 800b74c:	08012b59 	.word	0x08012b59
 800b750:	08012bca 	.word	0x08012bca
 800b754:	0000030f 	.word	0x0000030f
 800b758:	fffffbcd 	.word	0xfffffbcd
 800b75c:	fffffbce 	.word	0xfffffbce
 800b760:	3fffffff 	.word	0x3fffffff

0800b764 <__ratio>:
 800b764:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b766:	b087      	sub	sp, #28
 800b768:	000f      	movs	r7, r1
 800b76a:	a904      	add	r1, sp, #16
 800b76c:	0006      	movs	r6, r0
 800b76e:	f7ff ff4d 	bl	800b60c <__b2d>
 800b772:	9000      	str	r0, [sp, #0]
 800b774:	9101      	str	r1, [sp, #4]
 800b776:	9c00      	ldr	r4, [sp, #0]
 800b778:	9d01      	ldr	r5, [sp, #4]
 800b77a:	0038      	movs	r0, r7
 800b77c:	a905      	add	r1, sp, #20
 800b77e:	f7ff ff45 	bl	800b60c <__b2d>
 800b782:	9002      	str	r0, [sp, #8]
 800b784:	9103      	str	r1, [sp, #12]
 800b786:	9a02      	ldr	r2, [sp, #8]
 800b788:	9b03      	ldr	r3, [sp, #12]
 800b78a:	6930      	ldr	r0, [r6, #16]
 800b78c:	6939      	ldr	r1, [r7, #16]
 800b78e:	9e04      	ldr	r6, [sp, #16]
 800b790:	1a40      	subs	r0, r0, r1
 800b792:	9905      	ldr	r1, [sp, #20]
 800b794:	0140      	lsls	r0, r0, #5
 800b796:	1a71      	subs	r1, r6, r1
 800b798:	1841      	adds	r1, r0, r1
 800b79a:	0508      	lsls	r0, r1, #20
 800b79c:	2900      	cmp	r1, #0
 800b79e:	dd07      	ble.n	800b7b0 <__ratio+0x4c>
 800b7a0:	9901      	ldr	r1, [sp, #4]
 800b7a2:	1845      	adds	r5, r0, r1
 800b7a4:	0020      	movs	r0, r4
 800b7a6:	0029      	movs	r1, r5
 800b7a8:	f7f5 fb66 	bl	8000e78 <__aeabi_ddiv>
 800b7ac:	b007      	add	sp, #28
 800b7ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b7b0:	9903      	ldr	r1, [sp, #12]
 800b7b2:	1a0b      	subs	r3, r1, r0
 800b7b4:	e7f6      	b.n	800b7a4 <__ratio+0x40>

0800b7b6 <__copybits>:
 800b7b6:	b570      	push	{r4, r5, r6, lr}
 800b7b8:	0014      	movs	r4, r2
 800b7ba:	0005      	movs	r5, r0
 800b7bc:	3901      	subs	r1, #1
 800b7be:	6913      	ldr	r3, [r2, #16]
 800b7c0:	1149      	asrs	r1, r1, #5
 800b7c2:	3101      	adds	r1, #1
 800b7c4:	0089      	lsls	r1, r1, #2
 800b7c6:	3414      	adds	r4, #20
 800b7c8:	009b      	lsls	r3, r3, #2
 800b7ca:	1841      	adds	r1, r0, r1
 800b7cc:	18e3      	adds	r3, r4, r3
 800b7ce:	42a3      	cmp	r3, r4
 800b7d0:	d80d      	bhi.n	800b7ee <__copybits+0x38>
 800b7d2:	0014      	movs	r4, r2
 800b7d4:	3411      	adds	r4, #17
 800b7d6:	2500      	movs	r5, #0
 800b7d8:	429c      	cmp	r4, r3
 800b7da:	d803      	bhi.n	800b7e4 <__copybits+0x2e>
 800b7dc:	1a9b      	subs	r3, r3, r2
 800b7de:	3b11      	subs	r3, #17
 800b7e0:	089b      	lsrs	r3, r3, #2
 800b7e2:	009d      	lsls	r5, r3, #2
 800b7e4:	2300      	movs	r3, #0
 800b7e6:	1940      	adds	r0, r0, r5
 800b7e8:	4281      	cmp	r1, r0
 800b7ea:	d803      	bhi.n	800b7f4 <__copybits+0x3e>
 800b7ec:	bd70      	pop	{r4, r5, r6, pc}
 800b7ee:	cc40      	ldmia	r4!, {r6}
 800b7f0:	c540      	stmia	r5!, {r6}
 800b7f2:	e7ec      	b.n	800b7ce <__copybits+0x18>
 800b7f4:	c008      	stmia	r0!, {r3}
 800b7f6:	e7f7      	b.n	800b7e8 <__copybits+0x32>

0800b7f8 <__any_on>:
 800b7f8:	0002      	movs	r2, r0
 800b7fa:	6900      	ldr	r0, [r0, #16]
 800b7fc:	b510      	push	{r4, lr}
 800b7fe:	3214      	adds	r2, #20
 800b800:	114b      	asrs	r3, r1, #5
 800b802:	4298      	cmp	r0, r3
 800b804:	db13      	blt.n	800b82e <__any_on+0x36>
 800b806:	dd0c      	ble.n	800b822 <__any_on+0x2a>
 800b808:	241f      	movs	r4, #31
 800b80a:	0008      	movs	r0, r1
 800b80c:	4020      	ands	r0, r4
 800b80e:	4221      	tst	r1, r4
 800b810:	d007      	beq.n	800b822 <__any_on+0x2a>
 800b812:	0099      	lsls	r1, r3, #2
 800b814:	588c      	ldr	r4, [r1, r2]
 800b816:	0021      	movs	r1, r4
 800b818:	40c1      	lsrs	r1, r0
 800b81a:	4081      	lsls	r1, r0
 800b81c:	2001      	movs	r0, #1
 800b81e:	428c      	cmp	r4, r1
 800b820:	d104      	bne.n	800b82c <__any_on+0x34>
 800b822:	009b      	lsls	r3, r3, #2
 800b824:	18d3      	adds	r3, r2, r3
 800b826:	4293      	cmp	r3, r2
 800b828:	d803      	bhi.n	800b832 <__any_on+0x3a>
 800b82a:	2000      	movs	r0, #0
 800b82c:	bd10      	pop	{r4, pc}
 800b82e:	0003      	movs	r3, r0
 800b830:	e7f7      	b.n	800b822 <__any_on+0x2a>
 800b832:	3b04      	subs	r3, #4
 800b834:	6819      	ldr	r1, [r3, #0]
 800b836:	2900      	cmp	r1, #0
 800b838:	d0f5      	beq.n	800b826 <__any_on+0x2e>
 800b83a:	2001      	movs	r0, #1
 800b83c:	e7f6      	b.n	800b82c <__any_on+0x34>

0800b83e <__ascii_wctomb>:
 800b83e:	0003      	movs	r3, r0
 800b840:	1e08      	subs	r0, r1, #0
 800b842:	d005      	beq.n	800b850 <__ascii_wctomb+0x12>
 800b844:	2aff      	cmp	r2, #255	; 0xff
 800b846:	d904      	bls.n	800b852 <__ascii_wctomb+0x14>
 800b848:	228a      	movs	r2, #138	; 0x8a
 800b84a:	2001      	movs	r0, #1
 800b84c:	601a      	str	r2, [r3, #0]
 800b84e:	4240      	negs	r0, r0
 800b850:	4770      	bx	lr
 800b852:	2001      	movs	r0, #1
 800b854:	700a      	strb	r2, [r1, #0]
 800b856:	e7fb      	b.n	800b850 <__ascii_wctomb+0x12>

0800b858 <_svfprintf_r>:
 800b858:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b85a:	b0d9      	sub	sp, #356	; 0x164
 800b85c:	001c      	movs	r4, r3
 800b85e:	910b      	str	r1, [sp, #44]	; 0x2c
 800b860:	9208      	str	r2, [sp, #32]
 800b862:	900a      	str	r0, [sp, #40]	; 0x28
 800b864:	f002 fdae 	bl	800e3c4 <_localeconv_r>
 800b868:	6803      	ldr	r3, [r0, #0]
 800b86a:	0018      	movs	r0, r3
 800b86c:	931c      	str	r3, [sp, #112]	; 0x70
 800b86e:	f7f4 fc49 	bl	8000104 <strlen>
 800b872:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b874:	9016      	str	r0, [sp, #88]	; 0x58
 800b876:	899b      	ldrh	r3, [r3, #12]
 800b878:	061b      	lsls	r3, r3, #24
 800b87a:	d517      	bpl.n	800b8ac <_svfprintf_r+0x54>
 800b87c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b87e:	691b      	ldr	r3, [r3, #16]
 800b880:	2b00      	cmp	r3, #0
 800b882:	d113      	bne.n	800b8ac <_svfprintf_r+0x54>
 800b884:	2140      	movs	r1, #64	; 0x40
 800b886:	980a      	ldr	r0, [sp, #40]	; 0x28
 800b888:	f7fd fb7c 	bl	8008f84 <_malloc_r>
 800b88c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b88e:	6018      	str	r0, [r3, #0]
 800b890:	6118      	str	r0, [r3, #16]
 800b892:	2800      	cmp	r0, #0
 800b894:	d107      	bne.n	800b8a6 <_svfprintf_r+0x4e>
 800b896:	230c      	movs	r3, #12
 800b898:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b89a:	6013      	str	r3, [r2, #0]
 800b89c:	3b0d      	subs	r3, #13
 800b89e:	9317      	str	r3, [sp, #92]	; 0x5c
 800b8a0:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800b8a2:	b059      	add	sp, #356	; 0x164
 800b8a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b8a6:	2340      	movs	r3, #64	; 0x40
 800b8a8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b8aa:	6153      	str	r3, [r2, #20]
 800b8ac:	2300      	movs	r3, #0
 800b8ae:	2200      	movs	r2, #0
 800b8b0:	932e      	str	r3, [sp, #184]	; 0xb8
 800b8b2:	932d      	str	r3, [sp, #180]	; 0xb4
 800b8b4:	930e      	str	r3, [sp, #56]	; 0x38
 800b8b6:	2300      	movs	r3, #0
 800b8b8:	9214      	str	r2, [sp, #80]	; 0x50
 800b8ba:	9315      	str	r3, [sp, #84]	; 0x54
 800b8bc:	2300      	movs	r3, #0
 800b8be:	af2f      	add	r7, sp, #188	; 0xbc
 800b8c0:	972c      	str	r7, [sp, #176]	; 0xb0
 800b8c2:	931f      	str	r3, [sp, #124]	; 0x7c
 800b8c4:	931e      	str	r3, [sp, #120]	; 0x78
 800b8c6:	9312      	str	r3, [sp, #72]	; 0x48
 800b8c8:	931b      	str	r3, [sp, #108]	; 0x6c
 800b8ca:	931d      	str	r3, [sp, #116]	; 0x74
 800b8cc:	9317      	str	r3, [sp, #92]	; 0x5c
 800b8ce:	9d08      	ldr	r5, [sp, #32]
 800b8d0:	782b      	ldrb	r3, [r5, #0]
 800b8d2:	2b00      	cmp	r3, #0
 800b8d4:	d002      	beq.n	800b8dc <_svfprintf_r+0x84>
 800b8d6:	2b25      	cmp	r3, #37	; 0x25
 800b8d8:	d000      	beq.n	800b8dc <_svfprintf_r+0x84>
 800b8da:	e091      	b.n	800ba00 <_svfprintf_r+0x1a8>
 800b8dc:	9b08      	ldr	r3, [sp, #32]
 800b8de:	1aee      	subs	r6, r5, r3
 800b8e0:	429d      	cmp	r5, r3
 800b8e2:	d016      	beq.n	800b912 <_svfprintf_r+0xba>
 800b8e4:	603b      	str	r3, [r7, #0]
 800b8e6:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800b8e8:	607e      	str	r6, [r7, #4]
 800b8ea:	199b      	adds	r3, r3, r6
 800b8ec:	932e      	str	r3, [sp, #184]	; 0xb8
 800b8ee:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800b8f0:	3708      	adds	r7, #8
 800b8f2:	3301      	adds	r3, #1
 800b8f4:	932d      	str	r3, [sp, #180]	; 0xb4
 800b8f6:	2b07      	cmp	r3, #7
 800b8f8:	dd08      	ble.n	800b90c <_svfprintf_r+0xb4>
 800b8fa:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b8fc:	980a      	ldr	r0, [sp, #40]	; 0x28
 800b8fe:	aa2c      	add	r2, sp, #176	; 0xb0
 800b900:	f004 f8c0 	bl	800fa84 <__ssprint_r>
 800b904:	2800      	cmp	r0, #0
 800b906:	d000      	beq.n	800b90a <_svfprintf_r+0xb2>
 800b908:	e1cf      	b.n	800bcaa <_svfprintf_r+0x452>
 800b90a:	af2f      	add	r7, sp, #188	; 0xbc
 800b90c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b90e:	199b      	adds	r3, r3, r6
 800b910:	9317      	str	r3, [sp, #92]	; 0x5c
 800b912:	782b      	ldrb	r3, [r5, #0]
 800b914:	2b00      	cmp	r3, #0
 800b916:	d101      	bne.n	800b91c <_svfprintf_r+0xc4>
 800b918:	f001 f99e 	bl	800cc58 <_svfprintf_r+0x1400>
 800b91c:	221b      	movs	r2, #27
 800b91e:	2300      	movs	r3, #0
 800b920:	a91e      	add	r1, sp, #120	; 0x78
 800b922:	1852      	adds	r2, r2, r1
 800b924:	7013      	strb	r3, [r2, #0]
 800b926:	2201      	movs	r2, #1
 800b928:	001e      	movs	r6, r3
 800b92a:	4252      	negs	r2, r2
 800b92c:	3501      	adds	r5, #1
 800b92e:	9209      	str	r2, [sp, #36]	; 0x24
 800b930:	9318      	str	r3, [sp, #96]	; 0x60
 800b932:	1c6b      	adds	r3, r5, #1
 800b934:	9313      	str	r3, [sp, #76]	; 0x4c
 800b936:	782b      	ldrb	r3, [r5, #0]
 800b938:	930f      	str	r3, [sp, #60]	; 0x3c
 800b93a:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800b93c:	3820      	subs	r0, #32
 800b93e:	285a      	cmp	r0, #90	; 0x5a
 800b940:	d901      	bls.n	800b946 <_svfprintf_r+0xee>
 800b942:	f000 fe20 	bl	800c586 <_svfprintf_r+0xd2e>
 800b946:	f7f4 fbef 	bl	8000128 <__gnu_thumb1_case_uhi>
 800b94a:	0078      	.short	0x0078
 800b94c:	061e061e 	.word	0x061e061e
 800b950:	061e0082 	.word	0x061e0082
 800b954:	061e061e 	.word	0x061e061e
 800b958:	061e005d 	.word	0x061e005d
 800b95c:	0084061e 	.word	0x0084061e
 800b960:	061e008c 	.word	0x061e008c
 800b964:	0091008a 	.word	0x0091008a
 800b968:	00b2061e 	.word	0x00b2061e
 800b96c:	00b400b4 	.word	0x00b400b4
 800b970:	00b400b4 	.word	0x00b400b4
 800b974:	00b400b4 	.word	0x00b400b4
 800b978:	00b400b4 	.word	0x00b400b4
 800b97c:	061e00b4 	.word	0x061e00b4
 800b980:	061e061e 	.word	0x061e061e
 800b984:	061e061e 	.word	0x061e061e
 800b988:	061e061e 	.word	0x061e061e
 800b98c:	061e013b 	.word	0x061e013b
 800b990:	00f400e0 	.word	0x00f400e0
 800b994:	013b013b 	.word	0x013b013b
 800b998:	061e013b 	.word	0x061e013b
 800b99c:	061e061e 	.word	0x061e061e
 800b9a0:	00c7061e 	.word	0x00c7061e
 800b9a4:	061e061e 	.word	0x061e061e
 800b9a8:	061e04c7 	.word	0x061e04c7
 800b9ac:	061e061e 	.word	0x061e061e
 800b9b0:	061e050a 	.word	0x061e050a
 800b9b4:	061e052a 	.word	0x061e052a
 800b9b8:	055c061e 	.word	0x055c061e
 800b9bc:	061e061e 	.word	0x061e061e
 800b9c0:	061e061e 	.word	0x061e061e
 800b9c4:	061e061e 	.word	0x061e061e
 800b9c8:	061e061e 	.word	0x061e061e
 800b9cc:	061e013b 	.word	0x061e013b
 800b9d0:	00f600e0 	.word	0x00f600e0
 800b9d4:	013b013b 	.word	0x013b013b
 800b9d8:	00c9013b 	.word	0x00c9013b
 800b9dc:	00dc00f6 	.word	0x00dc00f6
 800b9e0:	00d5061e 	.word	0x00d5061e
 800b9e4:	04a7061e 	.word	0x04a7061e
 800b9e8:	04fa04c9 	.word	0x04fa04c9
 800b9ec:	061e00dc 	.word	0x061e00dc
 800b9f0:	0080050a 	.word	0x0080050a
 800b9f4:	061e052c 	.word	0x061e052c
 800b9f8:	057c061e 	.word	0x057c061e
 800b9fc:	0080061e 	.word	0x0080061e
 800ba00:	3501      	adds	r5, #1
 800ba02:	e765      	b.n	800b8d0 <_svfprintf_r+0x78>
 800ba04:	980a      	ldr	r0, [sp, #40]	; 0x28
 800ba06:	f002 fcdd 	bl	800e3c4 <_localeconv_r>
 800ba0a:	6843      	ldr	r3, [r0, #4]
 800ba0c:	0018      	movs	r0, r3
 800ba0e:	931d      	str	r3, [sp, #116]	; 0x74
 800ba10:	f7f4 fb78 	bl	8000104 <strlen>
 800ba14:	901b      	str	r0, [sp, #108]	; 0x6c
 800ba16:	980a      	ldr	r0, [sp, #40]	; 0x28
 800ba18:	f002 fcd4 	bl	800e3c4 <_localeconv_r>
 800ba1c:	6883      	ldr	r3, [r0, #8]
 800ba1e:	9312      	str	r3, [sp, #72]	; 0x48
 800ba20:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ba22:	2b00      	cmp	r3, #0
 800ba24:	d011      	beq.n	800ba4a <_svfprintf_r+0x1f2>
 800ba26:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ba28:	2b00      	cmp	r3, #0
 800ba2a:	d00e      	beq.n	800ba4a <_svfprintf_r+0x1f2>
 800ba2c:	781b      	ldrb	r3, [r3, #0]
 800ba2e:	2b00      	cmp	r3, #0
 800ba30:	d00b      	beq.n	800ba4a <_svfprintf_r+0x1f2>
 800ba32:	2380      	movs	r3, #128	; 0x80
 800ba34:	00db      	lsls	r3, r3, #3
 800ba36:	431e      	orrs	r6, r3
 800ba38:	e007      	b.n	800ba4a <_svfprintf_r+0x1f2>
 800ba3a:	231b      	movs	r3, #27
 800ba3c:	aa1e      	add	r2, sp, #120	; 0x78
 800ba3e:	189b      	adds	r3, r3, r2
 800ba40:	781a      	ldrb	r2, [r3, #0]
 800ba42:	2a00      	cmp	r2, #0
 800ba44:	d101      	bne.n	800ba4a <_svfprintf_r+0x1f2>
 800ba46:	3220      	adds	r2, #32
 800ba48:	701a      	strb	r2, [r3, #0]
 800ba4a:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 800ba4c:	e771      	b.n	800b932 <_svfprintf_r+0xda>
 800ba4e:	2301      	movs	r3, #1
 800ba50:	e7f1      	b.n	800ba36 <_svfprintf_r+0x1de>
 800ba52:	cc08      	ldmia	r4!, {r3}
 800ba54:	9318      	str	r3, [sp, #96]	; 0x60
 800ba56:	2b00      	cmp	r3, #0
 800ba58:	daf7      	bge.n	800ba4a <_svfprintf_r+0x1f2>
 800ba5a:	425b      	negs	r3, r3
 800ba5c:	9318      	str	r3, [sp, #96]	; 0x60
 800ba5e:	2304      	movs	r3, #4
 800ba60:	e7e9      	b.n	800ba36 <_svfprintf_r+0x1de>
 800ba62:	231b      	movs	r3, #27
 800ba64:	aa1e      	add	r2, sp, #120	; 0x78
 800ba66:	189b      	adds	r3, r3, r2
 800ba68:	222b      	movs	r2, #43	; 0x2b
 800ba6a:	e7ed      	b.n	800ba48 <_svfprintf_r+0x1f0>
 800ba6c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800ba6e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ba70:	7812      	ldrb	r2, [r2, #0]
 800ba72:	3301      	adds	r3, #1
 800ba74:	920f      	str	r2, [sp, #60]	; 0x3c
 800ba76:	2a2a      	cmp	r2, #42	; 0x2a
 800ba78:	d010      	beq.n	800ba9c <_svfprintf_r+0x244>
 800ba7a:	2200      	movs	r2, #0
 800ba7c:	9209      	str	r2, [sp, #36]	; 0x24
 800ba7e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800ba80:	9313      	str	r3, [sp, #76]	; 0x4c
 800ba82:	3a30      	subs	r2, #48	; 0x30
 800ba84:	2a09      	cmp	r2, #9
 800ba86:	d900      	bls.n	800ba8a <_svfprintf_r+0x232>
 800ba88:	e757      	b.n	800b93a <_svfprintf_r+0xe2>
 800ba8a:	200a      	movs	r0, #10
 800ba8c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ba8e:	4341      	muls	r1, r0
 800ba90:	188a      	adds	r2, r1, r2
 800ba92:	9209      	str	r2, [sp, #36]	; 0x24
 800ba94:	781a      	ldrb	r2, [r3, #0]
 800ba96:	3301      	adds	r3, #1
 800ba98:	920f      	str	r2, [sp, #60]	; 0x3c
 800ba9a:	e7f0      	b.n	800ba7e <_svfprintf_r+0x226>
 800ba9c:	cc04      	ldmia	r4!, {r2}
 800ba9e:	9209      	str	r2, [sp, #36]	; 0x24
 800baa0:	2a00      	cmp	r2, #0
 800baa2:	da02      	bge.n	800baaa <_svfprintf_r+0x252>
 800baa4:	2201      	movs	r2, #1
 800baa6:	4252      	negs	r2, r2
 800baa8:	9209      	str	r2, [sp, #36]	; 0x24
 800baaa:	9313      	str	r3, [sp, #76]	; 0x4c
 800baac:	e7cd      	b.n	800ba4a <_svfprintf_r+0x1f2>
 800baae:	2380      	movs	r3, #128	; 0x80
 800bab0:	e7c1      	b.n	800ba36 <_svfprintf_r+0x1de>
 800bab2:	2200      	movs	r2, #0
 800bab4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800bab6:	9218      	str	r2, [sp, #96]	; 0x60
 800bab8:	210a      	movs	r1, #10
 800baba:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800babc:	434a      	muls	r2, r1
 800babe:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800bac0:	3930      	subs	r1, #48	; 0x30
 800bac2:	188a      	adds	r2, r1, r2
 800bac4:	9218      	str	r2, [sp, #96]	; 0x60
 800bac6:	001a      	movs	r2, r3
 800bac8:	7812      	ldrb	r2, [r2, #0]
 800baca:	3301      	adds	r3, #1
 800bacc:	920f      	str	r2, [sp, #60]	; 0x3c
 800bace:	3a30      	subs	r2, #48	; 0x30
 800bad0:	9313      	str	r3, [sp, #76]	; 0x4c
 800bad2:	2a09      	cmp	r2, #9
 800bad4:	d9f0      	bls.n	800bab8 <_svfprintf_r+0x260>
 800bad6:	e730      	b.n	800b93a <_svfprintf_r+0xe2>
 800bad8:	2308      	movs	r3, #8
 800bada:	e7ac      	b.n	800ba36 <_svfprintf_r+0x1de>
 800badc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800bade:	781b      	ldrb	r3, [r3, #0]
 800bae0:	2b68      	cmp	r3, #104	; 0x68
 800bae2:	d105      	bne.n	800baf0 <_svfprintf_r+0x298>
 800bae4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800bae6:	3301      	adds	r3, #1
 800bae8:	9313      	str	r3, [sp, #76]	; 0x4c
 800baea:	2380      	movs	r3, #128	; 0x80
 800baec:	009b      	lsls	r3, r3, #2
 800baee:	e7a2      	b.n	800ba36 <_svfprintf_r+0x1de>
 800baf0:	2340      	movs	r3, #64	; 0x40
 800baf2:	e7a0      	b.n	800ba36 <_svfprintf_r+0x1de>
 800baf4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800baf6:	781b      	ldrb	r3, [r3, #0]
 800baf8:	2b6c      	cmp	r3, #108	; 0x6c
 800bafa:	d104      	bne.n	800bb06 <_svfprintf_r+0x2ae>
 800bafc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800bafe:	3301      	adds	r3, #1
 800bb00:	9313      	str	r3, [sp, #76]	; 0x4c
 800bb02:	2320      	movs	r3, #32
 800bb04:	e797      	b.n	800ba36 <_svfprintf_r+0x1de>
 800bb06:	2310      	movs	r3, #16
 800bb08:	e795      	b.n	800ba36 <_svfprintf_r+0x1de>
 800bb0a:	0021      	movs	r1, r4
 800bb0c:	c904      	ldmia	r1!, {r2}
 800bb0e:	ab3f      	add	r3, sp, #252	; 0xfc
 800bb10:	910d      	str	r1, [sp, #52]	; 0x34
 800bb12:	211b      	movs	r1, #27
 800bb14:	701a      	strb	r2, [r3, #0]
 800bb16:	2200      	movs	r2, #0
 800bb18:	a81e      	add	r0, sp, #120	; 0x78
 800bb1a:	1809      	adds	r1, r1, r0
 800bb1c:	700a      	strb	r2, [r1, #0]
 800bb1e:	920c      	str	r2, [sp, #48]	; 0x30
 800bb20:	3201      	adds	r2, #1
 800bb22:	9209      	str	r2, [sp, #36]	; 0x24
 800bb24:	2200      	movs	r2, #0
 800bb26:	9308      	str	r3, [sp, #32]
 800bb28:	0015      	movs	r5, r2
 800bb2a:	9219      	str	r2, [sp, #100]	; 0x64
 800bb2c:	9210      	str	r2, [sp, #64]	; 0x40
 800bb2e:	9211      	str	r2, [sp, #68]	; 0x44
 800bb30:	e1f1      	b.n	800bf16 <_svfprintf_r+0x6be>
 800bb32:	2310      	movs	r3, #16
 800bb34:	431e      	orrs	r6, r3
 800bb36:	06b3      	lsls	r3, r6, #26
 800bb38:	d531      	bpl.n	800bb9e <_svfprintf_r+0x346>
 800bb3a:	2307      	movs	r3, #7
 800bb3c:	3407      	adds	r4, #7
 800bb3e:	439c      	bics	r4, r3
 800bb40:	0022      	movs	r2, r4
 800bb42:	ca18      	ldmia	r2!, {r3, r4}
 800bb44:	9306      	str	r3, [sp, #24]
 800bb46:	9407      	str	r4, [sp, #28]
 800bb48:	920d      	str	r2, [sp, #52]	; 0x34
 800bb4a:	9a07      	ldr	r2, [sp, #28]
 800bb4c:	2301      	movs	r3, #1
 800bb4e:	2a00      	cmp	r2, #0
 800bb50:	da0b      	bge.n	800bb6a <_svfprintf_r+0x312>
 800bb52:	9c06      	ldr	r4, [sp, #24]
 800bb54:	9d07      	ldr	r5, [sp, #28]
 800bb56:	2200      	movs	r2, #0
 800bb58:	4261      	negs	r1, r4
 800bb5a:	41aa      	sbcs	r2, r5
 800bb5c:	9106      	str	r1, [sp, #24]
 800bb5e:	9207      	str	r2, [sp, #28]
 800bb60:	221b      	movs	r2, #27
 800bb62:	a91e      	add	r1, sp, #120	; 0x78
 800bb64:	1852      	adds	r2, r2, r1
 800bb66:	212d      	movs	r1, #45	; 0x2d
 800bb68:	7011      	strb	r1, [r2, #0]
 800bb6a:	9907      	ldr	r1, [sp, #28]
 800bb6c:	9a06      	ldr	r2, [sp, #24]
 800bb6e:	430a      	orrs	r2, r1
 800bb70:	9909      	ldr	r1, [sp, #36]	; 0x24
 800bb72:	3101      	adds	r1, #1
 800bb74:	d101      	bne.n	800bb7a <_svfprintf_r+0x322>
 800bb76:	f001 f87b 	bl	800cc70 <_svfprintf_r+0x1418>
 800bb7a:	2180      	movs	r1, #128	; 0x80
 800bb7c:	0034      	movs	r4, r6
 800bb7e:	438c      	bics	r4, r1
 800bb80:	2a00      	cmp	r2, #0
 800bb82:	d001      	beq.n	800bb88 <_svfprintf_r+0x330>
 800bb84:	f001 f879 	bl	800cc7a <_svfprintf_r+0x1422>
 800bb88:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bb8a:	2a00      	cmp	r2, #0
 800bb8c:	d101      	bne.n	800bb92 <_svfprintf_r+0x33a>
 800bb8e:	f000 fcef 	bl	800c570 <_svfprintf_r+0xd18>
 800bb92:	2b01      	cmp	r3, #1
 800bb94:	d001      	beq.n	800bb9a <_svfprintf_r+0x342>
 800bb96:	f001 f874 	bl	800cc82 <_svfprintf_r+0x142a>
 800bb9a:	f000 fc79 	bl	800c490 <_svfprintf_r+0xc38>
 800bb9e:	0022      	movs	r2, r4
 800bba0:	ca08      	ldmia	r2!, {r3}
 800bba2:	920d      	str	r2, [sp, #52]	; 0x34
 800bba4:	06f2      	lsls	r2, r6, #27
 800bba6:	d503      	bpl.n	800bbb0 <_svfprintf_r+0x358>
 800bba8:	9306      	str	r3, [sp, #24]
 800bbaa:	17db      	asrs	r3, r3, #31
 800bbac:	9307      	str	r3, [sp, #28]
 800bbae:	e7cc      	b.n	800bb4a <_svfprintf_r+0x2f2>
 800bbb0:	0672      	lsls	r2, r6, #25
 800bbb2:	d501      	bpl.n	800bbb8 <_svfprintf_r+0x360>
 800bbb4:	b21b      	sxth	r3, r3
 800bbb6:	e7f7      	b.n	800bba8 <_svfprintf_r+0x350>
 800bbb8:	05b2      	lsls	r2, r6, #22
 800bbba:	d5f5      	bpl.n	800bba8 <_svfprintf_r+0x350>
 800bbbc:	b25b      	sxtb	r3, r3
 800bbbe:	e7f3      	b.n	800bba8 <_svfprintf_r+0x350>
 800bbc0:	2307      	movs	r3, #7
 800bbc2:	3407      	adds	r4, #7
 800bbc4:	439c      	bics	r4, r3
 800bbc6:	0022      	movs	r2, r4
 800bbc8:	ca18      	ldmia	r2!, {r3, r4}
 800bbca:	920d      	str	r2, [sp, #52]	; 0x34
 800bbcc:	2201      	movs	r2, #1
 800bbce:	9314      	str	r3, [sp, #80]	; 0x50
 800bbd0:	9415      	str	r4, [sp, #84]	; 0x54
 800bbd2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800bbd4:	9d14      	ldr	r5, [sp, #80]	; 0x50
 800bbd6:	005c      	lsls	r4, r3, #1
 800bbd8:	0864      	lsrs	r4, r4, #1
 800bbda:	0028      	movs	r0, r5
 800bbdc:	0021      	movs	r1, r4
 800bbde:	4b3e      	ldr	r3, [pc, #248]	; (800bcd8 <_svfprintf_r+0x480>)
 800bbe0:	4252      	negs	r2, r2
 800bbe2:	f7f6 fb87 	bl	80022f4 <__aeabi_dcmpun>
 800bbe6:	2800      	cmp	r0, #0
 800bbe8:	d126      	bne.n	800bc38 <_svfprintf_r+0x3e0>
 800bbea:	2201      	movs	r2, #1
 800bbec:	0028      	movs	r0, r5
 800bbee:	0021      	movs	r1, r4
 800bbf0:	4b39      	ldr	r3, [pc, #228]	; (800bcd8 <_svfprintf_r+0x480>)
 800bbf2:	4252      	negs	r2, r2
 800bbf4:	f7f4 fc38 	bl	8000468 <__aeabi_dcmple>
 800bbf8:	2800      	cmp	r0, #0
 800bbfa:	d11d      	bne.n	800bc38 <_svfprintf_r+0x3e0>
 800bbfc:	9814      	ldr	r0, [sp, #80]	; 0x50
 800bbfe:	9915      	ldr	r1, [sp, #84]	; 0x54
 800bc00:	2200      	movs	r2, #0
 800bc02:	2300      	movs	r3, #0
 800bc04:	f7f4 fc26 	bl	8000454 <__aeabi_dcmplt>
 800bc08:	2800      	cmp	r0, #0
 800bc0a:	d004      	beq.n	800bc16 <_svfprintf_r+0x3be>
 800bc0c:	231b      	movs	r3, #27
 800bc0e:	aa1e      	add	r2, sp, #120	; 0x78
 800bc10:	189b      	adds	r3, r3, r2
 800bc12:	222d      	movs	r2, #45	; 0x2d
 800bc14:	701a      	strb	r2, [r3, #0]
 800bc16:	4b31      	ldr	r3, [pc, #196]	; (800bcdc <_svfprintf_r+0x484>)
 800bc18:	9308      	str	r3, [sp, #32]
 800bc1a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800bc1c:	2b47      	cmp	r3, #71	; 0x47
 800bc1e:	dd01      	ble.n	800bc24 <_svfprintf_r+0x3cc>
 800bc20:	4b2f      	ldr	r3, [pc, #188]	; (800bce0 <_svfprintf_r+0x488>)
 800bc22:	9308      	str	r3, [sp, #32]
 800bc24:	2380      	movs	r3, #128	; 0x80
 800bc26:	439e      	bics	r6, r3
 800bc28:	2300      	movs	r3, #0
 800bc2a:	930c      	str	r3, [sp, #48]	; 0x30
 800bc2c:	3303      	adds	r3, #3
 800bc2e:	9309      	str	r3, [sp, #36]	; 0x24
 800bc30:	2300      	movs	r3, #0
 800bc32:	9319      	str	r3, [sp, #100]	; 0x64
 800bc34:	f000 fc78 	bl	800c528 <_svfprintf_r+0xcd0>
 800bc38:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800bc3a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800bc3c:	0010      	movs	r0, r2
 800bc3e:	0019      	movs	r1, r3
 800bc40:	f7f6 fb58 	bl	80022f4 <__aeabi_dcmpun>
 800bc44:	2800      	cmp	r0, #0
 800bc46:	d00e      	beq.n	800bc66 <_svfprintf_r+0x40e>
 800bc48:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800bc4a:	2b00      	cmp	r3, #0
 800bc4c:	da04      	bge.n	800bc58 <_svfprintf_r+0x400>
 800bc4e:	231b      	movs	r3, #27
 800bc50:	aa1e      	add	r2, sp, #120	; 0x78
 800bc52:	189b      	adds	r3, r3, r2
 800bc54:	222d      	movs	r2, #45	; 0x2d
 800bc56:	701a      	strb	r2, [r3, #0]
 800bc58:	4b22      	ldr	r3, [pc, #136]	; (800bce4 <_svfprintf_r+0x48c>)
 800bc5a:	9308      	str	r3, [sp, #32]
 800bc5c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800bc5e:	2b47      	cmp	r3, #71	; 0x47
 800bc60:	dde0      	ble.n	800bc24 <_svfprintf_r+0x3cc>
 800bc62:	4b21      	ldr	r3, [pc, #132]	; (800bce8 <_svfprintf_r+0x490>)
 800bc64:	e7dd      	b.n	800bc22 <_svfprintf_r+0x3ca>
 800bc66:	2320      	movs	r3, #32
 800bc68:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800bc6a:	439a      	bics	r2, r3
 800bc6c:	9210      	str	r2, [sp, #64]	; 0x40
 800bc6e:	2a41      	cmp	r2, #65	; 0x41
 800bc70:	d123      	bne.n	800bcba <_svfprintf_r+0x462>
 800bc72:	2230      	movs	r2, #48	; 0x30
 800bc74:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800bc76:	ab25      	add	r3, sp, #148	; 0x94
 800bc78:	701a      	strb	r2, [r3, #0]
 800bc7a:	3248      	adds	r2, #72	; 0x48
 800bc7c:	2961      	cmp	r1, #97	; 0x61
 800bc7e:	d000      	beq.n	800bc82 <_svfprintf_r+0x42a>
 800bc80:	3a20      	subs	r2, #32
 800bc82:	705a      	strb	r2, [r3, #1]
 800bc84:	2302      	movs	r3, #2
 800bc86:	431e      	orrs	r6, r3
 800bc88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bc8a:	2b63      	cmp	r3, #99	; 0x63
 800bc8c:	dd2e      	ble.n	800bcec <_svfprintf_r+0x494>
 800bc8e:	980a      	ldr	r0, [sp, #40]	; 0x28
 800bc90:	1c59      	adds	r1, r3, #1
 800bc92:	f7fd f977 	bl	8008f84 <_malloc_r>
 800bc96:	9008      	str	r0, [sp, #32]
 800bc98:	2800      	cmp	r0, #0
 800bc9a:	d000      	beq.n	800bc9e <_svfprintf_r+0x446>
 800bc9c:	e216      	b.n	800c0cc <_svfprintf_r+0x874>
 800bc9e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bca0:	899a      	ldrh	r2, [r3, #12]
 800bca2:	2340      	movs	r3, #64	; 0x40
 800bca4:	4313      	orrs	r3, r2
 800bca6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800bca8:	8193      	strh	r3, [r2, #12]
 800bcaa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bcac:	899b      	ldrh	r3, [r3, #12]
 800bcae:	065b      	lsls	r3, r3, #25
 800bcb0:	d400      	bmi.n	800bcb4 <_svfprintf_r+0x45c>
 800bcb2:	e5f5      	b.n	800b8a0 <_svfprintf_r+0x48>
 800bcb4:	2301      	movs	r3, #1
 800bcb6:	425b      	negs	r3, r3
 800bcb8:	e5f1      	b.n	800b89e <_svfprintf_r+0x46>
 800bcba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bcbc:	900c      	str	r0, [sp, #48]	; 0x30
 800bcbe:	3301      	adds	r3, #1
 800bcc0:	d100      	bne.n	800bcc4 <_svfprintf_r+0x46c>
 800bcc2:	e206      	b.n	800c0d2 <_svfprintf_r+0x87a>
 800bcc4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800bcc6:	2b47      	cmp	r3, #71	; 0x47
 800bcc8:	d114      	bne.n	800bcf4 <_svfprintf_r+0x49c>
 800bcca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bccc:	2b00      	cmp	r3, #0
 800bcce:	d111      	bne.n	800bcf4 <_svfprintf_r+0x49c>
 800bcd0:	3301      	adds	r3, #1
 800bcd2:	9309      	str	r3, [sp, #36]	; 0x24
 800bcd4:	e00e      	b.n	800bcf4 <_svfprintf_r+0x49c>
 800bcd6:	46c0      	nop			; (mov r8, r8)
 800bcd8:	7fefffff 	.word	0x7fefffff
 800bcdc:	08012d24 	.word	0x08012d24
 800bce0:	08012d28 	.word	0x08012d28
 800bce4:	08012d2c 	.word	0x08012d2c
 800bce8:	08012d30 	.word	0x08012d30
 800bcec:	2300      	movs	r3, #0
 800bcee:	930c      	str	r3, [sp, #48]	; 0x30
 800bcf0:	ab3f      	add	r3, sp, #252	; 0xfc
 800bcf2:	9308      	str	r3, [sp, #32]
 800bcf4:	2380      	movs	r3, #128	; 0x80
 800bcf6:	005b      	lsls	r3, r3, #1
 800bcf8:	4333      	orrs	r3, r6
 800bcfa:	931a      	str	r3, [sp, #104]	; 0x68
 800bcfc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800bcfe:	9d14      	ldr	r5, [sp, #80]	; 0x50
 800bd00:	2b00      	cmp	r3, #0
 800bd02:	db00      	blt.n	800bd06 <_svfprintf_r+0x4ae>
 800bd04:	e1e7      	b.n	800c0d6 <_svfprintf_r+0x87e>
 800bd06:	2280      	movs	r2, #128	; 0x80
 800bd08:	0612      	lsls	r2, r2, #24
 800bd0a:	4694      	mov	ip, r2
 800bd0c:	4463      	add	r3, ip
 800bd0e:	930e      	str	r3, [sp, #56]	; 0x38
 800bd10:	232d      	movs	r3, #45	; 0x2d
 800bd12:	9322      	str	r3, [sp, #136]	; 0x88
 800bd14:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800bd16:	2b41      	cmp	r3, #65	; 0x41
 800bd18:	d000      	beq.n	800bd1c <_svfprintf_r+0x4c4>
 800bd1a:	e1f5      	b.n	800c108 <_svfprintf_r+0x8b0>
 800bd1c:	0028      	movs	r0, r5
 800bd1e:	aa26      	add	r2, sp, #152	; 0x98
 800bd20:	990e      	ldr	r1, [sp, #56]	; 0x38
 800bd22:	f002 fb73 	bl	800e40c <frexp>
 800bd26:	23ff      	movs	r3, #255	; 0xff
 800bd28:	2200      	movs	r2, #0
 800bd2a:	059b      	lsls	r3, r3, #22
 800bd2c:	f7f5 fc9e 	bl	800166c <__aeabi_dmul>
 800bd30:	2200      	movs	r2, #0
 800bd32:	2300      	movs	r3, #0
 800bd34:	0004      	movs	r4, r0
 800bd36:	000d      	movs	r5, r1
 800bd38:	f7f4 fb86 	bl	8000448 <__aeabi_dcmpeq>
 800bd3c:	2800      	cmp	r0, #0
 800bd3e:	d001      	beq.n	800bd44 <_svfprintf_r+0x4ec>
 800bd40:	2301      	movs	r3, #1
 800bd42:	9326      	str	r3, [sp, #152]	; 0x98
 800bd44:	4bda      	ldr	r3, [pc, #872]	; (800c0b0 <_svfprintf_r+0x858>)
 800bd46:	9319      	str	r3, [sp, #100]	; 0x64
 800bd48:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800bd4a:	2b61      	cmp	r3, #97	; 0x61
 800bd4c:	d001      	beq.n	800bd52 <_svfprintf_r+0x4fa>
 800bd4e:	4bd9      	ldr	r3, [pc, #868]	; (800c0b4 <_svfprintf_r+0x85c>)
 800bd50:	9319      	str	r3, [sp, #100]	; 0x64
 800bd52:	9b08      	ldr	r3, [sp, #32]
 800bd54:	930e      	str	r3, [sp, #56]	; 0x38
 800bd56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bd58:	3b01      	subs	r3, #1
 800bd5a:	9311      	str	r3, [sp, #68]	; 0x44
 800bd5c:	2200      	movs	r2, #0
 800bd5e:	4bd6      	ldr	r3, [pc, #856]	; (800c0b8 <_svfprintf_r+0x860>)
 800bd60:	0020      	movs	r0, r4
 800bd62:	0029      	movs	r1, r5
 800bd64:	f7f5 fc82 	bl	800166c <__aeabi_dmul>
 800bd68:	000d      	movs	r5, r1
 800bd6a:	0004      	movs	r4, r0
 800bd6c:	f7f6 fae0 	bl	8002330 <__aeabi_d2iz>
 800bd70:	9021      	str	r0, [sp, #132]	; 0x84
 800bd72:	f7f6 fb13 	bl	800239c <__aeabi_i2d>
 800bd76:	0002      	movs	r2, r0
 800bd78:	000b      	movs	r3, r1
 800bd7a:	0020      	movs	r0, r4
 800bd7c:	0029      	movs	r1, r5
 800bd7e:	f7f5 ff37 	bl	8001bf0 <__aeabi_dsub>
 800bd82:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bd84:	000d      	movs	r5, r1
 800bd86:	001a      	movs	r2, r3
 800bd88:	3201      	adds	r2, #1
 800bd8a:	9921      	ldr	r1, [sp, #132]	; 0x84
 800bd8c:	920e      	str	r2, [sp, #56]	; 0x38
 800bd8e:	9223      	str	r2, [sp, #140]	; 0x8c
 800bd90:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800bd92:	0004      	movs	r4, r0
 800bd94:	5c52      	ldrb	r2, [r2, r1]
 800bd96:	701a      	strb	r2, [r3, #0]
 800bd98:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800bd9a:	9320      	str	r3, [sp, #128]	; 0x80
 800bd9c:	3301      	adds	r3, #1
 800bd9e:	d00a      	beq.n	800bdb6 <_svfprintf_r+0x55e>
 800bda0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800bda2:	2200      	movs	r2, #0
 800bda4:	3b01      	subs	r3, #1
 800bda6:	9311      	str	r3, [sp, #68]	; 0x44
 800bda8:	0020      	movs	r0, r4
 800bdaa:	2300      	movs	r3, #0
 800bdac:	0029      	movs	r1, r5
 800bdae:	f7f4 fb4b 	bl	8000448 <__aeabi_dcmpeq>
 800bdb2:	2800      	cmp	r0, #0
 800bdb4:	d0d2      	beq.n	800bd5c <_svfprintf_r+0x504>
 800bdb6:	2200      	movs	r2, #0
 800bdb8:	0020      	movs	r0, r4
 800bdba:	0029      	movs	r1, r5
 800bdbc:	4bbf      	ldr	r3, [pc, #764]	; (800c0bc <_svfprintf_r+0x864>)
 800bdbe:	f7f4 fb5d 	bl	800047c <__aeabi_dcmpgt>
 800bdc2:	2800      	cmp	r0, #0
 800bdc4:	d10c      	bne.n	800bde0 <_svfprintf_r+0x588>
 800bdc6:	2200      	movs	r2, #0
 800bdc8:	0020      	movs	r0, r4
 800bdca:	0029      	movs	r1, r5
 800bdcc:	4bbb      	ldr	r3, [pc, #748]	; (800c0bc <_svfprintf_r+0x864>)
 800bdce:	f7f4 fb3b 	bl	8000448 <__aeabi_dcmpeq>
 800bdd2:	2800      	cmp	r0, #0
 800bdd4:	d100      	bne.n	800bdd8 <_svfprintf_r+0x580>
 800bdd6:	e191      	b.n	800c0fc <_svfprintf_r+0x8a4>
 800bdd8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bdda:	07db      	lsls	r3, r3, #31
 800bddc:	d400      	bmi.n	800bde0 <_svfprintf_r+0x588>
 800bdde:	e18d      	b.n	800c0fc <_svfprintf_r+0x8a4>
 800bde0:	2030      	movs	r0, #48	; 0x30
 800bde2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bde4:	932a      	str	r3, [sp, #168]	; 0xa8
 800bde6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800bde8:	7bdb      	ldrb	r3, [r3, #15]
 800bdea:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 800bdec:	3a01      	subs	r2, #1
 800bdee:	922a      	str	r2, [sp, #168]	; 0xa8
 800bdf0:	7811      	ldrb	r1, [r2, #0]
 800bdf2:	4299      	cmp	r1, r3
 800bdf4:	d100      	bne.n	800bdf8 <_svfprintf_r+0x5a0>
 800bdf6:	e171      	b.n	800c0dc <_svfprintf_r+0x884>
 800bdf8:	1c4b      	adds	r3, r1, #1
 800bdfa:	b2db      	uxtb	r3, r3
 800bdfc:	2939      	cmp	r1, #57	; 0x39
 800bdfe:	d101      	bne.n	800be04 <_svfprintf_r+0x5ac>
 800be00:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800be02:	7a9b      	ldrb	r3, [r3, #10]
 800be04:	7013      	strb	r3, [r2, #0]
 800be06:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800be08:	9a08      	ldr	r2, [sp, #32]
 800be0a:	9d26      	ldr	r5, [sp, #152]	; 0x98
 800be0c:	1a9b      	subs	r3, r3, r2
 800be0e:	930e      	str	r3, [sp, #56]	; 0x38
 800be10:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800be12:	2b47      	cmp	r3, #71	; 0x47
 800be14:	d000      	beq.n	800be18 <_svfprintf_r+0x5c0>
 800be16:	e1c4      	b.n	800c1a2 <_svfprintf_r+0x94a>
 800be18:	1ceb      	adds	r3, r5, #3
 800be1a:	db03      	blt.n	800be24 <_svfprintf_r+0x5cc>
 800be1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800be1e:	42ab      	cmp	r3, r5
 800be20:	db00      	blt.n	800be24 <_svfprintf_r+0x5cc>
 800be22:	e1e6      	b.n	800c1f2 <_svfprintf_r+0x99a>
 800be24:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800be26:	3b02      	subs	r3, #2
 800be28:	930f      	str	r3, [sp, #60]	; 0x3c
 800be2a:	223c      	movs	r2, #60	; 0x3c
 800be2c:	466b      	mov	r3, sp
 800be2e:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800be30:	189b      	adds	r3, r3, r2
 800be32:	1e6c      	subs	r4, r5, #1
 800be34:	3a1c      	subs	r2, #28
 800be36:	2000      	movs	r0, #0
 800be38:	781b      	ldrb	r3, [r3, #0]
 800be3a:	9426      	str	r4, [sp, #152]	; 0x98
 800be3c:	4391      	bics	r1, r2
 800be3e:	2941      	cmp	r1, #65	; 0x41
 800be40:	d102      	bne.n	800be48 <_svfprintf_r+0x5f0>
 800be42:	330f      	adds	r3, #15
 800be44:	b2db      	uxtb	r3, r3
 800be46:	3001      	adds	r0, #1
 800be48:	a928      	add	r1, sp, #160	; 0xa0
 800be4a:	700b      	strb	r3, [r1, #0]
 800be4c:	232b      	movs	r3, #43	; 0x2b
 800be4e:	2c00      	cmp	r4, #0
 800be50:	da02      	bge.n	800be58 <_svfprintf_r+0x600>
 800be52:	2401      	movs	r4, #1
 800be54:	3302      	adds	r3, #2
 800be56:	1b64      	subs	r4, r4, r5
 800be58:	704b      	strb	r3, [r1, #1]
 800be5a:	2c09      	cmp	r4, #9
 800be5c:	dc00      	bgt.n	800be60 <_svfprintf_r+0x608>
 800be5e:	e1ba      	b.n	800c1d6 <_svfprintf_r+0x97e>
 800be60:	2337      	movs	r3, #55	; 0x37
 800be62:	250a      	movs	r5, #10
 800be64:	aa1e      	add	r2, sp, #120	; 0x78
 800be66:	189b      	adds	r3, r3, r2
 800be68:	9310      	str	r3, [sp, #64]	; 0x40
 800be6a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800be6c:	0020      	movs	r0, r4
 800be6e:	9309      	str	r3, [sp, #36]	; 0x24
 800be70:	0029      	movs	r1, r5
 800be72:	3b01      	subs	r3, #1
 800be74:	9310      	str	r3, [sp, #64]	; 0x40
 800be76:	f7f4 fad1 	bl	800041c <__aeabi_idivmod>
 800be7a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800be7c:	3130      	adds	r1, #48	; 0x30
 800be7e:	7019      	strb	r1, [r3, #0]
 800be80:	0020      	movs	r0, r4
 800be82:	0029      	movs	r1, r5
 800be84:	9411      	str	r4, [sp, #68]	; 0x44
 800be86:	f7f4 f9e3 	bl	8000250 <__divsi3>
 800be8a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800be8c:	0004      	movs	r4, r0
 800be8e:	2b63      	cmp	r3, #99	; 0x63
 800be90:	dceb      	bgt.n	800be6a <_svfprintf_r+0x612>
 800be92:	222a      	movs	r2, #42	; 0x2a
 800be94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800be96:	a81e      	add	r0, sp, #120	; 0x78
 800be98:	1e99      	subs	r1, r3, #2
 800be9a:	1812      	adds	r2, r2, r0
 800be9c:	2037      	movs	r0, #55	; 0x37
 800be9e:	000b      	movs	r3, r1
 800bea0:	3430      	adds	r4, #48	; 0x30
 800bea2:	700c      	strb	r4, [r1, #0]
 800bea4:	ac1e      	add	r4, sp, #120	; 0x78
 800bea6:	1900      	adds	r0, r0, r4
 800bea8:	4283      	cmp	r3, r0
 800beaa:	d200      	bcs.n	800beae <_svfprintf_r+0x656>
 800beac:	e18e      	b.n	800c1cc <_svfprintf_r+0x974>
 800beae:	2300      	movs	r3, #0
 800beb0:	4281      	cmp	r1, r0
 800beb2:	d804      	bhi.n	800bebe <_svfprintf_r+0x666>
 800beb4:	aa1e      	add	r2, sp, #120	; 0x78
 800beb6:	3339      	adds	r3, #57	; 0x39
 800beb8:	189b      	adds	r3, r3, r2
 800beba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bebc:	1a9b      	subs	r3, r3, r2
 800bebe:	222a      	movs	r2, #42	; 0x2a
 800bec0:	a91e      	add	r1, sp, #120	; 0x78
 800bec2:	1852      	adds	r2, r2, r1
 800bec4:	18d3      	adds	r3, r2, r3
 800bec6:	aa28      	add	r2, sp, #160	; 0xa0
 800bec8:	1a9b      	subs	r3, r3, r2
 800beca:	931e      	str	r3, [sp, #120]	; 0x78
 800becc:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800bece:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bed0:	4694      	mov	ip, r2
 800bed2:	4463      	add	r3, ip
 800bed4:	9309      	str	r3, [sp, #36]	; 0x24
 800bed6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bed8:	2b01      	cmp	r3, #1
 800beda:	dc01      	bgt.n	800bee0 <_svfprintf_r+0x688>
 800bedc:	07f3      	lsls	r3, r6, #31
 800bede:	d504      	bpl.n	800beea <_svfprintf_r+0x692>
 800bee0:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800bee2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bee4:	4694      	mov	ip, r2
 800bee6:	4463      	add	r3, ip
 800bee8:	9309      	str	r3, [sp, #36]	; 0x24
 800beea:	2280      	movs	r2, #128	; 0x80
 800beec:	4b74      	ldr	r3, [pc, #464]	; (800c0c0 <_svfprintf_r+0x868>)
 800beee:	0052      	lsls	r2, r2, #1
 800bef0:	4033      	ands	r3, r6
 800bef2:	431a      	orrs	r2, r3
 800bef4:	2300      	movs	r3, #0
 800bef6:	001d      	movs	r5, r3
 800bef8:	921a      	str	r2, [sp, #104]	; 0x68
 800befa:	9310      	str	r3, [sp, #64]	; 0x40
 800befc:	9311      	str	r3, [sp, #68]	; 0x44
 800befe:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800bf00:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 800bf02:	9319      	str	r3, [sp, #100]	; 0x64
 800bf04:	2b00      	cmp	r3, #0
 800bf06:	d006      	beq.n	800bf16 <_svfprintf_r+0x6be>
 800bf08:	231b      	movs	r3, #27
 800bf0a:	aa1e      	add	r2, sp, #120	; 0x78
 800bf0c:	189b      	adds	r3, r3, r2
 800bf0e:	222d      	movs	r2, #45	; 0x2d
 800bf10:	701a      	strb	r2, [r3, #0]
 800bf12:	2300      	movs	r3, #0
 800bf14:	9319      	str	r3, [sp, #100]	; 0x64
 800bf16:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800bf18:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bf1a:	931a      	str	r3, [sp, #104]	; 0x68
 800bf1c:	4293      	cmp	r3, r2
 800bf1e:	da00      	bge.n	800bf22 <_svfprintf_r+0x6ca>
 800bf20:	921a      	str	r2, [sp, #104]	; 0x68
 800bf22:	231b      	movs	r3, #27
 800bf24:	aa1e      	add	r2, sp, #120	; 0x78
 800bf26:	189b      	adds	r3, r3, r2
 800bf28:	781b      	ldrb	r3, [r3, #0]
 800bf2a:	1e5a      	subs	r2, r3, #1
 800bf2c:	4193      	sbcs	r3, r2
 800bf2e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800bf30:	18d3      	adds	r3, r2, r3
 800bf32:	931a      	str	r3, [sp, #104]	; 0x68
 800bf34:	0032      	movs	r2, r6
 800bf36:	2302      	movs	r3, #2
 800bf38:	401a      	ands	r2, r3
 800bf3a:	9220      	str	r2, [sp, #128]	; 0x80
 800bf3c:	421e      	tst	r6, r3
 800bf3e:	d002      	beq.n	800bf46 <_svfprintf_r+0x6ee>
 800bf40:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800bf42:	3302      	adds	r3, #2
 800bf44:	931a      	str	r3, [sp, #104]	; 0x68
 800bf46:	2384      	movs	r3, #132	; 0x84
 800bf48:	0032      	movs	r2, r6
 800bf4a:	401a      	ands	r2, r3
 800bf4c:	9221      	str	r2, [sp, #132]	; 0x84
 800bf4e:	421e      	tst	r6, r3
 800bf50:	d11f      	bne.n	800bf92 <_svfprintf_r+0x73a>
 800bf52:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800bf54:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800bf56:	1a9c      	subs	r4, r3, r2
 800bf58:	2c00      	cmp	r4, #0
 800bf5a:	dd1a      	ble.n	800bf92 <_svfprintf_r+0x73a>
 800bf5c:	0039      	movs	r1, r7
 800bf5e:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800bf60:	4858      	ldr	r0, [pc, #352]	; (800c0c4 <_svfprintf_r+0x86c>)
 800bf62:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800bf64:	3301      	adds	r3, #1
 800bf66:	3108      	adds	r1, #8
 800bf68:	6038      	str	r0, [r7, #0]
 800bf6a:	2c10      	cmp	r4, #16
 800bf6c:	dd00      	ble.n	800bf70 <_svfprintf_r+0x718>
 800bf6e:	e31c      	b.n	800c5aa <_svfprintf_r+0xd52>
 800bf70:	607c      	str	r4, [r7, #4]
 800bf72:	18a4      	adds	r4, r4, r2
 800bf74:	000f      	movs	r7, r1
 800bf76:	942e      	str	r4, [sp, #184]	; 0xb8
 800bf78:	932d      	str	r3, [sp, #180]	; 0xb4
 800bf7a:	2b07      	cmp	r3, #7
 800bf7c:	dd09      	ble.n	800bf92 <_svfprintf_r+0x73a>
 800bf7e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800bf80:	980a      	ldr	r0, [sp, #40]	; 0x28
 800bf82:	aa2c      	add	r2, sp, #176	; 0xb0
 800bf84:	f003 fd7e 	bl	800fa84 <__ssprint_r>
 800bf88:	2800      	cmp	r0, #0
 800bf8a:	d001      	beq.n	800bf90 <_svfprintf_r+0x738>
 800bf8c:	f000 fe43 	bl	800cc16 <_svfprintf_r+0x13be>
 800bf90:	af2f      	add	r7, sp, #188	; 0xbc
 800bf92:	221b      	movs	r2, #27
 800bf94:	a91e      	add	r1, sp, #120	; 0x78
 800bf96:	1852      	adds	r2, r2, r1
 800bf98:	7811      	ldrb	r1, [r2, #0]
 800bf9a:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800bf9c:	2900      	cmp	r1, #0
 800bf9e:	d014      	beq.n	800bfca <_svfprintf_r+0x772>
 800bfa0:	603a      	str	r2, [r7, #0]
 800bfa2:	2201      	movs	r2, #1
 800bfa4:	189b      	adds	r3, r3, r2
 800bfa6:	932e      	str	r3, [sp, #184]	; 0xb8
 800bfa8:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800bfaa:	607a      	str	r2, [r7, #4]
 800bfac:	189b      	adds	r3, r3, r2
 800bfae:	932d      	str	r3, [sp, #180]	; 0xb4
 800bfb0:	3708      	adds	r7, #8
 800bfb2:	2b07      	cmp	r3, #7
 800bfb4:	dd09      	ble.n	800bfca <_svfprintf_r+0x772>
 800bfb6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800bfb8:	980a      	ldr	r0, [sp, #40]	; 0x28
 800bfba:	aa2c      	add	r2, sp, #176	; 0xb0
 800bfbc:	f003 fd62 	bl	800fa84 <__ssprint_r>
 800bfc0:	2800      	cmp	r0, #0
 800bfc2:	d001      	beq.n	800bfc8 <_svfprintf_r+0x770>
 800bfc4:	f000 fe27 	bl	800cc16 <_svfprintf_r+0x13be>
 800bfc8:	af2f      	add	r7, sp, #188	; 0xbc
 800bfca:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800bfcc:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800bfce:	2a00      	cmp	r2, #0
 800bfd0:	d015      	beq.n	800bffe <_svfprintf_r+0x7a6>
 800bfd2:	aa25      	add	r2, sp, #148	; 0x94
 800bfd4:	603a      	str	r2, [r7, #0]
 800bfd6:	2202      	movs	r2, #2
 800bfd8:	189b      	adds	r3, r3, r2
 800bfda:	932e      	str	r3, [sp, #184]	; 0xb8
 800bfdc:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800bfde:	607a      	str	r2, [r7, #4]
 800bfe0:	3301      	adds	r3, #1
 800bfe2:	932d      	str	r3, [sp, #180]	; 0xb4
 800bfe4:	3708      	adds	r7, #8
 800bfe6:	2b07      	cmp	r3, #7
 800bfe8:	dd09      	ble.n	800bffe <_svfprintf_r+0x7a6>
 800bfea:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800bfec:	980a      	ldr	r0, [sp, #40]	; 0x28
 800bfee:	aa2c      	add	r2, sp, #176	; 0xb0
 800bff0:	f003 fd48 	bl	800fa84 <__ssprint_r>
 800bff4:	2800      	cmp	r0, #0
 800bff6:	d001      	beq.n	800bffc <_svfprintf_r+0x7a4>
 800bff8:	f000 fe0d 	bl	800cc16 <_svfprintf_r+0x13be>
 800bffc:	af2f      	add	r7, sp, #188	; 0xbc
 800bffe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c000:	2b80      	cmp	r3, #128	; 0x80
 800c002:	d11f      	bne.n	800c044 <_svfprintf_r+0x7ec>
 800c004:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800c006:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800c008:	1a9c      	subs	r4, r3, r2
 800c00a:	2c00      	cmp	r4, #0
 800c00c:	dd1a      	ble.n	800c044 <_svfprintf_r+0x7ec>
 800c00e:	0039      	movs	r1, r7
 800c010:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800c012:	482d      	ldr	r0, [pc, #180]	; (800c0c8 <_svfprintf_r+0x870>)
 800c014:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800c016:	3301      	adds	r3, #1
 800c018:	3108      	adds	r1, #8
 800c01a:	6038      	str	r0, [r7, #0]
 800c01c:	2c10      	cmp	r4, #16
 800c01e:	dd00      	ble.n	800c022 <_svfprintf_r+0x7ca>
 800c020:	e2d6      	b.n	800c5d0 <_svfprintf_r+0xd78>
 800c022:	607c      	str	r4, [r7, #4]
 800c024:	18a4      	adds	r4, r4, r2
 800c026:	000f      	movs	r7, r1
 800c028:	942e      	str	r4, [sp, #184]	; 0xb8
 800c02a:	932d      	str	r3, [sp, #180]	; 0xb4
 800c02c:	2b07      	cmp	r3, #7
 800c02e:	dd09      	ble.n	800c044 <_svfprintf_r+0x7ec>
 800c030:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c032:	980a      	ldr	r0, [sp, #40]	; 0x28
 800c034:	aa2c      	add	r2, sp, #176	; 0xb0
 800c036:	f003 fd25 	bl	800fa84 <__ssprint_r>
 800c03a:	2800      	cmp	r0, #0
 800c03c:	d001      	beq.n	800c042 <_svfprintf_r+0x7ea>
 800c03e:	f000 fdea 	bl	800cc16 <_svfprintf_r+0x13be>
 800c042:	af2f      	add	r7, sp, #188	; 0xbc
 800c044:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800c046:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c048:	1a9c      	subs	r4, r3, r2
 800c04a:	2c00      	cmp	r4, #0
 800c04c:	dd1a      	ble.n	800c084 <_svfprintf_r+0x82c>
 800c04e:	0039      	movs	r1, r7
 800c050:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800c052:	481d      	ldr	r0, [pc, #116]	; (800c0c8 <_svfprintf_r+0x870>)
 800c054:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800c056:	3301      	adds	r3, #1
 800c058:	3108      	adds	r1, #8
 800c05a:	6038      	str	r0, [r7, #0]
 800c05c:	2c10      	cmp	r4, #16
 800c05e:	dd00      	ble.n	800c062 <_svfprintf_r+0x80a>
 800c060:	e2c9      	b.n	800c5f6 <_svfprintf_r+0xd9e>
 800c062:	18a2      	adds	r2, r4, r2
 800c064:	607c      	str	r4, [r7, #4]
 800c066:	922e      	str	r2, [sp, #184]	; 0xb8
 800c068:	000f      	movs	r7, r1
 800c06a:	932d      	str	r3, [sp, #180]	; 0xb4
 800c06c:	2b07      	cmp	r3, #7
 800c06e:	dd09      	ble.n	800c084 <_svfprintf_r+0x82c>
 800c070:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c072:	980a      	ldr	r0, [sp, #40]	; 0x28
 800c074:	aa2c      	add	r2, sp, #176	; 0xb0
 800c076:	f003 fd05 	bl	800fa84 <__ssprint_r>
 800c07a:	2800      	cmp	r0, #0
 800c07c:	d001      	beq.n	800c082 <_svfprintf_r+0x82a>
 800c07e:	f000 fdca 	bl	800cc16 <_svfprintf_r+0x13be>
 800c082:	af2f      	add	r7, sp, #188	; 0xbc
 800c084:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800c086:	9319      	str	r3, [sp, #100]	; 0x64
 800c088:	05f3      	lsls	r3, r6, #23
 800c08a:	d500      	bpl.n	800c08e <_svfprintf_r+0x836>
 800c08c:	e2ce      	b.n	800c62c <_svfprintf_r+0xdd4>
 800c08e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c090:	9b08      	ldr	r3, [sp, #32]
 800c092:	4694      	mov	ip, r2
 800c094:	603b      	str	r3, [r7, #0]
 800c096:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c098:	607b      	str	r3, [r7, #4]
 800c09a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800c09c:	4463      	add	r3, ip
 800c09e:	932e      	str	r3, [sp, #184]	; 0xb8
 800c0a0:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800c0a2:	3301      	adds	r3, #1
 800c0a4:	932d      	str	r3, [sp, #180]	; 0xb4
 800c0a6:	2b07      	cmp	r3, #7
 800c0a8:	dd00      	ble.n	800c0ac <_svfprintf_r+0x854>
 800c0aa:	e3a3      	b.n	800c7f4 <_svfprintf_r+0xf9c>
 800c0ac:	3708      	adds	r7, #8
 800c0ae:	e301      	b.n	800c6b4 <_svfprintf_r+0xe5c>
 800c0b0:	08012d34 	.word	0x08012d34
 800c0b4:	08012d45 	.word	0x08012d45
 800c0b8:	40300000 	.word	0x40300000
 800c0bc:	3fe00000 	.word	0x3fe00000
 800c0c0:	fffffbff 	.word	0xfffffbff
 800c0c4:	08012d58 	.word	0x08012d58
 800c0c8:	08012d68 	.word	0x08012d68
 800c0cc:	9b08      	ldr	r3, [sp, #32]
 800c0ce:	930c      	str	r3, [sp, #48]	; 0x30
 800c0d0:	e610      	b.n	800bcf4 <_svfprintf_r+0x49c>
 800c0d2:	2306      	movs	r3, #6
 800c0d4:	e5fd      	b.n	800bcd2 <_svfprintf_r+0x47a>
 800c0d6:	930e      	str	r3, [sp, #56]	; 0x38
 800c0d8:	2300      	movs	r3, #0
 800c0da:	e61a      	b.n	800bd12 <_svfprintf_r+0x4ba>
 800c0dc:	7010      	strb	r0, [r2, #0]
 800c0de:	e684      	b.n	800bdea <_svfprintf_r+0x592>
 800c0e0:	7018      	strb	r0, [r3, #0]
 800c0e2:	3301      	adds	r3, #1
 800c0e4:	1aca      	subs	r2, r1, r3
 800c0e6:	d5fb      	bpl.n	800c0e0 <_svfprintf_r+0x888>
 800c0e8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800c0ea:	2300      	movs	r3, #0
 800c0ec:	3201      	adds	r2, #1
 800c0ee:	db01      	blt.n	800c0f4 <_svfprintf_r+0x89c>
 800c0f0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800c0f2:	3301      	adds	r3, #1
 800c0f4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c0f6:	18d3      	adds	r3, r2, r3
 800c0f8:	9323      	str	r3, [sp, #140]	; 0x8c
 800c0fa:	e684      	b.n	800be06 <_svfprintf_r+0x5ae>
 800c0fc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c0fe:	9920      	ldr	r1, [sp, #128]	; 0x80
 800c100:	2030      	movs	r0, #48	; 0x30
 800c102:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c104:	1851      	adds	r1, r2, r1
 800c106:	e7ed      	b.n	800c0e4 <_svfprintf_r+0x88c>
 800c108:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800c10a:	2303      	movs	r3, #3
 800c10c:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800c10e:	2a46      	cmp	r2, #70	; 0x46
 800c110:	d006      	beq.n	800c120 <_svfprintf_r+0x8c8>
 800c112:	0014      	movs	r4, r2
 800c114:	3c45      	subs	r4, #69	; 0x45
 800c116:	4262      	negs	r2, r4
 800c118:	4154      	adcs	r4, r2
 800c11a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c11c:	3b01      	subs	r3, #1
 800c11e:	1914      	adds	r4, r2, r4
 800c120:	aa2a      	add	r2, sp, #168	; 0xa8
 800c122:	9204      	str	r2, [sp, #16]
 800c124:	aa27      	add	r2, sp, #156	; 0x9c
 800c126:	9203      	str	r2, [sp, #12]
 800c128:	aa26      	add	r2, sp, #152	; 0x98
 800c12a:	9202      	str	r2, [sp, #8]
 800c12c:	9300      	str	r3, [sp, #0]
 800c12e:	002a      	movs	r2, r5
 800c130:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c132:	980a      	ldr	r0, [sp, #40]	; 0x28
 800c134:	9401      	str	r4, [sp, #4]
 800c136:	f002 fad7 	bl	800e6e8 <_dtoa_r>
 800c13a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c13c:	9008      	str	r0, [sp, #32]
 800c13e:	2b47      	cmp	r3, #71	; 0x47
 800c140:	d103      	bne.n	800c14a <_svfprintf_r+0x8f2>
 800c142:	07f3      	lsls	r3, r6, #31
 800c144:	d401      	bmi.n	800c14a <_svfprintf_r+0x8f2>
 800c146:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 800c148:	e65e      	b.n	800be08 <_svfprintf_r+0x5b0>
 800c14a:	9b08      	ldr	r3, [sp, #32]
 800c14c:	191b      	adds	r3, r3, r4
 800c14e:	9311      	str	r3, [sp, #68]	; 0x44
 800c150:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c152:	2b46      	cmp	r3, #70	; 0x46
 800c154:	d112      	bne.n	800c17c <_svfprintf_r+0x924>
 800c156:	9b08      	ldr	r3, [sp, #32]
 800c158:	781b      	ldrb	r3, [r3, #0]
 800c15a:	2b30      	cmp	r3, #48	; 0x30
 800c15c:	d10a      	bne.n	800c174 <_svfprintf_r+0x91c>
 800c15e:	2200      	movs	r2, #0
 800c160:	2300      	movs	r3, #0
 800c162:	0028      	movs	r0, r5
 800c164:	990e      	ldr	r1, [sp, #56]	; 0x38
 800c166:	f7f4 f96f 	bl	8000448 <__aeabi_dcmpeq>
 800c16a:	2800      	cmp	r0, #0
 800c16c:	d102      	bne.n	800c174 <_svfprintf_r+0x91c>
 800c16e:	2301      	movs	r3, #1
 800c170:	1b1b      	subs	r3, r3, r4
 800c172:	9326      	str	r3, [sp, #152]	; 0x98
 800c174:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800c176:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800c178:	18d3      	adds	r3, r2, r3
 800c17a:	9311      	str	r3, [sp, #68]	; 0x44
 800c17c:	2200      	movs	r2, #0
 800c17e:	2300      	movs	r3, #0
 800c180:	0028      	movs	r0, r5
 800c182:	990e      	ldr	r1, [sp, #56]	; 0x38
 800c184:	f7f4 f960 	bl	8000448 <__aeabi_dcmpeq>
 800c188:	2800      	cmp	r0, #0
 800c18a:	d001      	beq.n	800c190 <_svfprintf_r+0x938>
 800c18c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c18e:	932a      	str	r3, [sp, #168]	; 0xa8
 800c190:	2230      	movs	r2, #48	; 0x30
 800c192:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 800c194:	9911      	ldr	r1, [sp, #68]	; 0x44
 800c196:	4299      	cmp	r1, r3
 800c198:	d9d5      	bls.n	800c146 <_svfprintf_r+0x8ee>
 800c19a:	1c59      	adds	r1, r3, #1
 800c19c:	912a      	str	r1, [sp, #168]	; 0xa8
 800c19e:	701a      	strb	r2, [r3, #0]
 800c1a0:	e7f7      	b.n	800c192 <_svfprintf_r+0x93a>
 800c1a2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c1a4:	2b46      	cmp	r3, #70	; 0x46
 800c1a6:	d000      	beq.n	800c1aa <_svfprintf_r+0x952>
 800c1a8:	e63f      	b.n	800be2a <_svfprintf_r+0x5d2>
 800c1aa:	2201      	movs	r2, #1
 800c1ac:	0033      	movs	r3, r6
 800c1ae:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c1b0:	4013      	ands	r3, r2
 800c1b2:	430b      	orrs	r3, r1
 800c1b4:	2d00      	cmp	r5, #0
 800c1b6:	dd2c      	ble.n	800c212 <_svfprintf_r+0x9ba>
 800c1b8:	2b00      	cmp	r3, #0
 800c1ba:	d046      	beq.n	800c24a <_svfprintf_r+0x9f2>
 800c1bc:	000a      	movs	r2, r1
 800c1be:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800c1c0:	18eb      	adds	r3, r5, r3
 800c1c2:	18d3      	adds	r3, r2, r3
 800c1c4:	9309      	str	r3, [sp, #36]	; 0x24
 800c1c6:	2366      	movs	r3, #102	; 0x66
 800c1c8:	930f      	str	r3, [sp, #60]	; 0x3c
 800c1ca:	e030      	b.n	800c22e <_svfprintf_r+0x9d6>
 800c1cc:	781c      	ldrb	r4, [r3, #0]
 800c1ce:	3301      	adds	r3, #1
 800c1d0:	7014      	strb	r4, [r2, #0]
 800c1d2:	3201      	adds	r2, #1
 800c1d4:	e668      	b.n	800bea8 <_svfprintf_r+0x650>
 800c1d6:	222a      	movs	r2, #42	; 0x2a
 800c1d8:	ab1e      	add	r3, sp, #120	; 0x78
 800c1da:	18d2      	adds	r2, r2, r3
 800c1dc:	2800      	cmp	r0, #0
 800c1de:	d104      	bne.n	800c1ea <_svfprintf_r+0x992>
 800c1e0:	2330      	movs	r3, #48	; 0x30
 800c1e2:	222b      	movs	r2, #43	; 0x2b
 800c1e4:	708b      	strb	r3, [r1, #2]
 800c1e6:	ab1e      	add	r3, sp, #120	; 0x78
 800c1e8:	18d2      	adds	r2, r2, r3
 800c1ea:	3430      	adds	r4, #48	; 0x30
 800c1ec:	1c53      	adds	r3, r2, #1
 800c1ee:	7014      	strb	r4, [r2, #0]
 800c1f0:	e669      	b.n	800bec6 <_svfprintf_r+0x66e>
 800c1f2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c1f4:	42ab      	cmp	r3, r5
 800c1f6:	dd12      	ble.n	800c21e <_svfprintf_r+0x9c6>
 800c1f8:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800c1fa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c1fc:	4694      	mov	ip, r2
 800c1fe:	4463      	add	r3, ip
 800c200:	9309      	str	r3, [sp, #36]	; 0x24
 800c202:	2367      	movs	r3, #103	; 0x67
 800c204:	930f      	str	r3, [sp, #60]	; 0x3c
 800c206:	2d00      	cmp	r5, #0
 800c208:	dc11      	bgt.n	800c22e <_svfprintf_r+0x9d6>
 800c20a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c20c:	1b5b      	subs	r3, r3, r5
 800c20e:	3301      	adds	r3, #1
 800c210:	e00c      	b.n	800c22c <_svfprintf_r+0x9d4>
 800c212:	2b00      	cmp	r3, #0
 800c214:	d01b      	beq.n	800c24e <_svfprintf_r+0x9f6>
 800c216:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800c218:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c21a:	3301      	adds	r3, #1
 800c21c:	e7d1      	b.n	800c1c2 <_svfprintf_r+0x96a>
 800c21e:	2367      	movs	r3, #103	; 0x67
 800c220:	9509      	str	r5, [sp, #36]	; 0x24
 800c222:	930f      	str	r3, [sp, #60]	; 0x3c
 800c224:	07f3      	lsls	r3, r6, #31
 800c226:	d502      	bpl.n	800c22e <_svfprintf_r+0x9d6>
 800c228:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800c22a:	18eb      	adds	r3, r5, r3
 800c22c:	9309      	str	r3, [sp, #36]	; 0x24
 800c22e:	2380      	movs	r3, #128	; 0x80
 800c230:	0032      	movs	r2, r6
 800c232:	00db      	lsls	r3, r3, #3
 800c234:	401a      	ands	r2, r3
 800c236:	9211      	str	r2, [sp, #68]	; 0x44
 800c238:	2200      	movs	r2, #0
 800c23a:	9210      	str	r2, [sp, #64]	; 0x40
 800c23c:	421e      	tst	r6, r3
 800c23e:	d100      	bne.n	800c242 <_svfprintf_r+0x9ea>
 800c240:	e65d      	b.n	800befe <_svfprintf_r+0x6a6>
 800c242:	4295      	cmp	r5, r2
 800c244:	dc25      	bgt.n	800c292 <_svfprintf_r+0xa3a>
 800c246:	9211      	str	r2, [sp, #68]	; 0x44
 800c248:	e659      	b.n	800befe <_svfprintf_r+0x6a6>
 800c24a:	9509      	str	r5, [sp, #36]	; 0x24
 800c24c:	e7bb      	b.n	800c1c6 <_svfprintf_r+0x96e>
 800c24e:	2366      	movs	r3, #102	; 0x66
 800c250:	9209      	str	r2, [sp, #36]	; 0x24
 800c252:	930f      	str	r3, [sp, #60]	; 0x3c
 800c254:	e7eb      	b.n	800c22e <_svfprintf_r+0x9d6>
 800c256:	42ab      	cmp	r3, r5
 800c258:	da0e      	bge.n	800c278 <_svfprintf_r+0xa20>
 800c25a:	1aed      	subs	r5, r5, r3
 800c25c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c25e:	785b      	ldrb	r3, [r3, #1]
 800c260:	2b00      	cmp	r3, #0
 800c262:	d012      	beq.n	800c28a <_svfprintf_r+0xa32>
 800c264:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c266:	3301      	adds	r3, #1
 800c268:	9311      	str	r3, [sp, #68]	; 0x44
 800c26a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c26c:	3301      	adds	r3, #1
 800c26e:	9312      	str	r3, [sp, #72]	; 0x48
 800c270:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c272:	781b      	ldrb	r3, [r3, #0]
 800c274:	2bff      	cmp	r3, #255	; 0xff
 800c276:	d1ee      	bne.n	800c256 <_svfprintf_r+0x9fe>
 800c278:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800c27a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c27c:	189b      	adds	r3, r3, r2
 800c27e:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800c280:	4353      	muls	r3, r2
 800c282:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c284:	189b      	adds	r3, r3, r2
 800c286:	9309      	str	r3, [sp, #36]	; 0x24
 800c288:	e639      	b.n	800befe <_svfprintf_r+0x6a6>
 800c28a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c28c:	3301      	adds	r3, #1
 800c28e:	9310      	str	r3, [sp, #64]	; 0x40
 800c290:	e7ee      	b.n	800c270 <_svfprintf_r+0xa18>
 800c292:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c294:	9311      	str	r3, [sp, #68]	; 0x44
 800c296:	e7eb      	b.n	800c270 <_svfprintf_r+0xa18>
 800c298:	1d23      	adds	r3, r4, #4
 800c29a:	930d      	str	r3, [sp, #52]	; 0x34
 800c29c:	06b3      	lsls	r3, r6, #26
 800c29e:	d509      	bpl.n	800c2b4 <_svfprintf_r+0xa5c>
 800c2a0:	6823      	ldr	r3, [r4, #0]
 800c2a2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800c2a4:	601a      	str	r2, [r3, #0]
 800c2a6:	17d2      	asrs	r2, r2, #31
 800c2a8:	605a      	str	r2, [r3, #4]
 800c2aa:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800c2ac:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 800c2ae:	9308      	str	r3, [sp, #32]
 800c2b0:	f7ff fb0d 	bl	800b8ce <_svfprintf_r+0x76>
 800c2b4:	06f3      	lsls	r3, r6, #27
 800c2b6:	d503      	bpl.n	800c2c0 <_svfprintf_r+0xa68>
 800c2b8:	6823      	ldr	r3, [r4, #0]
 800c2ba:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800c2bc:	601a      	str	r2, [r3, #0]
 800c2be:	e7f4      	b.n	800c2aa <_svfprintf_r+0xa52>
 800c2c0:	0673      	lsls	r3, r6, #25
 800c2c2:	d503      	bpl.n	800c2cc <_svfprintf_r+0xa74>
 800c2c4:	6823      	ldr	r3, [r4, #0]
 800c2c6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800c2c8:	801a      	strh	r2, [r3, #0]
 800c2ca:	e7ee      	b.n	800c2aa <_svfprintf_r+0xa52>
 800c2cc:	05b6      	lsls	r6, r6, #22
 800c2ce:	d5f3      	bpl.n	800c2b8 <_svfprintf_r+0xa60>
 800c2d0:	6823      	ldr	r3, [r4, #0]
 800c2d2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800c2d4:	701a      	strb	r2, [r3, #0]
 800c2d6:	e7e8      	b.n	800c2aa <_svfprintf_r+0xa52>
 800c2d8:	2310      	movs	r3, #16
 800c2da:	431e      	orrs	r6, r3
 800c2dc:	2320      	movs	r3, #32
 800c2de:	0030      	movs	r0, r6
 800c2e0:	4018      	ands	r0, r3
 800c2e2:	421e      	tst	r6, r3
 800c2e4:	d00f      	beq.n	800c306 <_svfprintf_r+0xaae>
 800c2e6:	3b19      	subs	r3, #25
 800c2e8:	3407      	adds	r4, #7
 800c2ea:	439c      	bics	r4, r3
 800c2ec:	0022      	movs	r2, r4
 800c2ee:	ca18      	ldmia	r2!, {r3, r4}
 800c2f0:	9306      	str	r3, [sp, #24]
 800c2f2:	9407      	str	r4, [sp, #28]
 800c2f4:	920d      	str	r2, [sp, #52]	; 0x34
 800c2f6:	4bc9      	ldr	r3, [pc, #804]	; (800c61c <_svfprintf_r+0xdc4>)
 800c2f8:	401e      	ands	r6, r3
 800c2fa:	2300      	movs	r3, #0
 800c2fc:	221b      	movs	r2, #27
 800c2fe:	a91e      	add	r1, sp, #120	; 0x78
 800c300:	1852      	adds	r2, r2, r1
 800c302:	2100      	movs	r1, #0
 800c304:	e430      	b.n	800bb68 <_svfprintf_r+0x310>
 800c306:	0022      	movs	r2, r4
 800c308:	ca08      	ldmia	r2!, {r3}
 800c30a:	0031      	movs	r1, r6
 800c30c:	920d      	str	r2, [sp, #52]	; 0x34
 800c30e:	2210      	movs	r2, #16
 800c310:	4011      	ands	r1, r2
 800c312:	4216      	tst	r6, r2
 800c314:	d002      	beq.n	800c31c <_svfprintf_r+0xac4>
 800c316:	9306      	str	r3, [sp, #24]
 800c318:	9007      	str	r0, [sp, #28]
 800c31a:	e7ec      	b.n	800c2f6 <_svfprintf_r+0xa9e>
 800c31c:	2240      	movs	r2, #64	; 0x40
 800c31e:	0030      	movs	r0, r6
 800c320:	4010      	ands	r0, r2
 800c322:	4216      	tst	r6, r2
 800c324:	d003      	beq.n	800c32e <_svfprintf_r+0xad6>
 800c326:	b29b      	uxth	r3, r3
 800c328:	9306      	str	r3, [sp, #24]
 800c32a:	9107      	str	r1, [sp, #28]
 800c32c:	e7e3      	b.n	800c2f6 <_svfprintf_r+0xa9e>
 800c32e:	2280      	movs	r2, #128	; 0x80
 800c330:	0031      	movs	r1, r6
 800c332:	0092      	lsls	r2, r2, #2
 800c334:	4011      	ands	r1, r2
 800c336:	4216      	tst	r6, r2
 800c338:	d0f6      	beq.n	800c328 <_svfprintf_r+0xad0>
 800c33a:	b2db      	uxtb	r3, r3
 800c33c:	e7eb      	b.n	800c316 <_svfprintf_r+0xabe>
 800c33e:	0023      	movs	r3, r4
 800c340:	cb04      	ldmia	r3!, {r2}
 800c342:	49b7      	ldr	r1, [pc, #732]	; (800c620 <_svfprintf_r+0xdc8>)
 800c344:	9206      	str	r2, [sp, #24]
 800c346:	aa25      	add	r2, sp, #148	; 0x94
 800c348:	8011      	strh	r1, [r2, #0]
 800c34a:	4ab6      	ldr	r2, [pc, #728]	; (800c624 <_svfprintf_r+0xdcc>)
 800c34c:	930d      	str	r3, [sp, #52]	; 0x34
 800c34e:	2300      	movs	r3, #0
 800c350:	921f      	str	r2, [sp, #124]	; 0x7c
 800c352:	2278      	movs	r2, #120	; 0x78
 800c354:	9307      	str	r3, [sp, #28]
 800c356:	3302      	adds	r3, #2
 800c358:	431e      	orrs	r6, r3
 800c35a:	920f      	str	r2, [sp, #60]	; 0x3c
 800c35c:	e7ce      	b.n	800c2fc <_svfprintf_r+0xaa4>
 800c35e:	0023      	movs	r3, r4
 800c360:	cb04      	ldmia	r3!, {r2}
 800c362:	2400      	movs	r4, #0
 800c364:	930d      	str	r3, [sp, #52]	; 0x34
 800c366:	231b      	movs	r3, #27
 800c368:	9208      	str	r2, [sp, #32]
 800c36a:	aa1e      	add	r2, sp, #120	; 0x78
 800c36c:	189b      	adds	r3, r3, r2
 800c36e:	701c      	strb	r4, [r3, #0]
 800c370:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c372:	3301      	adds	r3, #1
 800c374:	d00e      	beq.n	800c394 <_svfprintf_r+0xb3c>
 800c376:	0021      	movs	r1, r4
 800c378:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c37a:	9808      	ldr	r0, [sp, #32]
 800c37c:	f002 f83a 	bl	800e3f4 <memchr>
 800c380:	900c      	str	r0, [sp, #48]	; 0x30
 800c382:	42a0      	cmp	r0, r4
 800c384:	d100      	bne.n	800c388 <_svfprintf_r+0xb30>
 800c386:	e10d      	b.n	800c5a4 <_svfprintf_r+0xd4c>
 800c388:	9a08      	ldr	r2, [sp, #32]
 800c38a:	1a83      	subs	r3, r0, r2
 800c38c:	9309      	str	r3, [sp, #36]	; 0x24
 800c38e:	0023      	movs	r3, r4
 800c390:	940c      	str	r4, [sp, #48]	; 0x30
 800c392:	e44e      	b.n	800bc32 <_svfprintf_r+0x3da>
 800c394:	9808      	ldr	r0, [sp, #32]
 800c396:	f7f3 feb5 	bl	8000104 <strlen>
 800c39a:	9009      	str	r0, [sp, #36]	; 0x24
 800c39c:	e7f7      	b.n	800c38e <_svfprintf_r+0xb36>
 800c39e:	2310      	movs	r3, #16
 800c3a0:	431e      	orrs	r6, r3
 800c3a2:	2320      	movs	r3, #32
 800c3a4:	0030      	movs	r0, r6
 800c3a6:	4018      	ands	r0, r3
 800c3a8:	421e      	tst	r6, r3
 800c3aa:	d009      	beq.n	800c3c0 <_svfprintf_r+0xb68>
 800c3ac:	3b19      	subs	r3, #25
 800c3ae:	3407      	adds	r4, #7
 800c3b0:	439c      	bics	r4, r3
 800c3b2:	0022      	movs	r2, r4
 800c3b4:	ca18      	ldmia	r2!, {r3, r4}
 800c3b6:	9306      	str	r3, [sp, #24]
 800c3b8:	9407      	str	r4, [sp, #28]
 800c3ba:	920d      	str	r2, [sp, #52]	; 0x34
 800c3bc:	2301      	movs	r3, #1
 800c3be:	e79d      	b.n	800c2fc <_svfprintf_r+0xaa4>
 800c3c0:	0023      	movs	r3, r4
 800c3c2:	cb04      	ldmia	r3!, {r2}
 800c3c4:	0031      	movs	r1, r6
 800c3c6:	930d      	str	r3, [sp, #52]	; 0x34
 800c3c8:	2310      	movs	r3, #16
 800c3ca:	4019      	ands	r1, r3
 800c3cc:	421e      	tst	r6, r3
 800c3ce:	d003      	beq.n	800c3d8 <_svfprintf_r+0xb80>
 800c3d0:	9206      	str	r2, [sp, #24]
 800c3d2:	9007      	str	r0, [sp, #28]
 800c3d4:	3b0f      	subs	r3, #15
 800c3d6:	e791      	b.n	800c2fc <_svfprintf_r+0xaa4>
 800c3d8:	2340      	movs	r3, #64	; 0x40
 800c3da:	0030      	movs	r0, r6
 800c3dc:	4018      	ands	r0, r3
 800c3de:	421e      	tst	r6, r3
 800c3e0:	d003      	beq.n	800c3ea <_svfprintf_r+0xb92>
 800c3e2:	b293      	uxth	r3, r2
 800c3e4:	9306      	str	r3, [sp, #24]
 800c3e6:	9107      	str	r1, [sp, #28]
 800c3e8:	e7e8      	b.n	800c3bc <_svfprintf_r+0xb64>
 800c3ea:	2380      	movs	r3, #128	; 0x80
 800c3ec:	0031      	movs	r1, r6
 800c3ee:	009b      	lsls	r3, r3, #2
 800c3f0:	4019      	ands	r1, r3
 800c3f2:	421e      	tst	r6, r3
 800c3f4:	d003      	beq.n	800c3fe <_svfprintf_r+0xba6>
 800c3f6:	b2d3      	uxtb	r3, r2
 800c3f8:	9306      	str	r3, [sp, #24]
 800c3fa:	9007      	str	r0, [sp, #28]
 800c3fc:	e7de      	b.n	800c3bc <_svfprintf_r+0xb64>
 800c3fe:	9206      	str	r2, [sp, #24]
 800c400:	e7f1      	b.n	800c3e6 <_svfprintf_r+0xb8e>
 800c402:	4b89      	ldr	r3, [pc, #548]	; (800c628 <_svfprintf_r+0xdd0>)
 800c404:	0030      	movs	r0, r6
 800c406:	931f      	str	r3, [sp, #124]	; 0x7c
 800c408:	2320      	movs	r3, #32
 800c40a:	4018      	ands	r0, r3
 800c40c:	421e      	tst	r6, r3
 800c40e:	d01a      	beq.n	800c446 <_svfprintf_r+0xbee>
 800c410:	3b19      	subs	r3, #25
 800c412:	3407      	adds	r4, #7
 800c414:	439c      	bics	r4, r3
 800c416:	0022      	movs	r2, r4
 800c418:	ca18      	ldmia	r2!, {r3, r4}
 800c41a:	9306      	str	r3, [sp, #24]
 800c41c:	9407      	str	r4, [sp, #28]
 800c41e:	920d      	str	r2, [sp, #52]	; 0x34
 800c420:	07f3      	lsls	r3, r6, #31
 800c422:	d50a      	bpl.n	800c43a <_svfprintf_r+0xbe2>
 800c424:	9b06      	ldr	r3, [sp, #24]
 800c426:	9a07      	ldr	r2, [sp, #28]
 800c428:	4313      	orrs	r3, r2
 800c42a:	d006      	beq.n	800c43a <_svfprintf_r+0xbe2>
 800c42c:	2230      	movs	r2, #48	; 0x30
 800c42e:	ab25      	add	r3, sp, #148	; 0x94
 800c430:	701a      	strb	r2, [r3, #0]
 800c432:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800c434:	705a      	strb	r2, [r3, #1]
 800c436:	2302      	movs	r3, #2
 800c438:	431e      	orrs	r6, r3
 800c43a:	4b78      	ldr	r3, [pc, #480]	; (800c61c <_svfprintf_r+0xdc4>)
 800c43c:	401e      	ands	r6, r3
 800c43e:	2302      	movs	r3, #2
 800c440:	e75c      	b.n	800c2fc <_svfprintf_r+0xaa4>
 800c442:	4b78      	ldr	r3, [pc, #480]	; (800c624 <_svfprintf_r+0xdcc>)
 800c444:	e7de      	b.n	800c404 <_svfprintf_r+0xbac>
 800c446:	0023      	movs	r3, r4
 800c448:	cb04      	ldmia	r3!, {r2}
 800c44a:	0031      	movs	r1, r6
 800c44c:	930d      	str	r3, [sp, #52]	; 0x34
 800c44e:	2310      	movs	r3, #16
 800c450:	4019      	ands	r1, r3
 800c452:	421e      	tst	r6, r3
 800c454:	d002      	beq.n	800c45c <_svfprintf_r+0xc04>
 800c456:	9206      	str	r2, [sp, #24]
 800c458:	9007      	str	r0, [sp, #28]
 800c45a:	e7e1      	b.n	800c420 <_svfprintf_r+0xbc8>
 800c45c:	2340      	movs	r3, #64	; 0x40
 800c45e:	0030      	movs	r0, r6
 800c460:	4018      	ands	r0, r3
 800c462:	421e      	tst	r6, r3
 800c464:	d003      	beq.n	800c46e <_svfprintf_r+0xc16>
 800c466:	b293      	uxth	r3, r2
 800c468:	9306      	str	r3, [sp, #24]
 800c46a:	9107      	str	r1, [sp, #28]
 800c46c:	e7d8      	b.n	800c420 <_svfprintf_r+0xbc8>
 800c46e:	2380      	movs	r3, #128	; 0x80
 800c470:	0031      	movs	r1, r6
 800c472:	009b      	lsls	r3, r3, #2
 800c474:	4019      	ands	r1, r3
 800c476:	421e      	tst	r6, r3
 800c478:	d002      	beq.n	800c480 <_svfprintf_r+0xc28>
 800c47a:	b2d3      	uxtb	r3, r2
 800c47c:	9306      	str	r3, [sp, #24]
 800c47e:	e7eb      	b.n	800c458 <_svfprintf_r+0xc00>
 800c480:	9206      	str	r2, [sp, #24]
 800c482:	e7f2      	b.n	800c46a <_svfprintf_r+0xc12>
 800c484:	9b07      	ldr	r3, [sp, #28]
 800c486:	2b00      	cmp	r3, #0
 800c488:	d10a      	bne.n	800c4a0 <_svfprintf_r+0xc48>
 800c48a:	9b06      	ldr	r3, [sp, #24]
 800c48c:	2b09      	cmp	r3, #9
 800c48e:	d807      	bhi.n	800c4a0 <_svfprintf_r+0xc48>
 800c490:	23e7      	movs	r3, #231	; 0xe7
 800c492:	aa1e      	add	r2, sp, #120	; 0x78
 800c494:	189b      	adds	r3, r3, r2
 800c496:	9a06      	ldr	r2, [sp, #24]
 800c498:	3230      	adds	r2, #48	; 0x30
 800c49a:	701a      	strb	r2, [r3, #0]
 800c49c:	f000 fc18 	bl	800ccd0 <_svfprintf_r+0x1478>
 800c4a0:	2680      	movs	r6, #128	; 0x80
 800c4a2:	2300      	movs	r3, #0
 800c4a4:	00f6      	lsls	r6, r6, #3
 800c4a6:	930e      	str	r3, [sp, #56]	; 0x38
 800c4a8:	ad58      	add	r5, sp, #352	; 0x160
 800c4aa:	4026      	ands	r6, r4
 800c4ac:	220a      	movs	r2, #10
 800c4ae:	9806      	ldr	r0, [sp, #24]
 800c4b0:	9907      	ldr	r1, [sp, #28]
 800c4b2:	2300      	movs	r3, #0
 800c4b4:	f7f3 fff6 	bl	80004a4 <__aeabi_uldivmod>
 800c4b8:	1e6b      	subs	r3, r5, #1
 800c4ba:	3230      	adds	r2, #48	; 0x30
 800c4bc:	9308      	str	r3, [sp, #32]
 800c4be:	701a      	strb	r2, [r3, #0]
 800c4c0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c4c2:	900c      	str	r0, [sp, #48]	; 0x30
 800c4c4:	3301      	adds	r3, #1
 800c4c6:	9110      	str	r1, [sp, #64]	; 0x40
 800c4c8:	930e      	str	r3, [sp, #56]	; 0x38
 800c4ca:	2e00      	cmp	r6, #0
 800c4cc:	d01d      	beq.n	800c50a <_svfprintf_r+0xcb2>
 800c4ce:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c4d0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c4d2:	781b      	ldrb	r3, [r3, #0]
 800c4d4:	429a      	cmp	r2, r3
 800c4d6:	d118      	bne.n	800c50a <_svfprintf_r+0xcb2>
 800c4d8:	2aff      	cmp	r2, #255	; 0xff
 800c4da:	d016      	beq.n	800c50a <_svfprintf_r+0xcb2>
 800c4dc:	9b07      	ldr	r3, [sp, #28]
 800c4de:	2b00      	cmp	r3, #0
 800c4e0:	d102      	bne.n	800c4e8 <_svfprintf_r+0xc90>
 800c4e2:	9b06      	ldr	r3, [sp, #24]
 800c4e4:	2b09      	cmp	r3, #9
 800c4e6:	d910      	bls.n	800c50a <_svfprintf_r+0xcb2>
 800c4e8:	9b08      	ldr	r3, [sp, #32]
 800c4ea:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800c4ec:	991d      	ldr	r1, [sp, #116]	; 0x74
 800c4ee:	1a9b      	subs	r3, r3, r2
 800c4f0:	0018      	movs	r0, r3
 800c4f2:	9308      	str	r3, [sp, #32]
 800c4f4:	f7fd ffd1 	bl	800a49a <strncpy>
 800c4f8:	2200      	movs	r2, #0
 800c4fa:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c4fc:	920e      	str	r2, [sp, #56]	; 0x38
 800c4fe:	785b      	ldrb	r3, [r3, #1]
 800c500:	1e5a      	subs	r2, r3, #1
 800c502:	4193      	sbcs	r3, r2
 800c504:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800c506:	18d3      	adds	r3, r2, r3
 800c508:	9312      	str	r3, [sp, #72]	; 0x48
 800c50a:	9b07      	ldr	r3, [sp, #28]
 800c50c:	2b00      	cmp	r3, #0
 800c50e:	d10f      	bne.n	800c530 <_svfprintf_r+0xcd8>
 800c510:	9b06      	ldr	r3, [sp, #24]
 800c512:	2b09      	cmp	r3, #9
 800c514:	d80c      	bhi.n	800c530 <_svfprintf_r+0xcd8>
 800c516:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c518:	9a08      	ldr	r2, [sp, #32]
 800c51a:	9319      	str	r3, [sp, #100]	; 0x64
 800c51c:	ab58      	add	r3, sp, #352	; 0x160
 800c51e:	1a9b      	subs	r3, r3, r2
 800c520:	9309      	str	r3, [sp, #36]	; 0x24
 800c522:	2300      	movs	r3, #0
 800c524:	0026      	movs	r6, r4
 800c526:	930c      	str	r3, [sp, #48]	; 0x30
 800c528:	001d      	movs	r5, r3
 800c52a:	9310      	str	r3, [sp, #64]	; 0x40
 800c52c:	9311      	str	r3, [sp, #68]	; 0x44
 800c52e:	e4f2      	b.n	800bf16 <_svfprintf_r+0x6be>
 800c530:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c532:	9d08      	ldr	r5, [sp, #32]
 800c534:	9306      	str	r3, [sp, #24]
 800c536:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c538:	9307      	str	r3, [sp, #28]
 800c53a:	e7b7      	b.n	800c4ac <_svfprintf_r+0xc54>
 800c53c:	200f      	movs	r0, #15
 800c53e:	ab58      	add	r3, sp, #352	; 0x160
 800c540:	9308      	str	r3, [sp, #32]
 800c542:	9b08      	ldr	r3, [sp, #32]
 800c544:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800c546:	3b01      	subs	r3, #1
 800c548:	9308      	str	r3, [sp, #32]
 800c54a:	9b06      	ldr	r3, [sp, #24]
 800c54c:	4003      	ands	r3, r0
 800c54e:	5cd3      	ldrb	r3, [r2, r3]
 800c550:	9a08      	ldr	r2, [sp, #32]
 800c552:	7013      	strb	r3, [r2, #0]
 800c554:	9b07      	ldr	r3, [sp, #28]
 800c556:	0719      	lsls	r1, r3, #28
 800c558:	9b06      	ldr	r3, [sp, #24]
 800c55a:	091a      	lsrs	r2, r3, #4
 800c55c:	9b07      	ldr	r3, [sp, #28]
 800c55e:	4311      	orrs	r1, r2
 800c560:	091b      	lsrs	r3, r3, #4
 800c562:	9307      	str	r3, [sp, #28]
 800c564:	000b      	movs	r3, r1
 800c566:	9a07      	ldr	r2, [sp, #28]
 800c568:	9106      	str	r1, [sp, #24]
 800c56a:	4313      	orrs	r3, r2
 800c56c:	d1e9      	bne.n	800c542 <_svfprintf_r+0xcea>
 800c56e:	e7d2      	b.n	800c516 <_svfprintf_r+0xcbe>
 800c570:	aa58      	add	r2, sp, #352	; 0x160
 800c572:	9208      	str	r2, [sp, #32]
 800c574:	2b00      	cmp	r3, #0
 800c576:	d1ce      	bne.n	800c516 <_svfprintf_r+0xcbe>
 800c578:	07f6      	lsls	r6, r6, #31
 800c57a:	d5cc      	bpl.n	800c516 <_svfprintf_r+0xcbe>
 800c57c:	aa1e      	add	r2, sp, #120	; 0x78
 800c57e:	33e7      	adds	r3, #231	; 0xe7
 800c580:	189b      	adds	r3, r3, r2
 800c582:	2230      	movs	r2, #48	; 0x30
 800c584:	e789      	b.n	800c49a <_svfprintf_r+0xc42>
 800c586:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c588:	2b00      	cmp	r3, #0
 800c58a:	d100      	bne.n	800c58e <_svfprintf_r+0xd36>
 800c58c:	e364      	b.n	800cc58 <_svfprintf_r+0x1400>
 800c58e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800c590:	211b      	movs	r1, #27
 800c592:	ab3f      	add	r3, sp, #252	; 0xfc
 800c594:	701a      	strb	r2, [r3, #0]
 800c596:	2200      	movs	r2, #0
 800c598:	a81e      	add	r0, sp, #120	; 0x78
 800c59a:	1809      	adds	r1, r1, r0
 800c59c:	700a      	strb	r2, [r1, #0]
 800c59e:	940d      	str	r4, [sp, #52]	; 0x34
 800c5a0:	f7ff fabd 	bl	800bb1e <_svfprintf_r+0x2c6>
 800c5a4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c5a6:	f7ff fb44 	bl	800bc32 <_svfprintf_r+0x3da>
 800c5aa:	2010      	movs	r0, #16
 800c5ac:	1812      	adds	r2, r2, r0
 800c5ae:	6078      	str	r0, [r7, #4]
 800c5b0:	922e      	str	r2, [sp, #184]	; 0xb8
 800c5b2:	932d      	str	r3, [sp, #180]	; 0xb4
 800c5b4:	2b07      	cmp	r3, #7
 800c5b6:	dd08      	ble.n	800c5ca <_svfprintf_r+0xd72>
 800c5b8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c5ba:	980a      	ldr	r0, [sp, #40]	; 0x28
 800c5bc:	aa2c      	add	r2, sp, #176	; 0xb0
 800c5be:	f003 fa61 	bl	800fa84 <__ssprint_r>
 800c5c2:	2800      	cmp	r0, #0
 800c5c4:	d000      	beq.n	800c5c8 <_svfprintf_r+0xd70>
 800c5c6:	e326      	b.n	800cc16 <_svfprintf_r+0x13be>
 800c5c8:	a92f      	add	r1, sp, #188	; 0xbc
 800c5ca:	000f      	movs	r7, r1
 800c5cc:	3c10      	subs	r4, #16
 800c5ce:	e4c5      	b.n	800bf5c <_svfprintf_r+0x704>
 800c5d0:	2010      	movs	r0, #16
 800c5d2:	1812      	adds	r2, r2, r0
 800c5d4:	6078      	str	r0, [r7, #4]
 800c5d6:	922e      	str	r2, [sp, #184]	; 0xb8
 800c5d8:	932d      	str	r3, [sp, #180]	; 0xb4
 800c5da:	2b07      	cmp	r3, #7
 800c5dc:	dd08      	ble.n	800c5f0 <_svfprintf_r+0xd98>
 800c5de:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c5e0:	980a      	ldr	r0, [sp, #40]	; 0x28
 800c5e2:	aa2c      	add	r2, sp, #176	; 0xb0
 800c5e4:	f003 fa4e 	bl	800fa84 <__ssprint_r>
 800c5e8:	2800      	cmp	r0, #0
 800c5ea:	d000      	beq.n	800c5ee <_svfprintf_r+0xd96>
 800c5ec:	e313      	b.n	800cc16 <_svfprintf_r+0x13be>
 800c5ee:	a92f      	add	r1, sp, #188	; 0xbc
 800c5f0:	000f      	movs	r7, r1
 800c5f2:	3c10      	subs	r4, #16
 800c5f4:	e50b      	b.n	800c00e <_svfprintf_r+0x7b6>
 800c5f6:	2010      	movs	r0, #16
 800c5f8:	1812      	adds	r2, r2, r0
 800c5fa:	6078      	str	r0, [r7, #4]
 800c5fc:	922e      	str	r2, [sp, #184]	; 0xb8
 800c5fe:	932d      	str	r3, [sp, #180]	; 0xb4
 800c600:	2b07      	cmp	r3, #7
 800c602:	dd08      	ble.n	800c616 <_svfprintf_r+0xdbe>
 800c604:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c606:	980a      	ldr	r0, [sp, #40]	; 0x28
 800c608:	aa2c      	add	r2, sp, #176	; 0xb0
 800c60a:	f003 fa3b 	bl	800fa84 <__ssprint_r>
 800c60e:	2800      	cmp	r0, #0
 800c610:	d000      	beq.n	800c614 <_svfprintf_r+0xdbc>
 800c612:	e300      	b.n	800cc16 <_svfprintf_r+0x13be>
 800c614:	a92f      	add	r1, sp, #188	; 0xbc
 800c616:	000f      	movs	r7, r1
 800c618:	3c10      	subs	r4, #16
 800c61a:	e518      	b.n	800c04e <_svfprintf_r+0x7f6>
 800c61c:	fffffbff 	.word	0xfffffbff
 800c620:	00007830 	.word	0x00007830
 800c624:	08012d34 	.word	0x08012d34
 800c628:	08012d45 	.word	0x08012d45
 800c62c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c62e:	2b65      	cmp	r3, #101	; 0x65
 800c630:	dc00      	bgt.n	800c634 <_svfprintf_r+0xddc>
 800c632:	e241      	b.n	800cab8 <_svfprintf_r+0x1260>
 800c634:	9814      	ldr	r0, [sp, #80]	; 0x50
 800c636:	9915      	ldr	r1, [sp, #84]	; 0x54
 800c638:	2200      	movs	r2, #0
 800c63a:	2300      	movs	r3, #0
 800c63c:	f7f3 ff04 	bl	8000448 <__aeabi_dcmpeq>
 800c640:	2800      	cmp	r0, #0
 800c642:	d077      	beq.n	800c734 <_svfprintf_r+0xedc>
 800c644:	4bca      	ldr	r3, [pc, #808]	; (800c970 <_svfprintf_r+0x1118>)
 800c646:	603b      	str	r3, [r7, #0]
 800c648:	2301      	movs	r3, #1
 800c64a:	607b      	str	r3, [r7, #4]
 800c64c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800c64e:	3708      	adds	r7, #8
 800c650:	3301      	adds	r3, #1
 800c652:	932e      	str	r3, [sp, #184]	; 0xb8
 800c654:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800c656:	3301      	adds	r3, #1
 800c658:	932d      	str	r3, [sp, #180]	; 0xb4
 800c65a:	2b07      	cmp	r3, #7
 800c65c:	dd08      	ble.n	800c670 <_svfprintf_r+0xe18>
 800c65e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c660:	980a      	ldr	r0, [sp, #40]	; 0x28
 800c662:	aa2c      	add	r2, sp, #176	; 0xb0
 800c664:	f003 fa0e 	bl	800fa84 <__ssprint_r>
 800c668:	2800      	cmp	r0, #0
 800c66a:	d000      	beq.n	800c66e <_svfprintf_r+0xe16>
 800c66c:	e2d3      	b.n	800cc16 <_svfprintf_r+0x13be>
 800c66e:	af2f      	add	r7, sp, #188	; 0xbc
 800c670:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800c672:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c674:	4293      	cmp	r3, r2
 800c676:	db01      	blt.n	800c67c <_svfprintf_r+0xe24>
 800c678:	07f3      	lsls	r3, r6, #31
 800c67a:	d51b      	bpl.n	800c6b4 <_svfprintf_r+0xe5c>
 800c67c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800c67e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800c680:	603b      	str	r3, [r7, #0]
 800c682:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800c684:	607b      	str	r3, [r7, #4]
 800c686:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800c688:	3708      	adds	r7, #8
 800c68a:	189b      	adds	r3, r3, r2
 800c68c:	932e      	str	r3, [sp, #184]	; 0xb8
 800c68e:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800c690:	3301      	adds	r3, #1
 800c692:	932d      	str	r3, [sp, #180]	; 0xb4
 800c694:	2b07      	cmp	r3, #7
 800c696:	dd08      	ble.n	800c6aa <_svfprintf_r+0xe52>
 800c698:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c69a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800c69c:	aa2c      	add	r2, sp, #176	; 0xb0
 800c69e:	f003 f9f1 	bl	800fa84 <__ssprint_r>
 800c6a2:	2800      	cmp	r0, #0
 800c6a4:	d000      	beq.n	800c6a8 <_svfprintf_r+0xe50>
 800c6a6:	e2b6      	b.n	800cc16 <_svfprintf_r+0x13be>
 800c6a8:	af2f      	add	r7, sp, #188	; 0xbc
 800c6aa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c6ac:	2510      	movs	r5, #16
 800c6ae:	1e5c      	subs	r4, r3, #1
 800c6b0:	2c00      	cmp	r4, #0
 800c6b2:	dc2e      	bgt.n	800c712 <_svfprintf_r+0xeba>
 800c6b4:	0776      	lsls	r6, r6, #29
 800c6b6:	d500      	bpl.n	800c6ba <_svfprintf_r+0xe62>
 800c6b8:	e290      	b.n	800cbdc <_svfprintf_r+0x1384>
 800c6ba:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800c6bc:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800c6be:	4293      	cmp	r3, r2
 800c6c0:	da00      	bge.n	800c6c4 <_svfprintf_r+0xe6c>
 800c6c2:	0013      	movs	r3, r2
 800c6c4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800c6c6:	18d3      	adds	r3, r2, r3
 800c6c8:	9317      	str	r3, [sp, #92]	; 0x5c
 800c6ca:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800c6cc:	2b00      	cmp	r3, #0
 800c6ce:	d007      	beq.n	800c6e0 <_svfprintf_r+0xe88>
 800c6d0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c6d2:	980a      	ldr	r0, [sp, #40]	; 0x28
 800c6d4:	aa2c      	add	r2, sp, #176	; 0xb0
 800c6d6:	f003 f9d5 	bl	800fa84 <__ssprint_r>
 800c6da:	2800      	cmp	r0, #0
 800c6dc:	d000      	beq.n	800c6e0 <_svfprintf_r+0xe88>
 800c6de:	e29a      	b.n	800cc16 <_svfprintf_r+0x13be>
 800c6e0:	2300      	movs	r3, #0
 800c6e2:	932d      	str	r3, [sp, #180]	; 0xb4
 800c6e4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c6e6:	2b00      	cmp	r3, #0
 800c6e8:	d000      	beq.n	800c6ec <_svfprintf_r+0xe94>
 800c6ea:	e2b0      	b.n	800cc4e <_svfprintf_r+0x13f6>
 800c6ec:	af2f      	add	r7, sp, #188	; 0xbc
 800c6ee:	e5dc      	b.n	800c2aa <_svfprintf_r+0xa52>
 800c6f0:	3210      	adds	r2, #16
 800c6f2:	607d      	str	r5, [r7, #4]
 800c6f4:	922e      	str	r2, [sp, #184]	; 0xb8
 800c6f6:	932d      	str	r3, [sp, #180]	; 0xb4
 800c6f8:	2b07      	cmp	r3, #7
 800c6fa:	dd08      	ble.n	800c70e <_svfprintf_r+0xeb6>
 800c6fc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c6fe:	980a      	ldr	r0, [sp, #40]	; 0x28
 800c700:	aa2c      	add	r2, sp, #176	; 0xb0
 800c702:	f003 f9bf 	bl	800fa84 <__ssprint_r>
 800c706:	2800      	cmp	r0, #0
 800c708:	d000      	beq.n	800c70c <_svfprintf_r+0xeb4>
 800c70a:	e284      	b.n	800cc16 <_svfprintf_r+0x13be>
 800c70c:	a92f      	add	r1, sp, #188	; 0xbc
 800c70e:	000f      	movs	r7, r1
 800c710:	3c10      	subs	r4, #16
 800c712:	0039      	movs	r1, r7
 800c714:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800c716:	4897      	ldr	r0, [pc, #604]	; (800c974 <_svfprintf_r+0x111c>)
 800c718:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800c71a:	3301      	adds	r3, #1
 800c71c:	3108      	adds	r1, #8
 800c71e:	6038      	str	r0, [r7, #0]
 800c720:	2c10      	cmp	r4, #16
 800c722:	dce5      	bgt.n	800c6f0 <_svfprintf_r+0xe98>
 800c724:	607c      	str	r4, [r7, #4]
 800c726:	18a4      	adds	r4, r4, r2
 800c728:	942e      	str	r4, [sp, #184]	; 0xb8
 800c72a:	000f      	movs	r7, r1
 800c72c:	932d      	str	r3, [sp, #180]	; 0xb4
 800c72e:	2b07      	cmp	r3, #7
 800c730:	ddc0      	ble.n	800c6b4 <_svfprintf_r+0xe5c>
 800c732:	e05f      	b.n	800c7f4 <_svfprintf_r+0xf9c>
 800c734:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800c736:	2b00      	cmp	r3, #0
 800c738:	dc78      	bgt.n	800c82c <_svfprintf_r+0xfd4>
 800c73a:	4b8d      	ldr	r3, [pc, #564]	; (800c970 <_svfprintf_r+0x1118>)
 800c73c:	603b      	str	r3, [r7, #0]
 800c73e:	2301      	movs	r3, #1
 800c740:	607b      	str	r3, [r7, #4]
 800c742:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800c744:	3708      	adds	r7, #8
 800c746:	3301      	adds	r3, #1
 800c748:	932e      	str	r3, [sp, #184]	; 0xb8
 800c74a:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800c74c:	3301      	adds	r3, #1
 800c74e:	932d      	str	r3, [sp, #180]	; 0xb4
 800c750:	2b07      	cmp	r3, #7
 800c752:	dd08      	ble.n	800c766 <_svfprintf_r+0xf0e>
 800c754:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c756:	980a      	ldr	r0, [sp, #40]	; 0x28
 800c758:	aa2c      	add	r2, sp, #176	; 0xb0
 800c75a:	f003 f993 	bl	800fa84 <__ssprint_r>
 800c75e:	2800      	cmp	r0, #0
 800c760:	d000      	beq.n	800c764 <_svfprintf_r+0xf0c>
 800c762:	e258      	b.n	800cc16 <_svfprintf_r+0x13be>
 800c764:	af2f      	add	r7, sp, #188	; 0xbc
 800c766:	990e      	ldr	r1, [sp, #56]	; 0x38
 800c768:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800c76a:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800c76c:	430b      	orrs	r3, r1
 800c76e:	2101      	movs	r1, #1
 800c770:	4031      	ands	r1, r6
 800c772:	430b      	orrs	r3, r1
 800c774:	d09e      	beq.n	800c6b4 <_svfprintf_r+0xe5c>
 800c776:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800c778:	603b      	str	r3, [r7, #0]
 800c77a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800c77c:	607b      	str	r3, [r7, #4]
 800c77e:	189a      	adds	r2, r3, r2
 800c780:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800c782:	922e      	str	r2, [sp, #184]	; 0xb8
 800c784:	3301      	adds	r3, #1
 800c786:	932d      	str	r3, [sp, #180]	; 0xb4
 800c788:	3708      	adds	r7, #8
 800c78a:	2b07      	cmp	r3, #7
 800c78c:	dd08      	ble.n	800c7a0 <_svfprintf_r+0xf48>
 800c78e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c790:	980a      	ldr	r0, [sp, #40]	; 0x28
 800c792:	aa2c      	add	r2, sp, #176	; 0xb0
 800c794:	f003 f976 	bl	800fa84 <__ssprint_r>
 800c798:	2800      	cmp	r0, #0
 800c79a:	d000      	beq.n	800c79e <_svfprintf_r+0xf46>
 800c79c:	e23b      	b.n	800cc16 <_svfprintf_r+0x13be>
 800c79e:	af2f      	add	r7, sp, #188	; 0xbc
 800c7a0:	9c26      	ldr	r4, [sp, #152]	; 0x98
 800c7a2:	2c00      	cmp	r4, #0
 800c7a4:	da19      	bge.n	800c7da <_svfprintf_r+0xf82>
 800c7a6:	0038      	movs	r0, r7
 800c7a8:	2510      	movs	r5, #16
 800c7aa:	4264      	negs	r4, r4
 800c7ac:	992d      	ldr	r1, [sp, #180]	; 0xb4
 800c7ae:	4a71      	ldr	r2, [pc, #452]	; (800c974 <_svfprintf_r+0x111c>)
 800c7b0:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800c7b2:	3101      	adds	r1, #1
 800c7b4:	3708      	adds	r7, #8
 800c7b6:	6002      	str	r2, [r0, #0]
 800c7b8:	2c10      	cmp	r4, #16
 800c7ba:	dc25      	bgt.n	800c808 <_svfprintf_r+0xfb0>
 800c7bc:	6044      	str	r4, [r0, #4]
 800c7be:	18e4      	adds	r4, r4, r3
 800c7c0:	942e      	str	r4, [sp, #184]	; 0xb8
 800c7c2:	912d      	str	r1, [sp, #180]	; 0xb4
 800c7c4:	2907      	cmp	r1, #7
 800c7c6:	dd08      	ble.n	800c7da <_svfprintf_r+0xf82>
 800c7c8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c7ca:	980a      	ldr	r0, [sp, #40]	; 0x28
 800c7cc:	aa2c      	add	r2, sp, #176	; 0xb0
 800c7ce:	f003 f959 	bl	800fa84 <__ssprint_r>
 800c7d2:	2800      	cmp	r0, #0
 800c7d4:	d000      	beq.n	800c7d8 <_svfprintf_r+0xf80>
 800c7d6:	e21e      	b.n	800cc16 <_svfprintf_r+0x13be>
 800c7d8:	af2f      	add	r7, sp, #188	; 0xbc
 800c7da:	9b08      	ldr	r3, [sp, #32]
 800c7dc:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800c7de:	603b      	str	r3, [r7, #0]
 800c7e0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c7e2:	18d2      	adds	r2, r2, r3
 800c7e4:	922e      	str	r2, [sp, #184]	; 0xb8
 800c7e6:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 800c7e8:	607b      	str	r3, [r7, #4]
 800c7ea:	3201      	adds	r2, #1
 800c7ec:	922d      	str	r2, [sp, #180]	; 0xb4
 800c7ee:	2a07      	cmp	r2, #7
 800c7f0:	dc00      	bgt.n	800c7f4 <_svfprintf_r+0xf9c>
 800c7f2:	e45b      	b.n	800c0ac <_svfprintf_r+0x854>
 800c7f4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c7f6:	980a      	ldr	r0, [sp, #40]	; 0x28
 800c7f8:	aa2c      	add	r2, sp, #176	; 0xb0
 800c7fa:	f003 f943 	bl	800fa84 <__ssprint_r>
 800c7fe:	2800      	cmp	r0, #0
 800c800:	d000      	beq.n	800c804 <_svfprintf_r+0xfac>
 800c802:	e208      	b.n	800cc16 <_svfprintf_r+0x13be>
 800c804:	af2f      	add	r7, sp, #188	; 0xbc
 800c806:	e755      	b.n	800c6b4 <_svfprintf_r+0xe5c>
 800c808:	3310      	adds	r3, #16
 800c80a:	6045      	str	r5, [r0, #4]
 800c80c:	932e      	str	r3, [sp, #184]	; 0xb8
 800c80e:	912d      	str	r1, [sp, #180]	; 0xb4
 800c810:	2907      	cmp	r1, #7
 800c812:	dd08      	ble.n	800c826 <_svfprintf_r+0xfce>
 800c814:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c816:	980a      	ldr	r0, [sp, #40]	; 0x28
 800c818:	aa2c      	add	r2, sp, #176	; 0xb0
 800c81a:	f003 f933 	bl	800fa84 <__ssprint_r>
 800c81e:	2800      	cmp	r0, #0
 800c820:	d000      	beq.n	800c824 <_svfprintf_r+0xfcc>
 800c822:	e1f8      	b.n	800cc16 <_svfprintf_r+0x13be>
 800c824:	af2f      	add	r7, sp, #188	; 0xbc
 800c826:	0038      	movs	r0, r7
 800c828:	3c10      	subs	r4, #16
 800c82a:	e7bf      	b.n	800c7ac <_svfprintf_r+0xf54>
 800c82c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c82e:	002c      	movs	r4, r5
 800c830:	429d      	cmp	r5, r3
 800c832:	dd00      	ble.n	800c836 <_svfprintf_r+0xfde>
 800c834:	001c      	movs	r4, r3
 800c836:	2c00      	cmp	r4, #0
 800c838:	dd14      	ble.n	800c864 <_svfprintf_r+0x100c>
 800c83a:	9b08      	ldr	r3, [sp, #32]
 800c83c:	607c      	str	r4, [r7, #4]
 800c83e:	603b      	str	r3, [r7, #0]
 800c840:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800c842:	3708      	adds	r7, #8
 800c844:	18e3      	adds	r3, r4, r3
 800c846:	932e      	str	r3, [sp, #184]	; 0xb8
 800c848:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800c84a:	3301      	adds	r3, #1
 800c84c:	932d      	str	r3, [sp, #180]	; 0xb4
 800c84e:	2b07      	cmp	r3, #7
 800c850:	dd08      	ble.n	800c864 <_svfprintf_r+0x100c>
 800c852:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c854:	980a      	ldr	r0, [sp, #40]	; 0x28
 800c856:	aa2c      	add	r2, sp, #176	; 0xb0
 800c858:	f003 f914 	bl	800fa84 <__ssprint_r>
 800c85c:	2800      	cmp	r0, #0
 800c85e:	d000      	beq.n	800c862 <_svfprintf_r+0x100a>
 800c860:	e1d9      	b.n	800cc16 <_svfprintf_r+0x13be>
 800c862:	af2f      	add	r7, sp, #188	; 0xbc
 800c864:	43e3      	mvns	r3, r4
 800c866:	17db      	asrs	r3, r3, #31
 800c868:	401c      	ands	r4, r3
 800c86a:	1b2c      	subs	r4, r5, r4
 800c86c:	2c00      	cmp	r4, #0
 800c86e:	dd18      	ble.n	800c8a2 <_svfprintf_r+0x104a>
 800c870:	0039      	movs	r1, r7
 800c872:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800c874:	483f      	ldr	r0, [pc, #252]	; (800c974 <_svfprintf_r+0x111c>)
 800c876:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800c878:	3301      	adds	r3, #1
 800c87a:	3108      	adds	r1, #8
 800c87c:	6038      	str	r0, [r7, #0]
 800c87e:	2c10      	cmp	r4, #16
 800c880:	dc7a      	bgt.n	800c978 <_svfprintf_r+0x1120>
 800c882:	607c      	str	r4, [r7, #4]
 800c884:	18a4      	adds	r4, r4, r2
 800c886:	000f      	movs	r7, r1
 800c888:	942e      	str	r4, [sp, #184]	; 0xb8
 800c88a:	932d      	str	r3, [sp, #180]	; 0xb4
 800c88c:	2b07      	cmp	r3, #7
 800c88e:	dd08      	ble.n	800c8a2 <_svfprintf_r+0x104a>
 800c890:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c892:	980a      	ldr	r0, [sp, #40]	; 0x28
 800c894:	aa2c      	add	r2, sp, #176	; 0xb0
 800c896:	f003 f8f5 	bl	800fa84 <__ssprint_r>
 800c89a:	2800      	cmp	r0, #0
 800c89c:	d000      	beq.n	800c8a0 <_svfprintf_r+0x1048>
 800c89e:	e1ba      	b.n	800cc16 <_svfprintf_r+0x13be>
 800c8a0:	af2f      	add	r7, sp, #188	; 0xbc
 800c8a2:	9b08      	ldr	r3, [sp, #32]
 800c8a4:	195d      	adds	r5, r3, r5
 800c8a6:	0573      	lsls	r3, r6, #21
 800c8a8:	d50b      	bpl.n	800c8c2 <_svfprintf_r+0x106a>
 800c8aa:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c8ac:	2b00      	cmp	r3, #0
 800c8ae:	d176      	bne.n	800c99e <_svfprintf_r+0x1146>
 800c8b0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c8b2:	2b00      	cmp	r3, #0
 800c8b4:	d176      	bne.n	800c9a4 <_svfprintf_r+0x114c>
 800c8b6:	9b08      	ldr	r3, [sp, #32]
 800c8b8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c8ba:	189b      	adds	r3, r3, r2
 800c8bc:	429d      	cmp	r5, r3
 800c8be:	d900      	bls.n	800c8c2 <_svfprintf_r+0x106a>
 800c8c0:	001d      	movs	r5, r3
 800c8c2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800c8c4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c8c6:	4293      	cmp	r3, r2
 800c8c8:	db01      	blt.n	800c8ce <_svfprintf_r+0x1076>
 800c8ca:	07f3      	lsls	r3, r6, #31
 800c8cc:	d516      	bpl.n	800c8fc <_svfprintf_r+0x10a4>
 800c8ce:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800c8d0:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800c8d2:	603b      	str	r3, [r7, #0]
 800c8d4:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800c8d6:	607b      	str	r3, [r7, #4]
 800c8d8:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800c8da:	3708      	adds	r7, #8
 800c8dc:	189b      	adds	r3, r3, r2
 800c8de:	932e      	str	r3, [sp, #184]	; 0xb8
 800c8e0:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800c8e2:	3301      	adds	r3, #1
 800c8e4:	932d      	str	r3, [sp, #180]	; 0xb4
 800c8e6:	2b07      	cmp	r3, #7
 800c8e8:	dd08      	ble.n	800c8fc <_svfprintf_r+0x10a4>
 800c8ea:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c8ec:	980a      	ldr	r0, [sp, #40]	; 0x28
 800c8ee:	aa2c      	add	r2, sp, #176	; 0xb0
 800c8f0:	f003 f8c8 	bl	800fa84 <__ssprint_r>
 800c8f4:	2800      	cmp	r0, #0
 800c8f6:	d000      	beq.n	800c8fa <_svfprintf_r+0x10a2>
 800c8f8:	e18d      	b.n	800cc16 <_svfprintf_r+0x13be>
 800c8fa:	af2f      	add	r7, sp, #188	; 0xbc
 800c8fc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c8fe:	9b08      	ldr	r3, [sp, #32]
 800c900:	4694      	mov	ip, r2
 800c902:	9c26      	ldr	r4, [sp, #152]	; 0x98
 800c904:	4463      	add	r3, ip
 800c906:	1b5b      	subs	r3, r3, r5
 800c908:	1b14      	subs	r4, r2, r4
 800c90a:	429c      	cmp	r4, r3
 800c90c:	dd00      	ble.n	800c910 <_svfprintf_r+0x10b8>
 800c90e:	001c      	movs	r4, r3
 800c910:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800c912:	2c00      	cmp	r4, #0
 800c914:	dd12      	ble.n	800c93c <_svfprintf_r+0x10e4>
 800c916:	18e3      	adds	r3, r4, r3
 800c918:	932e      	str	r3, [sp, #184]	; 0xb8
 800c91a:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800c91c:	603d      	str	r5, [r7, #0]
 800c91e:	3301      	adds	r3, #1
 800c920:	607c      	str	r4, [r7, #4]
 800c922:	932d      	str	r3, [sp, #180]	; 0xb4
 800c924:	3708      	adds	r7, #8
 800c926:	2b07      	cmp	r3, #7
 800c928:	dd08      	ble.n	800c93c <_svfprintf_r+0x10e4>
 800c92a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c92c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800c92e:	aa2c      	add	r2, sp, #176	; 0xb0
 800c930:	f003 f8a8 	bl	800fa84 <__ssprint_r>
 800c934:	2800      	cmp	r0, #0
 800c936:	d000      	beq.n	800c93a <_svfprintf_r+0x10e2>
 800c938:	e16d      	b.n	800cc16 <_svfprintf_r+0x13be>
 800c93a:	af2f      	add	r7, sp, #188	; 0xbc
 800c93c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c93e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800c940:	2510      	movs	r5, #16
 800c942:	1ad3      	subs	r3, r2, r3
 800c944:	43e2      	mvns	r2, r4
 800c946:	17d2      	asrs	r2, r2, #31
 800c948:	4014      	ands	r4, r2
 800c94a:	1b1c      	subs	r4, r3, r4
 800c94c:	2c00      	cmp	r4, #0
 800c94e:	dc00      	bgt.n	800c952 <_svfprintf_r+0x10fa>
 800c950:	e6b0      	b.n	800c6b4 <_svfprintf_r+0xe5c>
 800c952:	0039      	movs	r1, r7
 800c954:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800c956:	4807      	ldr	r0, [pc, #28]	; (800c974 <_svfprintf_r+0x111c>)
 800c958:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800c95a:	3301      	adds	r3, #1
 800c95c:	3108      	adds	r1, #8
 800c95e:	6038      	str	r0, [r7, #0]
 800c960:	2c10      	cmp	r4, #16
 800c962:	dd00      	ble.n	800c966 <_svfprintf_r+0x110e>
 800c964:	e096      	b.n	800ca94 <_svfprintf_r+0x123c>
 800c966:	1912      	adds	r2, r2, r4
 800c968:	607c      	str	r4, [r7, #4]
 800c96a:	922e      	str	r2, [sp, #184]	; 0xb8
 800c96c:	e6dd      	b.n	800c72a <_svfprintf_r+0xed2>
 800c96e:	46c0      	nop			; (mov r8, r8)
 800c970:	08012d56 	.word	0x08012d56
 800c974:	08012d68 	.word	0x08012d68
 800c978:	2010      	movs	r0, #16
 800c97a:	1812      	adds	r2, r2, r0
 800c97c:	6078      	str	r0, [r7, #4]
 800c97e:	922e      	str	r2, [sp, #184]	; 0xb8
 800c980:	932d      	str	r3, [sp, #180]	; 0xb4
 800c982:	2b07      	cmp	r3, #7
 800c984:	dd08      	ble.n	800c998 <_svfprintf_r+0x1140>
 800c986:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c988:	980a      	ldr	r0, [sp, #40]	; 0x28
 800c98a:	aa2c      	add	r2, sp, #176	; 0xb0
 800c98c:	f003 f87a 	bl	800fa84 <__ssprint_r>
 800c990:	2800      	cmp	r0, #0
 800c992:	d000      	beq.n	800c996 <_svfprintf_r+0x113e>
 800c994:	e13f      	b.n	800cc16 <_svfprintf_r+0x13be>
 800c996:	a92f      	add	r1, sp, #188	; 0xbc
 800c998:	000f      	movs	r7, r1
 800c99a:	3c10      	subs	r4, #16
 800c99c:	e768      	b.n	800c870 <_svfprintf_r+0x1018>
 800c99e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c9a0:	2b00      	cmp	r3, #0
 800c9a2:	d05d      	beq.n	800ca60 <_svfprintf_r+0x1208>
 800c9a4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c9a6:	3b01      	subs	r3, #1
 800c9a8:	9310      	str	r3, [sp, #64]	; 0x40
 800c9aa:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800c9ac:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800c9ae:	603b      	str	r3, [r7, #0]
 800c9b0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c9b2:	607b      	str	r3, [r7, #4]
 800c9b4:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800c9b6:	3708      	adds	r7, #8
 800c9b8:	189b      	adds	r3, r3, r2
 800c9ba:	932e      	str	r3, [sp, #184]	; 0xb8
 800c9bc:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800c9be:	3301      	adds	r3, #1
 800c9c0:	932d      	str	r3, [sp, #180]	; 0xb4
 800c9c2:	2b07      	cmp	r3, #7
 800c9c4:	dd08      	ble.n	800c9d8 <_svfprintf_r+0x1180>
 800c9c6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c9c8:	980a      	ldr	r0, [sp, #40]	; 0x28
 800c9ca:	aa2c      	add	r2, sp, #176	; 0xb0
 800c9cc:	f003 f85a 	bl	800fa84 <__ssprint_r>
 800c9d0:	2800      	cmp	r0, #0
 800c9d2:	d000      	beq.n	800c9d6 <_svfprintf_r+0x117e>
 800c9d4:	e11f      	b.n	800cc16 <_svfprintf_r+0x13be>
 800c9d6:	af2f      	add	r7, sp, #188	; 0xbc
 800c9d8:	9b08      	ldr	r3, [sp, #32]
 800c9da:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c9dc:	189c      	adds	r4, r3, r2
 800c9de:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c9e0:	1b64      	subs	r4, r4, r5
 800c9e2:	781b      	ldrb	r3, [r3, #0]
 800c9e4:	429c      	cmp	r4, r3
 800c9e6:	dd00      	ble.n	800c9ea <_svfprintf_r+0x1192>
 800c9e8:	001c      	movs	r4, r3
 800c9ea:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800c9ec:	2c00      	cmp	r4, #0
 800c9ee:	dd12      	ble.n	800ca16 <_svfprintf_r+0x11be>
 800c9f0:	18e3      	adds	r3, r4, r3
 800c9f2:	932e      	str	r3, [sp, #184]	; 0xb8
 800c9f4:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800c9f6:	603d      	str	r5, [r7, #0]
 800c9f8:	3301      	adds	r3, #1
 800c9fa:	607c      	str	r4, [r7, #4]
 800c9fc:	932d      	str	r3, [sp, #180]	; 0xb4
 800c9fe:	3708      	adds	r7, #8
 800ca00:	2b07      	cmp	r3, #7
 800ca02:	dd08      	ble.n	800ca16 <_svfprintf_r+0x11be>
 800ca04:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ca06:	980a      	ldr	r0, [sp, #40]	; 0x28
 800ca08:	aa2c      	add	r2, sp, #176	; 0xb0
 800ca0a:	f003 f83b 	bl	800fa84 <__ssprint_r>
 800ca0e:	2800      	cmp	r0, #0
 800ca10:	d000      	beq.n	800ca14 <_svfprintf_r+0x11bc>
 800ca12:	e100      	b.n	800cc16 <_svfprintf_r+0x13be>
 800ca14:	af2f      	add	r7, sp, #188	; 0xbc
 800ca16:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ca18:	781a      	ldrb	r2, [r3, #0]
 800ca1a:	43e3      	mvns	r3, r4
 800ca1c:	17db      	asrs	r3, r3, #31
 800ca1e:	401c      	ands	r4, r3
 800ca20:	1b14      	subs	r4, r2, r4
 800ca22:	2c00      	cmp	r4, #0
 800ca24:	dd18      	ble.n	800ca58 <_svfprintf_r+0x1200>
 800ca26:	0039      	movs	r1, r7
 800ca28:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800ca2a:	48aa      	ldr	r0, [pc, #680]	; (800ccd4 <_svfprintf_r+0x147c>)
 800ca2c:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800ca2e:	3301      	adds	r3, #1
 800ca30:	3108      	adds	r1, #8
 800ca32:	6038      	str	r0, [r7, #0]
 800ca34:	2c10      	cmp	r4, #16
 800ca36:	dc1a      	bgt.n	800ca6e <_svfprintf_r+0x1216>
 800ca38:	1912      	adds	r2, r2, r4
 800ca3a:	607c      	str	r4, [r7, #4]
 800ca3c:	922e      	str	r2, [sp, #184]	; 0xb8
 800ca3e:	000f      	movs	r7, r1
 800ca40:	932d      	str	r3, [sp, #180]	; 0xb4
 800ca42:	2b07      	cmp	r3, #7
 800ca44:	dd08      	ble.n	800ca58 <_svfprintf_r+0x1200>
 800ca46:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ca48:	980a      	ldr	r0, [sp, #40]	; 0x28
 800ca4a:	aa2c      	add	r2, sp, #176	; 0xb0
 800ca4c:	f003 f81a 	bl	800fa84 <__ssprint_r>
 800ca50:	2800      	cmp	r0, #0
 800ca52:	d000      	beq.n	800ca56 <_svfprintf_r+0x11fe>
 800ca54:	e0df      	b.n	800cc16 <_svfprintf_r+0x13be>
 800ca56:	af2f      	add	r7, sp, #188	; 0xbc
 800ca58:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ca5a:	781b      	ldrb	r3, [r3, #0]
 800ca5c:	18ed      	adds	r5, r5, r3
 800ca5e:	e724      	b.n	800c8aa <_svfprintf_r+0x1052>
 800ca60:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ca62:	3b01      	subs	r3, #1
 800ca64:	9312      	str	r3, [sp, #72]	; 0x48
 800ca66:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ca68:	3b01      	subs	r3, #1
 800ca6a:	9311      	str	r3, [sp, #68]	; 0x44
 800ca6c:	e79d      	b.n	800c9aa <_svfprintf_r+0x1152>
 800ca6e:	2010      	movs	r0, #16
 800ca70:	1812      	adds	r2, r2, r0
 800ca72:	6078      	str	r0, [r7, #4]
 800ca74:	922e      	str	r2, [sp, #184]	; 0xb8
 800ca76:	932d      	str	r3, [sp, #180]	; 0xb4
 800ca78:	2b07      	cmp	r3, #7
 800ca7a:	dd08      	ble.n	800ca8e <_svfprintf_r+0x1236>
 800ca7c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ca7e:	980a      	ldr	r0, [sp, #40]	; 0x28
 800ca80:	aa2c      	add	r2, sp, #176	; 0xb0
 800ca82:	f002 ffff 	bl	800fa84 <__ssprint_r>
 800ca86:	2800      	cmp	r0, #0
 800ca88:	d000      	beq.n	800ca8c <_svfprintf_r+0x1234>
 800ca8a:	e0c4      	b.n	800cc16 <_svfprintf_r+0x13be>
 800ca8c:	a92f      	add	r1, sp, #188	; 0xbc
 800ca8e:	000f      	movs	r7, r1
 800ca90:	3c10      	subs	r4, #16
 800ca92:	e7c8      	b.n	800ca26 <_svfprintf_r+0x11ce>
 800ca94:	3210      	adds	r2, #16
 800ca96:	607d      	str	r5, [r7, #4]
 800ca98:	922e      	str	r2, [sp, #184]	; 0xb8
 800ca9a:	932d      	str	r3, [sp, #180]	; 0xb4
 800ca9c:	2b07      	cmp	r3, #7
 800ca9e:	dd08      	ble.n	800cab2 <_svfprintf_r+0x125a>
 800caa0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800caa2:	980a      	ldr	r0, [sp, #40]	; 0x28
 800caa4:	aa2c      	add	r2, sp, #176	; 0xb0
 800caa6:	f002 ffed 	bl	800fa84 <__ssprint_r>
 800caaa:	2800      	cmp	r0, #0
 800caac:	d000      	beq.n	800cab0 <_svfprintf_r+0x1258>
 800caae:	e0b2      	b.n	800cc16 <_svfprintf_r+0x13be>
 800cab0:	a92f      	add	r1, sp, #188	; 0xbc
 800cab2:	000f      	movs	r7, r1
 800cab4:	3c10      	subs	r4, #16
 800cab6:	e74c      	b.n	800c952 <_svfprintf_r+0x10fa>
 800cab8:	003c      	movs	r4, r7
 800caba:	9919      	ldr	r1, [sp, #100]	; 0x64
 800cabc:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800cabe:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800cac0:	3101      	adds	r1, #1
 800cac2:	3301      	adds	r3, #1
 800cac4:	3408      	adds	r4, #8
 800cac6:	2a01      	cmp	r2, #1
 800cac8:	dc03      	bgt.n	800cad2 <_svfprintf_r+0x127a>
 800caca:	2201      	movs	r2, #1
 800cacc:	4216      	tst	r6, r2
 800cace:	d100      	bne.n	800cad2 <_svfprintf_r+0x127a>
 800cad0:	e07f      	b.n	800cbd2 <_svfprintf_r+0x137a>
 800cad2:	9a08      	ldr	r2, [sp, #32]
 800cad4:	912e      	str	r1, [sp, #184]	; 0xb8
 800cad6:	603a      	str	r2, [r7, #0]
 800cad8:	2201      	movs	r2, #1
 800cada:	932d      	str	r3, [sp, #180]	; 0xb4
 800cadc:	607a      	str	r2, [r7, #4]
 800cade:	2b07      	cmp	r3, #7
 800cae0:	dd08      	ble.n	800caf4 <_svfprintf_r+0x129c>
 800cae2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800cae4:	980a      	ldr	r0, [sp, #40]	; 0x28
 800cae6:	aa2c      	add	r2, sp, #176	; 0xb0
 800cae8:	f002 ffcc 	bl	800fa84 <__ssprint_r>
 800caec:	2800      	cmp	r0, #0
 800caee:	d000      	beq.n	800caf2 <_svfprintf_r+0x129a>
 800caf0:	e091      	b.n	800cc16 <_svfprintf_r+0x13be>
 800caf2:	ac2f      	add	r4, sp, #188	; 0xbc
 800caf4:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800caf6:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800caf8:	6023      	str	r3, [r4, #0]
 800cafa:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800cafc:	6063      	str	r3, [r4, #4]
 800cafe:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800cb00:	3408      	adds	r4, #8
 800cb02:	189b      	adds	r3, r3, r2
 800cb04:	932e      	str	r3, [sp, #184]	; 0xb8
 800cb06:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800cb08:	3301      	adds	r3, #1
 800cb0a:	932d      	str	r3, [sp, #180]	; 0xb4
 800cb0c:	2b07      	cmp	r3, #7
 800cb0e:	dd07      	ble.n	800cb20 <_svfprintf_r+0x12c8>
 800cb10:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800cb12:	980a      	ldr	r0, [sp, #40]	; 0x28
 800cb14:	aa2c      	add	r2, sp, #176	; 0xb0
 800cb16:	f002 ffb5 	bl	800fa84 <__ssprint_r>
 800cb1a:	2800      	cmp	r0, #0
 800cb1c:	d17b      	bne.n	800cc16 <_svfprintf_r+0x13be>
 800cb1e:	ac2f      	add	r4, sp, #188	; 0xbc
 800cb20:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800cb22:	2200      	movs	r2, #0
 800cb24:	9814      	ldr	r0, [sp, #80]	; 0x50
 800cb26:	9915      	ldr	r1, [sp, #84]	; 0x54
 800cb28:	9309      	str	r3, [sp, #36]	; 0x24
 800cb2a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800cb2c:	9f2e      	ldr	r7, [sp, #184]	; 0xb8
 800cb2e:	1e5d      	subs	r5, r3, #1
 800cb30:	2300      	movs	r3, #0
 800cb32:	f7f3 fc89 	bl	8000448 <__aeabi_dcmpeq>
 800cb36:	2800      	cmp	r0, #0
 800cb38:	d126      	bne.n	800cb88 <_svfprintf_r+0x1330>
 800cb3a:	9b08      	ldr	r3, [sp, #32]
 800cb3c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cb3e:	3301      	adds	r3, #1
 800cb40:	990e      	ldr	r1, [sp, #56]	; 0x38
 800cb42:	6023      	str	r3, [r4, #0]
 800cb44:	1e7b      	subs	r3, r7, #1
 800cb46:	3201      	adds	r2, #1
 800cb48:	185b      	adds	r3, r3, r1
 800cb4a:	6065      	str	r5, [r4, #4]
 800cb4c:	932e      	str	r3, [sp, #184]	; 0xb8
 800cb4e:	922d      	str	r2, [sp, #180]	; 0xb4
 800cb50:	3408      	adds	r4, #8
 800cb52:	2a07      	cmp	r2, #7
 800cb54:	dd07      	ble.n	800cb66 <_svfprintf_r+0x130e>
 800cb56:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800cb58:	980a      	ldr	r0, [sp, #40]	; 0x28
 800cb5a:	aa2c      	add	r2, sp, #176	; 0xb0
 800cb5c:	f002 ff92 	bl	800fa84 <__ssprint_r>
 800cb60:	2800      	cmp	r0, #0
 800cb62:	d158      	bne.n	800cc16 <_svfprintf_r+0x13be>
 800cb64:	ac2f      	add	r4, sp, #188	; 0xbc
 800cb66:	ab28      	add	r3, sp, #160	; 0xa0
 800cb68:	6023      	str	r3, [r4, #0]
 800cb6a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800cb6c:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800cb6e:	6063      	str	r3, [r4, #4]
 800cb70:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800cb72:	189b      	adds	r3, r3, r2
 800cb74:	932e      	str	r3, [sp, #184]	; 0xb8
 800cb76:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800cb78:	3301      	adds	r3, #1
 800cb7a:	932d      	str	r3, [sp, #180]	; 0xb4
 800cb7c:	2b07      	cmp	r3, #7
 800cb7e:	dd00      	ble.n	800cb82 <_svfprintf_r+0x132a>
 800cb80:	e638      	b.n	800c7f4 <_svfprintf_r+0xf9c>
 800cb82:	3408      	adds	r4, #8
 800cb84:	0027      	movs	r7, r4
 800cb86:	e595      	b.n	800c6b4 <_svfprintf_r+0xe5c>
 800cb88:	2710      	movs	r7, #16
 800cb8a:	2d00      	cmp	r5, #0
 800cb8c:	ddeb      	ble.n	800cb66 <_svfprintf_r+0x130e>
 800cb8e:	0021      	movs	r1, r4
 800cb90:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800cb92:	4850      	ldr	r0, [pc, #320]	; (800ccd4 <_svfprintf_r+0x147c>)
 800cb94:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800cb96:	3301      	adds	r3, #1
 800cb98:	3108      	adds	r1, #8
 800cb9a:	6020      	str	r0, [r4, #0]
 800cb9c:	2d10      	cmp	r5, #16
 800cb9e:	dc07      	bgt.n	800cbb0 <_svfprintf_r+0x1358>
 800cba0:	6065      	str	r5, [r4, #4]
 800cba2:	000c      	movs	r4, r1
 800cba4:	18ad      	adds	r5, r5, r2
 800cba6:	952e      	str	r5, [sp, #184]	; 0xb8
 800cba8:	932d      	str	r3, [sp, #180]	; 0xb4
 800cbaa:	2b07      	cmp	r3, #7
 800cbac:	dddb      	ble.n	800cb66 <_svfprintf_r+0x130e>
 800cbae:	e7d2      	b.n	800cb56 <_svfprintf_r+0x12fe>
 800cbb0:	3210      	adds	r2, #16
 800cbb2:	6067      	str	r7, [r4, #4]
 800cbb4:	922e      	str	r2, [sp, #184]	; 0xb8
 800cbb6:	932d      	str	r3, [sp, #180]	; 0xb4
 800cbb8:	2b07      	cmp	r3, #7
 800cbba:	dd07      	ble.n	800cbcc <_svfprintf_r+0x1374>
 800cbbc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800cbbe:	980a      	ldr	r0, [sp, #40]	; 0x28
 800cbc0:	aa2c      	add	r2, sp, #176	; 0xb0
 800cbc2:	f002 ff5f 	bl	800fa84 <__ssprint_r>
 800cbc6:	2800      	cmp	r0, #0
 800cbc8:	d125      	bne.n	800cc16 <_svfprintf_r+0x13be>
 800cbca:	a92f      	add	r1, sp, #188	; 0xbc
 800cbcc:	000c      	movs	r4, r1
 800cbce:	3d10      	subs	r5, #16
 800cbd0:	e7dd      	b.n	800cb8e <_svfprintf_r+0x1336>
 800cbd2:	9808      	ldr	r0, [sp, #32]
 800cbd4:	912e      	str	r1, [sp, #184]	; 0xb8
 800cbd6:	c705      	stmia	r7!, {r0, r2}
 800cbd8:	932d      	str	r3, [sp, #180]	; 0xb4
 800cbda:	e7e6      	b.n	800cbaa <_svfprintf_r+0x1352>
 800cbdc:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800cbde:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800cbe0:	2510      	movs	r5, #16
 800cbe2:	1a9c      	subs	r4, r3, r2
 800cbe4:	2c00      	cmp	r4, #0
 800cbe6:	dc00      	bgt.n	800cbea <_svfprintf_r+0x1392>
 800cbe8:	e567      	b.n	800c6ba <_svfprintf_r+0xe62>
 800cbea:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800cbec:	493a      	ldr	r1, [pc, #232]	; (800ccd8 <_svfprintf_r+0x1480>)
 800cbee:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800cbf0:	3301      	adds	r3, #1
 800cbf2:	6039      	str	r1, [r7, #0]
 800cbf4:	2c10      	cmp	r4, #16
 800cbf6:	dc19      	bgt.n	800cc2c <_svfprintf_r+0x13d4>
 800cbf8:	607c      	str	r4, [r7, #4]
 800cbfa:	18a4      	adds	r4, r4, r2
 800cbfc:	942e      	str	r4, [sp, #184]	; 0xb8
 800cbfe:	932d      	str	r3, [sp, #180]	; 0xb4
 800cc00:	2b07      	cmp	r3, #7
 800cc02:	dc00      	bgt.n	800cc06 <_svfprintf_r+0x13ae>
 800cc04:	e559      	b.n	800c6ba <_svfprintf_r+0xe62>
 800cc06:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800cc08:	980a      	ldr	r0, [sp, #40]	; 0x28
 800cc0a:	aa2c      	add	r2, sp, #176	; 0xb0
 800cc0c:	f002 ff3a 	bl	800fa84 <__ssprint_r>
 800cc10:	2800      	cmp	r0, #0
 800cc12:	d100      	bne.n	800cc16 <_svfprintf_r+0x13be>
 800cc14:	e551      	b.n	800c6ba <_svfprintf_r+0xe62>
 800cc16:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800cc18:	2b00      	cmp	r3, #0
 800cc1a:	d101      	bne.n	800cc20 <_svfprintf_r+0x13c8>
 800cc1c:	f7ff f845 	bl	800bcaa <_svfprintf_r+0x452>
 800cc20:	0019      	movs	r1, r3
 800cc22:	980a      	ldr	r0, [sp, #40]	; 0x28
 800cc24:	f7fd fd80 	bl	800a728 <_free_r>
 800cc28:	f7ff f83f 	bl	800bcaa <_svfprintf_r+0x452>
 800cc2c:	3210      	adds	r2, #16
 800cc2e:	607d      	str	r5, [r7, #4]
 800cc30:	922e      	str	r2, [sp, #184]	; 0xb8
 800cc32:	932d      	str	r3, [sp, #180]	; 0xb4
 800cc34:	3708      	adds	r7, #8
 800cc36:	2b07      	cmp	r3, #7
 800cc38:	dd07      	ble.n	800cc4a <_svfprintf_r+0x13f2>
 800cc3a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800cc3c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800cc3e:	aa2c      	add	r2, sp, #176	; 0xb0
 800cc40:	f002 ff20 	bl	800fa84 <__ssprint_r>
 800cc44:	2800      	cmp	r0, #0
 800cc46:	d1e6      	bne.n	800cc16 <_svfprintf_r+0x13be>
 800cc48:	af2f      	add	r7, sp, #188	; 0xbc
 800cc4a:	3c10      	subs	r4, #16
 800cc4c:	e7cd      	b.n	800cbea <_svfprintf_r+0x1392>
 800cc4e:	990c      	ldr	r1, [sp, #48]	; 0x30
 800cc50:	980a      	ldr	r0, [sp, #40]	; 0x28
 800cc52:	f7fd fd69 	bl	800a728 <_free_r>
 800cc56:	e549      	b.n	800c6ec <_svfprintf_r+0xe94>
 800cc58:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800cc5a:	2b00      	cmp	r3, #0
 800cc5c:	d101      	bne.n	800cc62 <_svfprintf_r+0x140a>
 800cc5e:	f7ff f824 	bl	800bcaa <_svfprintf_r+0x452>
 800cc62:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800cc64:	980a      	ldr	r0, [sp, #40]	; 0x28
 800cc66:	aa2c      	add	r2, sp, #176	; 0xb0
 800cc68:	f002 ff0c 	bl	800fa84 <__ssprint_r>
 800cc6c:	f7ff f81d 	bl	800bcaa <_svfprintf_r+0x452>
 800cc70:	0034      	movs	r4, r6
 800cc72:	2a00      	cmp	r2, #0
 800cc74:	d101      	bne.n	800cc7a <_svfprintf_r+0x1422>
 800cc76:	f7fe ff8c 	bl	800bb92 <_svfprintf_r+0x33a>
 800cc7a:	2b01      	cmp	r3, #1
 800cc7c:	d101      	bne.n	800cc82 <_svfprintf_r+0x142a>
 800cc7e:	f7ff fc01 	bl	800c484 <_svfprintf_r+0xc2c>
 800cc82:	2b02      	cmp	r3, #2
 800cc84:	d100      	bne.n	800cc88 <_svfprintf_r+0x1430>
 800cc86:	e459      	b.n	800c53c <_svfprintf_r+0xce4>
 800cc88:	2507      	movs	r5, #7
 800cc8a:	ab58      	add	r3, sp, #352	; 0x160
 800cc8c:	9308      	str	r3, [sp, #32]
 800cc8e:	9a08      	ldr	r2, [sp, #32]
 800cc90:	0013      	movs	r3, r2
 800cc92:	3b01      	subs	r3, #1
 800cc94:	9308      	str	r3, [sp, #32]
 800cc96:	9b06      	ldr	r3, [sp, #24]
 800cc98:	9908      	ldr	r1, [sp, #32]
 800cc9a:	402b      	ands	r3, r5
 800cc9c:	3330      	adds	r3, #48	; 0x30
 800cc9e:	700b      	strb	r3, [r1, #0]
 800cca0:	9907      	ldr	r1, [sp, #28]
 800cca2:	074e      	lsls	r6, r1, #29
 800cca4:	9906      	ldr	r1, [sp, #24]
 800cca6:	08c8      	lsrs	r0, r1, #3
 800cca8:	9907      	ldr	r1, [sp, #28]
 800ccaa:	4306      	orrs	r6, r0
 800ccac:	08c9      	lsrs	r1, r1, #3
 800ccae:	9107      	str	r1, [sp, #28]
 800ccb0:	0031      	movs	r1, r6
 800ccb2:	9807      	ldr	r0, [sp, #28]
 800ccb4:	9606      	str	r6, [sp, #24]
 800ccb6:	4301      	orrs	r1, r0
 800ccb8:	d1e9      	bne.n	800cc8e <_svfprintf_r+0x1436>
 800ccba:	07e1      	lsls	r1, r4, #31
 800ccbc:	d400      	bmi.n	800ccc0 <_svfprintf_r+0x1468>
 800ccbe:	e42a      	b.n	800c516 <_svfprintf_r+0xcbe>
 800ccc0:	2b30      	cmp	r3, #48	; 0x30
 800ccc2:	d100      	bne.n	800ccc6 <_svfprintf_r+0x146e>
 800ccc4:	e427      	b.n	800c516 <_svfprintf_r+0xcbe>
 800ccc6:	2130      	movs	r1, #48	; 0x30
 800ccc8:	9b08      	ldr	r3, [sp, #32]
 800ccca:	3b01      	subs	r3, #1
 800cccc:	7019      	strb	r1, [r3, #0]
 800ccce:	1e93      	subs	r3, r2, #2
 800ccd0:	9308      	str	r3, [sp, #32]
 800ccd2:	e420      	b.n	800c516 <_svfprintf_r+0xcbe>
 800ccd4:	08012d68 	.word	0x08012d68
 800ccd8:	08012d58 	.word	0x08012d58

0800ccdc <__ssvfscanf_r>:
 800ccdc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ccde:	4ca7      	ldr	r4, [pc, #668]	; (800cf7c <__ssvfscanf_r+0x2a0>)
 800cce0:	44a5      	add	sp, r4
 800cce2:	af02      	add	r7, sp, #8
 800cce4:	633b      	str	r3, [r7, #48]	; 0x30
 800cce6:	000b      	movs	r3, r1
 800cce8:	6378      	str	r0, [r7, #52]	; 0x34
 800ccea:	6479      	str	r1, [r7, #68]	; 0x44
 800ccec:	61ba      	str	r2, [r7, #24]
 800ccee:	220c      	movs	r2, #12
 800ccf0:	5e9a      	ldrsh	r2, [r3, r2]
 800ccf2:	2380      	movs	r3, #128	; 0x80
 800ccf4:	019b      	lsls	r3, r3, #6
 800ccf6:	421a      	tst	r2, r3
 800ccf8:	d105      	bne.n	800cd06 <__ssvfscanf_r+0x2a>
 800ccfa:	4313      	orrs	r3, r2
 800ccfc:	818b      	strh	r3, [r1, #12]
 800ccfe:	4aa0      	ldr	r2, [pc, #640]	; (800cf80 <__ssvfscanf_r+0x2a4>)
 800cd00:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 800cd02:	4013      	ands	r3, r2
 800cd04:	664b      	str	r3, [r1, #100]	; 0x64
 800cd06:	2300      	movs	r3, #0
 800cd08:	617b      	str	r3, [r7, #20]
 800cd0a:	643b      	str	r3, [r7, #64]	; 0x40
 800cd0c:	62bb      	str	r3, [r7, #40]	; 0x28
 800cd0e:	627b      	str	r3, [r7, #36]	; 0x24
 800cd10:	63bb      	str	r3, [r7, #56]	; 0x38
 800cd12:	62fb      	str	r3, [r7, #44]	; 0x2c
 800cd14:	69bb      	ldr	r3, [r7, #24]
 800cd16:	69ba      	ldr	r2, [r7, #24]
 800cd18:	781b      	ldrb	r3, [r3, #0]
 800cd1a:	3201      	adds	r2, #1
 800cd1c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800cd1e:	61ba      	str	r2, [r7, #24]
 800cd20:	2b00      	cmp	r3, #0
 800cd22:	d100      	bne.n	800cd26 <__ssvfscanf_r+0x4a>
 800cd24:	e0d7      	b.n	800ced6 <__ssvfscanf_r+0x1fa>
 800cd26:	2608      	movs	r6, #8
 800cd28:	2108      	movs	r1, #8
 800cd2a:	4a96      	ldr	r2, [pc, #600]	; (800cf84 <__ssvfscanf_r+0x2a8>)
 800cd2c:	5cd2      	ldrb	r2, [r2, r3]
 800cd2e:	4016      	ands	r6, r2
 800cd30:	420a      	tst	r2, r1
 800cd32:	d01d      	beq.n	800cd70 <__ssvfscanf_r+0x94>
 800cd34:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cd36:	685b      	ldr	r3, [r3, #4]
 800cd38:	2b00      	cmp	r3, #0
 800cd3a:	dd12      	ble.n	800cd62 <__ssvfscanf_r+0x86>
 800cd3c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cd3e:	4991      	ldr	r1, [pc, #580]	; (800cf84 <__ssvfscanf_r+0x2a8>)
 800cd40:	681b      	ldr	r3, [r3, #0]
 800cd42:	781a      	ldrb	r2, [r3, #0]
 800cd44:	5c8a      	ldrb	r2, [r1, r2]
 800cd46:	2108      	movs	r1, #8
 800cd48:	420a      	tst	r2, r1
 800cd4a:	d0e3      	beq.n	800cd14 <__ssvfscanf_r+0x38>
 800cd4c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cd4e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800cd50:	3201      	adds	r2, #1
 800cd52:	63ba      	str	r2, [r7, #56]	; 0x38
 800cd54:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800cd56:	3301      	adds	r3, #1
 800cd58:	6852      	ldr	r2, [r2, #4]
 800cd5a:	600b      	str	r3, [r1, #0]
 800cd5c:	3a01      	subs	r2, #1
 800cd5e:	604a      	str	r2, [r1, #4]
 800cd60:	e7e8      	b.n	800cd34 <__ssvfscanf_r+0x58>
 800cd62:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800cd64:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800cd66:	f002 ff4d 	bl	800fc04 <__ssrefill_r>
 800cd6a:	2800      	cmp	r0, #0
 800cd6c:	d0e6      	beq.n	800cd3c <__ssvfscanf_r+0x60>
 800cd6e:	e7d1      	b.n	800cd14 <__ssvfscanf_r+0x38>
 800cd70:	2b25      	cmp	r3, #37	; 0x25
 800cd72:	d165      	bne.n	800ce40 <__ssvfscanf_r+0x164>
 800cd74:	250a      	movs	r5, #10
 800cd76:	2480      	movs	r4, #128	; 0x80
 800cd78:	69ba      	ldr	r2, [r7, #24]
 800cd7a:	63fe      	str	r6, [r7, #60]	; 0x3c
 800cd7c:	3b16      	subs	r3, #22
 800cd7e:	69b9      	ldr	r1, [r7, #24]
 800cd80:	3101      	adds	r1, #1
 800cd82:	61b9      	str	r1, [r7, #24]
 800cd84:	7811      	ldrb	r1, [r2, #0]
 800cd86:	0008      	movs	r0, r1
 800cd88:	3825      	subs	r0, #37	; 0x25
 800cd8a:	2855      	cmp	r0, #85	; 0x55
 800cd8c:	d900      	bls.n	800cd90 <__ssvfscanf_r+0xb4>
 800cd8e:	e170      	b.n	800d072 <__ssvfscanf_r+0x396>
 800cd90:	f7f3 f9ca 	bl	8000128 <__gnu_thumb1_case_uhi>
 800cd94:	016f0056 	.word	0x016f0056
 800cd98:	016f016f 	.word	0x016f016f
 800cd9c:	0081016f 	.word	0x0081016f
 800cda0:	016f016f 	.word	0x016f016f
 800cda4:	016f016f 	.word	0x016f016f
 800cda8:	00b8016f 	.word	0x00b8016f
 800cdac:	00b800b8 	.word	0x00b800b8
 800cdb0:	00b800b8 	.word	0x00b800b8
 800cdb4:	00b800b8 	.word	0x00b800b8
 800cdb8:	00b800b8 	.word	0x00b800b8
 800cdbc:	016f00b8 	.word	0x016f00b8
 800cdc0:	016f016f 	.word	0x016f016f
 800cdc4:	016f016f 	.word	0x016f016f
 800cdc8:	016f016f 	.word	0x016f016f
 800cdcc:	016f00d8 	.word	0x016f00d8
 800cdd0:	00c1010a 	.word	0x00c1010a
 800cdd4:	00d800d8 	.word	0x00d800d8
 800cdd8:	016f00d8 	.word	0x016f00d8
 800cddc:	016f016f 	.word	0x016f016f
 800cde0:	009f016f 	.word	0x009f016f
 800cde4:	016f016f 	.word	0x016f016f
 800cde8:	016f00c9 	.word	0x016f00c9
 800cdec:	016f016f 	.word	0x016f016f
 800cdf0:	016f00f0 	.word	0x016f00f0
 800cdf4:	016f016f 	.word	0x016f016f
 800cdf8:	00d1016f 	.word	0x00d1016f
 800cdfc:	016f016f 	.word	0x016f016f
 800ce00:	016f00fe 	.word	0x016f00fe
 800ce04:	016f016f 	.word	0x016f016f
 800ce08:	016f016f 	.word	0x016f016f
 800ce0c:	016f00d8 	.word	0x016f00d8
 800ce10:	00c3010c 	.word	0x00c3010c
 800ce14:	00d800d8 	.word	0x00d800d8
 800ce18:	009400d8 	.word	0x009400d8
 800ce1c:	009f012f 	.word	0x009f012f
 800ce20:	0088016f 	.word	0x0088016f
 800ce24:	011200a9 	.word	0x011200a9
 800ce28:	011000cb 	.word	0x011000cb
 800ce2c:	016f016f 	.word	0x016f016f
 800ce30:	00a600f2 	.word	0x00a600f2
 800ce34:	016f00cf 	.word	0x016f00cf
 800ce38:	00d1016f 	.word	0x00d1016f
 800ce3c:	00a6016f 	.word	0x00a6016f
 800ce40:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ce42:	685b      	ldr	r3, [r3, #4]
 800ce44:	2b00      	cmp	r3, #0
 800ce46:	dd12      	ble.n	800ce6e <__ssvfscanf_r+0x192>
 800ce48:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ce4a:	69ba      	ldr	r2, [r7, #24]
 800ce4c:	681b      	ldr	r3, [r3, #0]
 800ce4e:	3a01      	subs	r2, #1
 800ce50:	7819      	ldrb	r1, [r3, #0]
 800ce52:	7812      	ldrb	r2, [r2, #0]
 800ce54:	4291      	cmp	r1, r2
 800ce56:	d13e      	bne.n	800ced6 <__ssvfscanf_r+0x1fa>
 800ce58:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ce5a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ce5c:	6852      	ldr	r2, [r2, #4]
 800ce5e:	3301      	adds	r3, #1
 800ce60:	600b      	str	r3, [r1, #0]
 800ce62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce64:	3a01      	subs	r2, #1
 800ce66:	604a      	str	r2, [r1, #4]
 800ce68:	3301      	adds	r3, #1
 800ce6a:	63bb      	str	r3, [r7, #56]	; 0x38
 800ce6c:	e752      	b.n	800cd14 <__ssvfscanf_r+0x38>
 800ce6e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ce70:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800ce72:	f002 fec7 	bl	800fc04 <__ssrefill_r>
 800ce76:	2800      	cmp	r0, #0
 800ce78:	d0e6      	beq.n	800ce48 <__ssvfscanf_r+0x16c>
 800ce7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce7c:	2b00      	cmp	r3, #0
 800ce7e:	d003      	beq.n	800ce88 <__ssvfscanf_r+0x1ac>
 800ce80:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ce82:	899b      	ldrh	r3, [r3, #12]
 800ce84:	065b      	lsls	r3, r3, #25
 800ce86:	d526      	bpl.n	800ced6 <__ssvfscanf_r+0x1fa>
 800ce88:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ce8a:	2b00      	cmp	r3, #0
 800ce8c:	d000      	beq.n	800ce90 <__ssvfscanf_r+0x1b4>
 800ce8e:	e0f6      	b.n	800d07e <__ssvfscanf_r+0x3a2>
 800ce90:	3b01      	subs	r3, #1
 800ce92:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ce94:	e104      	b.n	800d0a0 <__ssvfscanf_r+0x3c4>
 800ce96:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ce98:	4332      	orrs	r2, r6
 800ce9a:	63fa      	str	r2, [r7, #60]	; 0x3c
 800ce9c:	d11b      	bne.n	800ced6 <__ssvfscanf_r+0x1fa>
 800ce9e:	2610      	movs	r6, #16
 800cea0:	69ba      	ldr	r2, [r7, #24]
 800cea2:	e76c      	b.n	800cd7e <__ssvfscanf_r+0xa2>
 800cea4:	421e      	tst	r6, r3
 800cea6:	d116      	bne.n	800ced6 <__ssvfscanf_r+0x1fa>
 800cea8:	7851      	ldrb	r1, [r2, #1]
 800ceaa:	296c      	cmp	r1, #108	; 0x6c
 800ceac:	d103      	bne.n	800ceb6 <__ssvfscanf_r+0x1da>
 800ceae:	3202      	adds	r2, #2
 800ceb0:	61ba      	str	r2, [r7, #24]
 800ceb2:	2202      	movs	r2, #2
 800ceb4:	e000      	b.n	800ceb8 <__ssvfscanf_r+0x1dc>
 800ceb6:	2201      	movs	r2, #1
 800ceb8:	4316      	orrs	r6, r2
 800ceba:	e7f1      	b.n	800cea0 <__ssvfscanf_r+0x1c4>
 800cebc:	421e      	tst	r6, r3
 800cebe:	d10a      	bne.n	800ced6 <__ssvfscanf_r+0x1fa>
 800cec0:	7851      	ldrb	r1, [r2, #1]
 800cec2:	2968      	cmp	r1, #104	; 0x68
 800cec4:	d103      	bne.n	800cece <__ssvfscanf_r+0x1f2>
 800cec6:	3202      	adds	r2, #2
 800cec8:	61ba      	str	r2, [r7, #24]
 800ceca:	2208      	movs	r2, #8
 800cecc:	e7f4      	b.n	800ceb8 <__ssvfscanf_r+0x1dc>
 800cece:	2204      	movs	r2, #4
 800ced0:	e7f2      	b.n	800ceb8 <__ssvfscanf_r+0x1dc>
 800ced2:	421e      	tst	r6, r3
 800ced4:	d0ed      	beq.n	800ceb2 <__ssvfscanf_r+0x1d6>
 800ced6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ced8:	2b00      	cmp	r3, #0
 800ceda:	d000      	beq.n	800cede <__ssvfscanf_r+0x202>
 800cedc:	e0da      	b.n	800d094 <__ssvfscanf_r+0x3b8>
 800cede:	e0df      	b.n	800d0a0 <__ssvfscanf_r+0x3c4>
 800cee0:	421e      	tst	r6, r3
 800cee2:	d0dd      	beq.n	800cea0 <__ssvfscanf_r+0x1c4>
 800cee4:	e7f7      	b.n	800ced6 <__ssvfscanf_r+0x1fa>
 800cee6:	228f      	movs	r2, #143	; 0x8f
 800cee8:	218f      	movs	r1, #143	; 0x8f
 800ceea:	4032      	ands	r2, r6
 800ceec:	420e      	tst	r6, r1
 800ceee:	d1f2      	bne.n	800ced6 <__ssvfscanf_r+0x1fa>
 800cef0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800cef2:	2900      	cmp	r1, #0
 800cef4:	d104      	bne.n	800cf00 <__ssvfscanf_r+0x224>
 800cef6:	b082      	sub	sp, #8
 800cef8:	a902      	add	r1, sp, #8
 800cefa:	6439      	str	r1, [r7, #64]	; 0x40
 800cefc:	600a      	str	r2, [r1, #0]
 800cefe:	604a      	str	r2, [r1, #4]
 800cf00:	4326      	orrs	r6, r4
 800cf02:	e7cd      	b.n	800cea0 <__ssvfscanf_r+0x1c4>
 800cf04:	228f      	movs	r2, #143	; 0x8f
 800cf06:	4216      	tst	r6, r2
 800cf08:	d1e5      	bne.n	800ced6 <__ssvfscanf_r+0x1fa>
 800cf0a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800cf0c:	436a      	muls	r2, r5
 800cf0e:	3a30      	subs	r2, #48	; 0x30
 800cf10:	188a      	adds	r2, r1, r2
 800cf12:	63fa      	str	r2, [r7, #60]	; 0x3c
 800cf14:	e7c4      	b.n	800cea0 <__ssvfscanf_r+0x1c4>
 800cf16:	2301      	movs	r3, #1
 800cf18:	431e      	orrs	r6, r3
 800cf1a:	4b1b      	ldr	r3, [pc, #108]	; (800cf88 <__ssvfscanf_r+0x2ac>)
 800cf1c:	617b      	str	r3, [r7, #20]
 800cf1e:	230a      	movs	r3, #10
 800cf20:	2403      	movs	r4, #3
 800cf22:	627b      	str	r3, [r7, #36]	; 0x24
 800cf24:	e00f      	b.n	800cf46 <__ssvfscanf_r+0x26a>
 800cf26:	2301      	movs	r3, #1
 800cf28:	431e      	orrs	r6, r3
 800cf2a:	4b18      	ldr	r3, [pc, #96]	; (800cf8c <__ssvfscanf_r+0x2b0>)
 800cf2c:	617b      	str	r3, [r7, #20]
 800cf2e:	2308      	movs	r3, #8
 800cf30:	e7f6      	b.n	800cf20 <__ssvfscanf_r+0x244>
 800cf32:	4b16      	ldr	r3, [pc, #88]	; (800cf8c <__ssvfscanf_r+0x2b0>)
 800cf34:	e7f2      	b.n	800cf1c <__ssvfscanf_r+0x240>
 800cf36:	2380      	movs	r3, #128	; 0x80
 800cf38:	009b      	lsls	r3, r3, #2
 800cf3a:	431e      	orrs	r6, r3
 800cf3c:	4b13      	ldr	r3, [pc, #76]	; (800cf8c <__ssvfscanf_r+0x2b0>)
 800cf3e:	617b      	str	r3, [r7, #20]
 800cf40:	2310      	movs	r3, #16
 800cf42:	e7ed      	b.n	800cf20 <__ssvfscanf_r+0x244>
 800cf44:	2404      	movs	r4, #4
 800cf46:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cf48:	685b      	ldr	r3, [r3, #4]
 800cf4a:	2b00      	cmp	r3, #0
 800cf4c:	dd55      	ble.n	800cffa <__ssvfscanf_r+0x31e>
 800cf4e:	0673      	lsls	r3, r6, #25
 800cf50:	d407      	bmi.n	800cf62 <__ssvfscanf_r+0x286>
 800cf52:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cf54:	490b      	ldr	r1, [pc, #44]	; (800cf84 <__ssvfscanf_r+0x2a8>)
 800cf56:	681b      	ldr	r3, [r3, #0]
 800cf58:	781a      	ldrb	r2, [r3, #0]
 800cf5a:	5c8a      	ldrb	r2, [r1, r2]
 800cf5c:	2108      	movs	r1, #8
 800cf5e:	420a      	tst	r2, r1
 800cf60:	d152      	bne.n	800d008 <__ssvfscanf_r+0x32c>
 800cf62:	1e60      	subs	r0, r4, #1
 800cf64:	2803      	cmp	r0, #3
 800cf66:	d863      	bhi.n	800d030 <__ssvfscanf_r+0x354>
 800cf68:	f7f3 f8de 	bl	8000128 <__gnu_thumb1_case_uhi>
 800cf6c:	03bd01da 	.word	0x03bd01da
 800cf70:	068a0579 	.word	0x068a0579
 800cf74:	2301      	movs	r3, #1
 800cf76:	431e      	orrs	r6, r3
 800cf78:	2402      	movs	r4, #2
 800cf7a:	e7e4      	b.n	800cf46 <__ssvfscanf_r+0x26a>
 800cf7c:	fffffd34 	.word	0xfffffd34
 800cf80:	ffffdfff 	.word	0xffffdfff
 800cf84:	08012a51 	.word	0x08012a51
 800cf88:	0800a12d 	.word	0x0800a12d
 800cf8c:	0800f735 	.word	0x0800f735
 800cf90:	2248      	movs	r2, #72	; 0x48
 800cf92:	2318      	movs	r3, #24
 800cf94:	189b      	adds	r3, r3, r2
 800cf96:	19d8      	adds	r0, r3, r7
 800cf98:	69b9      	ldr	r1, [r7, #24]
 800cf9a:	f001 f9d7 	bl	800e34c <__sccl>
 800cf9e:	2340      	movs	r3, #64	; 0x40
 800cfa0:	2401      	movs	r4, #1
 800cfa2:	61b8      	str	r0, [r7, #24]
 800cfa4:	431e      	orrs	r6, r3
 800cfa6:	e7ce      	b.n	800cf46 <__ssvfscanf_r+0x26a>
 800cfa8:	2301      	movs	r3, #1
 800cfaa:	431e      	orrs	r6, r3
 800cfac:	2340      	movs	r3, #64	; 0x40
 800cfae:	2400      	movs	r4, #0
 800cfb0:	431e      	orrs	r6, r3
 800cfb2:	e7c8      	b.n	800cf46 <__ssvfscanf_r+0x26a>
 800cfb4:	2388      	movs	r3, #136	; 0x88
 800cfb6:	e7bf      	b.n	800cf38 <__ssvfscanf_r+0x25c>
 800cfb8:	06f3      	lsls	r3, r6, #27
 800cfba:	d500      	bpl.n	800cfbe <__ssvfscanf_r+0x2e2>
 800cfbc:	e6aa      	b.n	800cd14 <__ssvfscanf_r+0x38>
 800cfbe:	2108      	movs	r1, #8
 800cfc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cfc2:	cb04      	ldmia	r3!, {r2}
 800cfc4:	420e      	tst	r6, r1
 800cfc6:	d003      	beq.n	800cfd0 <__ssvfscanf_r+0x2f4>
 800cfc8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800cfca:	7011      	strb	r1, [r2, #0]
 800cfcc:	633b      	str	r3, [r7, #48]	; 0x30
 800cfce:	e6a1      	b.n	800cd14 <__ssvfscanf_r+0x38>
 800cfd0:	0771      	lsls	r1, r6, #29
 800cfd2:	d502      	bpl.n	800cfda <__ssvfscanf_r+0x2fe>
 800cfd4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800cfd6:	8011      	strh	r1, [r2, #0]
 800cfd8:	e7f8      	b.n	800cfcc <__ssvfscanf_r+0x2f0>
 800cfda:	07f1      	lsls	r1, r6, #31
 800cfdc:	d502      	bpl.n	800cfe4 <__ssvfscanf_r+0x308>
 800cfde:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800cfe0:	6011      	str	r1, [r2, #0]
 800cfe2:	e7f3      	b.n	800cfcc <__ssvfscanf_r+0x2f0>
 800cfe4:	07b6      	lsls	r6, r6, #30
 800cfe6:	d5fa      	bpl.n	800cfde <__ssvfscanf_r+0x302>
 800cfe8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800cfea:	6011      	str	r1, [r2, #0]
 800cfec:	17c9      	asrs	r1, r1, #31
 800cfee:	6051      	str	r1, [r2, #4]
 800cff0:	e7ec      	b.n	800cfcc <__ssvfscanf_r+0x2f0>
 800cff2:	4ba2      	ldr	r3, [pc, #648]	; (800d27c <__ssvfscanf_r+0x5a0>)
 800cff4:	617b      	str	r3, [r7, #20]
 800cff6:	2300      	movs	r3, #0
 800cff8:	e792      	b.n	800cf20 <__ssvfscanf_r+0x244>
 800cffa:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800cffc:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800cffe:	f002 fe01 	bl	800fc04 <__ssrefill_r>
 800d002:	2800      	cmp	r0, #0
 800d004:	d0a3      	beq.n	800cf4e <__ssvfscanf_r+0x272>
 800d006:	e738      	b.n	800ce7a <__ssvfscanf_r+0x19e>
 800d008:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d00a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d00c:	3201      	adds	r2, #1
 800d00e:	63ba      	str	r2, [r7, #56]	; 0x38
 800d010:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d012:	6852      	ldr	r2, [r2, #4]
 800d014:	3a01      	subs	r2, #1
 800d016:	604a      	str	r2, [r1, #4]
 800d018:	2a00      	cmp	r2, #0
 800d01a:	dd02      	ble.n	800d022 <__ssvfscanf_r+0x346>
 800d01c:	3301      	adds	r3, #1
 800d01e:	600b      	str	r3, [r1, #0]
 800d020:	e797      	b.n	800cf52 <__ssvfscanf_r+0x276>
 800d022:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d024:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800d026:	f002 fded 	bl	800fc04 <__ssrefill_r>
 800d02a:	2800      	cmp	r0, #0
 800d02c:	d091      	beq.n	800cf52 <__ssvfscanf_r+0x276>
 800d02e:	e724      	b.n	800ce7a <__ssvfscanf_r+0x19e>
 800d030:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d032:	2301      	movs	r3, #1
 800d034:	2a00      	cmp	r2, #0
 800d036:	d100      	bne.n	800d03a <__ssvfscanf_r+0x35e>
 800d038:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d03a:	2210      	movs	r2, #16
 800d03c:	0034      	movs	r4, r6
 800d03e:	4032      	ands	r2, r6
 800d040:	623a      	str	r2, [r7, #32]
 800d042:	401c      	ands	r4, r3
 800d044:	421e      	tst	r6, r3
 800d046:	d100      	bne.n	800d04a <__ssvfscanf_r+0x36e>
 800d048:	e0f3      	b.n	800d232 <__ssvfscanf_r+0x556>
 800d04a:	2a00      	cmp	r2, #0
 800d04c:	d000      	beq.n	800d050 <__ssvfscanf_r+0x374>
 800d04e:	e0b6      	b.n	800d1be <__ssvfscanf_r+0x4e2>
 800d050:	2080      	movs	r0, #128	; 0x80
 800d052:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d054:	cb10      	ldmia	r3!, {r4}
 800d056:	613b      	str	r3, [r7, #16]
 800d058:	4206      	tst	r6, r0
 800d05a:	d100      	bne.n	800d05e <__ssvfscanf_r+0x382>
 800d05c:	e0b7      	b.n	800d1ce <__ssvfscanf_r+0x4f2>
 800d05e:	2c00      	cmp	r4, #0
 800d060:	d007      	beq.n	800d072 <__ssvfscanf_r+0x396>
 800d062:	f7fb ff7b 	bl	8008f5c <malloc>
 800d066:	6338      	str	r0, [r7, #48]	; 0x30
 800d068:	2800      	cmp	r0, #0
 800d06a:	d11f      	bne.n	800d0ac <__ssvfscanf_r+0x3d0>
 800d06c:	2301      	movs	r3, #1
 800d06e:	425b      	negs	r3, r3
 800d070:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d072:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d074:	2b00      	cmp	r3, #0
 800d076:	d013      	beq.n	800d0a0 <__ssvfscanf_r+0x3c4>
 800d078:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d07a:	3301      	adds	r3, #1
 800d07c:	d10a      	bne.n	800d094 <__ssvfscanf_r+0x3b8>
 800d07e:	2400      	movs	r4, #0
 800d080:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d082:	681d      	ldr	r5, [r3, #0]
 800d084:	88db      	ldrh	r3, [r3, #6]
 800d086:	42a3      	cmp	r3, r4
 800d088:	dd01      	ble.n	800d08e <__ssvfscanf_r+0x3b2>
 800d08a:	f001 f82a 	bl	800e0e2 <__ssvfscanf_r+0x1406>
 800d08e:	2301      	movs	r3, #1
 800d090:	425b      	negs	r3, r3
 800d092:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d094:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d096:	6818      	ldr	r0, [r3, #0]
 800d098:	2800      	cmp	r0, #0
 800d09a:	d001      	beq.n	800d0a0 <__ssvfscanf_r+0x3c4>
 800d09c:	f7fb ff68 	bl	8008f70 <free>
 800d0a0:	46bd      	mov	sp, r7
 800d0a2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d0a4:	23b1      	movs	r3, #177	; 0xb1
 800d0a6:	009b      	lsls	r3, r3, #2
 800d0a8:	449d      	add	sp, r3
 800d0aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d0ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0ae:	6023      	str	r3, [r4, #0]
 800d0b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d0b2:	88de      	ldrh	r6, [r3, #6]
 800d0b4:	889d      	ldrh	r5, [r3, #4]
 800d0b6:	42ae      	cmp	r6, r5
 800d0b8:	d30e      	bcc.n	800d0d8 <__ssvfscanf_r+0x3fc>
 800d0ba:	4b71      	ldr	r3, [pc, #452]	; (800d280 <__ssvfscanf_r+0x5a4>)
 800d0bc:	429d      	cmp	r5, r3
 800d0be:	d8d5      	bhi.n	800d06c <__ssvfscanf_r+0x390>
 800d0c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d0c2:	3508      	adds	r5, #8
 800d0c4:	b2ad      	uxth	r5, r5
 800d0c6:	6818      	ldr	r0, [r3, #0]
 800d0c8:	00a9      	lsls	r1, r5, #2
 800d0ca:	f002 f901 	bl	800f2d0 <realloc>
 800d0ce:	2800      	cmp	r0, #0
 800d0d0:	d0cc      	beq.n	800d06c <__ssvfscanf_r+0x390>
 800d0d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d0d4:	6018      	str	r0, [r3, #0]
 800d0d6:	809d      	strh	r5, [r3, #4]
 800d0d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d0da:	1c72      	adds	r2, r6, #1
 800d0dc:	681b      	ldr	r3, [r3, #0]
 800d0de:	00b6      	lsls	r6, r6, #2
 800d0e0:	50f4      	str	r4, [r6, r3]
 800d0e2:	2320      	movs	r3, #32
 800d0e4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800d0e6:	0026      	movs	r6, r4
 800d0e8:	6b3c      	ldr	r4, [r7, #48]	; 0x30
 800d0ea:	80ca      	strh	r2, [r1, #6]
 800d0ec:	61fb      	str	r3, [r7, #28]
 800d0ee:	2500      	movs	r5, #0
 800d0f0:	f7fd f9fe 	bl	800a4f0 <__locale_mb_cur_max>
 800d0f4:	42a8      	cmp	r0, r5
 800d0f6:	d100      	bne.n	800d0fa <__ssvfscanf_r+0x41e>
 800d0f8:	e6bf      	b.n	800ce7a <__ssvfscanf_r+0x19e>
 800d0fa:	1c6a      	adds	r2, r5, #1
 800d0fc:	60fa      	str	r2, [r7, #12]
 800d0fe:	228c      	movs	r2, #140	; 0x8c
 800d100:	2048      	movs	r0, #72	; 0x48
 800d102:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d104:	0052      	lsls	r2, r2, #1
 800d106:	681b      	ldr	r3, [r3, #0]
 800d108:	1812      	adds	r2, r2, r0
 800d10a:	7819      	ldrb	r1, [r3, #0]
 800d10c:	19d2      	adds	r2, r2, r7
 800d10e:	5551      	strb	r1, [r2, r5]
 800d110:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d112:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d114:	6852      	ldr	r2, [r2, #4]
 800d116:	3301      	adds	r3, #1
 800d118:	600b      	str	r3, [r1, #0]
 800d11a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d11c:	3a01      	subs	r2, #1
 800d11e:	604a      	str	r2, [r1, #4]
 800d120:	2b03      	cmp	r3, #3
 800d122:	d102      	bne.n	800d12a <__ssvfscanf_r+0x44e>
 800d124:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d126:	2b04      	cmp	r3, #4
 800d128:	d007      	beq.n	800d13a <__ssvfscanf_r+0x45e>
 800d12a:	2048      	movs	r0, #72	; 0x48
 800d12c:	2310      	movs	r3, #16
 800d12e:	181b      	adds	r3, r3, r0
 800d130:	2208      	movs	r2, #8
 800d132:	2100      	movs	r1, #0
 800d134:	19d8      	adds	r0, r3, r7
 800d136:	f7fd f997 	bl	800a468 <memset>
 800d13a:	2148      	movs	r1, #72	; 0x48
 800d13c:	2310      	movs	r3, #16
 800d13e:	228c      	movs	r2, #140	; 0x8c
 800d140:	185b      	adds	r3, r3, r1
 800d142:	0052      	lsls	r2, r2, #1
 800d144:	19db      	adds	r3, r3, r7
 800d146:	1852      	adds	r2, r2, r1
 800d148:	9300      	str	r3, [sp, #0]
 800d14a:	0021      	movs	r1, r4
 800d14c:	68fb      	ldr	r3, [r7, #12]
 800d14e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800d150:	19d2      	adds	r2, r2, r7
 800d152:	f002 fc57 	bl	800fa04 <_mbrtowc_r>
 800d156:	0003      	movs	r3, r0
 800d158:	62b8      	str	r0, [r7, #40]	; 0x28
 800d15a:	3301      	adds	r3, #1
 800d15c:	d100      	bne.n	800d160 <__ssvfscanf_r+0x484>
 800d15e:	e68c      	b.n	800ce7a <__ssvfscanf_r+0x19e>
 800d160:	2800      	cmp	r0, #0
 800d162:	d139      	bne.n	800d1d8 <__ssvfscanf_r+0x4fc>
 800d164:	6a3b      	ldr	r3, [r7, #32]
 800d166:	2b00      	cmp	r3, #0
 800d168:	d100      	bne.n	800d16c <__ssvfscanf_r+0x490>
 800d16a:	6023      	str	r3, [r4, #0]
 800d16c:	68fa      	ldr	r2, [r7, #12]
 800d16e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d170:	4694      	mov	ip, r2
 800d172:	4463      	add	r3, ip
 800d174:	63bb      	str	r3, [r7, #56]	; 0x38
 800d176:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d178:	2b03      	cmp	r3, #3
 800d17a:	d102      	bne.n	800d182 <__ssvfscanf_r+0x4a6>
 800d17c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d17e:	2b04      	cmp	r3, #4
 800d180:	d002      	beq.n	800d188 <__ssvfscanf_r+0x4ac>
 800d182:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d184:	3b01      	subs	r3, #1
 800d186:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d188:	6a3b      	ldr	r3, [r7, #32]
 800d18a:	2b00      	cmp	r3, #0
 800d18c:	d115      	bne.n	800d1ba <__ssvfscanf_r+0x4de>
 800d18e:	2e00      	cmp	r6, #0
 800d190:	d012      	beq.n	800d1b8 <__ssvfscanf_r+0x4dc>
 800d192:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d194:	69fa      	ldr	r2, [r7, #28]
 800d196:	1ae5      	subs	r5, r4, r3
 800d198:	10ab      	asrs	r3, r5, #2
 800d19a:	4293      	cmp	r3, r2
 800d19c:	d30c      	bcc.n	800d1b8 <__ssvfscanf_r+0x4dc>
 800d19e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d1a0:	00d1      	lsls	r1, r2, #3
 800d1a2:	f002 f895 	bl	800f2d0 <realloc>
 800d1a6:	6338      	str	r0, [r7, #48]	; 0x30
 800d1a8:	2800      	cmp	r0, #0
 800d1aa:	d100      	bne.n	800d1ae <__ssvfscanf_r+0x4d2>
 800d1ac:	e75e      	b.n	800d06c <__ssvfscanf_r+0x390>
 800d1ae:	69fb      	ldr	r3, [r7, #28]
 800d1b0:	1944      	adds	r4, r0, r5
 800d1b2:	005b      	lsls	r3, r3, #1
 800d1b4:	6030      	str	r0, [r6, #0]
 800d1b6:	61fb      	str	r3, [r7, #28]
 800d1b8:	3404      	adds	r4, #4
 800d1ba:	2500      	movs	r5, #0
 800d1bc:	e010      	b.n	800d1e0 <__ssvfscanf_r+0x504>
 800d1be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1c0:	613b      	str	r3, [r7, #16]
 800d1c2:	2300      	movs	r3, #0
 800d1c4:	001e      	movs	r6, r3
 800d1c6:	001c      	movs	r4, r3
 800d1c8:	61fb      	str	r3, [r7, #28]
 800d1ca:	633b      	str	r3, [r7, #48]	; 0x30
 800d1cc:	e78f      	b.n	800d0ee <__ssvfscanf_r+0x412>
 800d1ce:	6a3b      	ldr	r3, [r7, #32]
 800d1d0:	001e      	movs	r6, r3
 800d1d2:	61fb      	str	r3, [r7, #28]
 800d1d4:	633b      	str	r3, [r7, #48]	; 0x30
 800d1d6:	e78a      	b.n	800d0ee <__ssvfscanf_r+0x412>
 800d1d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1da:	68fd      	ldr	r5, [r7, #12]
 800d1dc:	3302      	adds	r3, #2
 800d1de:	d1c5      	bne.n	800d16c <__ssvfscanf_r+0x490>
 800d1e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d1e2:	685b      	ldr	r3, [r3, #4]
 800d1e4:	2b00      	cmp	r3, #0
 800d1e6:	dc12      	bgt.n	800d20e <__ssvfscanf_r+0x532>
 800d1e8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d1ea:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800d1ec:	f002 fd0a 	bl	800fc04 <__ssrefill_r>
 800d1f0:	2800      	cmp	r0, #0
 800d1f2:	d00c      	beq.n	800d20e <__ssvfscanf_r+0x532>
 800d1f4:	2d00      	cmp	r5, #0
 800d1f6:	d000      	beq.n	800d1fa <__ssvfscanf_r+0x51e>
 800d1f8:	e63f      	b.n	800ce7a <__ssvfscanf_r+0x19e>
 800d1fa:	2e00      	cmp	r6, #0
 800d1fc:	d10c      	bne.n	800d218 <__ssvfscanf_r+0x53c>
 800d1fe:	6a3b      	ldr	r3, [r7, #32]
 800d200:	425a      	negs	r2, r3
 800d202:	4153      	adcs	r3, r2
 800d204:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d206:	18d3      	adds	r3, r2, r3
 800d208:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d20a:	693b      	ldr	r3, [r7, #16]
 800d20c:	e6de      	b.n	800cfcc <__ssvfscanf_r+0x2f0>
 800d20e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d210:	2b00      	cmp	r3, #0
 800d212:	d000      	beq.n	800d216 <__ssvfscanf_r+0x53a>
 800d214:	e76c      	b.n	800d0f0 <__ssvfscanf_r+0x414>
 800d216:	e7f0      	b.n	800d1fa <__ssvfscanf_r+0x51e>
 800d218:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d21a:	69fa      	ldr	r2, [r7, #28]
 800d21c:	1ae1      	subs	r1, r4, r3
 800d21e:	108b      	asrs	r3, r1, #2
 800d220:	429a      	cmp	r2, r3
 800d222:	d9ec      	bls.n	800d1fe <__ssvfscanf_r+0x522>
 800d224:	6830      	ldr	r0, [r6, #0]
 800d226:	f002 f853 	bl	800f2d0 <realloc>
 800d22a:	2800      	cmp	r0, #0
 800d22c:	d0e7      	beq.n	800d1fe <__ssvfscanf_r+0x522>
 800d22e:	6030      	str	r0, [r6, #0]
 800d230:	e7e5      	b.n	800d1fe <__ssvfscanf_r+0x522>
 800d232:	6a3b      	ldr	r3, [r7, #32]
 800d234:	2b00      	cmp	r3, #0
 800d236:	d025      	beq.n	800d284 <__ssvfscanf_r+0x5a8>
 800d238:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d23a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d23c:	685b      	ldr	r3, [r3, #4]
 800d23e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800d240:	6812      	ldr	r2, [r2, #0]
 800d242:	4299      	cmp	r1, r3
 800d244:	dd11      	ble.n	800d26a <__ssvfscanf_r+0x58e>
 800d246:	1ac9      	subs	r1, r1, r3
 800d248:	18d2      	adds	r2, r2, r3
 800d24a:	18e4      	adds	r4, r4, r3
 800d24c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d24e:	63f9      	str	r1, [r7, #60]	; 0x3c
 800d250:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800d252:	0019      	movs	r1, r3
 800d254:	601a      	str	r2, [r3, #0]
 800d256:	f002 fcd5 	bl	800fc04 <__ssrefill_r>
 800d25a:	2800      	cmp	r0, #0
 800d25c:	d0ec      	beq.n	800d238 <__ssvfscanf_r+0x55c>
 800d25e:	2c00      	cmp	r4, #0
 800d260:	d100      	bne.n	800d264 <__ssvfscanf_r+0x588>
 800d262:	e60a      	b.n	800ce7a <__ssvfscanf_r+0x19e>
 800d264:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d266:	191b      	adds	r3, r3, r4
 800d268:	e5ff      	b.n	800ce6a <__ssvfscanf_r+0x18e>
 800d26a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800d26c:	1a5b      	subs	r3, r3, r1
 800d26e:	1864      	adds	r4, r4, r1
 800d270:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d272:	604b      	str	r3, [r1, #4]
 800d274:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d276:	18d2      	adds	r2, r2, r3
 800d278:	600a      	str	r2, [r1, #0]
 800d27a:	e7f3      	b.n	800d264 <__ssvfscanf_r+0x588>
 800d27c:	0800a12d 	.word	0x0800a12d
 800d280:	0000fff6 	.word	0x0000fff6
 800d284:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d286:	0034      	movs	r4, r6
 800d288:	cb20      	ldmia	r3!, {r5}
 800d28a:	633b      	str	r3, [r7, #48]	; 0x30
 800d28c:	2380      	movs	r3, #128	; 0x80
 800d28e:	401c      	ands	r4, r3
 800d290:	421e      	tst	r6, r3
 800d292:	d028      	beq.n	800d2e6 <__ssvfscanf_r+0x60a>
 800d294:	2d00      	cmp	r5, #0
 800d296:	d100      	bne.n	800d29a <__ssvfscanf_r+0x5be>
 800d298:	e61d      	b.n	800ced6 <__ssvfscanf_r+0x1fa>
 800d29a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800d29c:	f7fb fe5e 	bl	8008f5c <malloc>
 800d2a0:	6238      	str	r0, [r7, #32]
 800d2a2:	2800      	cmp	r0, #0
 800d2a4:	d100      	bne.n	800d2a8 <__ssvfscanf_r+0x5cc>
 800d2a6:	e5ef      	b.n	800ce88 <__ssvfscanf_r+0x1ac>
 800d2a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d2aa:	6028      	str	r0, [r5, #0]
 800d2ac:	88de      	ldrh	r6, [r3, #6]
 800d2ae:	889c      	ldrh	r4, [r3, #4]
 800d2b0:	6818      	ldr	r0, [r3, #0]
 800d2b2:	42a6      	cmp	r6, r4
 800d2b4:	d30e      	bcc.n	800d2d4 <__ssvfscanf_r+0x5f8>
 800d2b6:	4bbf      	ldr	r3, [pc, #764]	; (800d5b4 <__ssvfscanf_r+0x8d8>)
 800d2b8:	429c      	cmp	r4, r3
 800d2ba:	d900      	bls.n	800d2be <__ssvfscanf_r+0x5e2>
 800d2bc:	e6df      	b.n	800d07e <__ssvfscanf_r+0x3a2>
 800d2be:	3408      	adds	r4, #8
 800d2c0:	b2a4      	uxth	r4, r4
 800d2c2:	00a1      	lsls	r1, r4, #2
 800d2c4:	f002 f804 	bl	800f2d0 <realloc>
 800d2c8:	2800      	cmp	r0, #0
 800d2ca:	d100      	bne.n	800d2ce <__ssvfscanf_r+0x5f2>
 800d2cc:	e6d7      	b.n	800d07e <__ssvfscanf_r+0x3a2>
 800d2ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d2d0:	6018      	str	r0, [r3, #0]
 800d2d2:	809c      	strh	r4, [r3, #4]
 800d2d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d2d6:	1c72      	adds	r2, r6, #1
 800d2d8:	681b      	ldr	r3, [r3, #0]
 800d2da:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800d2dc:	00b6      	lsls	r6, r6, #2
 800d2de:	002c      	movs	r4, r5
 800d2e0:	50f5      	str	r5, [r6, r3]
 800d2e2:	6a3d      	ldr	r5, [r7, #32]
 800d2e4:	80ca      	strh	r2, [r1, #6]
 800d2e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d2e8:	0029      	movs	r1, r5
 800d2ea:	9300      	str	r3, [sp, #0]
 800d2ec:	2201      	movs	r2, #1
 800d2ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d2f0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800d2f2:	f002 fca6 	bl	800fc42 <_sfread_r>
 800d2f6:	1e05      	subs	r5, r0, #0
 800d2f8:	d100      	bne.n	800d2fc <__ssvfscanf_r+0x620>
 800d2fa:	e5be      	b.n	800ce7a <__ssvfscanf_r+0x19e>
 800d2fc:	2c00      	cmp	r4, #0
 800d2fe:	d009      	beq.n	800d314 <__ssvfscanf_r+0x638>
 800d300:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d302:	4283      	cmp	r3, r0
 800d304:	d906      	bls.n	800d314 <__ssvfscanf_r+0x638>
 800d306:	0001      	movs	r1, r0
 800d308:	6820      	ldr	r0, [r4, #0]
 800d30a:	f001 ffe1 	bl	800f2d0 <realloc>
 800d30e:	2800      	cmp	r0, #0
 800d310:	d000      	beq.n	800d314 <__ssvfscanf_r+0x638>
 800d312:	6020      	str	r0, [r4, #0]
 800d314:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d316:	195b      	adds	r3, r3, r5
 800d318:	63bb      	str	r3, [r7, #56]	; 0x38
 800d31a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d31c:	3301      	adds	r3, #1
 800d31e:	e4f8      	b.n	800cd12 <__ssvfscanf_r+0x36>
 800d320:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d322:	2b00      	cmp	r3, #0
 800d324:	d101      	bne.n	800d32a <__ssvfscanf_r+0x64e>
 800d326:	3b01      	subs	r3, #1
 800d328:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d32a:	2210      	movs	r2, #16
 800d32c:	2301      	movs	r3, #1
 800d32e:	0034      	movs	r4, r6
 800d330:	4032      	ands	r2, r6
 800d332:	401c      	ands	r4, r3
 800d334:	623a      	str	r2, [r7, #32]
 800d336:	421e      	tst	r6, r3
 800d338:	d100      	bne.n	800d33c <__ssvfscanf_r+0x660>
 800d33a:	e116      	b.n	800d56a <__ssvfscanf_r+0x88e>
 800d33c:	2a00      	cmp	r2, #0
 800d33e:	d000      	beq.n	800d342 <__ssvfscanf_r+0x666>
 800d340:	e0b0      	b.n	800d4a4 <__ssvfscanf_r+0x7c8>
 800d342:	2080      	movs	r0, #128	; 0x80
 800d344:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d346:	cb10      	ldmia	r3!, {r4}
 800d348:	60fb      	str	r3, [r7, #12]
 800d34a:	4206      	tst	r6, r0
 800d34c:	d100      	bne.n	800d350 <__ssvfscanf_r+0x674>
 800d34e:	e0b2      	b.n	800d4b6 <__ssvfscanf_r+0x7da>
 800d350:	2c00      	cmp	r4, #0
 800d352:	d100      	bne.n	800d356 <__ssvfscanf_r+0x67a>
 800d354:	e68d      	b.n	800d072 <__ssvfscanf_r+0x396>
 800d356:	f7fb fe01 	bl	8008f5c <malloc>
 800d35a:	6338      	str	r0, [r7, #48]	; 0x30
 800d35c:	2800      	cmp	r0, #0
 800d35e:	d100      	bne.n	800d362 <__ssvfscanf_r+0x686>
 800d360:	e684      	b.n	800d06c <__ssvfscanf_r+0x390>
 800d362:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d364:	6023      	str	r3, [r4, #0]
 800d366:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d368:	88de      	ldrh	r6, [r3, #6]
 800d36a:	889d      	ldrh	r5, [r3, #4]
 800d36c:	42ae      	cmp	r6, r5
 800d36e:	d310      	bcc.n	800d392 <__ssvfscanf_r+0x6b6>
 800d370:	4b90      	ldr	r3, [pc, #576]	; (800d5b4 <__ssvfscanf_r+0x8d8>)
 800d372:	429d      	cmp	r5, r3
 800d374:	d900      	bls.n	800d378 <__ssvfscanf_r+0x69c>
 800d376:	e679      	b.n	800d06c <__ssvfscanf_r+0x390>
 800d378:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d37a:	3508      	adds	r5, #8
 800d37c:	b2ad      	uxth	r5, r5
 800d37e:	6818      	ldr	r0, [r3, #0]
 800d380:	00a9      	lsls	r1, r5, #2
 800d382:	f001 ffa5 	bl	800f2d0 <realloc>
 800d386:	2800      	cmp	r0, #0
 800d388:	d100      	bne.n	800d38c <__ssvfscanf_r+0x6b0>
 800d38a:	e66f      	b.n	800d06c <__ssvfscanf_r+0x390>
 800d38c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d38e:	6018      	str	r0, [r3, #0]
 800d390:	809d      	strh	r5, [r3, #4]
 800d392:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d394:	1c72      	adds	r2, r6, #1
 800d396:	681b      	ldr	r3, [r3, #0]
 800d398:	00b6      	lsls	r6, r6, #2
 800d39a:	50f4      	str	r4, [r6, r3]
 800d39c:	2320      	movs	r3, #32
 800d39e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800d3a0:	0026      	movs	r6, r4
 800d3a2:	6b3c      	ldr	r4, [r7, #48]	; 0x30
 800d3a4:	80ca      	strh	r2, [r1, #6]
 800d3a6:	613b      	str	r3, [r7, #16]
 800d3a8:	2500      	movs	r5, #0
 800d3aa:	f7fd f8a1 	bl	800a4f0 <__locale_mb_cur_max>
 800d3ae:	42a8      	cmp	r0, r5
 800d3b0:	d100      	bne.n	800d3b4 <__ssvfscanf_r+0x6d8>
 800d3b2:	e562      	b.n	800ce7a <__ssvfscanf_r+0x19e>
 800d3b4:	1c6a      	adds	r2, r5, #1
 800d3b6:	61fa      	str	r2, [r7, #28]
 800d3b8:	228c      	movs	r2, #140	; 0x8c
 800d3ba:	2048      	movs	r0, #72	; 0x48
 800d3bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d3be:	0052      	lsls	r2, r2, #1
 800d3c0:	681b      	ldr	r3, [r3, #0]
 800d3c2:	1812      	adds	r2, r2, r0
 800d3c4:	7819      	ldrb	r1, [r3, #0]
 800d3c6:	19d2      	adds	r2, r2, r7
 800d3c8:	5551      	strb	r1, [r2, r5]
 800d3ca:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d3cc:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d3ce:	6852      	ldr	r2, [r2, #4]
 800d3d0:	3301      	adds	r3, #1
 800d3d2:	600b      	str	r3, [r1, #0]
 800d3d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3d6:	3a01      	subs	r2, #1
 800d3d8:	604a      	str	r2, [r1, #4]
 800d3da:	2b03      	cmp	r3, #3
 800d3dc:	d102      	bne.n	800d3e4 <__ssvfscanf_r+0x708>
 800d3de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d3e0:	2b04      	cmp	r3, #4
 800d3e2:	d006      	beq.n	800d3f2 <__ssvfscanf_r+0x716>
 800d3e4:	2048      	movs	r0, #72	; 0x48
 800d3e6:	2208      	movs	r2, #8
 800d3e8:	1813      	adds	r3, r2, r0
 800d3ea:	2100      	movs	r1, #0
 800d3ec:	19d8      	adds	r0, r3, r7
 800d3ee:	f7fd f83b 	bl	800a468 <memset>
 800d3f2:	2148      	movs	r1, #72	; 0x48
 800d3f4:	2308      	movs	r3, #8
 800d3f6:	228c      	movs	r2, #140	; 0x8c
 800d3f8:	185b      	adds	r3, r3, r1
 800d3fa:	0052      	lsls	r2, r2, #1
 800d3fc:	19db      	adds	r3, r3, r7
 800d3fe:	1852      	adds	r2, r2, r1
 800d400:	9300      	str	r3, [sp, #0]
 800d402:	0021      	movs	r1, r4
 800d404:	69fb      	ldr	r3, [r7, #28]
 800d406:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800d408:	19d2      	adds	r2, r2, r7
 800d40a:	f002 fafb 	bl	800fa04 <_mbrtowc_r>
 800d40e:	0003      	movs	r3, r0
 800d410:	62b8      	str	r0, [r7, #40]	; 0x28
 800d412:	3301      	adds	r3, #1
 800d414:	d100      	bne.n	800d418 <__ssvfscanf_r+0x73c>
 800d416:	e530      	b.n	800ce7a <__ssvfscanf_r+0x19e>
 800d418:	2800      	cmp	r0, #0
 800d41a:	d151      	bne.n	800d4c0 <__ssvfscanf_r+0x7e4>
 800d41c:	6020      	str	r0, [r4, #0]
 800d41e:	2301      	movs	r3, #1
 800d420:	6825      	ldr	r5, [r4, #0]
 800d422:	425b      	negs	r3, r3
 800d424:	1c6a      	adds	r2, r5, #1
 800d426:	d01a      	beq.n	800d45e <__ssvfscanf_r+0x782>
 800d428:	2048      	movs	r0, #72	; 0x48
 800d42a:	3311      	adds	r3, #17
 800d42c:	181b      	adds	r3, r3, r0
 800d42e:	2208      	movs	r2, #8
 800d430:	2100      	movs	r1, #0
 800d432:	19d8      	adds	r0, r3, r7
 800d434:	f7fd f818 	bl	800a468 <memset>
 800d438:	4b5f      	ldr	r3, [pc, #380]	; (800d5b8 <__ssvfscanf_r+0x8dc>)
 800d43a:	2148      	movs	r1, #72	; 0x48
 800d43c:	33e0      	adds	r3, #224	; 0xe0
 800d43e:	681a      	ldr	r2, [r3, #0]
 800d440:	2310      	movs	r3, #16
 800d442:	4694      	mov	ip, r2
 800d444:	185b      	adds	r3, r3, r1
 800d446:	002a      	movs	r2, r5
 800d448:	19db      	adds	r3, r3, r7
 800d44a:	4665      	mov	r5, ip
 800d44c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800d44e:	1879      	adds	r1, r7, r1
 800d450:	47a8      	blx	r5
 800d452:	2300      	movs	r3, #0
 800d454:	2801      	cmp	r0, #1
 800d456:	d102      	bne.n	800d45e <__ssvfscanf_r+0x782>
 800d458:	3348      	adds	r3, #72	; 0x48
 800d45a:	18fb      	adds	r3, r7, r3
 800d45c:	781b      	ldrb	r3, [r3, #0]
 800d45e:	2218      	movs	r2, #24
 800d460:	2148      	movs	r1, #72	; 0x48
 800d462:	1852      	adds	r2, r2, r1
 800d464:	19d2      	adds	r2, r2, r7
 800d466:	5cd3      	ldrb	r3, [r2, r3]
 800d468:	2b00      	cmp	r3, #0
 800d46a:	d149      	bne.n	800d500 <__ssvfscanf_r+0x824>
 800d46c:	69fb      	ldr	r3, [r7, #28]
 800d46e:	2b00      	cmp	r3, #0
 800d470:	d137      	bne.n	800d4e2 <__ssvfscanf_r+0x806>
 800d472:	6a3b      	ldr	r3, [r7, #32]
 800d474:	2b00      	cmp	r3, #0
 800d476:	d113      	bne.n	800d4a0 <__ssvfscanf_r+0x7c4>
 800d478:	6023      	str	r3, [r4, #0]
 800d47a:	2e00      	cmp	r6, #0
 800d47c:	d00d      	beq.n	800d49a <__ssvfscanf_r+0x7be>
 800d47e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d480:	693a      	ldr	r2, [r7, #16]
 800d482:	1ae4      	subs	r4, r4, r3
 800d484:	10a3      	asrs	r3, r4, #2
 800d486:	3301      	adds	r3, #1
 800d488:	429a      	cmp	r2, r3
 800d48a:	d906      	bls.n	800d49a <__ssvfscanf_r+0x7be>
 800d48c:	6830      	ldr	r0, [r6, #0]
 800d48e:	1d21      	adds	r1, r4, #4
 800d490:	f001 ff1e 	bl	800f2d0 <realloc>
 800d494:	2800      	cmp	r0, #0
 800d496:	d000      	beq.n	800d49a <__ssvfscanf_r+0x7be>
 800d498:	6030      	str	r0, [r6, #0]
 800d49a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d49c:	3301      	adds	r3, #1
 800d49e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d4a0:	68fb      	ldr	r3, [r7, #12]
 800d4a2:	e593      	b.n	800cfcc <__ssvfscanf_r+0x2f0>
 800d4a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4a6:	60fb      	str	r3, [r7, #12]
 800d4a8:	2300      	movs	r3, #0
 800d4aa:	001e      	movs	r6, r3
 800d4ac:	613b      	str	r3, [r7, #16]
 800d4ae:	633b      	str	r3, [r7, #48]	; 0x30
 800d4b0:	334c      	adds	r3, #76	; 0x4c
 800d4b2:	18fc      	adds	r4, r7, r3
 800d4b4:	e778      	b.n	800d3a8 <__ssvfscanf_r+0x6cc>
 800d4b6:	6a3b      	ldr	r3, [r7, #32]
 800d4b8:	001e      	movs	r6, r3
 800d4ba:	613b      	str	r3, [r7, #16]
 800d4bc:	633b      	str	r3, [r7, #48]	; 0x30
 800d4be:	e773      	b.n	800d3a8 <__ssvfscanf_r+0x6cc>
 800d4c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d4c2:	69fd      	ldr	r5, [r7, #28]
 800d4c4:	3302      	adds	r3, #2
 800d4c6:	d1aa      	bne.n	800d41e <__ssvfscanf_r+0x742>
 800d4c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d4ca:	685b      	ldr	r3, [r3, #4]
 800d4cc:	2b00      	cmp	r3, #0
 800d4ce:	dc47      	bgt.n	800d560 <__ssvfscanf_r+0x884>
 800d4d0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d4d2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800d4d4:	f002 fb96 	bl	800fc04 <__ssrefill_r>
 800d4d8:	2800      	cmp	r0, #0
 800d4da:	d041      	beq.n	800d560 <__ssvfscanf_r+0x884>
 800d4dc:	2d00      	cmp	r5, #0
 800d4de:	d0c8      	beq.n	800d472 <__ssvfscanf_r+0x796>
 800d4e0:	e4cb      	b.n	800ce7a <__ssvfscanf_r+0x19e>
 800d4e2:	69fb      	ldr	r3, [r7, #28]
 800d4e4:	2248      	movs	r2, #72	; 0x48
 800d4e6:	3b01      	subs	r3, #1
 800d4e8:	61fb      	str	r3, [r7, #28]
 800d4ea:	238c      	movs	r3, #140	; 0x8c
 800d4ec:	005b      	lsls	r3, r3, #1
 800d4ee:	189b      	adds	r3, r3, r2
 800d4f0:	69fa      	ldr	r2, [r7, #28]
 800d4f2:	19db      	adds	r3, r3, r7
 800d4f4:	5cd1      	ldrb	r1, [r2, r3]
 800d4f6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800d4f8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d4fa:	f002 fb47 	bl	800fb8c <_sungetc_r>
 800d4fe:	e7b5      	b.n	800d46c <__ssvfscanf_r+0x790>
 800d500:	69fa      	ldr	r2, [r7, #28]
 800d502:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d504:	4694      	mov	ip, r2
 800d506:	4463      	add	r3, ip
 800d508:	63bb      	str	r3, [r7, #56]	; 0x38
 800d50a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d50c:	2b03      	cmp	r3, #3
 800d50e:	d102      	bne.n	800d516 <__ssvfscanf_r+0x83a>
 800d510:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d512:	2b04      	cmp	r3, #4
 800d514:	d002      	beq.n	800d51c <__ssvfscanf_r+0x840>
 800d516:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d518:	3b01      	subs	r3, #1
 800d51a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d51c:	6a3b      	ldr	r3, [r7, #32]
 800d51e:	2b00      	cmp	r3, #0
 800d520:	d11a      	bne.n	800d558 <__ssvfscanf_r+0x87c>
 800d522:	3404      	adds	r4, #4
 800d524:	2e00      	cmp	r6, #0
 800d526:	d019      	beq.n	800d55c <__ssvfscanf_r+0x880>
 800d528:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d52a:	693a      	ldr	r2, [r7, #16]
 800d52c:	1ae3      	subs	r3, r4, r3
 800d52e:	61fb      	str	r3, [r7, #28]
 800d530:	6a3d      	ldr	r5, [r7, #32]
 800d532:	109b      	asrs	r3, r3, #2
 800d534:	4293      	cmp	r3, r2
 800d536:	d3c7      	bcc.n	800d4c8 <__ssvfscanf_r+0x7ec>
 800d538:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d53a:	00d1      	lsls	r1, r2, #3
 800d53c:	f001 fec8 	bl	800f2d0 <realloc>
 800d540:	6338      	str	r0, [r7, #48]	; 0x30
 800d542:	2800      	cmp	r0, #0
 800d544:	d100      	bne.n	800d548 <__ssvfscanf_r+0x86c>
 800d546:	e591      	b.n	800d06c <__ssvfscanf_r+0x390>
 800d548:	4684      	mov	ip, r0
 800d54a:	693b      	ldr	r3, [r7, #16]
 800d54c:	69fc      	ldr	r4, [r7, #28]
 800d54e:	005b      	lsls	r3, r3, #1
 800d550:	4464      	add	r4, ip
 800d552:	6030      	str	r0, [r6, #0]
 800d554:	613b      	str	r3, [r7, #16]
 800d556:	e7b7      	b.n	800d4c8 <__ssvfscanf_r+0x7ec>
 800d558:	2500      	movs	r5, #0
 800d55a:	e7b5      	b.n	800d4c8 <__ssvfscanf_r+0x7ec>
 800d55c:	0035      	movs	r5, r6
 800d55e:	e7b3      	b.n	800d4c8 <__ssvfscanf_r+0x7ec>
 800d560:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d562:	2b00      	cmp	r3, #0
 800d564:	d000      	beq.n	800d568 <__ssvfscanf_r+0x88c>
 800d566:	e720      	b.n	800d3aa <__ssvfscanf_r+0x6ce>
 800d568:	e783      	b.n	800d472 <__ssvfscanf_r+0x796>
 800d56a:	6a3b      	ldr	r3, [r7, #32]
 800d56c:	2b00      	cmp	r3, #0
 800d56e:	d025      	beq.n	800d5bc <__ssvfscanf_r+0x8e0>
 800d570:	2118      	movs	r1, #24
 800d572:	2048      	movs	r0, #72	; 0x48
 800d574:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d576:	1809      	adds	r1, r1, r0
 800d578:	681b      	ldr	r3, [r3, #0]
 800d57a:	19c9      	adds	r1, r1, r7
 800d57c:	781a      	ldrb	r2, [r3, #0]
 800d57e:	5c8a      	ldrb	r2, [r1, r2]
 800d580:	2a00      	cmp	r2, #0
 800d582:	d103      	bne.n	800d58c <__ssvfscanf_r+0x8b0>
 800d584:	2c00      	cmp	r4, #0
 800d586:	d000      	beq.n	800d58a <__ssvfscanf_r+0x8ae>
 800d588:	e66c      	b.n	800d264 <__ssvfscanf_r+0x588>
 800d58a:	e4a4      	b.n	800ced6 <__ssvfscanf_r+0x1fa>
 800d58c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d58e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d590:	6852      	ldr	r2, [r2, #4]
 800d592:	3301      	adds	r3, #1
 800d594:	600b      	str	r3, [r1, #0]
 800d596:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d598:	3a01      	subs	r2, #1
 800d59a:	3401      	adds	r4, #1
 800d59c:	604a      	str	r2, [r1, #4]
 800d59e:	429c      	cmp	r4, r3
 800d5a0:	d100      	bne.n	800d5a4 <__ssvfscanf_r+0x8c8>
 800d5a2:	e65f      	b.n	800d264 <__ssvfscanf_r+0x588>
 800d5a4:	2a00      	cmp	r2, #0
 800d5a6:	dce3      	bgt.n	800d570 <__ssvfscanf_r+0x894>
 800d5a8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800d5aa:	f002 fb2b 	bl	800fc04 <__ssrefill_r>
 800d5ae:	2800      	cmp	r0, #0
 800d5b0:	d0de      	beq.n	800d570 <__ssvfscanf_r+0x894>
 800d5b2:	e657      	b.n	800d264 <__ssvfscanf_r+0x588>
 800d5b4:	0000fff6 	.word	0x0000fff6
 800d5b8:	2000042c 	.word	0x2000042c
 800d5bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d5be:	0032      	movs	r2, r6
 800d5c0:	cb20      	ldmia	r3!, {r5}
 800d5c2:	61fb      	str	r3, [r7, #28]
 800d5c4:	2380      	movs	r3, #128	; 0x80
 800d5c6:	401a      	ands	r2, r3
 800d5c8:	421e      	tst	r6, r3
 800d5ca:	d100      	bne.n	800d5ce <__ssvfscanf_r+0x8f2>
 800d5cc:	e086      	b.n	800d6dc <__ssvfscanf_r+0xa00>
 800d5ce:	2d00      	cmp	r5, #0
 800d5d0:	d100      	bne.n	800d5d4 <__ssvfscanf_r+0x8f8>
 800d5d2:	e480      	b.n	800ced6 <__ssvfscanf_r+0x1fa>
 800d5d4:	2020      	movs	r0, #32
 800d5d6:	f7fb fcc1 	bl	8008f5c <malloc>
 800d5da:	6338      	str	r0, [r7, #48]	; 0x30
 800d5dc:	2800      	cmp	r0, #0
 800d5de:	d100      	bne.n	800d5e2 <__ssvfscanf_r+0x906>
 800d5e0:	e452      	b.n	800ce88 <__ssvfscanf_r+0x1ac>
 800d5e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d5e4:	6028      	str	r0, [r5, #0]
 800d5e6:	88de      	ldrh	r6, [r3, #6]
 800d5e8:	889c      	ldrh	r4, [r3, #4]
 800d5ea:	6818      	ldr	r0, [r3, #0]
 800d5ec:	42a6      	cmp	r6, r4
 800d5ee:	d30e      	bcc.n	800d60e <__ssvfscanf_r+0x932>
 800d5f0:	4bc3      	ldr	r3, [pc, #780]	; (800d900 <__ssvfscanf_r+0xc24>)
 800d5f2:	429c      	cmp	r4, r3
 800d5f4:	d900      	bls.n	800d5f8 <__ssvfscanf_r+0x91c>
 800d5f6:	e542      	b.n	800d07e <__ssvfscanf_r+0x3a2>
 800d5f8:	3408      	adds	r4, #8
 800d5fa:	b2a4      	uxth	r4, r4
 800d5fc:	00a1      	lsls	r1, r4, #2
 800d5fe:	f001 fe67 	bl	800f2d0 <realloc>
 800d602:	2800      	cmp	r0, #0
 800d604:	d100      	bne.n	800d608 <__ssvfscanf_r+0x92c>
 800d606:	e53a      	b.n	800d07e <__ssvfscanf_r+0x3a2>
 800d608:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d60a:	6018      	str	r0, [r3, #0]
 800d60c:	809c      	strh	r4, [r3, #4]
 800d60e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d610:	1c72      	adds	r2, r6, #1
 800d612:	681b      	ldr	r3, [r3, #0]
 800d614:	00b6      	lsls	r6, r6, #2
 800d616:	50f5      	str	r5, [r6, r3]
 800d618:	2320      	movs	r3, #32
 800d61a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800d61c:	002e      	movs	r6, r5
 800d61e:	6b3d      	ldr	r5, [r7, #48]	; 0x30
 800d620:	80ca      	strh	r2, [r1, #6]
 800d622:	623b      	str	r3, [r7, #32]
 800d624:	002c      	movs	r4, r5
 800d626:	2118      	movs	r1, #24
 800d628:	2048      	movs	r0, #72	; 0x48
 800d62a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d62c:	1809      	adds	r1, r1, r0
 800d62e:	681b      	ldr	r3, [r3, #0]
 800d630:	19c9      	adds	r1, r1, r7
 800d632:	781a      	ldrb	r2, [r3, #0]
 800d634:	5c8a      	ldrb	r2, [r1, r2]
 800d636:	2a00      	cmp	r2, #0
 800d638:	d101      	bne.n	800d63e <__ssvfscanf_r+0x962>
 800d63a:	633d      	str	r5, [r7, #48]	; 0x30
 800d63c:	e031      	b.n	800d6a2 <__ssvfscanf_r+0x9c6>
 800d63e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d640:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d642:	6852      	ldr	r2, [r2, #4]
 800d644:	3a01      	subs	r2, #1
 800d646:	604a      	str	r2, [r1, #4]
 800d648:	1c5a      	adds	r2, r3, #1
 800d64a:	600a      	str	r2, [r1, #0]
 800d64c:	781b      	ldrb	r3, [r3, #0]
 800d64e:	1c6a      	adds	r2, r5, #1
 800d650:	633a      	str	r2, [r7, #48]	; 0x30
 800d652:	702b      	strb	r3, [r5, #0]
 800d654:	2e00      	cmp	r6, #0
 800d656:	d010      	beq.n	800d67a <__ssvfscanf_r+0x99e>
 800d658:	6a3b      	ldr	r3, [r7, #32]
 800d65a:	1b15      	subs	r5, r2, r4
 800d65c:	429d      	cmp	r5, r3
 800d65e:	d30c      	bcc.n	800d67a <__ssvfscanf_r+0x99e>
 800d660:	005b      	lsls	r3, r3, #1
 800d662:	0020      	movs	r0, r4
 800d664:	0019      	movs	r1, r3
 800d666:	623b      	str	r3, [r7, #32]
 800d668:	f001 fe32 	bl	800f2d0 <realloc>
 800d66c:	1e04      	subs	r4, r0, #0
 800d66e:	d101      	bne.n	800d674 <__ssvfscanf_r+0x998>
 800d670:	f7ff fc0a 	bl	800ce88 <__ssvfscanf_r+0x1ac>
 800d674:	1943      	adds	r3, r0, r5
 800d676:	633b      	str	r3, [r7, #48]	; 0x30
 800d678:	6030      	str	r0, [r6, #0]
 800d67a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d67c:	3b01      	subs	r3, #1
 800d67e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d680:	2b00      	cmp	r3, #0
 800d682:	d00e      	beq.n	800d6a2 <__ssvfscanf_r+0x9c6>
 800d684:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d686:	685b      	ldr	r3, [r3, #4]
 800d688:	2b00      	cmp	r3, #0
 800d68a:	dc2a      	bgt.n	800d6e2 <__ssvfscanf_r+0xa06>
 800d68c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d68e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800d690:	f002 fab8 	bl	800fc04 <__ssrefill_r>
 800d694:	2800      	cmp	r0, #0
 800d696:	d024      	beq.n	800d6e2 <__ssvfscanf_r+0xa06>
 800d698:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d69a:	42a3      	cmp	r3, r4
 800d69c:	d101      	bne.n	800d6a2 <__ssvfscanf_r+0x9c6>
 800d69e:	f7ff fbec 	bl	800ce7a <__ssvfscanf_r+0x19e>
 800d6a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d6a4:	1b1d      	subs	r5, r3, r4
 800d6a6:	42a3      	cmp	r3, r4
 800d6a8:	d101      	bne.n	800d6ae <__ssvfscanf_r+0x9d2>
 800d6aa:	f7ff fc14 	bl	800ced6 <__ssvfscanf_r+0x1fa>
 800d6ae:	2300      	movs	r3, #0
 800d6b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d6b2:	7013      	strb	r3, [r2, #0]
 800d6b4:	429e      	cmp	r6, r3
 800d6b6:	d009      	beq.n	800d6cc <__ssvfscanf_r+0x9f0>
 800d6b8:	6a3b      	ldr	r3, [r7, #32]
 800d6ba:	1c69      	adds	r1, r5, #1
 800d6bc:	428b      	cmp	r3, r1
 800d6be:	d905      	bls.n	800d6cc <__ssvfscanf_r+0x9f0>
 800d6c0:	6830      	ldr	r0, [r6, #0]
 800d6c2:	f001 fe05 	bl	800f2d0 <realloc>
 800d6c6:	2800      	cmp	r0, #0
 800d6c8:	d000      	beq.n	800d6cc <__ssvfscanf_r+0x9f0>
 800d6ca:	6030      	str	r0, [r6, #0]
 800d6cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6ce:	3301      	adds	r3, #1
 800d6d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d6d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d6d4:	195b      	adds	r3, r3, r5
 800d6d6:	63bb      	str	r3, [r7, #56]	; 0x38
 800d6d8:	69fb      	ldr	r3, [r7, #28]
 800d6da:	e477      	b.n	800cfcc <__ssvfscanf_r+0x2f0>
 800d6dc:	0016      	movs	r6, r2
 800d6de:	623a      	str	r2, [r7, #32]
 800d6e0:	e7a0      	b.n	800d624 <__ssvfscanf_r+0x948>
 800d6e2:	6b3d      	ldr	r5, [r7, #48]	; 0x30
 800d6e4:	e79f      	b.n	800d626 <__ssvfscanf_r+0x94a>
 800d6e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d6e8:	2b00      	cmp	r3, #0
 800d6ea:	d101      	bne.n	800d6f0 <__ssvfscanf_r+0xa14>
 800d6ec:	3b01      	subs	r3, #1
 800d6ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d6f0:	2210      	movs	r2, #16
 800d6f2:	2301      	movs	r3, #1
 800d6f4:	0034      	movs	r4, r6
 800d6f6:	4032      	ands	r2, r6
 800d6f8:	401c      	ands	r4, r3
 800d6fa:	61fa      	str	r2, [r7, #28]
 800d6fc:	421e      	tst	r6, r3
 800d6fe:	d100      	bne.n	800d702 <__ssvfscanf_r+0xa26>
 800d700:	e102      	b.n	800d908 <__ssvfscanf_r+0xc2c>
 800d702:	2a00      	cmp	r2, #0
 800d704:	d000      	beq.n	800d708 <__ssvfscanf_r+0xa2c>
 800d706:	e09f      	b.n	800d848 <__ssvfscanf_r+0xb6c>
 800d708:	2080      	movs	r0, #128	; 0x80
 800d70a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d70c:	cb10      	ldmia	r3!, {r4}
 800d70e:	60fb      	str	r3, [r7, #12]
 800d710:	4206      	tst	r6, r0
 800d712:	d100      	bne.n	800d716 <__ssvfscanf_r+0xa3a>
 800d714:	e0a1      	b.n	800d85a <__ssvfscanf_r+0xb7e>
 800d716:	2c00      	cmp	r4, #0
 800d718:	d100      	bne.n	800d71c <__ssvfscanf_r+0xa40>
 800d71a:	e4aa      	b.n	800d072 <__ssvfscanf_r+0x396>
 800d71c:	f7fb fc1e 	bl	8008f5c <malloc>
 800d720:	6338      	str	r0, [r7, #48]	; 0x30
 800d722:	2800      	cmp	r0, #0
 800d724:	d100      	bne.n	800d728 <__ssvfscanf_r+0xa4c>
 800d726:	e4a1      	b.n	800d06c <__ssvfscanf_r+0x390>
 800d728:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d72a:	6023      	str	r3, [r4, #0]
 800d72c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d72e:	88de      	ldrh	r6, [r3, #6]
 800d730:	889d      	ldrh	r5, [r3, #4]
 800d732:	42ae      	cmp	r6, r5
 800d734:	d310      	bcc.n	800d758 <__ssvfscanf_r+0xa7c>
 800d736:	4b72      	ldr	r3, [pc, #456]	; (800d900 <__ssvfscanf_r+0xc24>)
 800d738:	429d      	cmp	r5, r3
 800d73a:	d900      	bls.n	800d73e <__ssvfscanf_r+0xa62>
 800d73c:	e496      	b.n	800d06c <__ssvfscanf_r+0x390>
 800d73e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d740:	3508      	adds	r5, #8
 800d742:	b2ad      	uxth	r5, r5
 800d744:	6818      	ldr	r0, [r3, #0]
 800d746:	00a9      	lsls	r1, r5, #2
 800d748:	f001 fdc2 	bl	800f2d0 <realloc>
 800d74c:	2800      	cmp	r0, #0
 800d74e:	d100      	bne.n	800d752 <__ssvfscanf_r+0xa76>
 800d750:	e48c      	b.n	800d06c <__ssvfscanf_r+0x390>
 800d752:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d754:	6018      	str	r0, [r3, #0]
 800d756:	809d      	strh	r5, [r3, #4]
 800d758:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d75a:	1c72      	adds	r2, r6, #1
 800d75c:	681b      	ldr	r3, [r3, #0]
 800d75e:	00b6      	lsls	r6, r6, #2
 800d760:	50f4      	str	r4, [r6, r3]
 800d762:	2320      	movs	r3, #32
 800d764:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800d766:	0025      	movs	r5, r4
 800d768:	6b3c      	ldr	r4, [r7, #48]	; 0x30
 800d76a:	80ca      	strh	r2, [r1, #6]
 800d76c:	613b      	str	r3, [r7, #16]
 800d76e:	2300      	movs	r3, #0
 800d770:	623b      	str	r3, [r7, #32]
 800d772:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d774:	4a63      	ldr	r2, [pc, #396]	; (800d904 <__ssvfscanf_r+0xc28>)
 800d776:	681b      	ldr	r3, [r3, #0]
 800d778:	781b      	ldrb	r3, [r3, #0]
 800d77a:	5cd3      	ldrb	r3, [r2, r3]
 800d77c:	2208      	movs	r2, #8
 800d77e:	4213      	tst	r3, r2
 800d780:	d149      	bne.n	800d816 <__ssvfscanf_r+0xb3a>
 800d782:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d784:	2b00      	cmp	r3, #0
 800d786:	d046      	beq.n	800d816 <__ssvfscanf_r+0xb3a>
 800d788:	f7fc feb2 	bl	800a4f0 <__locale_mb_cur_max>
 800d78c:	6a3b      	ldr	r3, [r7, #32]
 800d78e:	4298      	cmp	r0, r3
 800d790:	d101      	bne.n	800d796 <__ssvfscanf_r+0xaba>
 800d792:	f7ff fb72 	bl	800ce7a <__ssvfscanf_r+0x19e>
 800d796:	6a3a      	ldr	r2, [r7, #32]
 800d798:	2048      	movs	r0, #72	; 0x48
 800d79a:	1c56      	adds	r6, r2, #1
 800d79c:	228c      	movs	r2, #140	; 0x8c
 800d79e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d7a0:	0052      	lsls	r2, r2, #1
 800d7a2:	681b      	ldr	r3, [r3, #0]
 800d7a4:	1812      	adds	r2, r2, r0
 800d7a6:	7819      	ldrb	r1, [r3, #0]
 800d7a8:	6a38      	ldr	r0, [r7, #32]
 800d7aa:	19d2      	adds	r2, r2, r7
 800d7ac:	5411      	strb	r1, [r2, r0]
 800d7ae:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d7b0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d7b2:	6852      	ldr	r2, [r2, #4]
 800d7b4:	3301      	adds	r3, #1
 800d7b6:	600b      	str	r3, [r1, #0]
 800d7b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7ba:	3a01      	subs	r2, #1
 800d7bc:	604a      	str	r2, [r1, #4]
 800d7be:	2b03      	cmp	r3, #3
 800d7c0:	d102      	bne.n	800d7c8 <__ssvfscanf_r+0xaec>
 800d7c2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d7c4:	2b04      	cmp	r3, #4
 800d7c6:	d007      	beq.n	800d7d8 <__ssvfscanf_r+0xafc>
 800d7c8:	2048      	movs	r0, #72	; 0x48
 800d7ca:	2310      	movs	r3, #16
 800d7cc:	181b      	adds	r3, r3, r0
 800d7ce:	2208      	movs	r2, #8
 800d7d0:	2100      	movs	r1, #0
 800d7d2:	19d8      	adds	r0, r3, r7
 800d7d4:	f7fc fe48 	bl	800a468 <memset>
 800d7d8:	2148      	movs	r1, #72	; 0x48
 800d7da:	2310      	movs	r3, #16
 800d7dc:	228c      	movs	r2, #140	; 0x8c
 800d7de:	185b      	adds	r3, r3, r1
 800d7e0:	0052      	lsls	r2, r2, #1
 800d7e2:	19db      	adds	r3, r3, r7
 800d7e4:	1852      	adds	r2, r2, r1
 800d7e6:	9300      	str	r3, [sp, #0]
 800d7e8:	0021      	movs	r1, r4
 800d7ea:	0033      	movs	r3, r6
 800d7ec:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800d7ee:	19d2      	adds	r2, r2, r7
 800d7f0:	f002 f908 	bl	800fa04 <_mbrtowc_r>
 800d7f4:	0003      	movs	r3, r0
 800d7f6:	62b8      	str	r0, [r7, #40]	; 0x28
 800d7f8:	3301      	adds	r3, #1
 800d7fa:	d101      	bne.n	800d800 <__ssvfscanf_r+0xb24>
 800d7fc:	f7ff fb3d 	bl	800ce7a <__ssvfscanf_r+0x19e>
 800d800:	2800      	cmp	r0, #0
 800d802:	d12f      	bne.n	800d864 <__ssvfscanf_r+0xb88>
 800d804:	6020      	str	r0, [r4, #0]
 800d806:	6820      	ldr	r0, [r4, #0]
 800d808:	f002 f91a 	bl	800fa40 <iswspace>
 800d80c:	6238      	str	r0, [r7, #32]
 800d80e:	2800      	cmp	r0, #0
 800d810:	d04a      	beq.n	800d8a8 <__ssvfscanf_r+0xbcc>
 800d812:	2e00      	cmp	r6, #0
 800d814:	d13c      	bne.n	800d890 <__ssvfscanf_r+0xbb4>
 800d816:	69fb      	ldr	r3, [r7, #28]
 800d818:	2b00      	cmp	r3, #0
 800d81a:	d000      	beq.n	800d81e <__ssvfscanf_r+0xb42>
 800d81c:	e640      	b.n	800d4a0 <__ssvfscanf_r+0x7c4>
 800d81e:	6023      	str	r3, [r4, #0]
 800d820:	2d00      	cmp	r5, #0
 800d822:	d100      	bne.n	800d826 <__ssvfscanf_r+0xb4a>
 800d824:	e639      	b.n	800d49a <__ssvfscanf_r+0x7be>
 800d826:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d828:	693a      	ldr	r2, [r7, #16]
 800d82a:	1ae4      	subs	r4, r4, r3
 800d82c:	10a3      	asrs	r3, r4, #2
 800d82e:	3301      	adds	r3, #1
 800d830:	429a      	cmp	r2, r3
 800d832:	d800      	bhi.n	800d836 <__ssvfscanf_r+0xb5a>
 800d834:	e631      	b.n	800d49a <__ssvfscanf_r+0x7be>
 800d836:	6828      	ldr	r0, [r5, #0]
 800d838:	1d21      	adds	r1, r4, #4
 800d83a:	f001 fd49 	bl	800f2d0 <realloc>
 800d83e:	2800      	cmp	r0, #0
 800d840:	d100      	bne.n	800d844 <__ssvfscanf_r+0xb68>
 800d842:	e62a      	b.n	800d49a <__ssvfscanf_r+0x7be>
 800d844:	6028      	str	r0, [r5, #0]
 800d846:	e628      	b.n	800d49a <__ssvfscanf_r+0x7be>
 800d848:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d84a:	60fb      	str	r3, [r7, #12]
 800d84c:	2300      	movs	r3, #0
 800d84e:	001d      	movs	r5, r3
 800d850:	613b      	str	r3, [r7, #16]
 800d852:	633b      	str	r3, [r7, #48]	; 0x30
 800d854:	334c      	adds	r3, #76	; 0x4c
 800d856:	18fc      	adds	r4, r7, r3
 800d858:	e789      	b.n	800d76e <__ssvfscanf_r+0xa92>
 800d85a:	69fb      	ldr	r3, [r7, #28]
 800d85c:	001d      	movs	r5, r3
 800d85e:	613b      	str	r3, [r7, #16]
 800d860:	633b      	str	r3, [r7, #48]	; 0x30
 800d862:	e784      	b.n	800d76e <__ssvfscanf_r+0xa92>
 800d864:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d866:	623e      	str	r6, [r7, #32]
 800d868:	3302      	adds	r3, #2
 800d86a:	d1cc      	bne.n	800d806 <__ssvfscanf_r+0xb2a>
 800d86c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d86e:	685b      	ldr	r3, [r3, #4]
 800d870:	2b00      	cmp	r3, #0
 800d872:	dd00      	ble.n	800d876 <__ssvfscanf_r+0xb9a>
 800d874:	e77d      	b.n	800d772 <__ssvfscanf_r+0xa96>
 800d876:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d878:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800d87a:	f002 f9c3 	bl	800fc04 <__ssrefill_r>
 800d87e:	2800      	cmp	r0, #0
 800d880:	d100      	bne.n	800d884 <__ssvfscanf_r+0xba8>
 800d882:	e776      	b.n	800d772 <__ssvfscanf_r+0xa96>
 800d884:	6a3b      	ldr	r3, [r7, #32]
 800d886:	2b00      	cmp	r3, #0
 800d888:	d001      	beq.n	800d88e <__ssvfscanf_r+0xbb2>
 800d88a:	f7ff faf6 	bl	800ce7a <__ssvfscanf_r+0x19e>
 800d88e:	e7c2      	b.n	800d816 <__ssvfscanf_r+0xb3a>
 800d890:	238c      	movs	r3, #140	; 0x8c
 800d892:	2248      	movs	r2, #72	; 0x48
 800d894:	005b      	lsls	r3, r3, #1
 800d896:	189b      	adds	r3, r3, r2
 800d898:	3e01      	subs	r6, #1
 800d89a:	19db      	adds	r3, r3, r7
 800d89c:	5cf1      	ldrb	r1, [r6, r3]
 800d89e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d8a0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800d8a2:	f002 f973 	bl	800fb8c <_sungetc_r>
 800d8a6:	e7b4      	b.n	800d812 <__ssvfscanf_r+0xb36>
 800d8a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d8aa:	199b      	adds	r3, r3, r6
 800d8ac:	63bb      	str	r3, [r7, #56]	; 0x38
 800d8ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8b0:	2b03      	cmp	r3, #3
 800d8b2:	d102      	bne.n	800d8ba <__ssvfscanf_r+0xbde>
 800d8b4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d8b6:	2b04      	cmp	r3, #4
 800d8b8:	d002      	beq.n	800d8c0 <__ssvfscanf_r+0xbe4>
 800d8ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d8bc:	3b01      	subs	r3, #1
 800d8be:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d8c0:	69fb      	ldr	r3, [r7, #28]
 800d8c2:	2b00      	cmp	r3, #0
 800d8c4:	d1d2      	bne.n	800d86c <__ssvfscanf_r+0xb90>
 800d8c6:	3404      	adds	r4, #4
 800d8c8:	2d00      	cmp	r5, #0
 800d8ca:	d016      	beq.n	800d8fa <__ssvfscanf_r+0xc1e>
 800d8cc:	69fa      	ldr	r2, [r7, #28]
 800d8ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8d0:	623a      	str	r2, [r7, #32]
 800d8d2:	693a      	ldr	r2, [r7, #16]
 800d8d4:	1ae6      	subs	r6, r4, r3
 800d8d6:	10b3      	asrs	r3, r6, #2
 800d8d8:	4293      	cmp	r3, r2
 800d8da:	d3c7      	bcc.n	800d86c <__ssvfscanf_r+0xb90>
 800d8dc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d8de:	00d1      	lsls	r1, r2, #3
 800d8e0:	f001 fcf6 	bl	800f2d0 <realloc>
 800d8e4:	6338      	str	r0, [r7, #48]	; 0x30
 800d8e6:	2800      	cmp	r0, #0
 800d8e8:	d101      	bne.n	800d8ee <__ssvfscanf_r+0xc12>
 800d8ea:	f7ff fbbf 	bl	800d06c <__ssvfscanf_r+0x390>
 800d8ee:	693b      	ldr	r3, [r7, #16]
 800d8f0:	1984      	adds	r4, r0, r6
 800d8f2:	005b      	lsls	r3, r3, #1
 800d8f4:	6028      	str	r0, [r5, #0]
 800d8f6:	613b      	str	r3, [r7, #16]
 800d8f8:	e7b8      	b.n	800d86c <__ssvfscanf_r+0xb90>
 800d8fa:	623d      	str	r5, [r7, #32]
 800d8fc:	e7b6      	b.n	800d86c <__ssvfscanf_r+0xb90>
 800d8fe:	46c0      	nop			; (mov r8, r8)
 800d900:	0000fff6 	.word	0x0000fff6
 800d904:	08012a51 	.word	0x08012a51
 800d908:	69fb      	ldr	r3, [r7, #28]
 800d90a:	2b00      	cmp	r3, #0
 800d90c:	d01c      	beq.n	800d948 <__ssvfscanf_r+0xc6c>
 800d90e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d910:	49bf      	ldr	r1, [pc, #764]	; (800dc10 <__ssvfscanf_r+0xf34>)
 800d912:	681b      	ldr	r3, [r3, #0]
 800d914:	781a      	ldrb	r2, [r3, #0]
 800d916:	5c8a      	ldrb	r2, [r1, r2]
 800d918:	2108      	movs	r1, #8
 800d91a:	420a      	tst	r2, r1
 800d91c:	d000      	beq.n	800d920 <__ssvfscanf_r+0xc44>
 800d91e:	e4a1      	b.n	800d264 <__ssvfscanf_r+0x588>
 800d920:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d922:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d924:	6852      	ldr	r2, [r2, #4]
 800d926:	3301      	adds	r3, #1
 800d928:	600b      	str	r3, [r1, #0]
 800d92a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d92c:	3a01      	subs	r2, #1
 800d92e:	3401      	adds	r4, #1
 800d930:	604a      	str	r2, [r1, #4]
 800d932:	429c      	cmp	r4, r3
 800d934:	d100      	bne.n	800d938 <__ssvfscanf_r+0xc5c>
 800d936:	e495      	b.n	800d264 <__ssvfscanf_r+0x588>
 800d938:	2a00      	cmp	r2, #0
 800d93a:	dce8      	bgt.n	800d90e <__ssvfscanf_r+0xc32>
 800d93c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800d93e:	f002 f961 	bl	800fc04 <__ssrefill_r>
 800d942:	2800      	cmp	r0, #0
 800d944:	d0e3      	beq.n	800d90e <__ssvfscanf_r+0xc32>
 800d946:	e48d      	b.n	800d264 <__ssvfscanf_r+0x588>
 800d948:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d94a:	0032      	movs	r2, r6
 800d94c:	cb10      	ldmia	r3!, {r4}
 800d94e:	61fb      	str	r3, [r7, #28]
 800d950:	2380      	movs	r3, #128	; 0x80
 800d952:	401a      	ands	r2, r3
 800d954:	421e      	tst	r6, r3
 800d956:	d039      	beq.n	800d9cc <__ssvfscanf_r+0xcf0>
 800d958:	2c00      	cmp	r4, #0
 800d95a:	d101      	bne.n	800d960 <__ssvfscanf_r+0xc84>
 800d95c:	f7ff fabb 	bl	800ced6 <__ssvfscanf_r+0x1fa>
 800d960:	2020      	movs	r0, #32
 800d962:	f7fb fafb 	bl	8008f5c <malloc>
 800d966:	6338      	str	r0, [r7, #48]	; 0x30
 800d968:	2800      	cmp	r0, #0
 800d96a:	d101      	bne.n	800d970 <__ssvfscanf_r+0xc94>
 800d96c:	f7ff fa8c 	bl	800ce88 <__ssvfscanf_r+0x1ac>
 800d970:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d972:	6020      	str	r0, [r4, #0]
 800d974:	88de      	ldrh	r6, [r3, #6]
 800d976:	889d      	ldrh	r5, [r3, #4]
 800d978:	6818      	ldr	r0, [r3, #0]
 800d97a:	42ae      	cmp	r6, r5
 800d97c:	d310      	bcc.n	800d9a0 <__ssvfscanf_r+0xcc4>
 800d97e:	4ba5      	ldr	r3, [pc, #660]	; (800dc14 <__ssvfscanf_r+0xf38>)
 800d980:	429d      	cmp	r5, r3
 800d982:	d901      	bls.n	800d988 <__ssvfscanf_r+0xcac>
 800d984:	f7ff fb7b 	bl	800d07e <__ssvfscanf_r+0x3a2>
 800d988:	3508      	adds	r5, #8
 800d98a:	b2ad      	uxth	r5, r5
 800d98c:	00a9      	lsls	r1, r5, #2
 800d98e:	f001 fc9f 	bl	800f2d0 <realloc>
 800d992:	2800      	cmp	r0, #0
 800d994:	d101      	bne.n	800d99a <__ssvfscanf_r+0xcbe>
 800d996:	f7ff fb72 	bl	800d07e <__ssvfscanf_r+0x3a2>
 800d99a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d99c:	6018      	str	r0, [r3, #0]
 800d99e:	809d      	strh	r5, [r3, #4]
 800d9a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d9a2:	1c72      	adds	r2, r6, #1
 800d9a4:	681b      	ldr	r3, [r3, #0]
 800d9a6:	00b6      	lsls	r6, r6, #2
 800d9a8:	50f4      	str	r4, [r6, r3]
 800d9aa:	2320      	movs	r3, #32
 800d9ac:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800d9ae:	0026      	movs	r6, r4
 800d9b0:	80ca      	strh	r2, [r1, #6]
 800d9b2:	6b3c      	ldr	r4, [r7, #48]	; 0x30
 800d9b4:	633b      	str	r3, [r7, #48]	; 0x30
 800d9b6:	0025      	movs	r5, r4
 800d9b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d9ba:	4995      	ldr	r1, [pc, #596]	; (800dc10 <__ssvfscanf_r+0xf34>)
 800d9bc:	681b      	ldr	r3, [r3, #0]
 800d9be:	781a      	ldrb	r2, [r3, #0]
 800d9c0:	5c8a      	ldrb	r2, [r1, r2]
 800d9c2:	2108      	movs	r1, #8
 800d9c4:	420a      	tst	r2, r1
 800d9c6:	d004      	beq.n	800d9d2 <__ssvfscanf_r+0xcf6>
 800d9c8:	623c      	str	r4, [r7, #32]
 800d9ca:	e031      	b.n	800da30 <__ssvfscanf_r+0xd54>
 800d9cc:	0016      	movs	r6, r2
 800d9ce:	633a      	str	r2, [r7, #48]	; 0x30
 800d9d0:	e7f1      	b.n	800d9b6 <__ssvfscanf_r+0xcda>
 800d9d2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d9d4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d9d6:	6852      	ldr	r2, [r2, #4]
 800d9d8:	3a01      	subs	r2, #1
 800d9da:	604a      	str	r2, [r1, #4]
 800d9dc:	1c5a      	adds	r2, r3, #1
 800d9de:	600a      	str	r2, [r1, #0]
 800d9e0:	781b      	ldrb	r3, [r3, #0]
 800d9e2:	1c62      	adds	r2, r4, #1
 800d9e4:	623a      	str	r2, [r7, #32]
 800d9e6:	7023      	strb	r3, [r4, #0]
 800d9e8:	2e00      	cmp	r6, #0
 800d9ea:	d010      	beq.n	800da0e <__ssvfscanf_r+0xd32>
 800d9ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9ee:	1b54      	subs	r4, r2, r5
 800d9f0:	429c      	cmp	r4, r3
 800d9f2:	d30c      	bcc.n	800da0e <__ssvfscanf_r+0xd32>
 800d9f4:	005b      	lsls	r3, r3, #1
 800d9f6:	0028      	movs	r0, r5
 800d9f8:	0019      	movs	r1, r3
 800d9fa:	633b      	str	r3, [r7, #48]	; 0x30
 800d9fc:	f001 fc68 	bl	800f2d0 <realloc>
 800da00:	1e05      	subs	r5, r0, #0
 800da02:	d101      	bne.n	800da08 <__ssvfscanf_r+0xd2c>
 800da04:	f7ff fa40 	bl	800ce88 <__ssvfscanf_r+0x1ac>
 800da08:	1903      	adds	r3, r0, r4
 800da0a:	623b      	str	r3, [r7, #32]
 800da0c:	6030      	str	r0, [r6, #0]
 800da0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800da10:	3b01      	subs	r3, #1
 800da12:	63fb      	str	r3, [r7, #60]	; 0x3c
 800da14:	2b00      	cmp	r3, #0
 800da16:	d00b      	beq.n	800da30 <__ssvfscanf_r+0xd54>
 800da18:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800da1a:	685b      	ldr	r3, [r3, #4]
 800da1c:	2b00      	cmp	r3, #0
 800da1e:	dd01      	ble.n	800da24 <__ssvfscanf_r+0xd48>
 800da20:	6a3c      	ldr	r4, [r7, #32]
 800da22:	e7c9      	b.n	800d9b8 <__ssvfscanf_r+0xcdc>
 800da24:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800da26:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800da28:	f002 f8ec 	bl	800fc04 <__ssrefill_r>
 800da2c:	2800      	cmp	r0, #0
 800da2e:	d0f7      	beq.n	800da20 <__ssvfscanf_r+0xd44>
 800da30:	2300      	movs	r3, #0
 800da32:	6a3a      	ldr	r2, [r7, #32]
 800da34:	7013      	strb	r3, [r2, #0]
 800da36:	1b55      	subs	r5, r2, r5
 800da38:	2e00      	cmp	r6, #0
 800da3a:	d009      	beq.n	800da50 <__ssvfscanf_r+0xd74>
 800da3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da3e:	1c69      	adds	r1, r5, #1
 800da40:	428b      	cmp	r3, r1
 800da42:	d905      	bls.n	800da50 <__ssvfscanf_r+0xd74>
 800da44:	6830      	ldr	r0, [r6, #0]
 800da46:	f001 fc43 	bl	800f2d0 <realloc>
 800da4a:	2800      	cmp	r0, #0
 800da4c:	d000      	beq.n	800da50 <__ssvfscanf_r+0xd74>
 800da4e:	6030      	str	r0, [r6, #0]
 800da50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da52:	195b      	adds	r3, r3, r5
 800da54:	63bb      	str	r3, [r7, #56]	; 0x38
 800da56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da58:	3301      	adds	r3, #1
 800da5a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800da5c:	e63c      	b.n	800d6d8 <__ssvfscanf_r+0x9fc>
 800da5e:	22ae      	movs	r2, #174	; 0xae
 800da60:	2100      	movs	r1, #0
 800da62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800da64:	0052      	lsls	r2, r2, #1
 800da66:	3b01      	subs	r3, #1
 800da68:	6239      	str	r1, [r7, #32]
 800da6a:	4293      	cmp	r3, r2
 800da6c:	d906      	bls.n	800da7c <__ssvfscanf_r+0xda0>
 800da6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800da70:	3b5e      	subs	r3, #94	; 0x5e
 800da72:	3bff      	subs	r3, #255	; 0xff
 800da74:	623b      	str	r3, [r7, #32]
 800da76:	235e      	movs	r3, #94	; 0x5e
 800da78:	33ff      	adds	r3, #255	; 0xff
 800da7a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800da7c:	24d8      	movs	r4, #216	; 0xd8
 800da7e:	2300      	movs	r3, #0
 800da80:	2248      	movs	r2, #72	; 0x48
 800da82:	0124      	lsls	r4, r4, #4
 800da84:	4334      	orrs	r4, r6
 800da86:	2680      	movs	r6, #128	; 0x80
 800da88:	61fb      	str	r3, [r7, #28]
 800da8a:	3319      	adds	r3, #25
 800da8c:	33ff      	adds	r3, #255	; 0xff
 800da8e:	189b      	adds	r3, r3, r2
 800da90:	19dd      	adds	r5, r3, r7
 800da92:	00b6      	lsls	r6, r6, #2
 800da94:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800da96:	681a      	ldr	r2, [r3, #0]
 800da98:	7813      	ldrb	r3, [r2, #0]
 800da9a:	2b39      	cmp	r3, #57	; 0x39
 800da9c:	d80f      	bhi.n	800dabe <__ssvfscanf_r+0xde2>
 800da9e:	2b2a      	cmp	r3, #42	; 0x2a
 800daa0:	d91b      	bls.n	800dada <__ssvfscanf_r+0xdfe>
 800daa2:	0018      	movs	r0, r3
 800daa4:	382b      	subs	r0, #43	; 0x2b
 800daa6:	280e      	cmp	r0, #14
 800daa8:	d817      	bhi.n	800dada <__ssvfscanf_r+0xdfe>
 800daaa:	f7f2 fb33 	bl	8000114 <__gnu_thumb1_case_uqi>
 800daae:	168f      	.short	0x168f
 800dab0:	5416168f 	.word	0x5416168f
 800dab4:	80808080 	.word	0x80808080
 800dab8:	87808080 	.word	0x87808080
 800dabc:	87          	.byte	0x87
 800dabd:	00          	.byte	0x00
 800dabe:	2b66      	cmp	r3, #102	; 0x66
 800dac0:	d83a      	bhi.n	800db38 <__ssvfscanf_r+0xe5c>
 800dac2:	2b60      	cmp	r3, #96	; 0x60
 800dac4:	d803      	bhi.n	800dace <__ssvfscanf_r+0xdf2>
 800dac6:	2b46      	cmp	r3, #70	; 0x46
 800dac8:	d805      	bhi.n	800dad6 <__ssvfscanf_r+0xdfa>
 800daca:	2b40      	cmp	r3, #64	; 0x40
 800dacc:	d905      	bls.n	800dada <__ssvfscanf_r+0xdfe>
 800dace:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800dad0:	290a      	cmp	r1, #10
 800dad2:	dc71      	bgt.n	800dbb8 <__ssvfscanf_r+0xedc>
 800dad4:	e001      	b.n	800dada <__ssvfscanf_r+0xdfe>
 800dad6:	2b58      	cmp	r3, #88	; 0x58
 800dad8:	d030      	beq.n	800db3c <__ssvfscanf_r+0xe60>
 800dada:	05e3      	lsls	r3, r4, #23
 800dadc:	d515      	bpl.n	800db0a <__ssvfscanf_r+0xe2e>
 800dade:	238c      	movs	r3, #140	; 0x8c
 800dae0:	2248      	movs	r2, #72	; 0x48
 800dae2:	005b      	lsls	r3, r3, #1
 800dae4:	189b      	adds	r3, r3, r2
 800dae6:	19db      	adds	r3, r3, r7
 800dae8:	429d      	cmp	r5, r3
 800daea:	d905      	bls.n	800daf8 <__ssvfscanf_r+0xe1c>
 800daec:	3d01      	subs	r5, #1
 800daee:	7829      	ldrb	r1, [r5, #0]
 800daf0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800daf2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800daf4:	f002 f84a 	bl	800fb8c <_sungetc_r>
 800daf8:	238c      	movs	r3, #140	; 0x8c
 800dafa:	2248      	movs	r2, #72	; 0x48
 800dafc:	005b      	lsls	r3, r3, #1
 800dafe:	189b      	adds	r3, r3, r2
 800db00:	19db      	adds	r3, r3, r7
 800db02:	429d      	cmp	r5, r3
 800db04:	d101      	bne.n	800db0a <__ssvfscanf_r+0xe2e>
 800db06:	f7ff f9e6 	bl	800ced6 <__ssvfscanf_r+0x1fa>
 800db0a:	2310      	movs	r3, #16
 800db0c:	0022      	movs	r2, r4
 800db0e:	401a      	ands	r2, r3
 800db10:	421c      	tst	r4, r3
 800db12:	d171      	bne.n	800dbf8 <__ssvfscanf_r+0xf1c>
 800db14:	218c      	movs	r1, #140	; 0x8c
 800db16:	2048      	movs	r0, #72	; 0x48
 800db18:	0049      	lsls	r1, r1, #1
 800db1a:	1809      	adds	r1, r1, r0
 800db1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db1e:	697e      	ldr	r6, [r7, #20]
 800db20:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800db22:	19c9      	adds	r1, r1, r7
 800db24:	702a      	strb	r2, [r5, #0]
 800db26:	47b0      	blx	r6
 800db28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db2a:	1d1e      	adds	r6, r3, #4
 800db2c:	06a3      	lsls	r3, r4, #26
 800db2e:	d559      	bpl.n	800dbe4 <__ssvfscanf_r+0xf08>
 800db30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db32:	681b      	ldr	r3, [r3, #0]
 800db34:	6018      	str	r0, [r3, #0]
 800db36:	e05b      	b.n	800dbf0 <__ssvfscanf_r+0xf14>
 800db38:	2b78      	cmp	r3, #120	; 0x78
 800db3a:	d1ce      	bne.n	800dada <__ssvfscanf_r+0xdfe>
 800db3c:	21c0      	movs	r1, #192	; 0xc0
 800db3e:	00c9      	lsls	r1, r1, #3
 800db40:	4021      	ands	r1, r4
 800db42:	42b1      	cmp	r1, r6
 800db44:	d1c9      	bne.n	800dada <__ssvfscanf_r+0xdfe>
 800db46:	4934      	ldr	r1, [pc, #208]	; (800dc18 <__ssvfscanf_r+0xf3c>)
 800db48:	4021      	ands	r1, r4
 800db4a:	24a0      	movs	r4, #160	; 0xa0
 800db4c:	00e4      	lsls	r4, r4, #3
 800db4e:	430c      	orrs	r4, r1
 800db50:	2110      	movs	r1, #16
 800db52:	6279      	str	r1, [r7, #36]	; 0x24
 800db54:	e00b      	b.n	800db6e <__ssvfscanf_r+0xe92>
 800db56:	0521      	lsls	r1, r4, #20
 800db58:	d509      	bpl.n	800db6e <__ssvfscanf_r+0xe92>
 800db5a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800db5c:	2900      	cmp	r1, #0
 800db5e:	d102      	bne.n	800db66 <__ssvfscanf_r+0xe8a>
 800db60:	3108      	adds	r1, #8
 800db62:	4334      	orrs	r4, r6
 800db64:	6279      	str	r1, [r7, #36]	; 0x24
 800db66:	0561      	lsls	r1, r4, #21
 800db68:	d504      	bpl.n	800db74 <__ssvfscanf_r+0xe98>
 800db6a:	492c      	ldr	r1, [pc, #176]	; (800dc1c <__ssvfscanf_r+0xf40>)
 800db6c:	400c      	ands	r4, r1
 800db6e:	702b      	strb	r3, [r5, #0]
 800db70:	3501      	adds	r5, #1
 800db72:	e00c      	b.n	800db8e <__ssvfscanf_r+0xeb2>
 800db74:	4b2a      	ldr	r3, [pc, #168]	; (800dc20 <__ssvfscanf_r+0xf44>)
 800db76:	401c      	ands	r4, r3
 800db78:	6a3b      	ldr	r3, [r7, #32]
 800db7a:	2b00      	cmp	r3, #0
 800db7c:	d004      	beq.n	800db88 <__ssvfscanf_r+0xeac>
 800db7e:	3b01      	subs	r3, #1
 800db80:	623b      	str	r3, [r7, #32]
 800db82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800db84:	3301      	adds	r3, #1
 800db86:	63fb      	str	r3, [r7, #60]	; 0x3c
 800db88:	69fb      	ldr	r3, [r7, #28]
 800db8a:	3301      	adds	r3, #1
 800db8c:	61fb      	str	r3, [r7, #28]
 800db8e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800db90:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800db92:	685b      	ldr	r3, [r3, #4]
 800db94:	3b01      	subs	r3, #1
 800db96:	604b      	str	r3, [r1, #4]
 800db98:	2b00      	cmp	r3, #0
 800db9a:	dd1c      	ble.n	800dbd6 <__ssvfscanf_r+0xefa>
 800db9c:	3201      	adds	r2, #1
 800db9e:	600a      	str	r2, [r1, #0]
 800dba0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dba2:	3b01      	subs	r3, #1
 800dba4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800dba6:	2b00      	cmp	r3, #0
 800dba8:	d000      	beq.n	800dbac <__ssvfscanf_r+0xed0>
 800dbaa:	e773      	b.n	800da94 <__ssvfscanf_r+0xdb8>
 800dbac:	e795      	b.n	800dada <__ssvfscanf_r+0xdfe>
 800dbae:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800dbb0:	491c      	ldr	r1, [pc, #112]	; (800dc24 <__ssvfscanf_r+0xf48>)
 800dbb2:	0040      	lsls	r0, r0, #1
 800dbb4:	5e41      	ldrsh	r1, [r0, r1]
 800dbb6:	6279      	str	r1, [r7, #36]	; 0x24
 800dbb8:	491b      	ldr	r1, [pc, #108]	; (800dc28 <__ssvfscanf_r+0xf4c>)
 800dbba:	e7d7      	b.n	800db6c <__ssvfscanf_r+0xe90>
 800dbbc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800dbbe:	4919      	ldr	r1, [pc, #100]	; (800dc24 <__ssvfscanf_r+0xf48>)
 800dbc0:	0040      	lsls	r0, r0, #1
 800dbc2:	5e41      	ldrsh	r1, [r0, r1]
 800dbc4:	6279      	str	r1, [r7, #36]	; 0x24
 800dbc6:	2908      	cmp	r1, #8
 800dbc8:	dcf6      	bgt.n	800dbb8 <__ssvfscanf_r+0xedc>
 800dbca:	e786      	b.n	800dada <__ssvfscanf_r+0xdfe>
 800dbcc:	2180      	movs	r1, #128	; 0x80
 800dbce:	420c      	tst	r4, r1
 800dbd0:	d083      	beq.n	800dada <__ssvfscanf_r+0xdfe>
 800dbd2:	438c      	bics	r4, r1
 800dbd4:	e7cb      	b.n	800db6e <__ssvfscanf_r+0xe92>
 800dbd6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800dbd8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800dbda:	f002 f813 	bl	800fc04 <__ssrefill_r>
 800dbde:	2800      	cmp	r0, #0
 800dbe0:	d0de      	beq.n	800dba0 <__ssvfscanf_r+0xec4>
 800dbe2:	e77a      	b.n	800dada <__ssvfscanf_r+0xdfe>
 800dbe4:	2308      	movs	r3, #8
 800dbe6:	421c      	tst	r4, r3
 800dbe8:	d020      	beq.n	800dc2c <__ssvfscanf_r+0xf50>
 800dbea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbec:	681b      	ldr	r3, [r3, #0]
 800dbee:	7018      	strb	r0, [r3, #0]
 800dbf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dbf2:	633e      	str	r6, [r7, #48]	; 0x30
 800dbf4:	3301      	adds	r3, #1
 800dbf6:	62fb      	str	r3, [r7, #44]	; 0x2c
 800dbf8:	238c      	movs	r3, #140	; 0x8c
 800dbfa:	2248      	movs	r2, #72	; 0x48
 800dbfc:	005b      	lsls	r3, r3, #1
 800dbfe:	189b      	adds	r3, r3, r2
 800dc00:	19db      	adds	r3, r3, r7
 800dc02:	1aed      	subs	r5, r5, r3
 800dc04:	69fb      	ldr	r3, [r7, #28]
 800dc06:	18ed      	adds	r5, r5, r3
 800dc08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc0a:	195b      	adds	r3, r3, r5
 800dc0c:	f7ff f92d 	bl	800ce6a <__ssvfscanf_r+0x18e>
 800dc10:	08012a51 	.word	0x08012a51
 800dc14:	0000fff6 	.word	0x0000fff6
 800dc18:	fffffdff 	.word	0xfffffdff
 800dc1c:	fffffa7f 	.word	0xfffffa7f
 800dc20:	fffffc7f 	.word	0xfffffc7f
 800dc24:	08012d7e 	.word	0x08012d7e
 800dc28:	fffff47f 	.word	0xfffff47f
 800dc2c:	0763      	lsls	r3, r4, #29
 800dc2e:	d503      	bpl.n	800dc38 <__ssvfscanf_r+0xf5c>
 800dc30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc32:	681b      	ldr	r3, [r3, #0]
 800dc34:	8018      	strh	r0, [r3, #0]
 800dc36:	e7db      	b.n	800dbf0 <__ssvfscanf_r+0xf14>
 800dc38:	2301      	movs	r3, #1
 800dc3a:	0022      	movs	r2, r4
 800dc3c:	401a      	ands	r2, r3
 800dc3e:	421c      	tst	r4, r3
 800dc40:	d000      	beq.n	800dc44 <__ssvfscanf_r+0xf68>
 800dc42:	e775      	b.n	800db30 <__ssvfscanf_r+0xe54>
 800dc44:	07a4      	lsls	r4, r4, #30
 800dc46:	d400      	bmi.n	800dc4a <__ssvfscanf_r+0xf6e>
 800dc48:	e772      	b.n	800db30 <__ssvfscanf_r+0xe54>
 800dc4a:	4ba8      	ldr	r3, [pc, #672]	; (800deec <__ssvfscanf_r+0x1210>)
 800dc4c:	6979      	ldr	r1, [r7, #20]
 800dc4e:	4299      	cmp	r1, r3
 800dc50:	d10c      	bne.n	800dc6c <__ssvfscanf_r+0xf90>
 800dc52:	218c      	movs	r1, #140	; 0x8c
 800dc54:	2048      	movs	r0, #72	; 0x48
 800dc56:	0049      	lsls	r1, r1, #1
 800dc58:	1809      	adds	r1, r1, r0
 800dc5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc5c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800dc5e:	19c9      	adds	r1, r1, r7
 800dc60:	f001 fecc 	bl	800f9fc <_strtoull_r>
 800dc64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc66:	681b      	ldr	r3, [r3, #0]
 800dc68:	c303      	stmia	r3!, {r0, r1}
 800dc6a:	e7c1      	b.n	800dbf0 <__ssvfscanf_r+0xf14>
 800dc6c:	218c      	movs	r1, #140	; 0x8c
 800dc6e:	2048      	movs	r0, #72	; 0x48
 800dc70:	0049      	lsls	r1, r1, #1
 800dc72:	1809      	adds	r1, r1, r0
 800dc74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc76:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800dc78:	19c9      	adds	r1, r1, r7
 800dc7a:	f001 fe0d 	bl	800f898 <_strtoll_r>
 800dc7e:	e7f1      	b.n	800dc64 <__ssvfscanf_r+0xf88>
 800dc80:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800dc82:	f000 fb9f 	bl	800e3c4 <_localeconv_r>
 800dc86:	22ae      	movs	r2, #174	; 0xae
 800dc88:	2100      	movs	r1, #0
 800dc8a:	6803      	ldr	r3, [r0, #0]
 800dc8c:	0052      	lsls	r2, r2, #1
 800dc8e:	603b      	str	r3, [r7, #0]
 800dc90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dc92:	60f9      	str	r1, [r7, #12]
 800dc94:	3b01      	subs	r3, #1
 800dc96:	4293      	cmp	r3, r2
 800dc98:	d906      	bls.n	800dca8 <__ssvfscanf_r+0xfcc>
 800dc9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dc9c:	3b5e      	subs	r3, #94	; 0x5e
 800dc9e:	3bff      	subs	r3, #255	; 0xff
 800dca0:	60fb      	str	r3, [r7, #12]
 800dca2:	235e      	movs	r3, #94	; 0x5e
 800dca4:	33ff      	adds	r3, #255	; 0xff
 800dca6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800dca8:	23f0      	movs	r3, #240	; 0xf0
 800dcaa:	00db      	lsls	r3, r3, #3
 800dcac:	431e      	orrs	r6, r3
 800dcae:	238c      	movs	r3, #140	; 0x8c
 800dcb0:	2248      	movs	r2, #72	; 0x48
 800dcb2:	2400      	movs	r4, #0
 800dcb4:	005b      	lsls	r3, r3, #1
 800dcb6:	189b      	adds	r3, r3, r2
 800dcb8:	623c      	str	r4, [r7, #32]
 800dcba:	607c      	str	r4, [r7, #4]
 800dcbc:	60bc      	str	r4, [r7, #8]
 800dcbe:	61fc      	str	r4, [r7, #28]
 800dcc0:	613c      	str	r4, [r7, #16]
 800dcc2:	19dd      	adds	r5, r3, r7
 800dcc4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dcc6:	681b      	ldr	r3, [r3, #0]
 800dcc8:	781a      	ldrb	r2, [r3, #0]
 800dcca:	0010      	movs	r0, r2
 800dccc:	382b      	subs	r0, #43	; 0x2b
 800dcce:	284e      	cmp	r0, #78	; 0x4e
 800dcd0:	d900      	bls.n	800dcd4 <__ssvfscanf_r+0xff8>
 800dcd2:	e133      	b.n	800df3c <__ssvfscanf_r+0x1260>
 800dcd4:	f7f2 fa28 	bl	8000128 <__gnu_thumb1_case_uhi>
 800dcd8:	0132009b 	.word	0x0132009b
 800dcdc:	0132009b 	.word	0x0132009b
 800dce0:	004f0132 	.word	0x004f0132
 800dce4:	00720072 	.word	0x00720072
 800dce8:	00720072 	.word	0x00720072
 800dcec:	00720072 	.word	0x00720072
 800dcf0:	00720072 	.word	0x00720072
 800dcf4:	01320072 	.word	0x01320072
 800dcf8:	01320132 	.word	0x01320132
 800dcfc:	01320132 	.word	0x01320132
 800dd00:	01320132 	.word	0x01320132
 800dd04:	007b00bc 	.word	0x007b00bc
 800dd08:	007b007b 	.word	0x007b007b
 800dd0c:	00f7012f 	.word	0x00f7012f
 800dd10:	01320132 	.word	0x01320132
 800dd14:	013200e3 	.word	0x013200e3
 800dd18:	01320132 	.word	0x01320132
 800dd1c:	00a00132 	.word	0x00a00132
 800dd20:	01120132 	.word	0x01120132
 800dd24:	01320132 	.word	0x01320132
 800dd28:	01010132 	.word	0x01010132
 800dd2c:	01320132 	.word	0x01320132
 800dd30:	00820132 	.word	0x00820132
 800dd34:	01320105 	.word	0x01320105
 800dd38:	01320132 	.word	0x01320132
 800dd3c:	01320132 	.word	0x01320132
 800dd40:	01320132 	.word	0x01320132
 800dd44:	007b00bc 	.word	0x007b00bc
 800dd48:	007b007b 	.word	0x007b007b
 800dd4c:	00f7012f 	.word	0x00f7012f
 800dd50:	01320132 	.word	0x01320132
 800dd54:	013200e3 	.word	0x013200e3
 800dd58:	01320132 	.word	0x01320132
 800dd5c:	00a00132 	.word	0x00a00132
 800dd60:	01120132 	.word	0x01120132
 800dd64:	01320132 	.word	0x01320132
 800dd68:	01010132 	.word	0x01010132
 800dd6c:	01320132 	.word	0x01320132
 800dd70:	00820132 	.word	0x00820132
 800dd74:	0105      	.short	0x0105
 800dd76:	05f1      	lsls	r1, r6, #23
 800dd78:	d520      	bpl.n	800ddbc <__ssvfscanf_r+0x10e0>
 800dd7a:	2280      	movs	r2, #128	; 0x80
 800dd7c:	4396      	bics	r6, r2
 800dd7e:	69fa      	ldr	r2, [r7, #28]
 800dd80:	3201      	adds	r2, #1
 800dd82:	61fa      	str	r2, [r7, #28]
 800dd84:	68fa      	ldr	r2, [r7, #12]
 800dd86:	2a00      	cmp	r2, #0
 800dd88:	d004      	beq.n	800dd94 <__ssvfscanf_r+0x10b8>
 800dd8a:	3a01      	subs	r2, #1
 800dd8c:	60fa      	str	r2, [r7, #12]
 800dd8e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800dd90:	3201      	adds	r2, #1
 800dd92:	63fa      	str	r2, [r7, #60]	; 0x3c
 800dd94:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800dd96:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800dd98:	3a01      	subs	r2, #1
 800dd9a:	63fa      	str	r2, [r7, #60]	; 0x3c
 800dd9c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800dd9e:	3201      	adds	r2, #1
 800dda0:	63ba      	str	r2, [r7, #56]	; 0x38
 800dda2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800dda4:	6852      	ldr	r2, [r2, #4]
 800dda6:	3a01      	subs	r2, #1
 800dda8:	604a      	str	r2, [r1, #4]
 800ddaa:	2a00      	cmp	r2, #0
 800ddac:	dc00      	bgt.n	800ddb0 <__ssvfscanf_r+0x10d4>
 800ddae:	e0d6      	b.n	800df5e <__ssvfscanf_r+0x1282>
 800ddb0:	3301      	adds	r3, #1
 800ddb2:	600b      	str	r3, [r1, #0]
 800ddb4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ddb6:	2b00      	cmp	r3, #0
 800ddb8:	d184      	bne.n	800dcc4 <__ssvfscanf_r+0xfe8>
 800ddba:	e057      	b.n	800de6c <__ssvfscanf_r+0x1190>
 800ddbc:	6a39      	ldr	r1, [r7, #32]
 800ddbe:	1909      	adds	r1, r1, r4
 800ddc0:	2900      	cmp	r1, #0
 800ddc2:	d153      	bne.n	800de6c <__ssvfscanf_r+0x1190>
 800ddc4:	494a      	ldr	r1, [pc, #296]	; (800def0 <__ssvfscanf_r+0x1214>)
 800ddc6:	400e      	ands	r6, r1
 800ddc8:	702a      	strb	r2, [r5, #0]
 800ddca:	3501      	adds	r5, #1
 800ddcc:	e7e2      	b.n	800dd94 <__ssvfscanf_r+0x10b8>
 800ddce:	0531      	lsls	r1, r6, #20
 800ddd0:	d54c      	bpl.n	800de6c <__ssvfscanf_r+0x1190>
 800ddd2:	6a39      	ldr	r1, [r7, #32]
 800ddd4:	1909      	adds	r1, r1, r4
 800ddd6:	2900      	cmp	r1, #0
 800ddd8:	d040      	beq.n	800de5c <__ssvfscanf_r+0x1180>
 800ddda:	e047      	b.n	800de6c <__ssvfscanf_r+0x1190>
 800dddc:	2198      	movs	r1, #152	; 0x98
 800ddde:	2080      	movs	r0, #128	; 0x80
 800dde0:	0109      	lsls	r1, r1, #4
 800dde2:	4031      	ands	r1, r6
 800dde4:	0040      	lsls	r0, r0, #1
 800dde6:	4281      	cmp	r1, r0
 800dde8:	d140      	bne.n	800de6c <__ssvfscanf_r+0x1190>
 800ddea:	69f9      	ldr	r1, [r7, #28]
 800ddec:	2901      	cmp	r1, #1
 800ddee:	d13d      	bne.n	800de6c <__ssvfscanf_r+0x1190>
 800ddf0:	2080      	movs	r0, #128	; 0x80
 800ddf2:	4940      	ldr	r1, [pc, #256]	; (800def4 <__ssvfscanf_r+0x1218>)
 800ddf4:	0100      	lsls	r0, r0, #4
 800ddf6:	400e      	ands	r6, r1
 800ddf8:	3132      	adds	r1, #50	; 0x32
 800ddfa:	31ff      	adds	r1, #255	; 0xff
 800ddfc:	7029      	strb	r1, [r5, #0]
 800ddfe:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800de00:	4306      	orrs	r6, r0
 800de02:	3901      	subs	r1, #1
 800de04:	63f9      	str	r1, [r7, #60]	; 0x3c
 800de06:	3501      	adds	r5, #1
 800de08:	2100      	movs	r1, #0
 800de0a:	61f9      	str	r1, [r7, #28]
 800de0c:	e7dc      	b.n	800ddc8 <__ssvfscanf_r+0x10ec>
 800de0e:	2180      	movs	r1, #128	; 0x80
 800de10:	420e      	tst	r6, r1
 800de12:	d02b      	beq.n	800de6c <__ssvfscanf_r+0x1190>
 800de14:	438e      	bics	r6, r1
 800de16:	e7d7      	b.n	800ddc8 <__ssvfscanf_r+0x10ec>
 800de18:	6a39      	ldr	r1, [r7, #32]
 800de1a:	2900      	cmp	r1, #0
 800de1c:	d10d      	bne.n	800de3a <__ssvfscanf_r+0x115e>
 800de1e:	69f9      	ldr	r1, [r7, #28]
 800de20:	2900      	cmp	r1, #0
 800de22:	d10e      	bne.n	800de42 <__ssvfscanf_r+0x1166>
 800de24:	21e0      	movs	r1, #224	; 0xe0
 800de26:	0030      	movs	r0, r6
 800de28:	00c9      	lsls	r1, r1, #3
 800de2a:	4008      	ands	r0, r1
 800de2c:	4288      	cmp	r0, r1
 800de2e:	d108      	bne.n	800de42 <__ssvfscanf_r+0x1166>
 800de30:	4931      	ldr	r1, [pc, #196]	; (800def8 <__ssvfscanf_r+0x121c>)
 800de32:	400e      	ands	r6, r1
 800de34:	2101      	movs	r1, #1
 800de36:	6239      	str	r1, [r7, #32]
 800de38:	e7c6      	b.n	800ddc8 <__ssvfscanf_r+0x10ec>
 800de3a:	6a39      	ldr	r1, [r7, #32]
 800de3c:	2902      	cmp	r1, #2
 800de3e:	d100      	bne.n	800de42 <__ssvfscanf_r+0x1166>
 800de40:	e089      	b.n	800df56 <__ssvfscanf_r+0x127a>
 800de42:	2c01      	cmp	r4, #1
 800de44:	d001      	beq.n	800de4a <__ssvfscanf_r+0x116e>
 800de46:	2c04      	cmp	r4, #4
 800de48:	d110      	bne.n	800de6c <__ssvfscanf_r+0x1190>
 800de4a:	3401      	adds	r4, #1
 800de4c:	b2e4      	uxtb	r4, r4
 800de4e:	e7bb      	b.n	800ddc8 <__ssvfscanf_r+0x10ec>
 800de50:	0531      	lsls	r1, r6, #20
 800de52:	d508      	bpl.n	800de66 <__ssvfscanf_r+0x118a>
 800de54:	6a39      	ldr	r1, [r7, #32]
 800de56:	1909      	adds	r1, r1, r4
 800de58:	2900      	cmp	r1, #0
 800de5a:	d104      	bne.n	800de66 <__ssvfscanf_r+0x118a>
 800de5c:	4824      	ldr	r0, [pc, #144]	; (800def0 <__ssvfscanf_r+0x1214>)
 800de5e:	000c      	movs	r4, r1
 800de60:	4006      	ands	r6, r0
 800de62:	6239      	str	r1, [r7, #32]
 800de64:	e7b0      	b.n	800ddc8 <__ssvfscanf_r+0x10ec>
 800de66:	6a39      	ldr	r1, [r7, #32]
 800de68:	2901      	cmp	r1, #1
 800de6a:	d076      	beq.n	800df5a <__ssvfscanf_r+0x127e>
 800de6c:	69fb      	ldr	r3, [r7, #28]
 800de6e:	2b00      	cmp	r3, #0
 800de70:	d001      	beq.n	800de76 <__ssvfscanf_r+0x119a>
 800de72:	4b20      	ldr	r3, [pc, #128]	; (800def4 <__ssvfscanf_r+0x1218>)
 800de74:	401e      	ands	r6, r3
 800de76:	6a3b      	ldr	r3, [r7, #32]
 800de78:	3b01      	subs	r3, #1
 800de7a:	2b01      	cmp	r3, #1
 800de7c:	d877      	bhi.n	800df6e <__ssvfscanf_r+0x1292>
 800de7e:	238c      	movs	r3, #140	; 0x8c
 800de80:	2248      	movs	r2, #72	; 0x48
 800de82:	005b      	lsls	r3, r3, #1
 800de84:	189b      	adds	r3, r3, r2
 800de86:	19db      	adds	r3, r3, r7
 800de88:	429d      	cmp	r5, r3
 800de8a:	d801      	bhi.n	800de90 <__ssvfscanf_r+0x11b4>
 800de8c:	f7ff f823 	bl	800ced6 <__ssvfscanf_r+0x1fa>
 800de90:	3d01      	subs	r5, #1
 800de92:	7829      	ldrb	r1, [r5, #0]
 800de94:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800de96:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800de98:	f001 fe78 	bl	800fb8c <_sungetc_r>
 800de9c:	e7ef      	b.n	800de7e <__ssvfscanf_r+0x11a2>
 800de9e:	2c00      	cmp	r4, #0
 800dea0:	d10c      	bne.n	800debc <__ssvfscanf_r+0x11e0>
 800dea2:	69f9      	ldr	r1, [r7, #28]
 800dea4:	2900      	cmp	r1, #0
 800dea6:	d1e4      	bne.n	800de72 <__ssvfscanf_r+0x1196>
 800dea8:	21e0      	movs	r1, #224	; 0xe0
 800deaa:	0030      	movs	r0, r6
 800deac:	00c9      	lsls	r1, r1, #3
 800deae:	4008      	ands	r0, r1
 800deb0:	4288      	cmp	r0, r1
 800deb2:	d1e0      	bne.n	800de76 <__ssvfscanf_r+0x119a>
 800deb4:	4910      	ldr	r1, [pc, #64]	; (800def8 <__ssvfscanf_r+0x121c>)
 800deb6:	3401      	adds	r4, #1
 800deb8:	400e      	ands	r6, r1
 800deba:	e785      	b.n	800ddc8 <__ssvfscanf_r+0x10ec>
 800debc:	20fd      	movs	r0, #253	; 0xfd
 800debe:	1ee1      	subs	r1, r4, #3
 800dec0:	4201      	tst	r1, r0
 800dec2:	d1d3      	bne.n	800de6c <__ssvfscanf_r+0x1190>
 800dec4:	e7c1      	b.n	800de4a <__ssvfscanf_r+0x116e>
 800dec6:	0531      	lsls	r1, r6, #20
 800dec8:	d503      	bpl.n	800ded2 <__ssvfscanf_r+0x11f6>
 800deca:	6a39      	ldr	r1, [r7, #32]
 800decc:	1909      	adds	r1, r1, r4
 800dece:	2900      	cmp	r1, #0
 800ded0:	d0c4      	beq.n	800de5c <__ssvfscanf_r+0x1180>
 800ded2:	2c02      	cmp	r4, #2
 800ded4:	d1ca      	bne.n	800de6c <__ssvfscanf_r+0x1190>
 800ded6:	2403      	movs	r4, #3
 800ded8:	e776      	b.n	800ddc8 <__ssvfscanf_r+0x10ec>
 800deda:	2c06      	cmp	r4, #6
 800dedc:	d1c6      	bne.n	800de6c <__ssvfscanf_r+0x1190>
 800dede:	2407      	movs	r4, #7
 800dee0:	e772      	b.n	800ddc8 <__ssvfscanf_r+0x10ec>
 800dee2:	2c07      	cmp	r4, #7
 800dee4:	d1c2      	bne.n	800de6c <__ssvfscanf_r+0x1190>
 800dee6:	2408      	movs	r4, #8
 800dee8:	e76e      	b.n	800ddc8 <__ssvfscanf_r+0x10ec>
 800deea:	46c0      	nop			; (mov r8, r8)
 800deec:	0800f735 	.word	0x0800f735
 800def0:	fffffe7f 	.word	0xfffffe7f
 800def4:	fffffeff 	.word	0xfffffeff
 800def8:	fffff87f 	.word	0xfffff87f
 800defc:	0531      	lsls	r1, r6, #20
 800defe:	d5b5      	bpl.n	800de6c <__ssvfscanf_r+0x1190>
 800df00:	21a0      	movs	r1, #160	; 0xa0
 800df02:	2080      	movs	r0, #128	; 0x80
 800df04:	00c9      	lsls	r1, r1, #3
 800df06:	00c0      	lsls	r0, r0, #3
 800df08:	4031      	ands	r1, r6
 800df0a:	4281      	cmp	r1, r0
 800df0c:	d004      	beq.n	800df18 <__ssvfscanf_r+0x123c>
 800df0e:	4206      	tst	r6, r0
 800df10:	d0ac      	beq.n	800de6c <__ssvfscanf_r+0x1190>
 800df12:	69f9      	ldr	r1, [r7, #28]
 800df14:	2900      	cmp	r1, #0
 800df16:	d0ae      	beq.n	800de76 <__ssvfscanf_r+0x119a>
 800df18:	2180      	movs	r1, #128	; 0x80
 800df1a:	0089      	lsls	r1, r1, #2
 800df1c:	420e      	tst	r6, r1
 800df1e:	d104      	bne.n	800df2a <__ssvfscanf_r+0x124e>
 800df20:	69f9      	ldr	r1, [r7, #28]
 800df22:	6938      	ldr	r0, [r7, #16]
 800df24:	607d      	str	r5, [r7, #4]
 800df26:	1a09      	subs	r1, r1, r0
 800df28:	60b9      	str	r1, [r7, #8]
 800df2a:	20c0      	movs	r0, #192	; 0xc0
 800df2c:	4973      	ldr	r1, [pc, #460]	; (800e0fc <__ssvfscanf_r+0x1420>)
 800df2e:	0040      	lsls	r0, r0, #1
 800df30:	400e      	ands	r6, r1
 800df32:	4306      	orrs	r6, r0
 800df34:	e768      	b.n	800de08 <__ssvfscanf_r+0x112c>
 800df36:	0531      	lsls	r1, r6, #20
 800df38:	d5e2      	bpl.n	800df00 <__ssvfscanf_r+0x1224>
 800df3a:	e74a      	b.n	800ddd2 <__ssvfscanf_r+0x10f6>
 800df3c:	6839      	ldr	r1, [r7, #0]
 800df3e:	7809      	ldrb	r1, [r1, #0]
 800df40:	4291      	cmp	r1, r2
 800df42:	d193      	bne.n	800de6c <__ssvfscanf_r+0x1190>
 800df44:	2180      	movs	r1, #128	; 0x80
 800df46:	0089      	lsls	r1, r1, #2
 800df48:	420e      	tst	r6, r1
 800df4a:	d08f      	beq.n	800de6c <__ssvfscanf_r+0x1190>
 800df4c:	496c      	ldr	r1, [pc, #432]	; (800e100 <__ssvfscanf_r+0x1424>)
 800df4e:	400e      	ands	r6, r1
 800df50:	69f9      	ldr	r1, [r7, #28]
 800df52:	6139      	str	r1, [r7, #16]
 800df54:	e738      	b.n	800ddc8 <__ssvfscanf_r+0x10ec>
 800df56:	2103      	movs	r1, #3
 800df58:	e76d      	b.n	800de36 <__ssvfscanf_r+0x115a>
 800df5a:	2102      	movs	r1, #2
 800df5c:	e76b      	b.n	800de36 <__ssvfscanf_r+0x115a>
 800df5e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800df60:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800df62:	f001 fe4f 	bl	800fc04 <__ssrefill_r>
 800df66:	2800      	cmp	r0, #0
 800df68:	d100      	bne.n	800df6c <__ssvfscanf_r+0x1290>
 800df6a:	e723      	b.n	800ddb4 <__ssvfscanf_r+0x10d8>
 800df6c:	e77e      	b.n	800de6c <__ssvfscanf_r+0x1190>
 800df6e:	1e63      	subs	r3, r4, #1
 800df70:	2b06      	cmp	r3, #6
 800df72:	d825      	bhi.n	800dfc0 <__ssvfscanf_r+0x12e4>
 800df74:	2c02      	cmp	r4, #2
 800df76:	d837      	bhi.n	800dfe8 <__ssvfscanf_r+0x130c>
 800df78:	238c      	movs	r3, #140	; 0x8c
 800df7a:	2248      	movs	r2, #72	; 0x48
 800df7c:	005b      	lsls	r3, r3, #1
 800df7e:	189b      	adds	r3, r3, r2
 800df80:	19db      	adds	r3, r3, r7
 800df82:	429d      	cmp	r5, r3
 800df84:	d801      	bhi.n	800df8a <__ssvfscanf_r+0x12ae>
 800df86:	f7fe ffa6 	bl	800ced6 <__ssvfscanf_r+0x1fa>
 800df8a:	3d01      	subs	r5, #1
 800df8c:	7829      	ldrb	r1, [r5, #0]
 800df8e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800df90:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800df92:	f001 fdfb 	bl	800fb8c <_sungetc_r>
 800df96:	e7ef      	b.n	800df78 <__ssvfscanf_r+0x129c>
 800df98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800df9a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800df9c:	3b01      	subs	r3, #1
 800df9e:	7819      	ldrb	r1, [r3, #0]
 800dfa0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800dfa2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800dfa4:	f001 fdf2 	bl	800fb8c <_sungetc_r>
 800dfa8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dfaa:	6a3a      	ldr	r2, [r7, #32]
 800dfac:	189b      	adds	r3, r3, r2
 800dfae:	b2db      	uxtb	r3, r3
 800dfb0:	2b03      	cmp	r3, #3
 800dfb2:	d8f1      	bhi.n	800df98 <__ssvfscanf_r+0x12bc>
 800dfb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dfb6:	3c03      	subs	r4, #3
 800dfb8:	b2e4      	uxtb	r4, r4
 800dfba:	1b1b      	subs	r3, r3, r4
 800dfbc:	1b2d      	subs	r5, r5, r4
 800dfbe:	63bb      	str	r3, [r7, #56]	; 0x38
 800dfc0:	05f3      	lsls	r3, r6, #23
 800dfc2:	d52f      	bpl.n	800e024 <__ssvfscanf_r+0x1348>
 800dfc4:	0573      	lsls	r3, r6, #21
 800dfc6:	d514      	bpl.n	800dff2 <__ssvfscanf_r+0x1316>
 800dfc8:	238c      	movs	r3, #140	; 0x8c
 800dfca:	2248      	movs	r2, #72	; 0x48
 800dfcc:	005b      	lsls	r3, r3, #1
 800dfce:	189b      	adds	r3, r3, r2
 800dfd0:	19db      	adds	r3, r3, r7
 800dfd2:	429d      	cmp	r5, r3
 800dfd4:	d801      	bhi.n	800dfda <__ssvfscanf_r+0x12fe>
 800dfd6:	f7fe ff7e 	bl	800ced6 <__ssvfscanf_r+0x1fa>
 800dfda:	3d01      	subs	r5, #1
 800dfdc:	7829      	ldrb	r1, [r5, #0]
 800dfde:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800dfe0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800dfe2:	f001 fdd3 	bl	800fb8c <_sungetc_r>
 800dfe6:	e7ef      	b.n	800dfc8 <__ssvfscanf_r+0x12ec>
 800dfe8:	1b63      	subs	r3, r4, r5
 800dfea:	b2db      	uxtb	r3, r3
 800dfec:	63fd      	str	r5, [r7, #60]	; 0x3c
 800dfee:	623b      	str	r3, [r7, #32]
 800dff0:	e7da      	b.n	800dfa8 <__ssvfscanf_r+0x12cc>
 800dff2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dff4:	1e6c      	subs	r4, r5, #1
 800dff6:	7821      	ldrb	r1, [r4, #0]
 800dff8:	3b01      	subs	r3, #1
 800dffa:	63fb      	str	r3, [r7, #60]	; 0x3c
 800dffc:	2965      	cmp	r1, #101	; 0x65
 800dffe:	d00a      	beq.n	800e016 <__ssvfscanf_r+0x133a>
 800e000:	2945      	cmp	r1, #69	; 0x45
 800e002:	d008      	beq.n	800e016 <__ssvfscanf_r+0x133a>
 800e004:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e006:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800e008:	f001 fdc0 	bl	800fb8c <_sungetc_r>
 800e00c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e00e:	1eac      	subs	r4, r5, #2
 800e010:	3b02      	subs	r3, #2
 800e012:	7821      	ldrb	r1, [r4, #0]
 800e014:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e016:	0025      	movs	r5, r4
 800e018:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e01a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800e01c:	f001 fdb6 	bl	800fb8c <_sungetc_r>
 800e020:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e022:	63bb      	str	r3, [r7, #56]	; 0x38
 800e024:	2310      	movs	r3, #16
 800e026:	0032      	movs	r2, r6
 800e028:	401a      	ands	r2, r3
 800e02a:	421e      	tst	r6, r3
 800e02c:	d001      	beq.n	800e032 <__ssvfscanf_r+0x1356>
 800e02e:	f7fe fe71 	bl	800cd14 <__ssvfscanf_r+0x38>
 800e032:	23c0      	movs	r3, #192	; 0xc0
 800e034:	2180      	movs	r1, #128	; 0x80
 800e036:	00db      	lsls	r3, r3, #3
 800e038:	702a      	strb	r2, [r5, #0]
 800e03a:	4033      	ands	r3, r6
 800e03c:	00c9      	lsls	r1, r1, #3
 800e03e:	428b      	cmp	r3, r1
 800e040:	d11f      	bne.n	800e082 <__ssvfscanf_r+0x13a6>
 800e042:	693b      	ldr	r3, [r7, #16]
 800e044:	69fa      	ldr	r2, [r7, #28]
 800e046:	69f9      	ldr	r1, [r7, #28]
 800e048:	1a9a      	subs	r2, r3, r2
 800e04a:	428b      	cmp	r3, r1
 800e04c:	d125      	bne.n	800e09a <__ssvfscanf_r+0x13be>
 800e04e:	238c      	movs	r3, #140	; 0x8c
 800e050:	2148      	movs	r1, #72	; 0x48
 800e052:	005b      	lsls	r3, r3, #1
 800e054:	185b      	adds	r3, r3, r1
 800e056:	19d9      	adds	r1, r3, r7
 800e058:	2200      	movs	r2, #0
 800e05a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800e05c:	f7fb ffd8 	bl	800a010 <_strtod_r>
 800e060:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e062:	0004      	movs	r4, r0
 800e064:	3304      	adds	r3, #4
 800e066:	000d      	movs	r5, r1
 800e068:	623b      	str	r3, [r7, #32]
 800e06a:	07f3      	lsls	r3, r6, #31
 800e06c:	d523      	bpl.n	800e0b6 <__ssvfscanf_r+0x13da>
 800e06e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e070:	681b      	ldr	r3, [r3, #0]
 800e072:	601c      	str	r4, [r3, #0]
 800e074:	605d      	str	r5, [r3, #4]
 800e076:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e078:	3301      	adds	r3, #1
 800e07a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e07c:	6a3b      	ldr	r3, [r7, #32]
 800e07e:	f7fe ffa5 	bl	800cfcc <__ssvfscanf_r+0x2f0>
 800e082:	68bb      	ldr	r3, [r7, #8]
 800e084:	2b00      	cmp	r3, #0
 800e086:	d0e2      	beq.n	800e04e <__ssvfscanf_r+0x1372>
 800e088:	687b      	ldr	r3, [r7, #4]
 800e08a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800e08c:	1c59      	adds	r1, r3, #1
 800e08e:	230a      	movs	r3, #10
 800e090:	f7fc f84c 	bl	800a12c <_strtol_r>
 800e094:	68bb      	ldr	r3, [r7, #8]
 800e096:	687d      	ldr	r5, [r7, #4]
 800e098:	1ac2      	subs	r2, r0, r3
 800e09a:	2148      	movs	r1, #72	; 0x48
 800e09c:	4b19      	ldr	r3, [pc, #100]	; (800e104 <__ssvfscanf_r+0x1428>)
 800e09e:	185b      	adds	r3, r3, r1
 800e0a0:	19db      	adds	r3, r3, r7
 800e0a2:	429d      	cmp	r5, r3
 800e0a4:	d302      	bcc.n	800e0ac <__ssvfscanf_r+0x13d0>
 800e0a6:	4b18      	ldr	r3, [pc, #96]	; (800e108 <__ssvfscanf_r+0x142c>)
 800e0a8:	185b      	adds	r3, r3, r1
 800e0aa:	19dd      	adds	r5, r3, r7
 800e0ac:	0028      	movs	r0, r5
 800e0ae:	4917      	ldr	r1, [pc, #92]	; (800e10c <__ssvfscanf_r+0x1430>)
 800e0b0:	f7fc f944 	bl	800a33c <sprintf>
 800e0b4:	e7cb      	b.n	800e04e <__ssvfscanf_r+0x1372>
 800e0b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e0b8:	681b      	ldr	r3, [r3, #0]
 800e0ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e0bc:	07b6      	lsls	r6, r6, #30
 800e0be:	d4d8      	bmi.n	800e072 <__ssvfscanf_r+0x1396>
 800e0c0:	0002      	movs	r2, r0
 800e0c2:	000b      	movs	r3, r1
 800e0c4:	f7f4 f916 	bl	80022f4 <__aeabi_dcmpun>
 800e0c8:	2800      	cmp	r0, #0
 800e0ca:	d005      	beq.n	800e0d8 <__ssvfscanf_r+0x13fc>
 800e0cc:	4810      	ldr	r0, [pc, #64]	; (800e110 <__ssvfscanf_r+0x1434>)
 800e0ce:	f7fc fabf 	bl	800a650 <nanf>
 800e0d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e0d4:	6018      	str	r0, [r3, #0]
 800e0d6:	e7ce      	b.n	800e076 <__ssvfscanf_r+0x139a>
 800e0d8:	0020      	movs	r0, r4
 800e0da:	0029      	movs	r1, r5
 800e0dc:	f7f4 f9b4 	bl	8002448 <__aeabi_d2f>
 800e0e0:	e7f7      	b.n	800e0d2 <__ssvfscanf_r+0x13f6>
 800e0e2:	00a3      	lsls	r3, r4, #2
 800e0e4:	18ed      	adds	r5, r5, r3
 800e0e6:	682b      	ldr	r3, [r5, #0]
 800e0e8:	3401      	adds	r4, #1
 800e0ea:	6818      	ldr	r0, [r3, #0]
 800e0ec:	f7fa ff40 	bl	8008f70 <free>
 800e0f0:	2200      	movs	r2, #0
 800e0f2:	682b      	ldr	r3, [r5, #0]
 800e0f4:	601a      	str	r2, [r3, #0]
 800e0f6:	f7fe ffc3 	bl	800d080 <__ssvfscanf_r+0x3a4>
 800e0fa:	46c0      	nop			; (mov r8, r8)
 800e0fc:	fffff07f 	.word	0xfffff07f
 800e100:	fffffd7f 	.word	0xfffffd7f
 800e104:	0000026b 	.word	0x0000026b
 800e108:	0000026a 	.word	0x0000026a
 800e10c:	08012d78 	.word	0x08012d78
 800e110:	08012ddb 	.word	0x08012ddb

0800e114 <_fclose_r>:
 800e114:	b570      	push	{r4, r5, r6, lr}
 800e116:	0005      	movs	r5, r0
 800e118:	1e0c      	subs	r4, r1, #0
 800e11a:	d102      	bne.n	800e122 <_fclose_r+0xe>
 800e11c:	2600      	movs	r6, #0
 800e11e:	0030      	movs	r0, r6
 800e120:	bd70      	pop	{r4, r5, r6, pc}
 800e122:	2800      	cmp	r0, #0
 800e124:	d004      	beq.n	800e130 <_fclose_r+0x1c>
 800e126:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800e128:	2b00      	cmp	r3, #0
 800e12a:	d101      	bne.n	800e130 <_fclose_r+0x1c>
 800e12c:	f7fc f89e 	bl	800a26c <__sinit>
 800e130:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e132:	07db      	lsls	r3, r3, #31
 800e134:	d405      	bmi.n	800e142 <_fclose_r+0x2e>
 800e136:	89a3      	ldrh	r3, [r4, #12]
 800e138:	059b      	lsls	r3, r3, #22
 800e13a:	d402      	bmi.n	800e142 <_fclose_r+0x2e>
 800e13c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e13e:	f7fc fa6b 	bl	800a618 <__retarget_lock_acquire_recursive>
 800e142:	220c      	movs	r2, #12
 800e144:	5ea3      	ldrsh	r3, [r4, r2]
 800e146:	2b00      	cmp	r3, #0
 800e148:	d109      	bne.n	800e15e <_fclose_r+0x4a>
 800e14a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800e14c:	3301      	adds	r3, #1
 800e14e:	0016      	movs	r6, r2
 800e150:	401e      	ands	r6, r3
 800e152:	421a      	tst	r2, r3
 800e154:	d1e2      	bne.n	800e11c <_fclose_r+0x8>
 800e156:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e158:	f7fc fa5f 	bl	800a61a <__retarget_lock_release_recursive>
 800e15c:	e7df      	b.n	800e11e <_fclose_r+0xa>
 800e15e:	0021      	movs	r1, r4
 800e160:	0028      	movs	r0, r5
 800e162:	f000 f837 	bl	800e1d4 <__sflush_r>
 800e166:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800e168:	0006      	movs	r6, r0
 800e16a:	2b00      	cmp	r3, #0
 800e16c:	d006      	beq.n	800e17c <_fclose_r+0x68>
 800e16e:	0028      	movs	r0, r5
 800e170:	69e1      	ldr	r1, [r4, #28]
 800e172:	4798      	blx	r3
 800e174:	2800      	cmp	r0, #0
 800e176:	da01      	bge.n	800e17c <_fclose_r+0x68>
 800e178:	2601      	movs	r6, #1
 800e17a:	4276      	negs	r6, r6
 800e17c:	89a3      	ldrh	r3, [r4, #12]
 800e17e:	061b      	lsls	r3, r3, #24
 800e180:	d503      	bpl.n	800e18a <_fclose_r+0x76>
 800e182:	0028      	movs	r0, r5
 800e184:	6921      	ldr	r1, [r4, #16]
 800e186:	f7fc facf 	bl	800a728 <_free_r>
 800e18a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800e18c:	2900      	cmp	r1, #0
 800e18e:	d008      	beq.n	800e1a2 <_fclose_r+0x8e>
 800e190:	0023      	movs	r3, r4
 800e192:	3340      	adds	r3, #64	; 0x40
 800e194:	4299      	cmp	r1, r3
 800e196:	d002      	beq.n	800e19e <_fclose_r+0x8a>
 800e198:	0028      	movs	r0, r5
 800e19a:	f7fc fac5 	bl	800a728 <_free_r>
 800e19e:	2300      	movs	r3, #0
 800e1a0:	6323      	str	r3, [r4, #48]	; 0x30
 800e1a2:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800e1a4:	2900      	cmp	r1, #0
 800e1a6:	d004      	beq.n	800e1b2 <_fclose_r+0x9e>
 800e1a8:	0028      	movs	r0, r5
 800e1aa:	f7fc fabd 	bl	800a728 <_free_r>
 800e1ae:	2300      	movs	r3, #0
 800e1b0:	6463      	str	r3, [r4, #68]	; 0x44
 800e1b2:	f7fc f84b 	bl	800a24c <__sfp_lock_acquire>
 800e1b6:	2300      	movs	r3, #0
 800e1b8:	81a3      	strh	r3, [r4, #12]
 800e1ba:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e1bc:	07db      	lsls	r3, r3, #31
 800e1be:	d402      	bmi.n	800e1c6 <_fclose_r+0xb2>
 800e1c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e1c2:	f7fc fa2a 	bl	800a61a <__retarget_lock_release_recursive>
 800e1c6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e1c8:	f7fc fa25 	bl	800a616 <__retarget_lock_close_recursive>
 800e1cc:	f7fc f846 	bl	800a25c <__sfp_lock_release>
 800e1d0:	e7a5      	b.n	800e11e <_fclose_r+0xa>
	...

0800e1d4 <__sflush_r>:
 800e1d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e1d6:	230c      	movs	r3, #12
 800e1d8:	5eca      	ldrsh	r2, [r1, r3]
 800e1da:	000c      	movs	r4, r1
 800e1dc:	0005      	movs	r5, r0
 800e1de:	b291      	uxth	r1, r2
 800e1e0:	0713      	lsls	r3, r2, #28
 800e1e2:	d464      	bmi.n	800e2ae <__sflush_r+0xda>
 800e1e4:	2380      	movs	r3, #128	; 0x80
 800e1e6:	011b      	lsls	r3, r3, #4
 800e1e8:	4313      	orrs	r3, r2
 800e1ea:	6862      	ldr	r2, [r4, #4]
 800e1ec:	81a3      	strh	r3, [r4, #12]
 800e1ee:	2a00      	cmp	r2, #0
 800e1f0:	dc04      	bgt.n	800e1fc <__sflush_r+0x28>
 800e1f2:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800e1f4:	2a00      	cmp	r2, #0
 800e1f6:	dc01      	bgt.n	800e1fc <__sflush_r+0x28>
 800e1f8:	2000      	movs	r0, #0
 800e1fa:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800e1fc:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 800e1fe:	2f00      	cmp	r7, #0
 800e200:	d0fa      	beq.n	800e1f8 <__sflush_r+0x24>
 800e202:	2200      	movs	r2, #0
 800e204:	2080      	movs	r0, #128	; 0x80
 800e206:	682e      	ldr	r6, [r5, #0]
 800e208:	602a      	str	r2, [r5, #0]
 800e20a:	001a      	movs	r2, r3
 800e20c:	0140      	lsls	r0, r0, #5
 800e20e:	69e1      	ldr	r1, [r4, #28]
 800e210:	4002      	ands	r2, r0
 800e212:	4203      	tst	r3, r0
 800e214:	d038      	beq.n	800e288 <__sflush_r+0xb4>
 800e216:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800e218:	89a3      	ldrh	r3, [r4, #12]
 800e21a:	075b      	lsls	r3, r3, #29
 800e21c:	d506      	bpl.n	800e22c <__sflush_r+0x58>
 800e21e:	6863      	ldr	r3, [r4, #4]
 800e220:	1ac0      	subs	r0, r0, r3
 800e222:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800e224:	2b00      	cmp	r3, #0
 800e226:	d001      	beq.n	800e22c <__sflush_r+0x58>
 800e228:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800e22a:	1ac0      	subs	r0, r0, r3
 800e22c:	0002      	movs	r2, r0
 800e22e:	2300      	movs	r3, #0
 800e230:	0028      	movs	r0, r5
 800e232:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 800e234:	69e1      	ldr	r1, [r4, #28]
 800e236:	47b8      	blx	r7
 800e238:	89a2      	ldrh	r2, [r4, #12]
 800e23a:	1c43      	adds	r3, r0, #1
 800e23c:	d106      	bne.n	800e24c <__sflush_r+0x78>
 800e23e:	6829      	ldr	r1, [r5, #0]
 800e240:	291d      	cmp	r1, #29
 800e242:	d830      	bhi.n	800e2a6 <__sflush_r+0xd2>
 800e244:	4b2c      	ldr	r3, [pc, #176]	; (800e2f8 <__sflush_r+0x124>)
 800e246:	410b      	asrs	r3, r1
 800e248:	07db      	lsls	r3, r3, #31
 800e24a:	d42c      	bmi.n	800e2a6 <__sflush_r+0xd2>
 800e24c:	4b2b      	ldr	r3, [pc, #172]	; (800e2fc <__sflush_r+0x128>)
 800e24e:	4013      	ands	r3, r2
 800e250:	2200      	movs	r2, #0
 800e252:	6062      	str	r2, [r4, #4]
 800e254:	6922      	ldr	r2, [r4, #16]
 800e256:	b21b      	sxth	r3, r3
 800e258:	81a3      	strh	r3, [r4, #12]
 800e25a:	6022      	str	r2, [r4, #0]
 800e25c:	04db      	lsls	r3, r3, #19
 800e25e:	d505      	bpl.n	800e26c <__sflush_r+0x98>
 800e260:	1c43      	adds	r3, r0, #1
 800e262:	d102      	bne.n	800e26a <__sflush_r+0x96>
 800e264:	682b      	ldr	r3, [r5, #0]
 800e266:	2b00      	cmp	r3, #0
 800e268:	d100      	bne.n	800e26c <__sflush_r+0x98>
 800e26a:	6520      	str	r0, [r4, #80]	; 0x50
 800e26c:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800e26e:	602e      	str	r6, [r5, #0]
 800e270:	2900      	cmp	r1, #0
 800e272:	d0c1      	beq.n	800e1f8 <__sflush_r+0x24>
 800e274:	0023      	movs	r3, r4
 800e276:	3340      	adds	r3, #64	; 0x40
 800e278:	4299      	cmp	r1, r3
 800e27a:	d002      	beq.n	800e282 <__sflush_r+0xae>
 800e27c:	0028      	movs	r0, r5
 800e27e:	f7fc fa53 	bl	800a728 <_free_r>
 800e282:	2000      	movs	r0, #0
 800e284:	6320      	str	r0, [r4, #48]	; 0x30
 800e286:	e7b8      	b.n	800e1fa <__sflush_r+0x26>
 800e288:	2301      	movs	r3, #1
 800e28a:	0028      	movs	r0, r5
 800e28c:	47b8      	blx	r7
 800e28e:	1c43      	adds	r3, r0, #1
 800e290:	d1c2      	bne.n	800e218 <__sflush_r+0x44>
 800e292:	682b      	ldr	r3, [r5, #0]
 800e294:	2b00      	cmp	r3, #0
 800e296:	d0bf      	beq.n	800e218 <__sflush_r+0x44>
 800e298:	2b1d      	cmp	r3, #29
 800e29a:	d001      	beq.n	800e2a0 <__sflush_r+0xcc>
 800e29c:	2b16      	cmp	r3, #22
 800e29e:	d101      	bne.n	800e2a4 <__sflush_r+0xd0>
 800e2a0:	602e      	str	r6, [r5, #0]
 800e2a2:	e7a9      	b.n	800e1f8 <__sflush_r+0x24>
 800e2a4:	89a2      	ldrh	r2, [r4, #12]
 800e2a6:	2340      	movs	r3, #64	; 0x40
 800e2a8:	4313      	orrs	r3, r2
 800e2aa:	81a3      	strh	r3, [r4, #12]
 800e2ac:	e7a5      	b.n	800e1fa <__sflush_r+0x26>
 800e2ae:	6926      	ldr	r6, [r4, #16]
 800e2b0:	2e00      	cmp	r6, #0
 800e2b2:	d0a1      	beq.n	800e1f8 <__sflush_r+0x24>
 800e2b4:	6827      	ldr	r7, [r4, #0]
 800e2b6:	6026      	str	r6, [r4, #0]
 800e2b8:	1bbb      	subs	r3, r7, r6
 800e2ba:	9301      	str	r3, [sp, #4]
 800e2bc:	2300      	movs	r3, #0
 800e2be:	0789      	lsls	r1, r1, #30
 800e2c0:	d100      	bne.n	800e2c4 <__sflush_r+0xf0>
 800e2c2:	6963      	ldr	r3, [r4, #20]
 800e2c4:	60a3      	str	r3, [r4, #8]
 800e2c6:	9b01      	ldr	r3, [sp, #4]
 800e2c8:	2b00      	cmp	r3, #0
 800e2ca:	dc00      	bgt.n	800e2ce <__sflush_r+0xfa>
 800e2cc:	e794      	b.n	800e1f8 <__sflush_r+0x24>
 800e2ce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e2d0:	0032      	movs	r2, r6
 800e2d2:	001f      	movs	r7, r3
 800e2d4:	0028      	movs	r0, r5
 800e2d6:	9b01      	ldr	r3, [sp, #4]
 800e2d8:	69e1      	ldr	r1, [r4, #28]
 800e2da:	47b8      	blx	r7
 800e2dc:	2800      	cmp	r0, #0
 800e2de:	dc06      	bgt.n	800e2ee <__sflush_r+0x11a>
 800e2e0:	2340      	movs	r3, #64	; 0x40
 800e2e2:	2001      	movs	r0, #1
 800e2e4:	89a2      	ldrh	r2, [r4, #12]
 800e2e6:	4240      	negs	r0, r0
 800e2e8:	4313      	orrs	r3, r2
 800e2ea:	81a3      	strh	r3, [r4, #12]
 800e2ec:	e785      	b.n	800e1fa <__sflush_r+0x26>
 800e2ee:	9b01      	ldr	r3, [sp, #4]
 800e2f0:	1836      	adds	r6, r6, r0
 800e2f2:	1a1b      	subs	r3, r3, r0
 800e2f4:	9301      	str	r3, [sp, #4]
 800e2f6:	e7e6      	b.n	800e2c6 <__sflush_r+0xf2>
 800e2f8:	dfbffffe 	.word	0xdfbffffe
 800e2fc:	fffff7ff 	.word	0xfffff7ff

0800e300 <_fflush_r>:
 800e300:	b570      	push	{r4, r5, r6, lr}
 800e302:	0005      	movs	r5, r0
 800e304:	000c      	movs	r4, r1
 800e306:	2800      	cmp	r0, #0
 800e308:	d004      	beq.n	800e314 <_fflush_r+0x14>
 800e30a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800e30c:	2b00      	cmp	r3, #0
 800e30e:	d101      	bne.n	800e314 <_fflush_r+0x14>
 800e310:	f7fb ffac 	bl	800a26c <__sinit>
 800e314:	220c      	movs	r2, #12
 800e316:	5ea3      	ldrsh	r3, [r4, r2]
 800e318:	1e1e      	subs	r6, r3, #0
 800e31a:	d015      	beq.n	800e348 <_fflush_r+0x48>
 800e31c:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800e31e:	07d2      	lsls	r2, r2, #31
 800e320:	d404      	bmi.n	800e32c <_fflush_r+0x2c>
 800e322:	059b      	lsls	r3, r3, #22
 800e324:	d402      	bmi.n	800e32c <_fflush_r+0x2c>
 800e326:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e328:	f7fc f976 	bl	800a618 <__retarget_lock_acquire_recursive>
 800e32c:	0021      	movs	r1, r4
 800e32e:	0028      	movs	r0, r5
 800e330:	f7ff ff50 	bl	800e1d4 <__sflush_r>
 800e334:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e336:	0006      	movs	r6, r0
 800e338:	07db      	lsls	r3, r3, #31
 800e33a:	d405      	bmi.n	800e348 <_fflush_r+0x48>
 800e33c:	89a3      	ldrh	r3, [r4, #12]
 800e33e:	059b      	lsls	r3, r3, #22
 800e340:	d402      	bmi.n	800e348 <_fflush_r+0x48>
 800e342:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e344:	f7fc f969 	bl	800a61a <__retarget_lock_release_recursive>
 800e348:	0030      	movs	r0, r6
 800e34a:	bd70      	pop	{r4, r5, r6, pc}

0800e34c <__sccl>:
 800e34c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e34e:	780b      	ldrb	r3, [r1, #0]
 800e350:	0004      	movs	r4, r0
 800e352:	2b5e      	cmp	r3, #94	; 0x5e
 800e354:	d019      	beq.n	800e38a <__sccl+0x3e>
 800e356:	2200      	movs	r2, #0
 800e358:	1c4d      	adds	r5, r1, #1
 800e35a:	0021      	movs	r1, r4
 800e35c:	1c60      	adds	r0, r4, #1
 800e35e:	30ff      	adds	r0, #255	; 0xff
 800e360:	700a      	strb	r2, [r1, #0]
 800e362:	3101      	adds	r1, #1
 800e364:	4281      	cmp	r1, r0
 800e366:	d1fb      	bne.n	800e360 <__sccl+0x14>
 800e368:	1e68      	subs	r0, r5, #1
 800e36a:	2b00      	cmp	r3, #0
 800e36c:	d00c      	beq.n	800e388 <__sccl+0x3c>
 800e36e:	2101      	movs	r1, #1
 800e370:	262d      	movs	r6, #45	; 0x2d
 800e372:	404a      	eors	r2, r1
 800e374:	0028      	movs	r0, r5
 800e376:	54e2      	strb	r2, [r4, r3]
 800e378:	7801      	ldrb	r1, [r0, #0]
 800e37a:	1c45      	adds	r5, r0, #1
 800e37c:	292d      	cmp	r1, #45	; 0x2d
 800e37e:	d00c      	beq.n	800e39a <__sccl+0x4e>
 800e380:	295d      	cmp	r1, #93	; 0x5d
 800e382:	d01d      	beq.n	800e3c0 <__sccl+0x74>
 800e384:	2900      	cmp	r1, #0
 800e386:	d104      	bne.n	800e392 <__sccl+0x46>
 800e388:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e38a:	2201      	movs	r2, #1
 800e38c:	784b      	ldrb	r3, [r1, #1]
 800e38e:	1c8d      	adds	r5, r1, #2
 800e390:	e7e3      	b.n	800e35a <__sccl+0xe>
 800e392:	000b      	movs	r3, r1
 800e394:	e7ee      	b.n	800e374 <__sccl+0x28>
 800e396:	0033      	movs	r3, r6
 800e398:	e7ec      	b.n	800e374 <__sccl+0x28>
 800e39a:	7841      	ldrb	r1, [r0, #1]
 800e39c:	295d      	cmp	r1, #93	; 0x5d
 800e39e:	d0fa      	beq.n	800e396 <__sccl+0x4a>
 800e3a0:	428b      	cmp	r3, r1
 800e3a2:	dcf8      	bgt.n	800e396 <__sccl+0x4a>
 800e3a4:	001d      	movs	r5, r3
 800e3a6:	3002      	adds	r0, #2
 800e3a8:	3501      	adds	r5, #1
 800e3aa:	5562      	strb	r2, [r4, r5]
 800e3ac:	42a9      	cmp	r1, r5
 800e3ae:	dcfb      	bgt.n	800e3a8 <__sccl+0x5c>
 800e3b0:	2500      	movs	r5, #0
 800e3b2:	1c5f      	adds	r7, r3, #1
 800e3b4:	428b      	cmp	r3, r1
 800e3b6:	da01      	bge.n	800e3bc <__sccl+0x70>
 800e3b8:	1acd      	subs	r5, r1, r3
 800e3ba:	3d01      	subs	r5, #1
 800e3bc:	197b      	adds	r3, r7, r5
 800e3be:	e7db      	b.n	800e378 <__sccl+0x2c>
 800e3c0:	0028      	movs	r0, r5
 800e3c2:	e7e1      	b.n	800e388 <__sccl+0x3c>

0800e3c4 <_localeconv_r>:
 800e3c4:	4800      	ldr	r0, [pc, #0]	; (800e3c8 <_localeconv_r+0x4>)
 800e3c6:	4770      	bx	lr
 800e3c8:	2000051c 	.word	0x2000051c

0800e3cc <__libc_fini_array>:
 800e3cc:	b570      	push	{r4, r5, r6, lr}
 800e3ce:	4c07      	ldr	r4, [pc, #28]	; (800e3ec <__libc_fini_array+0x20>)
 800e3d0:	4d07      	ldr	r5, [pc, #28]	; (800e3f0 <__libc_fini_array+0x24>)
 800e3d2:	1b64      	subs	r4, r4, r5
 800e3d4:	10a4      	asrs	r4, r4, #2
 800e3d6:	2c00      	cmp	r4, #0
 800e3d8:	d102      	bne.n	800e3e0 <__libc_fini_array+0x14>
 800e3da:	f002 fd81 	bl	8010ee0 <_fini>
 800e3de:	bd70      	pop	{r4, r5, r6, pc}
 800e3e0:	3c01      	subs	r4, #1
 800e3e2:	00a3      	lsls	r3, r4, #2
 800e3e4:	58eb      	ldr	r3, [r5, r3]
 800e3e6:	4798      	blx	r3
 800e3e8:	e7f5      	b.n	800e3d6 <__libc_fini_array+0xa>
 800e3ea:	46c0      	nop			; (mov r8, r8)
 800e3ec:	08012e78 	.word	0x08012e78
 800e3f0:	08012e74 	.word	0x08012e74

0800e3f4 <memchr>:
 800e3f4:	b2c9      	uxtb	r1, r1
 800e3f6:	1882      	adds	r2, r0, r2
 800e3f8:	4290      	cmp	r0, r2
 800e3fa:	d101      	bne.n	800e400 <memchr+0xc>
 800e3fc:	2000      	movs	r0, #0
 800e3fe:	4770      	bx	lr
 800e400:	7803      	ldrb	r3, [r0, #0]
 800e402:	428b      	cmp	r3, r1
 800e404:	d0fb      	beq.n	800e3fe <memchr+0xa>
 800e406:	3001      	adds	r0, #1
 800e408:	e7f6      	b.n	800e3f8 <memchr+0x4>
	...

0800e40c <frexp>:
 800e40c:	b570      	push	{r4, r5, r6, lr}
 800e40e:	0014      	movs	r4, r2
 800e410:	2500      	movs	r5, #0
 800e412:	6025      	str	r5, [r4, #0]
 800e414:	4d10      	ldr	r5, [pc, #64]	; (800e458 <frexp+0x4c>)
 800e416:	004b      	lsls	r3, r1, #1
 800e418:	000a      	movs	r2, r1
 800e41a:	085b      	lsrs	r3, r3, #1
 800e41c:	42ab      	cmp	r3, r5
 800e41e:	dc1a      	bgt.n	800e456 <frexp+0x4a>
 800e420:	001d      	movs	r5, r3
 800e422:	4305      	orrs	r5, r0
 800e424:	d017      	beq.n	800e456 <frexp+0x4a>
 800e426:	4d0d      	ldr	r5, [pc, #52]	; (800e45c <frexp+0x50>)
 800e428:	4229      	tst	r1, r5
 800e42a:	d109      	bne.n	800e440 <frexp+0x34>
 800e42c:	2200      	movs	r2, #0
 800e42e:	4b0c      	ldr	r3, [pc, #48]	; (800e460 <frexp+0x54>)
 800e430:	f7f3 f91c 	bl	800166c <__aeabi_dmul>
 800e434:	2536      	movs	r5, #54	; 0x36
 800e436:	000a      	movs	r2, r1
 800e438:	004b      	lsls	r3, r1, #1
 800e43a:	426d      	negs	r5, r5
 800e43c:	085b      	lsrs	r3, r3, #1
 800e43e:	6025      	str	r5, [r4, #0]
 800e440:	4d08      	ldr	r5, [pc, #32]	; (800e464 <frexp+0x58>)
 800e442:	151b      	asrs	r3, r3, #20
 800e444:	195b      	adds	r3, r3, r5
 800e446:	6825      	ldr	r5, [r4, #0]
 800e448:	18eb      	adds	r3, r5, r3
 800e44a:	6023      	str	r3, [r4, #0]
 800e44c:	4b06      	ldr	r3, [pc, #24]	; (800e468 <frexp+0x5c>)
 800e44e:	401a      	ands	r2, r3
 800e450:	4b06      	ldr	r3, [pc, #24]	; (800e46c <frexp+0x60>)
 800e452:	4313      	orrs	r3, r2
 800e454:	0019      	movs	r1, r3
 800e456:	bd70      	pop	{r4, r5, r6, pc}
 800e458:	7fefffff 	.word	0x7fefffff
 800e45c:	7ff00000 	.word	0x7ff00000
 800e460:	43500000 	.word	0x43500000
 800e464:	fffffc02 	.word	0xfffffc02
 800e468:	800fffff 	.word	0x800fffff
 800e46c:	3fe00000 	.word	0x3fe00000

0800e470 <__register_exitproc>:
 800e470:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e472:	4f1c      	ldr	r7, [pc, #112]	; (800e4e4 <__register_exitproc+0x74>)
 800e474:	0004      	movs	r4, r0
 800e476:	6838      	ldr	r0, [r7, #0]
 800e478:	0016      	movs	r6, r2
 800e47a:	9301      	str	r3, [sp, #4]
 800e47c:	9100      	str	r1, [sp, #0]
 800e47e:	f7fc f8cb 	bl	800a618 <__retarget_lock_acquire_recursive>
 800e482:	4a19      	ldr	r2, [pc, #100]	; (800e4e8 <__register_exitproc+0x78>)
 800e484:	6813      	ldr	r3, [r2, #0]
 800e486:	2b00      	cmp	r3, #0
 800e488:	d101      	bne.n	800e48e <__register_exitproc+0x1e>
 800e48a:	4b18      	ldr	r3, [pc, #96]	; (800e4ec <__register_exitproc+0x7c>)
 800e48c:	6013      	str	r3, [r2, #0]
 800e48e:	685a      	ldr	r2, [r3, #4]
 800e490:	6838      	ldr	r0, [r7, #0]
 800e492:	2a1f      	cmp	r2, #31
 800e494:	dd04      	ble.n	800e4a0 <__register_exitproc+0x30>
 800e496:	f7fc f8c0 	bl	800a61a <__retarget_lock_release_recursive>
 800e49a:	2001      	movs	r0, #1
 800e49c:	4240      	negs	r0, r0
 800e49e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800e4a0:	2c00      	cmp	r4, #0
 800e4a2:	d014      	beq.n	800e4ce <__register_exitproc+0x5e>
 800e4a4:	0091      	lsls	r1, r2, #2
 800e4a6:	1859      	adds	r1, r3, r1
 800e4a8:	000f      	movs	r7, r1
 800e4aa:	3788      	adds	r7, #136	; 0x88
 800e4ac:	603e      	str	r6, [r7, #0]
 800e4ae:	2701      	movs	r7, #1
 800e4b0:	001e      	movs	r6, r3
 800e4b2:	4097      	lsls	r7, r2
 800e4b4:	3685      	adds	r6, #133	; 0x85
 800e4b6:	36ff      	adds	r6, #255	; 0xff
 800e4b8:	6875      	ldr	r5, [r6, #4]
 800e4ba:	31fc      	adds	r1, #252	; 0xfc
 800e4bc:	433d      	orrs	r5, r7
 800e4be:	6075      	str	r5, [r6, #4]
 800e4c0:	9d01      	ldr	r5, [sp, #4]
 800e4c2:	60cd      	str	r5, [r1, #12]
 800e4c4:	2c02      	cmp	r4, #2
 800e4c6:	d102      	bne.n	800e4ce <__register_exitproc+0x5e>
 800e4c8:	68b1      	ldr	r1, [r6, #8]
 800e4ca:	4339      	orrs	r1, r7
 800e4cc:	60b1      	str	r1, [r6, #8]
 800e4ce:	1c51      	adds	r1, r2, #1
 800e4d0:	6059      	str	r1, [r3, #4]
 800e4d2:	3202      	adds	r2, #2
 800e4d4:	9900      	ldr	r1, [sp, #0]
 800e4d6:	0092      	lsls	r2, r2, #2
 800e4d8:	50d1      	str	r1, [r2, r3]
 800e4da:	f7fc f89e 	bl	800a61a <__retarget_lock_release_recursive>
 800e4de:	2000      	movs	r0, #0
 800e4e0:	e7dd      	b.n	800e49e <__register_exitproc+0x2e>
 800e4e2:	46c0      	nop			; (mov r8, r8)
 800e4e4:	200006bc 	.word	0x200006bc
 800e4e8:	20000c08 	.word	0x20000c08
 800e4ec:	20000c0c 	.word	0x20000c0c

0800e4f0 <__assert_func>:
 800e4f0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800e4f2:	0014      	movs	r4, r2
 800e4f4:	001a      	movs	r2, r3
 800e4f6:	4b09      	ldr	r3, [pc, #36]	; (800e51c <__assert_func+0x2c>)
 800e4f8:	0005      	movs	r5, r0
 800e4fa:	681b      	ldr	r3, [r3, #0]
 800e4fc:	000e      	movs	r6, r1
 800e4fe:	68d8      	ldr	r0, [r3, #12]
 800e500:	4b07      	ldr	r3, [pc, #28]	; (800e520 <__assert_func+0x30>)
 800e502:	2c00      	cmp	r4, #0
 800e504:	d101      	bne.n	800e50a <__assert_func+0x1a>
 800e506:	4b07      	ldr	r3, [pc, #28]	; (800e524 <__assert_func+0x34>)
 800e508:	001c      	movs	r4, r3
 800e50a:	4907      	ldr	r1, [pc, #28]	; (800e528 <__assert_func+0x38>)
 800e50c:	9301      	str	r3, [sp, #4]
 800e50e:	9402      	str	r4, [sp, #8]
 800e510:	002b      	movs	r3, r5
 800e512:	9600      	str	r6, [sp, #0]
 800e514:	f001 faa6 	bl	800fa64 <fiprintf>
 800e518:	f002 fb8e 	bl	8010c38 <abort>
 800e51c:	200006b8 	.word	0x200006b8
 800e520:	08012da0 	.word	0x08012da0
 800e524:	08012ddb 	.word	0x08012ddb
 800e528:	08012dad 	.word	0x08012dad

0800e52c <_calloc_r>:
 800e52c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e52e:	2400      	movs	r4, #0
 800e530:	0c0b      	lsrs	r3, r1, #16
 800e532:	0c16      	lsrs	r6, r2, #16
 800e534:	42a3      	cmp	r3, r4
 800e536:	d133      	bne.n	800e5a0 <_calloc_r+0x74>
 800e538:	42a6      	cmp	r6, r4
 800e53a:	d121      	bne.n	800e580 <_calloc_r+0x54>
 800e53c:	b28b      	uxth	r3, r1
 800e53e:	b291      	uxth	r1, r2
 800e540:	4359      	muls	r1, r3
 800e542:	f7fa fd1f 	bl	8008f84 <_malloc_r>
 800e546:	1e05      	subs	r5, r0, #0
 800e548:	d033      	beq.n	800e5b2 <_calloc_r+0x86>
 800e54a:	0003      	movs	r3, r0
 800e54c:	3b08      	subs	r3, #8
 800e54e:	685a      	ldr	r2, [r3, #4]
 800e550:	2303      	movs	r3, #3
 800e552:	439a      	bics	r2, r3
 800e554:	3a04      	subs	r2, #4
 800e556:	2a24      	cmp	r2, #36	; 0x24
 800e558:	d832      	bhi.n	800e5c0 <_calloc_r+0x94>
 800e55a:	0003      	movs	r3, r0
 800e55c:	2a13      	cmp	r2, #19
 800e55e:	d90a      	bls.n	800e576 <_calloc_r+0x4a>
 800e560:	6004      	str	r4, [r0, #0]
 800e562:	6044      	str	r4, [r0, #4]
 800e564:	3308      	adds	r3, #8
 800e566:	2a1b      	cmp	r2, #27
 800e568:	d905      	bls.n	800e576 <_calloc_r+0x4a>
 800e56a:	6084      	str	r4, [r0, #8]
 800e56c:	60c4      	str	r4, [r0, #12]
 800e56e:	2a24      	cmp	r2, #36	; 0x24
 800e570:	d021      	beq.n	800e5b6 <_calloc_r+0x8a>
 800e572:	0003      	movs	r3, r0
 800e574:	3310      	adds	r3, #16
 800e576:	2200      	movs	r2, #0
 800e578:	601a      	str	r2, [r3, #0]
 800e57a:	605a      	str	r2, [r3, #4]
 800e57c:	609a      	str	r2, [r3, #8]
 800e57e:	e018      	b.n	800e5b2 <_calloc_r+0x86>
 800e580:	1c33      	adds	r3, r6, #0
 800e582:	1c0d      	adds	r5, r1, #0
 800e584:	b289      	uxth	r1, r1
 800e586:	b292      	uxth	r2, r2
 800e588:	434a      	muls	r2, r1
 800e58a:	b2ad      	uxth	r5, r5
 800e58c:	b299      	uxth	r1, r3
 800e58e:	4369      	muls	r1, r5
 800e590:	0c13      	lsrs	r3, r2, #16
 800e592:	18c9      	adds	r1, r1, r3
 800e594:	0c0b      	lsrs	r3, r1, #16
 800e596:	d107      	bne.n	800e5a8 <_calloc_r+0x7c>
 800e598:	0409      	lsls	r1, r1, #16
 800e59a:	b292      	uxth	r2, r2
 800e59c:	4311      	orrs	r1, r2
 800e59e:	e7d0      	b.n	800e542 <_calloc_r+0x16>
 800e5a0:	2e00      	cmp	r6, #0
 800e5a2:	d101      	bne.n	800e5a8 <_calloc_r+0x7c>
 800e5a4:	1c15      	adds	r5, r2, #0
 800e5a6:	e7ed      	b.n	800e584 <_calloc_r+0x58>
 800e5a8:	f7fc f80a 	bl	800a5c0 <__errno>
 800e5ac:	230c      	movs	r3, #12
 800e5ae:	2500      	movs	r5, #0
 800e5b0:	6003      	str	r3, [r0, #0]
 800e5b2:	0028      	movs	r0, r5
 800e5b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e5b6:	0003      	movs	r3, r0
 800e5b8:	6104      	str	r4, [r0, #16]
 800e5ba:	3318      	adds	r3, #24
 800e5bc:	6144      	str	r4, [r0, #20]
 800e5be:	e7da      	b.n	800e576 <_calloc_r+0x4a>
 800e5c0:	2100      	movs	r1, #0
 800e5c2:	f7fb ff51 	bl	800a468 <memset>
 800e5c6:	e7f4      	b.n	800e5b2 <_calloc_r+0x86>

0800e5c8 <quorem>:
 800e5c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e5ca:	6902      	ldr	r2, [r0, #16]
 800e5cc:	690b      	ldr	r3, [r1, #16]
 800e5ce:	b089      	sub	sp, #36	; 0x24
 800e5d0:	0007      	movs	r7, r0
 800e5d2:	9104      	str	r1, [sp, #16]
 800e5d4:	2000      	movs	r0, #0
 800e5d6:	429a      	cmp	r2, r3
 800e5d8:	db69      	blt.n	800e6ae <quorem+0xe6>
 800e5da:	3b01      	subs	r3, #1
 800e5dc:	009c      	lsls	r4, r3, #2
 800e5de:	9301      	str	r3, [sp, #4]
 800e5e0:	000b      	movs	r3, r1
 800e5e2:	3314      	adds	r3, #20
 800e5e4:	9306      	str	r3, [sp, #24]
 800e5e6:	191b      	adds	r3, r3, r4
 800e5e8:	9305      	str	r3, [sp, #20]
 800e5ea:	003b      	movs	r3, r7
 800e5ec:	3314      	adds	r3, #20
 800e5ee:	9303      	str	r3, [sp, #12]
 800e5f0:	191c      	adds	r4, r3, r4
 800e5f2:	9b05      	ldr	r3, [sp, #20]
 800e5f4:	6826      	ldr	r6, [r4, #0]
 800e5f6:	681d      	ldr	r5, [r3, #0]
 800e5f8:	0030      	movs	r0, r6
 800e5fa:	3501      	adds	r5, #1
 800e5fc:	0029      	movs	r1, r5
 800e5fe:	f7f1 fd9d 	bl	800013c <__udivsi3>
 800e602:	9002      	str	r0, [sp, #8]
 800e604:	42ae      	cmp	r6, r5
 800e606:	d329      	bcc.n	800e65c <quorem+0x94>
 800e608:	9b06      	ldr	r3, [sp, #24]
 800e60a:	2600      	movs	r6, #0
 800e60c:	469c      	mov	ip, r3
 800e60e:	9d03      	ldr	r5, [sp, #12]
 800e610:	9606      	str	r6, [sp, #24]
 800e612:	4662      	mov	r2, ip
 800e614:	ca08      	ldmia	r2!, {r3}
 800e616:	6828      	ldr	r0, [r5, #0]
 800e618:	4694      	mov	ip, r2
 800e61a:	9a02      	ldr	r2, [sp, #8]
 800e61c:	b299      	uxth	r1, r3
 800e61e:	4351      	muls	r1, r2
 800e620:	0c1b      	lsrs	r3, r3, #16
 800e622:	4353      	muls	r3, r2
 800e624:	1989      	adds	r1, r1, r6
 800e626:	0c0a      	lsrs	r2, r1, #16
 800e628:	189b      	adds	r3, r3, r2
 800e62a:	9307      	str	r3, [sp, #28]
 800e62c:	0c1e      	lsrs	r6, r3, #16
 800e62e:	9b06      	ldr	r3, [sp, #24]
 800e630:	b282      	uxth	r2, r0
 800e632:	18d2      	adds	r2, r2, r3
 800e634:	466b      	mov	r3, sp
 800e636:	b289      	uxth	r1, r1
 800e638:	8b9b      	ldrh	r3, [r3, #28]
 800e63a:	1a52      	subs	r2, r2, r1
 800e63c:	0c01      	lsrs	r1, r0, #16
 800e63e:	1ac9      	subs	r1, r1, r3
 800e640:	1413      	asrs	r3, r2, #16
 800e642:	18cb      	adds	r3, r1, r3
 800e644:	1419      	asrs	r1, r3, #16
 800e646:	b292      	uxth	r2, r2
 800e648:	041b      	lsls	r3, r3, #16
 800e64a:	4313      	orrs	r3, r2
 800e64c:	c508      	stmia	r5!, {r3}
 800e64e:	9b05      	ldr	r3, [sp, #20]
 800e650:	9106      	str	r1, [sp, #24]
 800e652:	4563      	cmp	r3, ip
 800e654:	d2dd      	bcs.n	800e612 <quorem+0x4a>
 800e656:	6823      	ldr	r3, [r4, #0]
 800e658:	2b00      	cmp	r3, #0
 800e65a:	d030      	beq.n	800e6be <quorem+0xf6>
 800e65c:	0038      	movs	r0, r7
 800e65e:	9904      	ldr	r1, [sp, #16]
 800e660:	f7fc ff04 	bl	800b46c <__mcmp>
 800e664:	2800      	cmp	r0, #0
 800e666:	db21      	blt.n	800e6ac <quorem+0xe4>
 800e668:	0038      	movs	r0, r7
 800e66a:	2600      	movs	r6, #0
 800e66c:	9b02      	ldr	r3, [sp, #8]
 800e66e:	9c04      	ldr	r4, [sp, #16]
 800e670:	3301      	adds	r3, #1
 800e672:	9302      	str	r3, [sp, #8]
 800e674:	3014      	adds	r0, #20
 800e676:	3414      	adds	r4, #20
 800e678:	6803      	ldr	r3, [r0, #0]
 800e67a:	cc02      	ldmia	r4!, {r1}
 800e67c:	b29d      	uxth	r5, r3
 800e67e:	19ad      	adds	r5, r5, r6
 800e680:	b28a      	uxth	r2, r1
 800e682:	1aaa      	subs	r2, r5, r2
 800e684:	0c09      	lsrs	r1, r1, #16
 800e686:	0c1b      	lsrs	r3, r3, #16
 800e688:	1a5b      	subs	r3, r3, r1
 800e68a:	1411      	asrs	r1, r2, #16
 800e68c:	185b      	adds	r3, r3, r1
 800e68e:	141e      	asrs	r6, r3, #16
 800e690:	b292      	uxth	r2, r2
 800e692:	041b      	lsls	r3, r3, #16
 800e694:	4313      	orrs	r3, r2
 800e696:	c008      	stmia	r0!, {r3}
 800e698:	9b05      	ldr	r3, [sp, #20]
 800e69a:	42a3      	cmp	r3, r4
 800e69c:	d2ec      	bcs.n	800e678 <quorem+0xb0>
 800e69e:	9b01      	ldr	r3, [sp, #4]
 800e6a0:	9a03      	ldr	r2, [sp, #12]
 800e6a2:	009b      	lsls	r3, r3, #2
 800e6a4:	18d3      	adds	r3, r2, r3
 800e6a6:	681a      	ldr	r2, [r3, #0]
 800e6a8:	2a00      	cmp	r2, #0
 800e6aa:	d015      	beq.n	800e6d8 <quorem+0x110>
 800e6ac:	9802      	ldr	r0, [sp, #8]
 800e6ae:	b009      	add	sp, #36	; 0x24
 800e6b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e6b2:	6823      	ldr	r3, [r4, #0]
 800e6b4:	2b00      	cmp	r3, #0
 800e6b6:	d106      	bne.n	800e6c6 <quorem+0xfe>
 800e6b8:	9b01      	ldr	r3, [sp, #4]
 800e6ba:	3b01      	subs	r3, #1
 800e6bc:	9301      	str	r3, [sp, #4]
 800e6be:	9b03      	ldr	r3, [sp, #12]
 800e6c0:	3c04      	subs	r4, #4
 800e6c2:	42a3      	cmp	r3, r4
 800e6c4:	d3f5      	bcc.n	800e6b2 <quorem+0xea>
 800e6c6:	9b01      	ldr	r3, [sp, #4]
 800e6c8:	613b      	str	r3, [r7, #16]
 800e6ca:	e7c7      	b.n	800e65c <quorem+0x94>
 800e6cc:	681a      	ldr	r2, [r3, #0]
 800e6ce:	2a00      	cmp	r2, #0
 800e6d0:	d106      	bne.n	800e6e0 <quorem+0x118>
 800e6d2:	9a01      	ldr	r2, [sp, #4]
 800e6d4:	3a01      	subs	r2, #1
 800e6d6:	9201      	str	r2, [sp, #4]
 800e6d8:	9a03      	ldr	r2, [sp, #12]
 800e6da:	3b04      	subs	r3, #4
 800e6dc:	429a      	cmp	r2, r3
 800e6de:	d3f5      	bcc.n	800e6cc <quorem+0x104>
 800e6e0:	9b01      	ldr	r3, [sp, #4]
 800e6e2:	613b      	str	r3, [r7, #16]
 800e6e4:	e7e2      	b.n	800e6ac <quorem+0xe4>
	...

0800e6e8 <_dtoa_r>:
 800e6e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e6ea:	0014      	movs	r4, r2
 800e6ec:	001d      	movs	r5, r3
 800e6ee:	6b81      	ldr	r1, [r0, #56]	; 0x38
 800e6f0:	b09d      	sub	sp, #116	; 0x74
 800e6f2:	9408      	str	r4, [sp, #32]
 800e6f4:	9509      	str	r5, [sp, #36]	; 0x24
 800e6f6:	9e25      	ldr	r6, [sp, #148]	; 0x94
 800e6f8:	9004      	str	r0, [sp, #16]
 800e6fa:	2900      	cmp	r1, #0
 800e6fc:	d009      	beq.n	800e712 <_dtoa_r+0x2a>
 800e6fe:	2301      	movs	r3, #1
 800e700:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800e702:	4093      	lsls	r3, r2
 800e704:	604a      	str	r2, [r1, #4]
 800e706:	608b      	str	r3, [r1, #8]
 800e708:	f7fc fc56 	bl	800afb8 <_Bfree>
 800e70c:	2300      	movs	r3, #0
 800e70e:	9a04      	ldr	r2, [sp, #16]
 800e710:	6393      	str	r3, [r2, #56]	; 0x38
 800e712:	2d00      	cmp	r5, #0
 800e714:	da1e      	bge.n	800e754 <_dtoa_r+0x6c>
 800e716:	2301      	movs	r3, #1
 800e718:	6033      	str	r3, [r6, #0]
 800e71a:	006b      	lsls	r3, r5, #1
 800e71c:	085b      	lsrs	r3, r3, #1
 800e71e:	9309      	str	r3, [sp, #36]	; 0x24
 800e720:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800e722:	4bb5      	ldr	r3, [pc, #724]	; (800e9f8 <_dtoa_r+0x310>)
 800e724:	4ab4      	ldr	r2, [pc, #720]	; (800e9f8 <_dtoa_r+0x310>)
 800e726:	403b      	ands	r3, r7
 800e728:	4293      	cmp	r3, r2
 800e72a:	d116      	bne.n	800e75a <_dtoa_r+0x72>
 800e72c:	4bb3      	ldr	r3, [pc, #716]	; (800e9fc <_dtoa_r+0x314>)
 800e72e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800e730:	6013      	str	r3, [r2, #0]
 800e732:	033b      	lsls	r3, r7, #12
 800e734:	0b1b      	lsrs	r3, r3, #12
 800e736:	4323      	orrs	r3, r4
 800e738:	d101      	bne.n	800e73e <_dtoa_r+0x56>
 800e73a:	f000 fdb2 	bl	800f2a2 <_dtoa_r+0xbba>
 800e73e:	4bb0      	ldr	r3, [pc, #704]	; (800ea00 <_dtoa_r+0x318>)
 800e740:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800e742:	9306      	str	r3, [sp, #24]
 800e744:	2a00      	cmp	r2, #0
 800e746:	d002      	beq.n	800e74e <_dtoa_r+0x66>
 800e748:	4bae      	ldr	r3, [pc, #696]	; (800ea04 <_dtoa_r+0x31c>)
 800e74a:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800e74c:	6013      	str	r3, [r2, #0]
 800e74e:	9806      	ldr	r0, [sp, #24]
 800e750:	b01d      	add	sp, #116	; 0x74
 800e752:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e754:	2300      	movs	r3, #0
 800e756:	6033      	str	r3, [r6, #0]
 800e758:	e7e2      	b.n	800e720 <_dtoa_r+0x38>
 800e75a:	9a08      	ldr	r2, [sp, #32]
 800e75c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e75e:	9210      	str	r2, [sp, #64]	; 0x40
 800e760:	9311      	str	r3, [sp, #68]	; 0x44
 800e762:	9810      	ldr	r0, [sp, #64]	; 0x40
 800e764:	9911      	ldr	r1, [sp, #68]	; 0x44
 800e766:	2200      	movs	r2, #0
 800e768:	2300      	movs	r3, #0
 800e76a:	f7f1 fe6d 	bl	8000448 <__aeabi_dcmpeq>
 800e76e:	1e06      	subs	r6, r0, #0
 800e770:	d009      	beq.n	800e786 <_dtoa_r+0x9e>
 800e772:	2301      	movs	r3, #1
 800e774:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800e776:	6013      	str	r3, [r2, #0]
 800e778:	4ba3      	ldr	r3, [pc, #652]	; (800ea08 <_dtoa_r+0x320>)
 800e77a:	9306      	str	r3, [sp, #24]
 800e77c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800e77e:	2b00      	cmp	r3, #0
 800e780:	d0e5      	beq.n	800e74e <_dtoa_r+0x66>
 800e782:	4ba2      	ldr	r3, [pc, #648]	; (800ea0c <_dtoa_r+0x324>)
 800e784:	e7e1      	b.n	800e74a <_dtoa_r+0x62>
 800e786:	ab1a      	add	r3, sp, #104	; 0x68
 800e788:	9301      	str	r3, [sp, #4]
 800e78a:	ab1b      	add	r3, sp, #108	; 0x6c
 800e78c:	9300      	str	r3, [sp, #0]
 800e78e:	9804      	ldr	r0, [sp, #16]
 800e790:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800e792:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e794:	f7fc ff86 	bl	800b6a4 <__d2b>
 800e798:	007a      	lsls	r2, r7, #1
 800e79a:	9005      	str	r0, [sp, #20]
 800e79c:	0d52      	lsrs	r2, r2, #21
 800e79e:	d100      	bne.n	800e7a2 <_dtoa_r+0xba>
 800e7a0:	e07b      	b.n	800e89a <_dtoa_r+0x1b2>
 800e7a2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e7a4:	9617      	str	r6, [sp, #92]	; 0x5c
 800e7a6:	0319      	lsls	r1, r3, #12
 800e7a8:	4b99      	ldr	r3, [pc, #612]	; (800ea10 <_dtoa_r+0x328>)
 800e7aa:	0b09      	lsrs	r1, r1, #12
 800e7ac:	430b      	orrs	r3, r1
 800e7ae:	4999      	ldr	r1, [pc, #612]	; (800ea14 <_dtoa_r+0x32c>)
 800e7b0:	1857      	adds	r7, r2, r1
 800e7b2:	9810      	ldr	r0, [sp, #64]	; 0x40
 800e7b4:	9911      	ldr	r1, [sp, #68]	; 0x44
 800e7b6:	0019      	movs	r1, r3
 800e7b8:	2200      	movs	r2, #0
 800e7ba:	4b97      	ldr	r3, [pc, #604]	; (800ea18 <_dtoa_r+0x330>)
 800e7bc:	f7f3 fa18 	bl	8001bf0 <__aeabi_dsub>
 800e7c0:	4a96      	ldr	r2, [pc, #600]	; (800ea1c <_dtoa_r+0x334>)
 800e7c2:	4b97      	ldr	r3, [pc, #604]	; (800ea20 <_dtoa_r+0x338>)
 800e7c4:	f7f2 ff52 	bl	800166c <__aeabi_dmul>
 800e7c8:	4a96      	ldr	r2, [pc, #600]	; (800ea24 <_dtoa_r+0x33c>)
 800e7ca:	4b97      	ldr	r3, [pc, #604]	; (800ea28 <_dtoa_r+0x340>)
 800e7cc:	f7f1 fff4 	bl	80007b8 <__aeabi_dadd>
 800e7d0:	0004      	movs	r4, r0
 800e7d2:	0038      	movs	r0, r7
 800e7d4:	000d      	movs	r5, r1
 800e7d6:	f7f3 fde1 	bl	800239c <__aeabi_i2d>
 800e7da:	4a94      	ldr	r2, [pc, #592]	; (800ea2c <_dtoa_r+0x344>)
 800e7dc:	4b94      	ldr	r3, [pc, #592]	; (800ea30 <_dtoa_r+0x348>)
 800e7de:	f7f2 ff45 	bl	800166c <__aeabi_dmul>
 800e7e2:	0002      	movs	r2, r0
 800e7e4:	000b      	movs	r3, r1
 800e7e6:	0020      	movs	r0, r4
 800e7e8:	0029      	movs	r1, r5
 800e7ea:	f7f1 ffe5 	bl	80007b8 <__aeabi_dadd>
 800e7ee:	0004      	movs	r4, r0
 800e7f0:	000d      	movs	r5, r1
 800e7f2:	f7f3 fd9d 	bl	8002330 <__aeabi_d2iz>
 800e7f6:	2200      	movs	r2, #0
 800e7f8:	9003      	str	r0, [sp, #12]
 800e7fa:	2300      	movs	r3, #0
 800e7fc:	0020      	movs	r0, r4
 800e7fe:	0029      	movs	r1, r5
 800e800:	f7f1 fe28 	bl	8000454 <__aeabi_dcmplt>
 800e804:	2800      	cmp	r0, #0
 800e806:	d00b      	beq.n	800e820 <_dtoa_r+0x138>
 800e808:	9803      	ldr	r0, [sp, #12]
 800e80a:	f7f3 fdc7 	bl	800239c <__aeabi_i2d>
 800e80e:	002b      	movs	r3, r5
 800e810:	0022      	movs	r2, r4
 800e812:	f7f1 fe19 	bl	8000448 <__aeabi_dcmpeq>
 800e816:	4243      	negs	r3, r0
 800e818:	4158      	adcs	r0, r3
 800e81a:	9b03      	ldr	r3, [sp, #12]
 800e81c:	1a1b      	subs	r3, r3, r0
 800e81e:	9303      	str	r3, [sp, #12]
 800e820:	2301      	movs	r3, #1
 800e822:	9316      	str	r3, [sp, #88]	; 0x58
 800e824:	9b03      	ldr	r3, [sp, #12]
 800e826:	2b16      	cmp	r3, #22
 800e828:	d810      	bhi.n	800e84c <_dtoa_r+0x164>
 800e82a:	9810      	ldr	r0, [sp, #64]	; 0x40
 800e82c:	9911      	ldr	r1, [sp, #68]	; 0x44
 800e82e:	9a03      	ldr	r2, [sp, #12]
 800e830:	4b80      	ldr	r3, [pc, #512]	; (800ea34 <_dtoa_r+0x34c>)
 800e832:	00d2      	lsls	r2, r2, #3
 800e834:	189b      	adds	r3, r3, r2
 800e836:	681a      	ldr	r2, [r3, #0]
 800e838:	685b      	ldr	r3, [r3, #4]
 800e83a:	f7f1 fe0b 	bl	8000454 <__aeabi_dcmplt>
 800e83e:	2800      	cmp	r0, #0
 800e840:	d047      	beq.n	800e8d2 <_dtoa_r+0x1ea>
 800e842:	9b03      	ldr	r3, [sp, #12]
 800e844:	3b01      	subs	r3, #1
 800e846:	9303      	str	r3, [sp, #12]
 800e848:	2300      	movs	r3, #0
 800e84a:	9316      	str	r3, [sp, #88]	; 0x58
 800e84c:	2200      	movs	r2, #0
 800e84e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800e850:	920a      	str	r2, [sp, #40]	; 0x28
 800e852:	1bdb      	subs	r3, r3, r7
 800e854:	1e5a      	subs	r2, r3, #1
 800e856:	d53e      	bpl.n	800e8d6 <_dtoa_r+0x1ee>
 800e858:	2201      	movs	r2, #1
 800e85a:	1ad3      	subs	r3, r2, r3
 800e85c:	930a      	str	r3, [sp, #40]	; 0x28
 800e85e:	2300      	movs	r3, #0
 800e860:	930c      	str	r3, [sp, #48]	; 0x30
 800e862:	9b03      	ldr	r3, [sp, #12]
 800e864:	2b00      	cmp	r3, #0
 800e866:	db38      	blt.n	800e8da <_dtoa_r+0x1f2>
 800e868:	9a03      	ldr	r2, [sp, #12]
 800e86a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e86c:	4694      	mov	ip, r2
 800e86e:	4463      	add	r3, ip
 800e870:	930c      	str	r3, [sp, #48]	; 0x30
 800e872:	2300      	movs	r3, #0
 800e874:	9213      	str	r2, [sp, #76]	; 0x4c
 800e876:	930d      	str	r3, [sp, #52]	; 0x34
 800e878:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800e87a:	2401      	movs	r4, #1
 800e87c:	2b09      	cmp	r3, #9
 800e87e:	d867      	bhi.n	800e950 <_dtoa_r+0x268>
 800e880:	2b05      	cmp	r3, #5
 800e882:	dd02      	ble.n	800e88a <_dtoa_r+0x1a2>
 800e884:	2400      	movs	r4, #0
 800e886:	3b04      	subs	r3, #4
 800e888:	9322      	str	r3, [sp, #136]	; 0x88
 800e88a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800e88c:	1e98      	subs	r0, r3, #2
 800e88e:	2803      	cmp	r0, #3
 800e890:	d867      	bhi.n	800e962 <_dtoa_r+0x27a>
 800e892:	f7f1 fc3f 	bl	8000114 <__gnu_thumb1_case_uqi>
 800e896:	3a2b      	.short	0x3a2b
 800e898:	5b38      	.short	0x5b38
 800e89a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800e89c:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 800e89e:	18f6      	adds	r6, r6, r3
 800e8a0:	4b65      	ldr	r3, [pc, #404]	; (800ea38 <_dtoa_r+0x350>)
 800e8a2:	18f2      	adds	r2, r6, r3
 800e8a4:	2a20      	cmp	r2, #32
 800e8a6:	dd0f      	ble.n	800e8c8 <_dtoa_r+0x1e0>
 800e8a8:	2340      	movs	r3, #64	; 0x40
 800e8aa:	1a9b      	subs	r3, r3, r2
 800e8ac:	409f      	lsls	r7, r3
 800e8ae:	4b63      	ldr	r3, [pc, #396]	; (800ea3c <_dtoa_r+0x354>)
 800e8b0:	0038      	movs	r0, r7
 800e8b2:	18f3      	adds	r3, r6, r3
 800e8b4:	40dc      	lsrs	r4, r3
 800e8b6:	4320      	orrs	r0, r4
 800e8b8:	f7f3 fda0 	bl	80023fc <__aeabi_ui2d>
 800e8bc:	2201      	movs	r2, #1
 800e8be:	4b60      	ldr	r3, [pc, #384]	; (800ea40 <_dtoa_r+0x358>)
 800e8c0:	1e77      	subs	r7, r6, #1
 800e8c2:	18cb      	adds	r3, r1, r3
 800e8c4:	9217      	str	r2, [sp, #92]	; 0x5c
 800e8c6:	e776      	b.n	800e7b6 <_dtoa_r+0xce>
 800e8c8:	2320      	movs	r3, #32
 800e8ca:	0020      	movs	r0, r4
 800e8cc:	1a9b      	subs	r3, r3, r2
 800e8ce:	4098      	lsls	r0, r3
 800e8d0:	e7f2      	b.n	800e8b8 <_dtoa_r+0x1d0>
 800e8d2:	9016      	str	r0, [sp, #88]	; 0x58
 800e8d4:	e7ba      	b.n	800e84c <_dtoa_r+0x164>
 800e8d6:	920c      	str	r2, [sp, #48]	; 0x30
 800e8d8:	e7c3      	b.n	800e862 <_dtoa_r+0x17a>
 800e8da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e8dc:	9a03      	ldr	r2, [sp, #12]
 800e8de:	1a9b      	subs	r3, r3, r2
 800e8e0:	930a      	str	r3, [sp, #40]	; 0x28
 800e8e2:	4253      	negs	r3, r2
 800e8e4:	930d      	str	r3, [sp, #52]	; 0x34
 800e8e6:	2300      	movs	r3, #0
 800e8e8:	9313      	str	r3, [sp, #76]	; 0x4c
 800e8ea:	e7c5      	b.n	800e878 <_dtoa_r+0x190>
 800e8ec:	2300      	movs	r3, #0
 800e8ee:	930f      	str	r3, [sp, #60]	; 0x3c
 800e8f0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800e8f2:	930b      	str	r3, [sp, #44]	; 0x2c
 800e8f4:	9307      	str	r3, [sp, #28]
 800e8f6:	2b00      	cmp	r3, #0
 800e8f8:	dc13      	bgt.n	800e922 <_dtoa_r+0x23a>
 800e8fa:	2301      	movs	r3, #1
 800e8fc:	001a      	movs	r2, r3
 800e8fe:	930b      	str	r3, [sp, #44]	; 0x2c
 800e900:	9307      	str	r3, [sp, #28]
 800e902:	9223      	str	r2, [sp, #140]	; 0x8c
 800e904:	e00d      	b.n	800e922 <_dtoa_r+0x23a>
 800e906:	2301      	movs	r3, #1
 800e908:	e7f1      	b.n	800e8ee <_dtoa_r+0x206>
 800e90a:	2300      	movs	r3, #0
 800e90c:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 800e90e:	930f      	str	r3, [sp, #60]	; 0x3c
 800e910:	4694      	mov	ip, r2
 800e912:	9b03      	ldr	r3, [sp, #12]
 800e914:	4463      	add	r3, ip
 800e916:	930b      	str	r3, [sp, #44]	; 0x2c
 800e918:	3301      	adds	r3, #1
 800e91a:	9307      	str	r3, [sp, #28]
 800e91c:	2b00      	cmp	r3, #0
 800e91e:	dc00      	bgt.n	800e922 <_dtoa_r+0x23a>
 800e920:	2301      	movs	r3, #1
 800e922:	2100      	movs	r1, #0
 800e924:	2204      	movs	r2, #4
 800e926:	0010      	movs	r0, r2
 800e928:	3014      	adds	r0, #20
 800e92a:	4298      	cmp	r0, r3
 800e92c:	d91d      	bls.n	800e96a <_dtoa_r+0x282>
 800e92e:	9b04      	ldr	r3, [sp, #16]
 800e930:	0018      	movs	r0, r3
 800e932:	63d9      	str	r1, [r3, #60]	; 0x3c
 800e934:	f7fc fb18 	bl	800af68 <_Balloc>
 800e938:	9006      	str	r0, [sp, #24]
 800e93a:	2800      	cmp	r0, #0
 800e93c:	d118      	bne.n	800e970 <_dtoa_r+0x288>
 800e93e:	21b0      	movs	r1, #176	; 0xb0
 800e940:	4b40      	ldr	r3, [pc, #256]	; (800ea44 <_dtoa_r+0x35c>)
 800e942:	4841      	ldr	r0, [pc, #260]	; (800ea48 <_dtoa_r+0x360>)
 800e944:	9a06      	ldr	r2, [sp, #24]
 800e946:	31ff      	adds	r1, #255	; 0xff
 800e948:	f7ff fdd2 	bl	800e4f0 <__assert_func>
 800e94c:	2301      	movs	r3, #1
 800e94e:	e7dd      	b.n	800e90c <_dtoa_r+0x224>
 800e950:	2300      	movs	r3, #0
 800e952:	940f      	str	r4, [sp, #60]	; 0x3c
 800e954:	9322      	str	r3, [sp, #136]	; 0x88
 800e956:	3b01      	subs	r3, #1
 800e958:	930b      	str	r3, [sp, #44]	; 0x2c
 800e95a:	9307      	str	r3, [sp, #28]
 800e95c:	2200      	movs	r2, #0
 800e95e:	3313      	adds	r3, #19
 800e960:	e7cf      	b.n	800e902 <_dtoa_r+0x21a>
 800e962:	2301      	movs	r3, #1
 800e964:	930f      	str	r3, [sp, #60]	; 0x3c
 800e966:	3b02      	subs	r3, #2
 800e968:	e7f6      	b.n	800e958 <_dtoa_r+0x270>
 800e96a:	3101      	adds	r1, #1
 800e96c:	0052      	lsls	r2, r2, #1
 800e96e:	e7da      	b.n	800e926 <_dtoa_r+0x23e>
 800e970:	9b04      	ldr	r3, [sp, #16]
 800e972:	9a06      	ldr	r2, [sp, #24]
 800e974:	639a      	str	r2, [r3, #56]	; 0x38
 800e976:	9b07      	ldr	r3, [sp, #28]
 800e978:	2b0e      	cmp	r3, #14
 800e97a:	d900      	bls.n	800e97e <_dtoa_r+0x296>
 800e97c:	e0e3      	b.n	800eb46 <_dtoa_r+0x45e>
 800e97e:	2c00      	cmp	r4, #0
 800e980:	d100      	bne.n	800e984 <_dtoa_r+0x29c>
 800e982:	e0e0      	b.n	800eb46 <_dtoa_r+0x45e>
 800e984:	9b03      	ldr	r3, [sp, #12]
 800e986:	2b00      	cmp	r3, #0
 800e988:	dd62      	ble.n	800ea50 <_dtoa_r+0x368>
 800e98a:	210f      	movs	r1, #15
 800e98c:	9a03      	ldr	r2, [sp, #12]
 800e98e:	4b29      	ldr	r3, [pc, #164]	; (800ea34 <_dtoa_r+0x34c>)
 800e990:	400a      	ands	r2, r1
 800e992:	00d2      	lsls	r2, r2, #3
 800e994:	189b      	adds	r3, r3, r2
 800e996:	681e      	ldr	r6, [r3, #0]
 800e998:	685f      	ldr	r7, [r3, #4]
 800e99a:	9b03      	ldr	r3, [sp, #12]
 800e99c:	2402      	movs	r4, #2
 800e99e:	111d      	asrs	r5, r3, #4
 800e9a0:	05db      	lsls	r3, r3, #23
 800e9a2:	d50a      	bpl.n	800e9ba <_dtoa_r+0x2d2>
 800e9a4:	4b29      	ldr	r3, [pc, #164]	; (800ea4c <_dtoa_r+0x364>)
 800e9a6:	400d      	ands	r5, r1
 800e9a8:	6a1a      	ldr	r2, [r3, #32]
 800e9aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e9ac:	9810      	ldr	r0, [sp, #64]	; 0x40
 800e9ae:	9911      	ldr	r1, [sp, #68]	; 0x44
 800e9b0:	f7f2 fa62 	bl	8000e78 <__aeabi_ddiv>
 800e9b4:	9008      	str	r0, [sp, #32]
 800e9b6:	9109      	str	r1, [sp, #36]	; 0x24
 800e9b8:	3401      	adds	r4, #1
 800e9ba:	4b24      	ldr	r3, [pc, #144]	; (800ea4c <_dtoa_r+0x364>)
 800e9bc:	930e      	str	r3, [sp, #56]	; 0x38
 800e9be:	2d00      	cmp	r5, #0
 800e9c0:	d108      	bne.n	800e9d4 <_dtoa_r+0x2ec>
 800e9c2:	9808      	ldr	r0, [sp, #32]
 800e9c4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e9c6:	0032      	movs	r2, r6
 800e9c8:	003b      	movs	r3, r7
 800e9ca:	f7f2 fa55 	bl	8000e78 <__aeabi_ddiv>
 800e9ce:	9008      	str	r0, [sp, #32]
 800e9d0:	9109      	str	r1, [sp, #36]	; 0x24
 800e9d2:	e058      	b.n	800ea86 <_dtoa_r+0x39e>
 800e9d4:	2301      	movs	r3, #1
 800e9d6:	421d      	tst	r5, r3
 800e9d8:	d009      	beq.n	800e9ee <_dtoa_r+0x306>
 800e9da:	18e4      	adds	r4, r4, r3
 800e9dc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e9de:	0030      	movs	r0, r6
 800e9e0:	681a      	ldr	r2, [r3, #0]
 800e9e2:	685b      	ldr	r3, [r3, #4]
 800e9e4:	0039      	movs	r1, r7
 800e9e6:	f7f2 fe41 	bl	800166c <__aeabi_dmul>
 800e9ea:	0006      	movs	r6, r0
 800e9ec:	000f      	movs	r7, r1
 800e9ee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e9f0:	106d      	asrs	r5, r5, #1
 800e9f2:	3308      	adds	r3, #8
 800e9f4:	e7e2      	b.n	800e9bc <_dtoa_r+0x2d4>
 800e9f6:	46c0      	nop			; (mov r8, r8)
 800e9f8:	7ff00000 	.word	0x7ff00000
 800e9fc:	0000270f 	.word	0x0000270f
 800ea00:	08012de5 	.word	0x08012de5
 800ea04:	08012de8 	.word	0x08012de8
 800ea08:	08012d56 	.word	0x08012d56
 800ea0c:	08012d57 	.word	0x08012d57
 800ea10:	3ff00000 	.word	0x3ff00000
 800ea14:	fffffc01 	.word	0xfffffc01
 800ea18:	3ff80000 	.word	0x3ff80000
 800ea1c:	636f4361 	.word	0x636f4361
 800ea20:	3fd287a7 	.word	0x3fd287a7
 800ea24:	8b60c8b3 	.word	0x8b60c8b3
 800ea28:	3fc68a28 	.word	0x3fc68a28
 800ea2c:	509f79fb 	.word	0x509f79fb
 800ea30:	3fd34413 	.word	0x3fd34413
 800ea34:	08012c50 	.word	0x08012c50
 800ea38:	00000432 	.word	0x00000432
 800ea3c:	00000412 	.word	0x00000412
 800ea40:	fe100000 	.word	0xfe100000
 800ea44:	08012b59 	.word	0x08012b59
 800ea48:	08012de9 	.word	0x08012de9
 800ea4c:	08012c28 	.word	0x08012c28
 800ea50:	9b03      	ldr	r3, [sp, #12]
 800ea52:	2402      	movs	r4, #2
 800ea54:	2b00      	cmp	r3, #0
 800ea56:	d016      	beq.n	800ea86 <_dtoa_r+0x39e>
 800ea58:	9810      	ldr	r0, [sp, #64]	; 0x40
 800ea5a:	9911      	ldr	r1, [sp, #68]	; 0x44
 800ea5c:	220f      	movs	r2, #15
 800ea5e:	425d      	negs	r5, r3
 800ea60:	402a      	ands	r2, r5
 800ea62:	4bdd      	ldr	r3, [pc, #884]	; (800edd8 <_dtoa_r+0x6f0>)
 800ea64:	00d2      	lsls	r2, r2, #3
 800ea66:	189b      	adds	r3, r3, r2
 800ea68:	681a      	ldr	r2, [r3, #0]
 800ea6a:	685b      	ldr	r3, [r3, #4]
 800ea6c:	f7f2 fdfe 	bl	800166c <__aeabi_dmul>
 800ea70:	2701      	movs	r7, #1
 800ea72:	2300      	movs	r3, #0
 800ea74:	9008      	str	r0, [sp, #32]
 800ea76:	9109      	str	r1, [sp, #36]	; 0x24
 800ea78:	4ed8      	ldr	r6, [pc, #864]	; (800eddc <_dtoa_r+0x6f4>)
 800ea7a:	112d      	asrs	r5, r5, #4
 800ea7c:	2d00      	cmp	r5, #0
 800ea7e:	d000      	beq.n	800ea82 <_dtoa_r+0x39a>
 800ea80:	e091      	b.n	800eba6 <_dtoa_r+0x4be>
 800ea82:	2b00      	cmp	r3, #0
 800ea84:	d1a3      	bne.n	800e9ce <_dtoa_r+0x2e6>
 800ea86:	9e08      	ldr	r6, [sp, #32]
 800ea88:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800ea8a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800ea8c:	2b00      	cmp	r3, #0
 800ea8e:	d100      	bne.n	800ea92 <_dtoa_r+0x3aa>
 800ea90:	e094      	b.n	800ebbc <_dtoa_r+0x4d4>
 800ea92:	2200      	movs	r2, #0
 800ea94:	0030      	movs	r0, r6
 800ea96:	0039      	movs	r1, r7
 800ea98:	4bd1      	ldr	r3, [pc, #836]	; (800ede0 <_dtoa_r+0x6f8>)
 800ea9a:	f7f1 fcdb 	bl	8000454 <__aeabi_dcmplt>
 800ea9e:	2800      	cmp	r0, #0
 800eaa0:	d100      	bne.n	800eaa4 <_dtoa_r+0x3bc>
 800eaa2:	e08b      	b.n	800ebbc <_dtoa_r+0x4d4>
 800eaa4:	9b07      	ldr	r3, [sp, #28]
 800eaa6:	2b00      	cmp	r3, #0
 800eaa8:	d100      	bne.n	800eaac <_dtoa_r+0x3c4>
 800eaaa:	e087      	b.n	800ebbc <_dtoa_r+0x4d4>
 800eaac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800eaae:	2b00      	cmp	r3, #0
 800eab0:	dd45      	ble.n	800eb3e <_dtoa_r+0x456>
 800eab2:	9b03      	ldr	r3, [sp, #12]
 800eab4:	2200      	movs	r2, #0
 800eab6:	3b01      	subs	r3, #1
 800eab8:	930e      	str	r3, [sp, #56]	; 0x38
 800eaba:	0030      	movs	r0, r6
 800eabc:	4bc9      	ldr	r3, [pc, #804]	; (800ede4 <_dtoa_r+0x6fc>)
 800eabe:	0039      	movs	r1, r7
 800eac0:	f7f2 fdd4 	bl	800166c <__aeabi_dmul>
 800eac4:	9008      	str	r0, [sp, #32]
 800eac6:	9109      	str	r1, [sp, #36]	; 0x24
 800eac8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800eaca:	3401      	adds	r4, #1
 800eacc:	0020      	movs	r0, r4
 800eace:	9e08      	ldr	r6, [sp, #32]
 800ead0:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800ead2:	9312      	str	r3, [sp, #72]	; 0x48
 800ead4:	f7f3 fc62 	bl	800239c <__aeabi_i2d>
 800ead8:	0032      	movs	r2, r6
 800eada:	003b      	movs	r3, r7
 800eadc:	f7f2 fdc6 	bl	800166c <__aeabi_dmul>
 800eae0:	2200      	movs	r2, #0
 800eae2:	4bc1      	ldr	r3, [pc, #772]	; (800ede8 <_dtoa_r+0x700>)
 800eae4:	f7f1 fe68 	bl	80007b8 <__aeabi_dadd>
 800eae8:	4ac0      	ldr	r2, [pc, #768]	; (800edec <_dtoa_r+0x704>)
 800eaea:	9014      	str	r0, [sp, #80]	; 0x50
 800eaec:	9115      	str	r1, [sp, #84]	; 0x54
 800eaee:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800eaf0:	9c15      	ldr	r4, [sp, #84]	; 0x54
 800eaf2:	4694      	mov	ip, r2
 800eaf4:	9308      	str	r3, [sp, #32]
 800eaf6:	9409      	str	r4, [sp, #36]	; 0x24
 800eaf8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800eafa:	4463      	add	r3, ip
 800eafc:	9318      	str	r3, [sp, #96]	; 0x60
 800eafe:	9309      	str	r3, [sp, #36]	; 0x24
 800eb00:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800eb02:	2b00      	cmp	r3, #0
 800eb04:	d15e      	bne.n	800ebc4 <_dtoa_r+0x4dc>
 800eb06:	2200      	movs	r2, #0
 800eb08:	4bb9      	ldr	r3, [pc, #740]	; (800edf0 <_dtoa_r+0x708>)
 800eb0a:	0030      	movs	r0, r6
 800eb0c:	0039      	movs	r1, r7
 800eb0e:	f7f3 f86f 	bl	8001bf0 <__aeabi_dsub>
 800eb12:	9a08      	ldr	r2, [sp, #32]
 800eb14:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800eb16:	0004      	movs	r4, r0
 800eb18:	000d      	movs	r5, r1
 800eb1a:	f7f1 fcaf 	bl	800047c <__aeabi_dcmpgt>
 800eb1e:	2800      	cmp	r0, #0
 800eb20:	d000      	beq.n	800eb24 <_dtoa_r+0x43c>
 800eb22:	e2b3      	b.n	800f08c <_dtoa_r+0x9a4>
 800eb24:	48b3      	ldr	r0, [pc, #716]	; (800edf4 <_dtoa_r+0x70c>)
 800eb26:	9915      	ldr	r1, [sp, #84]	; 0x54
 800eb28:	4684      	mov	ip, r0
 800eb2a:	4461      	add	r1, ip
 800eb2c:	000b      	movs	r3, r1
 800eb2e:	0020      	movs	r0, r4
 800eb30:	0029      	movs	r1, r5
 800eb32:	9a08      	ldr	r2, [sp, #32]
 800eb34:	f7f1 fc8e 	bl	8000454 <__aeabi_dcmplt>
 800eb38:	2800      	cmp	r0, #0
 800eb3a:	d000      	beq.n	800eb3e <_dtoa_r+0x456>
 800eb3c:	e2a3      	b.n	800f086 <_dtoa_r+0x99e>
 800eb3e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800eb40:	9c11      	ldr	r4, [sp, #68]	; 0x44
 800eb42:	9308      	str	r3, [sp, #32]
 800eb44:	9409      	str	r4, [sp, #36]	; 0x24
 800eb46:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800eb48:	2b00      	cmp	r3, #0
 800eb4a:	da00      	bge.n	800eb4e <_dtoa_r+0x466>
 800eb4c:	e179      	b.n	800ee42 <_dtoa_r+0x75a>
 800eb4e:	9a03      	ldr	r2, [sp, #12]
 800eb50:	2a0e      	cmp	r2, #14
 800eb52:	dd00      	ble.n	800eb56 <_dtoa_r+0x46e>
 800eb54:	e175      	b.n	800ee42 <_dtoa_r+0x75a>
 800eb56:	4ba0      	ldr	r3, [pc, #640]	; (800edd8 <_dtoa_r+0x6f0>)
 800eb58:	00d2      	lsls	r2, r2, #3
 800eb5a:	189b      	adds	r3, r3, r2
 800eb5c:	681e      	ldr	r6, [r3, #0]
 800eb5e:	685f      	ldr	r7, [r3, #4]
 800eb60:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800eb62:	2b00      	cmp	r3, #0
 800eb64:	db00      	blt.n	800eb68 <_dtoa_r+0x480>
 800eb66:	e0e5      	b.n	800ed34 <_dtoa_r+0x64c>
 800eb68:	9b07      	ldr	r3, [sp, #28]
 800eb6a:	2b00      	cmp	r3, #0
 800eb6c:	dd00      	ble.n	800eb70 <_dtoa_r+0x488>
 800eb6e:	e0e1      	b.n	800ed34 <_dtoa_r+0x64c>
 800eb70:	d000      	beq.n	800eb74 <_dtoa_r+0x48c>
 800eb72:	e288      	b.n	800f086 <_dtoa_r+0x99e>
 800eb74:	2200      	movs	r2, #0
 800eb76:	0030      	movs	r0, r6
 800eb78:	0039      	movs	r1, r7
 800eb7a:	4b9d      	ldr	r3, [pc, #628]	; (800edf0 <_dtoa_r+0x708>)
 800eb7c:	f7f2 fd76 	bl	800166c <__aeabi_dmul>
 800eb80:	9a08      	ldr	r2, [sp, #32]
 800eb82:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800eb84:	f7f1 fc84 	bl	8000490 <__aeabi_dcmpge>
 800eb88:	9e07      	ldr	r6, [sp, #28]
 800eb8a:	0037      	movs	r7, r6
 800eb8c:	2800      	cmp	r0, #0
 800eb8e:	d000      	beq.n	800eb92 <_dtoa_r+0x4aa>
 800eb90:	e25f      	b.n	800f052 <_dtoa_r+0x96a>
 800eb92:	9b06      	ldr	r3, [sp, #24]
 800eb94:	9a06      	ldr	r2, [sp, #24]
 800eb96:	3301      	adds	r3, #1
 800eb98:	9308      	str	r3, [sp, #32]
 800eb9a:	2331      	movs	r3, #49	; 0x31
 800eb9c:	7013      	strb	r3, [r2, #0]
 800eb9e:	9b03      	ldr	r3, [sp, #12]
 800eba0:	3301      	adds	r3, #1
 800eba2:	9303      	str	r3, [sp, #12]
 800eba4:	e25a      	b.n	800f05c <_dtoa_r+0x974>
 800eba6:	423d      	tst	r5, r7
 800eba8:	d005      	beq.n	800ebb6 <_dtoa_r+0x4ce>
 800ebaa:	6832      	ldr	r2, [r6, #0]
 800ebac:	6873      	ldr	r3, [r6, #4]
 800ebae:	f7f2 fd5d 	bl	800166c <__aeabi_dmul>
 800ebb2:	003b      	movs	r3, r7
 800ebb4:	3401      	adds	r4, #1
 800ebb6:	106d      	asrs	r5, r5, #1
 800ebb8:	3608      	adds	r6, #8
 800ebba:	e75f      	b.n	800ea7c <_dtoa_r+0x394>
 800ebbc:	9b03      	ldr	r3, [sp, #12]
 800ebbe:	930e      	str	r3, [sp, #56]	; 0x38
 800ebc0:	9b07      	ldr	r3, [sp, #28]
 800ebc2:	e783      	b.n	800eacc <_dtoa_r+0x3e4>
 800ebc4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800ebc6:	4b84      	ldr	r3, [pc, #528]	; (800edd8 <_dtoa_r+0x6f0>)
 800ebc8:	3a01      	subs	r2, #1
 800ebca:	00d2      	lsls	r2, r2, #3
 800ebcc:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800ebce:	189b      	adds	r3, r3, r2
 800ebd0:	9c08      	ldr	r4, [sp, #32]
 800ebd2:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800ebd4:	681a      	ldr	r2, [r3, #0]
 800ebd6:	685b      	ldr	r3, [r3, #4]
 800ebd8:	2900      	cmp	r1, #0
 800ebda:	d051      	beq.n	800ec80 <_dtoa_r+0x598>
 800ebdc:	2000      	movs	r0, #0
 800ebde:	4986      	ldr	r1, [pc, #536]	; (800edf8 <_dtoa_r+0x710>)
 800ebe0:	f7f2 f94a 	bl	8000e78 <__aeabi_ddiv>
 800ebe4:	0022      	movs	r2, r4
 800ebe6:	002b      	movs	r3, r5
 800ebe8:	f7f3 f802 	bl	8001bf0 <__aeabi_dsub>
 800ebec:	9a06      	ldr	r2, [sp, #24]
 800ebee:	0004      	movs	r4, r0
 800ebf0:	4694      	mov	ip, r2
 800ebf2:	000d      	movs	r5, r1
 800ebf4:	9b06      	ldr	r3, [sp, #24]
 800ebf6:	9314      	str	r3, [sp, #80]	; 0x50
 800ebf8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ebfa:	4463      	add	r3, ip
 800ebfc:	9318      	str	r3, [sp, #96]	; 0x60
 800ebfe:	0039      	movs	r1, r7
 800ec00:	0030      	movs	r0, r6
 800ec02:	f7f3 fb95 	bl	8002330 <__aeabi_d2iz>
 800ec06:	9012      	str	r0, [sp, #72]	; 0x48
 800ec08:	f7f3 fbc8 	bl	800239c <__aeabi_i2d>
 800ec0c:	0002      	movs	r2, r0
 800ec0e:	000b      	movs	r3, r1
 800ec10:	0030      	movs	r0, r6
 800ec12:	0039      	movs	r1, r7
 800ec14:	f7f2 ffec 	bl	8001bf0 <__aeabi_dsub>
 800ec18:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ec1a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800ec1c:	3301      	adds	r3, #1
 800ec1e:	9308      	str	r3, [sp, #32]
 800ec20:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ec22:	0006      	movs	r6, r0
 800ec24:	3330      	adds	r3, #48	; 0x30
 800ec26:	7013      	strb	r3, [r2, #0]
 800ec28:	0022      	movs	r2, r4
 800ec2a:	002b      	movs	r3, r5
 800ec2c:	000f      	movs	r7, r1
 800ec2e:	f7f1 fc11 	bl	8000454 <__aeabi_dcmplt>
 800ec32:	2800      	cmp	r0, #0
 800ec34:	d174      	bne.n	800ed20 <_dtoa_r+0x638>
 800ec36:	0032      	movs	r2, r6
 800ec38:	003b      	movs	r3, r7
 800ec3a:	2000      	movs	r0, #0
 800ec3c:	4968      	ldr	r1, [pc, #416]	; (800ede0 <_dtoa_r+0x6f8>)
 800ec3e:	f7f2 ffd7 	bl	8001bf0 <__aeabi_dsub>
 800ec42:	0022      	movs	r2, r4
 800ec44:	002b      	movs	r3, r5
 800ec46:	f7f1 fc05 	bl	8000454 <__aeabi_dcmplt>
 800ec4a:	2800      	cmp	r0, #0
 800ec4c:	d000      	beq.n	800ec50 <_dtoa_r+0x568>
 800ec4e:	e0d7      	b.n	800ee00 <_dtoa_r+0x718>
 800ec50:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800ec52:	9a08      	ldr	r2, [sp, #32]
 800ec54:	4293      	cmp	r3, r2
 800ec56:	d100      	bne.n	800ec5a <_dtoa_r+0x572>
 800ec58:	e771      	b.n	800eb3e <_dtoa_r+0x456>
 800ec5a:	2200      	movs	r2, #0
 800ec5c:	0020      	movs	r0, r4
 800ec5e:	0029      	movs	r1, r5
 800ec60:	4b60      	ldr	r3, [pc, #384]	; (800ede4 <_dtoa_r+0x6fc>)
 800ec62:	f7f2 fd03 	bl	800166c <__aeabi_dmul>
 800ec66:	4b5f      	ldr	r3, [pc, #380]	; (800ede4 <_dtoa_r+0x6fc>)
 800ec68:	0004      	movs	r4, r0
 800ec6a:	000d      	movs	r5, r1
 800ec6c:	0030      	movs	r0, r6
 800ec6e:	0039      	movs	r1, r7
 800ec70:	2200      	movs	r2, #0
 800ec72:	f7f2 fcfb 	bl	800166c <__aeabi_dmul>
 800ec76:	9b08      	ldr	r3, [sp, #32]
 800ec78:	0006      	movs	r6, r0
 800ec7a:	000f      	movs	r7, r1
 800ec7c:	9314      	str	r3, [sp, #80]	; 0x50
 800ec7e:	e7be      	b.n	800ebfe <_dtoa_r+0x516>
 800ec80:	0020      	movs	r0, r4
 800ec82:	0029      	movs	r1, r5
 800ec84:	f7f2 fcf2 	bl	800166c <__aeabi_dmul>
 800ec88:	9a06      	ldr	r2, [sp, #24]
 800ec8a:	9b06      	ldr	r3, [sp, #24]
 800ec8c:	4694      	mov	ip, r2
 800ec8e:	9308      	str	r3, [sp, #32]
 800ec90:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ec92:	9014      	str	r0, [sp, #80]	; 0x50
 800ec94:	9115      	str	r1, [sp, #84]	; 0x54
 800ec96:	4463      	add	r3, ip
 800ec98:	9319      	str	r3, [sp, #100]	; 0x64
 800ec9a:	0030      	movs	r0, r6
 800ec9c:	0039      	movs	r1, r7
 800ec9e:	f7f3 fb47 	bl	8002330 <__aeabi_d2iz>
 800eca2:	9018      	str	r0, [sp, #96]	; 0x60
 800eca4:	f7f3 fb7a 	bl	800239c <__aeabi_i2d>
 800eca8:	0002      	movs	r2, r0
 800ecaa:	000b      	movs	r3, r1
 800ecac:	0030      	movs	r0, r6
 800ecae:	0039      	movs	r1, r7
 800ecb0:	f7f2 ff9e 	bl	8001bf0 <__aeabi_dsub>
 800ecb4:	9e18      	ldr	r6, [sp, #96]	; 0x60
 800ecb6:	9b08      	ldr	r3, [sp, #32]
 800ecb8:	3630      	adds	r6, #48	; 0x30
 800ecba:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800ecbc:	701e      	strb	r6, [r3, #0]
 800ecbe:	3301      	adds	r3, #1
 800ecc0:	0004      	movs	r4, r0
 800ecc2:	000d      	movs	r5, r1
 800ecc4:	9308      	str	r3, [sp, #32]
 800ecc6:	4293      	cmp	r3, r2
 800ecc8:	d12d      	bne.n	800ed26 <_dtoa_r+0x63e>
 800ecca:	9814      	ldr	r0, [sp, #80]	; 0x50
 800eccc:	9915      	ldr	r1, [sp, #84]	; 0x54
 800ecce:	9a06      	ldr	r2, [sp, #24]
 800ecd0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ecd2:	4694      	mov	ip, r2
 800ecd4:	4463      	add	r3, ip
 800ecd6:	2200      	movs	r2, #0
 800ecd8:	9308      	str	r3, [sp, #32]
 800ecda:	4b47      	ldr	r3, [pc, #284]	; (800edf8 <_dtoa_r+0x710>)
 800ecdc:	f7f1 fd6c 	bl	80007b8 <__aeabi_dadd>
 800ece0:	0002      	movs	r2, r0
 800ece2:	000b      	movs	r3, r1
 800ece4:	0020      	movs	r0, r4
 800ece6:	0029      	movs	r1, r5
 800ece8:	f7f1 fbc8 	bl	800047c <__aeabi_dcmpgt>
 800ecec:	2800      	cmp	r0, #0
 800ecee:	d000      	beq.n	800ecf2 <_dtoa_r+0x60a>
 800ecf0:	e086      	b.n	800ee00 <_dtoa_r+0x718>
 800ecf2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800ecf4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ecf6:	2000      	movs	r0, #0
 800ecf8:	493f      	ldr	r1, [pc, #252]	; (800edf8 <_dtoa_r+0x710>)
 800ecfa:	f7f2 ff79 	bl	8001bf0 <__aeabi_dsub>
 800ecfe:	0002      	movs	r2, r0
 800ed00:	000b      	movs	r3, r1
 800ed02:	0020      	movs	r0, r4
 800ed04:	0029      	movs	r1, r5
 800ed06:	f7f1 fba5 	bl	8000454 <__aeabi_dcmplt>
 800ed0a:	2800      	cmp	r0, #0
 800ed0c:	d100      	bne.n	800ed10 <_dtoa_r+0x628>
 800ed0e:	e716      	b.n	800eb3e <_dtoa_r+0x456>
 800ed10:	9b08      	ldr	r3, [sp, #32]
 800ed12:	001a      	movs	r2, r3
 800ed14:	3a01      	subs	r2, #1
 800ed16:	9208      	str	r2, [sp, #32]
 800ed18:	7812      	ldrb	r2, [r2, #0]
 800ed1a:	2a30      	cmp	r2, #48	; 0x30
 800ed1c:	d0f8      	beq.n	800ed10 <_dtoa_r+0x628>
 800ed1e:	9308      	str	r3, [sp, #32]
 800ed20:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ed22:	9303      	str	r3, [sp, #12]
 800ed24:	e046      	b.n	800edb4 <_dtoa_r+0x6cc>
 800ed26:	2200      	movs	r2, #0
 800ed28:	4b2e      	ldr	r3, [pc, #184]	; (800ede4 <_dtoa_r+0x6fc>)
 800ed2a:	f7f2 fc9f 	bl	800166c <__aeabi_dmul>
 800ed2e:	0006      	movs	r6, r0
 800ed30:	000f      	movs	r7, r1
 800ed32:	e7b2      	b.n	800ec9a <_dtoa_r+0x5b2>
 800ed34:	9b06      	ldr	r3, [sp, #24]
 800ed36:	9a06      	ldr	r2, [sp, #24]
 800ed38:	930a      	str	r3, [sp, #40]	; 0x28
 800ed3a:	9b07      	ldr	r3, [sp, #28]
 800ed3c:	9c08      	ldr	r4, [sp, #32]
 800ed3e:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800ed40:	3b01      	subs	r3, #1
 800ed42:	189b      	adds	r3, r3, r2
 800ed44:	930b      	str	r3, [sp, #44]	; 0x2c
 800ed46:	0032      	movs	r2, r6
 800ed48:	003b      	movs	r3, r7
 800ed4a:	0020      	movs	r0, r4
 800ed4c:	0029      	movs	r1, r5
 800ed4e:	f7f2 f893 	bl	8000e78 <__aeabi_ddiv>
 800ed52:	f7f3 faed 	bl	8002330 <__aeabi_d2iz>
 800ed56:	9007      	str	r0, [sp, #28]
 800ed58:	f7f3 fb20 	bl	800239c <__aeabi_i2d>
 800ed5c:	0032      	movs	r2, r6
 800ed5e:	003b      	movs	r3, r7
 800ed60:	f7f2 fc84 	bl	800166c <__aeabi_dmul>
 800ed64:	0002      	movs	r2, r0
 800ed66:	000b      	movs	r3, r1
 800ed68:	0020      	movs	r0, r4
 800ed6a:	0029      	movs	r1, r5
 800ed6c:	f7f2 ff40 	bl	8001bf0 <__aeabi_dsub>
 800ed70:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ed72:	001a      	movs	r2, r3
 800ed74:	3201      	adds	r2, #1
 800ed76:	920a      	str	r2, [sp, #40]	; 0x28
 800ed78:	9208      	str	r2, [sp, #32]
 800ed7a:	9a07      	ldr	r2, [sp, #28]
 800ed7c:	3230      	adds	r2, #48	; 0x30
 800ed7e:	701a      	strb	r2, [r3, #0]
 800ed80:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ed82:	429a      	cmp	r2, r3
 800ed84:	d14f      	bne.n	800ee26 <_dtoa_r+0x73e>
 800ed86:	0002      	movs	r2, r0
 800ed88:	000b      	movs	r3, r1
 800ed8a:	f7f1 fd15 	bl	80007b8 <__aeabi_dadd>
 800ed8e:	0032      	movs	r2, r6
 800ed90:	003b      	movs	r3, r7
 800ed92:	0004      	movs	r4, r0
 800ed94:	000d      	movs	r5, r1
 800ed96:	f7f1 fb71 	bl	800047c <__aeabi_dcmpgt>
 800ed9a:	2800      	cmp	r0, #0
 800ed9c:	d12e      	bne.n	800edfc <_dtoa_r+0x714>
 800ed9e:	0032      	movs	r2, r6
 800eda0:	003b      	movs	r3, r7
 800eda2:	0020      	movs	r0, r4
 800eda4:	0029      	movs	r1, r5
 800eda6:	f7f1 fb4f 	bl	8000448 <__aeabi_dcmpeq>
 800edaa:	2800      	cmp	r0, #0
 800edac:	d002      	beq.n	800edb4 <_dtoa_r+0x6cc>
 800edae:	9b07      	ldr	r3, [sp, #28]
 800edb0:	07de      	lsls	r6, r3, #31
 800edb2:	d423      	bmi.n	800edfc <_dtoa_r+0x714>
 800edb4:	9905      	ldr	r1, [sp, #20]
 800edb6:	9804      	ldr	r0, [sp, #16]
 800edb8:	f7fc f8fe 	bl	800afb8 <_Bfree>
 800edbc:	2300      	movs	r3, #0
 800edbe:	9a08      	ldr	r2, [sp, #32]
 800edc0:	7013      	strb	r3, [r2, #0]
 800edc2:	9b03      	ldr	r3, [sp, #12]
 800edc4:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800edc6:	3301      	adds	r3, #1
 800edc8:	6013      	str	r3, [r2, #0]
 800edca:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800edcc:	2b00      	cmp	r3, #0
 800edce:	d100      	bne.n	800edd2 <_dtoa_r+0x6ea>
 800edd0:	e4bd      	b.n	800e74e <_dtoa_r+0x66>
 800edd2:	9a08      	ldr	r2, [sp, #32]
 800edd4:	601a      	str	r2, [r3, #0]
 800edd6:	e4ba      	b.n	800e74e <_dtoa_r+0x66>
 800edd8:	08012c50 	.word	0x08012c50
 800eddc:	08012c28 	.word	0x08012c28
 800ede0:	3ff00000 	.word	0x3ff00000
 800ede4:	40240000 	.word	0x40240000
 800ede8:	401c0000 	.word	0x401c0000
 800edec:	fcc00000 	.word	0xfcc00000
 800edf0:	40140000 	.word	0x40140000
 800edf4:	7cc00000 	.word	0x7cc00000
 800edf8:	3fe00000 	.word	0x3fe00000
 800edfc:	9b03      	ldr	r3, [sp, #12]
 800edfe:	930e      	str	r3, [sp, #56]	; 0x38
 800ee00:	9b08      	ldr	r3, [sp, #32]
 800ee02:	9308      	str	r3, [sp, #32]
 800ee04:	3b01      	subs	r3, #1
 800ee06:	781a      	ldrb	r2, [r3, #0]
 800ee08:	2a39      	cmp	r2, #57	; 0x39
 800ee0a:	d108      	bne.n	800ee1e <_dtoa_r+0x736>
 800ee0c:	9a06      	ldr	r2, [sp, #24]
 800ee0e:	429a      	cmp	r2, r3
 800ee10:	d1f7      	bne.n	800ee02 <_dtoa_r+0x71a>
 800ee12:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ee14:	9906      	ldr	r1, [sp, #24]
 800ee16:	3201      	adds	r2, #1
 800ee18:	920e      	str	r2, [sp, #56]	; 0x38
 800ee1a:	2230      	movs	r2, #48	; 0x30
 800ee1c:	700a      	strb	r2, [r1, #0]
 800ee1e:	781a      	ldrb	r2, [r3, #0]
 800ee20:	3201      	adds	r2, #1
 800ee22:	701a      	strb	r2, [r3, #0]
 800ee24:	e77c      	b.n	800ed20 <_dtoa_r+0x638>
 800ee26:	2200      	movs	r2, #0
 800ee28:	4ba9      	ldr	r3, [pc, #676]	; (800f0d0 <_dtoa_r+0x9e8>)
 800ee2a:	f7f2 fc1f 	bl	800166c <__aeabi_dmul>
 800ee2e:	2200      	movs	r2, #0
 800ee30:	2300      	movs	r3, #0
 800ee32:	0004      	movs	r4, r0
 800ee34:	000d      	movs	r5, r1
 800ee36:	f7f1 fb07 	bl	8000448 <__aeabi_dcmpeq>
 800ee3a:	2800      	cmp	r0, #0
 800ee3c:	d100      	bne.n	800ee40 <_dtoa_r+0x758>
 800ee3e:	e782      	b.n	800ed46 <_dtoa_r+0x65e>
 800ee40:	e7b8      	b.n	800edb4 <_dtoa_r+0x6cc>
 800ee42:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 800ee44:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800ee46:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800ee48:	2f00      	cmp	r7, #0
 800ee4a:	d012      	beq.n	800ee72 <_dtoa_r+0x78a>
 800ee4c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800ee4e:	2a01      	cmp	r2, #1
 800ee50:	dc6e      	bgt.n	800ef30 <_dtoa_r+0x848>
 800ee52:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800ee54:	2a00      	cmp	r2, #0
 800ee56:	d065      	beq.n	800ef24 <_dtoa_r+0x83c>
 800ee58:	4a9e      	ldr	r2, [pc, #632]	; (800f0d4 <_dtoa_r+0x9ec>)
 800ee5a:	189b      	adds	r3, r3, r2
 800ee5c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ee5e:	2101      	movs	r1, #1
 800ee60:	18d2      	adds	r2, r2, r3
 800ee62:	920a      	str	r2, [sp, #40]	; 0x28
 800ee64:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ee66:	9804      	ldr	r0, [sp, #16]
 800ee68:	18d3      	adds	r3, r2, r3
 800ee6a:	930c      	str	r3, [sp, #48]	; 0x30
 800ee6c:	f7fc f986 	bl	800b17c <__i2b>
 800ee70:	0007      	movs	r7, r0
 800ee72:	2c00      	cmp	r4, #0
 800ee74:	d00e      	beq.n	800ee94 <_dtoa_r+0x7ac>
 800ee76:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ee78:	2b00      	cmp	r3, #0
 800ee7a:	dd0b      	ble.n	800ee94 <_dtoa_r+0x7ac>
 800ee7c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ee7e:	0023      	movs	r3, r4
 800ee80:	4294      	cmp	r4, r2
 800ee82:	dd00      	ble.n	800ee86 <_dtoa_r+0x79e>
 800ee84:	0013      	movs	r3, r2
 800ee86:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ee88:	1ae4      	subs	r4, r4, r3
 800ee8a:	1ad2      	subs	r2, r2, r3
 800ee8c:	920a      	str	r2, [sp, #40]	; 0x28
 800ee8e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ee90:	1ad3      	subs	r3, r2, r3
 800ee92:	930c      	str	r3, [sp, #48]	; 0x30
 800ee94:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ee96:	2b00      	cmp	r3, #0
 800ee98:	d01e      	beq.n	800eed8 <_dtoa_r+0x7f0>
 800ee9a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ee9c:	2b00      	cmp	r3, #0
 800ee9e:	d05c      	beq.n	800ef5a <_dtoa_r+0x872>
 800eea0:	2d00      	cmp	r5, #0
 800eea2:	dd10      	ble.n	800eec6 <_dtoa_r+0x7de>
 800eea4:	0039      	movs	r1, r7
 800eea6:	002a      	movs	r2, r5
 800eea8:	9804      	ldr	r0, [sp, #16]
 800eeaa:	f7fc fa2f 	bl	800b30c <__pow5mult>
 800eeae:	9a05      	ldr	r2, [sp, #20]
 800eeb0:	0001      	movs	r1, r0
 800eeb2:	0007      	movs	r7, r0
 800eeb4:	9804      	ldr	r0, [sp, #16]
 800eeb6:	f7fc f979 	bl	800b1ac <__multiply>
 800eeba:	0006      	movs	r6, r0
 800eebc:	9905      	ldr	r1, [sp, #20]
 800eebe:	9804      	ldr	r0, [sp, #16]
 800eec0:	f7fc f87a 	bl	800afb8 <_Bfree>
 800eec4:	9605      	str	r6, [sp, #20]
 800eec6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800eec8:	1b5a      	subs	r2, r3, r5
 800eeca:	42ab      	cmp	r3, r5
 800eecc:	d004      	beq.n	800eed8 <_dtoa_r+0x7f0>
 800eece:	9905      	ldr	r1, [sp, #20]
 800eed0:	9804      	ldr	r0, [sp, #16]
 800eed2:	f7fc fa1b 	bl	800b30c <__pow5mult>
 800eed6:	9005      	str	r0, [sp, #20]
 800eed8:	2101      	movs	r1, #1
 800eeda:	9804      	ldr	r0, [sp, #16]
 800eedc:	f7fc f94e 	bl	800b17c <__i2b>
 800eee0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800eee2:	0006      	movs	r6, r0
 800eee4:	2b00      	cmp	r3, #0
 800eee6:	dd3a      	ble.n	800ef5e <_dtoa_r+0x876>
 800eee8:	001a      	movs	r2, r3
 800eeea:	0001      	movs	r1, r0
 800eeec:	9804      	ldr	r0, [sp, #16]
 800eeee:	f7fc fa0d 	bl	800b30c <__pow5mult>
 800eef2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800eef4:	0006      	movs	r6, r0
 800eef6:	2500      	movs	r5, #0
 800eef8:	2b01      	cmp	r3, #1
 800eefa:	dc38      	bgt.n	800ef6e <_dtoa_r+0x886>
 800eefc:	2500      	movs	r5, #0
 800eefe:	9b08      	ldr	r3, [sp, #32]
 800ef00:	42ab      	cmp	r3, r5
 800ef02:	d130      	bne.n	800ef66 <_dtoa_r+0x87e>
 800ef04:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ef06:	031b      	lsls	r3, r3, #12
 800ef08:	42ab      	cmp	r3, r5
 800ef0a:	d12c      	bne.n	800ef66 <_dtoa_r+0x87e>
 800ef0c:	4b72      	ldr	r3, [pc, #456]	; (800f0d8 <_dtoa_r+0x9f0>)
 800ef0e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ef10:	4213      	tst	r3, r2
 800ef12:	d028      	beq.n	800ef66 <_dtoa_r+0x87e>
 800ef14:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ef16:	3501      	adds	r5, #1
 800ef18:	3301      	adds	r3, #1
 800ef1a:	930a      	str	r3, [sp, #40]	; 0x28
 800ef1c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ef1e:	3301      	adds	r3, #1
 800ef20:	930c      	str	r3, [sp, #48]	; 0x30
 800ef22:	e020      	b.n	800ef66 <_dtoa_r+0x87e>
 800ef24:	2336      	movs	r3, #54	; 0x36
 800ef26:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800ef28:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800ef2a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800ef2c:	1a9b      	subs	r3, r3, r2
 800ef2e:	e795      	b.n	800ee5c <_dtoa_r+0x774>
 800ef30:	9b07      	ldr	r3, [sp, #28]
 800ef32:	1e5d      	subs	r5, r3, #1
 800ef34:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ef36:	42ab      	cmp	r3, r5
 800ef38:	db07      	blt.n	800ef4a <_dtoa_r+0x862>
 800ef3a:	1b5d      	subs	r5, r3, r5
 800ef3c:	9b07      	ldr	r3, [sp, #28]
 800ef3e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800ef40:	2b00      	cmp	r3, #0
 800ef42:	da8b      	bge.n	800ee5c <_dtoa_r+0x774>
 800ef44:	1ae4      	subs	r4, r4, r3
 800ef46:	2300      	movs	r3, #0
 800ef48:	e788      	b.n	800ee5c <_dtoa_r+0x774>
 800ef4a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ef4c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800ef4e:	1aeb      	subs	r3, r5, r3
 800ef50:	18d3      	adds	r3, r2, r3
 800ef52:	950d      	str	r5, [sp, #52]	; 0x34
 800ef54:	9313      	str	r3, [sp, #76]	; 0x4c
 800ef56:	2500      	movs	r5, #0
 800ef58:	e7f0      	b.n	800ef3c <_dtoa_r+0x854>
 800ef5a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ef5c:	e7b7      	b.n	800eece <_dtoa_r+0x7e6>
 800ef5e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800ef60:	2500      	movs	r5, #0
 800ef62:	2b01      	cmp	r3, #1
 800ef64:	ddca      	ble.n	800eefc <_dtoa_r+0x814>
 800ef66:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ef68:	2001      	movs	r0, #1
 800ef6a:	2b00      	cmp	r3, #0
 800ef6c:	d008      	beq.n	800ef80 <_dtoa_r+0x898>
 800ef6e:	6933      	ldr	r3, [r6, #16]
 800ef70:	3303      	adds	r3, #3
 800ef72:	009b      	lsls	r3, r3, #2
 800ef74:	18f3      	adds	r3, r6, r3
 800ef76:	6858      	ldr	r0, [r3, #4]
 800ef78:	f7fc f8b8 	bl	800b0ec <__hi0bits>
 800ef7c:	2320      	movs	r3, #32
 800ef7e:	1a18      	subs	r0, r3, r0
 800ef80:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ef82:	1818      	adds	r0, r3, r0
 800ef84:	0002      	movs	r2, r0
 800ef86:	231f      	movs	r3, #31
 800ef88:	401a      	ands	r2, r3
 800ef8a:	4218      	tst	r0, r3
 800ef8c:	d047      	beq.n	800f01e <_dtoa_r+0x936>
 800ef8e:	3301      	adds	r3, #1
 800ef90:	1a9b      	subs	r3, r3, r2
 800ef92:	2b04      	cmp	r3, #4
 800ef94:	dd3f      	ble.n	800f016 <_dtoa_r+0x92e>
 800ef96:	231c      	movs	r3, #28
 800ef98:	1a9b      	subs	r3, r3, r2
 800ef9a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ef9c:	18e4      	adds	r4, r4, r3
 800ef9e:	18d2      	adds	r2, r2, r3
 800efa0:	920a      	str	r2, [sp, #40]	; 0x28
 800efa2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800efa4:	18d3      	adds	r3, r2, r3
 800efa6:	930c      	str	r3, [sp, #48]	; 0x30
 800efa8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800efaa:	2b00      	cmp	r3, #0
 800efac:	dd05      	ble.n	800efba <_dtoa_r+0x8d2>
 800efae:	001a      	movs	r2, r3
 800efb0:	9905      	ldr	r1, [sp, #20]
 800efb2:	9804      	ldr	r0, [sp, #16]
 800efb4:	f7fc f9ec 	bl	800b390 <__lshift>
 800efb8:	9005      	str	r0, [sp, #20]
 800efba:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800efbc:	2b00      	cmp	r3, #0
 800efbe:	dd05      	ble.n	800efcc <_dtoa_r+0x8e4>
 800efc0:	0031      	movs	r1, r6
 800efc2:	001a      	movs	r2, r3
 800efc4:	9804      	ldr	r0, [sp, #16]
 800efc6:	f7fc f9e3 	bl	800b390 <__lshift>
 800efca:	0006      	movs	r6, r0
 800efcc:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800efce:	2b00      	cmp	r3, #0
 800efd0:	d027      	beq.n	800f022 <_dtoa_r+0x93a>
 800efd2:	0031      	movs	r1, r6
 800efd4:	9805      	ldr	r0, [sp, #20]
 800efd6:	f7fc fa49 	bl	800b46c <__mcmp>
 800efda:	2800      	cmp	r0, #0
 800efdc:	da21      	bge.n	800f022 <_dtoa_r+0x93a>
 800efde:	9b03      	ldr	r3, [sp, #12]
 800efe0:	220a      	movs	r2, #10
 800efe2:	3b01      	subs	r3, #1
 800efe4:	9303      	str	r3, [sp, #12]
 800efe6:	9905      	ldr	r1, [sp, #20]
 800efe8:	2300      	movs	r3, #0
 800efea:	9804      	ldr	r0, [sp, #16]
 800efec:	f7fb ffee 	bl	800afcc <__multadd>
 800eff0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800eff2:	9005      	str	r0, [sp, #20]
 800eff4:	2b00      	cmp	r3, #0
 800eff6:	d100      	bne.n	800effa <_dtoa_r+0x912>
 800eff8:	e15d      	b.n	800f2b6 <_dtoa_r+0xbce>
 800effa:	2300      	movs	r3, #0
 800effc:	0039      	movs	r1, r7
 800effe:	220a      	movs	r2, #10
 800f000:	9804      	ldr	r0, [sp, #16]
 800f002:	f7fb ffe3 	bl	800afcc <__multadd>
 800f006:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f008:	0007      	movs	r7, r0
 800f00a:	2b00      	cmp	r3, #0
 800f00c:	dc49      	bgt.n	800f0a2 <_dtoa_r+0x9ba>
 800f00e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800f010:	2b02      	cmp	r3, #2
 800f012:	dc0e      	bgt.n	800f032 <_dtoa_r+0x94a>
 800f014:	e045      	b.n	800f0a2 <_dtoa_r+0x9ba>
 800f016:	2b04      	cmp	r3, #4
 800f018:	d0c6      	beq.n	800efa8 <_dtoa_r+0x8c0>
 800f01a:	331c      	adds	r3, #28
 800f01c:	e7bd      	b.n	800ef9a <_dtoa_r+0x8b2>
 800f01e:	0013      	movs	r3, r2
 800f020:	e7fb      	b.n	800f01a <_dtoa_r+0x932>
 800f022:	9b07      	ldr	r3, [sp, #28]
 800f024:	2b00      	cmp	r3, #0
 800f026:	dc36      	bgt.n	800f096 <_dtoa_r+0x9ae>
 800f028:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800f02a:	2b02      	cmp	r3, #2
 800f02c:	dd33      	ble.n	800f096 <_dtoa_r+0x9ae>
 800f02e:	9b07      	ldr	r3, [sp, #28]
 800f030:	930b      	str	r3, [sp, #44]	; 0x2c
 800f032:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f034:	2b00      	cmp	r3, #0
 800f036:	d10c      	bne.n	800f052 <_dtoa_r+0x96a>
 800f038:	0031      	movs	r1, r6
 800f03a:	2205      	movs	r2, #5
 800f03c:	9804      	ldr	r0, [sp, #16]
 800f03e:	f7fb ffc5 	bl	800afcc <__multadd>
 800f042:	0006      	movs	r6, r0
 800f044:	0001      	movs	r1, r0
 800f046:	9805      	ldr	r0, [sp, #20]
 800f048:	f7fc fa10 	bl	800b46c <__mcmp>
 800f04c:	2800      	cmp	r0, #0
 800f04e:	dd00      	ble.n	800f052 <_dtoa_r+0x96a>
 800f050:	e59f      	b.n	800eb92 <_dtoa_r+0x4aa>
 800f052:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800f054:	43db      	mvns	r3, r3
 800f056:	9303      	str	r3, [sp, #12]
 800f058:	9b06      	ldr	r3, [sp, #24]
 800f05a:	9308      	str	r3, [sp, #32]
 800f05c:	2500      	movs	r5, #0
 800f05e:	0031      	movs	r1, r6
 800f060:	9804      	ldr	r0, [sp, #16]
 800f062:	f7fb ffa9 	bl	800afb8 <_Bfree>
 800f066:	2f00      	cmp	r7, #0
 800f068:	d100      	bne.n	800f06c <_dtoa_r+0x984>
 800f06a:	e6a3      	b.n	800edb4 <_dtoa_r+0x6cc>
 800f06c:	2d00      	cmp	r5, #0
 800f06e:	d005      	beq.n	800f07c <_dtoa_r+0x994>
 800f070:	42bd      	cmp	r5, r7
 800f072:	d003      	beq.n	800f07c <_dtoa_r+0x994>
 800f074:	0029      	movs	r1, r5
 800f076:	9804      	ldr	r0, [sp, #16]
 800f078:	f7fb ff9e 	bl	800afb8 <_Bfree>
 800f07c:	0039      	movs	r1, r7
 800f07e:	9804      	ldr	r0, [sp, #16]
 800f080:	f7fb ff9a 	bl	800afb8 <_Bfree>
 800f084:	e696      	b.n	800edb4 <_dtoa_r+0x6cc>
 800f086:	2600      	movs	r6, #0
 800f088:	0037      	movs	r7, r6
 800f08a:	e7e2      	b.n	800f052 <_dtoa_r+0x96a>
 800f08c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f08e:	9e12      	ldr	r6, [sp, #72]	; 0x48
 800f090:	9303      	str	r3, [sp, #12]
 800f092:	0037      	movs	r7, r6
 800f094:	e57d      	b.n	800eb92 <_dtoa_r+0x4aa>
 800f096:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f098:	2b00      	cmp	r3, #0
 800f09a:	d100      	bne.n	800f09e <_dtoa_r+0x9b6>
 800f09c:	e0c3      	b.n	800f226 <_dtoa_r+0xb3e>
 800f09e:	9b07      	ldr	r3, [sp, #28]
 800f0a0:	930b      	str	r3, [sp, #44]	; 0x2c
 800f0a2:	2c00      	cmp	r4, #0
 800f0a4:	dd05      	ble.n	800f0b2 <_dtoa_r+0x9ca>
 800f0a6:	0039      	movs	r1, r7
 800f0a8:	0022      	movs	r2, r4
 800f0aa:	9804      	ldr	r0, [sp, #16]
 800f0ac:	f7fc f970 	bl	800b390 <__lshift>
 800f0b0:	0007      	movs	r7, r0
 800f0b2:	0038      	movs	r0, r7
 800f0b4:	2d00      	cmp	r5, #0
 800f0b6:	d024      	beq.n	800f102 <_dtoa_r+0xa1a>
 800f0b8:	6879      	ldr	r1, [r7, #4]
 800f0ba:	9804      	ldr	r0, [sp, #16]
 800f0bc:	f7fb ff54 	bl	800af68 <_Balloc>
 800f0c0:	1e04      	subs	r4, r0, #0
 800f0c2:	d111      	bne.n	800f0e8 <_dtoa_r+0xa00>
 800f0c4:	0022      	movs	r2, r4
 800f0c6:	4b05      	ldr	r3, [pc, #20]	; (800f0dc <_dtoa_r+0x9f4>)
 800f0c8:	4805      	ldr	r0, [pc, #20]	; (800f0e0 <_dtoa_r+0x9f8>)
 800f0ca:	4906      	ldr	r1, [pc, #24]	; (800f0e4 <_dtoa_r+0x9fc>)
 800f0cc:	e43c      	b.n	800e948 <_dtoa_r+0x260>
 800f0ce:	46c0      	nop			; (mov r8, r8)
 800f0d0:	40240000 	.word	0x40240000
 800f0d4:	00000433 	.word	0x00000433
 800f0d8:	7ff00000 	.word	0x7ff00000
 800f0dc:	08012b59 	.word	0x08012b59
 800f0e0:	08012de9 	.word	0x08012de9
 800f0e4:	000002ef 	.word	0x000002ef
 800f0e8:	0039      	movs	r1, r7
 800f0ea:	693a      	ldr	r2, [r7, #16]
 800f0ec:	310c      	adds	r1, #12
 800f0ee:	3202      	adds	r2, #2
 800f0f0:	0092      	lsls	r2, r2, #2
 800f0f2:	300c      	adds	r0, #12
 800f0f4:	f7fb fa9d 	bl	800a632 <memcpy>
 800f0f8:	2201      	movs	r2, #1
 800f0fa:	0021      	movs	r1, r4
 800f0fc:	9804      	ldr	r0, [sp, #16]
 800f0fe:	f7fc f947 	bl	800b390 <__lshift>
 800f102:	9b06      	ldr	r3, [sp, #24]
 800f104:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800f106:	9307      	str	r3, [sp, #28]
 800f108:	3b01      	subs	r3, #1
 800f10a:	189b      	adds	r3, r3, r2
 800f10c:	2201      	movs	r2, #1
 800f10e:	003d      	movs	r5, r7
 800f110:	0007      	movs	r7, r0
 800f112:	930e      	str	r3, [sp, #56]	; 0x38
 800f114:	9b08      	ldr	r3, [sp, #32]
 800f116:	4013      	ands	r3, r2
 800f118:	930d      	str	r3, [sp, #52]	; 0x34
 800f11a:	0031      	movs	r1, r6
 800f11c:	9805      	ldr	r0, [sp, #20]
 800f11e:	f7ff fa53 	bl	800e5c8 <quorem>
 800f122:	0029      	movs	r1, r5
 800f124:	0004      	movs	r4, r0
 800f126:	900b      	str	r0, [sp, #44]	; 0x2c
 800f128:	9805      	ldr	r0, [sp, #20]
 800f12a:	f7fc f99f 	bl	800b46c <__mcmp>
 800f12e:	003a      	movs	r2, r7
 800f130:	900c      	str	r0, [sp, #48]	; 0x30
 800f132:	0031      	movs	r1, r6
 800f134:	9804      	ldr	r0, [sp, #16]
 800f136:	f7fc f9b5 	bl	800b4a4 <__mdiff>
 800f13a:	2201      	movs	r2, #1
 800f13c:	68c3      	ldr	r3, [r0, #12]
 800f13e:	3430      	adds	r4, #48	; 0x30
 800f140:	9008      	str	r0, [sp, #32]
 800f142:	920a      	str	r2, [sp, #40]	; 0x28
 800f144:	2b00      	cmp	r3, #0
 800f146:	d104      	bne.n	800f152 <_dtoa_r+0xa6a>
 800f148:	0001      	movs	r1, r0
 800f14a:	9805      	ldr	r0, [sp, #20]
 800f14c:	f7fc f98e 	bl	800b46c <__mcmp>
 800f150:	900a      	str	r0, [sp, #40]	; 0x28
 800f152:	9908      	ldr	r1, [sp, #32]
 800f154:	9804      	ldr	r0, [sp, #16]
 800f156:	f7fb ff2f 	bl	800afb8 <_Bfree>
 800f15a:	9b07      	ldr	r3, [sp, #28]
 800f15c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f15e:	3301      	adds	r3, #1
 800f160:	9308      	str	r3, [sp, #32]
 800f162:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800f164:	4313      	orrs	r3, r2
 800f166:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800f168:	4313      	orrs	r3, r2
 800f16a:	d109      	bne.n	800f180 <_dtoa_r+0xa98>
 800f16c:	2c39      	cmp	r4, #57	; 0x39
 800f16e:	d022      	beq.n	800f1b6 <_dtoa_r+0xace>
 800f170:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f172:	2b00      	cmp	r3, #0
 800f174:	dd01      	ble.n	800f17a <_dtoa_r+0xa92>
 800f176:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800f178:	3431      	adds	r4, #49	; 0x31
 800f17a:	9b07      	ldr	r3, [sp, #28]
 800f17c:	701c      	strb	r4, [r3, #0]
 800f17e:	e76e      	b.n	800f05e <_dtoa_r+0x976>
 800f180:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f182:	2b00      	cmp	r3, #0
 800f184:	db04      	blt.n	800f190 <_dtoa_r+0xaa8>
 800f186:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800f188:	4313      	orrs	r3, r2
 800f18a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800f18c:	4313      	orrs	r3, r2
 800f18e:	d11e      	bne.n	800f1ce <_dtoa_r+0xae6>
 800f190:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f192:	2b00      	cmp	r3, #0
 800f194:	ddf1      	ble.n	800f17a <_dtoa_r+0xa92>
 800f196:	9905      	ldr	r1, [sp, #20]
 800f198:	2201      	movs	r2, #1
 800f19a:	9804      	ldr	r0, [sp, #16]
 800f19c:	f7fc f8f8 	bl	800b390 <__lshift>
 800f1a0:	0031      	movs	r1, r6
 800f1a2:	9005      	str	r0, [sp, #20]
 800f1a4:	f7fc f962 	bl	800b46c <__mcmp>
 800f1a8:	2800      	cmp	r0, #0
 800f1aa:	dc02      	bgt.n	800f1b2 <_dtoa_r+0xaca>
 800f1ac:	d1e5      	bne.n	800f17a <_dtoa_r+0xa92>
 800f1ae:	07e3      	lsls	r3, r4, #31
 800f1b0:	d5e3      	bpl.n	800f17a <_dtoa_r+0xa92>
 800f1b2:	2c39      	cmp	r4, #57	; 0x39
 800f1b4:	d1df      	bne.n	800f176 <_dtoa_r+0xa8e>
 800f1b6:	2339      	movs	r3, #57	; 0x39
 800f1b8:	9a07      	ldr	r2, [sp, #28]
 800f1ba:	7013      	strb	r3, [r2, #0]
 800f1bc:	9b08      	ldr	r3, [sp, #32]
 800f1be:	9308      	str	r3, [sp, #32]
 800f1c0:	3b01      	subs	r3, #1
 800f1c2:	781a      	ldrb	r2, [r3, #0]
 800f1c4:	2a39      	cmp	r2, #57	; 0x39
 800f1c6:	d063      	beq.n	800f290 <_dtoa_r+0xba8>
 800f1c8:	3201      	adds	r2, #1
 800f1ca:	701a      	strb	r2, [r3, #0]
 800f1cc:	e747      	b.n	800f05e <_dtoa_r+0x976>
 800f1ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f1d0:	2b00      	cmp	r3, #0
 800f1d2:	dd03      	ble.n	800f1dc <_dtoa_r+0xaf4>
 800f1d4:	2c39      	cmp	r4, #57	; 0x39
 800f1d6:	d0ee      	beq.n	800f1b6 <_dtoa_r+0xace>
 800f1d8:	3401      	adds	r4, #1
 800f1da:	e7ce      	b.n	800f17a <_dtoa_r+0xa92>
 800f1dc:	9b07      	ldr	r3, [sp, #28]
 800f1de:	9a07      	ldr	r2, [sp, #28]
 800f1e0:	701c      	strb	r4, [r3, #0]
 800f1e2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f1e4:	4293      	cmp	r3, r2
 800f1e6:	d03e      	beq.n	800f266 <_dtoa_r+0xb7e>
 800f1e8:	2300      	movs	r3, #0
 800f1ea:	220a      	movs	r2, #10
 800f1ec:	9905      	ldr	r1, [sp, #20]
 800f1ee:	9804      	ldr	r0, [sp, #16]
 800f1f0:	f7fb feec 	bl	800afcc <__multadd>
 800f1f4:	2300      	movs	r3, #0
 800f1f6:	9005      	str	r0, [sp, #20]
 800f1f8:	220a      	movs	r2, #10
 800f1fa:	0029      	movs	r1, r5
 800f1fc:	9804      	ldr	r0, [sp, #16]
 800f1fe:	42bd      	cmp	r5, r7
 800f200:	d106      	bne.n	800f210 <_dtoa_r+0xb28>
 800f202:	f7fb fee3 	bl	800afcc <__multadd>
 800f206:	0005      	movs	r5, r0
 800f208:	0007      	movs	r7, r0
 800f20a:	9b08      	ldr	r3, [sp, #32]
 800f20c:	9307      	str	r3, [sp, #28]
 800f20e:	e784      	b.n	800f11a <_dtoa_r+0xa32>
 800f210:	f7fb fedc 	bl	800afcc <__multadd>
 800f214:	0039      	movs	r1, r7
 800f216:	0005      	movs	r5, r0
 800f218:	2300      	movs	r3, #0
 800f21a:	220a      	movs	r2, #10
 800f21c:	9804      	ldr	r0, [sp, #16]
 800f21e:	f7fb fed5 	bl	800afcc <__multadd>
 800f222:	0007      	movs	r7, r0
 800f224:	e7f1      	b.n	800f20a <_dtoa_r+0xb22>
 800f226:	9b07      	ldr	r3, [sp, #28]
 800f228:	930b      	str	r3, [sp, #44]	; 0x2c
 800f22a:	2500      	movs	r5, #0
 800f22c:	0031      	movs	r1, r6
 800f22e:	9805      	ldr	r0, [sp, #20]
 800f230:	f7ff f9ca 	bl	800e5c8 <quorem>
 800f234:	9b06      	ldr	r3, [sp, #24]
 800f236:	3030      	adds	r0, #48	; 0x30
 800f238:	5558      	strb	r0, [r3, r5]
 800f23a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f23c:	3501      	adds	r5, #1
 800f23e:	0004      	movs	r4, r0
 800f240:	42ab      	cmp	r3, r5
 800f242:	dd07      	ble.n	800f254 <_dtoa_r+0xb6c>
 800f244:	2300      	movs	r3, #0
 800f246:	220a      	movs	r2, #10
 800f248:	9905      	ldr	r1, [sp, #20]
 800f24a:	9804      	ldr	r0, [sp, #16]
 800f24c:	f7fb febe 	bl	800afcc <__multadd>
 800f250:	9005      	str	r0, [sp, #20]
 800f252:	e7eb      	b.n	800f22c <_dtoa_r+0xb44>
 800f254:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800f256:	2301      	movs	r3, #1
 800f258:	2a00      	cmp	r2, #0
 800f25a:	dd00      	ble.n	800f25e <_dtoa_r+0xb76>
 800f25c:	0013      	movs	r3, r2
 800f25e:	2500      	movs	r5, #0
 800f260:	9a06      	ldr	r2, [sp, #24]
 800f262:	18d3      	adds	r3, r2, r3
 800f264:	9308      	str	r3, [sp, #32]
 800f266:	9905      	ldr	r1, [sp, #20]
 800f268:	2201      	movs	r2, #1
 800f26a:	9804      	ldr	r0, [sp, #16]
 800f26c:	f7fc f890 	bl	800b390 <__lshift>
 800f270:	0031      	movs	r1, r6
 800f272:	9005      	str	r0, [sp, #20]
 800f274:	f7fc f8fa 	bl	800b46c <__mcmp>
 800f278:	2800      	cmp	r0, #0
 800f27a:	dc9f      	bgt.n	800f1bc <_dtoa_r+0xad4>
 800f27c:	d101      	bne.n	800f282 <_dtoa_r+0xb9a>
 800f27e:	07e4      	lsls	r4, r4, #31
 800f280:	d49c      	bmi.n	800f1bc <_dtoa_r+0xad4>
 800f282:	9b08      	ldr	r3, [sp, #32]
 800f284:	9308      	str	r3, [sp, #32]
 800f286:	3b01      	subs	r3, #1
 800f288:	781a      	ldrb	r2, [r3, #0]
 800f28a:	2a30      	cmp	r2, #48	; 0x30
 800f28c:	d0fa      	beq.n	800f284 <_dtoa_r+0xb9c>
 800f28e:	e6e6      	b.n	800f05e <_dtoa_r+0x976>
 800f290:	9a06      	ldr	r2, [sp, #24]
 800f292:	429a      	cmp	r2, r3
 800f294:	d193      	bne.n	800f1be <_dtoa_r+0xad6>
 800f296:	9b03      	ldr	r3, [sp, #12]
 800f298:	3301      	adds	r3, #1
 800f29a:	9303      	str	r3, [sp, #12]
 800f29c:	2331      	movs	r3, #49	; 0x31
 800f29e:	7013      	strb	r3, [r2, #0]
 800f2a0:	e6dd      	b.n	800f05e <_dtoa_r+0x976>
 800f2a2:	4b09      	ldr	r3, [pc, #36]	; (800f2c8 <_dtoa_r+0xbe0>)
 800f2a4:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800f2a6:	9306      	str	r3, [sp, #24]
 800f2a8:	4b08      	ldr	r3, [pc, #32]	; (800f2cc <_dtoa_r+0xbe4>)
 800f2aa:	2a00      	cmp	r2, #0
 800f2ac:	d001      	beq.n	800f2b2 <_dtoa_r+0xbca>
 800f2ae:	f7ff fa4c 	bl	800e74a <_dtoa_r+0x62>
 800f2b2:	f7ff fa4c 	bl	800e74e <_dtoa_r+0x66>
 800f2b6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f2b8:	2b00      	cmp	r3, #0
 800f2ba:	dcb6      	bgt.n	800f22a <_dtoa_r+0xb42>
 800f2bc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800f2be:	2b02      	cmp	r3, #2
 800f2c0:	dd00      	ble.n	800f2c4 <_dtoa_r+0xbdc>
 800f2c2:	e6b6      	b.n	800f032 <_dtoa_r+0x94a>
 800f2c4:	e7b1      	b.n	800f22a <_dtoa_r+0xb42>
 800f2c6:	46c0      	nop			; (mov r8, r8)
 800f2c8:	08012ddc 	.word	0x08012ddc
 800f2cc:	08012de4 	.word	0x08012de4

0800f2d0 <realloc>:
 800f2d0:	b510      	push	{r4, lr}
 800f2d2:	4b03      	ldr	r3, [pc, #12]	; (800f2e0 <realloc+0x10>)
 800f2d4:	000a      	movs	r2, r1
 800f2d6:	0001      	movs	r1, r0
 800f2d8:	6818      	ldr	r0, [r3, #0]
 800f2da:	f000 f803 	bl	800f2e4 <_realloc_r>
 800f2de:	bd10      	pop	{r4, pc}
 800f2e0:	200006b8 	.word	0x200006b8

0800f2e4 <_realloc_r>:
 800f2e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f2e6:	b087      	sub	sp, #28
 800f2e8:	1e0c      	subs	r4, r1, #0
 800f2ea:	9001      	str	r0, [sp, #4]
 800f2ec:	9205      	str	r2, [sp, #20]
 800f2ee:	d106      	bne.n	800f2fe <_realloc_r+0x1a>
 800f2f0:	0011      	movs	r1, r2
 800f2f2:	f7f9 fe47 	bl	8008f84 <_malloc_r>
 800f2f6:	0007      	movs	r7, r0
 800f2f8:	0038      	movs	r0, r7
 800f2fa:	b007      	add	sp, #28
 800f2fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f2fe:	9801      	ldr	r0, [sp, #4]
 800f300:	f7fa f854 	bl	80093ac <__malloc_lock>
 800f304:	0023      	movs	r3, r4
 800f306:	3b08      	subs	r3, #8
 800f308:	685f      	ldr	r7, [r3, #4]
 800f30a:	9304      	str	r3, [sp, #16]
 800f30c:	9b05      	ldr	r3, [sp, #20]
 800f30e:	330b      	adds	r3, #11
 800f310:	2b16      	cmp	r3, #22
 800f312:	d908      	bls.n	800f326 <_realloc_r+0x42>
 800f314:	2207      	movs	r2, #7
 800f316:	4393      	bics	r3, r2
 800f318:	9300      	str	r3, [sp, #0]
 800f31a:	d506      	bpl.n	800f32a <_realloc_r+0x46>
 800f31c:	230c      	movs	r3, #12
 800f31e:	9a01      	ldr	r2, [sp, #4]
 800f320:	2700      	movs	r7, #0
 800f322:	6013      	str	r3, [r2, #0]
 800f324:	e7e8      	b.n	800f2f8 <_realloc_r+0x14>
 800f326:	2310      	movs	r3, #16
 800f328:	9300      	str	r3, [sp, #0]
 800f32a:	9b00      	ldr	r3, [sp, #0]
 800f32c:	9a05      	ldr	r2, [sp, #20]
 800f32e:	4293      	cmp	r3, r2
 800f330:	d3f4      	bcc.n	800f31c <_realloc_r+0x38>
 800f332:	9b04      	ldr	r3, [sp, #16]
 800f334:	003a      	movs	r2, r7
 800f336:	9302      	str	r3, [sp, #8]
 800f338:	2303      	movs	r3, #3
 800f33a:	439a      	bics	r2, r3
 800f33c:	9b00      	ldr	r3, [sp, #0]
 800f33e:	9203      	str	r2, [sp, #12]
 800f340:	4293      	cmp	r3, r2
 800f342:	dc00      	bgt.n	800f346 <_realloc_r+0x62>
 800f344:	e169      	b.n	800f61a <_realloc_r+0x336>
 800f346:	9b04      	ldr	r3, [sp, #16]
 800f348:	48b8      	ldr	r0, [pc, #736]	; (800f62c <_realloc_r+0x348>)
 800f34a:	189b      	adds	r3, r3, r2
 800f34c:	6882      	ldr	r2, [r0, #8]
 800f34e:	4694      	mov	ip, r2
 800f350:	685a      	ldr	r2, [r3, #4]
 800f352:	459c      	cmp	ip, r3
 800f354:	d006      	beq.n	800f364 <_realloc_r+0x80>
 800f356:	2501      	movs	r5, #1
 800f358:	0011      	movs	r1, r2
 800f35a:	43a9      	bics	r1, r5
 800f35c:	1859      	adds	r1, r3, r1
 800f35e:	6849      	ldr	r1, [r1, #4]
 800f360:	4229      	tst	r1, r5
 800f362:	d144      	bne.n	800f3ee <_realloc_r+0x10a>
 800f364:	2103      	movs	r1, #3
 800f366:	438a      	bics	r2, r1
 800f368:	9903      	ldr	r1, [sp, #12]
 800f36a:	188e      	adds	r6, r1, r2
 800f36c:	9900      	ldr	r1, [sp, #0]
 800f36e:	459c      	cmp	ip, r3
 800f370:	d117      	bne.n	800f3a2 <_realloc_r+0xbe>
 800f372:	3110      	adds	r1, #16
 800f374:	42b1      	cmp	r1, r6
 800f376:	dc3c      	bgt.n	800f3f2 <_realloc_r+0x10e>
 800f378:	9a00      	ldr	r2, [sp, #0]
 800f37a:	2101      	movs	r1, #1
 800f37c:	4694      	mov	ip, r2
 800f37e:	1ab6      	subs	r6, r6, r2
 800f380:	0022      	movs	r2, r4
 800f382:	9b04      	ldr	r3, [sp, #16]
 800f384:	430e      	orrs	r6, r1
 800f386:	4463      	add	r3, ip
 800f388:	6083      	str	r3, [r0, #8]
 800f38a:	3a08      	subs	r2, #8
 800f38c:	605e      	str	r6, [r3, #4]
 800f38e:	6853      	ldr	r3, [r2, #4]
 800f390:	9801      	ldr	r0, [sp, #4]
 800f392:	400b      	ands	r3, r1
 800f394:	4661      	mov	r1, ip
 800f396:	430b      	orrs	r3, r1
 800f398:	6053      	str	r3, [r2, #4]
 800f39a:	f7fa f80f 	bl	80093bc <__malloc_unlock>
 800f39e:	0027      	movs	r7, r4
 800f3a0:	e7aa      	b.n	800f2f8 <_realloc_r+0x14>
 800f3a2:	42b1      	cmp	r1, r6
 800f3a4:	dc25      	bgt.n	800f3f2 <_realloc_r+0x10e>
 800f3a6:	68da      	ldr	r2, [r3, #12]
 800f3a8:	689b      	ldr	r3, [r3, #8]
 800f3aa:	60da      	str	r2, [r3, #12]
 800f3ac:	6093      	str	r3, [r2, #8]
 800f3ae:	9b00      	ldr	r3, [sp, #0]
 800f3b0:	9a02      	ldr	r2, [sp, #8]
 800f3b2:	1af4      	subs	r4, r6, r3
 800f3b4:	9b02      	ldr	r3, [sp, #8]
 800f3b6:	1992      	adds	r2, r2, r6
 800f3b8:	6858      	ldr	r0, [r3, #4]
 800f3ba:	2301      	movs	r3, #1
 800f3bc:	4018      	ands	r0, r3
 800f3be:	2c0f      	cmp	r4, #15
 800f3c0:	d800      	bhi.n	800f3c4 <_realloc_r+0xe0>
 800f3c2:	e12c      	b.n	800f61e <_realloc_r+0x33a>
 800f3c4:	9d00      	ldr	r5, [sp, #0]
 800f3c6:	9902      	ldr	r1, [sp, #8]
 800f3c8:	4328      	orrs	r0, r5
 800f3ca:	1949      	adds	r1, r1, r5
 800f3cc:	9d02      	ldr	r5, [sp, #8]
 800f3ce:	431c      	orrs	r4, r3
 800f3d0:	6068      	str	r0, [r5, #4]
 800f3d2:	604c      	str	r4, [r1, #4]
 800f3d4:	6850      	ldr	r0, [r2, #4]
 800f3d6:	3108      	adds	r1, #8
 800f3d8:	4303      	orrs	r3, r0
 800f3da:	6053      	str	r3, [r2, #4]
 800f3dc:	9801      	ldr	r0, [sp, #4]
 800f3de:	f7fb f9a3 	bl	800a728 <_free_r>
 800f3e2:	9801      	ldr	r0, [sp, #4]
 800f3e4:	f7f9 ffea 	bl	80093bc <__malloc_unlock>
 800f3e8:	9f02      	ldr	r7, [sp, #8]
 800f3ea:	3708      	adds	r7, #8
 800f3ec:	e784      	b.n	800f2f8 <_realloc_r+0x14>
 800f3ee:	2200      	movs	r2, #0
 800f3f0:	0013      	movs	r3, r2
 800f3f2:	07ff      	lsls	r7, r7, #31
 800f3f4:	d500      	bpl.n	800f3f8 <_realloc_r+0x114>
 800f3f6:	e0c6      	b.n	800f586 <_realloc_r+0x2a2>
 800f3f8:	0021      	movs	r1, r4
 800f3fa:	2003      	movs	r0, #3
 800f3fc:	3908      	subs	r1, #8
 800f3fe:	680d      	ldr	r5, [r1, #0]
 800f400:	9904      	ldr	r1, [sp, #16]
 800f402:	1b4d      	subs	r5, r1, r5
 800f404:	6869      	ldr	r1, [r5, #4]
 800f406:	4381      	bics	r1, r0
 800f408:	9803      	ldr	r0, [sp, #12]
 800f40a:	180f      	adds	r7, r1, r0
 800f40c:	2b00      	cmp	r3, #0
 800f40e:	d100      	bne.n	800f412 <_realloc_r+0x12e>
 800f410:	e084      	b.n	800f51c <_realloc_r+0x238>
 800f412:	19d6      	adds	r6, r2, r7
 800f414:	459c      	cmp	ip, r3
 800f416:	d148      	bne.n	800f4aa <_realloc_r+0x1c6>
 800f418:	9b00      	ldr	r3, [sp, #0]
 800f41a:	3310      	adds	r3, #16
 800f41c:	42b3      	cmp	r3, r6
 800f41e:	dc7d      	bgt.n	800f51c <_realloc_r+0x238>
 800f420:	68aa      	ldr	r2, [r5, #8]
 800f422:	68eb      	ldr	r3, [r5, #12]
 800f424:	002f      	movs	r7, r5
 800f426:	60d3      	str	r3, [r2, #12]
 800f428:	609a      	str	r2, [r3, #8]
 800f42a:	0002      	movs	r2, r0
 800f42c:	3a04      	subs	r2, #4
 800f42e:	3708      	adds	r7, #8
 800f430:	2a24      	cmp	r2, #36	; 0x24
 800f432:	d835      	bhi.n	800f4a0 <_realloc_r+0x1bc>
 800f434:	003b      	movs	r3, r7
 800f436:	2a13      	cmp	r2, #19
 800f438:	d908      	bls.n	800f44c <_realloc_r+0x168>
 800f43a:	6823      	ldr	r3, [r4, #0]
 800f43c:	60ab      	str	r3, [r5, #8]
 800f43e:	6863      	ldr	r3, [r4, #4]
 800f440:	60eb      	str	r3, [r5, #12]
 800f442:	2a1b      	cmp	r2, #27
 800f444:	d81a      	bhi.n	800f47c <_realloc_r+0x198>
 800f446:	002b      	movs	r3, r5
 800f448:	3408      	adds	r4, #8
 800f44a:	3310      	adds	r3, #16
 800f44c:	6822      	ldr	r2, [r4, #0]
 800f44e:	601a      	str	r2, [r3, #0]
 800f450:	6862      	ldr	r2, [r4, #4]
 800f452:	605a      	str	r2, [r3, #4]
 800f454:	68a2      	ldr	r2, [r4, #8]
 800f456:	609a      	str	r2, [r3, #8]
 800f458:	9b00      	ldr	r3, [sp, #0]
 800f45a:	4a74      	ldr	r2, [pc, #464]	; (800f62c <_realloc_r+0x348>)
 800f45c:	18eb      	adds	r3, r5, r3
 800f45e:	6093      	str	r3, [r2, #8]
 800f460:	9a00      	ldr	r2, [sp, #0]
 800f462:	1ab6      	subs	r6, r6, r2
 800f464:	2201      	movs	r2, #1
 800f466:	4316      	orrs	r6, r2
 800f468:	605e      	str	r6, [r3, #4]
 800f46a:	686b      	ldr	r3, [r5, #4]
 800f46c:	4013      	ands	r3, r2
 800f46e:	9a00      	ldr	r2, [sp, #0]
 800f470:	4313      	orrs	r3, r2
 800f472:	606b      	str	r3, [r5, #4]
 800f474:	9801      	ldr	r0, [sp, #4]
 800f476:	f7f9 ffa1 	bl	80093bc <__malloc_unlock>
 800f47a:	e73d      	b.n	800f2f8 <_realloc_r+0x14>
 800f47c:	68a3      	ldr	r3, [r4, #8]
 800f47e:	612b      	str	r3, [r5, #16]
 800f480:	68e3      	ldr	r3, [r4, #12]
 800f482:	616b      	str	r3, [r5, #20]
 800f484:	2a24      	cmp	r2, #36	; 0x24
 800f486:	d003      	beq.n	800f490 <_realloc_r+0x1ac>
 800f488:	002b      	movs	r3, r5
 800f48a:	3410      	adds	r4, #16
 800f48c:	3318      	adds	r3, #24
 800f48e:	e7dd      	b.n	800f44c <_realloc_r+0x168>
 800f490:	6923      	ldr	r3, [r4, #16]
 800f492:	61ab      	str	r3, [r5, #24]
 800f494:	002b      	movs	r3, r5
 800f496:	6962      	ldr	r2, [r4, #20]
 800f498:	3320      	adds	r3, #32
 800f49a:	61ea      	str	r2, [r5, #28]
 800f49c:	3418      	adds	r4, #24
 800f49e:	e7d5      	b.n	800f44c <_realloc_r+0x168>
 800f4a0:	0021      	movs	r1, r4
 800f4a2:	0038      	movs	r0, r7
 800f4a4:	f001 fbb5 	bl	8010c12 <memmove>
 800f4a8:	e7d6      	b.n	800f458 <_realloc_r+0x174>
 800f4aa:	9a00      	ldr	r2, [sp, #0]
 800f4ac:	42b2      	cmp	r2, r6
 800f4ae:	dc35      	bgt.n	800f51c <_realloc_r+0x238>
 800f4b0:	0028      	movs	r0, r5
 800f4b2:	68da      	ldr	r2, [r3, #12]
 800f4b4:	689b      	ldr	r3, [r3, #8]
 800f4b6:	3008      	adds	r0, #8
 800f4b8:	60da      	str	r2, [r3, #12]
 800f4ba:	6093      	str	r3, [r2, #8]
 800f4bc:	68aa      	ldr	r2, [r5, #8]
 800f4be:	68eb      	ldr	r3, [r5, #12]
 800f4c0:	60d3      	str	r3, [r2, #12]
 800f4c2:	609a      	str	r2, [r3, #8]
 800f4c4:	9a03      	ldr	r2, [sp, #12]
 800f4c6:	3a04      	subs	r2, #4
 800f4c8:	2a24      	cmp	r2, #36	; 0x24
 800f4ca:	d823      	bhi.n	800f514 <_realloc_r+0x230>
 800f4cc:	2a13      	cmp	r2, #19
 800f4ce:	d907      	bls.n	800f4e0 <_realloc_r+0x1fc>
 800f4d0:	6823      	ldr	r3, [r4, #0]
 800f4d2:	60ab      	str	r3, [r5, #8]
 800f4d4:	6863      	ldr	r3, [r4, #4]
 800f4d6:	60eb      	str	r3, [r5, #12]
 800f4d8:	2a1b      	cmp	r2, #27
 800f4da:	d809      	bhi.n	800f4f0 <_realloc_r+0x20c>
 800f4dc:	3408      	adds	r4, #8
 800f4de:	3008      	adds	r0, #8
 800f4e0:	6823      	ldr	r3, [r4, #0]
 800f4e2:	6003      	str	r3, [r0, #0]
 800f4e4:	6863      	ldr	r3, [r4, #4]
 800f4e6:	6043      	str	r3, [r0, #4]
 800f4e8:	68a3      	ldr	r3, [r4, #8]
 800f4ea:	6083      	str	r3, [r0, #8]
 800f4ec:	9502      	str	r5, [sp, #8]
 800f4ee:	e75e      	b.n	800f3ae <_realloc_r+0xca>
 800f4f0:	68a3      	ldr	r3, [r4, #8]
 800f4f2:	612b      	str	r3, [r5, #16]
 800f4f4:	68e3      	ldr	r3, [r4, #12]
 800f4f6:	616b      	str	r3, [r5, #20]
 800f4f8:	2a24      	cmp	r2, #36	; 0x24
 800f4fa:	d003      	beq.n	800f504 <_realloc_r+0x220>
 800f4fc:	0028      	movs	r0, r5
 800f4fe:	3410      	adds	r4, #16
 800f500:	3018      	adds	r0, #24
 800f502:	e7ed      	b.n	800f4e0 <_realloc_r+0x1fc>
 800f504:	0028      	movs	r0, r5
 800f506:	6923      	ldr	r3, [r4, #16]
 800f508:	3020      	adds	r0, #32
 800f50a:	61ab      	str	r3, [r5, #24]
 800f50c:	6963      	ldr	r3, [r4, #20]
 800f50e:	3418      	adds	r4, #24
 800f510:	61eb      	str	r3, [r5, #28]
 800f512:	e7e5      	b.n	800f4e0 <_realloc_r+0x1fc>
 800f514:	0021      	movs	r1, r4
 800f516:	f001 fb7c 	bl	8010c12 <memmove>
 800f51a:	e7e7      	b.n	800f4ec <_realloc_r+0x208>
 800f51c:	9b00      	ldr	r3, [sp, #0]
 800f51e:	42bb      	cmp	r3, r7
 800f520:	dc31      	bgt.n	800f586 <_realloc_r+0x2a2>
 800f522:	0028      	movs	r0, r5
 800f524:	68aa      	ldr	r2, [r5, #8]
 800f526:	68eb      	ldr	r3, [r5, #12]
 800f528:	3008      	adds	r0, #8
 800f52a:	60d3      	str	r3, [r2, #12]
 800f52c:	609a      	str	r2, [r3, #8]
 800f52e:	9a03      	ldr	r2, [sp, #12]
 800f530:	3a04      	subs	r2, #4
 800f532:	2a24      	cmp	r2, #36	; 0x24
 800f534:	d823      	bhi.n	800f57e <_realloc_r+0x29a>
 800f536:	2a13      	cmp	r2, #19
 800f538:	d907      	bls.n	800f54a <_realloc_r+0x266>
 800f53a:	6823      	ldr	r3, [r4, #0]
 800f53c:	60ab      	str	r3, [r5, #8]
 800f53e:	6863      	ldr	r3, [r4, #4]
 800f540:	60eb      	str	r3, [r5, #12]
 800f542:	2a1b      	cmp	r2, #27
 800f544:	d809      	bhi.n	800f55a <_realloc_r+0x276>
 800f546:	3408      	adds	r4, #8
 800f548:	3008      	adds	r0, #8
 800f54a:	6823      	ldr	r3, [r4, #0]
 800f54c:	6003      	str	r3, [r0, #0]
 800f54e:	6863      	ldr	r3, [r4, #4]
 800f550:	6043      	str	r3, [r0, #4]
 800f552:	68a3      	ldr	r3, [r4, #8]
 800f554:	6083      	str	r3, [r0, #8]
 800f556:	003e      	movs	r6, r7
 800f558:	e7c8      	b.n	800f4ec <_realloc_r+0x208>
 800f55a:	68a3      	ldr	r3, [r4, #8]
 800f55c:	612b      	str	r3, [r5, #16]
 800f55e:	68e3      	ldr	r3, [r4, #12]
 800f560:	616b      	str	r3, [r5, #20]
 800f562:	2a24      	cmp	r2, #36	; 0x24
 800f564:	d003      	beq.n	800f56e <_realloc_r+0x28a>
 800f566:	0028      	movs	r0, r5
 800f568:	3410      	adds	r4, #16
 800f56a:	3018      	adds	r0, #24
 800f56c:	e7ed      	b.n	800f54a <_realloc_r+0x266>
 800f56e:	0028      	movs	r0, r5
 800f570:	6923      	ldr	r3, [r4, #16]
 800f572:	3020      	adds	r0, #32
 800f574:	61ab      	str	r3, [r5, #24]
 800f576:	6963      	ldr	r3, [r4, #20]
 800f578:	3418      	adds	r4, #24
 800f57a:	61eb      	str	r3, [r5, #28]
 800f57c:	e7e5      	b.n	800f54a <_realloc_r+0x266>
 800f57e:	0021      	movs	r1, r4
 800f580:	f001 fb47 	bl	8010c12 <memmove>
 800f584:	e7e7      	b.n	800f556 <_realloc_r+0x272>
 800f586:	9905      	ldr	r1, [sp, #20]
 800f588:	9801      	ldr	r0, [sp, #4]
 800f58a:	f7f9 fcfb 	bl	8008f84 <_malloc_r>
 800f58e:	1e07      	subs	r7, r0, #0
 800f590:	d100      	bne.n	800f594 <_realloc_r+0x2b0>
 800f592:	e76f      	b.n	800f474 <_realloc_r+0x190>
 800f594:	0023      	movs	r3, r4
 800f596:	2201      	movs	r2, #1
 800f598:	3b08      	subs	r3, #8
 800f59a:	685b      	ldr	r3, [r3, #4]
 800f59c:	4393      	bics	r3, r2
 800f59e:	9a04      	ldr	r2, [sp, #16]
 800f5a0:	18d3      	adds	r3, r2, r3
 800f5a2:	0002      	movs	r2, r0
 800f5a4:	3a08      	subs	r2, #8
 800f5a6:	4293      	cmp	r3, r2
 800f5a8:	d105      	bne.n	800f5b6 <_realloc_r+0x2d2>
 800f5aa:	685e      	ldr	r6, [r3, #4]
 800f5ac:	2303      	movs	r3, #3
 800f5ae:	439e      	bics	r6, r3
 800f5b0:	9b03      	ldr	r3, [sp, #12]
 800f5b2:	18f6      	adds	r6, r6, r3
 800f5b4:	e6fb      	b.n	800f3ae <_realloc_r+0xca>
 800f5b6:	9a03      	ldr	r2, [sp, #12]
 800f5b8:	3a04      	subs	r2, #4
 800f5ba:	2a24      	cmp	r2, #36	; 0x24
 800f5bc:	d829      	bhi.n	800f612 <_realloc_r+0x32e>
 800f5be:	0003      	movs	r3, r0
 800f5c0:	0021      	movs	r1, r4
 800f5c2:	2a13      	cmp	r2, #19
 800f5c4:	d908      	bls.n	800f5d8 <_realloc_r+0x2f4>
 800f5c6:	6823      	ldr	r3, [r4, #0]
 800f5c8:	6003      	str	r3, [r0, #0]
 800f5ca:	6863      	ldr	r3, [r4, #4]
 800f5cc:	6043      	str	r3, [r0, #4]
 800f5ce:	2a1b      	cmp	r2, #27
 800f5d0:	d80d      	bhi.n	800f5ee <_realloc_r+0x30a>
 800f5d2:	0003      	movs	r3, r0
 800f5d4:	3108      	adds	r1, #8
 800f5d6:	3308      	adds	r3, #8
 800f5d8:	680a      	ldr	r2, [r1, #0]
 800f5da:	601a      	str	r2, [r3, #0]
 800f5dc:	684a      	ldr	r2, [r1, #4]
 800f5de:	605a      	str	r2, [r3, #4]
 800f5e0:	688a      	ldr	r2, [r1, #8]
 800f5e2:	609a      	str	r2, [r3, #8]
 800f5e4:	0021      	movs	r1, r4
 800f5e6:	9801      	ldr	r0, [sp, #4]
 800f5e8:	f7fb f89e 	bl	800a728 <_free_r>
 800f5ec:	e742      	b.n	800f474 <_realloc_r+0x190>
 800f5ee:	68a3      	ldr	r3, [r4, #8]
 800f5f0:	6083      	str	r3, [r0, #8]
 800f5f2:	68e3      	ldr	r3, [r4, #12]
 800f5f4:	60c3      	str	r3, [r0, #12]
 800f5f6:	2a24      	cmp	r2, #36	; 0x24
 800f5f8:	d003      	beq.n	800f602 <_realloc_r+0x31e>
 800f5fa:	0003      	movs	r3, r0
 800f5fc:	3110      	adds	r1, #16
 800f5fe:	3310      	adds	r3, #16
 800f600:	e7ea      	b.n	800f5d8 <_realloc_r+0x2f4>
 800f602:	6923      	ldr	r3, [r4, #16]
 800f604:	3118      	adds	r1, #24
 800f606:	6103      	str	r3, [r0, #16]
 800f608:	0003      	movs	r3, r0
 800f60a:	6962      	ldr	r2, [r4, #20]
 800f60c:	3318      	adds	r3, #24
 800f60e:	6142      	str	r2, [r0, #20]
 800f610:	e7e2      	b.n	800f5d8 <_realloc_r+0x2f4>
 800f612:	0021      	movs	r1, r4
 800f614:	f001 fafd 	bl	8010c12 <memmove>
 800f618:	e7e4      	b.n	800f5e4 <_realloc_r+0x300>
 800f61a:	9e03      	ldr	r6, [sp, #12]
 800f61c:	e6c7      	b.n	800f3ae <_realloc_r+0xca>
 800f61e:	9902      	ldr	r1, [sp, #8]
 800f620:	4306      	orrs	r6, r0
 800f622:	604e      	str	r6, [r1, #4]
 800f624:	6851      	ldr	r1, [r2, #4]
 800f626:	430b      	orrs	r3, r1
 800f628:	6053      	str	r3, [r2, #4]
 800f62a:	e6da      	b.n	800f3e2 <_realloc_r+0xfe>
 800f62c:	20000010 	.word	0x20000010

0800f630 <_strtoul_l.constprop.0>:
 800f630:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f632:	b087      	sub	sp, #28
 800f634:	9202      	str	r2, [sp, #8]
 800f636:	4a3e      	ldr	r2, [pc, #248]	; (800f730 <_strtoul_l.constprop.0+0x100>)
 800f638:	001e      	movs	r6, r3
 800f63a:	9101      	str	r1, [sp, #4]
 800f63c:	000b      	movs	r3, r1
 800f63e:	4694      	mov	ip, r2
 800f640:	2108      	movs	r1, #8
 800f642:	9005      	str	r0, [sp, #20]
 800f644:	001a      	movs	r2, r3
 800f646:	4660      	mov	r0, ip
 800f648:	7814      	ldrb	r4, [r2, #0]
 800f64a:	3301      	adds	r3, #1
 800f64c:	5d00      	ldrb	r0, [r0, r4]
 800f64e:	001d      	movs	r5, r3
 800f650:	0007      	movs	r7, r0
 800f652:	400f      	ands	r7, r1
 800f654:	4208      	tst	r0, r1
 800f656:	d1f5      	bne.n	800f644 <_strtoul_l.constprop.0+0x14>
 800f658:	2c2d      	cmp	r4, #45	; 0x2d
 800f65a:	d13d      	bne.n	800f6d8 <_strtoul_l.constprop.0+0xa8>
 800f65c:	2701      	movs	r7, #1
 800f65e:	781c      	ldrb	r4, [r3, #0]
 800f660:	1c95      	adds	r5, r2, #2
 800f662:	2e00      	cmp	r6, #0
 800f664:	d05f      	beq.n	800f726 <_strtoul_l.constprop.0+0xf6>
 800f666:	2e10      	cmp	r6, #16
 800f668:	d109      	bne.n	800f67e <_strtoul_l.constprop.0+0x4e>
 800f66a:	2c30      	cmp	r4, #48	; 0x30
 800f66c:	d107      	bne.n	800f67e <_strtoul_l.constprop.0+0x4e>
 800f66e:	2220      	movs	r2, #32
 800f670:	782b      	ldrb	r3, [r5, #0]
 800f672:	4393      	bics	r3, r2
 800f674:	2b58      	cmp	r3, #88	; 0x58
 800f676:	d151      	bne.n	800f71c <_strtoul_l.constprop.0+0xec>
 800f678:	2610      	movs	r6, #16
 800f67a:	786c      	ldrb	r4, [r5, #1]
 800f67c:	3502      	adds	r5, #2
 800f67e:	2001      	movs	r0, #1
 800f680:	0031      	movs	r1, r6
 800f682:	4240      	negs	r0, r0
 800f684:	f7f0 fd5a 	bl	800013c <__udivsi3>
 800f688:	9003      	str	r0, [sp, #12]
 800f68a:	2001      	movs	r0, #1
 800f68c:	0031      	movs	r1, r6
 800f68e:	4240      	negs	r0, r0
 800f690:	f7f0 fdda 	bl	8000248 <__aeabi_uidivmod>
 800f694:	2300      	movs	r3, #0
 800f696:	2201      	movs	r2, #1
 800f698:	9104      	str	r1, [sp, #16]
 800f69a:	2101      	movs	r1, #1
 800f69c:	0018      	movs	r0, r3
 800f69e:	4694      	mov	ip, r2
 800f6a0:	4249      	negs	r1, r1
 800f6a2:	0022      	movs	r2, r4
 800f6a4:	3a30      	subs	r2, #48	; 0x30
 800f6a6:	2a09      	cmp	r2, #9
 800f6a8:	d903      	bls.n	800f6b2 <_strtoul_l.constprop.0+0x82>
 800f6aa:	3a11      	subs	r2, #17
 800f6ac:	2a19      	cmp	r2, #25
 800f6ae:	d818      	bhi.n	800f6e2 <_strtoul_l.constprop.0+0xb2>
 800f6b0:	320a      	adds	r2, #10
 800f6b2:	4296      	cmp	r6, r2
 800f6b4:	dd19      	ble.n	800f6ea <_strtoul_l.constprop.0+0xba>
 800f6b6:	1c5c      	adds	r4, r3, #1
 800f6b8:	d00b      	beq.n	800f6d2 <_strtoul_l.constprop.0+0xa2>
 800f6ba:	9c03      	ldr	r4, [sp, #12]
 800f6bc:	000b      	movs	r3, r1
 800f6be:	4284      	cmp	r4, r0
 800f6c0:	d307      	bcc.n	800f6d2 <_strtoul_l.constprop.0+0xa2>
 800f6c2:	d103      	bne.n	800f6cc <_strtoul_l.constprop.0+0x9c>
 800f6c4:	9c04      	ldr	r4, [sp, #16]
 800f6c6:	000b      	movs	r3, r1
 800f6c8:	4294      	cmp	r4, r2
 800f6ca:	db02      	blt.n	800f6d2 <_strtoul_l.constprop.0+0xa2>
 800f6cc:	4663      	mov	r3, ip
 800f6ce:	4370      	muls	r0, r6
 800f6d0:	1810      	adds	r0, r2, r0
 800f6d2:	782c      	ldrb	r4, [r5, #0]
 800f6d4:	3501      	adds	r5, #1
 800f6d6:	e7e4      	b.n	800f6a2 <_strtoul_l.constprop.0+0x72>
 800f6d8:	2c2b      	cmp	r4, #43	; 0x2b
 800f6da:	d1c2      	bne.n	800f662 <_strtoul_l.constprop.0+0x32>
 800f6dc:	781c      	ldrb	r4, [r3, #0]
 800f6de:	1c95      	adds	r5, r2, #2
 800f6e0:	e7bf      	b.n	800f662 <_strtoul_l.constprop.0+0x32>
 800f6e2:	0022      	movs	r2, r4
 800f6e4:	3a61      	subs	r2, #97	; 0x61
 800f6e6:	2a19      	cmp	r2, #25
 800f6e8:	d9e2      	bls.n	800f6b0 <_strtoul_l.constprop.0+0x80>
 800f6ea:	1c5a      	adds	r2, r3, #1
 800f6ec:	d108      	bne.n	800f700 <_strtoul_l.constprop.0+0xd0>
 800f6ee:	2222      	movs	r2, #34	; 0x22
 800f6f0:	9905      	ldr	r1, [sp, #20]
 800f6f2:	0018      	movs	r0, r3
 800f6f4:	600a      	str	r2, [r1, #0]
 800f6f6:	9a02      	ldr	r2, [sp, #8]
 800f6f8:	2a00      	cmp	r2, #0
 800f6fa:	d109      	bne.n	800f710 <_strtoul_l.constprop.0+0xe0>
 800f6fc:	b007      	add	sp, #28
 800f6fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f700:	2f00      	cmp	r7, #0
 800f702:	d000      	beq.n	800f706 <_strtoul_l.constprop.0+0xd6>
 800f704:	4240      	negs	r0, r0
 800f706:	9a02      	ldr	r2, [sp, #8]
 800f708:	2a00      	cmp	r2, #0
 800f70a:	d0f7      	beq.n	800f6fc <_strtoul_l.constprop.0+0xcc>
 800f70c:	2b00      	cmp	r3, #0
 800f70e:	d001      	beq.n	800f714 <_strtoul_l.constprop.0+0xe4>
 800f710:	1e6b      	subs	r3, r5, #1
 800f712:	9301      	str	r3, [sp, #4]
 800f714:	9b02      	ldr	r3, [sp, #8]
 800f716:	9a01      	ldr	r2, [sp, #4]
 800f718:	601a      	str	r2, [r3, #0]
 800f71a:	e7ef      	b.n	800f6fc <_strtoul_l.constprop.0+0xcc>
 800f71c:	2430      	movs	r4, #48	; 0x30
 800f71e:	2e00      	cmp	r6, #0
 800f720:	d1ad      	bne.n	800f67e <_strtoul_l.constprop.0+0x4e>
 800f722:	3608      	adds	r6, #8
 800f724:	e7ab      	b.n	800f67e <_strtoul_l.constprop.0+0x4e>
 800f726:	2c30      	cmp	r4, #48	; 0x30
 800f728:	d0a1      	beq.n	800f66e <_strtoul_l.constprop.0+0x3e>
 800f72a:	260a      	movs	r6, #10
 800f72c:	e7a7      	b.n	800f67e <_strtoul_l.constprop.0+0x4e>
 800f72e:	46c0      	nop			; (mov r8, r8)
 800f730:	08012a51 	.word	0x08012a51

0800f734 <_strtoul_r>:
 800f734:	b510      	push	{r4, lr}
 800f736:	f7ff ff7b 	bl	800f630 <_strtoul_l.constprop.0>
 800f73a:	bd10      	pop	{r4, pc}

0800f73c <_strtoll_l.constprop.0>:
 800f73c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f73e:	b08d      	sub	sp, #52	; 0x34
 800f740:	9203      	str	r2, [sp, #12]
 800f742:	4a53      	ldr	r2, [pc, #332]	; (800f890 <_strtoll_l.constprop.0+0x154>)
 800f744:	001e      	movs	r6, r3
 800f746:	9102      	str	r1, [sp, #8]
 800f748:	000b      	movs	r3, r1
 800f74a:	4694      	mov	ip, r2
 800f74c:	2108      	movs	r1, #8
 800f74e:	900a      	str	r0, [sp, #40]	; 0x28
 800f750:	001a      	movs	r2, r3
 800f752:	4660      	mov	r0, ip
 800f754:	7814      	ldrb	r4, [r2, #0]
 800f756:	3301      	adds	r3, #1
 800f758:	5d00      	ldrb	r0, [r0, r4]
 800f75a:	001d      	movs	r5, r3
 800f75c:	0007      	movs	r7, r0
 800f75e:	400f      	ands	r7, r1
 800f760:	4208      	tst	r0, r1
 800f762:	d1f5      	bne.n	800f750 <_strtoll_l.constprop.0+0x14>
 800f764:	2c2d      	cmp	r4, #45	; 0x2d
 800f766:	d153      	bne.n	800f810 <_strtoll_l.constprop.0+0xd4>
 800f768:	781c      	ldrb	r4, [r3, #0]
 800f76a:	2301      	movs	r3, #1
 800f76c:	1c95      	adds	r5, r2, #2
 800f76e:	9301      	str	r3, [sp, #4]
 800f770:	2e00      	cmp	r6, #0
 800f772:	d100      	bne.n	800f776 <_strtoll_l.constprop.0+0x3a>
 800f774:	e086      	b.n	800f884 <_strtoll_l.constprop.0+0x148>
 800f776:	2e10      	cmp	r6, #16
 800f778:	d10a      	bne.n	800f790 <_strtoll_l.constprop.0+0x54>
 800f77a:	2c30      	cmp	r4, #48	; 0x30
 800f77c:	d108      	bne.n	800f790 <_strtoll_l.constprop.0+0x54>
 800f77e:	2220      	movs	r2, #32
 800f780:	782b      	ldrb	r3, [r5, #0]
 800f782:	4393      	bics	r3, r2
 800f784:	2b58      	cmp	r3, #88	; 0x58
 800f786:	d000      	beq.n	800f78a <_strtoll_l.constprop.0+0x4e>
 800f788:	e076      	b.n	800f878 <_strtoll_l.constprop.0+0x13c>
 800f78a:	2610      	movs	r6, #16
 800f78c:	786c      	ldrb	r4, [r5, #1]
 800f78e:	3502      	adds	r5, #2
 800f790:	2001      	movs	r0, #1
 800f792:	2300      	movs	r3, #0
 800f794:	493f      	ldr	r1, [pc, #252]	; (800f894 <_strtoll_l.constprop.0+0x158>)
 800f796:	9a01      	ldr	r2, [sp, #4]
 800f798:	4240      	negs	r0, r0
 800f79a:	1812      	adds	r2, r2, r0
 800f79c:	414b      	adcs	r3, r1
 800f79e:	9204      	str	r2, [sp, #16]
 800f7a0:	9305      	str	r3, [sp, #20]
 800f7a2:	9804      	ldr	r0, [sp, #16]
 800f7a4:	9905      	ldr	r1, [sp, #20]
 800f7a6:	17f3      	asrs	r3, r6, #31
 800f7a8:	0032      	movs	r2, r6
 800f7aa:	930b      	str	r3, [sp, #44]	; 0x2c
 800f7ac:	f7f0 fe7a 	bl	80004a4 <__aeabi_uldivmod>
 800f7b0:	2300      	movs	r3, #0
 800f7b2:	000f      	movs	r7, r1
 800f7b4:	9008      	str	r0, [sp, #32]
 800f7b6:	2100      	movs	r1, #0
 800f7b8:	2000      	movs	r0, #0
 800f7ba:	9209      	str	r2, [sp, #36]	; 0x24
 800f7bc:	0022      	movs	r2, r4
 800f7be:	3a30      	subs	r2, #48	; 0x30
 800f7c0:	2a09      	cmp	r2, #9
 800f7c2:	d82b      	bhi.n	800f81c <_strtoll_l.constprop.0+0xe0>
 800f7c4:	0014      	movs	r4, r2
 800f7c6:	42a6      	cmp	r6, r4
 800f7c8:	dd37      	ble.n	800f83a <_strtoll_l.constprop.0+0xfe>
 800f7ca:	1c5a      	adds	r2, r3, #1
 800f7cc:	d01d      	beq.n	800f80a <_strtoll_l.constprop.0+0xce>
 800f7ce:	42b9      	cmp	r1, r7
 800f7d0:	d830      	bhi.n	800f834 <_strtoll_l.constprop.0+0xf8>
 800f7d2:	d102      	bne.n	800f7da <_strtoll_l.constprop.0+0x9e>
 800f7d4:	9b08      	ldr	r3, [sp, #32]
 800f7d6:	4298      	cmp	r0, r3
 800f7d8:	d82c      	bhi.n	800f834 <_strtoll_l.constprop.0+0xf8>
 800f7da:	9b08      	ldr	r3, [sp, #32]
 800f7dc:	4283      	cmp	r3, r0
 800f7de:	d106      	bne.n	800f7ee <_strtoll_l.constprop.0+0xb2>
 800f7e0:	428f      	cmp	r7, r1
 800f7e2:	d104      	bne.n	800f7ee <_strtoll_l.constprop.0+0xb2>
 800f7e4:	2301      	movs	r3, #1
 800f7e6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f7e8:	425b      	negs	r3, r3
 800f7ea:	42a2      	cmp	r2, r4
 800f7ec:	db0d      	blt.n	800f80a <_strtoll_l.constprop.0+0xce>
 800f7ee:	000b      	movs	r3, r1
 800f7f0:	0002      	movs	r2, r0
 800f7f2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800f7f4:	0030      	movs	r0, r6
 800f7f6:	f7f0 fe75 	bl	80004e4 <__aeabi_lmul>
 800f7fa:	17e3      	asrs	r3, r4, #31
 800f7fc:	9406      	str	r4, [sp, #24]
 800f7fe:	9307      	str	r3, [sp, #28]
 800f800:	9b06      	ldr	r3, [sp, #24]
 800f802:	9c07      	ldr	r4, [sp, #28]
 800f804:	18c0      	adds	r0, r0, r3
 800f806:	4161      	adcs	r1, r4
 800f808:	2301      	movs	r3, #1
 800f80a:	782c      	ldrb	r4, [r5, #0]
 800f80c:	3501      	adds	r5, #1
 800f80e:	e7d5      	b.n	800f7bc <_strtoll_l.constprop.0+0x80>
 800f810:	9701      	str	r7, [sp, #4]
 800f812:	2c2b      	cmp	r4, #43	; 0x2b
 800f814:	d1ac      	bne.n	800f770 <_strtoll_l.constprop.0+0x34>
 800f816:	781c      	ldrb	r4, [r3, #0]
 800f818:	1c95      	adds	r5, r2, #2
 800f81a:	e7a9      	b.n	800f770 <_strtoll_l.constprop.0+0x34>
 800f81c:	0022      	movs	r2, r4
 800f81e:	3a41      	subs	r2, #65	; 0x41
 800f820:	2a19      	cmp	r2, #25
 800f822:	d801      	bhi.n	800f828 <_strtoll_l.constprop.0+0xec>
 800f824:	3c37      	subs	r4, #55	; 0x37
 800f826:	e7ce      	b.n	800f7c6 <_strtoll_l.constprop.0+0x8a>
 800f828:	0022      	movs	r2, r4
 800f82a:	3a61      	subs	r2, #97	; 0x61
 800f82c:	2a19      	cmp	r2, #25
 800f82e:	d804      	bhi.n	800f83a <_strtoll_l.constprop.0+0xfe>
 800f830:	3c57      	subs	r4, #87	; 0x57
 800f832:	e7c8      	b.n	800f7c6 <_strtoll_l.constprop.0+0x8a>
 800f834:	2301      	movs	r3, #1
 800f836:	425b      	negs	r3, r3
 800f838:	e7e7      	b.n	800f80a <_strtoll_l.constprop.0+0xce>
 800f83a:	1c5a      	adds	r2, r3, #1
 800f83c:	d109      	bne.n	800f852 <_strtoll_l.constprop.0+0x116>
 800f83e:	9804      	ldr	r0, [sp, #16]
 800f840:	9905      	ldr	r1, [sp, #20]
 800f842:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f844:	3323      	adds	r3, #35	; 0x23
 800f846:	6013      	str	r3, [r2, #0]
 800f848:	9b03      	ldr	r3, [sp, #12]
 800f84a:	2b00      	cmp	r3, #0
 800f84c:	d10e      	bne.n	800f86c <_strtoll_l.constprop.0+0x130>
 800f84e:	b00d      	add	sp, #52	; 0x34
 800f850:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f852:	9a01      	ldr	r2, [sp, #4]
 800f854:	2a00      	cmp	r2, #0
 800f856:	d004      	beq.n	800f862 <_strtoll_l.constprop.0+0x126>
 800f858:	0006      	movs	r6, r0
 800f85a:	000f      	movs	r7, r1
 800f85c:	2100      	movs	r1, #0
 800f85e:	4270      	negs	r0, r6
 800f860:	41b9      	sbcs	r1, r7
 800f862:	9a03      	ldr	r2, [sp, #12]
 800f864:	2a00      	cmp	r2, #0
 800f866:	d0f2      	beq.n	800f84e <_strtoll_l.constprop.0+0x112>
 800f868:	2b00      	cmp	r3, #0
 800f86a:	d001      	beq.n	800f870 <_strtoll_l.constprop.0+0x134>
 800f86c:	1e6b      	subs	r3, r5, #1
 800f86e:	9302      	str	r3, [sp, #8]
 800f870:	9b03      	ldr	r3, [sp, #12]
 800f872:	9a02      	ldr	r2, [sp, #8]
 800f874:	601a      	str	r2, [r3, #0]
 800f876:	e7ea      	b.n	800f84e <_strtoll_l.constprop.0+0x112>
 800f878:	2430      	movs	r4, #48	; 0x30
 800f87a:	2e00      	cmp	r6, #0
 800f87c:	d000      	beq.n	800f880 <_strtoll_l.constprop.0+0x144>
 800f87e:	e787      	b.n	800f790 <_strtoll_l.constprop.0+0x54>
 800f880:	3608      	adds	r6, #8
 800f882:	e785      	b.n	800f790 <_strtoll_l.constprop.0+0x54>
 800f884:	2c30      	cmp	r4, #48	; 0x30
 800f886:	d100      	bne.n	800f88a <_strtoll_l.constprop.0+0x14e>
 800f888:	e779      	b.n	800f77e <_strtoll_l.constprop.0+0x42>
 800f88a:	260a      	movs	r6, #10
 800f88c:	e780      	b.n	800f790 <_strtoll_l.constprop.0+0x54>
 800f88e:	46c0      	nop			; (mov r8, r8)
 800f890:	08012a51 	.word	0x08012a51
 800f894:	7fffffff 	.word	0x7fffffff

0800f898 <_strtoll_r>:
 800f898:	b510      	push	{r4, lr}
 800f89a:	f7ff ff4f 	bl	800f73c <_strtoll_l.constprop.0>
 800f89e:	bd10      	pop	{r4, pc}

0800f8a0 <_strtoull_l.constprop.0>:
 800f8a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f8a2:	b08b      	sub	sp, #44	; 0x2c
 800f8a4:	9202      	str	r2, [sp, #8]
 800f8a6:	4a54      	ldr	r2, [pc, #336]	; (800f9f8 <_strtoull_l.constprop.0+0x158>)
 800f8a8:	001e      	movs	r6, r3
 800f8aa:	9101      	str	r1, [sp, #4]
 800f8ac:	000b      	movs	r3, r1
 800f8ae:	4694      	mov	ip, r2
 800f8b0:	2108      	movs	r1, #8
 800f8b2:	9009      	str	r0, [sp, #36]	; 0x24
 800f8b4:	001a      	movs	r2, r3
 800f8b6:	4660      	mov	r0, ip
 800f8b8:	7814      	ldrb	r4, [r2, #0]
 800f8ba:	3301      	adds	r3, #1
 800f8bc:	5d00      	ldrb	r0, [r0, r4]
 800f8be:	001d      	movs	r5, r3
 800f8c0:	0007      	movs	r7, r0
 800f8c2:	400f      	ands	r7, r1
 800f8c4:	4208      	tst	r0, r1
 800f8c6:	d1f5      	bne.n	800f8b4 <_strtoull_l.constprop.0+0x14>
 800f8c8:	2c2d      	cmp	r4, #45	; 0x2d
 800f8ca:	d154      	bne.n	800f976 <_strtoull_l.constprop.0+0xd6>
 800f8cc:	781c      	ldrb	r4, [r3, #0]
 800f8ce:	2301      	movs	r3, #1
 800f8d0:	1c95      	adds	r5, r2, #2
 800f8d2:	9306      	str	r3, [sp, #24]
 800f8d4:	2e00      	cmp	r6, #0
 800f8d6:	d100      	bne.n	800f8da <_strtoull_l.constprop.0+0x3a>
 800f8d8:	e088      	b.n	800f9ec <_strtoull_l.constprop.0+0x14c>
 800f8da:	2e10      	cmp	r6, #16
 800f8dc:	d10a      	bne.n	800f8f4 <_strtoull_l.constprop.0+0x54>
 800f8de:	2c30      	cmp	r4, #48	; 0x30
 800f8e0:	d108      	bne.n	800f8f4 <_strtoull_l.constprop.0+0x54>
 800f8e2:	2220      	movs	r2, #32
 800f8e4:	782b      	ldrb	r3, [r5, #0]
 800f8e6:	4393      	bics	r3, r2
 800f8e8:	2b58      	cmp	r3, #88	; 0x58
 800f8ea:	d000      	beq.n	800f8ee <_strtoull_l.constprop.0+0x4e>
 800f8ec:	e078      	b.n	800f9e0 <_strtoull_l.constprop.0+0x140>
 800f8ee:	2610      	movs	r6, #16
 800f8f0:	786c      	ldrb	r4, [r5, #1]
 800f8f2:	3502      	adds	r5, #2
 800f8f4:	17f7      	asrs	r7, r6, #31
 800f8f6:	0032      	movs	r2, r6
 800f8f8:	003b      	movs	r3, r7
 800f8fa:	2001      	movs	r0, #1
 800f8fc:	4240      	negs	r0, r0
 800f8fe:	17c1      	asrs	r1, r0, #31
 800f900:	f7f0 fdd0 	bl	80004a4 <__aeabi_uldivmod>
 800f904:	0032      	movs	r2, r6
 800f906:	9007      	str	r0, [sp, #28]
 800f908:	9103      	str	r1, [sp, #12]
 800f90a:	003b      	movs	r3, r7
 800f90c:	2001      	movs	r0, #1
 800f90e:	4240      	negs	r0, r0
 800f910:	17c1      	asrs	r1, r0, #31
 800f912:	f7f0 fdc7 	bl	80004a4 <__aeabi_uldivmod>
 800f916:	2300      	movs	r3, #0
 800f918:	2000      	movs	r0, #0
 800f91a:	2100      	movs	r1, #0
 800f91c:	9208      	str	r2, [sp, #32]
 800f91e:	0022      	movs	r2, r4
 800f920:	3a30      	subs	r2, #48	; 0x30
 800f922:	2a09      	cmp	r2, #9
 800f924:	d82d      	bhi.n	800f982 <_strtoull_l.constprop.0+0xe2>
 800f926:	0014      	movs	r4, r2
 800f928:	42a6      	cmp	r6, r4
 800f92a:	dd39      	ble.n	800f9a0 <_strtoull_l.constprop.0+0x100>
 800f92c:	1c5a      	adds	r2, r3, #1
 800f92e:	d01f      	beq.n	800f970 <_strtoull_l.constprop.0+0xd0>
 800f930:	9b03      	ldr	r3, [sp, #12]
 800f932:	4299      	cmp	r1, r3
 800f934:	d831      	bhi.n	800f99a <_strtoull_l.constprop.0+0xfa>
 800f936:	d102      	bne.n	800f93e <_strtoull_l.constprop.0+0x9e>
 800f938:	9b07      	ldr	r3, [sp, #28]
 800f93a:	4298      	cmp	r0, r3
 800f93c:	d82d      	bhi.n	800f99a <_strtoull_l.constprop.0+0xfa>
 800f93e:	9b07      	ldr	r3, [sp, #28]
 800f940:	4283      	cmp	r3, r0
 800f942:	d107      	bne.n	800f954 <_strtoull_l.constprop.0+0xb4>
 800f944:	9b03      	ldr	r3, [sp, #12]
 800f946:	428b      	cmp	r3, r1
 800f948:	d104      	bne.n	800f954 <_strtoull_l.constprop.0+0xb4>
 800f94a:	2301      	movs	r3, #1
 800f94c:	9a08      	ldr	r2, [sp, #32]
 800f94e:	425b      	negs	r3, r3
 800f950:	42a2      	cmp	r2, r4
 800f952:	db0d      	blt.n	800f970 <_strtoull_l.constprop.0+0xd0>
 800f954:	000b      	movs	r3, r1
 800f956:	0002      	movs	r2, r0
 800f958:	0039      	movs	r1, r7
 800f95a:	0030      	movs	r0, r6
 800f95c:	f7f0 fdc2 	bl	80004e4 <__aeabi_lmul>
 800f960:	17e3      	asrs	r3, r4, #31
 800f962:	9404      	str	r4, [sp, #16]
 800f964:	9305      	str	r3, [sp, #20]
 800f966:	9b04      	ldr	r3, [sp, #16]
 800f968:	9c05      	ldr	r4, [sp, #20]
 800f96a:	18c0      	adds	r0, r0, r3
 800f96c:	4161      	adcs	r1, r4
 800f96e:	2301      	movs	r3, #1
 800f970:	782c      	ldrb	r4, [r5, #0]
 800f972:	3501      	adds	r5, #1
 800f974:	e7d3      	b.n	800f91e <_strtoull_l.constprop.0+0x7e>
 800f976:	9706      	str	r7, [sp, #24]
 800f978:	2c2b      	cmp	r4, #43	; 0x2b
 800f97a:	d1ab      	bne.n	800f8d4 <_strtoull_l.constprop.0+0x34>
 800f97c:	781c      	ldrb	r4, [r3, #0]
 800f97e:	1c95      	adds	r5, r2, #2
 800f980:	e7a8      	b.n	800f8d4 <_strtoull_l.constprop.0+0x34>
 800f982:	0022      	movs	r2, r4
 800f984:	3a41      	subs	r2, #65	; 0x41
 800f986:	2a19      	cmp	r2, #25
 800f988:	d801      	bhi.n	800f98e <_strtoull_l.constprop.0+0xee>
 800f98a:	3c37      	subs	r4, #55	; 0x37
 800f98c:	e7cc      	b.n	800f928 <_strtoull_l.constprop.0+0x88>
 800f98e:	0022      	movs	r2, r4
 800f990:	3a61      	subs	r2, #97	; 0x61
 800f992:	2a19      	cmp	r2, #25
 800f994:	d804      	bhi.n	800f9a0 <_strtoull_l.constprop.0+0x100>
 800f996:	3c57      	subs	r4, #87	; 0x57
 800f998:	e7c6      	b.n	800f928 <_strtoull_l.constprop.0+0x88>
 800f99a:	2301      	movs	r3, #1
 800f99c:	425b      	negs	r3, r3
 800f99e:	e7e7      	b.n	800f970 <_strtoull_l.constprop.0+0xd0>
 800f9a0:	1c5a      	adds	r2, r3, #1
 800f9a2:	d10a      	bne.n	800f9ba <_strtoull_l.constprop.0+0x11a>
 800f9a4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f9a6:	3323      	adds	r3, #35	; 0x23
 800f9a8:	6013      	str	r3, [r2, #0]
 800f9aa:	9b02      	ldr	r3, [sp, #8]
 800f9ac:	2001      	movs	r0, #1
 800f9ae:	4240      	negs	r0, r0
 800f9b0:	17c1      	asrs	r1, r0, #31
 800f9b2:	2b00      	cmp	r3, #0
 800f9b4:	d10e      	bne.n	800f9d4 <_strtoull_l.constprop.0+0x134>
 800f9b6:	b00b      	add	sp, #44	; 0x2c
 800f9b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f9ba:	9a06      	ldr	r2, [sp, #24]
 800f9bc:	2a00      	cmp	r2, #0
 800f9be:	d004      	beq.n	800f9ca <_strtoull_l.constprop.0+0x12a>
 800f9c0:	0006      	movs	r6, r0
 800f9c2:	000f      	movs	r7, r1
 800f9c4:	2100      	movs	r1, #0
 800f9c6:	4270      	negs	r0, r6
 800f9c8:	41b9      	sbcs	r1, r7
 800f9ca:	9a02      	ldr	r2, [sp, #8]
 800f9cc:	2a00      	cmp	r2, #0
 800f9ce:	d0f2      	beq.n	800f9b6 <_strtoull_l.constprop.0+0x116>
 800f9d0:	2b00      	cmp	r3, #0
 800f9d2:	d001      	beq.n	800f9d8 <_strtoull_l.constprop.0+0x138>
 800f9d4:	1e6b      	subs	r3, r5, #1
 800f9d6:	9301      	str	r3, [sp, #4]
 800f9d8:	9b02      	ldr	r3, [sp, #8]
 800f9da:	9a01      	ldr	r2, [sp, #4]
 800f9dc:	601a      	str	r2, [r3, #0]
 800f9de:	e7ea      	b.n	800f9b6 <_strtoull_l.constprop.0+0x116>
 800f9e0:	2430      	movs	r4, #48	; 0x30
 800f9e2:	2e00      	cmp	r6, #0
 800f9e4:	d000      	beq.n	800f9e8 <_strtoull_l.constprop.0+0x148>
 800f9e6:	e785      	b.n	800f8f4 <_strtoull_l.constprop.0+0x54>
 800f9e8:	3608      	adds	r6, #8
 800f9ea:	e783      	b.n	800f8f4 <_strtoull_l.constprop.0+0x54>
 800f9ec:	2c30      	cmp	r4, #48	; 0x30
 800f9ee:	d100      	bne.n	800f9f2 <_strtoull_l.constprop.0+0x152>
 800f9f0:	e777      	b.n	800f8e2 <_strtoull_l.constprop.0+0x42>
 800f9f2:	260a      	movs	r6, #10
 800f9f4:	e77e      	b.n	800f8f4 <_strtoull_l.constprop.0+0x54>
 800f9f6:	46c0      	nop			; (mov r8, r8)
 800f9f8:	08012a51 	.word	0x08012a51

0800f9fc <_strtoull_r>:
 800f9fc:	b510      	push	{r4, lr}
 800f9fe:	f7ff ff4f 	bl	800f8a0 <_strtoull_l.constprop.0>
 800fa02:	bd10      	pop	{r4, pc}

0800fa04 <_mbrtowc_r>:
 800fa04:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800fa06:	0004      	movs	r4, r0
 800fa08:	0010      	movs	r0, r2
 800fa0a:	4a0b      	ldr	r2, [pc, #44]	; (800fa38 <_mbrtowc_r+0x34>)
 800fa0c:	9d06      	ldr	r5, [sp, #24]
 800fa0e:	32e4      	adds	r2, #228	; 0xe4
 800fa10:	6816      	ldr	r6, [r2, #0]
 800fa12:	2800      	cmp	r0, #0
 800fa14:	d10c      	bne.n	800fa30 <_mbrtowc_r+0x2c>
 800fa16:	2301      	movs	r3, #1
 800fa18:	0001      	movs	r1, r0
 800fa1a:	4a08      	ldr	r2, [pc, #32]	; (800fa3c <_mbrtowc_r+0x38>)
 800fa1c:	9500      	str	r5, [sp, #0]
 800fa1e:	0020      	movs	r0, r4
 800fa20:	47b0      	blx	r6
 800fa22:	1c43      	adds	r3, r0, #1
 800fa24:	d103      	bne.n	800fa2e <_mbrtowc_r+0x2a>
 800fa26:	2300      	movs	r3, #0
 800fa28:	602b      	str	r3, [r5, #0]
 800fa2a:	338a      	adds	r3, #138	; 0x8a
 800fa2c:	6023      	str	r3, [r4, #0]
 800fa2e:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
 800fa30:	0002      	movs	r2, r0
 800fa32:	9500      	str	r5, [sp, #0]
 800fa34:	e7f3      	b.n	800fa1e <_mbrtowc_r+0x1a>
 800fa36:	46c0      	nop			; (mov r8, r8)
 800fa38:	2000042c 	.word	0x2000042c
 800fa3c:	08012ddb 	.word	0x08012ddb

0800fa40 <iswspace>:
 800fa40:	b510      	push	{r4, lr}
 800fa42:	2100      	movs	r1, #0
 800fa44:	f000 f802 	bl	800fa4c <iswspace_l>
 800fa48:	bd10      	pop	{r4, pc}
	...

0800fa4c <iswspace_l>:
 800fa4c:	0003      	movs	r3, r0
 800fa4e:	2000      	movs	r0, #0
 800fa50:	2bff      	cmp	r3, #255	; 0xff
 800fa52:	d803      	bhi.n	800fa5c <iswspace_l+0x10>
 800fa54:	4a02      	ldr	r2, [pc, #8]	; (800fa60 <iswspace_l+0x14>)
 800fa56:	5cd0      	ldrb	r0, [r2, r3]
 800fa58:	2308      	movs	r3, #8
 800fa5a:	4018      	ands	r0, r3
 800fa5c:	4770      	bx	lr
 800fa5e:	46c0      	nop			; (mov r8, r8)
 800fa60:	08012a51 	.word	0x08012a51

0800fa64 <fiprintf>:
 800fa64:	b40e      	push	{r1, r2, r3}
 800fa66:	b517      	push	{r0, r1, r2, r4, lr}
 800fa68:	4c05      	ldr	r4, [pc, #20]	; (800fa80 <fiprintf+0x1c>)
 800fa6a:	ab05      	add	r3, sp, #20
 800fa6c:	cb04      	ldmia	r3!, {r2}
 800fa6e:	0001      	movs	r1, r0
 800fa70:	6820      	ldr	r0, [r4, #0]
 800fa72:	9301      	str	r3, [sp, #4]
 800fa74:	f000 f954 	bl	800fd20 <_vfiprintf_r>
 800fa78:	bc1e      	pop	{r1, r2, r3, r4}
 800fa7a:	bc08      	pop	{r3}
 800fa7c:	b003      	add	sp, #12
 800fa7e:	4718      	bx	r3
 800fa80:	200006b8 	.word	0x200006b8

0800fa84 <__ssprint_r>:
 800fa84:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fa86:	6813      	ldr	r3, [r2, #0]
 800fa88:	b087      	sub	sp, #28
 800fa8a:	0017      	movs	r7, r2
 800fa8c:	9303      	str	r3, [sp, #12]
 800fa8e:	6893      	ldr	r3, [r2, #8]
 800fa90:	2200      	movs	r2, #0
 800fa92:	000c      	movs	r4, r1
 800fa94:	9005      	str	r0, [sp, #20]
 800fa96:	9202      	str	r2, [sp, #8]
 800fa98:	9201      	str	r2, [sp, #4]
 800fa9a:	4293      	cmp	r3, r2
 800fa9c:	d10d      	bne.n	800faba <__ssprint_r+0x36>
 800fa9e:	2000      	movs	r0, #0
 800faa0:	2300      	movs	r3, #0
 800faa2:	607b      	str	r3, [r7, #4]
 800faa4:	b007      	add	sp, #28
 800faa6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800faa8:	9b03      	ldr	r3, [sp, #12]
 800faaa:	681b      	ldr	r3, [r3, #0]
 800faac:	9302      	str	r3, [sp, #8]
 800faae:	9b03      	ldr	r3, [sp, #12]
 800fab0:	685b      	ldr	r3, [r3, #4]
 800fab2:	9301      	str	r3, [sp, #4]
 800fab4:	9b03      	ldr	r3, [sp, #12]
 800fab6:	3308      	adds	r3, #8
 800fab8:	9303      	str	r3, [sp, #12]
 800faba:	9a01      	ldr	r2, [sp, #4]
 800fabc:	68a6      	ldr	r6, [r4, #8]
 800fabe:	6823      	ldr	r3, [r4, #0]
 800fac0:	2a00      	cmp	r2, #0
 800fac2:	d0f1      	beq.n	800faa8 <__ssprint_r+0x24>
 800fac4:	42b2      	cmp	r2, r6
 800fac6:	d32e      	bcc.n	800fb26 <__ssprint_r+0xa2>
 800fac8:	2190      	movs	r1, #144	; 0x90
 800faca:	89a2      	ldrh	r2, [r4, #12]
 800facc:	00c9      	lsls	r1, r1, #3
 800face:	420a      	tst	r2, r1
 800fad0:	d029      	beq.n	800fb26 <__ssprint_r+0xa2>
 800fad2:	2003      	movs	r0, #3
 800fad4:	6921      	ldr	r1, [r4, #16]
 800fad6:	1a5b      	subs	r3, r3, r1
 800fad8:	9304      	str	r3, [sp, #16]
 800fada:	6963      	ldr	r3, [r4, #20]
 800fadc:	4343      	muls	r3, r0
 800fade:	0fdd      	lsrs	r5, r3, #31
 800fae0:	18ed      	adds	r5, r5, r3
 800fae2:	9b04      	ldr	r3, [sp, #16]
 800fae4:	9801      	ldr	r0, [sp, #4]
 800fae6:	3301      	adds	r3, #1
 800fae8:	181b      	adds	r3, r3, r0
 800faea:	106d      	asrs	r5, r5, #1
 800faec:	42ab      	cmp	r3, r5
 800faee:	d900      	bls.n	800faf2 <__ssprint_r+0x6e>
 800faf0:	001d      	movs	r5, r3
 800faf2:	0552      	lsls	r2, r2, #21
 800faf4:	d532      	bpl.n	800fb5c <__ssprint_r+0xd8>
 800faf6:	0029      	movs	r1, r5
 800faf8:	9805      	ldr	r0, [sp, #20]
 800fafa:	f7f9 fa43 	bl	8008f84 <_malloc_r>
 800fafe:	1e06      	subs	r6, r0, #0
 800fb00:	d036      	beq.n	800fb70 <__ssprint_r+0xec>
 800fb02:	9a04      	ldr	r2, [sp, #16]
 800fb04:	6921      	ldr	r1, [r4, #16]
 800fb06:	f7fa fd94 	bl	800a632 <memcpy>
 800fb0a:	89a2      	ldrh	r2, [r4, #12]
 800fb0c:	4b1e      	ldr	r3, [pc, #120]	; (800fb88 <__ssprint_r+0x104>)
 800fb0e:	401a      	ands	r2, r3
 800fb10:	2380      	movs	r3, #128	; 0x80
 800fb12:	4313      	orrs	r3, r2
 800fb14:	81a3      	strh	r3, [r4, #12]
 800fb16:	9b04      	ldr	r3, [sp, #16]
 800fb18:	6126      	str	r6, [r4, #16]
 800fb1a:	18f6      	adds	r6, r6, r3
 800fb1c:	6026      	str	r6, [r4, #0]
 800fb1e:	6165      	str	r5, [r4, #20]
 800fb20:	9e01      	ldr	r6, [sp, #4]
 800fb22:	1aed      	subs	r5, r5, r3
 800fb24:	60a5      	str	r5, [r4, #8]
 800fb26:	9b01      	ldr	r3, [sp, #4]
 800fb28:	429e      	cmp	r6, r3
 800fb2a:	d900      	bls.n	800fb2e <__ssprint_r+0xaa>
 800fb2c:	001e      	movs	r6, r3
 800fb2e:	0032      	movs	r2, r6
 800fb30:	9902      	ldr	r1, [sp, #8]
 800fb32:	6820      	ldr	r0, [r4, #0]
 800fb34:	f001 f86d 	bl	8010c12 <memmove>
 800fb38:	9a01      	ldr	r2, [sp, #4]
 800fb3a:	68a3      	ldr	r3, [r4, #8]
 800fb3c:	4694      	mov	ip, r2
 800fb3e:	1b9b      	subs	r3, r3, r6
 800fb40:	60a3      	str	r3, [r4, #8]
 800fb42:	6823      	ldr	r3, [r4, #0]
 800fb44:	199b      	adds	r3, r3, r6
 800fb46:	6023      	str	r3, [r4, #0]
 800fb48:	9b02      	ldr	r3, [sp, #8]
 800fb4a:	4463      	add	r3, ip
 800fb4c:	9302      	str	r3, [sp, #8]
 800fb4e:	68bb      	ldr	r3, [r7, #8]
 800fb50:	1a9b      	subs	r3, r3, r2
 800fb52:	60bb      	str	r3, [r7, #8]
 800fb54:	d0a3      	beq.n	800fa9e <__ssprint_r+0x1a>
 800fb56:	2300      	movs	r3, #0
 800fb58:	9301      	str	r3, [sp, #4]
 800fb5a:	e7ae      	b.n	800faba <__ssprint_r+0x36>
 800fb5c:	002a      	movs	r2, r5
 800fb5e:	9805      	ldr	r0, [sp, #20]
 800fb60:	f7ff fbc0 	bl	800f2e4 <_realloc_r>
 800fb64:	1e06      	subs	r6, r0, #0
 800fb66:	d1d6      	bne.n	800fb16 <__ssprint_r+0x92>
 800fb68:	6921      	ldr	r1, [r4, #16]
 800fb6a:	9805      	ldr	r0, [sp, #20]
 800fb6c:	f7fa fddc 	bl	800a728 <_free_r>
 800fb70:	230c      	movs	r3, #12
 800fb72:	9a05      	ldr	r2, [sp, #20]
 800fb74:	2001      	movs	r0, #1
 800fb76:	6013      	str	r3, [r2, #0]
 800fb78:	89a2      	ldrh	r2, [r4, #12]
 800fb7a:	3334      	adds	r3, #52	; 0x34
 800fb7c:	4313      	orrs	r3, r2
 800fb7e:	81a3      	strh	r3, [r4, #12]
 800fb80:	2300      	movs	r3, #0
 800fb82:	4240      	negs	r0, r0
 800fb84:	60bb      	str	r3, [r7, #8]
 800fb86:	e78b      	b.n	800faa0 <__ssprint_r+0x1c>
 800fb88:	fffffb7f 	.word	0xfffffb7f

0800fb8c <_sungetc_r>:
 800fb8c:	b570      	push	{r4, r5, r6, lr}
 800fb8e:	0014      	movs	r4, r2
 800fb90:	1c4b      	adds	r3, r1, #1
 800fb92:	d103      	bne.n	800fb9c <_sungetc_r+0x10>
 800fb94:	2501      	movs	r5, #1
 800fb96:	426d      	negs	r5, r5
 800fb98:	0028      	movs	r0, r5
 800fb9a:	bd70      	pop	{r4, r5, r6, pc}
 800fb9c:	8993      	ldrh	r3, [r2, #12]
 800fb9e:	2220      	movs	r2, #32
 800fba0:	4393      	bics	r3, r2
 800fba2:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800fba4:	81a3      	strh	r3, [r4, #12]
 800fba6:	b2ce      	uxtb	r6, r1
 800fba8:	6863      	ldr	r3, [r4, #4]
 800fbaa:	b2cd      	uxtb	r5, r1
 800fbac:	2a00      	cmp	r2, #0
 800fbae:	d010      	beq.n	800fbd2 <_sungetc_r+0x46>
 800fbb0:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800fbb2:	429a      	cmp	r2, r3
 800fbb4:	dd07      	ble.n	800fbc6 <_sungetc_r+0x3a>
 800fbb6:	6823      	ldr	r3, [r4, #0]
 800fbb8:	3b01      	subs	r3, #1
 800fbba:	6023      	str	r3, [r4, #0]
 800fbbc:	701e      	strb	r6, [r3, #0]
 800fbbe:	6863      	ldr	r3, [r4, #4]
 800fbc0:	3301      	adds	r3, #1
 800fbc2:	6063      	str	r3, [r4, #4]
 800fbc4:	e7e8      	b.n	800fb98 <_sungetc_r+0xc>
 800fbc6:	0021      	movs	r1, r4
 800fbc8:	f000 ff1a 	bl	8010a00 <__submore>
 800fbcc:	2800      	cmp	r0, #0
 800fbce:	d0f2      	beq.n	800fbb6 <_sungetc_r+0x2a>
 800fbd0:	e7e0      	b.n	800fb94 <_sungetc_r+0x8>
 800fbd2:	6921      	ldr	r1, [r4, #16]
 800fbd4:	6822      	ldr	r2, [r4, #0]
 800fbd6:	2900      	cmp	r1, #0
 800fbd8:	d007      	beq.n	800fbea <_sungetc_r+0x5e>
 800fbda:	4291      	cmp	r1, r2
 800fbdc:	d205      	bcs.n	800fbea <_sungetc_r+0x5e>
 800fbde:	1e51      	subs	r1, r2, #1
 800fbe0:	7808      	ldrb	r0, [r1, #0]
 800fbe2:	42a8      	cmp	r0, r5
 800fbe4:	d101      	bne.n	800fbea <_sungetc_r+0x5e>
 800fbe6:	6021      	str	r1, [r4, #0]
 800fbe8:	e7ea      	b.n	800fbc0 <_sungetc_r+0x34>
 800fbea:	63e3      	str	r3, [r4, #60]	; 0x3c
 800fbec:	0023      	movs	r3, r4
 800fbee:	3340      	adds	r3, #64	; 0x40
 800fbf0:	6323      	str	r3, [r4, #48]	; 0x30
 800fbf2:	2303      	movs	r3, #3
 800fbf4:	6363      	str	r3, [r4, #52]	; 0x34
 800fbf6:	0023      	movs	r3, r4
 800fbf8:	3342      	adds	r3, #66	; 0x42
 800fbfa:	63a2      	str	r2, [r4, #56]	; 0x38
 800fbfc:	701e      	strb	r6, [r3, #0]
 800fbfe:	6023      	str	r3, [r4, #0]
 800fc00:	2301      	movs	r3, #1
 800fc02:	e7de      	b.n	800fbc2 <_sungetc_r+0x36>

0800fc04 <__ssrefill_r>:
 800fc04:	b510      	push	{r4, lr}
 800fc06:	000c      	movs	r4, r1
 800fc08:	6b09      	ldr	r1, [r1, #48]	; 0x30
 800fc0a:	2900      	cmp	r1, #0
 800fc0c:	d00e      	beq.n	800fc2c <__ssrefill_r+0x28>
 800fc0e:	0023      	movs	r3, r4
 800fc10:	3340      	adds	r3, #64	; 0x40
 800fc12:	4299      	cmp	r1, r3
 800fc14:	d001      	beq.n	800fc1a <__ssrefill_r+0x16>
 800fc16:	f7fa fd87 	bl	800a728 <_free_r>
 800fc1a:	2000      	movs	r0, #0
 800fc1c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800fc1e:	6320      	str	r0, [r4, #48]	; 0x30
 800fc20:	6063      	str	r3, [r4, #4]
 800fc22:	4283      	cmp	r3, r0
 800fc24:	d002      	beq.n	800fc2c <__ssrefill_r+0x28>
 800fc26:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800fc28:	6023      	str	r3, [r4, #0]
 800fc2a:	bd10      	pop	{r4, pc}
 800fc2c:	6923      	ldr	r3, [r4, #16]
 800fc2e:	2001      	movs	r0, #1
 800fc30:	6023      	str	r3, [r4, #0]
 800fc32:	2300      	movs	r3, #0
 800fc34:	89a2      	ldrh	r2, [r4, #12]
 800fc36:	6063      	str	r3, [r4, #4]
 800fc38:	3320      	adds	r3, #32
 800fc3a:	4313      	orrs	r3, r2
 800fc3c:	81a3      	strh	r3, [r4, #12]
 800fc3e:	4240      	negs	r0, r0
 800fc40:	e7f3      	b.n	800fc2a <__ssrefill_r+0x26>

0800fc42 <_sfread_r>:
 800fc42:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fc44:	0014      	movs	r4, r2
 800fc46:	435c      	muls	r4, r3
 800fc48:	b087      	sub	sp, #28
 800fc4a:	1e26      	subs	r6, r4, #0
 800fc4c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800fc4e:	9005      	str	r0, [sp, #20]
 800fc50:	9101      	str	r1, [sp, #4]
 800fc52:	9202      	str	r2, [sp, #8]
 800fc54:	9303      	str	r3, [sp, #12]
 800fc56:	d11e      	bne.n	800fc96 <_sfread_r+0x54>
 800fc58:	0020      	movs	r0, r4
 800fc5a:	b007      	add	sp, #28
 800fc5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fc5e:	003a      	movs	r2, r7
 800fc60:	9801      	ldr	r0, [sp, #4]
 800fc62:	f7fa fce6 	bl	800a632 <memcpy>
 800fc66:	682b      	ldr	r3, [r5, #0]
 800fc68:	0029      	movs	r1, r5
 800fc6a:	19db      	adds	r3, r3, r7
 800fc6c:	602b      	str	r3, [r5, #0]
 800fc6e:	2300      	movs	r3, #0
 800fc70:	606b      	str	r3, [r5, #4]
 800fc72:	9b01      	ldr	r3, [sp, #4]
 800fc74:	9805      	ldr	r0, [sp, #20]
 800fc76:	19db      	adds	r3, r3, r7
 800fc78:	9301      	str	r3, [sp, #4]
 800fc7a:	1bf3      	subs	r3, r6, r7
 800fc7c:	9304      	str	r3, [sp, #16]
 800fc7e:	f7ff ffc1 	bl	800fc04 <__ssrefill_r>
 800fc82:	2800      	cmp	r0, #0
 800fc84:	d006      	beq.n	800fc94 <_sfread_r+0x52>
 800fc86:	193c      	adds	r4, r7, r4
 800fc88:	1ba0      	subs	r0, r4, r6
 800fc8a:	9902      	ldr	r1, [sp, #8]
 800fc8c:	f7f0 fa56 	bl	800013c <__udivsi3>
 800fc90:	0004      	movs	r4, r0
 800fc92:	e7e1      	b.n	800fc58 <_sfread_r+0x16>
 800fc94:	9e04      	ldr	r6, [sp, #16]
 800fc96:	686f      	ldr	r7, [r5, #4]
 800fc98:	6829      	ldr	r1, [r5, #0]
 800fc9a:	42b7      	cmp	r7, r6
 800fc9c:	d3df      	bcc.n	800fc5e <_sfread_r+0x1c>
 800fc9e:	0032      	movs	r2, r6
 800fca0:	9801      	ldr	r0, [sp, #4]
 800fca2:	f7fa fcc6 	bl	800a632 <memcpy>
 800fca6:	686b      	ldr	r3, [r5, #4]
 800fca8:	9c03      	ldr	r4, [sp, #12]
 800fcaa:	1b9b      	subs	r3, r3, r6
 800fcac:	606b      	str	r3, [r5, #4]
 800fcae:	682b      	ldr	r3, [r5, #0]
 800fcb0:	199b      	adds	r3, r3, r6
 800fcb2:	602b      	str	r3, [r5, #0]
 800fcb4:	e7d0      	b.n	800fc58 <_sfread_r+0x16>

0800fcb6 <__sprint_r>:
 800fcb6:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fcb8:	6893      	ldr	r3, [r2, #8]
 800fcba:	b085      	sub	sp, #20
 800fcbc:	9001      	str	r0, [sp, #4]
 800fcbe:	000d      	movs	r5, r1
 800fcc0:	0014      	movs	r4, r2
 800fcc2:	1e18      	subs	r0, r3, #0
 800fcc4:	d018      	beq.n	800fcf8 <__sprint_r+0x42>
 800fcc6:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 800fcc8:	049b      	lsls	r3, r3, #18
 800fcca:	d524      	bpl.n	800fd16 <__sprint_r+0x60>
 800fccc:	6817      	ldr	r7, [r2, #0]
 800fcce:	2600      	movs	r6, #0
 800fcd0:	683b      	ldr	r3, [r7, #0]
 800fcd2:	9302      	str	r3, [sp, #8]
 800fcd4:	687b      	ldr	r3, [r7, #4]
 800fcd6:	9300      	str	r3, [sp, #0]
 800fcd8:	089b      	lsrs	r3, r3, #2
 800fcda:	9303      	str	r3, [sp, #12]
 800fcdc:	9b03      	ldr	r3, [sp, #12]
 800fcde:	42b3      	cmp	r3, r6
 800fce0:	dc0e      	bgt.n	800fd00 <__sprint_r+0x4a>
 800fce2:	2203      	movs	r2, #3
 800fce4:	9b00      	ldr	r3, [sp, #0]
 800fce6:	68a0      	ldr	r0, [r4, #8]
 800fce8:	4393      	bics	r3, r2
 800fcea:	1ac0      	subs	r0, r0, r3
 800fcec:	60a0      	str	r0, [r4, #8]
 800fcee:	3708      	adds	r7, #8
 800fcf0:	2800      	cmp	r0, #0
 800fcf2:	d1ec      	bne.n	800fcce <__sprint_r+0x18>
 800fcf4:	2300      	movs	r3, #0
 800fcf6:	60a3      	str	r3, [r4, #8]
 800fcf8:	2300      	movs	r3, #0
 800fcfa:	6063      	str	r3, [r4, #4]
 800fcfc:	b005      	add	sp, #20
 800fcfe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fd00:	9902      	ldr	r1, [sp, #8]
 800fd02:	00b3      	lsls	r3, r6, #2
 800fd04:	58c9      	ldr	r1, [r1, r3]
 800fd06:	002a      	movs	r2, r5
 800fd08:	9801      	ldr	r0, [sp, #4]
 800fd0a:	f000 ff59 	bl	8010bc0 <_fputwc_r>
 800fd0e:	1c43      	adds	r3, r0, #1
 800fd10:	d0f0      	beq.n	800fcf4 <__sprint_r+0x3e>
 800fd12:	3601      	adds	r6, #1
 800fd14:	e7e2      	b.n	800fcdc <__sprint_r+0x26>
 800fd16:	9801      	ldr	r0, [sp, #4]
 800fd18:	f000 fd14 	bl	8010744 <__sfvwrite_r>
 800fd1c:	e7ea      	b.n	800fcf4 <__sprint_r+0x3e>
	...

0800fd20 <_vfiprintf_r>:
 800fd20:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fd22:	b0c1      	sub	sp, #260	; 0x104
 800fd24:	001c      	movs	r4, r3
 800fd26:	001f      	movs	r7, r3
 800fd28:	9006      	str	r0, [sp, #24]
 800fd2a:	9103      	str	r1, [sp, #12]
 800fd2c:	9207      	str	r2, [sp, #28]
 800fd2e:	2800      	cmp	r0, #0
 800fd30:	d004      	beq.n	800fd3c <_vfiprintf_r+0x1c>
 800fd32:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800fd34:	2b00      	cmp	r3, #0
 800fd36:	d101      	bne.n	800fd3c <_vfiprintf_r+0x1c>
 800fd38:	f7fa fa98 	bl	800a26c <__sinit>
 800fd3c:	9b03      	ldr	r3, [sp, #12]
 800fd3e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800fd40:	07db      	lsls	r3, r3, #31
 800fd42:	d407      	bmi.n	800fd54 <_vfiprintf_r+0x34>
 800fd44:	9b03      	ldr	r3, [sp, #12]
 800fd46:	899b      	ldrh	r3, [r3, #12]
 800fd48:	059b      	lsls	r3, r3, #22
 800fd4a:	d403      	bmi.n	800fd54 <_vfiprintf_r+0x34>
 800fd4c:	9b03      	ldr	r3, [sp, #12]
 800fd4e:	6d98      	ldr	r0, [r3, #88]	; 0x58
 800fd50:	f7fa fc62 	bl	800a618 <__retarget_lock_acquire_recursive>
 800fd54:	9b03      	ldr	r3, [sp, #12]
 800fd56:	220c      	movs	r2, #12
 800fd58:	5e9a      	ldrsh	r2, [r3, r2]
 800fd5a:	2380      	movs	r3, #128	; 0x80
 800fd5c:	019b      	lsls	r3, r3, #6
 800fd5e:	421a      	tst	r2, r3
 800fd60:	d107      	bne.n	800fd72 <_vfiprintf_r+0x52>
 800fd62:	4313      	orrs	r3, r2
 800fd64:	9a03      	ldr	r2, [sp, #12]
 800fd66:	8193      	strh	r3, [r2, #12]
 800fd68:	6e53      	ldr	r3, [r2, #100]	; 0x64
 800fd6a:	4aa3      	ldr	r2, [pc, #652]	; (800fff8 <_vfiprintf_r+0x2d8>)
 800fd6c:	4013      	ands	r3, r2
 800fd6e:	9a03      	ldr	r2, [sp, #12]
 800fd70:	6653      	str	r3, [r2, #100]	; 0x64
 800fd72:	9b03      	ldr	r3, [sp, #12]
 800fd74:	899b      	ldrh	r3, [r3, #12]
 800fd76:	071b      	lsls	r3, r3, #28
 800fd78:	d503      	bpl.n	800fd82 <_vfiprintf_r+0x62>
 800fd7a:	9b03      	ldr	r3, [sp, #12]
 800fd7c:	691b      	ldr	r3, [r3, #16]
 800fd7e:	2b00      	cmp	r3, #0
 800fd80:	d118      	bne.n	800fdb4 <_vfiprintf_r+0x94>
 800fd82:	9903      	ldr	r1, [sp, #12]
 800fd84:	9806      	ldr	r0, [sp, #24]
 800fd86:	f000 fe79 	bl	8010a7c <__swsetup_r>
 800fd8a:	2800      	cmp	r0, #0
 800fd8c:	d012      	beq.n	800fdb4 <_vfiprintf_r+0x94>
 800fd8e:	9b03      	ldr	r3, [sp, #12]
 800fd90:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800fd92:	07db      	lsls	r3, r3, #31
 800fd94:	d505      	bpl.n	800fda2 <_vfiprintf_r+0x82>
 800fd96:	2301      	movs	r3, #1
 800fd98:	425b      	negs	r3, r3
 800fd9a:	9308      	str	r3, [sp, #32]
 800fd9c:	9808      	ldr	r0, [sp, #32]
 800fd9e:	b041      	add	sp, #260	; 0x104
 800fda0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fda2:	9b03      	ldr	r3, [sp, #12]
 800fda4:	899b      	ldrh	r3, [r3, #12]
 800fda6:	059b      	lsls	r3, r3, #22
 800fda8:	d4f5      	bmi.n	800fd96 <_vfiprintf_r+0x76>
 800fdaa:	9b03      	ldr	r3, [sp, #12]
 800fdac:	6d98      	ldr	r0, [r3, #88]	; 0x58
 800fdae:	f7fa fc34 	bl	800a61a <__retarget_lock_release_recursive>
 800fdb2:	e7f0      	b.n	800fd96 <_vfiprintf_r+0x76>
 800fdb4:	221a      	movs	r2, #26
 800fdb6:	9b03      	ldr	r3, [sp, #12]
 800fdb8:	899b      	ldrh	r3, [r3, #12]
 800fdba:	401a      	ands	r2, r3
 800fdbc:	2a0a      	cmp	r2, #10
 800fdbe:	d116      	bne.n	800fdee <_vfiprintf_r+0xce>
 800fdc0:	9a03      	ldr	r2, [sp, #12]
 800fdc2:	210e      	movs	r1, #14
 800fdc4:	5e52      	ldrsh	r2, [r2, r1]
 800fdc6:	2a00      	cmp	r2, #0
 800fdc8:	db11      	blt.n	800fdee <_vfiprintf_r+0xce>
 800fdca:	9a03      	ldr	r2, [sp, #12]
 800fdcc:	6e52      	ldr	r2, [r2, #100]	; 0x64
 800fdce:	07d2      	lsls	r2, r2, #31
 800fdd0:	d405      	bmi.n	800fdde <_vfiprintf_r+0xbe>
 800fdd2:	059b      	lsls	r3, r3, #22
 800fdd4:	d403      	bmi.n	800fdde <_vfiprintf_r+0xbe>
 800fdd6:	9b03      	ldr	r3, [sp, #12]
 800fdd8:	6d98      	ldr	r0, [r3, #88]	; 0x58
 800fdda:	f7fa fc1e 	bl	800a61a <__retarget_lock_release_recursive>
 800fdde:	0023      	movs	r3, r4
 800fde0:	9a07      	ldr	r2, [sp, #28]
 800fde2:	9903      	ldr	r1, [sp, #12]
 800fde4:	9806      	ldr	r0, [sp, #24]
 800fde6:	f000 fc69 	bl	80106bc <__sbprintf>
 800fdea:	9008      	str	r0, [sp, #32]
 800fdec:	e7d6      	b.n	800fd9c <_vfiprintf_r+0x7c>
 800fdee:	2300      	movs	r3, #0
 800fdf0:	ad17      	add	r5, sp, #92	; 0x5c
 800fdf2:	9514      	str	r5, [sp, #80]	; 0x50
 800fdf4:	9316      	str	r3, [sp, #88]	; 0x58
 800fdf6:	9315      	str	r3, [sp, #84]	; 0x54
 800fdf8:	930c      	str	r3, [sp, #48]	; 0x30
 800fdfa:	930d      	str	r3, [sp, #52]	; 0x34
 800fdfc:	930e      	str	r3, [sp, #56]	; 0x38
 800fdfe:	930f      	str	r3, [sp, #60]	; 0x3c
 800fe00:	9308      	str	r3, [sp, #32]
 800fe02:	9c07      	ldr	r4, [sp, #28]
 800fe04:	7823      	ldrb	r3, [r4, #0]
 800fe06:	2b00      	cmp	r3, #0
 800fe08:	d002      	beq.n	800fe10 <_vfiprintf_r+0xf0>
 800fe0a:	2b25      	cmp	r3, #37	; 0x25
 800fe0c:	d000      	beq.n	800fe10 <_vfiprintf_r+0xf0>
 800fe0e:	e08d      	b.n	800ff2c <_vfiprintf_r+0x20c>
 800fe10:	9b07      	ldr	r3, [sp, #28]
 800fe12:	1ae6      	subs	r6, r4, r3
 800fe14:	429c      	cmp	r4, r3
 800fe16:	d016      	beq.n	800fe46 <_vfiprintf_r+0x126>
 800fe18:	602b      	str	r3, [r5, #0]
 800fe1a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800fe1c:	606e      	str	r6, [r5, #4]
 800fe1e:	199b      	adds	r3, r3, r6
 800fe20:	9316      	str	r3, [sp, #88]	; 0x58
 800fe22:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800fe24:	3508      	adds	r5, #8
 800fe26:	3301      	adds	r3, #1
 800fe28:	9315      	str	r3, [sp, #84]	; 0x54
 800fe2a:	2b07      	cmp	r3, #7
 800fe2c:	dd08      	ble.n	800fe40 <_vfiprintf_r+0x120>
 800fe2e:	9903      	ldr	r1, [sp, #12]
 800fe30:	9806      	ldr	r0, [sp, #24]
 800fe32:	aa14      	add	r2, sp, #80	; 0x50
 800fe34:	f7ff ff3f 	bl	800fcb6 <__sprint_r>
 800fe38:	2800      	cmp	r0, #0
 800fe3a:	d000      	beq.n	800fe3e <_vfiprintf_r+0x11e>
 800fe3c:	e3d9      	b.n	80105f2 <_vfiprintf_r+0x8d2>
 800fe3e:	ad17      	add	r5, sp, #92	; 0x5c
 800fe40:	9b08      	ldr	r3, [sp, #32]
 800fe42:	199b      	adds	r3, r3, r6
 800fe44:	9308      	str	r3, [sp, #32]
 800fe46:	7823      	ldrb	r3, [r4, #0]
 800fe48:	2b00      	cmp	r3, #0
 800fe4a:	d101      	bne.n	800fe50 <_vfiprintf_r+0x130>
 800fe4c:	f000 fbf6 	bl	801063c <_vfiprintf_r+0x91c>
 800fe50:	2200      	movs	r2, #0
 800fe52:	a912      	add	r1, sp, #72	; 0x48
 800fe54:	70ca      	strb	r2, [r1, #3]
 800fe56:	2101      	movs	r1, #1
 800fe58:	1c63      	adds	r3, r4, #1
 800fe5a:	0014      	movs	r4, r2
 800fe5c:	4249      	negs	r1, r1
 800fe5e:	9105      	str	r1, [sp, #20]
 800fe60:	9209      	str	r2, [sp, #36]	; 0x24
 800fe62:	1c5a      	adds	r2, r3, #1
 800fe64:	781b      	ldrb	r3, [r3, #0]
 800fe66:	9207      	str	r2, [sp, #28]
 800fe68:	0018      	movs	r0, r3
 800fe6a:	3820      	subs	r0, #32
 800fe6c:	285a      	cmp	r0, #90	; 0x5a
 800fe6e:	d900      	bls.n	800fe72 <_vfiprintf_r+0x152>
 800fe70:	e362      	b.n	8010538 <_vfiprintf_r+0x818>
 800fe72:	f7f0 f959 	bl	8000128 <__gnu_thumb1_case_uhi>
 800fe76:	0078      	.short	0x0078
 800fe78:	03610361 	.word	0x03610361
 800fe7c:	03610081 	.word	0x03610081
 800fe80:	03610361 	.word	0x03610361
 800fe84:	0361005d 	.word	0x0361005d
 800fe88:	00830361 	.word	0x00830361
 800fe8c:	0361008b 	.word	0x0361008b
 800fe90:	008f0089 	.word	0x008f0089
 800fe94:	00ad0361 	.word	0x00ad0361
 800fe98:	00af00af 	.word	0x00af00af
 800fe9c:	00af00af 	.word	0x00af00af
 800fea0:	00af00af 	.word	0x00af00af
 800fea4:	00af00af 	.word	0x00af00af
 800fea8:	036100af 	.word	0x036100af
 800feac:	03610361 	.word	0x03610361
 800feb0:	03610361 	.word	0x03610361
 800feb4:	03610361 	.word	0x03610361
 800feb8:	03610361 	.word	0x03610361
 800febc:	00e600da 	.word	0x00e600da
 800fec0:	03610361 	.word	0x03610361
 800fec4:	03610361 	.word	0x03610361
 800fec8:	03610361 	.word	0x03610361
 800fecc:	03610361 	.word	0x03610361
 800fed0:	03610361 	.word	0x03610361
 800fed4:	03610143 	.word	0x03610143
 800fed8:	03610361 	.word	0x03610361
 800fedc:	03610182 	.word	0x03610182
 800fee0:	0361027c 	.word	0x0361027c
 800fee4:	02ae0361 	.word	0x02ae0361
 800fee8:	03610361 	.word	0x03610361
 800feec:	03610361 	.word	0x03610361
 800fef0:	03610361 	.word	0x03610361
 800fef4:	03610361 	.word	0x03610361
 800fef8:	03610361 	.word	0x03610361
 800fefc:	00e800da 	.word	0x00e800da
 800ff00:	03610361 	.word	0x03610361
 800ff04:	00c30361 	.word	0x00c30361
 800ff08:	00d600e8 	.word	0x00d600e8
 800ff0c:	00cf0361 	.word	0x00cf0361
 800ff10:	01260361 	.word	0x01260361
 800ff14:	01740145 	.word	0x01740145
 800ff18:	036100d6 	.word	0x036100d6
 800ff1c:	007f0182 	.word	0x007f0182
 800ff20:	0361027e 	.word	0x0361027e
 800ff24:	02cd0361 	.word	0x02cd0361
 800ff28:	007f0361 	.word	0x007f0361
 800ff2c:	3401      	adds	r4, #1
 800ff2e:	e769      	b.n	800fe04 <_vfiprintf_r+0xe4>
 800ff30:	9806      	ldr	r0, [sp, #24]
 800ff32:	f7fe fa47 	bl	800e3c4 <_localeconv_r>
 800ff36:	6843      	ldr	r3, [r0, #4]
 800ff38:	0018      	movs	r0, r3
 800ff3a:	930f      	str	r3, [sp, #60]	; 0x3c
 800ff3c:	f7f0 f8e2 	bl	8000104 <strlen>
 800ff40:	900e      	str	r0, [sp, #56]	; 0x38
 800ff42:	9806      	ldr	r0, [sp, #24]
 800ff44:	f7fe fa3e 	bl	800e3c4 <_localeconv_r>
 800ff48:	6883      	ldr	r3, [r0, #8]
 800ff4a:	930d      	str	r3, [sp, #52]	; 0x34
 800ff4c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ff4e:	2b00      	cmp	r3, #0
 800ff50:	d010      	beq.n	800ff74 <_vfiprintf_r+0x254>
 800ff52:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ff54:	2b00      	cmp	r3, #0
 800ff56:	d00d      	beq.n	800ff74 <_vfiprintf_r+0x254>
 800ff58:	781b      	ldrb	r3, [r3, #0]
 800ff5a:	2b00      	cmp	r3, #0
 800ff5c:	d00a      	beq.n	800ff74 <_vfiprintf_r+0x254>
 800ff5e:	2380      	movs	r3, #128	; 0x80
 800ff60:	00db      	lsls	r3, r3, #3
 800ff62:	431c      	orrs	r4, r3
 800ff64:	e006      	b.n	800ff74 <_vfiprintf_r+0x254>
 800ff66:	ab12      	add	r3, sp, #72	; 0x48
 800ff68:	78da      	ldrb	r2, [r3, #3]
 800ff6a:	3303      	adds	r3, #3
 800ff6c:	2a00      	cmp	r2, #0
 800ff6e:	d101      	bne.n	800ff74 <_vfiprintf_r+0x254>
 800ff70:	3220      	adds	r2, #32
 800ff72:	701a      	strb	r2, [r3, #0]
 800ff74:	9b07      	ldr	r3, [sp, #28]
 800ff76:	e774      	b.n	800fe62 <_vfiprintf_r+0x142>
 800ff78:	2301      	movs	r3, #1
 800ff7a:	e7f2      	b.n	800ff62 <_vfiprintf_r+0x242>
 800ff7c:	cf08      	ldmia	r7!, {r3}
 800ff7e:	9309      	str	r3, [sp, #36]	; 0x24
 800ff80:	2b00      	cmp	r3, #0
 800ff82:	daf7      	bge.n	800ff74 <_vfiprintf_r+0x254>
 800ff84:	425b      	negs	r3, r3
 800ff86:	9309      	str	r3, [sp, #36]	; 0x24
 800ff88:	2304      	movs	r3, #4
 800ff8a:	e7ea      	b.n	800ff62 <_vfiprintf_r+0x242>
 800ff8c:	222b      	movs	r2, #43	; 0x2b
 800ff8e:	ab12      	add	r3, sp, #72	; 0x48
 800ff90:	70da      	strb	r2, [r3, #3]
 800ff92:	e7ef      	b.n	800ff74 <_vfiprintf_r+0x254>
 800ff94:	9b07      	ldr	r3, [sp, #28]
 800ff96:	1c5a      	adds	r2, r3, #1
 800ff98:	781b      	ldrb	r3, [r3, #0]
 800ff9a:	2b2a      	cmp	r3, #42	; 0x2a
 800ff9c:	d00f      	beq.n	800ffbe <_vfiprintf_r+0x29e>
 800ff9e:	2100      	movs	r1, #0
 800ffa0:	9105      	str	r1, [sp, #20]
 800ffa2:	0019      	movs	r1, r3
 800ffa4:	3930      	subs	r1, #48	; 0x30
 800ffa6:	9207      	str	r2, [sp, #28]
 800ffa8:	2909      	cmp	r1, #9
 800ffaa:	d900      	bls.n	800ffae <_vfiprintf_r+0x28e>
 800ffac:	e75c      	b.n	800fe68 <_vfiprintf_r+0x148>
 800ffae:	200a      	movs	r0, #10
 800ffb0:	9b05      	ldr	r3, [sp, #20]
 800ffb2:	4343      	muls	r3, r0
 800ffb4:	185b      	adds	r3, r3, r1
 800ffb6:	9305      	str	r3, [sp, #20]
 800ffb8:	7813      	ldrb	r3, [r2, #0]
 800ffba:	3201      	adds	r2, #1
 800ffbc:	e7f1      	b.n	800ffa2 <_vfiprintf_r+0x282>
 800ffbe:	cf08      	ldmia	r7!, {r3}
 800ffc0:	9305      	str	r3, [sp, #20]
 800ffc2:	2b00      	cmp	r3, #0
 800ffc4:	da02      	bge.n	800ffcc <_vfiprintf_r+0x2ac>
 800ffc6:	2301      	movs	r3, #1
 800ffc8:	425b      	negs	r3, r3
 800ffca:	9305      	str	r3, [sp, #20]
 800ffcc:	9207      	str	r2, [sp, #28]
 800ffce:	e7d1      	b.n	800ff74 <_vfiprintf_r+0x254>
 800ffd0:	2380      	movs	r3, #128	; 0x80
 800ffd2:	e7c6      	b.n	800ff62 <_vfiprintf_r+0x242>
 800ffd4:	2100      	movs	r1, #0
 800ffd6:	9a07      	ldr	r2, [sp, #28]
 800ffd8:	9109      	str	r1, [sp, #36]	; 0x24
 800ffda:	200a      	movs	r0, #10
 800ffdc:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ffde:	3b30      	subs	r3, #48	; 0x30
 800ffe0:	4341      	muls	r1, r0
 800ffe2:	185b      	adds	r3, r3, r1
 800ffe4:	9309      	str	r3, [sp, #36]	; 0x24
 800ffe6:	0013      	movs	r3, r2
 800ffe8:	781b      	ldrb	r3, [r3, #0]
 800ffea:	3201      	adds	r2, #1
 800ffec:	0019      	movs	r1, r3
 800ffee:	3930      	subs	r1, #48	; 0x30
 800fff0:	9207      	str	r2, [sp, #28]
 800fff2:	2909      	cmp	r1, #9
 800fff4:	d9f1      	bls.n	800ffda <_vfiprintf_r+0x2ba>
 800fff6:	e737      	b.n	800fe68 <_vfiprintf_r+0x148>
 800fff8:	ffffdfff 	.word	0xffffdfff
 800fffc:	9b07      	ldr	r3, [sp, #28]
 800fffe:	781b      	ldrb	r3, [r3, #0]
 8010000:	2b68      	cmp	r3, #104	; 0x68
 8010002:	d105      	bne.n	8010010 <_vfiprintf_r+0x2f0>
 8010004:	9b07      	ldr	r3, [sp, #28]
 8010006:	3301      	adds	r3, #1
 8010008:	9307      	str	r3, [sp, #28]
 801000a:	2380      	movs	r3, #128	; 0x80
 801000c:	009b      	lsls	r3, r3, #2
 801000e:	e7a8      	b.n	800ff62 <_vfiprintf_r+0x242>
 8010010:	2340      	movs	r3, #64	; 0x40
 8010012:	e7a6      	b.n	800ff62 <_vfiprintf_r+0x242>
 8010014:	9b07      	ldr	r3, [sp, #28]
 8010016:	781b      	ldrb	r3, [r3, #0]
 8010018:	2b6c      	cmp	r3, #108	; 0x6c
 801001a:	d104      	bne.n	8010026 <_vfiprintf_r+0x306>
 801001c:	9b07      	ldr	r3, [sp, #28]
 801001e:	3301      	adds	r3, #1
 8010020:	9307      	str	r3, [sp, #28]
 8010022:	2320      	movs	r3, #32
 8010024:	e79d      	b.n	800ff62 <_vfiprintf_r+0x242>
 8010026:	2310      	movs	r3, #16
 8010028:	e79b      	b.n	800ff62 <_vfiprintf_r+0x242>
 801002a:	003a      	movs	r2, r7
 801002c:	ca08      	ldmia	r2!, {r3}
 801002e:	ae27      	add	r6, sp, #156	; 0x9c
 8010030:	7033      	strb	r3, [r6, #0]
 8010032:	2300      	movs	r3, #0
 8010034:	9204      	str	r2, [sp, #16]
 8010036:	aa12      	add	r2, sp, #72	; 0x48
 8010038:	70d3      	strb	r3, [r2, #3]
 801003a:	2201      	movs	r2, #1
 801003c:	930b      	str	r3, [sp, #44]	; 0x2c
 801003e:	9205      	str	r2, [sp, #20]
 8010040:	e0b0      	b.n	80101a4 <_vfiprintf_r+0x484>
 8010042:	2310      	movs	r3, #16
 8010044:	431c      	orrs	r4, r3
 8010046:	06a3      	lsls	r3, r4, #26
 8010048:	d52a      	bpl.n	80100a0 <_vfiprintf_r+0x380>
 801004a:	2307      	movs	r3, #7
 801004c:	3707      	adds	r7, #7
 801004e:	439f      	bics	r7, r3
 8010050:	0039      	movs	r1, r7
 8010052:	c90c      	ldmia	r1!, {r2, r3}
 8010054:	9200      	str	r2, [sp, #0]
 8010056:	9301      	str	r3, [sp, #4]
 8010058:	9104      	str	r1, [sp, #16]
 801005a:	9a01      	ldr	r2, [sp, #4]
 801005c:	2301      	movs	r3, #1
 801005e:	2a00      	cmp	r2, #0
 8010060:	da09      	bge.n	8010076 <_vfiprintf_r+0x356>
 8010062:	9e00      	ldr	r6, [sp, #0]
 8010064:	9f01      	ldr	r7, [sp, #4]
 8010066:	2200      	movs	r2, #0
 8010068:	4271      	negs	r1, r6
 801006a:	41ba      	sbcs	r2, r7
 801006c:	9100      	str	r1, [sp, #0]
 801006e:	9201      	str	r2, [sp, #4]
 8010070:	212d      	movs	r1, #45	; 0x2d
 8010072:	aa12      	add	r2, sp, #72	; 0x48
 8010074:	70d1      	strb	r1, [r2, #3]
 8010076:	9901      	ldr	r1, [sp, #4]
 8010078:	9a00      	ldr	r2, [sp, #0]
 801007a:	430a      	orrs	r2, r1
 801007c:	9905      	ldr	r1, [sp, #20]
 801007e:	3101      	adds	r1, #1
 8010080:	d100      	bne.n	8010084 <_vfiprintf_r+0x364>
 8010082:	e2e9      	b.n	8010658 <_vfiprintf_r+0x938>
 8010084:	2180      	movs	r1, #128	; 0x80
 8010086:	0027      	movs	r7, r4
 8010088:	438f      	bics	r7, r1
 801008a:	2a00      	cmp	r2, #0
 801008c:	d000      	beq.n	8010090 <_vfiprintf_r+0x370>
 801008e:	e2e7      	b.n	8010660 <_vfiprintf_r+0x940>
 8010090:	9a05      	ldr	r2, [sp, #20]
 8010092:	2a00      	cmp	r2, #0
 8010094:	d100      	bne.n	8010098 <_vfiprintf_r+0x378>
 8010096:	e243      	b.n	8010520 <_vfiprintf_r+0x800>
 8010098:	2b01      	cmp	r3, #1
 801009a:	d000      	beq.n	801009e <_vfiprintf_r+0x37e>
 801009c:	e2e3      	b.n	8010666 <_vfiprintf_r+0x946>
 801009e:	e1e7      	b.n	8010470 <_vfiprintf_r+0x750>
 80100a0:	003a      	movs	r2, r7
 80100a2:	ca08      	ldmia	r2!, {r3}
 80100a4:	9204      	str	r2, [sp, #16]
 80100a6:	06e2      	lsls	r2, r4, #27
 80100a8:	d503      	bpl.n	80100b2 <_vfiprintf_r+0x392>
 80100aa:	9300      	str	r3, [sp, #0]
 80100ac:	17db      	asrs	r3, r3, #31
 80100ae:	9301      	str	r3, [sp, #4]
 80100b0:	e7d3      	b.n	801005a <_vfiprintf_r+0x33a>
 80100b2:	0662      	lsls	r2, r4, #25
 80100b4:	d501      	bpl.n	80100ba <_vfiprintf_r+0x39a>
 80100b6:	b21b      	sxth	r3, r3
 80100b8:	e7f7      	b.n	80100aa <_vfiprintf_r+0x38a>
 80100ba:	05a2      	lsls	r2, r4, #22
 80100bc:	d5f5      	bpl.n	80100aa <_vfiprintf_r+0x38a>
 80100be:	b25b      	sxtb	r3, r3
 80100c0:	e7f3      	b.n	80100aa <_vfiprintf_r+0x38a>
 80100c2:	1d3b      	adds	r3, r7, #4
 80100c4:	9304      	str	r3, [sp, #16]
 80100c6:	06a3      	lsls	r3, r4, #26
 80100c8:	d506      	bpl.n	80100d8 <_vfiprintf_r+0x3b8>
 80100ca:	683b      	ldr	r3, [r7, #0]
 80100cc:	9a08      	ldr	r2, [sp, #32]
 80100ce:	601a      	str	r2, [r3, #0]
 80100d0:	17d2      	asrs	r2, r2, #31
 80100d2:	605a      	str	r2, [r3, #4]
 80100d4:	9f04      	ldr	r7, [sp, #16]
 80100d6:	e694      	b.n	800fe02 <_vfiprintf_r+0xe2>
 80100d8:	06e3      	lsls	r3, r4, #27
 80100da:	d503      	bpl.n	80100e4 <_vfiprintf_r+0x3c4>
 80100dc:	683b      	ldr	r3, [r7, #0]
 80100de:	9a08      	ldr	r2, [sp, #32]
 80100e0:	601a      	str	r2, [r3, #0]
 80100e2:	e7f7      	b.n	80100d4 <_vfiprintf_r+0x3b4>
 80100e4:	0663      	lsls	r3, r4, #25
 80100e6:	d503      	bpl.n	80100f0 <_vfiprintf_r+0x3d0>
 80100e8:	683b      	ldr	r3, [r7, #0]
 80100ea:	9a08      	ldr	r2, [sp, #32]
 80100ec:	801a      	strh	r2, [r3, #0]
 80100ee:	e7f1      	b.n	80100d4 <_vfiprintf_r+0x3b4>
 80100f0:	05a4      	lsls	r4, r4, #22
 80100f2:	d5f3      	bpl.n	80100dc <_vfiprintf_r+0x3bc>
 80100f4:	683b      	ldr	r3, [r7, #0]
 80100f6:	9a08      	ldr	r2, [sp, #32]
 80100f8:	701a      	strb	r2, [r3, #0]
 80100fa:	e7eb      	b.n	80100d4 <_vfiprintf_r+0x3b4>
 80100fc:	2310      	movs	r3, #16
 80100fe:	431c      	orrs	r4, r3
 8010100:	2320      	movs	r3, #32
 8010102:	0020      	movs	r0, r4
 8010104:	4018      	ands	r0, r3
 8010106:	421c      	tst	r4, r3
 8010108:	d00d      	beq.n	8010126 <_vfiprintf_r+0x406>
 801010a:	3b19      	subs	r3, #25
 801010c:	3707      	adds	r7, #7
 801010e:	439f      	bics	r7, r3
 8010110:	0039      	movs	r1, r7
 8010112:	c90c      	ldmia	r1!, {r2, r3}
 8010114:	9200      	str	r2, [sp, #0]
 8010116:	9301      	str	r3, [sp, #4]
 8010118:	9104      	str	r1, [sp, #16]
 801011a:	4bcc      	ldr	r3, [pc, #816]	; (801044c <_vfiprintf_r+0x72c>)
 801011c:	401c      	ands	r4, r3
 801011e:	2300      	movs	r3, #0
 8010120:	2100      	movs	r1, #0
 8010122:	aa12      	add	r2, sp, #72	; 0x48
 8010124:	e7a6      	b.n	8010074 <_vfiprintf_r+0x354>
 8010126:	003a      	movs	r2, r7
 8010128:	ca08      	ldmia	r2!, {r3}
 801012a:	0021      	movs	r1, r4
 801012c:	9204      	str	r2, [sp, #16]
 801012e:	2210      	movs	r2, #16
 8010130:	4011      	ands	r1, r2
 8010132:	4214      	tst	r4, r2
 8010134:	d002      	beq.n	801013c <_vfiprintf_r+0x41c>
 8010136:	9300      	str	r3, [sp, #0]
 8010138:	9001      	str	r0, [sp, #4]
 801013a:	e7ee      	b.n	801011a <_vfiprintf_r+0x3fa>
 801013c:	2240      	movs	r2, #64	; 0x40
 801013e:	0020      	movs	r0, r4
 8010140:	4010      	ands	r0, r2
 8010142:	4214      	tst	r4, r2
 8010144:	d003      	beq.n	801014e <_vfiprintf_r+0x42e>
 8010146:	b29b      	uxth	r3, r3
 8010148:	9300      	str	r3, [sp, #0]
 801014a:	9101      	str	r1, [sp, #4]
 801014c:	e7e5      	b.n	801011a <_vfiprintf_r+0x3fa>
 801014e:	2280      	movs	r2, #128	; 0x80
 8010150:	0021      	movs	r1, r4
 8010152:	0092      	lsls	r2, r2, #2
 8010154:	4011      	ands	r1, r2
 8010156:	4214      	tst	r4, r2
 8010158:	d0f6      	beq.n	8010148 <_vfiprintf_r+0x428>
 801015a:	b2db      	uxtb	r3, r3
 801015c:	e7eb      	b.n	8010136 <_vfiprintf_r+0x416>
 801015e:	003b      	movs	r3, r7
 8010160:	cb04      	ldmia	r3!, {r2}
 8010162:	49bb      	ldr	r1, [pc, #748]	; (8010450 <_vfiprintf_r+0x730>)
 8010164:	9304      	str	r3, [sp, #16]
 8010166:	2300      	movs	r3, #0
 8010168:	9200      	str	r2, [sp, #0]
 801016a:	aa13      	add	r2, sp, #76	; 0x4c
 801016c:	8011      	strh	r1, [r2, #0]
 801016e:	4ab9      	ldr	r2, [pc, #740]	; (8010454 <_vfiprintf_r+0x734>)
 8010170:	9301      	str	r3, [sp, #4]
 8010172:	3302      	adds	r3, #2
 8010174:	431c      	orrs	r4, r3
 8010176:	920c      	str	r2, [sp, #48]	; 0x30
 8010178:	e7d2      	b.n	8010120 <_vfiprintf_r+0x400>
 801017a:	003b      	movs	r3, r7
 801017c:	2700      	movs	r7, #0
 801017e:	cb40      	ldmia	r3!, {r6}
 8010180:	9304      	str	r3, [sp, #16]
 8010182:	ab12      	add	r3, sp, #72	; 0x48
 8010184:	70df      	strb	r7, [r3, #3]
 8010186:	9b05      	ldr	r3, [sp, #20]
 8010188:	3301      	adds	r3, #1
 801018a:	d100      	bne.n	801018e <_vfiprintf_r+0x46e>
 801018c:	e0ea      	b.n	8010364 <_vfiprintf_r+0x644>
 801018e:	0039      	movs	r1, r7
 8010190:	0030      	movs	r0, r6
 8010192:	9a05      	ldr	r2, [sp, #20]
 8010194:	f7fe f92e 	bl	800e3f4 <memchr>
 8010198:	900b      	str	r0, [sp, #44]	; 0x2c
 801019a:	42b8      	cmp	r0, r7
 801019c:	d002      	beq.n	80101a4 <_vfiprintf_r+0x484>
 801019e:	1b83      	subs	r3, r0, r6
 80101a0:	9305      	str	r3, [sp, #20]
 80101a2:	970b      	str	r7, [sp, #44]	; 0x2c
 80101a4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80101a6:	9a05      	ldr	r2, [sp, #20]
 80101a8:	930a      	str	r3, [sp, #40]	; 0x28
 80101aa:	4293      	cmp	r3, r2
 80101ac:	da00      	bge.n	80101b0 <_vfiprintf_r+0x490>
 80101ae:	920a      	str	r2, [sp, #40]	; 0x28
 80101b0:	ab12      	add	r3, sp, #72	; 0x48
 80101b2:	3303      	adds	r3, #3
 80101b4:	781b      	ldrb	r3, [r3, #0]
 80101b6:	1e5a      	subs	r2, r3, #1
 80101b8:	4193      	sbcs	r3, r2
 80101ba:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80101bc:	18d3      	adds	r3, r2, r3
 80101be:	930a      	str	r3, [sp, #40]	; 0x28
 80101c0:	0022      	movs	r2, r4
 80101c2:	2302      	movs	r3, #2
 80101c4:	401a      	ands	r2, r3
 80101c6:	9210      	str	r2, [sp, #64]	; 0x40
 80101c8:	421c      	tst	r4, r3
 80101ca:	d002      	beq.n	80101d2 <_vfiprintf_r+0x4b2>
 80101cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80101ce:	3302      	adds	r3, #2
 80101d0:	930a      	str	r3, [sp, #40]	; 0x28
 80101d2:	2384      	movs	r3, #132	; 0x84
 80101d4:	0022      	movs	r2, r4
 80101d6:	401a      	ands	r2, r3
 80101d8:	9211      	str	r2, [sp, #68]	; 0x44
 80101da:	421c      	tst	r4, r3
 80101dc:	d11e      	bne.n	801021c <_vfiprintf_r+0x4fc>
 80101de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80101e0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80101e2:	1a9f      	subs	r7, r3, r2
 80101e4:	2f00      	cmp	r7, #0
 80101e6:	dd19      	ble.n	801021c <_vfiprintf_r+0x4fc>
 80101e8:	0029      	movs	r1, r5
 80101ea:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80101ec:	489a      	ldr	r0, [pc, #616]	; (8010458 <_vfiprintf_r+0x738>)
 80101ee:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80101f0:	3301      	adds	r3, #1
 80101f2:	3108      	adds	r1, #8
 80101f4:	6028      	str	r0, [r5, #0]
 80101f6:	2f10      	cmp	r7, #16
 80101f8:	dd00      	ble.n	80101fc <_vfiprintf_r+0x4dc>
 80101fa:	e1a7      	b.n	801054c <_vfiprintf_r+0x82c>
 80101fc:	606f      	str	r7, [r5, #4]
 80101fe:	18bf      	adds	r7, r7, r2
 8010200:	000d      	movs	r5, r1
 8010202:	9716      	str	r7, [sp, #88]	; 0x58
 8010204:	9315      	str	r3, [sp, #84]	; 0x54
 8010206:	2b07      	cmp	r3, #7
 8010208:	dd08      	ble.n	801021c <_vfiprintf_r+0x4fc>
 801020a:	9903      	ldr	r1, [sp, #12]
 801020c:	9806      	ldr	r0, [sp, #24]
 801020e:	aa14      	add	r2, sp, #80	; 0x50
 8010210:	f7ff fd51 	bl	800fcb6 <__sprint_r>
 8010214:	2800      	cmp	r0, #0
 8010216:	d000      	beq.n	801021a <_vfiprintf_r+0x4fa>
 8010218:	e1eb      	b.n	80105f2 <_vfiprintf_r+0x8d2>
 801021a:	ad17      	add	r5, sp, #92	; 0x5c
 801021c:	a912      	add	r1, sp, #72	; 0x48
 801021e:	78c8      	ldrb	r0, [r1, #3]
 8010220:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8010222:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010224:	3103      	adds	r1, #3
 8010226:	2800      	cmp	r0, #0
 8010228:	d012      	beq.n	8010250 <_vfiprintf_r+0x530>
 801022a:	6029      	str	r1, [r5, #0]
 801022c:	2101      	movs	r1, #1
 801022e:	3301      	adds	r3, #1
 8010230:	1852      	adds	r2, r2, r1
 8010232:	6069      	str	r1, [r5, #4]
 8010234:	9216      	str	r2, [sp, #88]	; 0x58
 8010236:	9315      	str	r3, [sp, #84]	; 0x54
 8010238:	3508      	adds	r5, #8
 801023a:	2b07      	cmp	r3, #7
 801023c:	dd08      	ble.n	8010250 <_vfiprintf_r+0x530>
 801023e:	9903      	ldr	r1, [sp, #12]
 8010240:	9806      	ldr	r0, [sp, #24]
 8010242:	aa14      	add	r2, sp, #80	; 0x50
 8010244:	f7ff fd37 	bl	800fcb6 <__sprint_r>
 8010248:	2800      	cmp	r0, #0
 801024a:	d000      	beq.n	801024e <_vfiprintf_r+0x52e>
 801024c:	e1d1      	b.n	80105f2 <_vfiprintf_r+0x8d2>
 801024e:	ad17      	add	r5, sp, #92	; 0x5c
 8010250:	9910      	ldr	r1, [sp, #64]	; 0x40
 8010252:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8010254:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010256:	2900      	cmp	r1, #0
 8010258:	d013      	beq.n	8010282 <_vfiprintf_r+0x562>
 801025a:	a913      	add	r1, sp, #76	; 0x4c
 801025c:	6029      	str	r1, [r5, #0]
 801025e:	2102      	movs	r1, #2
 8010260:	3301      	adds	r3, #1
 8010262:	1852      	adds	r2, r2, r1
 8010264:	6069      	str	r1, [r5, #4]
 8010266:	9216      	str	r2, [sp, #88]	; 0x58
 8010268:	9315      	str	r3, [sp, #84]	; 0x54
 801026a:	3508      	adds	r5, #8
 801026c:	2b07      	cmp	r3, #7
 801026e:	dd08      	ble.n	8010282 <_vfiprintf_r+0x562>
 8010270:	9903      	ldr	r1, [sp, #12]
 8010272:	9806      	ldr	r0, [sp, #24]
 8010274:	aa14      	add	r2, sp, #80	; 0x50
 8010276:	f7ff fd1e 	bl	800fcb6 <__sprint_r>
 801027a:	2800      	cmp	r0, #0
 801027c:	d000      	beq.n	8010280 <_vfiprintf_r+0x560>
 801027e:	e1b8      	b.n	80105f2 <_vfiprintf_r+0x8d2>
 8010280:	ad17      	add	r5, sp, #92	; 0x5c
 8010282:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8010284:	2b80      	cmp	r3, #128	; 0x80
 8010286:	d11e      	bne.n	80102c6 <_vfiprintf_r+0x5a6>
 8010288:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801028a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801028c:	1a9f      	subs	r7, r3, r2
 801028e:	2f00      	cmp	r7, #0
 8010290:	dd19      	ble.n	80102c6 <_vfiprintf_r+0x5a6>
 8010292:	0029      	movs	r1, r5
 8010294:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010296:	4871      	ldr	r0, [pc, #452]	; (801045c <_vfiprintf_r+0x73c>)
 8010298:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801029a:	3301      	adds	r3, #1
 801029c:	3108      	adds	r1, #8
 801029e:	6028      	str	r0, [r5, #0]
 80102a0:	2f10      	cmp	r7, #16
 80102a2:	dd00      	ble.n	80102a6 <_vfiprintf_r+0x586>
 80102a4:	e164      	b.n	8010570 <_vfiprintf_r+0x850>
 80102a6:	606f      	str	r7, [r5, #4]
 80102a8:	18bf      	adds	r7, r7, r2
 80102aa:	000d      	movs	r5, r1
 80102ac:	9716      	str	r7, [sp, #88]	; 0x58
 80102ae:	9315      	str	r3, [sp, #84]	; 0x54
 80102b0:	2b07      	cmp	r3, #7
 80102b2:	dd08      	ble.n	80102c6 <_vfiprintf_r+0x5a6>
 80102b4:	9903      	ldr	r1, [sp, #12]
 80102b6:	9806      	ldr	r0, [sp, #24]
 80102b8:	aa14      	add	r2, sp, #80	; 0x50
 80102ba:	f7ff fcfc 	bl	800fcb6 <__sprint_r>
 80102be:	2800      	cmp	r0, #0
 80102c0:	d000      	beq.n	80102c4 <_vfiprintf_r+0x5a4>
 80102c2:	e196      	b.n	80105f2 <_vfiprintf_r+0x8d2>
 80102c4:	ad17      	add	r5, sp, #92	; 0x5c
 80102c6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80102c8:	9a05      	ldr	r2, [sp, #20]
 80102ca:	1a9f      	subs	r7, r3, r2
 80102cc:	2f00      	cmp	r7, #0
 80102ce:	dd19      	ble.n	8010304 <_vfiprintf_r+0x5e4>
 80102d0:	0029      	movs	r1, r5
 80102d2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80102d4:	4861      	ldr	r0, [pc, #388]	; (801045c <_vfiprintf_r+0x73c>)
 80102d6:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80102d8:	3301      	adds	r3, #1
 80102da:	3108      	adds	r1, #8
 80102dc:	6028      	str	r0, [r5, #0]
 80102de:	2f10      	cmp	r7, #16
 80102e0:	dd00      	ble.n	80102e4 <_vfiprintf_r+0x5c4>
 80102e2:	e157      	b.n	8010594 <_vfiprintf_r+0x874>
 80102e4:	606f      	str	r7, [r5, #4]
 80102e6:	18bf      	adds	r7, r7, r2
 80102e8:	000d      	movs	r5, r1
 80102ea:	9716      	str	r7, [sp, #88]	; 0x58
 80102ec:	9315      	str	r3, [sp, #84]	; 0x54
 80102ee:	2b07      	cmp	r3, #7
 80102f0:	dd08      	ble.n	8010304 <_vfiprintf_r+0x5e4>
 80102f2:	9903      	ldr	r1, [sp, #12]
 80102f4:	9806      	ldr	r0, [sp, #24]
 80102f6:	aa14      	add	r2, sp, #80	; 0x50
 80102f8:	f7ff fcdd 	bl	800fcb6 <__sprint_r>
 80102fc:	2800      	cmp	r0, #0
 80102fe:	d000      	beq.n	8010302 <_vfiprintf_r+0x5e2>
 8010300:	e177      	b.n	80105f2 <_vfiprintf_r+0x8d2>
 8010302:	ad17      	add	r5, sp, #92	; 0x5c
 8010304:	9b05      	ldr	r3, [sp, #20]
 8010306:	9a05      	ldr	r2, [sp, #20]
 8010308:	606b      	str	r3, [r5, #4]
 801030a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801030c:	602e      	str	r6, [r5, #0]
 801030e:	189b      	adds	r3, r3, r2
 8010310:	9316      	str	r3, [sp, #88]	; 0x58
 8010312:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010314:	3508      	adds	r5, #8
 8010316:	3301      	adds	r3, #1
 8010318:	9315      	str	r3, [sp, #84]	; 0x54
 801031a:	2b07      	cmp	r3, #7
 801031c:	dd08      	ble.n	8010330 <_vfiprintf_r+0x610>
 801031e:	9903      	ldr	r1, [sp, #12]
 8010320:	9806      	ldr	r0, [sp, #24]
 8010322:	aa14      	add	r2, sp, #80	; 0x50
 8010324:	f7ff fcc7 	bl	800fcb6 <__sprint_r>
 8010328:	2800      	cmp	r0, #0
 801032a:	d000      	beq.n	801032e <_vfiprintf_r+0x60e>
 801032c:	e161      	b.n	80105f2 <_vfiprintf_r+0x8d2>
 801032e:	ad17      	add	r5, sp, #92	; 0x5c
 8010330:	0764      	lsls	r4, r4, #29
 8010332:	d500      	bpl.n	8010336 <_vfiprintf_r+0x616>
 8010334:	e140      	b.n	80105b8 <_vfiprintf_r+0x898>
 8010336:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010338:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801033a:	4293      	cmp	r3, r2
 801033c:	da00      	bge.n	8010340 <_vfiprintf_r+0x620>
 801033e:	0013      	movs	r3, r2
 8010340:	9a08      	ldr	r2, [sp, #32]
 8010342:	18d3      	adds	r3, r2, r3
 8010344:	9308      	str	r3, [sp, #32]
 8010346:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8010348:	2b00      	cmp	r3, #0
 801034a:	d007      	beq.n	801035c <_vfiprintf_r+0x63c>
 801034c:	9903      	ldr	r1, [sp, #12]
 801034e:	9806      	ldr	r0, [sp, #24]
 8010350:	aa14      	add	r2, sp, #80	; 0x50
 8010352:	f7ff fcb0 	bl	800fcb6 <__sprint_r>
 8010356:	2800      	cmp	r0, #0
 8010358:	d000      	beq.n	801035c <_vfiprintf_r+0x63c>
 801035a:	e14a      	b.n	80105f2 <_vfiprintf_r+0x8d2>
 801035c:	2300      	movs	r3, #0
 801035e:	ad17      	add	r5, sp, #92	; 0x5c
 8010360:	9315      	str	r3, [sp, #84]	; 0x54
 8010362:	e6b7      	b.n	80100d4 <_vfiprintf_r+0x3b4>
 8010364:	0030      	movs	r0, r6
 8010366:	f7ef fecd 	bl	8000104 <strlen>
 801036a:	9005      	str	r0, [sp, #20]
 801036c:	e719      	b.n	80101a2 <_vfiprintf_r+0x482>
 801036e:	2310      	movs	r3, #16
 8010370:	431c      	orrs	r4, r3
 8010372:	2320      	movs	r3, #32
 8010374:	0020      	movs	r0, r4
 8010376:	4018      	ands	r0, r3
 8010378:	421c      	tst	r4, r3
 801037a:	d009      	beq.n	8010390 <_vfiprintf_r+0x670>
 801037c:	3b19      	subs	r3, #25
 801037e:	3707      	adds	r7, #7
 8010380:	439f      	bics	r7, r3
 8010382:	0039      	movs	r1, r7
 8010384:	c90c      	ldmia	r1!, {r2, r3}
 8010386:	9200      	str	r2, [sp, #0]
 8010388:	9301      	str	r3, [sp, #4]
 801038a:	9104      	str	r1, [sp, #16]
 801038c:	2301      	movs	r3, #1
 801038e:	e6c7      	b.n	8010120 <_vfiprintf_r+0x400>
 8010390:	003b      	movs	r3, r7
 8010392:	cb04      	ldmia	r3!, {r2}
 8010394:	0021      	movs	r1, r4
 8010396:	9304      	str	r3, [sp, #16]
 8010398:	2310      	movs	r3, #16
 801039a:	4019      	ands	r1, r3
 801039c:	421c      	tst	r4, r3
 801039e:	d003      	beq.n	80103a8 <_vfiprintf_r+0x688>
 80103a0:	9200      	str	r2, [sp, #0]
 80103a2:	9001      	str	r0, [sp, #4]
 80103a4:	3b0f      	subs	r3, #15
 80103a6:	e6bb      	b.n	8010120 <_vfiprintf_r+0x400>
 80103a8:	2340      	movs	r3, #64	; 0x40
 80103aa:	0020      	movs	r0, r4
 80103ac:	4018      	ands	r0, r3
 80103ae:	421c      	tst	r4, r3
 80103b0:	d003      	beq.n	80103ba <_vfiprintf_r+0x69a>
 80103b2:	b293      	uxth	r3, r2
 80103b4:	9300      	str	r3, [sp, #0]
 80103b6:	9101      	str	r1, [sp, #4]
 80103b8:	e7e8      	b.n	801038c <_vfiprintf_r+0x66c>
 80103ba:	2380      	movs	r3, #128	; 0x80
 80103bc:	0021      	movs	r1, r4
 80103be:	009b      	lsls	r3, r3, #2
 80103c0:	4019      	ands	r1, r3
 80103c2:	421c      	tst	r4, r3
 80103c4:	d003      	beq.n	80103ce <_vfiprintf_r+0x6ae>
 80103c6:	b2d3      	uxtb	r3, r2
 80103c8:	9300      	str	r3, [sp, #0]
 80103ca:	9001      	str	r0, [sp, #4]
 80103cc:	e7de      	b.n	801038c <_vfiprintf_r+0x66c>
 80103ce:	9200      	str	r2, [sp, #0]
 80103d0:	e7f1      	b.n	80103b6 <_vfiprintf_r+0x696>
 80103d2:	4a23      	ldr	r2, [pc, #140]	; (8010460 <_vfiprintf_r+0x740>)
 80103d4:	0020      	movs	r0, r4
 80103d6:	920c      	str	r2, [sp, #48]	; 0x30
 80103d8:	2220      	movs	r2, #32
 80103da:	4010      	ands	r0, r2
 80103dc:	4214      	tst	r4, r2
 80103de:	d019      	beq.n	8010414 <_vfiprintf_r+0x6f4>
 80103e0:	3a19      	subs	r2, #25
 80103e2:	3707      	adds	r7, #7
 80103e4:	4397      	bics	r7, r2
 80103e6:	0038      	movs	r0, r7
 80103e8:	c806      	ldmia	r0!, {r1, r2}
 80103ea:	9100      	str	r1, [sp, #0]
 80103ec:	9201      	str	r2, [sp, #4]
 80103ee:	9004      	str	r0, [sp, #16]
 80103f0:	07e2      	lsls	r2, r4, #31
 80103f2:	d509      	bpl.n	8010408 <_vfiprintf_r+0x6e8>
 80103f4:	9a00      	ldr	r2, [sp, #0]
 80103f6:	9901      	ldr	r1, [sp, #4]
 80103f8:	430a      	orrs	r2, r1
 80103fa:	d005      	beq.n	8010408 <_vfiprintf_r+0x6e8>
 80103fc:	aa13      	add	r2, sp, #76	; 0x4c
 80103fe:	2130      	movs	r1, #48	; 0x30
 8010400:	7053      	strb	r3, [r2, #1]
 8010402:	2302      	movs	r3, #2
 8010404:	7011      	strb	r1, [r2, #0]
 8010406:	431c      	orrs	r4, r3
 8010408:	4b10      	ldr	r3, [pc, #64]	; (801044c <_vfiprintf_r+0x72c>)
 801040a:	401c      	ands	r4, r3
 801040c:	2302      	movs	r3, #2
 801040e:	e687      	b.n	8010120 <_vfiprintf_r+0x400>
 8010410:	4a10      	ldr	r2, [pc, #64]	; (8010454 <_vfiprintf_r+0x734>)
 8010412:	e7df      	b.n	80103d4 <_vfiprintf_r+0x6b4>
 8010414:	0039      	movs	r1, r7
 8010416:	c904      	ldmia	r1!, {r2}
 8010418:	0026      	movs	r6, r4
 801041a:	9104      	str	r1, [sp, #16]
 801041c:	2110      	movs	r1, #16
 801041e:	400e      	ands	r6, r1
 8010420:	420c      	tst	r4, r1
 8010422:	d002      	beq.n	801042a <_vfiprintf_r+0x70a>
 8010424:	9200      	str	r2, [sp, #0]
 8010426:	9001      	str	r0, [sp, #4]
 8010428:	e7e2      	b.n	80103f0 <_vfiprintf_r+0x6d0>
 801042a:	2140      	movs	r1, #64	; 0x40
 801042c:	0020      	movs	r0, r4
 801042e:	4008      	ands	r0, r1
 8010430:	420c      	tst	r4, r1
 8010432:	d003      	beq.n	801043c <_vfiprintf_r+0x71c>
 8010434:	b292      	uxth	r2, r2
 8010436:	9200      	str	r2, [sp, #0]
 8010438:	9601      	str	r6, [sp, #4]
 801043a:	e7d9      	b.n	80103f0 <_vfiprintf_r+0x6d0>
 801043c:	2180      	movs	r1, #128	; 0x80
 801043e:	0026      	movs	r6, r4
 8010440:	0089      	lsls	r1, r1, #2
 8010442:	400e      	ands	r6, r1
 8010444:	420c      	tst	r4, r1
 8010446:	d0f6      	beq.n	8010436 <_vfiprintf_r+0x716>
 8010448:	b2d2      	uxtb	r2, r2
 801044a:	e7eb      	b.n	8010424 <_vfiprintf_r+0x704>
 801044c:	fffffbff 	.word	0xfffffbff
 8010450:	00007830 	.word	0x00007830
 8010454:	08012d34 	.word	0x08012d34
 8010458:	08012e41 	.word	0x08012e41
 801045c:	08012e51 	.word	0x08012e51
 8010460:	08012d45 	.word	0x08012d45
 8010464:	9b01      	ldr	r3, [sp, #4]
 8010466:	2b00      	cmp	r3, #0
 8010468:	d109      	bne.n	801047e <_vfiprintf_r+0x75e>
 801046a:	9b00      	ldr	r3, [sp, #0]
 801046c:	2b09      	cmp	r3, #9
 801046e:	d806      	bhi.n	801047e <_vfiprintf_r+0x75e>
 8010470:	26b7      	movs	r6, #183	; 0xb7
 8010472:	ab12      	add	r3, sp, #72	; 0x48
 8010474:	18f6      	adds	r6, r6, r3
 8010476:	9b00      	ldr	r3, [sp, #0]
 8010478:	3330      	adds	r3, #48	; 0x30
 801047a:	7033      	strb	r3, [r6, #0]
 801047c:	e115      	b.n	80106aa <_vfiprintf_r+0x98a>
 801047e:	2380      	movs	r3, #128	; 0x80
 8010480:	2400      	movs	r4, #0
 8010482:	00db      	lsls	r3, r3, #3
 8010484:	403b      	ands	r3, r7
 8010486:	ae40      	add	r6, sp, #256	; 0x100
 8010488:	930a      	str	r3, [sp, #40]	; 0x28
 801048a:	220a      	movs	r2, #10
 801048c:	9800      	ldr	r0, [sp, #0]
 801048e:	9901      	ldr	r1, [sp, #4]
 8010490:	2300      	movs	r3, #0
 8010492:	f7f0 f807 	bl	80004a4 <__aeabi_uldivmod>
 8010496:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010498:	3e01      	subs	r6, #1
 801049a:	3230      	adds	r2, #48	; 0x30
 801049c:	900b      	str	r0, [sp, #44]	; 0x2c
 801049e:	9110      	str	r1, [sp, #64]	; 0x40
 80104a0:	7032      	strb	r2, [r6, #0]
 80104a2:	3401      	adds	r4, #1
 80104a4:	2b00      	cmp	r3, #0
 80104a6:	d01a      	beq.n	80104de <_vfiprintf_r+0x7be>
 80104a8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80104aa:	781b      	ldrb	r3, [r3, #0]
 80104ac:	42a3      	cmp	r3, r4
 80104ae:	d116      	bne.n	80104de <_vfiprintf_r+0x7be>
 80104b0:	2cff      	cmp	r4, #255	; 0xff
 80104b2:	d014      	beq.n	80104de <_vfiprintf_r+0x7be>
 80104b4:	9b01      	ldr	r3, [sp, #4]
 80104b6:	2b00      	cmp	r3, #0
 80104b8:	d102      	bne.n	80104c0 <_vfiprintf_r+0x7a0>
 80104ba:	9b00      	ldr	r3, [sp, #0]
 80104bc:	2b09      	cmp	r3, #9
 80104be:	d90e      	bls.n	80104de <_vfiprintf_r+0x7be>
 80104c0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80104c2:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80104c4:	1af6      	subs	r6, r6, r3
 80104c6:	001a      	movs	r2, r3
 80104c8:	0030      	movs	r0, r6
 80104ca:	f7f9 ffe6 	bl	800a49a <strncpy>
 80104ce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80104d0:	2400      	movs	r4, #0
 80104d2:	785b      	ldrb	r3, [r3, #1]
 80104d4:	1e5a      	subs	r2, r3, #1
 80104d6:	4193      	sbcs	r3, r2
 80104d8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80104da:	18d3      	adds	r3, r2, r3
 80104dc:	930d      	str	r3, [sp, #52]	; 0x34
 80104de:	9b01      	ldr	r3, [sp, #4]
 80104e0:	2b00      	cmp	r3, #0
 80104e2:	d103      	bne.n	80104ec <_vfiprintf_r+0x7cc>
 80104e4:	9b00      	ldr	r3, [sp, #0]
 80104e6:	2b09      	cmp	r3, #9
 80104e8:	d800      	bhi.n	80104ec <_vfiprintf_r+0x7cc>
 80104ea:	e0de      	b.n	80106aa <_vfiprintf_r+0x98a>
 80104ec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80104ee:	9300      	str	r3, [sp, #0]
 80104f0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80104f2:	9301      	str	r3, [sp, #4]
 80104f4:	e7c9      	b.n	801048a <_vfiprintf_r+0x76a>
 80104f6:	200f      	movs	r0, #15
 80104f8:	9b00      	ldr	r3, [sp, #0]
 80104fa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80104fc:	4003      	ands	r3, r0
 80104fe:	5cd3      	ldrb	r3, [r2, r3]
 8010500:	3e01      	subs	r6, #1
 8010502:	7033      	strb	r3, [r6, #0]
 8010504:	9b01      	ldr	r3, [sp, #4]
 8010506:	0719      	lsls	r1, r3, #28
 8010508:	9b00      	ldr	r3, [sp, #0]
 801050a:	091a      	lsrs	r2, r3, #4
 801050c:	9b01      	ldr	r3, [sp, #4]
 801050e:	4311      	orrs	r1, r2
 8010510:	091b      	lsrs	r3, r3, #4
 8010512:	9301      	str	r3, [sp, #4]
 8010514:	000b      	movs	r3, r1
 8010516:	9a01      	ldr	r2, [sp, #4]
 8010518:	9100      	str	r1, [sp, #0]
 801051a:	4313      	orrs	r3, r2
 801051c:	d1ec      	bne.n	80104f8 <_vfiprintf_r+0x7d8>
 801051e:	e0c4      	b.n	80106aa <_vfiprintf_r+0x98a>
 8010520:	ae40      	add	r6, sp, #256	; 0x100
 8010522:	2b00      	cmp	r3, #0
 8010524:	d000      	beq.n	8010528 <_vfiprintf_r+0x808>
 8010526:	e0c0      	b.n	80106aa <_vfiprintf_r+0x98a>
 8010528:	07e4      	lsls	r4, r4, #31
 801052a:	d400      	bmi.n	801052e <_vfiprintf_r+0x80e>
 801052c:	e0bd      	b.n	80106aa <_vfiprintf_r+0x98a>
 801052e:	26b7      	movs	r6, #183	; 0xb7
 8010530:	ab12      	add	r3, sp, #72	; 0x48
 8010532:	18f6      	adds	r6, r6, r3
 8010534:	2330      	movs	r3, #48	; 0x30
 8010536:	e7a0      	b.n	801047a <_vfiprintf_r+0x75a>
 8010538:	2b00      	cmp	r3, #0
 801053a:	d100      	bne.n	801053e <_vfiprintf_r+0x81e>
 801053c:	e07e      	b.n	801063c <_vfiprintf_r+0x91c>
 801053e:	ae27      	add	r6, sp, #156	; 0x9c
 8010540:	7033      	strb	r3, [r6, #0]
 8010542:	2300      	movs	r3, #0
 8010544:	aa12      	add	r2, sp, #72	; 0x48
 8010546:	70d3      	strb	r3, [r2, #3]
 8010548:	9704      	str	r7, [sp, #16]
 801054a:	e576      	b.n	801003a <_vfiprintf_r+0x31a>
 801054c:	2010      	movs	r0, #16
 801054e:	1812      	adds	r2, r2, r0
 8010550:	6068      	str	r0, [r5, #4]
 8010552:	9216      	str	r2, [sp, #88]	; 0x58
 8010554:	9315      	str	r3, [sp, #84]	; 0x54
 8010556:	2b07      	cmp	r3, #7
 8010558:	dd07      	ble.n	801056a <_vfiprintf_r+0x84a>
 801055a:	9903      	ldr	r1, [sp, #12]
 801055c:	9806      	ldr	r0, [sp, #24]
 801055e:	aa14      	add	r2, sp, #80	; 0x50
 8010560:	f7ff fba9 	bl	800fcb6 <__sprint_r>
 8010564:	2800      	cmp	r0, #0
 8010566:	d144      	bne.n	80105f2 <_vfiprintf_r+0x8d2>
 8010568:	a917      	add	r1, sp, #92	; 0x5c
 801056a:	000d      	movs	r5, r1
 801056c:	3f10      	subs	r7, #16
 801056e:	e63b      	b.n	80101e8 <_vfiprintf_r+0x4c8>
 8010570:	2010      	movs	r0, #16
 8010572:	1812      	adds	r2, r2, r0
 8010574:	6068      	str	r0, [r5, #4]
 8010576:	9216      	str	r2, [sp, #88]	; 0x58
 8010578:	9315      	str	r3, [sp, #84]	; 0x54
 801057a:	2b07      	cmp	r3, #7
 801057c:	dd07      	ble.n	801058e <_vfiprintf_r+0x86e>
 801057e:	9903      	ldr	r1, [sp, #12]
 8010580:	9806      	ldr	r0, [sp, #24]
 8010582:	aa14      	add	r2, sp, #80	; 0x50
 8010584:	f7ff fb97 	bl	800fcb6 <__sprint_r>
 8010588:	2800      	cmp	r0, #0
 801058a:	d132      	bne.n	80105f2 <_vfiprintf_r+0x8d2>
 801058c:	a917      	add	r1, sp, #92	; 0x5c
 801058e:	000d      	movs	r5, r1
 8010590:	3f10      	subs	r7, #16
 8010592:	e67e      	b.n	8010292 <_vfiprintf_r+0x572>
 8010594:	2010      	movs	r0, #16
 8010596:	1812      	adds	r2, r2, r0
 8010598:	6068      	str	r0, [r5, #4]
 801059a:	9216      	str	r2, [sp, #88]	; 0x58
 801059c:	9315      	str	r3, [sp, #84]	; 0x54
 801059e:	2b07      	cmp	r3, #7
 80105a0:	dd07      	ble.n	80105b2 <_vfiprintf_r+0x892>
 80105a2:	9903      	ldr	r1, [sp, #12]
 80105a4:	9806      	ldr	r0, [sp, #24]
 80105a6:	aa14      	add	r2, sp, #80	; 0x50
 80105a8:	f7ff fb85 	bl	800fcb6 <__sprint_r>
 80105ac:	2800      	cmp	r0, #0
 80105ae:	d120      	bne.n	80105f2 <_vfiprintf_r+0x8d2>
 80105b0:	a917      	add	r1, sp, #92	; 0x5c
 80105b2:	000d      	movs	r5, r1
 80105b4:	3f10      	subs	r7, #16
 80105b6:	e68b      	b.n	80102d0 <_vfiprintf_r+0x5b0>
 80105b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80105ba:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80105bc:	2610      	movs	r6, #16
 80105be:	1a9c      	subs	r4, r3, r2
 80105c0:	2c00      	cmp	r4, #0
 80105c2:	dc00      	bgt.n	80105c6 <_vfiprintf_r+0x8a6>
 80105c4:	e6b7      	b.n	8010336 <_vfiprintf_r+0x616>
 80105c6:	9915      	ldr	r1, [sp, #84]	; 0x54
 80105c8:	4a3b      	ldr	r2, [pc, #236]	; (80106b8 <_vfiprintf_r+0x998>)
 80105ca:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80105cc:	3101      	adds	r1, #1
 80105ce:	602a      	str	r2, [r5, #0]
 80105d0:	2c10      	cmp	r4, #16
 80105d2:	dc22      	bgt.n	801061a <_vfiprintf_r+0x8fa>
 80105d4:	606c      	str	r4, [r5, #4]
 80105d6:	18e4      	adds	r4, r4, r3
 80105d8:	9416      	str	r4, [sp, #88]	; 0x58
 80105da:	9115      	str	r1, [sp, #84]	; 0x54
 80105dc:	2907      	cmp	r1, #7
 80105de:	dc00      	bgt.n	80105e2 <_vfiprintf_r+0x8c2>
 80105e0:	e6a9      	b.n	8010336 <_vfiprintf_r+0x616>
 80105e2:	9903      	ldr	r1, [sp, #12]
 80105e4:	9806      	ldr	r0, [sp, #24]
 80105e6:	aa14      	add	r2, sp, #80	; 0x50
 80105e8:	f7ff fb65 	bl	800fcb6 <__sprint_r>
 80105ec:	2800      	cmp	r0, #0
 80105ee:	d100      	bne.n	80105f2 <_vfiprintf_r+0x8d2>
 80105f0:	e6a1      	b.n	8010336 <_vfiprintf_r+0x616>
 80105f2:	9b03      	ldr	r3, [sp, #12]
 80105f4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80105f6:	07db      	lsls	r3, r3, #31
 80105f8:	d407      	bmi.n	801060a <_vfiprintf_r+0x8ea>
 80105fa:	9b03      	ldr	r3, [sp, #12]
 80105fc:	899b      	ldrh	r3, [r3, #12]
 80105fe:	059b      	lsls	r3, r3, #22
 8010600:	d403      	bmi.n	801060a <_vfiprintf_r+0x8ea>
 8010602:	9b03      	ldr	r3, [sp, #12]
 8010604:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8010606:	f7fa f808 	bl	800a61a <__retarget_lock_release_recursive>
 801060a:	9b03      	ldr	r3, [sp, #12]
 801060c:	899b      	ldrh	r3, [r3, #12]
 801060e:	065b      	lsls	r3, r3, #25
 8010610:	d401      	bmi.n	8010616 <_vfiprintf_r+0x8f6>
 8010612:	f7ff fbc3 	bl	800fd9c <_vfiprintf_r+0x7c>
 8010616:	f7ff fbbe 	bl	800fd96 <_vfiprintf_r+0x76>
 801061a:	3310      	adds	r3, #16
 801061c:	606e      	str	r6, [r5, #4]
 801061e:	9316      	str	r3, [sp, #88]	; 0x58
 8010620:	9115      	str	r1, [sp, #84]	; 0x54
 8010622:	3508      	adds	r5, #8
 8010624:	2907      	cmp	r1, #7
 8010626:	dd07      	ble.n	8010638 <_vfiprintf_r+0x918>
 8010628:	9903      	ldr	r1, [sp, #12]
 801062a:	9806      	ldr	r0, [sp, #24]
 801062c:	aa14      	add	r2, sp, #80	; 0x50
 801062e:	f7ff fb42 	bl	800fcb6 <__sprint_r>
 8010632:	2800      	cmp	r0, #0
 8010634:	d1dd      	bne.n	80105f2 <_vfiprintf_r+0x8d2>
 8010636:	ad17      	add	r5, sp, #92	; 0x5c
 8010638:	3c10      	subs	r4, #16
 801063a:	e7c4      	b.n	80105c6 <_vfiprintf_r+0x8a6>
 801063c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801063e:	2b00      	cmp	r3, #0
 8010640:	d102      	bne.n	8010648 <_vfiprintf_r+0x928>
 8010642:	2300      	movs	r3, #0
 8010644:	9315      	str	r3, [sp, #84]	; 0x54
 8010646:	e7d4      	b.n	80105f2 <_vfiprintf_r+0x8d2>
 8010648:	9903      	ldr	r1, [sp, #12]
 801064a:	9806      	ldr	r0, [sp, #24]
 801064c:	aa14      	add	r2, sp, #80	; 0x50
 801064e:	f7ff fb32 	bl	800fcb6 <__sprint_r>
 8010652:	2800      	cmp	r0, #0
 8010654:	d0f5      	beq.n	8010642 <_vfiprintf_r+0x922>
 8010656:	e7cc      	b.n	80105f2 <_vfiprintf_r+0x8d2>
 8010658:	0027      	movs	r7, r4
 801065a:	2a00      	cmp	r2, #0
 801065c:	d100      	bne.n	8010660 <_vfiprintf_r+0x940>
 801065e:	e51b      	b.n	8010098 <_vfiprintf_r+0x378>
 8010660:	2b01      	cmp	r3, #1
 8010662:	d100      	bne.n	8010666 <_vfiprintf_r+0x946>
 8010664:	e6fe      	b.n	8010464 <_vfiprintf_r+0x744>
 8010666:	ae40      	add	r6, sp, #256	; 0x100
 8010668:	2b02      	cmp	r3, #2
 801066a:	d100      	bne.n	801066e <_vfiprintf_r+0x94e>
 801066c:	e743      	b.n	80104f6 <_vfiprintf_r+0x7d6>
 801066e:	2307      	movs	r3, #7
 8010670:	469c      	mov	ip, r3
 8010672:	4663      	mov	r3, ip
 8010674:	9900      	ldr	r1, [sp, #0]
 8010676:	0032      	movs	r2, r6
 8010678:	400b      	ands	r3, r1
 801067a:	9901      	ldr	r1, [sp, #4]
 801067c:	3e01      	subs	r6, #1
 801067e:	074c      	lsls	r4, r1, #29
 8010680:	9900      	ldr	r1, [sp, #0]
 8010682:	3330      	adds	r3, #48	; 0x30
 8010684:	08c8      	lsrs	r0, r1, #3
 8010686:	9901      	ldr	r1, [sp, #4]
 8010688:	4304      	orrs	r4, r0
 801068a:	08c9      	lsrs	r1, r1, #3
 801068c:	9101      	str	r1, [sp, #4]
 801068e:	0021      	movs	r1, r4
 8010690:	9801      	ldr	r0, [sp, #4]
 8010692:	7033      	strb	r3, [r6, #0]
 8010694:	9400      	str	r4, [sp, #0]
 8010696:	4301      	orrs	r1, r0
 8010698:	d1eb      	bne.n	8010672 <_vfiprintf_r+0x952>
 801069a:	07f9      	lsls	r1, r7, #31
 801069c:	d505      	bpl.n	80106aa <_vfiprintf_r+0x98a>
 801069e:	2b30      	cmp	r3, #48	; 0x30
 80106a0:	d003      	beq.n	80106aa <_vfiprintf_r+0x98a>
 80106a2:	2330      	movs	r3, #48	; 0x30
 80106a4:	3e01      	subs	r6, #1
 80106a6:	7033      	strb	r3, [r6, #0]
 80106a8:	1e96      	subs	r6, r2, #2
 80106aa:	9b05      	ldr	r3, [sp, #20]
 80106ac:	003c      	movs	r4, r7
 80106ae:	930b      	str	r3, [sp, #44]	; 0x2c
 80106b0:	ab40      	add	r3, sp, #256	; 0x100
 80106b2:	1b9b      	subs	r3, r3, r6
 80106b4:	9305      	str	r3, [sp, #20]
 80106b6:	e575      	b.n	80101a4 <_vfiprintf_r+0x484>
 80106b8:	08012e41 	.word	0x08012e41

080106bc <__sbprintf>:
 80106bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80106be:	0015      	movs	r5, r2
 80106c0:	2202      	movs	r2, #2
 80106c2:	4c1e      	ldr	r4, [pc, #120]	; (801073c <__sbprintf+0x80>)
 80106c4:	001f      	movs	r7, r3
 80106c6:	898b      	ldrh	r3, [r1, #12]
 80106c8:	44a5      	add	sp, r4
 80106ca:	4393      	bics	r3, r2
 80106cc:	466a      	mov	r2, sp
 80106ce:	8193      	strh	r3, [r2, #12]
 80106d0:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 80106d2:	0006      	movs	r6, r0
 80106d4:	9319      	str	r3, [sp, #100]	; 0x64
 80106d6:	89cb      	ldrh	r3, [r1, #14]
 80106d8:	a816      	add	r0, sp, #88	; 0x58
 80106da:	81d3      	strh	r3, [r2, #14]
 80106dc:	69cb      	ldr	r3, [r1, #28]
 80106de:	000c      	movs	r4, r1
 80106e0:	9307      	str	r3, [sp, #28]
 80106e2:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 80106e4:	9309      	str	r3, [sp, #36]	; 0x24
 80106e6:	ab1a      	add	r3, sp, #104	; 0x68
 80106e8:	9300      	str	r3, [sp, #0]
 80106ea:	9304      	str	r3, [sp, #16]
 80106ec:	2380      	movs	r3, #128	; 0x80
 80106ee:	00db      	lsls	r3, r3, #3
 80106f0:	9302      	str	r3, [sp, #8]
 80106f2:	9305      	str	r3, [sp, #20]
 80106f4:	2300      	movs	r3, #0
 80106f6:	9306      	str	r3, [sp, #24]
 80106f8:	f7f9 ff8c 	bl	800a614 <__retarget_lock_init_recursive>
 80106fc:	002a      	movs	r2, r5
 80106fe:	003b      	movs	r3, r7
 8010700:	4669      	mov	r1, sp
 8010702:	0030      	movs	r0, r6
 8010704:	f7ff fb0c 	bl	800fd20 <_vfiprintf_r>
 8010708:	1e05      	subs	r5, r0, #0
 801070a:	db07      	blt.n	801071c <__sbprintf+0x60>
 801070c:	4669      	mov	r1, sp
 801070e:	0030      	movs	r0, r6
 8010710:	f7fd fdf6 	bl	800e300 <_fflush_r>
 8010714:	2800      	cmp	r0, #0
 8010716:	d001      	beq.n	801071c <__sbprintf+0x60>
 8010718:	2501      	movs	r5, #1
 801071a:	426d      	negs	r5, r5
 801071c:	466b      	mov	r3, sp
 801071e:	899a      	ldrh	r2, [r3, #12]
 8010720:	2340      	movs	r3, #64	; 0x40
 8010722:	421a      	tst	r2, r3
 8010724:	d002      	beq.n	801072c <__sbprintf+0x70>
 8010726:	89a2      	ldrh	r2, [r4, #12]
 8010728:	4313      	orrs	r3, r2
 801072a:	81a3      	strh	r3, [r4, #12]
 801072c:	9816      	ldr	r0, [sp, #88]	; 0x58
 801072e:	f7f9 ff72 	bl	800a616 <__retarget_lock_close_recursive>
 8010732:	0028      	movs	r0, r5
 8010734:	4b02      	ldr	r3, [pc, #8]	; (8010740 <__sbprintf+0x84>)
 8010736:	449d      	add	sp, r3
 8010738:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801073a:	46c0      	nop			; (mov r8, r8)
 801073c:	fffffb94 	.word	0xfffffb94
 8010740:	0000046c 	.word	0x0000046c

08010744 <__sfvwrite_r>:
 8010744:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010746:	6893      	ldr	r3, [r2, #8]
 8010748:	b087      	sub	sp, #28
 801074a:	000c      	movs	r4, r1
 801074c:	9002      	str	r0, [sp, #8]
 801074e:	9204      	str	r2, [sp, #16]
 8010750:	2b00      	cmp	r3, #0
 8010752:	d102      	bne.n	801075a <__sfvwrite_r+0x16>
 8010754:	2000      	movs	r0, #0
 8010756:	b007      	add	sp, #28
 8010758:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801075a:	898b      	ldrh	r3, [r1, #12]
 801075c:	071b      	lsls	r3, r3, #28
 801075e:	d557      	bpl.n	8010810 <__sfvwrite_r+0xcc>
 8010760:	690b      	ldr	r3, [r1, #16]
 8010762:	2b00      	cmp	r3, #0
 8010764:	d054      	beq.n	8010810 <__sfvwrite_r+0xcc>
 8010766:	9b04      	ldr	r3, [sp, #16]
 8010768:	2202      	movs	r2, #2
 801076a:	681b      	ldr	r3, [r3, #0]
 801076c:	9301      	str	r3, [sp, #4]
 801076e:	89a3      	ldrh	r3, [r4, #12]
 8010770:	001f      	movs	r7, r3
 8010772:	4017      	ands	r7, r2
 8010774:	4213      	tst	r3, r2
 8010776:	d171      	bne.n	801085c <__sfvwrite_r+0x118>
 8010778:	2201      	movs	r2, #1
 801077a:	2101      	movs	r1, #1
 801077c:	401a      	ands	r2, r3
 801077e:	420b      	tst	r3, r1
 8010780:	d100      	bne.n	8010784 <__sfvwrite_r+0x40>
 8010782:	e0a5      	b.n	80108d0 <__sfvwrite_r+0x18c>
 8010784:	0038      	movs	r0, r7
 8010786:	003e      	movs	r6, r7
 8010788:	9703      	str	r7, [sp, #12]
 801078a:	9b03      	ldr	r3, [sp, #12]
 801078c:	2b00      	cmp	r3, #0
 801078e:	d100      	bne.n	8010792 <__sfvwrite_r+0x4e>
 8010790:	e10b      	b.n	80109aa <__sfvwrite_r+0x266>
 8010792:	2800      	cmp	r0, #0
 8010794:	d10a      	bne.n	80107ac <__sfvwrite_r+0x68>
 8010796:	001a      	movs	r2, r3
 8010798:	210a      	movs	r1, #10
 801079a:	0030      	movs	r0, r6
 801079c:	f7fd fe2a 	bl	800e3f4 <memchr>
 80107a0:	9b03      	ldr	r3, [sp, #12]
 80107a2:	1c5f      	adds	r7, r3, #1
 80107a4:	2800      	cmp	r0, #0
 80107a6:	d001      	beq.n	80107ac <__sfvwrite_r+0x68>
 80107a8:	3001      	adds	r0, #1
 80107aa:	1b87      	subs	r7, r0, r6
 80107ac:	9b03      	ldr	r3, [sp, #12]
 80107ae:	9705      	str	r7, [sp, #20]
 80107b0:	429f      	cmp	r7, r3
 80107b2:	d900      	bls.n	80107b6 <__sfvwrite_r+0x72>
 80107b4:	9305      	str	r3, [sp, #20]
 80107b6:	6820      	ldr	r0, [r4, #0]
 80107b8:	6922      	ldr	r2, [r4, #16]
 80107ba:	68a5      	ldr	r5, [r4, #8]
 80107bc:	6963      	ldr	r3, [r4, #20]
 80107be:	4290      	cmp	r0, r2
 80107c0:	d800      	bhi.n	80107c4 <__sfvwrite_r+0x80>
 80107c2:	e0fb      	b.n	80109bc <__sfvwrite_r+0x278>
 80107c4:	9a05      	ldr	r2, [sp, #20]
 80107c6:	18ed      	adds	r5, r5, r3
 80107c8:	42aa      	cmp	r2, r5
 80107ca:	dc00      	bgt.n	80107ce <__sfvwrite_r+0x8a>
 80107cc:	e0f6      	b.n	80109bc <__sfvwrite_r+0x278>
 80107ce:	0031      	movs	r1, r6
 80107d0:	002a      	movs	r2, r5
 80107d2:	f000 fa1e 	bl	8010c12 <memmove>
 80107d6:	6823      	ldr	r3, [r4, #0]
 80107d8:	0021      	movs	r1, r4
 80107da:	195b      	adds	r3, r3, r5
 80107dc:	9802      	ldr	r0, [sp, #8]
 80107de:	6023      	str	r3, [r4, #0]
 80107e0:	f7fd fd8e 	bl	800e300 <_fflush_r>
 80107e4:	2800      	cmp	r0, #0
 80107e6:	d16e      	bne.n	80108c6 <__sfvwrite_r+0x182>
 80107e8:	2001      	movs	r0, #1
 80107ea:	1b7f      	subs	r7, r7, r5
 80107ec:	d105      	bne.n	80107fa <__sfvwrite_r+0xb6>
 80107ee:	0021      	movs	r1, r4
 80107f0:	9802      	ldr	r0, [sp, #8]
 80107f2:	f7fd fd85 	bl	800e300 <_fflush_r>
 80107f6:	2800      	cmp	r0, #0
 80107f8:	d165      	bne.n	80108c6 <__sfvwrite_r+0x182>
 80107fa:	9b03      	ldr	r3, [sp, #12]
 80107fc:	9a04      	ldr	r2, [sp, #16]
 80107fe:	1b5b      	subs	r3, r3, r5
 8010800:	9303      	str	r3, [sp, #12]
 8010802:	9b04      	ldr	r3, [sp, #16]
 8010804:	1976      	adds	r6, r6, r5
 8010806:	689b      	ldr	r3, [r3, #8]
 8010808:	1b5b      	subs	r3, r3, r5
 801080a:	6093      	str	r3, [r2, #8]
 801080c:	d1bd      	bne.n	801078a <__sfvwrite_r+0x46>
 801080e:	e7a1      	b.n	8010754 <__sfvwrite_r+0x10>
 8010810:	0021      	movs	r1, r4
 8010812:	9802      	ldr	r0, [sp, #8]
 8010814:	f000 f932 	bl	8010a7c <__swsetup_r>
 8010818:	2800      	cmp	r0, #0
 801081a:	d0a4      	beq.n	8010766 <__sfvwrite_r+0x22>
 801081c:	2001      	movs	r0, #1
 801081e:	4240      	negs	r0, r0
 8010820:	e799      	b.n	8010756 <__sfvwrite_r+0x12>
 8010822:	9b01      	ldr	r3, [sp, #4]
 8010824:	681e      	ldr	r6, [r3, #0]
 8010826:	685d      	ldr	r5, [r3, #4]
 8010828:	3308      	adds	r3, #8
 801082a:	9301      	str	r3, [sp, #4]
 801082c:	6a67      	ldr	r7, [r4, #36]	; 0x24
 801082e:	69e1      	ldr	r1, [r4, #28]
 8010830:	2d00      	cmp	r5, #0
 8010832:	d0f6      	beq.n	8010822 <__sfvwrite_r+0xde>
 8010834:	4a6e      	ldr	r2, [pc, #440]	; (80109f0 <__sfvwrite_r+0x2ac>)
 8010836:	002b      	movs	r3, r5
 8010838:	4295      	cmp	r5, r2
 801083a:	d900      	bls.n	801083e <__sfvwrite_r+0xfa>
 801083c:	0013      	movs	r3, r2
 801083e:	0032      	movs	r2, r6
 8010840:	9802      	ldr	r0, [sp, #8]
 8010842:	47b8      	blx	r7
 8010844:	2800      	cmp	r0, #0
 8010846:	dd3e      	ble.n	80108c6 <__sfvwrite_r+0x182>
 8010848:	9b04      	ldr	r3, [sp, #16]
 801084a:	9a04      	ldr	r2, [sp, #16]
 801084c:	689b      	ldr	r3, [r3, #8]
 801084e:	1836      	adds	r6, r6, r0
 8010850:	1a1b      	subs	r3, r3, r0
 8010852:	1a2d      	subs	r5, r5, r0
 8010854:	6093      	str	r3, [r2, #8]
 8010856:	2b00      	cmp	r3, #0
 8010858:	d1e8      	bne.n	801082c <__sfvwrite_r+0xe8>
 801085a:	e77b      	b.n	8010754 <__sfvwrite_r+0x10>
 801085c:	2600      	movs	r6, #0
 801085e:	0035      	movs	r5, r6
 8010860:	e7e4      	b.n	801082c <__sfvwrite_r+0xe8>
 8010862:	9b01      	ldr	r3, [sp, #4]
 8010864:	681b      	ldr	r3, [r3, #0]
 8010866:	9303      	str	r3, [sp, #12]
 8010868:	9b01      	ldr	r3, [sp, #4]
 801086a:	685d      	ldr	r5, [r3, #4]
 801086c:	3308      	adds	r3, #8
 801086e:	9301      	str	r3, [sp, #4]
 8010870:	220c      	movs	r2, #12
 8010872:	5ea3      	ldrsh	r3, [r4, r2]
 8010874:	6820      	ldr	r0, [r4, #0]
 8010876:	68a6      	ldr	r6, [r4, #8]
 8010878:	2d00      	cmp	r5, #0
 801087a:	d0f2      	beq.n	8010862 <__sfvwrite_r+0x11e>
 801087c:	2180      	movs	r1, #128	; 0x80
 801087e:	0089      	lsls	r1, r1, #2
 8010880:	b29a      	uxth	r2, r3
 8010882:	420b      	tst	r3, r1
 8010884:	d062      	beq.n	801094c <__sfvwrite_r+0x208>
 8010886:	42ae      	cmp	r6, r5
 8010888:	d837      	bhi.n	80108fa <__sfvwrite_r+0x1b6>
 801088a:	2390      	movs	r3, #144	; 0x90
 801088c:	00db      	lsls	r3, r3, #3
 801088e:	421a      	tst	r2, r3
 8010890:	d033      	beq.n	80108fa <__sfvwrite_r+0x1b6>
 8010892:	6921      	ldr	r1, [r4, #16]
 8010894:	1a43      	subs	r3, r0, r1
 8010896:	2003      	movs	r0, #3
 8010898:	9305      	str	r3, [sp, #20]
 801089a:	6963      	ldr	r3, [r4, #20]
 801089c:	4343      	muls	r3, r0
 801089e:	0fdf      	lsrs	r7, r3, #31
 80108a0:	18ff      	adds	r7, r7, r3
 80108a2:	9b05      	ldr	r3, [sp, #20]
 80108a4:	107f      	asrs	r7, r7, #1
 80108a6:	3301      	adds	r3, #1
 80108a8:	195b      	adds	r3, r3, r5
 80108aa:	42bb      	cmp	r3, r7
 80108ac:	d900      	bls.n	80108b0 <__sfvwrite_r+0x16c>
 80108ae:	001f      	movs	r7, r3
 80108b0:	0552      	lsls	r2, r2, #21
 80108b2:	d53c      	bpl.n	801092e <__sfvwrite_r+0x1ea>
 80108b4:	0039      	movs	r1, r7
 80108b6:	9802      	ldr	r0, [sp, #8]
 80108b8:	f7f8 fb64 	bl	8008f84 <_malloc_r>
 80108bc:	1e06      	subs	r6, r0, #0
 80108be:	d10a      	bne.n	80108d6 <__sfvwrite_r+0x192>
 80108c0:	230c      	movs	r3, #12
 80108c2:	9a02      	ldr	r2, [sp, #8]
 80108c4:	6013      	str	r3, [r2, #0]
 80108c6:	2340      	movs	r3, #64	; 0x40
 80108c8:	89a2      	ldrh	r2, [r4, #12]
 80108ca:	4313      	orrs	r3, r2
 80108cc:	81a3      	strh	r3, [r4, #12]
 80108ce:	e7a5      	b.n	801081c <__sfvwrite_r+0xd8>
 80108d0:	0015      	movs	r5, r2
 80108d2:	9203      	str	r2, [sp, #12]
 80108d4:	e7cc      	b.n	8010870 <__sfvwrite_r+0x12c>
 80108d6:	9a05      	ldr	r2, [sp, #20]
 80108d8:	6921      	ldr	r1, [r4, #16]
 80108da:	f7f9 feaa 	bl	800a632 <memcpy>
 80108de:	89a2      	ldrh	r2, [r4, #12]
 80108e0:	4b44      	ldr	r3, [pc, #272]	; (80109f4 <__sfvwrite_r+0x2b0>)
 80108e2:	401a      	ands	r2, r3
 80108e4:	2380      	movs	r3, #128	; 0x80
 80108e6:	4313      	orrs	r3, r2
 80108e8:	81a3      	strh	r3, [r4, #12]
 80108ea:	9b05      	ldr	r3, [sp, #20]
 80108ec:	6126      	str	r6, [r4, #16]
 80108ee:	18f6      	adds	r6, r6, r3
 80108f0:	6026      	str	r6, [r4, #0]
 80108f2:	002e      	movs	r6, r5
 80108f4:	6167      	str	r7, [r4, #20]
 80108f6:	1aff      	subs	r7, r7, r3
 80108f8:	60a7      	str	r7, [r4, #8]
 80108fa:	002f      	movs	r7, r5
 80108fc:	42ae      	cmp	r6, r5
 80108fe:	d900      	bls.n	8010902 <__sfvwrite_r+0x1be>
 8010900:	002e      	movs	r6, r5
 8010902:	0032      	movs	r2, r6
 8010904:	9903      	ldr	r1, [sp, #12]
 8010906:	6820      	ldr	r0, [r4, #0]
 8010908:	f000 f983 	bl	8010c12 <memmove>
 801090c:	68a3      	ldr	r3, [r4, #8]
 801090e:	1b9b      	subs	r3, r3, r6
 8010910:	60a3      	str	r3, [r4, #8]
 8010912:	6823      	ldr	r3, [r4, #0]
 8010914:	199b      	adds	r3, r3, r6
 8010916:	6023      	str	r3, [r4, #0]
 8010918:	9b03      	ldr	r3, [sp, #12]
 801091a:	9a04      	ldr	r2, [sp, #16]
 801091c:	19db      	adds	r3, r3, r7
 801091e:	9303      	str	r3, [sp, #12]
 8010920:	9b04      	ldr	r3, [sp, #16]
 8010922:	1bed      	subs	r5, r5, r7
 8010924:	689b      	ldr	r3, [r3, #8]
 8010926:	1bdb      	subs	r3, r3, r7
 8010928:	6093      	str	r3, [r2, #8]
 801092a:	d1a1      	bne.n	8010870 <__sfvwrite_r+0x12c>
 801092c:	e712      	b.n	8010754 <__sfvwrite_r+0x10>
 801092e:	003a      	movs	r2, r7
 8010930:	9802      	ldr	r0, [sp, #8]
 8010932:	f7fe fcd7 	bl	800f2e4 <_realloc_r>
 8010936:	1e06      	subs	r6, r0, #0
 8010938:	d1d7      	bne.n	80108ea <__sfvwrite_r+0x1a6>
 801093a:	6921      	ldr	r1, [r4, #16]
 801093c:	9802      	ldr	r0, [sp, #8]
 801093e:	f7f9 fef3 	bl	800a728 <_free_r>
 8010942:	2280      	movs	r2, #128	; 0x80
 8010944:	89a3      	ldrh	r3, [r4, #12]
 8010946:	4393      	bics	r3, r2
 8010948:	81a3      	strh	r3, [r4, #12]
 801094a:	e7b9      	b.n	80108c0 <__sfvwrite_r+0x17c>
 801094c:	6923      	ldr	r3, [r4, #16]
 801094e:	4283      	cmp	r3, r0
 8010950:	d302      	bcc.n	8010958 <__sfvwrite_r+0x214>
 8010952:	6967      	ldr	r7, [r4, #20]
 8010954:	42af      	cmp	r7, r5
 8010956:	d916      	bls.n	8010986 <__sfvwrite_r+0x242>
 8010958:	42ae      	cmp	r6, r5
 801095a:	d900      	bls.n	801095e <__sfvwrite_r+0x21a>
 801095c:	002e      	movs	r6, r5
 801095e:	0032      	movs	r2, r6
 8010960:	9903      	ldr	r1, [sp, #12]
 8010962:	f000 f956 	bl	8010c12 <memmove>
 8010966:	68a3      	ldr	r3, [r4, #8]
 8010968:	6822      	ldr	r2, [r4, #0]
 801096a:	1b9b      	subs	r3, r3, r6
 801096c:	1992      	adds	r2, r2, r6
 801096e:	0037      	movs	r7, r6
 8010970:	60a3      	str	r3, [r4, #8]
 8010972:	6022      	str	r2, [r4, #0]
 8010974:	2b00      	cmp	r3, #0
 8010976:	d1cf      	bne.n	8010918 <__sfvwrite_r+0x1d4>
 8010978:	0021      	movs	r1, r4
 801097a:	9802      	ldr	r0, [sp, #8]
 801097c:	f7fd fcc0 	bl	800e300 <_fflush_r>
 8010980:	2800      	cmp	r0, #0
 8010982:	d0c9      	beq.n	8010918 <__sfvwrite_r+0x1d4>
 8010984:	e79f      	b.n	80108c6 <__sfvwrite_r+0x182>
 8010986:	4b1c      	ldr	r3, [pc, #112]	; (80109f8 <__sfvwrite_r+0x2b4>)
 8010988:	0028      	movs	r0, r5
 801098a:	429d      	cmp	r5, r3
 801098c:	d900      	bls.n	8010990 <__sfvwrite_r+0x24c>
 801098e:	481b      	ldr	r0, [pc, #108]	; (80109fc <__sfvwrite_r+0x2b8>)
 8010990:	0039      	movs	r1, r7
 8010992:	f7ef fc5d 	bl	8000250 <__divsi3>
 8010996:	003b      	movs	r3, r7
 8010998:	6a66      	ldr	r6, [r4, #36]	; 0x24
 801099a:	4343      	muls	r3, r0
 801099c:	9a03      	ldr	r2, [sp, #12]
 801099e:	69e1      	ldr	r1, [r4, #28]
 80109a0:	9802      	ldr	r0, [sp, #8]
 80109a2:	47b0      	blx	r6
 80109a4:	1e07      	subs	r7, r0, #0
 80109a6:	dcb7      	bgt.n	8010918 <__sfvwrite_r+0x1d4>
 80109a8:	e78d      	b.n	80108c6 <__sfvwrite_r+0x182>
 80109aa:	9b01      	ldr	r3, [sp, #4]
 80109ac:	2000      	movs	r0, #0
 80109ae:	681e      	ldr	r6, [r3, #0]
 80109b0:	685b      	ldr	r3, [r3, #4]
 80109b2:	9303      	str	r3, [sp, #12]
 80109b4:	9b01      	ldr	r3, [sp, #4]
 80109b6:	3308      	adds	r3, #8
 80109b8:	9301      	str	r3, [sp, #4]
 80109ba:	e6e6      	b.n	801078a <__sfvwrite_r+0x46>
 80109bc:	9a05      	ldr	r2, [sp, #20]
 80109be:	4293      	cmp	r3, r2
 80109c0:	dc08      	bgt.n	80109d4 <__sfvwrite_r+0x290>
 80109c2:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80109c4:	0032      	movs	r2, r6
 80109c6:	69e1      	ldr	r1, [r4, #28]
 80109c8:	9802      	ldr	r0, [sp, #8]
 80109ca:	47a8      	blx	r5
 80109cc:	1e05      	subs	r5, r0, #0
 80109ce:	dd00      	ble.n	80109d2 <__sfvwrite_r+0x28e>
 80109d0:	e70a      	b.n	80107e8 <__sfvwrite_r+0xa4>
 80109d2:	e778      	b.n	80108c6 <__sfvwrite_r+0x182>
 80109d4:	9a05      	ldr	r2, [sp, #20]
 80109d6:	0031      	movs	r1, r6
 80109d8:	f000 f91b 	bl	8010c12 <memmove>
 80109dc:	9a05      	ldr	r2, [sp, #20]
 80109de:	68a3      	ldr	r3, [r4, #8]
 80109e0:	0015      	movs	r5, r2
 80109e2:	1a9b      	subs	r3, r3, r2
 80109e4:	60a3      	str	r3, [r4, #8]
 80109e6:	6823      	ldr	r3, [r4, #0]
 80109e8:	189b      	adds	r3, r3, r2
 80109ea:	6023      	str	r3, [r4, #0]
 80109ec:	e6fc      	b.n	80107e8 <__sfvwrite_r+0xa4>
 80109ee:	46c0      	nop			; (mov r8, r8)
 80109f0:	7ffffc00 	.word	0x7ffffc00
 80109f4:	fffffb7f 	.word	0xfffffb7f
 80109f8:	7ffffffe 	.word	0x7ffffffe
 80109fc:	7fffffff 	.word	0x7fffffff

08010a00 <__submore>:
 8010a00:	000b      	movs	r3, r1
 8010a02:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010a04:	6b0d      	ldr	r5, [r1, #48]	; 0x30
 8010a06:	3340      	adds	r3, #64	; 0x40
 8010a08:	000c      	movs	r4, r1
 8010a0a:	429d      	cmp	r5, r3
 8010a0c:	d11c      	bne.n	8010a48 <__submore+0x48>
 8010a0e:	2680      	movs	r6, #128	; 0x80
 8010a10:	00f6      	lsls	r6, r6, #3
 8010a12:	0031      	movs	r1, r6
 8010a14:	f7f8 fab6 	bl	8008f84 <_malloc_r>
 8010a18:	2800      	cmp	r0, #0
 8010a1a:	d102      	bne.n	8010a22 <__submore+0x22>
 8010a1c:	2001      	movs	r0, #1
 8010a1e:	4240      	negs	r0, r0
 8010a20:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8010a22:	0023      	movs	r3, r4
 8010a24:	6320      	str	r0, [r4, #48]	; 0x30
 8010a26:	6366      	str	r6, [r4, #52]	; 0x34
 8010a28:	3342      	adds	r3, #66	; 0x42
 8010a2a:	781a      	ldrb	r2, [r3, #0]
 8010a2c:	4b10      	ldr	r3, [pc, #64]	; (8010a70 <__submore+0x70>)
 8010a2e:	54c2      	strb	r2, [r0, r3]
 8010a30:	0023      	movs	r3, r4
 8010a32:	3341      	adds	r3, #65	; 0x41
 8010a34:	781a      	ldrb	r2, [r3, #0]
 8010a36:	4b0f      	ldr	r3, [pc, #60]	; (8010a74 <__submore+0x74>)
 8010a38:	54c2      	strb	r2, [r0, r3]
 8010a3a:	782a      	ldrb	r2, [r5, #0]
 8010a3c:	4b0e      	ldr	r3, [pc, #56]	; (8010a78 <__submore+0x78>)
 8010a3e:	54c2      	strb	r2, [r0, r3]
 8010a40:	18c0      	adds	r0, r0, r3
 8010a42:	6020      	str	r0, [r4, #0]
 8010a44:	2000      	movs	r0, #0
 8010a46:	e7eb      	b.n	8010a20 <__submore+0x20>
 8010a48:	6b4e      	ldr	r6, [r1, #52]	; 0x34
 8010a4a:	0029      	movs	r1, r5
 8010a4c:	0073      	lsls	r3, r6, #1
 8010a4e:	001a      	movs	r2, r3
 8010a50:	9301      	str	r3, [sp, #4]
 8010a52:	f7fe fc47 	bl	800f2e4 <_realloc_r>
 8010a56:	1e05      	subs	r5, r0, #0
 8010a58:	d0e0      	beq.n	8010a1c <__submore+0x1c>
 8010a5a:	1987      	adds	r7, r0, r6
 8010a5c:	0001      	movs	r1, r0
 8010a5e:	0032      	movs	r2, r6
 8010a60:	0038      	movs	r0, r7
 8010a62:	f7f9 fde6 	bl	800a632 <memcpy>
 8010a66:	9b01      	ldr	r3, [sp, #4]
 8010a68:	6027      	str	r7, [r4, #0]
 8010a6a:	6325      	str	r5, [r4, #48]	; 0x30
 8010a6c:	6363      	str	r3, [r4, #52]	; 0x34
 8010a6e:	e7e9      	b.n	8010a44 <__submore+0x44>
 8010a70:	000003ff 	.word	0x000003ff
 8010a74:	000003fe 	.word	0x000003fe
 8010a78:	000003fd 	.word	0x000003fd

08010a7c <__swsetup_r>:
 8010a7c:	4b30      	ldr	r3, [pc, #192]	; (8010b40 <__swsetup_r+0xc4>)
 8010a7e:	b570      	push	{r4, r5, r6, lr}
 8010a80:	0005      	movs	r5, r0
 8010a82:	6818      	ldr	r0, [r3, #0]
 8010a84:	000c      	movs	r4, r1
 8010a86:	2800      	cmp	r0, #0
 8010a88:	d004      	beq.n	8010a94 <__swsetup_r+0x18>
 8010a8a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8010a8c:	2b00      	cmp	r3, #0
 8010a8e:	d101      	bne.n	8010a94 <__swsetup_r+0x18>
 8010a90:	f7f9 fbec 	bl	800a26c <__sinit>
 8010a94:	230c      	movs	r3, #12
 8010a96:	5ee2      	ldrsh	r2, [r4, r3]
 8010a98:	b293      	uxth	r3, r2
 8010a9a:	0711      	lsls	r1, r2, #28
 8010a9c:	d423      	bmi.n	8010ae6 <__swsetup_r+0x6a>
 8010a9e:	06d9      	lsls	r1, r3, #27
 8010aa0:	d407      	bmi.n	8010ab2 <__swsetup_r+0x36>
 8010aa2:	2309      	movs	r3, #9
 8010aa4:	2001      	movs	r0, #1
 8010aa6:	602b      	str	r3, [r5, #0]
 8010aa8:	3337      	adds	r3, #55	; 0x37
 8010aaa:	4313      	orrs	r3, r2
 8010aac:	81a3      	strh	r3, [r4, #12]
 8010aae:	4240      	negs	r0, r0
 8010ab0:	bd70      	pop	{r4, r5, r6, pc}
 8010ab2:	075b      	lsls	r3, r3, #29
 8010ab4:	d513      	bpl.n	8010ade <__swsetup_r+0x62>
 8010ab6:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8010ab8:	2900      	cmp	r1, #0
 8010aba:	d008      	beq.n	8010ace <__swsetup_r+0x52>
 8010abc:	0023      	movs	r3, r4
 8010abe:	3340      	adds	r3, #64	; 0x40
 8010ac0:	4299      	cmp	r1, r3
 8010ac2:	d002      	beq.n	8010aca <__swsetup_r+0x4e>
 8010ac4:	0028      	movs	r0, r5
 8010ac6:	f7f9 fe2f 	bl	800a728 <_free_r>
 8010aca:	2300      	movs	r3, #0
 8010acc:	6323      	str	r3, [r4, #48]	; 0x30
 8010ace:	2224      	movs	r2, #36	; 0x24
 8010ad0:	89a3      	ldrh	r3, [r4, #12]
 8010ad2:	4393      	bics	r3, r2
 8010ad4:	81a3      	strh	r3, [r4, #12]
 8010ad6:	2300      	movs	r3, #0
 8010ad8:	6063      	str	r3, [r4, #4]
 8010ada:	6923      	ldr	r3, [r4, #16]
 8010adc:	6023      	str	r3, [r4, #0]
 8010ade:	2308      	movs	r3, #8
 8010ae0:	89a2      	ldrh	r2, [r4, #12]
 8010ae2:	4313      	orrs	r3, r2
 8010ae4:	81a3      	strh	r3, [r4, #12]
 8010ae6:	6923      	ldr	r3, [r4, #16]
 8010ae8:	2b00      	cmp	r3, #0
 8010aea:	d10b      	bne.n	8010b04 <__swsetup_r+0x88>
 8010aec:	21a0      	movs	r1, #160	; 0xa0
 8010aee:	2280      	movs	r2, #128	; 0x80
 8010af0:	89a3      	ldrh	r3, [r4, #12]
 8010af2:	0089      	lsls	r1, r1, #2
 8010af4:	0092      	lsls	r2, r2, #2
 8010af6:	400b      	ands	r3, r1
 8010af8:	4293      	cmp	r3, r2
 8010afa:	d003      	beq.n	8010b04 <__swsetup_r+0x88>
 8010afc:	0021      	movs	r1, r4
 8010afe:	0028      	movs	r0, r5
 8010b00:	f000 f8e8 	bl	8010cd4 <__smakebuf_r>
 8010b04:	220c      	movs	r2, #12
 8010b06:	5ea3      	ldrsh	r3, [r4, r2]
 8010b08:	2001      	movs	r0, #1
 8010b0a:	001a      	movs	r2, r3
 8010b0c:	b299      	uxth	r1, r3
 8010b0e:	4002      	ands	r2, r0
 8010b10:	4203      	tst	r3, r0
 8010b12:	d00f      	beq.n	8010b34 <__swsetup_r+0xb8>
 8010b14:	2200      	movs	r2, #0
 8010b16:	60a2      	str	r2, [r4, #8]
 8010b18:	6962      	ldr	r2, [r4, #20]
 8010b1a:	4252      	negs	r2, r2
 8010b1c:	61a2      	str	r2, [r4, #24]
 8010b1e:	2000      	movs	r0, #0
 8010b20:	6922      	ldr	r2, [r4, #16]
 8010b22:	4282      	cmp	r2, r0
 8010b24:	d1c4      	bne.n	8010ab0 <__swsetup_r+0x34>
 8010b26:	0609      	lsls	r1, r1, #24
 8010b28:	d5c2      	bpl.n	8010ab0 <__swsetup_r+0x34>
 8010b2a:	2240      	movs	r2, #64	; 0x40
 8010b2c:	4313      	orrs	r3, r2
 8010b2e:	81a3      	strh	r3, [r4, #12]
 8010b30:	3801      	subs	r0, #1
 8010b32:	e7bd      	b.n	8010ab0 <__swsetup_r+0x34>
 8010b34:	0788      	lsls	r0, r1, #30
 8010b36:	d400      	bmi.n	8010b3a <__swsetup_r+0xbe>
 8010b38:	6962      	ldr	r2, [r4, #20]
 8010b3a:	60a2      	str	r2, [r4, #8]
 8010b3c:	e7ef      	b.n	8010b1e <__swsetup_r+0xa2>
 8010b3e:	46c0      	nop			; (mov r8, r8)
 8010b40:	200006b8 	.word	0x200006b8

08010b44 <__fputwc>:
 8010b44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010b46:	b085      	sub	sp, #20
 8010b48:	000e      	movs	r6, r1
 8010b4a:	0015      	movs	r5, r2
 8010b4c:	9001      	str	r0, [sp, #4]
 8010b4e:	f7f9 fccf 	bl	800a4f0 <__locale_mb_cur_max>
 8010b52:	0004      	movs	r4, r0
 8010b54:	2801      	cmp	r0, #1
 8010b56:	d119      	bne.n	8010b8c <__fputwc+0x48>
 8010b58:	1e73      	subs	r3, r6, #1
 8010b5a:	2bfe      	cmp	r3, #254	; 0xfe
 8010b5c:	d816      	bhi.n	8010b8c <__fputwc+0x48>
 8010b5e:	ab02      	add	r3, sp, #8
 8010b60:	711e      	strb	r6, [r3, #4]
 8010b62:	2700      	movs	r7, #0
 8010b64:	42a7      	cmp	r7, r4
 8010b66:	d020      	beq.n	8010baa <__fputwc+0x66>
 8010b68:	ab03      	add	r3, sp, #12
 8010b6a:	5dd9      	ldrb	r1, [r3, r7]
 8010b6c:	68ab      	ldr	r3, [r5, #8]
 8010b6e:	3b01      	subs	r3, #1
 8010b70:	60ab      	str	r3, [r5, #8]
 8010b72:	2b00      	cmp	r3, #0
 8010b74:	da04      	bge.n	8010b80 <__fputwc+0x3c>
 8010b76:	69aa      	ldr	r2, [r5, #24]
 8010b78:	4293      	cmp	r3, r2
 8010b7a:	db19      	blt.n	8010bb0 <__fputwc+0x6c>
 8010b7c:	290a      	cmp	r1, #10
 8010b7e:	d017      	beq.n	8010bb0 <__fputwc+0x6c>
 8010b80:	682b      	ldr	r3, [r5, #0]
 8010b82:	1c5a      	adds	r2, r3, #1
 8010b84:	602a      	str	r2, [r5, #0]
 8010b86:	7019      	strb	r1, [r3, #0]
 8010b88:	3701      	adds	r7, #1
 8010b8a:	e7eb      	b.n	8010b64 <__fputwc+0x20>
 8010b8c:	002b      	movs	r3, r5
 8010b8e:	0032      	movs	r2, r6
 8010b90:	9801      	ldr	r0, [sp, #4]
 8010b92:	335c      	adds	r3, #92	; 0x5c
 8010b94:	a903      	add	r1, sp, #12
 8010b96:	f000 f857 	bl	8010c48 <_wcrtomb_r>
 8010b9a:	0004      	movs	r4, r0
 8010b9c:	1c43      	adds	r3, r0, #1
 8010b9e:	d1e0      	bne.n	8010b62 <__fputwc+0x1e>
 8010ba0:	2340      	movs	r3, #64	; 0x40
 8010ba2:	0006      	movs	r6, r0
 8010ba4:	89aa      	ldrh	r2, [r5, #12]
 8010ba6:	4313      	orrs	r3, r2
 8010ba8:	81ab      	strh	r3, [r5, #12]
 8010baa:	0030      	movs	r0, r6
 8010bac:	b005      	add	sp, #20
 8010bae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010bb0:	002a      	movs	r2, r5
 8010bb2:	9801      	ldr	r0, [sp, #4]
 8010bb4:	f000 f8cc 	bl	8010d50 <__swbuf_r>
 8010bb8:	1c43      	adds	r3, r0, #1
 8010bba:	d1e5      	bne.n	8010b88 <__fputwc+0x44>
 8010bbc:	0006      	movs	r6, r0
 8010bbe:	e7f4      	b.n	8010baa <__fputwc+0x66>

08010bc0 <_fputwc_r>:
 8010bc0:	6e53      	ldr	r3, [r2, #100]	; 0x64
 8010bc2:	b570      	push	{r4, r5, r6, lr}
 8010bc4:	0005      	movs	r5, r0
 8010bc6:	000e      	movs	r6, r1
 8010bc8:	0014      	movs	r4, r2
 8010bca:	07db      	lsls	r3, r3, #31
 8010bcc:	d405      	bmi.n	8010bda <_fputwc_r+0x1a>
 8010bce:	8993      	ldrh	r3, [r2, #12]
 8010bd0:	059b      	lsls	r3, r3, #22
 8010bd2:	d402      	bmi.n	8010bda <_fputwc_r+0x1a>
 8010bd4:	6d90      	ldr	r0, [r2, #88]	; 0x58
 8010bd6:	f7f9 fd1f 	bl	800a618 <__retarget_lock_acquire_recursive>
 8010bda:	230c      	movs	r3, #12
 8010bdc:	5ee2      	ldrsh	r2, [r4, r3]
 8010bde:	2380      	movs	r3, #128	; 0x80
 8010be0:	019b      	lsls	r3, r3, #6
 8010be2:	421a      	tst	r2, r3
 8010be4:	d104      	bne.n	8010bf0 <_fputwc_r+0x30>
 8010be6:	431a      	orrs	r2, r3
 8010be8:	81a2      	strh	r2, [r4, #12]
 8010bea:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8010bec:	4313      	orrs	r3, r2
 8010bee:	6663      	str	r3, [r4, #100]	; 0x64
 8010bf0:	0028      	movs	r0, r5
 8010bf2:	0022      	movs	r2, r4
 8010bf4:	0031      	movs	r1, r6
 8010bf6:	f7ff ffa5 	bl	8010b44 <__fputwc>
 8010bfa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010bfc:	0005      	movs	r5, r0
 8010bfe:	07db      	lsls	r3, r3, #31
 8010c00:	d405      	bmi.n	8010c0e <_fputwc_r+0x4e>
 8010c02:	89a3      	ldrh	r3, [r4, #12]
 8010c04:	059b      	lsls	r3, r3, #22
 8010c06:	d402      	bmi.n	8010c0e <_fputwc_r+0x4e>
 8010c08:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010c0a:	f7f9 fd06 	bl	800a61a <__retarget_lock_release_recursive>
 8010c0e:	0028      	movs	r0, r5
 8010c10:	bd70      	pop	{r4, r5, r6, pc}

08010c12 <memmove>:
 8010c12:	b510      	push	{r4, lr}
 8010c14:	4288      	cmp	r0, r1
 8010c16:	d902      	bls.n	8010c1e <memmove+0xc>
 8010c18:	188b      	adds	r3, r1, r2
 8010c1a:	4298      	cmp	r0, r3
 8010c1c:	d303      	bcc.n	8010c26 <memmove+0x14>
 8010c1e:	2300      	movs	r3, #0
 8010c20:	e007      	b.n	8010c32 <memmove+0x20>
 8010c22:	5c8b      	ldrb	r3, [r1, r2]
 8010c24:	5483      	strb	r3, [r0, r2]
 8010c26:	3a01      	subs	r2, #1
 8010c28:	d2fb      	bcs.n	8010c22 <memmove+0x10>
 8010c2a:	bd10      	pop	{r4, pc}
 8010c2c:	5ccc      	ldrb	r4, [r1, r3]
 8010c2e:	54c4      	strb	r4, [r0, r3]
 8010c30:	3301      	adds	r3, #1
 8010c32:	429a      	cmp	r2, r3
 8010c34:	d1fa      	bne.n	8010c2c <memmove+0x1a>
 8010c36:	e7f8      	b.n	8010c2a <memmove+0x18>

08010c38 <abort>:
 8010c38:	2006      	movs	r0, #6
 8010c3a:	b510      	push	{r4, lr}
 8010c3c:	f000 f906 	bl	8010e4c <raise>
 8010c40:	2001      	movs	r0, #1
 8010c42:	f7f2 fd1d 	bl	8003680 <_exit>
	...

08010c48 <_wcrtomb_r>:
 8010c48:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8010c4a:	001d      	movs	r5, r3
 8010c4c:	4b09      	ldr	r3, [pc, #36]	; (8010c74 <_wcrtomb_r+0x2c>)
 8010c4e:	0004      	movs	r4, r0
 8010c50:	33e0      	adds	r3, #224	; 0xe0
 8010c52:	681e      	ldr	r6, [r3, #0]
 8010c54:	002b      	movs	r3, r5
 8010c56:	2900      	cmp	r1, #0
 8010c58:	d101      	bne.n	8010c5e <_wcrtomb_r+0x16>
 8010c5a:	000a      	movs	r2, r1
 8010c5c:	a901      	add	r1, sp, #4
 8010c5e:	0020      	movs	r0, r4
 8010c60:	47b0      	blx	r6
 8010c62:	1c43      	adds	r3, r0, #1
 8010c64:	d103      	bne.n	8010c6e <_wcrtomb_r+0x26>
 8010c66:	2300      	movs	r3, #0
 8010c68:	602b      	str	r3, [r5, #0]
 8010c6a:	338a      	adds	r3, #138	; 0x8a
 8010c6c:	6023      	str	r3, [r4, #0]
 8010c6e:	b004      	add	sp, #16
 8010c70:	bd70      	pop	{r4, r5, r6, pc}
 8010c72:	46c0      	nop			; (mov r8, r8)
 8010c74:	2000042c 	.word	0x2000042c

08010c78 <__swhatbuf_r>:
 8010c78:	b570      	push	{r4, r5, r6, lr}
 8010c7a:	000e      	movs	r6, r1
 8010c7c:	001d      	movs	r5, r3
 8010c7e:	230e      	movs	r3, #14
 8010c80:	5ec9      	ldrsh	r1, [r1, r3]
 8010c82:	0014      	movs	r4, r2
 8010c84:	b096      	sub	sp, #88	; 0x58
 8010c86:	2900      	cmp	r1, #0
 8010c88:	da09      	bge.n	8010c9e <__swhatbuf_r+0x26>
 8010c8a:	89b2      	ldrh	r2, [r6, #12]
 8010c8c:	2380      	movs	r3, #128	; 0x80
 8010c8e:	0011      	movs	r1, r2
 8010c90:	4019      	ands	r1, r3
 8010c92:	421a      	tst	r2, r3
 8010c94:	d018      	beq.n	8010cc8 <__swhatbuf_r+0x50>
 8010c96:	2100      	movs	r1, #0
 8010c98:	3b40      	subs	r3, #64	; 0x40
 8010c9a:	0008      	movs	r0, r1
 8010c9c:	e010      	b.n	8010cc0 <__swhatbuf_r+0x48>
 8010c9e:	466a      	mov	r2, sp
 8010ca0:	f000 f8de 	bl	8010e60 <_fstat_r>
 8010ca4:	2800      	cmp	r0, #0
 8010ca6:	dbf0      	blt.n	8010c8a <__swhatbuf_r+0x12>
 8010ca8:	23f0      	movs	r3, #240	; 0xf0
 8010caa:	9901      	ldr	r1, [sp, #4]
 8010cac:	021b      	lsls	r3, r3, #8
 8010cae:	4019      	ands	r1, r3
 8010cb0:	4b07      	ldr	r3, [pc, #28]	; (8010cd0 <__swhatbuf_r+0x58>)
 8010cb2:	2080      	movs	r0, #128	; 0x80
 8010cb4:	18c9      	adds	r1, r1, r3
 8010cb6:	424b      	negs	r3, r1
 8010cb8:	4159      	adcs	r1, r3
 8010cba:	2380      	movs	r3, #128	; 0x80
 8010cbc:	0100      	lsls	r0, r0, #4
 8010cbe:	00db      	lsls	r3, r3, #3
 8010cc0:	6029      	str	r1, [r5, #0]
 8010cc2:	6023      	str	r3, [r4, #0]
 8010cc4:	b016      	add	sp, #88	; 0x58
 8010cc6:	bd70      	pop	{r4, r5, r6, pc}
 8010cc8:	2380      	movs	r3, #128	; 0x80
 8010cca:	00db      	lsls	r3, r3, #3
 8010ccc:	e7e5      	b.n	8010c9a <__swhatbuf_r+0x22>
 8010cce:	46c0      	nop			; (mov r8, r8)
 8010cd0:	ffffe000 	.word	0xffffe000

08010cd4 <__smakebuf_r>:
 8010cd4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010cd6:	2602      	movs	r6, #2
 8010cd8:	898b      	ldrh	r3, [r1, #12]
 8010cda:	0005      	movs	r5, r0
 8010cdc:	000c      	movs	r4, r1
 8010cde:	4233      	tst	r3, r6
 8010ce0:	d006      	beq.n	8010cf0 <__smakebuf_r+0x1c>
 8010ce2:	0023      	movs	r3, r4
 8010ce4:	3343      	adds	r3, #67	; 0x43
 8010ce6:	6023      	str	r3, [r4, #0]
 8010ce8:	6123      	str	r3, [r4, #16]
 8010cea:	2301      	movs	r3, #1
 8010cec:	6163      	str	r3, [r4, #20]
 8010cee:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8010cf0:	466a      	mov	r2, sp
 8010cf2:	ab01      	add	r3, sp, #4
 8010cf4:	f7ff ffc0 	bl	8010c78 <__swhatbuf_r>
 8010cf8:	9900      	ldr	r1, [sp, #0]
 8010cfa:	0007      	movs	r7, r0
 8010cfc:	0028      	movs	r0, r5
 8010cfe:	f7f8 f941 	bl	8008f84 <_malloc_r>
 8010d02:	2800      	cmp	r0, #0
 8010d04:	d108      	bne.n	8010d18 <__smakebuf_r+0x44>
 8010d06:	220c      	movs	r2, #12
 8010d08:	5ea3      	ldrsh	r3, [r4, r2]
 8010d0a:	059a      	lsls	r2, r3, #22
 8010d0c:	d4ef      	bmi.n	8010cee <__smakebuf_r+0x1a>
 8010d0e:	2203      	movs	r2, #3
 8010d10:	4393      	bics	r3, r2
 8010d12:	431e      	orrs	r6, r3
 8010d14:	81a6      	strh	r6, [r4, #12]
 8010d16:	e7e4      	b.n	8010ce2 <__smakebuf_r+0xe>
 8010d18:	2380      	movs	r3, #128	; 0x80
 8010d1a:	89a2      	ldrh	r2, [r4, #12]
 8010d1c:	6020      	str	r0, [r4, #0]
 8010d1e:	4313      	orrs	r3, r2
 8010d20:	81a3      	strh	r3, [r4, #12]
 8010d22:	9b00      	ldr	r3, [sp, #0]
 8010d24:	6120      	str	r0, [r4, #16]
 8010d26:	6163      	str	r3, [r4, #20]
 8010d28:	9b01      	ldr	r3, [sp, #4]
 8010d2a:	2b00      	cmp	r3, #0
 8010d2c:	d00c      	beq.n	8010d48 <__smakebuf_r+0x74>
 8010d2e:	0028      	movs	r0, r5
 8010d30:	230e      	movs	r3, #14
 8010d32:	5ee1      	ldrsh	r1, [r4, r3]
 8010d34:	f000 f8a6 	bl	8010e84 <_isatty_r>
 8010d38:	2800      	cmp	r0, #0
 8010d3a:	d005      	beq.n	8010d48 <__smakebuf_r+0x74>
 8010d3c:	2303      	movs	r3, #3
 8010d3e:	89a2      	ldrh	r2, [r4, #12]
 8010d40:	439a      	bics	r2, r3
 8010d42:	3b02      	subs	r3, #2
 8010d44:	4313      	orrs	r3, r2
 8010d46:	81a3      	strh	r3, [r4, #12]
 8010d48:	89a3      	ldrh	r3, [r4, #12]
 8010d4a:	433b      	orrs	r3, r7
 8010d4c:	81a3      	strh	r3, [r4, #12]
 8010d4e:	e7ce      	b.n	8010cee <__smakebuf_r+0x1a>

08010d50 <__swbuf_r>:
 8010d50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010d52:	0006      	movs	r6, r0
 8010d54:	000d      	movs	r5, r1
 8010d56:	0014      	movs	r4, r2
 8010d58:	2800      	cmp	r0, #0
 8010d5a:	d004      	beq.n	8010d66 <__swbuf_r+0x16>
 8010d5c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8010d5e:	2b00      	cmp	r3, #0
 8010d60:	d101      	bne.n	8010d66 <__swbuf_r+0x16>
 8010d62:	f7f9 fa83 	bl	800a26c <__sinit>
 8010d66:	69a3      	ldr	r3, [r4, #24]
 8010d68:	60a3      	str	r3, [r4, #8]
 8010d6a:	89a3      	ldrh	r3, [r4, #12]
 8010d6c:	071b      	lsls	r3, r3, #28
 8010d6e:	d52e      	bpl.n	8010dce <__swbuf_r+0x7e>
 8010d70:	6923      	ldr	r3, [r4, #16]
 8010d72:	2b00      	cmp	r3, #0
 8010d74:	d02b      	beq.n	8010dce <__swbuf_r+0x7e>
 8010d76:	230c      	movs	r3, #12
 8010d78:	5ee2      	ldrsh	r2, [r4, r3]
 8010d7a:	2380      	movs	r3, #128	; 0x80
 8010d7c:	019b      	lsls	r3, r3, #6
 8010d7e:	b2ef      	uxtb	r7, r5
 8010d80:	b2ed      	uxtb	r5, r5
 8010d82:	421a      	tst	r2, r3
 8010d84:	d02c      	beq.n	8010de0 <__swbuf_r+0x90>
 8010d86:	6923      	ldr	r3, [r4, #16]
 8010d88:	6820      	ldr	r0, [r4, #0]
 8010d8a:	1ac0      	subs	r0, r0, r3
 8010d8c:	6963      	ldr	r3, [r4, #20]
 8010d8e:	4283      	cmp	r3, r0
 8010d90:	dc05      	bgt.n	8010d9e <__swbuf_r+0x4e>
 8010d92:	0021      	movs	r1, r4
 8010d94:	0030      	movs	r0, r6
 8010d96:	f7fd fab3 	bl	800e300 <_fflush_r>
 8010d9a:	2800      	cmp	r0, #0
 8010d9c:	d11d      	bne.n	8010dda <__swbuf_r+0x8a>
 8010d9e:	68a3      	ldr	r3, [r4, #8]
 8010da0:	3001      	adds	r0, #1
 8010da2:	3b01      	subs	r3, #1
 8010da4:	60a3      	str	r3, [r4, #8]
 8010da6:	6823      	ldr	r3, [r4, #0]
 8010da8:	1c5a      	adds	r2, r3, #1
 8010daa:	6022      	str	r2, [r4, #0]
 8010dac:	701f      	strb	r7, [r3, #0]
 8010dae:	6963      	ldr	r3, [r4, #20]
 8010db0:	4283      	cmp	r3, r0
 8010db2:	d004      	beq.n	8010dbe <__swbuf_r+0x6e>
 8010db4:	89a3      	ldrh	r3, [r4, #12]
 8010db6:	07db      	lsls	r3, r3, #31
 8010db8:	d507      	bpl.n	8010dca <__swbuf_r+0x7a>
 8010dba:	2d0a      	cmp	r5, #10
 8010dbc:	d105      	bne.n	8010dca <__swbuf_r+0x7a>
 8010dbe:	0021      	movs	r1, r4
 8010dc0:	0030      	movs	r0, r6
 8010dc2:	f7fd fa9d 	bl	800e300 <_fflush_r>
 8010dc6:	2800      	cmp	r0, #0
 8010dc8:	d107      	bne.n	8010dda <__swbuf_r+0x8a>
 8010dca:	0028      	movs	r0, r5
 8010dcc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010dce:	0021      	movs	r1, r4
 8010dd0:	0030      	movs	r0, r6
 8010dd2:	f7ff fe53 	bl	8010a7c <__swsetup_r>
 8010dd6:	2800      	cmp	r0, #0
 8010dd8:	d0cd      	beq.n	8010d76 <__swbuf_r+0x26>
 8010dda:	2501      	movs	r5, #1
 8010ddc:	426d      	negs	r5, r5
 8010dde:	e7f4      	b.n	8010dca <__swbuf_r+0x7a>
 8010de0:	4313      	orrs	r3, r2
 8010de2:	81a3      	strh	r3, [r4, #12]
 8010de4:	4a02      	ldr	r2, [pc, #8]	; (8010df0 <__swbuf_r+0xa0>)
 8010de6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010de8:	4013      	ands	r3, r2
 8010dea:	6663      	str	r3, [r4, #100]	; 0x64
 8010dec:	e7cb      	b.n	8010d86 <__swbuf_r+0x36>
 8010dee:	46c0      	nop			; (mov r8, r8)
 8010df0:	ffffdfff 	.word	0xffffdfff

08010df4 <_raise_r>:
 8010df4:	b570      	push	{r4, r5, r6, lr}
 8010df6:	0004      	movs	r4, r0
 8010df8:	000d      	movs	r5, r1
 8010dfa:	291f      	cmp	r1, #31
 8010dfc:	d904      	bls.n	8010e08 <_raise_r+0x14>
 8010dfe:	2316      	movs	r3, #22
 8010e00:	6003      	str	r3, [r0, #0]
 8010e02:	2001      	movs	r0, #1
 8010e04:	4240      	negs	r0, r0
 8010e06:	bd70      	pop	{r4, r5, r6, pc}
 8010e08:	0003      	movs	r3, r0
 8010e0a:	33fc      	adds	r3, #252	; 0xfc
 8010e0c:	69db      	ldr	r3, [r3, #28]
 8010e0e:	2b00      	cmp	r3, #0
 8010e10:	d004      	beq.n	8010e1c <_raise_r+0x28>
 8010e12:	008a      	lsls	r2, r1, #2
 8010e14:	189b      	adds	r3, r3, r2
 8010e16:	681a      	ldr	r2, [r3, #0]
 8010e18:	2a00      	cmp	r2, #0
 8010e1a:	d108      	bne.n	8010e2e <_raise_r+0x3a>
 8010e1c:	0020      	movs	r0, r4
 8010e1e:	f000 f855 	bl	8010ecc <_getpid_r>
 8010e22:	002a      	movs	r2, r5
 8010e24:	0001      	movs	r1, r0
 8010e26:	0020      	movs	r0, r4
 8010e28:	f000 f83e 	bl	8010ea8 <_kill_r>
 8010e2c:	e7eb      	b.n	8010e06 <_raise_r+0x12>
 8010e2e:	2000      	movs	r0, #0
 8010e30:	2a01      	cmp	r2, #1
 8010e32:	d0e8      	beq.n	8010e06 <_raise_r+0x12>
 8010e34:	1c51      	adds	r1, r2, #1
 8010e36:	d103      	bne.n	8010e40 <_raise_r+0x4c>
 8010e38:	2316      	movs	r3, #22
 8010e3a:	3001      	adds	r0, #1
 8010e3c:	6023      	str	r3, [r4, #0]
 8010e3e:	e7e2      	b.n	8010e06 <_raise_r+0x12>
 8010e40:	2400      	movs	r4, #0
 8010e42:	0028      	movs	r0, r5
 8010e44:	601c      	str	r4, [r3, #0]
 8010e46:	4790      	blx	r2
 8010e48:	0020      	movs	r0, r4
 8010e4a:	e7dc      	b.n	8010e06 <_raise_r+0x12>

08010e4c <raise>:
 8010e4c:	b510      	push	{r4, lr}
 8010e4e:	4b03      	ldr	r3, [pc, #12]	; (8010e5c <raise+0x10>)
 8010e50:	0001      	movs	r1, r0
 8010e52:	6818      	ldr	r0, [r3, #0]
 8010e54:	f7ff ffce 	bl	8010df4 <_raise_r>
 8010e58:	bd10      	pop	{r4, pc}
 8010e5a:	46c0      	nop			; (mov r8, r8)
 8010e5c:	200006b8 	.word	0x200006b8

08010e60 <_fstat_r>:
 8010e60:	2300      	movs	r3, #0
 8010e62:	b570      	push	{r4, r5, r6, lr}
 8010e64:	4d06      	ldr	r5, [pc, #24]	; (8010e80 <_fstat_r+0x20>)
 8010e66:	0004      	movs	r4, r0
 8010e68:	0008      	movs	r0, r1
 8010e6a:	0011      	movs	r1, r2
 8010e6c:	602b      	str	r3, [r5, #0]
 8010e6e:	f7f2 fc56 	bl	800371e <_fstat>
 8010e72:	1c43      	adds	r3, r0, #1
 8010e74:	d103      	bne.n	8010e7e <_fstat_r+0x1e>
 8010e76:	682b      	ldr	r3, [r5, #0]
 8010e78:	2b00      	cmp	r3, #0
 8010e7a:	d000      	beq.n	8010e7e <_fstat_r+0x1e>
 8010e7c:	6023      	str	r3, [r4, #0]
 8010e7e:	bd70      	pop	{r4, r5, r6, pc}
 8010e80:	20000c00 	.word	0x20000c00

08010e84 <_isatty_r>:
 8010e84:	2300      	movs	r3, #0
 8010e86:	b570      	push	{r4, r5, r6, lr}
 8010e88:	4d06      	ldr	r5, [pc, #24]	; (8010ea4 <_isatty_r+0x20>)
 8010e8a:	0004      	movs	r4, r0
 8010e8c:	0008      	movs	r0, r1
 8010e8e:	602b      	str	r3, [r5, #0]
 8010e90:	f7f2 fc53 	bl	800373a <_isatty>
 8010e94:	1c43      	adds	r3, r0, #1
 8010e96:	d103      	bne.n	8010ea0 <_isatty_r+0x1c>
 8010e98:	682b      	ldr	r3, [r5, #0]
 8010e9a:	2b00      	cmp	r3, #0
 8010e9c:	d000      	beq.n	8010ea0 <_isatty_r+0x1c>
 8010e9e:	6023      	str	r3, [r4, #0]
 8010ea0:	bd70      	pop	{r4, r5, r6, pc}
 8010ea2:	46c0      	nop			; (mov r8, r8)
 8010ea4:	20000c00 	.word	0x20000c00

08010ea8 <_kill_r>:
 8010ea8:	2300      	movs	r3, #0
 8010eaa:	b570      	push	{r4, r5, r6, lr}
 8010eac:	4d06      	ldr	r5, [pc, #24]	; (8010ec8 <_kill_r+0x20>)
 8010eae:	0004      	movs	r4, r0
 8010eb0:	0008      	movs	r0, r1
 8010eb2:	0011      	movs	r1, r2
 8010eb4:	602b      	str	r3, [r5, #0]
 8010eb6:	f7f2 fbd3 	bl	8003660 <_kill>
 8010eba:	1c43      	adds	r3, r0, #1
 8010ebc:	d103      	bne.n	8010ec6 <_kill_r+0x1e>
 8010ebe:	682b      	ldr	r3, [r5, #0]
 8010ec0:	2b00      	cmp	r3, #0
 8010ec2:	d000      	beq.n	8010ec6 <_kill_r+0x1e>
 8010ec4:	6023      	str	r3, [r4, #0]
 8010ec6:	bd70      	pop	{r4, r5, r6, pc}
 8010ec8:	20000c00 	.word	0x20000c00

08010ecc <_getpid_r>:
 8010ecc:	b510      	push	{r4, lr}
 8010ece:	f7f2 fbc1 	bl	8003654 <_getpid>
 8010ed2:	bd10      	pop	{r4, pc}

08010ed4 <_init>:
 8010ed4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010ed6:	46c0      	nop			; (mov r8, r8)
 8010ed8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010eda:	bc08      	pop	{r3}
 8010edc:	469e      	mov	lr, r3
 8010ede:	4770      	bx	lr

08010ee0 <_fini>:
 8010ee0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010ee2:	46c0      	nop			; (mov r8, r8)
 8010ee4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010ee6:	bc08      	pop	{r3}
 8010ee8:	469e      	mov	lr, r3
 8010eea:	4770      	bx	lr
