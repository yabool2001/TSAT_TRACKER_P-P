
TSAT_TRACKER_P-P.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003130  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a4  080031ec  080031ec  000131ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003290  08003290  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08003290  08003290  00013290  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003298  08003298  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003298  08003298  00013298  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800329c  0800329c  0001329c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080032a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001e0  20000010  080032b0  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001f0  080032b0  000201f0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000afe9  00000000  00000000  0002007b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001a64  00000000  00000000  0002b064  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000008c8  00000000  00000000  0002cac8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000006c9  00000000  00000000  0002d390  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001afe5  00000000  00000000  0002da59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000b553  00000000  00000000  00048a3e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000afa8a  00000000  00000000  00053f91  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001e7c  00000000  00000000  00103a1c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000057  00000000  00000000  00105898  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000010 	.word	0x20000010
 80000dc:	00000000 	.word	0x00000000
 80000e0:	080031d4 	.word	0x080031d4

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000014 	.word	0x20000014
 8000100:	080031d4 	.word	0x080031d4

08000104 <strlen>:
 8000104:	2300      	movs	r3, #0
 8000106:	5cc2      	ldrb	r2, [r0, r3]
 8000108:	3301      	adds	r3, #1
 800010a:	2a00      	cmp	r2, #0
 800010c:	d1fb      	bne.n	8000106 <strlen+0x2>
 800010e:	1e58      	subs	r0, r3, #1
 8000110:	4770      	bx	lr
	...

08000114 <__udivsi3>:
 8000114:	2200      	movs	r2, #0
 8000116:	0843      	lsrs	r3, r0, #1
 8000118:	428b      	cmp	r3, r1
 800011a:	d374      	bcc.n	8000206 <__udivsi3+0xf2>
 800011c:	0903      	lsrs	r3, r0, #4
 800011e:	428b      	cmp	r3, r1
 8000120:	d35f      	bcc.n	80001e2 <__udivsi3+0xce>
 8000122:	0a03      	lsrs	r3, r0, #8
 8000124:	428b      	cmp	r3, r1
 8000126:	d344      	bcc.n	80001b2 <__udivsi3+0x9e>
 8000128:	0b03      	lsrs	r3, r0, #12
 800012a:	428b      	cmp	r3, r1
 800012c:	d328      	bcc.n	8000180 <__udivsi3+0x6c>
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d30d      	bcc.n	8000150 <__udivsi3+0x3c>
 8000134:	22ff      	movs	r2, #255	; 0xff
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	ba12      	rev	r2, r2
 800013a:	0c03      	lsrs	r3, r0, #16
 800013c:	428b      	cmp	r3, r1
 800013e:	d302      	bcc.n	8000146 <__udivsi3+0x32>
 8000140:	1212      	asrs	r2, r2, #8
 8000142:	0209      	lsls	r1, r1, #8
 8000144:	d065      	beq.n	8000212 <__udivsi3+0xfe>
 8000146:	0b03      	lsrs	r3, r0, #12
 8000148:	428b      	cmp	r3, r1
 800014a:	d319      	bcc.n	8000180 <__udivsi3+0x6c>
 800014c:	e000      	b.n	8000150 <__udivsi3+0x3c>
 800014e:	0a09      	lsrs	r1, r1, #8
 8000150:	0bc3      	lsrs	r3, r0, #15
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x46>
 8000156:	03cb      	lsls	r3, r1, #15
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b83      	lsrs	r3, r0, #14
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x52>
 8000162:	038b      	lsls	r3, r1, #14
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b43      	lsrs	r3, r0, #13
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x5e>
 800016e:	034b      	lsls	r3, r1, #13
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b03      	lsrs	r3, r0, #12
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x6a>
 800017a:	030b      	lsls	r3, r1, #12
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0ac3      	lsrs	r3, r0, #11
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x76>
 8000186:	02cb      	lsls	r3, r1, #11
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a83      	lsrs	r3, r0, #10
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x82>
 8000192:	028b      	lsls	r3, r1, #10
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a43      	lsrs	r3, r0, #9
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x8e>
 800019e:	024b      	lsls	r3, r1, #9
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a03      	lsrs	r3, r0, #8
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x9a>
 80001aa:	020b      	lsls	r3, r1, #8
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	d2cd      	bcs.n	800014e <__udivsi3+0x3a>
 80001b2:	09c3      	lsrs	r3, r0, #7
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xa8>
 80001b8:	01cb      	lsls	r3, r1, #7
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0983      	lsrs	r3, r0, #6
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xb4>
 80001c4:	018b      	lsls	r3, r1, #6
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0943      	lsrs	r3, r0, #5
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xc0>
 80001d0:	014b      	lsls	r3, r1, #5
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0903      	lsrs	r3, r0, #4
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xcc>
 80001dc:	010b      	lsls	r3, r1, #4
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	08c3      	lsrs	r3, r0, #3
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xd8>
 80001e8:	00cb      	lsls	r3, r1, #3
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0883      	lsrs	r3, r0, #2
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xe4>
 80001f4:	008b      	lsls	r3, r1, #2
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	0843      	lsrs	r3, r0, #1
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xf0>
 8000200:	004b      	lsls	r3, r1, #1
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	1a41      	subs	r1, r0, r1
 8000208:	d200      	bcs.n	800020c <__udivsi3+0xf8>
 800020a:	4601      	mov	r1, r0
 800020c:	4152      	adcs	r2, r2
 800020e:	4610      	mov	r0, r2
 8000210:	4770      	bx	lr
 8000212:	e7ff      	b.n	8000214 <__udivsi3+0x100>
 8000214:	b501      	push	{r0, lr}
 8000216:	2000      	movs	r0, #0
 8000218:	f000 f8f0 	bl	80003fc <__aeabi_idiv0>
 800021c:	bd02      	pop	{r1, pc}
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uidivmod>:
 8000220:	2900      	cmp	r1, #0
 8000222:	d0f7      	beq.n	8000214 <__udivsi3+0x100>
 8000224:	e776      	b.n	8000114 <__udivsi3>
 8000226:	4770      	bx	lr

08000228 <__divsi3>:
 8000228:	4603      	mov	r3, r0
 800022a:	430b      	orrs	r3, r1
 800022c:	d47f      	bmi.n	800032e <__divsi3+0x106>
 800022e:	2200      	movs	r2, #0
 8000230:	0843      	lsrs	r3, r0, #1
 8000232:	428b      	cmp	r3, r1
 8000234:	d374      	bcc.n	8000320 <__divsi3+0xf8>
 8000236:	0903      	lsrs	r3, r0, #4
 8000238:	428b      	cmp	r3, r1
 800023a:	d35f      	bcc.n	80002fc <__divsi3+0xd4>
 800023c:	0a03      	lsrs	r3, r0, #8
 800023e:	428b      	cmp	r3, r1
 8000240:	d344      	bcc.n	80002cc <__divsi3+0xa4>
 8000242:	0b03      	lsrs	r3, r0, #12
 8000244:	428b      	cmp	r3, r1
 8000246:	d328      	bcc.n	800029a <__divsi3+0x72>
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d30d      	bcc.n	800026a <__divsi3+0x42>
 800024e:	22ff      	movs	r2, #255	; 0xff
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	ba12      	rev	r2, r2
 8000254:	0c03      	lsrs	r3, r0, #16
 8000256:	428b      	cmp	r3, r1
 8000258:	d302      	bcc.n	8000260 <__divsi3+0x38>
 800025a:	1212      	asrs	r2, r2, #8
 800025c:	0209      	lsls	r1, r1, #8
 800025e:	d065      	beq.n	800032c <__divsi3+0x104>
 8000260:	0b03      	lsrs	r3, r0, #12
 8000262:	428b      	cmp	r3, r1
 8000264:	d319      	bcc.n	800029a <__divsi3+0x72>
 8000266:	e000      	b.n	800026a <__divsi3+0x42>
 8000268:	0a09      	lsrs	r1, r1, #8
 800026a:	0bc3      	lsrs	r3, r0, #15
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x4c>
 8000270:	03cb      	lsls	r3, r1, #15
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b83      	lsrs	r3, r0, #14
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x58>
 800027c:	038b      	lsls	r3, r1, #14
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b43      	lsrs	r3, r0, #13
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x64>
 8000288:	034b      	lsls	r3, r1, #13
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0b03      	lsrs	r3, r0, #12
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x70>
 8000294:	030b      	lsls	r3, r1, #12
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0ac3      	lsrs	r3, r0, #11
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x7c>
 80002a0:	02cb      	lsls	r3, r1, #11
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a83      	lsrs	r3, r0, #10
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x88>
 80002ac:	028b      	lsls	r3, r1, #10
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a43      	lsrs	r3, r0, #9
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x94>
 80002b8:	024b      	lsls	r3, r1, #9
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0a03      	lsrs	r3, r0, #8
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0xa0>
 80002c4:	020b      	lsls	r3, r1, #8
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	d2cd      	bcs.n	8000268 <__divsi3+0x40>
 80002cc:	09c3      	lsrs	r3, r0, #7
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xae>
 80002d2:	01cb      	lsls	r3, r1, #7
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0983      	lsrs	r3, r0, #6
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xba>
 80002de:	018b      	lsls	r3, r1, #6
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0943      	lsrs	r3, r0, #5
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xc6>
 80002ea:	014b      	lsls	r3, r1, #5
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	0903      	lsrs	r3, r0, #4
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xd2>
 80002f6:	010b      	lsls	r3, r1, #4
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	08c3      	lsrs	r3, r0, #3
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xde>
 8000302:	00cb      	lsls	r3, r1, #3
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0883      	lsrs	r3, r0, #2
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xea>
 800030e:	008b      	lsls	r3, r1, #2
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	0843      	lsrs	r3, r0, #1
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xf6>
 800031a:	004b      	lsls	r3, r1, #1
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	1a41      	subs	r1, r0, r1
 8000322:	d200      	bcs.n	8000326 <__divsi3+0xfe>
 8000324:	4601      	mov	r1, r0
 8000326:	4152      	adcs	r2, r2
 8000328:	4610      	mov	r0, r2
 800032a:	4770      	bx	lr
 800032c:	e05d      	b.n	80003ea <__divsi3+0x1c2>
 800032e:	0fca      	lsrs	r2, r1, #31
 8000330:	d000      	beq.n	8000334 <__divsi3+0x10c>
 8000332:	4249      	negs	r1, r1
 8000334:	1003      	asrs	r3, r0, #32
 8000336:	d300      	bcc.n	800033a <__divsi3+0x112>
 8000338:	4240      	negs	r0, r0
 800033a:	4053      	eors	r3, r2
 800033c:	2200      	movs	r2, #0
 800033e:	469c      	mov	ip, r3
 8000340:	0903      	lsrs	r3, r0, #4
 8000342:	428b      	cmp	r3, r1
 8000344:	d32d      	bcc.n	80003a2 <__divsi3+0x17a>
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d312      	bcc.n	8000372 <__divsi3+0x14a>
 800034c:	22fc      	movs	r2, #252	; 0xfc
 800034e:	0189      	lsls	r1, r1, #6
 8000350:	ba12      	rev	r2, r2
 8000352:	0a03      	lsrs	r3, r0, #8
 8000354:	428b      	cmp	r3, r1
 8000356:	d30c      	bcc.n	8000372 <__divsi3+0x14a>
 8000358:	0189      	lsls	r1, r1, #6
 800035a:	1192      	asrs	r2, r2, #6
 800035c:	428b      	cmp	r3, r1
 800035e:	d308      	bcc.n	8000372 <__divsi3+0x14a>
 8000360:	0189      	lsls	r1, r1, #6
 8000362:	1192      	asrs	r2, r2, #6
 8000364:	428b      	cmp	r3, r1
 8000366:	d304      	bcc.n	8000372 <__divsi3+0x14a>
 8000368:	0189      	lsls	r1, r1, #6
 800036a:	d03a      	beq.n	80003e2 <__divsi3+0x1ba>
 800036c:	1192      	asrs	r2, r2, #6
 800036e:	e000      	b.n	8000372 <__divsi3+0x14a>
 8000370:	0989      	lsrs	r1, r1, #6
 8000372:	09c3      	lsrs	r3, r0, #7
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x154>
 8000378:	01cb      	lsls	r3, r1, #7
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0983      	lsrs	r3, r0, #6
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x160>
 8000384:	018b      	lsls	r3, r1, #6
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0943      	lsrs	r3, r0, #5
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x16c>
 8000390:	014b      	lsls	r3, r1, #5
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	0903      	lsrs	r3, r0, #4
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x178>
 800039c:	010b      	lsls	r3, r1, #4
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	08c3      	lsrs	r3, r0, #3
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x184>
 80003a8:	00cb      	lsls	r3, r1, #3
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	0883      	lsrs	r3, r0, #2
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x190>
 80003b4:	008b      	lsls	r3, r1, #2
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	d2d9      	bcs.n	8000370 <__divsi3+0x148>
 80003bc:	0843      	lsrs	r3, r0, #1
 80003be:	428b      	cmp	r3, r1
 80003c0:	d301      	bcc.n	80003c6 <__divsi3+0x19e>
 80003c2:	004b      	lsls	r3, r1, #1
 80003c4:	1ac0      	subs	r0, r0, r3
 80003c6:	4152      	adcs	r2, r2
 80003c8:	1a41      	subs	r1, r0, r1
 80003ca:	d200      	bcs.n	80003ce <__divsi3+0x1a6>
 80003cc:	4601      	mov	r1, r0
 80003ce:	4663      	mov	r3, ip
 80003d0:	4152      	adcs	r2, r2
 80003d2:	105b      	asrs	r3, r3, #1
 80003d4:	4610      	mov	r0, r2
 80003d6:	d301      	bcc.n	80003dc <__divsi3+0x1b4>
 80003d8:	4240      	negs	r0, r0
 80003da:	2b00      	cmp	r3, #0
 80003dc:	d500      	bpl.n	80003e0 <__divsi3+0x1b8>
 80003de:	4249      	negs	r1, r1
 80003e0:	4770      	bx	lr
 80003e2:	4663      	mov	r3, ip
 80003e4:	105b      	asrs	r3, r3, #1
 80003e6:	d300      	bcc.n	80003ea <__divsi3+0x1c2>
 80003e8:	4240      	negs	r0, r0
 80003ea:	b501      	push	{r0, lr}
 80003ec:	2000      	movs	r0, #0
 80003ee:	f000 f805 	bl	80003fc <__aeabi_idiv0>
 80003f2:	bd02      	pop	{r1, pc}

080003f4 <__aeabi_idivmod>:
 80003f4:	2900      	cmp	r1, #0
 80003f6:	d0f8      	beq.n	80003ea <__divsi3+0x1c2>
 80003f8:	e716      	b.n	8000228 <__divsi3>
 80003fa:	4770      	bx	lr

080003fc <__aeabi_idiv0>:
 80003fc:	4770      	bx	lr
 80003fe:	46c0      	nop			; (mov r8, r8)

08000400 <__aeabi_uldivmod>:
 8000400:	2b00      	cmp	r3, #0
 8000402:	d111      	bne.n	8000428 <__aeabi_uldivmod+0x28>
 8000404:	2a00      	cmp	r2, #0
 8000406:	d10f      	bne.n	8000428 <__aeabi_uldivmod+0x28>
 8000408:	2900      	cmp	r1, #0
 800040a:	d100      	bne.n	800040e <__aeabi_uldivmod+0xe>
 800040c:	2800      	cmp	r0, #0
 800040e:	d002      	beq.n	8000416 <__aeabi_uldivmod+0x16>
 8000410:	2100      	movs	r1, #0
 8000412:	43c9      	mvns	r1, r1
 8000414:	0008      	movs	r0, r1
 8000416:	b407      	push	{r0, r1, r2}
 8000418:	4802      	ldr	r0, [pc, #8]	; (8000424 <__aeabi_uldivmod+0x24>)
 800041a:	a102      	add	r1, pc, #8	; (adr r1, 8000424 <__aeabi_uldivmod+0x24>)
 800041c:	1840      	adds	r0, r0, r1
 800041e:	9002      	str	r0, [sp, #8]
 8000420:	bd03      	pop	{r0, r1, pc}
 8000422:	46c0      	nop			; (mov r8, r8)
 8000424:	ffffffd9 	.word	0xffffffd9
 8000428:	b403      	push	{r0, r1}
 800042a:	4668      	mov	r0, sp
 800042c:	b501      	push	{r0, lr}
 800042e:	9802      	ldr	r0, [sp, #8]
 8000430:	f000 f806 	bl	8000440 <__udivmoddi4>
 8000434:	9b01      	ldr	r3, [sp, #4]
 8000436:	469e      	mov	lr, r3
 8000438:	b002      	add	sp, #8
 800043a:	bc0c      	pop	{r2, r3}
 800043c:	4770      	bx	lr
 800043e:	46c0      	nop			; (mov r8, r8)

08000440 <__udivmoddi4>:
 8000440:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000442:	4657      	mov	r7, sl
 8000444:	464e      	mov	r6, r9
 8000446:	4645      	mov	r5, r8
 8000448:	46de      	mov	lr, fp
 800044a:	b5e0      	push	{r5, r6, r7, lr}
 800044c:	0004      	movs	r4, r0
 800044e:	000d      	movs	r5, r1
 8000450:	4692      	mov	sl, r2
 8000452:	4699      	mov	r9, r3
 8000454:	b083      	sub	sp, #12
 8000456:	428b      	cmp	r3, r1
 8000458:	d830      	bhi.n	80004bc <__udivmoddi4+0x7c>
 800045a:	d02d      	beq.n	80004b8 <__udivmoddi4+0x78>
 800045c:	4649      	mov	r1, r9
 800045e:	4650      	mov	r0, sl
 8000460:	f000 f8ba 	bl	80005d8 <__clzdi2>
 8000464:	0029      	movs	r1, r5
 8000466:	0006      	movs	r6, r0
 8000468:	0020      	movs	r0, r4
 800046a:	f000 f8b5 	bl	80005d8 <__clzdi2>
 800046e:	1a33      	subs	r3, r6, r0
 8000470:	4698      	mov	r8, r3
 8000472:	3b20      	subs	r3, #32
 8000474:	d434      	bmi.n	80004e0 <__udivmoddi4+0xa0>
 8000476:	469b      	mov	fp, r3
 8000478:	4653      	mov	r3, sl
 800047a:	465a      	mov	r2, fp
 800047c:	4093      	lsls	r3, r2
 800047e:	4642      	mov	r2, r8
 8000480:	001f      	movs	r7, r3
 8000482:	4653      	mov	r3, sl
 8000484:	4093      	lsls	r3, r2
 8000486:	001e      	movs	r6, r3
 8000488:	42af      	cmp	r7, r5
 800048a:	d83b      	bhi.n	8000504 <__udivmoddi4+0xc4>
 800048c:	42af      	cmp	r7, r5
 800048e:	d100      	bne.n	8000492 <__udivmoddi4+0x52>
 8000490:	e079      	b.n	8000586 <__udivmoddi4+0x146>
 8000492:	465b      	mov	r3, fp
 8000494:	1ba4      	subs	r4, r4, r6
 8000496:	41bd      	sbcs	r5, r7
 8000498:	2b00      	cmp	r3, #0
 800049a:	da00      	bge.n	800049e <__udivmoddi4+0x5e>
 800049c:	e076      	b.n	800058c <__udivmoddi4+0x14c>
 800049e:	2200      	movs	r2, #0
 80004a0:	2300      	movs	r3, #0
 80004a2:	9200      	str	r2, [sp, #0]
 80004a4:	9301      	str	r3, [sp, #4]
 80004a6:	2301      	movs	r3, #1
 80004a8:	465a      	mov	r2, fp
 80004aa:	4093      	lsls	r3, r2
 80004ac:	9301      	str	r3, [sp, #4]
 80004ae:	2301      	movs	r3, #1
 80004b0:	4642      	mov	r2, r8
 80004b2:	4093      	lsls	r3, r2
 80004b4:	9300      	str	r3, [sp, #0]
 80004b6:	e029      	b.n	800050c <__udivmoddi4+0xcc>
 80004b8:	4282      	cmp	r2, r0
 80004ba:	d9cf      	bls.n	800045c <__udivmoddi4+0x1c>
 80004bc:	2200      	movs	r2, #0
 80004be:	2300      	movs	r3, #0
 80004c0:	9200      	str	r2, [sp, #0]
 80004c2:	9301      	str	r3, [sp, #4]
 80004c4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80004c6:	2b00      	cmp	r3, #0
 80004c8:	d001      	beq.n	80004ce <__udivmoddi4+0x8e>
 80004ca:	601c      	str	r4, [r3, #0]
 80004cc:	605d      	str	r5, [r3, #4]
 80004ce:	9800      	ldr	r0, [sp, #0]
 80004d0:	9901      	ldr	r1, [sp, #4]
 80004d2:	b003      	add	sp, #12
 80004d4:	bcf0      	pop	{r4, r5, r6, r7}
 80004d6:	46bb      	mov	fp, r7
 80004d8:	46b2      	mov	sl, r6
 80004da:	46a9      	mov	r9, r5
 80004dc:	46a0      	mov	r8, r4
 80004de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004e0:	4642      	mov	r2, r8
 80004e2:	469b      	mov	fp, r3
 80004e4:	2320      	movs	r3, #32
 80004e6:	1a9b      	subs	r3, r3, r2
 80004e8:	4652      	mov	r2, sl
 80004ea:	40da      	lsrs	r2, r3
 80004ec:	4641      	mov	r1, r8
 80004ee:	0013      	movs	r3, r2
 80004f0:	464a      	mov	r2, r9
 80004f2:	408a      	lsls	r2, r1
 80004f4:	0017      	movs	r7, r2
 80004f6:	4642      	mov	r2, r8
 80004f8:	431f      	orrs	r7, r3
 80004fa:	4653      	mov	r3, sl
 80004fc:	4093      	lsls	r3, r2
 80004fe:	001e      	movs	r6, r3
 8000500:	42af      	cmp	r7, r5
 8000502:	d9c3      	bls.n	800048c <__udivmoddi4+0x4c>
 8000504:	2200      	movs	r2, #0
 8000506:	2300      	movs	r3, #0
 8000508:	9200      	str	r2, [sp, #0]
 800050a:	9301      	str	r3, [sp, #4]
 800050c:	4643      	mov	r3, r8
 800050e:	2b00      	cmp	r3, #0
 8000510:	d0d8      	beq.n	80004c4 <__udivmoddi4+0x84>
 8000512:	07fb      	lsls	r3, r7, #31
 8000514:	0872      	lsrs	r2, r6, #1
 8000516:	431a      	orrs	r2, r3
 8000518:	4646      	mov	r6, r8
 800051a:	087b      	lsrs	r3, r7, #1
 800051c:	e00e      	b.n	800053c <__udivmoddi4+0xfc>
 800051e:	42ab      	cmp	r3, r5
 8000520:	d101      	bne.n	8000526 <__udivmoddi4+0xe6>
 8000522:	42a2      	cmp	r2, r4
 8000524:	d80c      	bhi.n	8000540 <__udivmoddi4+0x100>
 8000526:	1aa4      	subs	r4, r4, r2
 8000528:	419d      	sbcs	r5, r3
 800052a:	2001      	movs	r0, #1
 800052c:	1924      	adds	r4, r4, r4
 800052e:	416d      	adcs	r5, r5
 8000530:	2100      	movs	r1, #0
 8000532:	3e01      	subs	r6, #1
 8000534:	1824      	adds	r4, r4, r0
 8000536:	414d      	adcs	r5, r1
 8000538:	2e00      	cmp	r6, #0
 800053a:	d006      	beq.n	800054a <__udivmoddi4+0x10a>
 800053c:	42ab      	cmp	r3, r5
 800053e:	d9ee      	bls.n	800051e <__udivmoddi4+0xde>
 8000540:	3e01      	subs	r6, #1
 8000542:	1924      	adds	r4, r4, r4
 8000544:	416d      	adcs	r5, r5
 8000546:	2e00      	cmp	r6, #0
 8000548:	d1f8      	bne.n	800053c <__udivmoddi4+0xfc>
 800054a:	9800      	ldr	r0, [sp, #0]
 800054c:	9901      	ldr	r1, [sp, #4]
 800054e:	465b      	mov	r3, fp
 8000550:	1900      	adds	r0, r0, r4
 8000552:	4169      	adcs	r1, r5
 8000554:	2b00      	cmp	r3, #0
 8000556:	db24      	blt.n	80005a2 <__udivmoddi4+0x162>
 8000558:	002b      	movs	r3, r5
 800055a:	465a      	mov	r2, fp
 800055c:	4644      	mov	r4, r8
 800055e:	40d3      	lsrs	r3, r2
 8000560:	002a      	movs	r2, r5
 8000562:	40e2      	lsrs	r2, r4
 8000564:	001c      	movs	r4, r3
 8000566:	465b      	mov	r3, fp
 8000568:	0015      	movs	r5, r2
 800056a:	2b00      	cmp	r3, #0
 800056c:	db2a      	blt.n	80005c4 <__udivmoddi4+0x184>
 800056e:	0026      	movs	r6, r4
 8000570:	409e      	lsls	r6, r3
 8000572:	0033      	movs	r3, r6
 8000574:	0026      	movs	r6, r4
 8000576:	4647      	mov	r7, r8
 8000578:	40be      	lsls	r6, r7
 800057a:	0032      	movs	r2, r6
 800057c:	1a80      	subs	r0, r0, r2
 800057e:	4199      	sbcs	r1, r3
 8000580:	9000      	str	r0, [sp, #0]
 8000582:	9101      	str	r1, [sp, #4]
 8000584:	e79e      	b.n	80004c4 <__udivmoddi4+0x84>
 8000586:	42a3      	cmp	r3, r4
 8000588:	d8bc      	bhi.n	8000504 <__udivmoddi4+0xc4>
 800058a:	e782      	b.n	8000492 <__udivmoddi4+0x52>
 800058c:	4642      	mov	r2, r8
 800058e:	2320      	movs	r3, #32
 8000590:	2100      	movs	r1, #0
 8000592:	1a9b      	subs	r3, r3, r2
 8000594:	2200      	movs	r2, #0
 8000596:	9100      	str	r1, [sp, #0]
 8000598:	9201      	str	r2, [sp, #4]
 800059a:	2201      	movs	r2, #1
 800059c:	40da      	lsrs	r2, r3
 800059e:	9201      	str	r2, [sp, #4]
 80005a0:	e785      	b.n	80004ae <__udivmoddi4+0x6e>
 80005a2:	4642      	mov	r2, r8
 80005a4:	2320      	movs	r3, #32
 80005a6:	1a9b      	subs	r3, r3, r2
 80005a8:	002a      	movs	r2, r5
 80005aa:	4646      	mov	r6, r8
 80005ac:	409a      	lsls	r2, r3
 80005ae:	0023      	movs	r3, r4
 80005b0:	40f3      	lsrs	r3, r6
 80005b2:	4644      	mov	r4, r8
 80005b4:	4313      	orrs	r3, r2
 80005b6:	002a      	movs	r2, r5
 80005b8:	40e2      	lsrs	r2, r4
 80005ba:	001c      	movs	r4, r3
 80005bc:	465b      	mov	r3, fp
 80005be:	0015      	movs	r5, r2
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	dad4      	bge.n	800056e <__udivmoddi4+0x12e>
 80005c4:	4642      	mov	r2, r8
 80005c6:	002f      	movs	r7, r5
 80005c8:	2320      	movs	r3, #32
 80005ca:	0026      	movs	r6, r4
 80005cc:	4097      	lsls	r7, r2
 80005ce:	1a9b      	subs	r3, r3, r2
 80005d0:	40de      	lsrs	r6, r3
 80005d2:	003b      	movs	r3, r7
 80005d4:	4333      	orrs	r3, r6
 80005d6:	e7cd      	b.n	8000574 <__udivmoddi4+0x134>

080005d8 <__clzdi2>:
 80005d8:	b510      	push	{r4, lr}
 80005da:	2900      	cmp	r1, #0
 80005dc:	d103      	bne.n	80005e6 <__clzdi2+0xe>
 80005de:	f000 f807 	bl	80005f0 <__clzsi2>
 80005e2:	3020      	adds	r0, #32
 80005e4:	e002      	b.n	80005ec <__clzdi2+0x14>
 80005e6:	0008      	movs	r0, r1
 80005e8:	f000 f802 	bl	80005f0 <__clzsi2>
 80005ec:	bd10      	pop	{r4, pc}
 80005ee:	46c0      	nop			; (mov r8, r8)

080005f0 <__clzsi2>:
 80005f0:	211c      	movs	r1, #28
 80005f2:	2301      	movs	r3, #1
 80005f4:	041b      	lsls	r3, r3, #16
 80005f6:	4298      	cmp	r0, r3
 80005f8:	d301      	bcc.n	80005fe <__clzsi2+0xe>
 80005fa:	0c00      	lsrs	r0, r0, #16
 80005fc:	3910      	subs	r1, #16
 80005fe:	0a1b      	lsrs	r3, r3, #8
 8000600:	4298      	cmp	r0, r3
 8000602:	d301      	bcc.n	8000608 <__clzsi2+0x18>
 8000604:	0a00      	lsrs	r0, r0, #8
 8000606:	3908      	subs	r1, #8
 8000608:	091b      	lsrs	r3, r3, #4
 800060a:	4298      	cmp	r0, r3
 800060c:	d301      	bcc.n	8000612 <__clzsi2+0x22>
 800060e:	0900      	lsrs	r0, r0, #4
 8000610:	3904      	subs	r1, #4
 8000612:	a202      	add	r2, pc, #8	; (adr r2, 800061c <__clzsi2+0x2c>)
 8000614:	5c10      	ldrb	r0, [r2, r0]
 8000616:	1840      	adds	r0, r0, r1
 8000618:	4770      	bx	lr
 800061a:	46c0      	nop			; (mov r8, r8)
 800061c:	02020304 	.word	0x02020304
 8000620:	01010101 	.word	0x01010101
	...

0800062c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800062c:	b5b0      	push	{r4, r5, r7, lr}
 800062e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000630:	f000 fb40 	bl	8000cb4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000634:	f000 f830 	bl	8000698 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000638:	f000 f946 	bl	80008c8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800063c:	f000 f874 	bl	8000728 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000640:	f000 f8c0 	bl	80007c4 <MX_USART3_UART_Init>
  MX_USART5_UART_Init();
 8000644:	f000 f90c 	bl	8000860 <MX_USART5_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Transmit ( HUART_DBG , (uint8_t*) hello , strlen ( hello ) , UART_TIMEOUT ) ;
 8000648:	4b0f      	ldr	r3, [pc, #60]	; (8000688 <main+0x5c>)
 800064a:	681c      	ldr	r4, [r3, #0]
 800064c:	4b0e      	ldr	r3, [pc, #56]	; (8000688 <main+0x5c>)
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	0018      	movs	r0, r3
 8000652:	f7ff fd57 	bl	8000104 <strlen>
 8000656:	0003      	movs	r3, r0
 8000658:	b29a      	uxth	r2, r3
 800065a:	23fa      	movs	r3, #250	; 0xfa
 800065c:	009b      	lsls	r3, r3, #2
 800065e:	480b      	ldr	r0, [pc, #44]	; (800068c <main+0x60>)
 8000660:	0021      	movs	r1, r4
 8000662:	f001 fdd3 	bl	800220c <HAL_UART_Transmit>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  my_gnss_on () ;
 8000666:	f000 f9bb 	bl	80009e0 <my_gnss_on>
  while (1)
  {
	  HAL_UART_Receive	( HUART_GNSS, &c , 1 , UART_TIMEOUT ) ;
 800066a:	23fa      	movs	r3, #250	; 0xfa
 800066c:	009b      	lsls	r3, r3, #2
 800066e:	4908      	ldr	r1, [pc, #32]	; (8000690 <main+0x64>)
 8000670:	4808      	ldr	r0, [pc, #32]	; (8000694 <main+0x68>)
 8000672:	2201      	movs	r2, #1
 8000674:	f001 fe66 	bl	8002344 <HAL_UART_Receive>
	  HAL_UART_Transmit ( HUART_DBG, &c , 1 , UART_TIMEOUT ) ;
 8000678:	23fa      	movs	r3, #250	; 0xfa
 800067a:	009b      	lsls	r3, r3, #2
 800067c:	4904      	ldr	r1, [pc, #16]	; (8000690 <main+0x64>)
 800067e:	4803      	ldr	r0, [pc, #12]	; (800068c <main+0x60>)
 8000680:	2201      	movs	r2, #1
 8000682:	f001 fdc3 	bl	800220c <HAL_UART_Transmit>
	  HAL_UART_Receive	( HUART_GNSS, &c , 1 , UART_TIMEOUT ) ;
 8000686:	e7f0      	b.n	800066a <main+0x3e>
 8000688:	20000000 	.word	0x20000000
 800068c:	2000002c 	.word	0x2000002c
 8000690:	200001e8 	.word	0x200001e8
 8000694:	20000154 	.word	0x20000154

08000698 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000698:	b590      	push	{r4, r7, lr}
 800069a:	b095      	sub	sp, #84	; 0x54
 800069c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800069e:	2414      	movs	r4, #20
 80006a0:	193b      	adds	r3, r7, r4
 80006a2:	0018      	movs	r0, r3
 80006a4:	233c      	movs	r3, #60	; 0x3c
 80006a6:	001a      	movs	r2, r3
 80006a8:	2100      	movs	r1, #0
 80006aa:	f002 fd67 	bl	800317c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006ae:	1d3b      	adds	r3, r7, #4
 80006b0:	0018      	movs	r0, r3
 80006b2:	2310      	movs	r3, #16
 80006b4:	001a      	movs	r2, r3
 80006b6:	2100      	movs	r1, #0
 80006b8:	f002 fd60 	bl	800317c <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006bc:	2380      	movs	r3, #128	; 0x80
 80006be:	009b      	lsls	r3, r3, #2
 80006c0:	0018      	movs	r0, r3
 80006c2:	f000 fdbb 	bl	800123c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006c6:	193b      	adds	r3, r7, r4
 80006c8:	2202      	movs	r2, #2
 80006ca:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006cc:	193b      	adds	r3, r7, r4
 80006ce:	2280      	movs	r2, #128	; 0x80
 80006d0:	0052      	lsls	r2, r2, #1
 80006d2:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80006d4:	193b      	adds	r3, r7, r4
 80006d6:	2200      	movs	r2, #0
 80006d8:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006da:	193b      	adds	r3, r7, r4
 80006dc:	2240      	movs	r2, #64	; 0x40
 80006de:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80006e0:	193b      	adds	r3, r7, r4
 80006e2:	2200      	movs	r2, #0
 80006e4:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006e6:	193b      	adds	r3, r7, r4
 80006e8:	0018      	movs	r0, r3
 80006ea:	f000 fdf3 	bl	80012d4 <HAL_RCC_OscConfig>
 80006ee:	1e03      	subs	r3, r0, #0
 80006f0:	d001      	beq.n	80006f6 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80006f2:	f000 f98d 	bl	8000a10 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006f6:	1d3b      	adds	r3, r7, #4
 80006f8:	2207      	movs	r2, #7
 80006fa:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80006fc:	1d3b      	adds	r3, r7, #4
 80006fe:	2200      	movs	r2, #0
 8000700:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000702:	1d3b      	adds	r3, r7, #4
 8000704:	2200      	movs	r2, #0
 8000706:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000708:	1d3b      	adds	r3, r7, #4
 800070a:	2200      	movs	r2, #0
 800070c:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800070e:	1d3b      	adds	r3, r7, #4
 8000710:	2100      	movs	r1, #0
 8000712:	0018      	movs	r0, r3
 8000714:	f001 f93e 	bl	8001994 <HAL_RCC_ClockConfig>
 8000718:	1e03      	subs	r3, r0, #0
 800071a:	d001      	beq.n	8000720 <SystemClock_Config+0x88>
  {
    Error_Handler();
 800071c:	f000 f978 	bl	8000a10 <Error_Handler>
  }
}
 8000720:	46c0      	nop			; (mov r8, r8)
 8000722:	46bd      	mov	sp, r7
 8000724:	b015      	add	sp, #84	; 0x54
 8000726:	bd90      	pop	{r4, r7, pc}

08000728 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800072c:	4b23      	ldr	r3, [pc, #140]	; (80007bc <MX_USART2_UART_Init+0x94>)
 800072e:	4a24      	ldr	r2, [pc, #144]	; (80007c0 <MX_USART2_UART_Init+0x98>)
 8000730:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000732:	4b22      	ldr	r3, [pc, #136]	; (80007bc <MX_USART2_UART_Init+0x94>)
 8000734:	22e1      	movs	r2, #225	; 0xe1
 8000736:	0252      	lsls	r2, r2, #9
 8000738:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800073a:	4b20      	ldr	r3, [pc, #128]	; (80007bc <MX_USART2_UART_Init+0x94>)
 800073c:	2200      	movs	r2, #0
 800073e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000740:	4b1e      	ldr	r3, [pc, #120]	; (80007bc <MX_USART2_UART_Init+0x94>)
 8000742:	2200      	movs	r2, #0
 8000744:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000746:	4b1d      	ldr	r3, [pc, #116]	; (80007bc <MX_USART2_UART_Init+0x94>)
 8000748:	2200      	movs	r2, #0
 800074a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800074c:	4b1b      	ldr	r3, [pc, #108]	; (80007bc <MX_USART2_UART_Init+0x94>)
 800074e:	220c      	movs	r2, #12
 8000750:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000752:	4b1a      	ldr	r3, [pc, #104]	; (80007bc <MX_USART2_UART_Init+0x94>)
 8000754:	2200      	movs	r2, #0
 8000756:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000758:	4b18      	ldr	r3, [pc, #96]	; (80007bc <MX_USART2_UART_Init+0x94>)
 800075a:	2200      	movs	r2, #0
 800075c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800075e:	4b17      	ldr	r3, [pc, #92]	; (80007bc <MX_USART2_UART_Init+0x94>)
 8000760:	2200      	movs	r2, #0
 8000762:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000764:	4b15      	ldr	r3, [pc, #84]	; (80007bc <MX_USART2_UART_Init+0x94>)
 8000766:	2200      	movs	r2, #0
 8000768:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800076a:	4b14      	ldr	r3, [pc, #80]	; (80007bc <MX_USART2_UART_Init+0x94>)
 800076c:	2200      	movs	r2, #0
 800076e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000770:	4b12      	ldr	r3, [pc, #72]	; (80007bc <MX_USART2_UART_Init+0x94>)
 8000772:	0018      	movs	r0, r3
 8000774:	f001 fcf4 	bl	8002160 <HAL_UART_Init>
 8000778:	1e03      	subs	r3, r0, #0
 800077a:	d001      	beq.n	8000780 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 800077c:	f000 f948 	bl	8000a10 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000780:	4b0e      	ldr	r3, [pc, #56]	; (80007bc <MX_USART2_UART_Init+0x94>)
 8000782:	2100      	movs	r1, #0
 8000784:	0018      	movs	r0, r3
 8000786:	f002 fc19 	bl	8002fbc <HAL_UARTEx_SetTxFifoThreshold>
 800078a:	1e03      	subs	r3, r0, #0
 800078c:	d001      	beq.n	8000792 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800078e:	f000 f93f 	bl	8000a10 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000792:	4b0a      	ldr	r3, [pc, #40]	; (80007bc <MX_USART2_UART_Init+0x94>)
 8000794:	2100      	movs	r1, #0
 8000796:	0018      	movs	r0, r3
 8000798:	f002 fc50 	bl	800303c <HAL_UARTEx_SetRxFifoThreshold>
 800079c:	1e03      	subs	r3, r0, #0
 800079e:	d001      	beq.n	80007a4 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80007a0:	f000 f936 	bl	8000a10 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80007a4:	4b05      	ldr	r3, [pc, #20]	; (80007bc <MX_USART2_UART_Init+0x94>)
 80007a6:	0018      	movs	r0, r3
 80007a8:	f002 fbce 	bl	8002f48 <HAL_UARTEx_DisableFifoMode>
 80007ac:	1e03      	subs	r3, r0, #0
 80007ae:	d001      	beq.n	80007b4 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80007b0:	f000 f92e 	bl	8000a10 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007b4:	46c0      	nop			; (mov r8, r8)
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bd80      	pop	{r7, pc}
 80007ba:	46c0      	nop			; (mov r8, r8)
 80007bc:	2000002c 	.word	0x2000002c
 80007c0:	40004400 	.word	0x40004400

080007c4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80007c8:	4b23      	ldr	r3, [pc, #140]	; (8000858 <MX_USART3_UART_Init+0x94>)
 80007ca:	4a24      	ldr	r2, [pc, #144]	; (800085c <MX_USART3_UART_Init+0x98>)
 80007cc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 80007ce:	4b22      	ldr	r3, [pc, #136]	; (8000858 <MX_USART3_UART_Init+0x94>)
 80007d0:	2296      	movs	r2, #150	; 0x96
 80007d2:	0192      	lsls	r2, r2, #6
 80007d4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80007d6:	4b20      	ldr	r3, [pc, #128]	; (8000858 <MX_USART3_UART_Init+0x94>)
 80007d8:	2200      	movs	r2, #0
 80007da:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80007dc:	4b1e      	ldr	r3, [pc, #120]	; (8000858 <MX_USART3_UART_Init+0x94>)
 80007de:	2200      	movs	r2, #0
 80007e0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80007e2:	4b1d      	ldr	r3, [pc, #116]	; (8000858 <MX_USART3_UART_Init+0x94>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80007e8:	4b1b      	ldr	r3, [pc, #108]	; (8000858 <MX_USART3_UART_Init+0x94>)
 80007ea:	220c      	movs	r2, #12
 80007ec:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007ee:	4b1a      	ldr	r3, [pc, #104]	; (8000858 <MX_USART3_UART_Init+0x94>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80007f4:	4b18      	ldr	r3, [pc, #96]	; (8000858 <MX_USART3_UART_Init+0x94>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007fa:	4b17      	ldr	r3, [pc, #92]	; (8000858 <MX_USART3_UART_Init+0x94>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000800:	4b15      	ldr	r3, [pc, #84]	; (8000858 <MX_USART3_UART_Init+0x94>)
 8000802:	2200      	movs	r2, #0
 8000804:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000806:	4b14      	ldr	r3, [pc, #80]	; (8000858 <MX_USART3_UART_Init+0x94>)
 8000808:	2200      	movs	r2, #0
 800080a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800080c:	4b12      	ldr	r3, [pc, #72]	; (8000858 <MX_USART3_UART_Init+0x94>)
 800080e:	0018      	movs	r0, r3
 8000810:	f001 fca6 	bl	8002160 <HAL_UART_Init>
 8000814:	1e03      	subs	r3, r0, #0
 8000816:	d001      	beq.n	800081c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000818:	f000 f8fa 	bl	8000a10 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800081c:	4b0e      	ldr	r3, [pc, #56]	; (8000858 <MX_USART3_UART_Init+0x94>)
 800081e:	2100      	movs	r1, #0
 8000820:	0018      	movs	r0, r3
 8000822:	f002 fbcb 	bl	8002fbc <HAL_UARTEx_SetTxFifoThreshold>
 8000826:	1e03      	subs	r3, r0, #0
 8000828:	d001      	beq.n	800082e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800082a:	f000 f8f1 	bl	8000a10 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800082e:	4b0a      	ldr	r3, [pc, #40]	; (8000858 <MX_USART3_UART_Init+0x94>)
 8000830:	2100      	movs	r1, #0
 8000832:	0018      	movs	r0, r3
 8000834:	f002 fc02 	bl	800303c <HAL_UARTEx_SetRxFifoThreshold>
 8000838:	1e03      	subs	r3, r0, #0
 800083a:	d001      	beq.n	8000840 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 800083c:	f000 f8e8 	bl	8000a10 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000840:	4b05      	ldr	r3, [pc, #20]	; (8000858 <MX_USART3_UART_Init+0x94>)
 8000842:	0018      	movs	r0, r3
 8000844:	f002 fb80 	bl	8002f48 <HAL_UARTEx_DisableFifoMode>
 8000848:	1e03      	subs	r3, r0, #0
 800084a:	d001      	beq.n	8000850 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 800084c:	f000 f8e0 	bl	8000a10 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000850:	46c0      	nop			; (mov r8, r8)
 8000852:	46bd      	mov	sp, r7
 8000854:	bd80      	pop	{r7, pc}
 8000856:	46c0      	nop			; (mov r8, r8)
 8000858:	200000c0 	.word	0x200000c0
 800085c:	40004800 	.word	0x40004800

08000860 <MX_USART5_UART_Init>:
  * @brief USART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART5_UART_Init(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	af00      	add	r7, sp, #0
  /* USER CODE END USART5_Init 0 */

  /* USER CODE BEGIN USART5_Init 1 */

  /* USER CODE END USART5_Init 1 */
  huart5.Instance = USART5;
 8000864:	4b16      	ldr	r3, [pc, #88]	; (80008c0 <MX_USART5_UART_Init+0x60>)
 8000866:	4a17      	ldr	r2, [pc, #92]	; (80008c4 <MX_USART5_UART_Init+0x64>)
 8000868:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 9600;
 800086a:	4b15      	ldr	r3, [pc, #84]	; (80008c0 <MX_USART5_UART_Init+0x60>)
 800086c:	2296      	movs	r2, #150	; 0x96
 800086e:	0192      	lsls	r2, r2, #6
 8000870:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8000872:	4b13      	ldr	r3, [pc, #76]	; (80008c0 <MX_USART5_UART_Init+0x60>)
 8000874:	2200      	movs	r2, #0
 8000876:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8000878:	4b11      	ldr	r3, [pc, #68]	; (80008c0 <MX_USART5_UART_Init+0x60>)
 800087a:	2200      	movs	r2, #0
 800087c:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 800087e:	4b10      	ldr	r3, [pc, #64]	; (80008c0 <MX_USART5_UART_Init+0x60>)
 8000880:	2200      	movs	r2, #0
 8000882:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8000884:	4b0e      	ldr	r3, [pc, #56]	; (80008c0 <MX_USART5_UART_Init+0x60>)
 8000886:	220c      	movs	r2, #12
 8000888:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800088a:	4b0d      	ldr	r3, [pc, #52]	; (80008c0 <MX_USART5_UART_Init+0x60>)
 800088c:	2200      	movs	r2, #0
 800088e:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8000890:	4b0b      	ldr	r3, [pc, #44]	; (80008c0 <MX_USART5_UART_Init+0x60>)
 8000892:	2200      	movs	r2, #0
 8000894:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000896:	4b0a      	ldr	r3, [pc, #40]	; (80008c0 <MX_USART5_UART_Init+0x60>)
 8000898:	2200      	movs	r2, #0
 800089a:	621a      	str	r2, [r3, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800089c:	4b08      	ldr	r3, [pc, #32]	; (80008c0 <MX_USART5_UART_Init+0x60>)
 800089e:	2200      	movs	r2, #0
 80008a0:	625a      	str	r2, [r3, #36]	; 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008a2:	4b07      	ldr	r3, [pc, #28]	; (80008c0 <MX_USART5_UART_Init+0x60>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart5) != HAL_OK)
 80008a8:	4b05      	ldr	r3, [pc, #20]	; (80008c0 <MX_USART5_UART_Init+0x60>)
 80008aa:	0018      	movs	r0, r3
 80008ac:	f001 fc58 	bl	8002160 <HAL_UART_Init>
 80008b0:	1e03      	subs	r3, r0, #0
 80008b2:	d001      	beq.n	80008b8 <MX_USART5_UART_Init+0x58>
  {
    Error_Handler();
 80008b4:	f000 f8ac 	bl	8000a10 <Error_Handler>
  }
  /* USER CODE BEGIN USART5_Init 2 */

  /* USER CODE END USART5_Init 2 */

}
 80008b8:	46c0      	nop			; (mov r8, r8)
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bd80      	pop	{r7, pc}
 80008be:	46c0      	nop			; (mov r8, r8)
 80008c0:	20000154 	.word	0x20000154
 80008c4:	40005000 	.word	0x40005000

080008c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008c8:	b590      	push	{r4, r7, lr}
 80008ca:	b08b      	sub	sp, #44	; 0x2c
 80008cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ce:	2414      	movs	r4, #20
 80008d0:	193b      	adds	r3, r7, r4
 80008d2:	0018      	movs	r0, r3
 80008d4:	2314      	movs	r3, #20
 80008d6:	001a      	movs	r2, r3
 80008d8:	2100      	movs	r1, #0
 80008da:	f002 fc4f 	bl	800317c <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008de:	4b3e      	ldr	r3, [pc, #248]	; (80009d8 <MX_GPIO_Init+0x110>)
 80008e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80008e2:	4b3d      	ldr	r3, [pc, #244]	; (80009d8 <MX_GPIO_Init+0x110>)
 80008e4:	2104      	movs	r1, #4
 80008e6:	430a      	orrs	r2, r1
 80008e8:	635a      	str	r2, [r3, #52]	; 0x34
 80008ea:	4b3b      	ldr	r3, [pc, #236]	; (80009d8 <MX_GPIO_Init+0x110>)
 80008ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80008ee:	2204      	movs	r2, #4
 80008f0:	4013      	ands	r3, r2
 80008f2:	613b      	str	r3, [r7, #16]
 80008f4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80008f6:	4b38      	ldr	r3, [pc, #224]	; (80009d8 <MX_GPIO_Init+0x110>)
 80008f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80008fa:	4b37      	ldr	r3, [pc, #220]	; (80009d8 <MX_GPIO_Init+0x110>)
 80008fc:	2120      	movs	r1, #32
 80008fe:	430a      	orrs	r2, r1
 8000900:	635a      	str	r2, [r3, #52]	; 0x34
 8000902:	4b35      	ldr	r3, [pc, #212]	; (80009d8 <MX_GPIO_Init+0x110>)
 8000904:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000906:	2220      	movs	r2, #32
 8000908:	4013      	ands	r3, r2
 800090a:	60fb      	str	r3, [r7, #12]
 800090c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800090e:	4b32      	ldr	r3, [pc, #200]	; (80009d8 <MX_GPIO_Init+0x110>)
 8000910:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000912:	4b31      	ldr	r3, [pc, #196]	; (80009d8 <MX_GPIO_Init+0x110>)
 8000914:	2101      	movs	r1, #1
 8000916:	430a      	orrs	r2, r1
 8000918:	635a      	str	r2, [r3, #52]	; 0x34
 800091a:	4b2f      	ldr	r3, [pc, #188]	; (80009d8 <MX_GPIO_Init+0x110>)
 800091c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800091e:	2201      	movs	r2, #1
 8000920:	4013      	ands	r3, r2
 8000922:	60bb      	str	r3, [r7, #8]
 8000924:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000926:	4b2c      	ldr	r3, [pc, #176]	; (80009d8 <MX_GPIO_Init+0x110>)
 8000928:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800092a:	4b2b      	ldr	r3, [pc, #172]	; (80009d8 <MX_GPIO_Init+0x110>)
 800092c:	2102      	movs	r1, #2
 800092e:	430a      	orrs	r2, r1
 8000930:	635a      	str	r2, [r3, #52]	; 0x34
 8000932:	4b29      	ldr	r3, [pc, #164]	; (80009d8 <MX_GPIO_Init+0x110>)
 8000934:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000936:	2202      	movs	r2, #2
 8000938:	4013      	ands	r3, r2
 800093a:	607b      	str	r3, [r7, #4]
 800093c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ACC_CS_Pin|LDG_Pin, GPIO_PIN_RESET);
 800093e:	23a0      	movs	r3, #160	; 0xa0
 8000940:	05db      	lsls	r3, r3, #23
 8000942:	2200      	movs	r2, #0
 8000944:	2130      	movs	r1, #48	; 0x30
 8000946:	0018      	movs	r0, r3
 8000948:	f000 fc5a 	bl	8001200 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GNSS_RST_Pin|GNSS_PWR_SW_Pin, GPIO_PIN_RESET);
 800094c:	23a0      	movs	r3, #160	; 0xa0
 800094e:	021b      	lsls	r3, r3, #8
 8000950:	4822      	ldr	r0, [pc, #136]	; (80009dc <MX_GPIO_Init+0x114>)
 8000952:	2200      	movs	r2, #0
 8000954:	0019      	movs	r1, r3
 8000956:	f000 fc53 	bl	8001200 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : ACC_CS_Pin */
  GPIO_InitStruct.Pin = ACC_CS_Pin;
 800095a:	193b      	adds	r3, r7, r4
 800095c:	2210      	movs	r2, #16
 800095e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000960:	193b      	adds	r3, r7, r4
 8000962:	2201      	movs	r2, #1
 8000964:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000966:	193b      	adds	r3, r7, r4
 8000968:	2200      	movs	r2, #0
 800096a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800096c:	193b      	adds	r3, r7, r4
 800096e:	2200      	movs	r2, #0
 8000970:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(ACC_CS_GPIO_Port, &GPIO_InitStruct);
 8000972:	193a      	adds	r2, r7, r4
 8000974:	23a0      	movs	r3, #160	; 0xa0
 8000976:	05db      	lsls	r3, r3, #23
 8000978:	0011      	movs	r1, r2
 800097a:	0018      	movs	r0, r3
 800097c:	f000 fad4 	bl	8000f28 <HAL_GPIO_Init>

  /*Configure GPIO pin : LDG_Pin */
  GPIO_InitStruct.Pin = LDG_Pin;
 8000980:	193b      	adds	r3, r7, r4
 8000982:	2220      	movs	r2, #32
 8000984:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000986:	193b      	adds	r3, r7, r4
 8000988:	2201      	movs	r2, #1
 800098a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098c:	193b      	adds	r3, r7, r4
 800098e:	2200      	movs	r2, #0
 8000990:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000992:	193b      	adds	r3, r7, r4
 8000994:	2202      	movs	r2, #2
 8000996:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LDG_GPIO_Port, &GPIO_InitStruct);
 8000998:	193a      	adds	r2, r7, r4
 800099a:	23a0      	movs	r3, #160	; 0xa0
 800099c:	05db      	lsls	r3, r3, #23
 800099e:	0011      	movs	r1, r2
 80009a0:	0018      	movs	r0, r3
 80009a2:	f000 fac1 	bl	8000f28 <HAL_GPIO_Init>

  /*Configure GPIO pins : GNSS_RST_Pin GNSS_PWR_SW_Pin */
  GPIO_InitStruct.Pin = GNSS_RST_Pin|GNSS_PWR_SW_Pin;
 80009a6:	0021      	movs	r1, r4
 80009a8:	187b      	adds	r3, r7, r1
 80009aa:	22a0      	movs	r2, #160	; 0xa0
 80009ac:	0212      	lsls	r2, r2, #8
 80009ae:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009b0:	187b      	adds	r3, r7, r1
 80009b2:	2201      	movs	r2, #1
 80009b4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b6:	187b      	adds	r3, r7, r1
 80009b8:	2200      	movs	r2, #0
 80009ba:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009bc:	187b      	adds	r3, r7, r1
 80009be:	2200      	movs	r2, #0
 80009c0:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009c2:	187b      	adds	r3, r7, r1
 80009c4:	4a05      	ldr	r2, [pc, #20]	; (80009dc <MX_GPIO_Init+0x114>)
 80009c6:	0019      	movs	r1, r3
 80009c8:	0010      	movs	r0, r2
 80009ca:	f000 faad 	bl	8000f28 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80009ce:	46c0      	nop			; (mov r8, r8)
 80009d0:	46bd      	mov	sp, r7
 80009d2:	b00b      	add	sp, #44	; 0x2c
 80009d4:	bd90      	pop	{r4, r7, pc}
 80009d6:	46c0      	nop			; (mov r8, r8)
 80009d8:	40021000 	.word	0x40021000
 80009dc:	50000400 	.word	0x50000400

080009e0 <my_gnss_on>:

/* USER CODE BEGIN 4 */
void my_gnss_on ( void )
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin ( GPIOB , GNSS_PWR_SW_Pin , GPIO_PIN_SET ) ;
 80009e4:	2380      	movs	r3, #128	; 0x80
 80009e6:	021b      	lsls	r3, r3, #8
 80009e8:	4808      	ldr	r0, [pc, #32]	; (8000a0c <my_gnss_on+0x2c>)
 80009ea:	2201      	movs	r2, #1
 80009ec:	0019      	movs	r1, r3
 80009ee:	f000 fc07 	bl	8001200 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin ( GPIOB , GNSS_RST_Pin , GPIO_PIN_SET ) ;
 80009f2:	2380      	movs	r3, #128	; 0x80
 80009f4:	019b      	lsls	r3, r3, #6
 80009f6:	4805      	ldr	r0, [pc, #20]	; (8000a0c <my_gnss_on+0x2c>)
 80009f8:	2201      	movs	r2, #1
 80009fa:	0019      	movs	r1, r3
 80009fc:	f000 fc00 	bl	8001200 <HAL_GPIO_WritePin>
	MX_USART3_UART_Init () ;
 8000a00:	f7ff fee0 	bl	80007c4 <MX_USART3_UART_Init>
}
 8000a04:	46c0      	nop			; (mov r8, r8)
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bd80      	pop	{r7, pc}
 8000a0a:	46c0      	nop			; (mov r8, r8)
 8000a0c:	50000400 	.word	0x50000400

08000a10 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a14:	b672      	cpsid	i
}
 8000a16:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a18:	e7fe      	b.n	8000a18 <Error_Handler+0x8>
	...

08000a1c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b082      	sub	sp, #8
 8000a20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a22:	4b0f      	ldr	r3, [pc, #60]	; (8000a60 <HAL_MspInit+0x44>)
 8000a24:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000a26:	4b0e      	ldr	r3, [pc, #56]	; (8000a60 <HAL_MspInit+0x44>)
 8000a28:	2101      	movs	r1, #1
 8000a2a:	430a      	orrs	r2, r1
 8000a2c:	641a      	str	r2, [r3, #64]	; 0x40
 8000a2e:	4b0c      	ldr	r3, [pc, #48]	; (8000a60 <HAL_MspInit+0x44>)
 8000a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a32:	2201      	movs	r2, #1
 8000a34:	4013      	ands	r3, r2
 8000a36:	607b      	str	r3, [r7, #4]
 8000a38:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a3a:	4b09      	ldr	r3, [pc, #36]	; (8000a60 <HAL_MspInit+0x44>)
 8000a3c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000a3e:	4b08      	ldr	r3, [pc, #32]	; (8000a60 <HAL_MspInit+0x44>)
 8000a40:	2180      	movs	r1, #128	; 0x80
 8000a42:	0549      	lsls	r1, r1, #21
 8000a44:	430a      	orrs	r2, r1
 8000a46:	63da      	str	r2, [r3, #60]	; 0x3c
 8000a48:	4b05      	ldr	r3, [pc, #20]	; (8000a60 <HAL_MspInit+0x44>)
 8000a4a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000a4c:	2380      	movs	r3, #128	; 0x80
 8000a4e:	055b      	lsls	r3, r3, #21
 8000a50:	4013      	ands	r3, r2
 8000a52:	603b      	str	r3, [r7, #0]
 8000a54:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a56:	46c0      	nop			; (mov r8, r8)
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	b002      	add	sp, #8
 8000a5c:	bd80      	pop	{r7, pc}
 8000a5e:	46c0      	nop			; (mov r8, r8)
 8000a60:	40021000 	.word	0x40021000

08000a64 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a64:	b590      	push	{r4, r7, lr}
 8000a66:	b0a1      	sub	sp, #132	; 0x84
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a6c:	236c      	movs	r3, #108	; 0x6c
 8000a6e:	18fb      	adds	r3, r7, r3
 8000a70:	0018      	movs	r0, r3
 8000a72:	2314      	movs	r3, #20
 8000a74:	001a      	movs	r2, r3
 8000a76:	2100      	movs	r1, #0
 8000a78:	f002 fb80 	bl	800317c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a7c:	2420      	movs	r4, #32
 8000a7e:	193b      	adds	r3, r7, r4
 8000a80:	0018      	movs	r0, r3
 8000a82:	234c      	movs	r3, #76	; 0x4c
 8000a84:	001a      	movs	r2, r3
 8000a86:	2100      	movs	r1, #0
 8000a88:	f002 fb78 	bl	800317c <memset>
  if(huart->Instance==USART2)
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	4a60      	ldr	r2, [pc, #384]	; (8000c14 <HAL_UART_MspInit+0x1b0>)
 8000a92:	4293      	cmp	r3, r2
 8000a94:	d13f      	bne.n	8000b16 <HAL_UART_MspInit+0xb2>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000a96:	193b      	adds	r3, r7, r4
 8000a98:	2202      	movs	r2, #2
 8000a9a:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000a9c:	193b      	adds	r3, r7, r4
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000aa2:	193b      	adds	r3, r7, r4
 8000aa4:	0018      	movs	r0, r3
 8000aa6:	f001 f91f 	bl	8001ce8 <HAL_RCCEx_PeriphCLKConfig>
 8000aaa:	1e03      	subs	r3, r0, #0
 8000aac:	d001      	beq.n	8000ab2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000aae:	f7ff ffaf 	bl	8000a10 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ab2:	4b59      	ldr	r3, [pc, #356]	; (8000c18 <HAL_UART_MspInit+0x1b4>)
 8000ab4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000ab6:	4b58      	ldr	r3, [pc, #352]	; (8000c18 <HAL_UART_MspInit+0x1b4>)
 8000ab8:	2180      	movs	r1, #128	; 0x80
 8000aba:	0289      	lsls	r1, r1, #10
 8000abc:	430a      	orrs	r2, r1
 8000abe:	63da      	str	r2, [r3, #60]	; 0x3c
 8000ac0:	4b55      	ldr	r3, [pc, #340]	; (8000c18 <HAL_UART_MspInit+0x1b4>)
 8000ac2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000ac4:	2380      	movs	r3, #128	; 0x80
 8000ac6:	029b      	lsls	r3, r3, #10
 8000ac8:	4013      	ands	r3, r2
 8000aca:	61fb      	str	r3, [r7, #28]
 8000acc:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ace:	4b52      	ldr	r3, [pc, #328]	; (8000c18 <HAL_UART_MspInit+0x1b4>)
 8000ad0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000ad2:	4b51      	ldr	r3, [pc, #324]	; (8000c18 <HAL_UART_MspInit+0x1b4>)
 8000ad4:	2101      	movs	r1, #1
 8000ad6:	430a      	orrs	r2, r1
 8000ad8:	635a      	str	r2, [r3, #52]	; 0x34
 8000ada:	4b4f      	ldr	r3, [pc, #316]	; (8000c18 <HAL_UART_MspInit+0x1b4>)
 8000adc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ade:	2201      	movs	r2, #1
 8000ae0:	4013      	ands	r3, r2
 8000ae2:	61bb      	str	r3, [r7, #24]
 8000ae4:	69bb      	ldr	r3, [r7, #24]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = DBG_TX_Pin|DBG_RX_Pin;
 8000ae6:	216c      	movs	r1, #108	; 0x6c
 8000ae8:	187b      	adds	r3, r7, r1
 8000aea:	220c      	movs	r2, #12
 8000aec:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aee:	187b      	adds	r3, r7, r1
 8000af0:	2202      	movs	r2, #2
 8000af2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af4:	187b      	adds	r3, r7, r1
 8000af6:	2200      	movs	r2, #0
 8000af8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000afa:	187b      	adds	r3, r7, r1
 8000afc:	2200      	movs	r2, #0
 8000afe:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000b00:	187b      	adds	r3, r7, r1
 8000b02:	2201      	movs	r2, #1
 8000b04:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b06:	187a      	adds	r2, r7, r1
 8000b08:	23a0      	movs	r3, #160	; 0xa0
 8000b0a:	05db      	lsls	r3, r3, #23
 8000b0c:	0011      	movs	r1, r2
 8000b0e:	0018      	movs	r0, r3
 8000b10:	f000 fa0a 	bl	8000f28 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART5_MspInit 1 */

  /* USER CODE END USART5_MspInit 1 */
  }

}
 8000b14:	e07a      	b.n	8000c0c <HAL_UART_MspInit+0x1a8>
  else if(huart->Instance==USART3)
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	4a40      	ldr	r2, [pc, #256]	; (8000c1c <HAL_UART_MspInit+0x1b8>)
 8000b1c:	4293      	cmp	r3, r2
 8000b1e:	d140      	bne.n	8000ba2 <HAL_UART_MspInit+0x13e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000b20:	2120      	movs	r1, #32
 8000b22:	187b      	adds	r3, r7, r1
 8000b24:	2204      	movs	r2, #4
 8000b26:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000b28:	187b      	adds	r3, r7, r1
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	60da      	str	r2, [r3, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b2e:	187b      	adds	r3, r7, r1
 8000b30:	0018      	movs	r0, r3
 8000b32:	f001 f8d9 	bl	8001ce8 <HAL_RCCEx_PeriphCLKConfig>
 8000b36:	1e03      	subs	r3, r0, #0
 8000b38:	d001      	beq.n	8000b3e <HAL_UART_MspInit+0xda>
      Error_Handler();
 8000b3a:	f7ff ff69 	bl	8000a10 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000b3e:	4b36      	ldr	r3, [pc, #216]	; (8000c18 <HAL_UART_MspInit+0x1b4>)
 8000b40:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000b42:	4b35      	ldr	r3, [pc, #212]	; (8000c18 <HAL_UART_MspInit+0x1b4>)
 8000b44:	2180      	movs	r1, #128	; 0x80
 8000b46:	02c9      	lsls	r1, r1, #11
 8000b48:	430a      	orrs	r2, r1
 8000b4a:	63da      	str	r2, [r3, #60]	; 0x3c
 8000b4c:	4b32      	ldr	r3, [pc, #200]	; (8000c18 <HAL_UART_MspInit+0x1b4>)
 8000b4e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000b50:	2380      	movs	r3, #128	; 0x80
 8000b52:	02db      	lsls	r3, r3, #11
 8000b54:	4013      	ands	r3, r2
 8000b56:	617b      	str	r3, [r7, #20]
 8000b58:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b5a:	4b2f      	ldr	r3, [pc, #188]	; (8000c18 <HAL_UART_MspInit+0x1b4>)
 8000b5c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000b5e:	4b2e      	ldr	r3, [pc, #184]	; (8000c18 <HAL_UART_MspInit+0x1b4>)
 8000b60:	2102      	movs	r1, #2
 8000b62:	430a      	orrs	r2, r1
 8000b64:	635a      	str	r2, [r3, #52]	; 0x34
 8000b66:	4b2c      	ldr	r3, [pc, #176]	; (8000c18 <HAL_UART_MspInit+0x1b4>)
 8000b68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b6a:	2202      	movs	r2, #2
 8000b6c:	4013      	ands	r3, r2
 8000b6e:	613b      	str	r3, [r7, #16]
 8000b70:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ASTRO_TX_Pin|ASTRO_RX_Pin;
 8000b72:	216c      	movs	r1, #108	; 0x6c
 8000b74:	187b      	adds	r3, r7, r1
 8000b76:	22c0      	movs	r2, #192	; 0xc0
 8000b78:	0092      	lsls	r2, r2, #2
 8000b7a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b7c:	187b      	adds	r3, r7, r1
 8000b7e:	2202      	movs	r2, #2
 8000b80:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b82:	187b      	adds	r3, r7, r1
 8000b84:	2200      	movs	r2, #0
 8000b86:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b88:	187b      	adds	r3, r7, r1
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART3;
 8000b8e:	187b      	adds	r3, r7, r1
 8000b90:	2204      	movs	r2, #4
 8000b92:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b94:	187b      	adds	r3, r7, r1
 8000b96:	4a22      	ldr	r2, [pc, #136]	; (8000c20 <HAL_UART_MspInit+0x1bc>)
 8000b98:	0019      	movs	r1, r3
 8000b9a:	0010      	movs	r0, r2
 8000b9c:	f000 f9c4 	bl	8000f28 <HAL_GPIO_Init>
}
 8000ba0:	e034      	b.n	8000c0c <HAL_UART_MspInit+0x1a8>
  else if(huart->Instance==USART5)
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	4a1f      	ldr	r2, [pc, #124]	; (8000c24 <HAL_UART_MspInit+0x1c0>)
 8000ba8:	4293      	cmp	r3, r2
 8000baa:	d12f      	bne.n	8000c0c <HAL_UART_MspInit+0x1a8>
    __HAL_RCC_USART5_CLK_ENABLE();
 8000bac:	4b1a      	ldr	r3, [pc, #104]	; (8000c18 <HAL_UART_MspInit+0x1b4>)
 8000bae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000bb0:	4b19      	ldr	r3, [pc, #100]	; (8000c18 <HAL_UART_MspInit+0x1b4>)
 8000bb2:	2180      	movs	r1, #128	; 0x80
 8000bb4:	0049      	lsls	r1, r1, #1
 8000bb6:	430a      	orrs	r2, r1
 8000bb8:	63da      	str	r2, [r3, #60]	; 0x3c
 8000bba:	4b17      	ldr	r3, [pc, #92]	; (8000c18 <HAL_UART_MspInit+0x1b4>)
 8000bbc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000bbe:	2380      	movs	r3, #128	; 0x80
 8000bc0:	005b      	lsls	r3, r3, #1
 8000bc2:	4013      	ands	r3, r2
 8000bc4:	60fb      	str	r3, [r7, #12]
 8000bc6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bc8:	4b13      	ldr	r3, [pc, #76]	; (8000c18 <HAL_UART_MspInit+0x1b4>)
 8000bca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000bcc:	4b12      	ldr	r3, [pc, #72]	; (8000c18 <HAL_UART_MspInit+0x1b4>)
 8000bce:	2102      	movs	r1, #2
 8000bd0:	430a      	orrs	r2, r1
 8000bd2:	635a      	str	r2, [r3, #52]	; 0x34
 8000bd4:	4b10      	ldr	r3, [pc, #64]	; (8000c18 <HAL_UART_MspInit+0x1b4>)
 8000bd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000bd8:	2202      	movs	r2, #2
 8000bda:	4013      	ands	r3, r2
 8000bdc:	60bb      	str	r3, [r7, #8]
 8000bde:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GNSS_TX_Pin|GNSS_RX_Pin;
 8000be0:	216c      	movs	r1, #108	; 0x6c
 8000be2:	187b      	adds	r3, r7, r1
 8000be4:	2218      	movs	r2, #24
 8000be6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000be8:	187b      	adds	r3, r7, r1
 8000bea:	2202      	movs	r2, #2
 8000bec:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bee:	187b      	adds	r3, r7, r1
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bf4:	187b      	adds	r3, r7, r1
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF3_USART5;
 8000bfa:	187b      	adds	r3, r7, r1
 8000bfc:	2203      	movs	r2, #3
 8000bfe:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c00:	187b      	adds	r3, r7, r1
 8000c02:	4a07      	ldr	r2, [pc, #28]	; (8000c20 <HAL_UART_MspInit+0x1bc>)
 8000c04:	0019      	movs	r1, r3
 8000c06:	0010      	movs	r0, r2
 8000c08:	f000 f98e 	bl	8000f28 <HAL_GPIO_Init>
}
 8000c0c:	46c0      	nop			; (mov r8, r8)
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	b021      	add	sp, #132	; 0x84
 8000c12:	bd90      	pop	{r4, r7, pc}
 8000c14:	40004400 	.word	0x40004400
 8000c18:	40021000 	.word	0x40021000
 8000c1c:	40004800 	.word	0x40004800
 8000c20:	50000400 	.word	0x50000400
 8000c24:	40005000 	.word	0x40005000

08000c28 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c2c:	e7fe      	b.n	8000c2c <NMI_Handler+0x4>

08000c2e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c2e:	b580      	push	{r7, lr}
 8000c30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c32:	e7fe      	b.n	8000c32 <HardFault_Handler+0x4>

08000c34 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000c38:	46c0      	nop			; (mov r8, r8)
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bd80      	pop	{r7, pc}

08000c3e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c3e:	b580      	push	{r7, lr}
 8000c40:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c42:	46c0      	nop			; (mov r8, r8)
 8000c44:	46bd      	mov	sp, r7
 8000c46:	bd80      	pop	{r7, pc}

08000c48 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c4c:	f000 f89c 	bl	8000d88 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c50:	46c0      	nop			; (mov r8, r8)
 8000c52:	46bd      	mov	sp, r7
 8000c54:	bd80      	pop	{r7, pc}

08000c56 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c56:	b580      	push	{r7, lr}
 8000c58:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c5a:	46c0      	nop			; (mov r8, r8)
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	bd80      	pop	{r7, pc}

08000c60 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000c60:	480d      	ldr	r0, [pc, #52]	; (8000c98 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000c62:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000c64:	f7ff fff7 	bl	8000c56 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c68:	480c      	ldr	r0, [pc, #48]	; (8000c9c <LoopForever+0x6>)
  ldr r1, =_edata
 8000c6a:	490d      	ldr	r1, [pc, #52]	; (8000ca0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c6c:	4a0d      	ldr	r2, [pc, #52]	; (8000ca4 <LoopForever+0xe>)
  movs r3, #0
 8000c6e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c70:	e002      	b.n	8000c78 <LoopCopyDataInit>

08000c72 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c72:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c74:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c76:	3304      	adds	r3, #4

08000c78 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c78:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c7a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c7c:	d3f9      	bcc.n	8000c72 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c7e:	4a0a      	ldr	r2, [pc, #40]	; (8000ca8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c80:	4c0a      	ldr	r4, [pc, #40]	; (8000cac <LoopForever+0x16>)
  movs r3, #0
 8000c82:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c84:	e001      	b.n	8000c8a <LoopFillZerobss>

08000c86 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c86:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c88:	3204      	adds	r2, #4

08000c8a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c8a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c8c:	d3fb      	bcc.n	8000c86 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000c8e:	f002 fa7d 	bl	800318c <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000c92:	f7ff fccb 	bl	800062c <main>

08000c96 <LoopForever>:

LoopForever:
  b LoopForever
 8000c96:	e7fe      	b.n	8000c96 <LoopForever>
  ldr   r0, =_estack
 8000c98:	20024000 	.word	0x20024000
  ldr r0, =_sdata
 8000c9c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ca0:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000ca4:	080032a0 	.word	0x080032a0
  ldr r2, =_sbss
 8000ca8:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000cac:	200001f0 	.word	0x200001f0

08000cb0 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000cb0:	e7fe      	b.n	8000cb0 <ADC1_COMP_IRQHandler>
	...

08000cb4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b082      	sub	sp, #8
 8000cb8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000cba:	1dfb      	adds	r3, r7, #7
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cc0:	4b0b      	ldr	r3, [pc, #44]	; (8000cf0 <HAL_Init+0x3c>)
 8000cc2:	681a      	ldr	r2, [r3, #0]
 8000cc4:	4b0a      	ldr	r3, [pc, #40]	; (8000cf0 <HAL_Init+0x3c>)
 8000cc6:	2180      	movs	r1, #128	; 0x80
 8000cc8:	0049      	lsls	r1, r1, #1
 8000cca:	430a      	orrs	r2, r1
 8000ccc:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000cce:	2000      	movs	r0, #0
 8000cd0:	f000 f810 	bl	8000cf4 <HAL_InitTick>
 8000cd4:	1e03      	subs	r3, r0, #0
 8000cd6:	d003      	beq.n	8000ce0 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000cd8:	1dfb      	adds	r3, r7, #7
 8000cda:	2201      	movs	r2, #1
 8000cdc:	701a      	strb	r2, [r3, #0]
 8000cde:	e001      	b.n	8000ce4 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000ce0:	f7ff fe9c 	bl	8000a1c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000ce4:	1dfb      	adds	r3, r7, #7
 8000ce6:	781b      	ldrb	r3, [r3, #0]
}
 8000ce8:	0018      	movs	r0, r3
 8000cea:	46bd      	mov	sp, r7
 8000cec:	b002      	add	sp, #8
 8000cee:	bd80      	pop	{r7, pc}
 8000cf0:	40022000 	.word	0x40022000

08000cf4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cf4:	b590      	push	{r4, r7, lr}
 8000cf6:	b085      	sub	sp, #20
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000cfc:	230f      	movs	r3, #15
 8000cfe:	18fb      	adds	r3, r7, r3
 8000d00:	2200      	movs	r2, #0
 8000d02:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000d04:	4b1d      	ldr	r3, [pc, #116]	; (8000d7c <HAL_InitTick+0x88>)
 8000d06:	781b      	ldrb	r3, [r3, #0]
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d02b      	beq.n	8000d64 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000d0c:	4b1c      	ldr	r3, [pc, #112]	; (8000d80 <HAL_InitTick+0x8c>)
 8000d0e:	681c      	ldr	r4, [r3, #0]
 8000d10:	4b1a      	ldr	r3, [pc, #104]	; (8000d7c <HAL_InitTick+0x88>)
 8000d12:	781b      	ldrb	r3, [r3, #0]
 8000d14:	0019      	movs	r1, r3
 8000d16:	23fa      	movs	r3, #250	; 0xfa
 8000d18:	0098      	lsls	r0, r3, #2
 8000d1a:	f7ff f9fb 	bl	8000114 <__udivsi3>
 8000d1e:	0003      	movs	r3, r0
 8000d20:	0019      	movs	r1, r3
 8000d22:	0020      	movs	r0, r4
 8000d24:	f7ff f9f6 	bl	8000114 <__udivsi3>
 8000d28:	0003      	movs	r3, r0
 8000d2a:	0018      	movs	r0, r3
 8000d2c:	f000 f8ef 	bl	8000f0e <HAL_SYSTICK_Config>
 8000d30:	1e03      	subs	r3, r0, #0
 8000d32:	d112      	bne.n	8000d5a <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	2b03      	cmp	r3, #3
 8000d38:	d80a      	bhi.n	8000d50 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d3a:	6879      	ldr	r1, [r7, #4]
 8000d3c:	2301      	movs	r3, #1
 8000d3e:	425b      	negs	r3, r3
 8000d40:	2200      	movs	r2, #0
 8000d42:	0018      	movs	r0, r3
 8000d44:	f000 f8ce 	bl	8000ee4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d48:	4b0e      	ldr	r3, [pc, #56]	; (8000d84 <HAL_InitTick+0x90>)
 8000d4a:	687a      	ldr	r2, [r7, #4]
 8000d4c:	601a      	str	r2, [r3, #0]
 8000d4e:	e00d      	b.n	8000d6c <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000d50:	230f      	movs	r3, #15
 8000d52:	18fb      	adds	r3, r7, r3
 8000d54:	2201      	movs	r2, #1
 8000d56:	701a      	strb	r2, [r3, #0]
 8000d58:	e008      	b.n	8000d6c <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000d5a:	230f      	movs	r3, #15
 8000d5c:	18fb      	adds	r3, r7, r3
 8000d5e:	2201      	movs	r2, #1
 8000d60:	701a      	strb	r2, [r3, #0]
 8000d62:	e003      	b.n	8000d6c <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000d64:	230f      	movs	r3, #15
 8000d66:	18fb      	adds	r3, r7, r3
 8000d68:	2201      	movs	r2, #1
 8000d6a:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000d6c:	230f      	movs	r3, #15
 8000d6e:	18fb      	adds	r3, r7, r3
 8000d70:	781b      	ldrb	r3, [r3, #0]
}
 8000d72:	0018      	movs	r0, r3
 8000d74:	46bd      	mov	sp, r7
 8000d76:	b005      	add	sp, #20
 8000d78:	bd90      	pop	{r4, r7, pc}
 8000d7a:	46c0      	nop			; (mov r8, r8)
 8000d7c:	2000000c 	.word	0x2000000c
 8000d80:	20000004 	.word	0x20000004
 8000d84:	20000008 	.word	0x20000008

08000d88 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000d8c:	4b05      	ldr	r3, [pc, #20]	; (8000da4 <HAL_IncTick+0x1c>)
 8000d8e:	781b      	ldrb	r3, [r3, #0]
 8000d90:	001a      	movs	r2, r3
 8000d92:	4b05      	ldr	r3, [pc, #20]	; (8000da8 <HAL_IncTick+0x20>)
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	18d2      	adds	r2, r2, r3
 8000d98:	4b03      	ldr	r3, [pc, #12]	; (8000da8 <HAL_IncTick+0x20>)
 8000d9a:	601a      	str	r2, [r3, #0]
}
 8000d9c:	46c0      	nop			; (mov r8, r8)
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bd80      	pop	{r7, pc}
 8000da2:	46c0      	nop			; (mov r8, r8)
 8000da4:	2000000c 	.word	0x2000000c
 8000da8:	200001ec 	.word	0x200001ec

08000dac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	af00      	add	r7, sp, #0
  return uwTick;
 8000db0:	4b02      	ldr	r3, [pc, #8]	; (8000dbc <HAL_GetTick+0x10>)
 8000db2:	681b      	ldr	r3, [r3, #0]
}
 8000db4:	0018      	movs	r0, r3
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bd80      	pop	{r7, pc}
 8000dba:	46c0      	nop			; (mov r8, r8)
 8000dbc:	200001ec 	.word	0x200001ec

08000dc0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000dc0:	b590      	push	{r4, r7, lr}
 8000dc2:	b083      	sub	sp, #12
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	0002      	movs	r2, r0
 8000dc8:	6039      	str	r1, [r7, #0]
 8000dca:	1dfb      	adds	r3, r7, #7
 8000dcc:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000dce:	1dfb      	adds	r3, r7, #7
 8000dd0:	781b      	ldrb	r3, [r3, #0]
 8000dd2:	2b7f      	cmp	r3, #127	; 0x7f
 8000dd4:	d828      	bhi.n	8000e28 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000dd6:	4a2f      	ldr	r2, [pc, #188]	; (8000e94 <__NVIC_SetPriority+0xd4>)
 8000dd8:	1dfb      	adds	r3, r7, #7
 8000dda:	781b      	ldrb	r3, [r3, #0]
 8000ddc:	b25b      	sxtb	r3, r3
 8000dde:	089b      	lsrs	r3, r3, #2
 8000de0:	33c0      	adds	r3, #192	; 0xc0
 8000de2:	009b      	lsls	r3, r3, #2
 8000de4:	589b      	ldr	r3, [r3, r2]
 8000de6:	1dfa      	adds	r2, r7, #7
 8000de8:	7812      	ldrb	r2, [r2, #0]
 8000dea:	0011      	movs	r1, r2
 8000dec:	2203      	movs	r2, #3
 8000dee:	400a      	ands	r2, r1
 8000df0:	00d2      	lsls	r2, r2, #3
 8000df2:	21ff      	movs	r1, #255	; 0xff
 8000df4:	4091      	lsls	r1, r2
 8000df6:	000a      	movs	r2, r1
 8000df8:	43d2      	mvns	r2, r2
 8000dfa:	401a      	ands	r2, r3
 8000dfc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000dfe:	683b      	ldr	r3, [r7, #0]
 8000e00:	019b      	lsls	r3, r3, #6
 8000e02:	22ff      	movs	r2, #255	; 0xff
 8000e04:	401a      	ands	r2, r3
 8000e06:	1dfb      	adds	r3, r7, #7
 8000e08:	781b      	ldrb	r3, [r3, #0]
 8000e0a:	0018      	movs	r0, r3
 8000e0c:	2303      	movs	r3, #3
 8000e0e:	4003      	ands	r3, r0
 8000e10:	00db      	lsls	r3, r3, #3
 8000e12:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e14:	481f      	ldr	r0, [pc, #124]	; (8000e94 <__NVIC_SetPriority+0xd4>)
 8000e16:	1dfb      	adds	r3, r7, #7
 8000e18:	781b      	ldrb	r3, [r3, #0]
 8000e1a:	b25b      	sxtb	r3, r3
 8000e1c:	089b      	lsrs	r3, r3, #2
 8000e1e:	430a      	orrs	r2, r1
 8000e20:	33c0      	adds	r3, #192	; 0xc0
 8000e22:	009b      	lsls	r3, r3, #2
 8000e24:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000e26:	e031      	b.n	8000e8c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e28:	4a1b      	ldr	r2, [pc, #108]	; (8000e98 <__NVIC_SetPriority+0xd8>)
 8000e2a:	1dfb      	adds	r3, r7, #7
 8000e2c:	781b      	ldrb	r3, [r3, #0]
 8000e2e:	0019      	movs	r1, r3
 8000e30:	230f      	movs	r3, #15
 8000e32:	400b      	ands	r3, r1
 8000e34:	3b08      	subs	r3, #8
 8000e36:	089b      	lsrs	r3, r3, #2
 8000e38:	3306      	adds	r3, #6
 8000e3a:	009b      	lsls	r3, r3, #2
 8000e3c:	18d3      	adds	r3, r2, r3
 8000e3e:	3304      	adds	r3, #4
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	1dfa      	adds	r2, r7, #7
 8000e44:	7812      	ldrb	r2, [r2, #0]
 8000e46:	0011      	movs	r1, r2
 8000e48:	2203      	movs	r2, #3
 8000e4a:	400a      	ands	r2, r1
 8000e4c:	00d2      	lsls	r2, r2, #3
 8000e4e:	21ff      	movs	r1, #255	; 0xff
 8000e50:	4091      	lsls	r1, r2
 8000e52:	000a      	movs	r2, r1
 8000e54:	43d2      	mvns	r2, r2
 8000e56:	401a      	ands	r2, r3
 8000e58:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000e5a:	683b      	ldr	r3, [r7, #0]
 8000e5c:	019b      	lsls	r3, r3, #6
 8000e5e:	22ff      	movs	r2, #255	; 0xff
 8000e60:	401a      	ands	r2, r3
 8000e62:	1dfb      	adds	r3, r7, #7
 8000e64:	781b      	ldrb	r3, [r3, #0]
 8000e66:	0018      	movs	r0, r3
 8000e68:	2303      	movs	r3, #3
 8000e6a:	4003      	ands	r3, r0
 8000e6c:	00db      	lsls	r3, r3, #3
 8000e6e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e70:	4809      	ldr	r0, [pc, #36]	; (8000e98 <__NVIC_SetPriority+0xd8>)
 8000e72:	1dfb      	adds	r3, r7, #7
 8000e74:	781b      	ldrb	r3, [r3, #0]
 8000e76:	001c      	movs	r4, r3
 8000e78:	230f      	movs	r3, #15
 8000e7a:	4023      	ands	r3, r4
 8000e7c:	3b08      	subs	r3, #8
 8000e7e:	089b      	lsrs	r3, r3, #2
 8000e80:	430a      	orrs	r2, r1
 8000e82:	3306      	adds	r3, #6
 8000e84:	009b      	lsls	r3, r3, #2
 8000e86:	18c3      	adds	r3, r0, r3
 8000e88:	3304      	adds	r3, #4
 8000e8a:	601a      	str	r2, [r3, #0]
}
 8000e8c:	46c0      	nop			; (mov r8, r8)
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	b003      	add	sp, #12
 8000e92:	bd90      	pop	{r4, r7, pc}
 8000e94:	e000e100 	.word	0xe000e100
 8000e98:	e000ed00 	.word	0xe000ed00

08000e9c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b082      	sub	sp, #8
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	1e5a      	subs	r2, r3, #1
 8000ea8:	2380      	movs	r3, #128	; 0x80
 8000eaa:	045b      	lsls	r3, r3, #17
 8000eac:	429a      	cmp	r2, r3
 8000eae:	d301      	bcc.n	8000eb4 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000eb0:	2301      	movs	r3, #1
 8000eb2:	e010      	b.n	8000ed6 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000eb4:	4b0a      	ldr	r3, [pc, #40]	; (8000ee0 <SysTick_Config+0x44>)
 8000eb6:	687a      	ldr	r2, [r7, #4]
 8000eb8:	3a01      	subs	r2, #1
 8000eba:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ebc:	2301      	movs	r3, #1
 8000ebe:	425b      	negs	r3, r3
 8000ec0:	2103      	movs	r1, #3
 8000ec2:	0018      	movs	r0, r3
 8000ec4:	f7ff ff7c 	bl	8000dc0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ec8:	4b05      	ldr	r3, [pc, #20]	; (8000ee0 <SysTick_Config+0x44>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ece:	4b04      	ldr	r3, [pc, #16]	; (8000ee0 <SysTick_Config+0x44>)
 8000ed0:	2207      	movs	r2, #7
 8000ed2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ed4:	2300      	movs	r3, #0
}
 8000ed6:	0018      	movs	r0, r3
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	b002      	add	sp, #8
 8000edc:	bd80      	pop	{r7, pc}
 8000ede:	46c0      	nop			; (mov r8, r8)
 8000ee0:	e000e010 	.word	0xe000e010

08000ee4 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b084      	sub	sp, #16
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	60b9      	str	r1, [r7, #8]
 8000eec:	607a      	str	r2, [r7, #4]
 8000eee:	210f      	movs	r1, #15
 8000ef0:	187b      	adds	r3, r7, r1
 8000ef2:	1c02      	adds	r2, r0, #0
 8000ef4:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8000ef6:	68ba      	ldr	r2, [r7, #8]
 8000ef8:	187b      	adds	r3, r7, r1
 8000efa:	781b      	ldrb	r3, [r3, #0]
 8000efc:	b25b      	sxtb	r3, r3
 8000efe:	0011      	movs	r1, r2
 8000f00:	0018      	movs	r0, r3
 8000f02:	f7ff ff5d 	bl	8000dc0 <__NVIC_SetPriority>
}
 8000f06:	46c0      	nop			; (mov r8, r8)
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	b004      	add	sp, #16
 8000f0c:	bd80      	pop	{r7, pc}

08000f0e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f0e:	b580      	push	{r7, lr}
 8000f10:	b082      	sub	sp, #8
 8000f12:	af00      	add	r7, sp, #0
 8000f14:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	0018      	movs	r0, r3
 8000f1a:	f7ff ffbf 	bl	8000e9c <SysTick_Config>
 8000f1e:	0003      	movs	r3, r0
}
 8000f20:	0018      	movs	r0, r3
 8000f22:	46bd      	mov	sp, r7
 8000f24:	b002      	add	sp, #8
 8000f26:	bd80      	pop	{r7, pc}

08000f28 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b086      	sub	sp, #24
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
 8000f30:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000f32:	2300      	movs	r3, #0
 8000f34:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f36:	e14d      	b.n	80011d4 <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000f38:	683b      	ldr	r3, [r7, #0]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	2101      	movs	r1, #1
 8000f3e:	697a      	ldr	r2, [r7, #20]
 8000f40:	4091      	lsls	r1, r2
 8000f42:	000a      	movs	r2, r1
 8000f44:	4013      	ands	r3, r2
 8000f46:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d100      	bne.n	8000f50 <HAL_GPIO_Init+0x28>
 8000f4e:	e13e      	b.n	80011ce <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000f50:	683b      	ldr	r3, [r7, #0]
 8000f52:	685b      	ldr	r3, [r3, #4]
 8000f54:	2203      	movs	r2, #3
 8000f56:	4013      	ands	r3, r2
 8000f58:	2b01      	cmp	r3, #1
 8000f5a:	d005      	beq.n	8000f68 <HAL_GPIO_Init+0x40>
 8000f5c:	683b      	ldr	r3, [r7, #0]
 8000f5e:	685b      	ldr	r3, [r3, #4]
 8000f60:	2203      	movs	r2, #3
 8000f62:	4013      	ands	r3, r2
 8000f64:	2b02      	cmp	r3, #2
 8000f66:	d130      	bne.n	8000fca <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	689b      	ldr	r3, [r3, #8]
 8000f6c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000f6e:	697b      	ldr	r3, [r7, #20]
 8000f70:	005b      	lsls	r3, r3, #1
 8000f72:	2203      	movs	r2, #3
 8000f74:	409a      	lsls	r2, r3
 8000f76:	0013      	movs	r3, r2
 8000f78:	43da      	mvns	r2, r3
 8000f7a:	693b      	ldr	r3, [r7, #16]
 8000f7c:	4013      	ands	r3, r2
 8000f7e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000f80:	683b      	ldr	r3, [r7, #0]
 8000f82:	68da      	ldr	r2, [r3, #12]
 8000f84:	697b      	ldr	r3, [r7, #20]
 8000f86:	005b      	lsls	r3, r3, #1
 8000f88:	409a      	lsls	r2, r3
 8000f8a:	0013      	movs	r3, r2
 8000f8c:	693a      	ldr	r2, [r7, #16]
 8000f8e:	4313      	orrs	r3, r2
 8000f90:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	693a      	ldr	r2, [r7, #16]
 8000f96:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	685b      	ldr	r3, [r3, #4]
 8000f9c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000f9e:	2201      	movs	r2, #1
 8000fa0:	697b      	ldr	r3, [r7, #20]
 8000fa2:	409a      	lsls	r2, r3
 8000fa4:	0013      	movs	r3, r2
 8000fa6:	43da      	mvns	r2, r3
 8000fa8:	693b      	ldr	r3, [r7, #16]
 8000faa:	4013      	ands	r3, r2
 8000fac:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000fae:	683b      	ldr	r3, [r7, #0]
 8000fb0:	685b      	ldr	r3, [r3, #4]
 8000fb2:	091b      	lsrs	r3, r3, #4
 8000fb4:	2201      	movs	r2, #1
 8000fb6:	401a      	ands	r2, r3
 8000fb8:	697b      	ldr	r3, [r7, #20]
 8000fba:	409a      	lsls	r2, r3
 8000fbc:	0013      	movs	r3, r2
 8000fbe:	693a      	ldr	r2, [r7, #16]
 8000fc0:	4313      	orrs	r3, r2
 8000fc2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	693a      	ldr	r2, [r7, #16]
 8000fc8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000fca:	683b      	ldr	r3, [r7, #0]
 8000fcc:	685b      	ldr	r3, [r3, #4]
 8000fce:	2203      	movs	r2, #3
 8000fd0:	4013      	ands	r3, r2
 8000fd2:	2b03      	cmp	r3, #3
 8000fd4:	d017      	beq.n	8001006 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	68db      	ldr	r3, [r3, #12]
 8000fda:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000fdc:	697b      	ldr	r3, [r7, #20]
 8000fde:	005b      	lsls	r3, r3, #1
 8000fe0:	2203      	movs	r2, #3
 8000fe2:	409a      	lsls	r2, r3
 8000fe4:	0013      	movs	r3, r2
 8000fe6:	43da      	mvns	r2, r3
 8000fe8:	693b      	ldr	r3, [r7, #16]
 8000fea:	4013      	ands	r3, r2
 8000fec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000fee:	683b      	ldr	r3, [r7, #0]
 8000ff0:	689a      	ldr	r2, [r3, #8]
 8000ff2:	697b      	ldr	r3, [r7, #20]
 8000ff4:	005b      	lsls	r3, r3, #1
 8000ff6:	409a      	lsls	r2, r3
 8000ff8:	0013      	movs	r3, r2
 8000ffa:	693a      	ldr	r2, [r7, #16]
 8000ffc:	4313      	orrs	r3, r2
 8000ffe:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	693a      	ldr	r2, [r7, #16]
 8001004:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001006:	683b      	ldr	r3, [r7, #0]
 8001008:	685b      	ldr	r3, [r3, #4]
 800100a:	2203      	movs	r2, #3
 800100c:	4013      	ands	r3, r2
 800100e:	2b02      	cmp	r3, #2
 8001010:	d123      	bne.n	800105a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001012:	697b      	ldr	r3, [r7, #20]
 8001014:	08da      	lsrs	r2, r3, #3
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	3208      	adds	r2, #8
 800101a:	0092      	lsls	r2, r2, #2
 800101c:	58d3      	ldr	r3, [r2, r3]
 800101e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001020:	697b      	ldr	r3, [r7, #20]
 8001022:	2207      	movs	r2, #7
 8001024:	4013      	ands	r3, r2
 8001026:	009b      	lsls	r3, r3, #2
 8001028:	220f      	movs	r2, #15
 800102a:	409a      	lsls	r2, r3
 800102c:	0013      	movs	r3, r2
 800102e:	43da      	mvns	r2, r3
 8001030:	693b      	ldr	r3, [r7, #16]
 8001032:	4013      	ands	r3, r2
 8001034:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001036:	683b      	ldr	r3, [r7, #0]
 8001038:	691a      	ldr	r2, [r3, #16]
 800103a:	697b      	ldr	r3, [r7, #20]
 800103c:	2107      	movs	r1, #7
 800103e:	400b      	ands	r3, r1
 8001040:	009b      	lsls	r3, r3, #2
 8001042:	409a      	lsls	r2, r3
 8001044:	0013      	movs	r3, r2
 8001046:	693a      	ldr	r2, [r7, #16]
 8001048:	4313      	orrs	r3, r2
 800104a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800104c:	697b      	ldr	r3, [r7, #20]
 800104e:	08da      	lsrs	r2, r3, #3
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	3208      	adds	r2, #8
 8001054:	0092      	lsls	r2, r2, #2
 8001056:	6939      	ldr	r1, [r7, #16]
 8001058:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001060:	697b      	ldr	r3, [r7, #20]
 8001062:	005b      	lsls	r3, r3, #1
 8001064:	2203      	movs	r2, #3
 8001066:	409a      	lsls	r2, r3
 8001068:	0013      	movs	r3, r2
 800106a:	43da      	mvns	r2, r3
 800106c:	693b      	ldr	r3, [r7, #16]
 800106e:	4013      	ands	r3, r2
 8001070:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001072:	683b      	ldr	r3, [r7, #0]
 8001074:	685b      	ldr	r3, [r3, #4]
 8001076:	2203      	movs	r2, #3
 8001078:	401a      	ands	r2, r3
 800107a:	697b      	ldr	r3, [r7, #20]
 800107c:	005b      	lsls	r3, r3, #1
 800107e:	409a      	lsls	r2, r3
 8001080:	0013      	movs	r3, r2
 8001082:	693a      	ldr	r2, [r7, #16]
 8001084:	4313      	orrs	r3, r2
 8001086:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	693a      	ldr	r2, [r7, #16]
 800108c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800108e:	683b      	ldr	r3, [r7, #0]
 8001090:	685a      	ldr	r2, [r3, #4]
 8001092:	23c0      	movs	r3, #192	; 0xc0
 8001094:	029b      	lsls	r3, r3, #10
 8001096:	4013      	ands	r3, r2
 8001098:	d100      	bne.n	800109c <HAL_GPIO_Init+0x174>
 800109a:	e098      	b.n	80011ce <HAL_GPIO_Init+0x2a6>
      {
        temp = EXTI->EXTICR[position >> 2u];
 800109c:	4a53      	ldr	r2, [pc, #332]	; (80011ec <HAL_GPIO_Init+0x2c4>)
 800109e:	697b      	ldr	r3, [r7, #20]
 80010a0:	089b      	lsrs	r3, r3, #2
 80010a2:	3318      	adds	r3, #24
 80010a4:	009b      	lsls	r3, r3, #2
 80010a6:	589b      	ldr	r3, [r3, r2]
 80010a8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80010aa:	697b      	ldr	r3, [r7, #20]
 80010ac:	2203      	movs	r2, #3
 80010ae:	4013      	ands	r3, r2
 80010b0:	00db      	lsls	r3, r3, #3
 80010b2:	220f      	movs	r2, #15
 80010b4:	409a      	lsls	r2, r3
 80010b6:	0013      	movs	r3, r2
 80010b8:	43da      	mvns	r2, r3
 80010ba:	693b      	ldr	r3, [r7, #16]
 80010bc:	4013      	ands	r3, r2
 80010be:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80010c0:	687a      	ldr	r2, [r7, #4]
 80010c2:	23a0      	movs	r3, #160	; 0xa0
 80010c4:	05db      	lsls	r3, r3, #23
 80010c6:	429a      	cmp	r2, r3
 80010c8:	d019      	beq.n	80010fe <HAL_GPIO_Init+0x1d6>
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	4a48      	ldr	r2, [pc, #288]	; (80011f0 <HAL_GPIO_Init+0x2c8>)
 80010ce:	4293      	cmp	r3, r2
 80010d0:	d013      	beq.n	80010fa <HAL_GPIO_Init+0x1d2>
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	4a47      	ldr	r2, [pc, #284]	; (80011f4 <HAL_GPIO_Init+0x2cc>)
 80010d6:	4293      	cmp	r3, r2
 80010d8:	d00d      	beq.n	80010f6 <HAL_GPIO_Init+0x1ce>
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	4a46      	ldr	r2, [pc, #280]	; (80011f8 <HAL_GPIO_Init+0x2d0>)
 80010de:	4293      	cmp	r3, r2
 80010e0:	d007      	beq.n	80010f2 <HAL_GPIO_Init+0x1ca>
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	4a45      	ldr	r2, [pc, #276]	; (80011fc <HAL_GPIO_Init+0x2d4>)
 80010e6:	4293      	cmp	r3, r2
 80010e8:	d101      	bne.n	80010ee <HAL_GPIO_Init+0x1c6>
 80010ea:	2304      	movs	r3, #4
 80010ec:	e008      	b.n	8001100 <HAL_GPIO_Init+0x1d8>
 80010ee:	2305      	movs	r3, #5
 80010f0:	e006      	b.n	8001100 <HAL_GPIO_Init+0x1d8>
 80010f2:	2303      	movs	r3, #3
 80010f4:	e004      	b.n	8001100 <HAL_GPIO_Init+0x1d8>
 80010f6:	2302      	movs	r3, #2
 80010f8:	e002      	b.n	8001100 <HAL_GPIO_Init+0x1d8>
 80010fa:	2301      	movs	r3, #1
 80010fc:	e000      	b.n	8001100 <HAL_GPIO_Init+0x1d8>
 80010fe:	2300      	movs	r3, #0
 8001100:	697a      	ldr	r2, [r7, #20]
 8001102:	2103      	movs	r1, #3
 8001104:	400a      	ands	r2, r1
 8001106:	00d2      	lsls	r2, r2, #3
 8001108:	4093      	lsls	r3, r2
 800110a:	693a      	ldr	r2, [r7, #16]
 800110c:	4313      	orrs	r3, r2
 800110e:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8001110:	4936      	ldr	r1, [pc, #216]	; (80011ec <HAL_GPIO_Init+0x2c4>)
 8001112:	697b      	ldr	r3, [r7, #20]
 8001114:	089b      	lsrs	r3, r3, #2
 8001116:	3318      	adds	r3, #24
 8001118:	009b      	lsls	r3, r3, #2
 800111a:	693a      	ldr	r2, [r7, #16]
 800111c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800111e:	4b33      	ldr	r3, [pc, #204]	; (80011ec <HAL_GPIO_Init+0x2c4>)
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	43da      	mvns	r2, r3
 8001128:	693b      	ldr	r3, [r7, #16]
 800112a:	4013      	ands	r3, r2
 800112c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800112e:	683b      	ldr	r3, [r7, #0]
 8001130:	685a      	ldr	r2, [r3, #4]
 8001132:	2380      	movs	r3, #128	; 0x80
 8001134:	035b      	lsls	r3, r3, #13
 8001136:	4013      	ands	r3, r2
 8001138:	d003      	beq.n	8001142 <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 800113a:	693a      	ldr	r2, [r7, #16]
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	4313      	orrs	r3, r2
 8001140:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001142:	4b2a      	ldr	r3, [pc, #168]	; (80011ec <HAL_GPIO_Init+0x2c4>)
 8001144:	693a      	ldr	r2, [r7, #16]
 8001146:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8001148:	4b28      	ldr	r3, [pc, #160]	; (80011ec <HAL_GPIO_Init+0x2c4>)
 800114a:	685b      	ldr	r3, [r3, #4]
 800114c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	43da      	mvns	r2, r3
 8001152:	693b      	ldr	r3, [r7, #16]
 8001154:	4013      	ands	r3, r2
 8001156:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001158:	683b      	ldr	r3, [r7, #0]
 800115a:	685a      	ldr	r2, [r3, #4]
 800115c:	2380      	movs	r3, #128	; 0x80
 800115e:	039b      	lsls	r3, r3, #14
 8001160:	4013      	ands	r3, r2
 8001162:	d003      	beq.n	800116c <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 8001164:	693a      	ldr	r2, [r7, #16]
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	4313      	orrs	r3, r2
 800116a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800116c:	4b1f      	ldr	r3, [pc, #124]	; (80011ec <HAL_GPIO_Init+0x2c4>)
 800116e:	693a      	ldr	r2, [r7, #16]
 8001170:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001172:	4a1e      	ldr	r2, [pc, #120]	; (80011ec <HAL_GPIO_Init+0x2c4>)
 8001174:	2384      	movs	r3, #132	; 0x84
 8001176:	58d3      	ldr	r3, [r2, r3]
 8001178:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	43da      	mvns	r2, r3
 800117e:	693b      	ldr	r3, [r7, #16]
 8001180:	4013      	ands	r3, r2
 8001182:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	685a      	ldr	r2, [r3, #4]
 8001188:	2380      	movs	r3, #128	; 0x80
 800118a:	029b      	lsls	r3, r3, #10
 800118c:	4013      	ands	r3, r2
 800118e:	d003      	beq.n	8001198 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001190:	693a      	ldr	r2, [r7, #16]
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	4313      	orrs	r3, r2
 8001196:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001198:	4914      	ldr	r1, [pc, #80]	; (80011ec <HAL_GPIO_Init+0x2c4>)
 800119a:	2284      	movs	r2, #132	; 0x84
 800119c:	693b      	ldr	r3, [r7, #16]
 800119e:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 80011a0:	4a12      	ldr	r2, [pc, #72]	; (80011ec <HAL_GPIO_Init+0x2c4>)
 80011a2:	2380      	movs	r3, #128	; 0x80
 80011a4:	58d3      	ldr	r3, [r2, r3]
 80011a6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	43da      	mvns	r2, r3
 80011ac:	693b      	ldr	r3, [r7, #16]
 80011ae:	4013      	ands	r3, r2
 80011b0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80011b2:	683b      	ldr	r3, [r7, #0]
 80011b4:	685a      	ldr	r2, [r3, #4]
 80011b6:	2380      	movs	r3, #128	; 0x80
 80011b8:	025b      	lsls	r3, r3, #9
 80011ba:	4013      	ands	r3, r2
 80011bc:	d003      	beq.n	80011c6 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 80011be:	693a      	ldr	r2, [r7, #16]
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	4313      	orrs	r3, r2
 80011c4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80011c6:	4909      	ldr	r1, [pc, #36]	; (80011ec <HAL_GPIO_Init+0x2c4>)
 80011c8:	2280      	movs	r2, #128	; 0x80
 80011ca:	693b      	ldr	r3, [r7, #16]
 80011cc:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 80011ce:	697b      	ldr	r3, [r7, #20]
 80011d0:	3301      	adds	r3, #1
 80011d2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	681a      	ldr	r2, [r3, #0]
 80011d8:	697b      	ldr	r3, [r7, #20]
 80011da:	40da      	lsrs	r2, r3
 80011dc:	1e13      	subs	r3, r2, #0
 80011de:	d000      	beq.n	80011e2 <HAL_GPIO_Init+0x2ba>
 80011e0:	e6aa      	b.n	8000f38 <HAL_GPIO_Init+0x10>
  }
}
 80011e2:	46c0      	nop			; (mov r8, r8)
 80011e4:	46c0      	nop			; (mov r8, r8)
 80011e6:	46bd      	mov	sp, r7
 80011e8:	b006      	add	sp, #24
 80011ea:	bd80      	pop	{r7, pc}
 80011ec:	40021800 	.word	0x40021800
 80011f0:	50000400 	.word	0x50000400
 80011f4:	50000800 	.word	0x50000800
 80011f8:	50000c00 	.word	0x50000c00
 80011fc:	50001000 	.word	0x50001000

08001200 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b082      	sub	sp, #8
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
 8001208:	0008      	movs	r0, r1
 800120a:	0011      	movs	r1, r2
 800120c:	1cbb      	adds	r3, r7, #2
 800120e:	1c02      	adds	r2, r0, #0
 8001210:	801a      	strh	r2, [r3, #0]
 8001212:	1c7b      	adds	r3, r7, #1
 8001214:	1c0a      	adds	r2, r1, #0
 8001216:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001218:	1c7b      	adds	r3, r7, #1
 800121a:	781b      	ldrb	r3, [r3, #0]
 800121c:	2b00      	cmp	r3, #0
 800121e:	d004      	beq.n	800122a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001220:	1cbb      	adds	r3, r7, #2
 8001222:	881a      	ldrh	r2, [r3, #0]
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001228:	e003      	b.n	8001232 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800122a:	1cbb      	adds	r3, r7, #2
 800122c:	881a      	ldrh	r2, [r3, #0]
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001232:	46c0      	nop			; (mov r8, r8)
 8001234:	46bd      	mov	sp, r7
 8001236:	b002      	add	sp, #8
 8001238:	bd80      	pop	{r7, pc}
	...

0800123c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b084      	sub	sp, #16
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001244:	4b19      	ldr	r3, [pc, #100]	; (80012ac <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	4a19      	ldr	r2, [pc, #100]	; (80012b0 <HAL_PWREx_ControlVoltageScaling+0x74>)
 800124a:	4013      	ands	r3, r2
 800124c:	0019      	movs	r1, r3
 800124e:	4b17      	ldr	r3, [pc, #92]	; (80012ac <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001250:	687a      	ldr	r2, [r7, #4]
 8001252:	430a      	orrs	r2, r1
 8001254:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001256:	687a      	ldr	r2, [r7, #4]
 8001258:	2380      	movs	r3, #128	; 0x80
 800125a:	009b      	lsls	r3, r3, #2
 800125c:	429a      	cmp	r2, r3
 800125e:	d11f      	bne.n	80012a0 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8001260:	4b14      	ldr	r3, [pc, #80]	; (80012b4 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8001262:	681a      	ldr	r2, [r3, #0]
 8001264:	0013      	movs	r3, r2
 8001266:	005b      	lsls	r3, r3, #1
 8001268:	189b      	adds	r3, r3, r2
 800126a:	005b      	lsls	r3, r3, #1
 800126c:	4912      	ldr	r1, [pc, #72]	; (80012b8 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 800126e:	0018      	movs	r0, r3
 8001270:	f7fe ff50 	bl	8000114 <__udivsi3>
 8001274:	0003      	movs	r3, r0
 8001276:	3301      	adds	r3, #1
 8001278:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800127a:	e008      	b.n	800128e <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	2b00      	cmp	r3, #0
 8001280:	d003      	beq.n	800128a <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	3b01      	subs	r3, #1
 8001286:	60fb      	str	r3, [r7, #12]
 8001288:	e001      	b.n	800128e <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 800128a:	2303      	movs	r3, #3
 800128c:	e009      	b.n	80012a2 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800128e:	4b07      	ldr	r3, [pc, #28]	; (80012ac <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001290:	695a      	ldr	r2, [r3, #20]
 8001292:	2380      	movs	r3, #128	; 0x80
 8001294:	00db      	lsls	r3, r3, #3
 8001296:	401a      	ands	r2, r3
 8001298:	2380      	movs	r3, #128	; 0x80
 800129a:	00db      	lsls	r3, r3, #3
 800129c:	429a      	cmp	r2, r3
 800129e:	d0ed      	beq.n	800127c <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 80012a0:	2300      	movs	r3, #0
}
 80012a2:	0018      	movs	r0, r3
 80012a4:	46bd      	mov	sp, r7
 80012a6:	b004      	add	sp, #16
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	46c0      	nop			; (mov r8, r8)
 80012ac:	40007000 	.word	0x40007000
 80012b0:	fffff9ff 	.word	0xfffff9ff
 80012b4:	20000004 	.word	0x20000004
 80012b8:	000f4240 	.word	0x000f4240

080012bc <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 80012c0:	4b03      	ldr	r3, [pc, #12]	; (80012d0 <LL_RCC_GetAPB1Prescaler+0x14>)
 80012c2:	689a      	ldr	r2, [r3, #8]
 80012c4:	23e0      	movs	r3, #224	; 0xe0
 80012c6:	01db      	lsls	r3, r3, #7
 80012c8:	4013      	ands	r3, r2
}
 80012ca:	0018      	movs	r0, r3
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bd80      	pop	{r7, pc}
 80012d0:	40021000 	.word	0x40021000

080012d4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b088      	sub	sp, #32
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d102      	bne.n	80012e8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80012e2:	2301      	movs	r3, #1
 80012e4:	f000 fb50 	bl	8001988 <HAL_RCC_OscConfig+0x6b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	2201      	movs	r2, #1
 80012ee:	4013      	ands	r3, r2
 80012f0:	d100      	bne.n	80012f4 <HAL_RCC_OscConfig+0x20>
 80012f2:	e07c      	b.n	80013ee <HAL_RCC_OscConfig+0x11a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80012f4:	4bc3      	ldr	r3, [pc, #780]	; (8001604 <HAL_RCC_OscConfig+0x330>)
 80012f6:	689b      	ldr	r3, [r3, #8]
 80012f8:	2238      	movs	r2, #56	; 0x38
 80012fa:	4013      	ands	r3, r2
 80012fc:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80012fe:	4bc1      	ldr	r3, [pc, #772]	; (8001604 <HAL_RCC_OscConfig+0x330>)
 8001300:	68db      	ldr	r3, [r3, #12]
 8001302:	2203      	movs	r2, #3
 8001304:	4013      	ands	r3, r2
 8001306:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8001308:	69bb      	ldr	r3, [r7, #24]
 800130a:	2b10      	cmp	r3, #16
 800130c:	d102      	bne.n	8001314 <HAL_RCC_OscConfig+0x40>
 800130e:	697b      	ldr	r3, [r7, #20]
 8001310:	2b03      	cmp	r3, #3
 8001312:	d002      	beq.n	800131a <HAL_RCC_OscConfig+0x46>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8001314:	69bb      	ldr	r3, [r7, #24]
 8001316:	2b08      	cmp	r3, #8
 8001318:	d10b      	bne.n	8001332 <HAL_RCC_OscConfig+0x5e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800131a:	4bba      	ldr	r3, [pc, #744]	; (8001604 <HAL_RCC_OscConfig+0x330>)
 800131c:	681a      	ldr	r2, [r3, #0]
 800131e:	2380      	movs	r3, #128	; 0x80
 8001320:	029b      	lsls	r3, r3, #10
 8001322:	4013      	ands	r3, r2
 8001324:	d062      	beq.n	80013ec <HAL_RCC_OscConfig+0x118>
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	685b      	ldr	r3, [r3, #4]
 800132a:	2b00      	cmp	r3, #0
 800132c:	d15e      	bne.n	80013ec <HAL_RCC_OscConfig+0x118>
      {
        return HAL_ERROR;
 800132e:	2301      	movs	r3, #1
 8001330:	e32a      	b.n	8001988 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	685a      	ldr	r2, [r3, #4]
 8001336:	2380      	movs	r3, #128	; 0x80
 8001338:	025b      	lsls	r3, r3, #9
 800133a:	429a      	cmp	r2, r3
 800133c:	d107      	bne.n	800134e <HAL_RCC_OscConfig+0x7a>
 800133e:	4bb1      	ldr	r3, [pc, #708]	; (8001604 <HAL_RCC_OscConfig+0x330>)
 8001340:	681a      	ldr	r2, [r3, #0]
 8001342:	4bb0      	ldr	r3, [pc, #704]	; (8001604 <HAL_RCC_OscConfig+0x330>)
 8001344:	2180      	movs	r1, #128	; 0x80
 8001346:	0249      	lsls	r1, r1, #9
 8001348:	430a      	orrs	r2, r1
 800134a:	601a      	str	r2, [r3, #0]
 800134c:	e020      	b.n	8001390 <HAL_RCC_OscConfig+0xbc>
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	685a      	ldr	r2, [r3, #4]
 8001352:	23a0      	movs	r3, #160	; 0xa0
 8001354:	02db      	lsls	r3, r3, #11
 8001356:	429a      	cmp	r2, r3
 8001358:	d10e      	bne.n	8001378 <HAL_RCC_OscConfig+0xa4>
 800135a:	4baa      	ldr	r3, [pc, #680]	; (8001604 <HAL_RCC_OscConfig+0x330>)
 800135c:	681a      	ldr	r2, [r3, #0]
 800135e:	4ba9      	ldr	r3, [pc, #676]	; (8001604 <HAL_RCC_OscConfig+0x330>)
 8001360:	2180      	movs	r1, #128	; 0x80
 8001362:	02c9      	lsls	r1, r1, #11
 8001364:	430a      	orrs	r2, r1
 8001366:	601a      	str	r2, [r3, #0]
 8001368:	4ba6      	ldr	r3, [pc, #664]	; (8001604 <HAL_RCC_OscConfig+0x330>)
 800136a:	681a      	ldr	r2, [r3, #0]
 800136c:	4ba5      	ldr	r3, [pc, #660]	; (8001604 <HAL_RCC_OscConfig+0x330>)
 800136e:	2180      	movs	r1, #128	; 0x80
 8001370:	0249      	lsls	r1, r1, #9
 8001372:	430a      	orrs	r2, r1
 8001374:	601a      	str	r2, [r3, #0]
 8001376:	e00b      	b.n	8001390 <HAL_RCC_OscConfig+0xbc>
 8001378:	4ba2      	ldr	r3, [pc, #648]	; (8001604 <HAL_RCC_OscConfig+0x330>)
 800137a:	681a      	ldr	r2, [r3, #0]
 800137c:	4ba1      	ldr	r3, [pc, #644]	; (8001604 <HAL_RCC_OscConfig+0x330>)
 800137e:	49a2      	ldr	r1, [pc, #648]	; (8001608 <HAL_RCC_OscConfig+0x334>)
 8001380:	400a      	ands	r2, r1
 8001382:	601a      	str	r2, [r3, #0]
 8001384:	4b9f      	ldr	r3, [pc, #636]	; (8001604 <HAL_RCC_OscConfig+0x330>)
 8001386:	681a      	ldr	r2, [r3, #0]
 8001388:	4b9e      	ldr	r3, [pc, #632]	; (8001604 <HAL_RCC_OscConfig+0x330>)
 800138a:	49a0      	ldr	r1, [pc, #640]	; (800160c <HAL_RCC_OscConfig+0x338>)
 800138c:	400a      	ands	r2, r1
 800138e:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	685b      	ldr	r3, [r3, #4]
 8001394:	2b00      	cmp	r3, #0
 8001396:	d014      	beq.n	80013c2 <HAL_RCC_OscConfig+0xee>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001398:	f7ff fd08 	bl	8000dac <HAL_GetTick>
 800139c:	0003      	movs	r3, r0
 800139e:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80013a0:	e008      	b.n	80013b4 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80013a2:	f7ff fd03 	bl	8000dac <HAL_GetTick>
 80013a6:	0002      	movs	r2, r0
 80013a8:	693b      	ldr	r3, [r7, #16]
 80013aa:	1ad3      	subs	r3, r2, r3
 80013ac:	2b64      	cmp	r3, #100	; 0x64
 80013ae:	d901      	bls.n	80013b4 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 80013b0:	2303      	movs	r3, #3
 80013b2:	e2e9      	b.n	8001988 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80013b4:	4b93      	ldr	r3, [pc, #588]	; (8001604 <HAL_RCC_OscConfig+0x330>)
 80013b6:	681a      	ldr	r2, [r3, #0]
 80013b8:	2380      	movs	r3, #128	; 0x80
 80013ba:	029b      	lsls	r3, r3, #10
 80013bc:	4013      	ands	r3, r2
 80013be:	d0f0      	beq.n	80013a2 <HAL_RCC_OscConfig+0xce>
 80013c0:	e015      	b.n	80013ee <HAL_RCC_OscConfig+0x11a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013c2:	f7ff fcf3 	bl	8000dac <HAL_GetTick>
 80013c6:	0003      	movs	r3, r0
 80013c8:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80013ca:	e008      	b.n	80013de <HAL_RCC_OscConfig+0x10a>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80013cc:	f7ff fcee 	bl	8000dac <HAL_GetTick>
 80013d0:	0002      	movs	r2, r0
 80013d2:	693b      	ldr	r3, [r7, #16]
 80013d4:	1ad3      	subs	r3, r2, r3
 80013d6:	2b64      	cmp	r3, #100	; 0x64
 80013d8:	d901      	bls.n	80013de <HAL_RCC_OscConfig+0x10a>
          {
            return HAL_TIMEOUT;
 80013da:	2303      	movs	r3, #3
 80013dc:	e2d4      	b.n	8001988 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80013de:	4b89      	ldr	r3, [pc, #548]	; (8001604 <HAL_RCC_OscConfig+0x330>)
 80013e0:	681a      	ldr	r2, [r3, #0]
 80013e2:	2380      	movs	r3, #128	; 0x80
 80013e4:	029b      	lsls	r3, r3, #10
 80013e6:	4013      	ands	r3, r2
 80013e8:	d1f0      	bne.n	80013cc <HAL_RCC_OscConfig+0xf8>
 80013ea:	e000      	b.n	80013ee <HAL_RCC_OscConfig+0x11a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013ec:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	2202      	movs	r2, #2
 80013f4:	4013      	ands	r3, r2
 80013f6:	d100      	bne.n	80013fa <HAL_RCC_OscConfig+0x126>
 80013f8:	e099      	b.n	800152e <HAL_RCC_OscConfig+0x25a>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80013fa:	4b82      	ldr	r3, [pc, #520]	; (8001604 <HAL_RCC_OscConfig+0x330>)
 80013fc:	689b      	ldr	r3, [r3, #8]
 80013fe:	2238      	movs	r2, #56	; 0x38
 8001400:	4013      	ands	r3, r2
 8001402:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001404:	4b7f      	ldr	r3, [pc, #508]	; (8001604 <HAL_RCC_OscConfig+0x330>)
 8001406:	68db      	ldr	r3, [r3, #12]
 8001408:	2203      	movs	r2, #3
 800140a:	4013      	ands	r3, r2
 800140c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 800140e:	69bb      	ldr	r3, [r7, #24]
 8001410:	2b10      	cmp	r3, #16
 8001412:	d102      	bne.n	800141a <HAL_RCC_OscConfig+0x146>
 8001414:	697b      	ldr	r3, [r7, #20]
 8001416:	2b02      	cmp	r3, #2
 8001418:	d002      	beq.n	8001420 <HAL_RCC_OscConfig+0x14c>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 800141a:	69bb      	ldr	r3, [r7, #24]
 800141c:	2b00      	cmp	r3, #0
 800141e:	d135      	bne.n	800148c <HAL_RCC_OscConfig+0x1b8>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001420:	4b78      	ldr	r3, [pc, #480]	; (8001604 <HAL_RCC_OscConfig+0x330>)
 8001422:	681a      	ldr	r2, [r3, #0]
 8001424:	2380      	movs	r3, #128	; 0x80
 8001426:	00db      	lsls	r3, r3, #3
 8001428:	4013      	ands	r3, r2
 800142a:	d005      	beq.n	8001438 <HAL_RCC_OscConfig+0x164>
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	68db      	ldr	r3, [r3, #12]
 8001430:	2b00      	cmp	r3, #0
 8001432:	d101      	bne.n	8001438 <HAL_RCC_OscConfig+0x164>
      {
        return HAL_ERROR;
 8001434:	2301      	movs	r3, #1
 8001436:	e2a7      	b.n	8001988 <HAL_RCC_OscConfig+0x6b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001438:	4b72      	ldr	r3, [pc, #456]	; (8001604 <HAL_RCC_OscConfig+0x330>)
 800143a:	685b      	ldr	r3, [r3, #4]
 800143c:	4a74      	ldr	r2, [pc, #464]	; (8001610 <HAL_RCC_OscConfig+0x33c>)
 800143e:	4013      	ands	r3, r2
 8001440:	0019      	movs	r1, r3
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	695b      	ldr	r3, [r3, #20]
 8001446:	021a      	lsls	r2, r3, #8
 8001448:	4b6e      	ldr	r3, [pc, #440]	; (8001604 <HAL_RCC_OscConfig+0x330>)
 800144a:	430a      	orrs	r2, r1
 800144c:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800144e:	69bb      	ldr	r3, [r7, #24]
 8001450:	2b00      	cmp	r3, #0
 8001452:	d112      	bne.n	800147a <HAL_RCC_OscConfig+0x1a6>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001454:	4b6b      	ldr	r3, [pc, #428]	; (8001604 <HAL_RCC_OscConfig+0x330>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	4a6e      	ldr	r2, [pc, #440]	; (8001614 <HAL_RCC_OscConfig+0x340>)
 800145a:	4013      	ands	r3, r2
 800145c:	0019      	movs	r1, r3
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	691a      	ldr	r2, [r3, #16]
 8001462:	4b68      	ldr	r3, [pc, #416]	; (8001604 <HAL_RCC_OscConfig+0x330>)
 8001464:	430a      	orrs	r2, r1
 8001466:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8001468:	4b66      	ldr	r3, [pc, #408]	; (8001604 <HAL_RCC_OscConfig+0x330>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	0adb      	lsrs	r3, r3, #11
 800146e:	2207      	movs	r2, #7
 8001470:	4013      	ands	r3, r2
 8001472:	4a69      	ldr	r2, [pc, #420]	; (8001618 <HAL_RCC_OscConfig+0x344>)
 8001474:	40da      	lsrs	r2, r3
 8001476:	4b69      	ldr	r3, [pc, #420]	; (800161c <HAL_RCC_OscConfig+0x348>)
 8001478:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800147a:	4b69      	ldr	r3, [pc, #420]	; (8001620 <HAL_RCC_OscConfig+0x34c>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	0018      	movs	r0, r3
 8001480:	f7ff fc38 	bl	8000cf4 <HAL_InitTick>
 8001484:	1e03      	subs	r3, r0, #0
 8001486:	d051      	beq.n	800152c <HAL_RCC_OscConfig+0x258>
        {
          return HAL_ERROR;
 8001488:	2301      	movs	r3, #1
 800148a:	e27d      	b.n	8001988 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	68db      	ldr	r3, [r3, #12]
 8001490:	2b00      	cmp	r3, #0
 8001492:	d030      	beq.n	80014f6 <HAL_RCC_OscConfig+0x222>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001494:	4b5b      	ldr	r3, [pc, #364]	; (8001604 <HAL_RCC_OscConfig+0x330>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	4a5e      	ldr	r2, [pc, #376]	; (8001614 <HAL_RCC_OscConfig+0x340>)
 800149a:	4013      	ands	r3, r2
 800149c:	0019      	movs	r1, r3
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	691a      	ldr	r2, [r3, #16]
 80014a2:	4b58      	ldr	r3, [pc, #352]	; (8001604 <HAL_RCC_OscConfig+0x330>)
 80014a4:	430a      	orrs	r2, r1
 80014a6:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 80014a8:	4b56      	ldr	r3, [pc, #344]	; (8001604 <HAL_RCC_OscConfig+0x330>)
 80014aa:	681a      	ldr	r2, [r3, #0]
 80014ac:	4b55      	ldr	r3, [pc, #340]	; (8001604 <HAL_RCC_OscConfig+0x330>)
 80014ae:	2180      	movs	r1, #128	; 0x80
 80014b0:	0049      	lsls	r1, r1, #1
 80014b2:	430a      	orrs	r2, r1
 80014b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014b6:	f7ff fc79 	bl	8000dac <HAL_GetTick>
 80014ba:	0003      	movs	r3, r0
 80014bc:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80014be:	e008      	b.n	80014d2 <HAL_RCC_OscConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014c0:	f7ff fc74 	bl	8000dac <HAL_GetTick>
 80014c4:	0002      	movs	r2, r0
 80014c6:	693b      	ldr	r3, [r7, #16]
 80014c8:	1ad3      	subs	r3, r2, r3
 80014ca:	2b02      	cmp	r3, #2
 80014cc:	d901      	bls.n	80014d2 <HAL_RCC_OscConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 80014ce:	2303      	movs	r3, #3
 80014d0:	e25a      	b.n	8001988 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80014d2:	4b4c      	ldr	r3, [pc, #304]	; (8001604 <HAL_RCC_OscConfig+0x330>)
 80014d4:	681a      	ldr	r2, [r3, #0]
 80014d6:	2380      	movs	r3, #128	; 0x80
 80014d8:	00db      	lsls	r3, r3, #3
 80014da:	4013      	ands	r3, r2
 80014dc:	d0f0      	beq.n	80014c0 <HAL_RCC_OscConfig+0x1ec>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014de:	4b49      	ldr	r3, [pc, #292]	; (8001604 <HAL_RCC_OscConfig+0x330>)
 80014e0:	685b      	ldr	r3, [r3, #4]
 80014e2:	4a4b      	ldr	r2, [pc, #300]	; (8001610 <HAL_RCC_OscConfig+0x33c>)
 80014e4:	4013      	ands	r3, r2
 80014e6:	0019      	movs	r1, r3
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	695b      	ldr	r3, [r3, #20]
 80014ec:	021a      	lsls	r2, r3, #8
 80014ee:	4b45      	ldr	r3, [pc, #276]	; (8001604 <HAL_RCC_OscConfig+0x330>)
 80014f0:	430a      	orrs	r2, r1
 80014f2:	605a      	str	r2, [r3, #4]
 80014f4:	e01b      	b.n	800152e <HAL_RCC_OscConfig+0x25a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 80014f6:	4b43      	ldr	r3, [pc, #268]	; (8001604 <HAL_RCC_OscConfig+0x330>)
 80014f8:	681a      	ldr	r2, [r3, #0]
 80014fa:	4b42      	ldr	r3, [pc, #264]	; (8001604 <HAL_RCC_OscConfig+0x330>)
 80014fc:	4949      	ldr	r1, [pc, #292]	; (8001624 <HAL_RCC_OscConfig+0x350>)
 80014fe:	400a      	ands	r2, r1
 8001500:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001502:	f7ff fc53 	bl	8000dac <HAL_GetTick>
 8001506:	0003      	movs	r3, r0
 8001508:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800150a:	e008      	b.n	800151e <HAL_RCC_OscConfig+0x24a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800150c:	f7ff fc4e 	bl	8000dac <HAL_GetTick>
 8001510:	0002      	movs	r2, r0
 8001512:	693b      	ldr	r3, [r7, #16]
 8001514:	1ad3      	subs	r3, r2, r3
 8001516:	2b02      	cmp	r3, #2
 8001518:	d901      	bls.n	800151e <HAL_RCC_OscConfig+0x24a>
          {
            return HAL_TIMEOUT;
 800151a:	2303      	movs	r3, #3
 800151c:	e234      	b.n	8001988 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800151e:	4b39      	ldr	r3, [pc, #228]	; (8001604 <HAL_RCC_OscConfig+0x330>)
 8001520:	681a      	ldr	r2, [r3, #0]
 8001522:	2380      	movs	r3, #128	; 0x80
 8001524:	00db      	lsls	r3, r3, #3
 8001526:	4013      	ands	r3, r2
 8001528:	d1f0      	bne.n	800150c <HAL_RCC_OscConfig+0x238>
 800152a:	e000      	b.n	800152e <HAL_RCC_OscConfig+0x25a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800152c:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	2208      	movs	r2, #8
 8001534:	4013      	ands	r3, r2
 8001536:	d047      	beq.n	80015c8 <HAL_RCC_OscConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001538:	4b32      	ldr	r3, [pc, #200]	; (8001604 <HAL_RCC_OscConfig+0x330>)
 800153a:	689b      	ldr	r3, [r3, #8]
 800153c:	2238      	movs	r2, #56	; 0x38
 800153e:	4013      	ands	r3, r2
 8001540:	2b18      	cmp	r3, #24
 8001542:	d10a      	bne.n	800155a <HAL_RCC_OscConfig+0x286>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8001544:	4b2f      	ldr	r3, [pc, #188]	; (8001604 <HAL_RCC_OscConfig+0x330>)
 8001546:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001548:	2202      	movs	r2, #2
 800154a:	4013      	ands	r3, r2
 800154c:	d03c      	beq.n	80015c8 <HAL_RCC_OscConfig+0x2f4>
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	699b      	ldr	r3, [r3, #24]
 8001552:	2b00      	cmp	r3, #0
 8001554:	d138      	bne.n	80015c8 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 8001556:	2301      	movs	r3, #1
 8001558:	e216      	b.n	8001988 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	699b      	ldr	r3, [r3, #24]
 800155e:	2b00      	cmp	r3, #0
 8001560:	d019      	beq.n	8001596 <HAL_RCC_OscConfig+0x2c2>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8001562:	4b28      	ldr	r3, [pc, #160]	; (8001604 <HAL_RCC_OscConfig+0x330>)
 8001564:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001566:	4b27      	ldr	r3, [pc, #156]	; (8001604 <HAL_RCC_OscConfig+0x330>)
 8001568:	2101      	movs	r1, #1
 800156a:	430a      	orrs	r2, r1
 800156c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800156e:	f7ff fc1d 	bl	8000dac <HAL_GetTick>
 8001572:	0003      	movs	r3, r0
 8001574:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001576:	e008      	b.n	800158a <HAL_RCC_OscConfig+0x2b6>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001578:	f7ff fc18 	bl	8000dac <HAL_GetTick>
 800157c:	0002      	movs	r2, r0
 800157e:	693b      	ldr	r3, [r7, #16]
 8001580:	1ad3      	subs	r3, r2, r3
 8001582:	2b02      	cmp	r3, #2
 8001584:	d901      	bls.n	800158a <HAL_RCC_OscConfig+0x2b6>
          {
            return HAL_TIMEOUT;
 8001586:	2303      	movs	r3, #3
 8001588:	e1fe      	b.n	8001988 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800158a:	4b1e      	ldr	r3, [pc, #120]	; (8001604 <HAL_RCC_OscConfig+0x330>)
 800158c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800158e:	2202      	movs	r2, #2
 8001590:	4013      	ands	r3, r2
 8001592:	d0f1      	beq.n	8001578 <HAL_RCC_OscConfig+0x2a4>
 8001594:	e018      	b.n	80015c8 <HAL_RCC_OscConfig+0x2f4>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8001596:	4b1b      	ldr	r3, [pc, #108]	; (8001604 <HAL_RCC_OscConfig+0x330>)
 8001598:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800159a:	4b1a      	ldr	r3, [pc, #104]	; (8001604 <HAL_RCC_OscConfig+0x330>)
 800159c:	2101      	movs	r1, #1
 800159e:	438a      	bics	r2, r1
 80015a0:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015a2:	f7ff fc03 	bl	8000dac <HAL_GetTick>
 80015a6:	0003      	movs	r3, r0
 80015a8:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80015aa:	e008      	b.n	80015be <HAL_RCC_OscConfig+0x2ea>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015ac:	f7ff fbfe 	bl	8000dac <HAL_GetTick>
 80015b0:	0002      	movs	r2, r0
 80015b2:	693b      	ldr	r3, [r7, #16]
 80015b4:	1ad3      	subs	r3, r2, r3
 80015b6:	2b02      	cmp	r3, #2
 80015b8:	d901      	bls.n	80015be <HAL_RCC_OscConfig+0x2ea>
          {
            return HAL_TIMEOUT;
 80015ba:	2303      	movs	r3, #3
 80015bc:	e1e4      	b.n	8001988 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80015be:	4b11      	ldr	r3, [pc, #68]	; (8001604 <HAL_RCC_OscConfig+0x330>)
 80015c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015c2:	2202      	movs	r2, #2
 80015c4:	4013      	ands	r3, r2
 80015c6:	d1f1      	bne.n	80015ac <HAL_RCC_OscConfig+0x2d8>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	2204      	movs	r2, #4
 80015ce:	4013      	ands	r3, r2
 80015d0:	d100      	bne.n	80015d4 <HAL_RCC_OscConfig+0x300>
 80015d2:	e0c7      	b.n	8001764 <HAL_RCC_OscConfig+0x490>
  {
    FlagStatus       pwrclkchanged = RESET;
 80015d4:	231f      	movs	r3, #31
 80015d6:	18fb      	adds	r3, r7, r3
 80015d8:	2200      	movs	r2, #0
 80015da:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80015dc:	4b09      	ldr	r3, [pc, #36]	; (8001604 <HAL_RCC_OscConfig+0x330>)
 80015de:	689b      	ldr	r3, [r3, #8]
 80015e0:	2238      	movs	r2, #56	; 0x38
 80015e2:	4013      	ands	r3, r2
 80015e4:	2b20      	cmp	r3, #32
 80015e6:	d11f      	bne.n	8001628 <HAL_RCC_OscConfig+0x354>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 80015e8:	4b06      	ldr	r3, [pc, #24]	; (8001604 <HAL_RCC_OscConfig+0x330>)
 80015ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015ec:	2202      	movs	r2, #2
 80015ee:	4013      	ands	r3, r2
 80015f0:	d100      	bne.n	80015f4 <HAL_RCC_OscConfig+0x320>
 80015f2:	e0b7      	b.n	8001764 <HAL_RCC_OscConfig+0x490>
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	689b      	ldr	r3, [r3, #8]
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d000      	beq.n	80015fe <HAL_RCC_OscConfig+0x32a>
 80015fc:	e0b2      	b.n	8001764 <HAL_RCC_OscConfig+0x490>
      {
        return HAL_ERROR;
 80015fe:	2301      	movs	r3, #1
 8001600:	e1c2      	b.n	8001988 <HAL_RCC_OscConfig+0x6b4>
 8001602:	46c0      	nop			; (mov r8, r8)
 8001604:	40021000 	.word	0x40021000
 8001608:	fffeffff 	.word	0xfffeffff
 800160c:	fffbffff 	.word	0xfffbffff
 8001610:	ffff80ff 	.word	0xffff80ff
 8001614:	ffffc7ff 	.word	0xffffc7ff
 8001618:	00f42400 	.word	0x00f42400
 800161c:	20000004 	.word	0x20000004
 8001620:	20000008 	.word	0x20000008
 8001624:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001628:	4bb5      	ldr	r3, [pc, #724]	; (8001900 <HAL_RCC_OscConfig+0x62c>)
 800162a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800162c:	2380      	movs	r3, #128	; 0x80
 800162e:	055b      	lsls	r3, r3, #21
 8001630:	4013      	ands	r3, r2
 8001632:	d101      	bne.n	8001638 <HAL_RCC_OscConfig+0x364>
 8001634:	2301      	movs	r3, #1
 8001636:	e000      	b.n	800163a <HAL_RCC_OscConfig+0x366>
 8001638:	2300      	movs	r3, #0
 800163a:	2b00      	cmp	r3, #0
 800163c:	d011      	beq.n	8001662 <HAL_RCC_OscConfig+0x38e>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800163e:	4bb0      	ldr	r3, [pc, #704]	; (8001900 <HAL_RCC_OscConfig+0x62c>)
 8001640:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001642:	4baf      	ldr	r3, [pc, #700]	; (8001900 <HAL_RCC_OscConfig+0x62c>)
 8001644:	2180      	movs	r1, #128	; 0x80
 8001646:	0549      	lsls	r1, r1, #21
 8001648:	430a      	orrs	r2, r1
 800164a:	63da      	str	r2, [r3, #60]	; 0x3c
 800164c:	4bac      	ldr	r3, [pc, #688]	; (8001900 <HAL_RCC_OscConfig+0x62c>)
 800164e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001650:	2380      	movs	r3, #128	; 0x80
 8001652:	055b      	lsls	r3, r3, #21
 8001654:	4013      	ands	r3, r2
 8001656:	60fb      	str	r3, [r7, #12]
 8001658:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 800165a:	231f      	movs	r3, #31
 800165c:	18fb      	adds	r3, r7, r3
 800165e:	2201      	movs	r2, #1
 8001660:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001662:	4ba8      	ldr	r3, [pc, #672]	; (8001904 <HAL_RCC_OscConfig+0x630>)
 8001664:	681a      	ldr	r2, [r3, #0]
 8001666:	2380      	movs	r3, #128	; 0x80
 8001668:	005b      	lsls	r3, r3, #1
 800166a:	4013      	ands	r3, r2
 800166c:	d11a      	bne.n	80016a4 <HAL_RCC_OscConfig+0x3d0>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800166e:	4ba5      	ldr	r3, [pc, #660]	; (8001904 <HAL_RCC_OscConfig+0x630>)
 8001670:	681a      	ldr	r2, [r3, #0]
 8001672:	4ba4      	ldr	r3, [pc, #656]	; (8001904 <HAL_RCC_OscConfig+0x630>)
 8001674:	2180      	movs	r1, #128	; 0x80
 8001676:	0049      	lsls	r1, r1, #1
 8001678:	430a      	orrs	r2, r1
 800167a:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 800167c:	f7ff fb96 	bl	8000dac <HAL_GetTick>
 8001680:	0003      	movs	r3, r0
 8001682:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001684:	e008      	b.n	8001698 <HAL_RCC_OscConfig+0x3c4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001686:	f7ff fb91 	bl	8000dac <HAL_GetTick>
 800168a:	0002      	movs	r2, r0
 800168c:	693b      	ldr	r3, [r7, #16]
 800168e:	1ad3      	subs	r3, r2, r3
 8001690:	2b02      	cmp	r3, #2
 8001692:	d901      	bls.n	8001698 <HAL_RCC_OscConfig+0x3c4>
          {
            return HAL_TIMEOUT;
 8001694:	2303      	movs	r3, #3
 8001696:	e177      	b.n	8001988 <HAL_RCC_OscConfig+0x6b4>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001698:	4b9a      	ldr	r3, [pc, #616]	; (8001904 <HAL_RCC_OscConfig+0x630>)
 800169a:	681a      	ldr	r2, [r3, #0]
 800169c:	2380      	movs	r3, #128	; 0x80
 800169e:	005b      	lsls	r3, r3, #1
 80016a0:	4013      	ands	r3, r2
 80016a2:	d0f0      	beq.n	8001686 <HAL_RCC_OscConfig+0x3b2>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	689b      	ldr	r3, [r3, #8]
 80016a8:	2b01      	cmp	r3, #1
 80016aa:	d106      	bne.n	80016ba <HAL_RCC_OscConfig+0x3e6>
 80016ac:	4b94      	ldr	r3, [pc, #592]	; (8001900 <HAL_RCC_OscConfig+0x62c>)
 80016ae:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80016b0:	4b93      	ldr	r3, [pc, #588]	; (8001900 <HAL_RCC_OscConfig+0x62c>)
 80016b2:	2101      	movs	r1, #1
 80016b4:	430a      	orrs	r2, r1
 80016b6:	65da      	str	r2, [r3, #92]	; 0x5c
 80016b8:	e01c      	b.n	80016f4 <HAL_RCC_OscConfig+0x420>
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	689b      	ldr	r3, [r3, #8]
 80016be:	2b05      	cmp	r3, #5
 80016c0:	d10c      	bne.n	80016dc <HAL_RCC_OscConfig+0x408>
 80016c2:	4b8f      	ldr	r3, [pc, #572]	; (8001900 <HAL_RCC_OscConfig+0x62c>)
 80016c4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80016c6:	4b8e      	ldr	r3, [pc, #568]	; (8001900 <HAL_RCC_OscConfig+0x62c>)
 80016c8:	2104      	movs	r1, #4
 80016ca:	430a      	orrs	r2, r1
 80016cc:	65da      	str	r2, [r3, #92]	; 0x5c
 80016ce:	4b8c      	ldr	r3, [pc, #560]	; (8001900 <HAL_RCC_OscConfig+0x62c>)
 80016d0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80016d2:	4b8b      	ldr	r3, [pc, #556]	; (8001900 <HAL_RCC_OscConfig+0x62c>)
 80016d4:	2101      	movs	r1, #1
 80016d6:	430a      	orrs	r2, r1
 80016d8:	65da      	str	r2, [r3, #92]	; 0x5c
 80016da:	e00b      	b.n	80016f4 <HAL_RCC_OscConfig+0x420>
 80016dc:	4b88      	ldr	r3, [pc, #544]	; (8001900 <HAL_RCC_OscConfig+0x62c>)
 80016de:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80016e0:	4b87      	ldr	r3, [pc, #540]	; (8001900 <HAL_RCC_OscConfig+0x62c>)
 80016e2:	2101      	movs	r1, #1
 80016e4:	438a      	bics	r2, r1
 80016e6:	65da      	str	r2, [r3, #92]	; 0x5c
 80016e8:	4b85      	ldr	r3, [pc, #532]	; (8001900 <HAL_RCC_OscConfig+0x62c>)
 80016ea:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80016ec:	4b84      	ldr	r3, [pc, #528]	; (8001900 <HAL_RCC_OscConfig+0x62c>)
 80016ee:	2104      	movs	r1, #4
 80016f0:	438a      	bics	r2, r1
 80016f2:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	689b      	ldr	r3, [r3, #8]
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d014      	beq.n	8001726 <HAL_RCC_OscConfig+0x452>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016fc:	f7ff fb56 	bl	8000dac <HAL_GetTick>
 8001700:	0003      	movs	r3, r0
 8001702:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001704:	e009      	b.n	800171a <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001706:	f7ff fb51 	bl	8000dac <HAL_GetTick>
 800170a:	0002      	movs	r2, r0
 800170c:	693b      	ldr	r3, [r7, #16]
 800170e:	1ad3      	subs	r3, r2, r3
 8001710:	4a7d      	ldr	r2, [pc, #500]	; (8001908 <HAL_RCC_OscConfig+0x634>)
 8001712:	4293      	cmp	r3, r2
 8001714:	d901      	bls.n	800171a <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 8001716:	2303      	movs	r3, #3
 8001718:	e136      	b.n	8001988 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800171a:	4b79      	ldr	r3, [pc, #484]	; (8001900 <HAL_RCC_OscConfig+0x62c>)
 800171c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800171e:	2202      	movs	r2, #2
 8001720:	4013      	ands	r3, r2
 8001722:	d0f0      	beq.n	8001706 <HAL_RCC_OscConfig+0x432>
 8001724:	e013      	b.n	800174e <HAL_RCC_OscConfig+0x47a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001726:	f7ff fb41 	bl	8000dac <HAL_GetTick>
 800172a:	0003      	movs	r3, r0
 800172c:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800172e:	e009      	b.n	8001744 <HAL_RCC_OscConfig+0x470>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001730:	f7ff fb3c 	bl	8000dac <HAL_GetTick>
 8001734:	0002      	movs	r2, r0
 8001736:	693b      	ldr	r3, [r7, #16]
 8001738:	1ad3      	subs	r3, r2, r3
 800173a:	4a73      	ldr	r2, [pc, #460]	; (8001908 <HAL_RCC_OscConfig+0x634>)
 800173c:	4293      	cmp	r3, r2
 800173e:	d901      	bls.n	8001744 <HAL_RCC_OscConfig+0x470>
          {
            return HAL_TIMEOUT;
 8001740:	2303      	movs	r3, #3
 8001742:	e121      	b.n	8001988 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001744:	4b6e      	ldr	r3, [pc, #440]	; (8001900 <HAL_RCC_OscConfig+0x62c>)
 8001746:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001748:	2202      	movs	r2, #2
 800174a:	4013      	ands	r3, r2
 800174c:	d1f0      	bne.n	8001730 <HAL_RCC_OscConfig+0x45c>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800174e:	231f      	movs	r3, #31
 8001750:	18fb      	adds	r3, r7, r3
 8001752:	781b      	ldrb	r3, [r3, #0]
 8001754:	2b01      	cmp	r3, #1
 8001756:	d105      	bne.n	8001764 <HAL_RCC_OscConfig+0x490>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8001758:	4b69      	ldr	r3, [pc, #420]	; (8001900 <HAL_RCC_OscConfig+0x62c>)
 800175a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800175c:	4b68      	ldr	r3, [pc, #416]	; (8001900 <HAL_RCC_OscConfig+0x62c>)
 800175e:	496b      	ldr	r1, [pc, #428]	; (800190c <HAL_RCC_OscConfig+0x638>)
 8001760:	400a      	ands	r2, r1
 8001762:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	2220      	movs	r2, #32
 800176a:	4013      	ands	r3, r2
 800176c:	d039      	beq.n	80017e2 <HAL_RCC_OscConfig+0x50e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	69db      	ldr	r3, [r3, #28]
 8001772:	2b00      	cmp	r3, #0
 8001774:	d01b      	beq.n	80017ae <HAL_RCC_OscConfig+0x4da>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001776:	4b62      	ldr	r3, [pc, #392]	; (8001900 <HAL_RCC_OscConfig+0x62c>)
 8001778:	681a      	ldr	r2, [r3, #0]
 800177a:	4b61      	ldr	r3, [pc, #388]	; (8001900 <HAL_RCC_OscConfig+0x62c>)
 800177c:	2180      	movs	r1, #128	; 0x80
 800177e:	03c9      	lsls	r1, r1, #15
 8001780:	430a      	orrs	r2, r1
 8001782:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001784:	f7ff fb12 	bl	8000dac <HAL_GetTick>
 8001788:	0003      	movs	r3, r0
 800178a:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800178c:	e008      	b.n	80017a0 <HAL_RCC_OscConfig+0x4cc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800178e:	f7ff fb0d 	bl	8000dac <HAL_GetTick>
 8001792:	0002      	movs	r2, r0
 8001794:	693b      	ldr	r3, [r7, #16]
 8001796:	1ad3      	subs	r3, r2, r3
 8001798:	2b02      	cmp	r3, #2
 800179a:	d901      	bls.n	80017a0 <HAL_RCC_OscConfig+0x4cc>
        {
          return HAL_TIMEOUT;
 800179c:	2303      	movs	r3, #3
 800179e:	e0f3      	b.n	8001988 <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80017a0:	4b57      	ldr	r3, [pc, #348]	; (8001900 <HAL_RCC_OscConfig+0x62c>)
 80017a2:	681a      	ldr	r2, [r3, #0]
 80017a4:	2380      	movs	r3, #128	; 0x80
 80017a6:	041b      	lsls	r3, r3, #16
 80017a8:	4013      	ands	r3, r2
 80017aa:	d0f0      	beq.n	800178e <HAL_RCC_OscConfig+0x4ba>
 80017ac:	e019      	b.n	80017e2 <HAL_RCC_OscConfig+0x50e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80017ae:	4b54      	ldr	r3, [pc, #336]	; (8001900 <HAL_RCC_OscConfig+0x62c>)
 80017b0:	681a      	ldr	r2, [r3, #0]
 80017b2:	4b53      	ldr	r3, [pc, #332]	; (8001900 <HAL_RCC_OscConfig+0x62c>)
 80017b4:	4956      	ldr	r1, [pc, #344]	; (8001910 <HAL_RCC_OscConfig+0x63c>)
 80017b6:	400a      	ands	r2, r1
 80017b8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017ba:	f7ff faf7 	bl	8000dac <HAL_GetTick>
 80017be:	0003      	movs	r3, r0
 80017c0:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80017c2:	e008      	b.n	80017d6 <HAL_RCC_OscConfig+0x502>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80017c4:	f7ff faf2 	bl	8000dac <HAL_GetTick>
 80017c8:	0002      	movs	r2, r0
 80017ca:	693b      	ldr	r3, [r7, #16]
 80017cc:	1ad3      	subs	r3, r2, r3
 80017ce:	2b02      	cmp	r3, #2
 80017d0:	d901      	bls.n	80017d6 <HAL_RCC_OscConfig+0x502>
        {
          return HAL_TIMEOUT;
 80017d2:	2303      	movs	r3, #3
 80017d4:	e0d8      	b.n	8001988 <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80017d6:	4b4a      	ldr	r3, [pc, #296]	; (8001900 <HAL_RCC_OscConfig+0x62c>)
 80017d8:	681a      	ldr	r2, [r3, #0]
 80017da:	2380      	movs	r3, #128	; 0x80
 80017dc:	041b      	lsls	r3, r3, #16
 80017de:	4013      	ands	r3, r2
 80017e0:	d1f0      	bne.n	80017c4 <HAL_RCC_OscConfig+0x4f0>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	6a1b      	ldr	r3, [r3, #32]
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d100      	bne.n	80017ec <HAL_RCC_OscConfig+0x518>
 80017ea:	e0cc      	b.n	8001986 <HAL_RCC_OscConfig+0x6b2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80017ec:	4b44      	ldr	r3, [pc, #272]	; (8001900 <HAL_RCC_OscConfig+0x62c>)
 80017ee:	689b      	ldr	r3, [r3, #8]
 80017f0:	2238      	movs	r2, #56	; 0x38
 80017f2:	4013      	ands	r3, r2
 80017f4:	2b10      	cmp	r3, #16
 80017f6:	d100      	bne.n	80017fa <HAL_RCC_OscConfig+0x526>
 80017f8:	e07b      	b.n	80018f2 <HAL_RCC_OscConfig+0x61e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	6a1b      	ldr	r3, [r3, #32]
 80017fe:	2b02      	cmp	r3, #2
 8001800:	d156      	bne.n	80018b0 <HAL_RCC_OscConfig+0x5dc>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001802:	4b3f      	ldr	r3, [pc, #252]	; (8001900 <HAL_RCC_OscConfig+0x62c>)
 8001804:	681a      	ldr	r2, [r3, #0]
 8001806:	4b3e      	ldr	r3, [pc, #248]	; (8001900 <HAL_RCC_OscConfig+0x62c>)
 8001808:	4942      	ldr	r1, [pc, #264]	; (8001914 <HAL_RCC_OscConfig+0x640>)
 800180a:	400a      	ands	r2, r1
 800180c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800180e:	f7ff facd 	bl	8000dac <HAL_GetTick>
 8001812:	0003      	movs	r3, r0
 8001814:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001816:	e008      	b.n	800182a <HAL_RCC_OscConfig+0x556>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001818:	f7ff fac8 	bl	8000dac <HAL_GetTick>
 800181c:	0002      	movs	r2, r0
 800181e:	693b      	ldr	r3, [r7, #16]
 8001820:	1ad3      	subs	r3, r2, r3
 8001822:	2b02      	cmp	r3, #2
 8001824:	d901      	bls.n	800182a <HAL_RCC_OscConfig+0x556>
          {
            return HAL_TIMEOUT;
 8001826:	2303      	movs	r3, #3
 8001828:	e0ae      	b.n	8001988 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800182a:	4b35      	ldr	r3, [pc, #212]	; (8001900 <HAL_RCC_OscConfig+0x62c>)
 800182c:	681a      	ldr	r2, [r3, #0]
 800182e:	2380      	movs	r3, #128	; 0x80
 8001830:	049b      	lsls	r3, r3, #18
 8001832:	4013      	ands	r3, r2
 8001834:	d1f0      	bne.n	8001818 <HAL_RCC_OscConfig+0x544>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001836:	4b32      	ldr	r3, [pc, #200]	; (8001900 <HAL_RCC_OscConfig+0x62c>)
 8001838:	68db      	ldr	r3, [r3, #12]
 800183a:	4a37      	ldr	r2, [pc, #220]	; (8001918 <HAL_RCC_OscConfig+0x644>)
 800183c:	4013      	ands	r3, r2
 800183e:	0019      	movs	r1, r3
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001848:	431a      	orrs	r2, r3
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800184e:	021b      	lsls	r3, r3, #8
 8001850:	431a      	orrs	r2, r3
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001856:	431a      	orrs	r2, r3
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800185c:	431a      	orrs	r2, r3
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001862:	431a      	orrs	r2, r3
 8001864:	4b26      	ldr	r3, [pc, #152]	; (8001900 <HAL_RCC_OscConfig+0x62c>)
 8001866:	430a      	orrs	r2, r1
 8001868:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800186a:	4b25      	ldr	r3, [pc, #148]	; (8001900 <HAL_RCC_OscConfig+0x62c>)
 800186c:	681a      	ldr	r2, [r3, #0]
 800186e:	4b24      	ldr	r3, [pc, #144]	; (8001900 <HAL_RCC_OscConfig+0x62c>)
 8001870:	2180      	movs	r1, #128	; 0x80
 8001872:	0449      	lsls	r1, r1, #17
 8001874:	430a      	orrs	r2, r1
 8001876:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8001878:	4b21      	ldr	r3, [pc, #132]	; (8001900 <HAL_RCC_OscConfig+0x62c>)
 800187a:	68da      	ldr	r2, [r3, #12]
 800187c:	4b20      	ldr	r3, [pc, #128]	; (8001900 <HAL_RCC_OscConfig+0x62c>)
 800187e:	2180      	movs	r1, #128	; 0x80
 8001880:	0549      	lsls	r1, r1, #21
 8001882:	430a      	orrs	r2, r1
 8001884:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001886:	f7ff fa91 	bl	8000dac <HAL_GetTick>
 800188a:	0003      	movs	r3, r0
 800188c:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800188e:	e008      	b.n	80018a2 <HAL_RCC_OscConfig+0x5ce>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001890:	f7ff fa8c 	bl	8000dac <HAL_GetTick>
 8001894:	0002      	movs	r2, r0
 8001896:	693b      	ldr	r3, [r7, #16]
 8001898:	1ad3      	subs	r3, r2, r3
 800189a:	2b02      	cmp	r3, #2
 800189c:	d901      	bls.n	80018a2 <HAL_RCC_OscConfig+0x5ce>
          {
            return HAL_TIMEOUT;
 800189e:	2303      	movs	r3, #3
 80018a0:	e072      	b.n	8001988 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80018a2:	4b17      	ldr	r3, [pc, #92]	; (8001900 <HAL_RCC_OscConfig+0x62c>)
 80018a4:	681a      	ldr	r2, [r3, #0]
 80018a6:	2380      	movs	r3, #128	; 0x80
 80018a8:	049b      	lsls	r3, r3, #18
 80018aa:	4013      	ands	r3, r2
 80018ac:	d0f0      	beq.n	8001890 <HAL_RCC_OscConfig+0x5bc>
 80018ae:	e06a      	b.n	8001986 <HAL_RCC_OscConfig+0x6b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018b0:	4b13      	ldr	r3, [pc, #76]	; (8001900 <HAL_RCC_OscConfig+0x62c>)
 80018b2:	681a      	ldr	r2, [r3, #0]
 80018b4:	4b12      	ldr	r3, [pc, #72]	; (8001900 <HAL_RCC_OscConfig+0x62c>)
 80018b6:	4917      	ldr	r1, [pc, #92]	; (8001914 <HAL_RCC_OscConfig+0x640>)
 80018b8:	400a      	ands	r2, r1
 80018ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018bc:	f7ff fa76 	bl	8000dac <HAL_GetTick>
 80018c0:	0003      	movs	r3, r0
 80018c2:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80018c4:	e008      	b.n	80018d8 <HAL_RCC_OscConfig+0x604>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018c6:	f7ff fa71 	bl	8000dac <HAL_GetTick>
 80018ca:	0002      	movs	r2, r0
 80018cc:	693b      	ldr	r3, [r7, #16]
 80018ce:	1ad3      	subs	r3, r2, r3
 80018d0:	2b02      	cmp	r3, #2
 80018d2:	d901      	bls.n	80018d8 <HAL_RCC_OscConfig+0x604>
          {
            return HAL_TIMEOUT;
 80018d4:	2303      	movs	r3, #3
 80018d6:	e057      	b.n	8001988 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80018d8:	4b09      	ldr	r3, [pc, #36]	; (8001900 <HAL_RCC_OscConfig+0x62c>)
 80018da:	681a      	ldr	r2, [r3, #0]
 80018dc:	2380      	movs	r3, #128	; 0x80
 80018de:	049b      	lsls	r3, r3, #18
 80018e0:	4013      	ands	r3, r2
 80018e2:	d1f0      	bne.n	80018c6 <HAL_RCC_OscConfig+0x5f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 80018e4:	4b06      	ldr	r3, [pc, #24]	; (8001900 <HAL_RCC_OscConfig+0x62c>)
 80018e6:	68da      	ldr	r2, [r3, #12]
 80018e8:	4b05      	ldr	r3, [pc, #20]	; (8001900 <HAL_RCC_OscConfig+0x62c>)
 80018ea:	490c      	ldr	r1, [pc, #48]	; (800191c <HAL_RCC_OscConfig+0x648>)
 80018ec:	400a      	ands	r2, r1
 80018ee:	60da      	str	r2, [r3, #12]
 80018f0:	e049      	b.n	8001986 <HAL_RCC_OscConfig+0x6b2>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	6a1b      	ldr	r3, [r3, #32]
 80018f6:	2b01      	cmp	r3, #1
 80018f8:	d112      	bne.n	8001920 <HAL_RCC_OscConfig+0x64c>
      {
        return HAL_ERROR;
 80018fa:	2301      	movs	r3, #1
 80018fc:	e044      	b.n	8001988 <HAL_RCC_OscConfig+0x6b4>
 80018fe:	46c0      	nop			; (mov r8, r8)
 8001900:	40021000 	.word	0x40021000
 8001904:	40007000 	.word	0x40007000
 8001908:	00001388 	.word	0x00001388
 800190c:	efffffff 	.word	0xefffffff
 8001910:	ffbfffff 	.word	0xffbfffff
 8001914:	feffffff 	.word	0xfeffffff
 8001918:	11c1808c 	.word	0x11c1808c
 800191c:	eefefffc 	.word	0xeefefffc
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8001920:	4b1b      	ldr	r3, [pc, #108]	; (8001990 <HAL_RCC_OscConfig+0x6bc>)
 8001922:	68db      	ldr	r3, [r3, #12]
 8001924:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001926:	697b      	ldr	r3, [r7, #20]
 8001928:	2203      	movs	r2, #3
 800192a:	401a      	ands	r2, r3
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001930:	429a      	cmp	r2, r3
 8001932:	d126      	bne.n	8001982 <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001934:	697b      	ldr	r3, [r7, #20]
 8001936:	2270      	movs	r2, #112	; 0x70
 8001938:	401a      	ands	r2, r3
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800193e:	429a      	cmp	r2, r3
 8001940:	d11f      	bne.n	8001982 <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001942:	697a      	ldr	r2, [r7, #20]
 8001944:	23fe      	movs	r3, #254	; 0xfe
 8001946:	01db      	lsls	r3, r3, #7
 8001948:	401a      	ands	r2, r3
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800194e:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001950:	429a      	cmp	r2, r3
 8001952:	d116      	bne.n	8001982 <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001954:	697a      	ldr	r2, [r7, #20]
 8001956:	23f8      	movs	r3, #248	; 0xf8
 8001958:	039b      	lsls	r3, r3, #14
 800195a:	401a      	ands	r2, r3
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001960:	429a      	cmp	r2, r3
 8001962:	d10e      	bne.n	8001982 <HAL_RCC_OscConfig+0x6ae>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001964:	697a      	ldr	r2, [r7, #20]
 8001966:	23e0      	movs	r3, #224	; 0xe0
 8001968:	051b      	lsls	r3, r3, #20
 800196a:	401a      	ands	r2, r3
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001970:	429a      	cmp	r2, r3
 8001972:	d106      	bne.n	8001982 <HAL_RCC_OscConfig+0x6ae>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8001974:	697b      	ldr	r3, [r7, #20]
 8001976:	0f5b      	lsrs	r3, r3, #29
 8001978:	075a      	lsls	r2, r3, #29
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800197e:	429a      	cmp	r2, r3
 8001980:	d001      	beq.n	8001986 <HAL_RCC_OscConfig+0x6b2>
        {
          return HAL_ERROR;
 8001982:	2301      	movs	r3, #1
 8001984:	e000      	b.n	8001988 <HAL_RCC_OscConfig+0x6b4>
        }
      }
    }
  }
  return HAL_OK;
 8001986:	2300      	movs	r3, #0
}
 8001988:	0018      	movs	r0, r3
 800198a:	46bd      	mov	sp, r7
 800198c:	b008      	add	sp, #32
 800198e:	bd80      	pop	{r7, pc}
 8001990:	40021000 	.word	0x40021000

08001994 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b084      	sub	sp, #16
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
 800199c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d101      	bne.n	80019a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80019a4:	2301      	movs	r3, #1
 80019a6:	e0e9      	b.n	8001b7c <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80019a8:	4b76      	ldr	r3, [pc, #472]	; (8001b84 <HAL_RCC_ClockConfig+0x1f0>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	2207      	movs	r2, #7
 80019ae:	4013      	ands	r3, r2
 80019b0:	683a      	ldr	r2, [r7, #0]
 80019b2:	429a      	cmp	r2, r3
 80019b4:	d91e      	bls.n	80019f4 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019b6:	4b73      	ldr	r3, [pc, #460]	; (8001b84 <HAL_RCC_ClockConfig+0x1f0>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	2207      	movs	r2, #7
 80019bc:	4393      	bics	r3, r2
 80019be:	0019      	movs	r1, r3
 80019c0:	4b70      	ldr	r3, [pc, #448]	; (8001b84 <HAL_RCC_ClockConfig+0x1f0>)
 80019c2:	683a      	ldr	r2, [r7, #0]
 80019c4:	430a      	orrs	r2, r1
 80019c6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80019c8:	f7ff f9f0 	bl	8000dac <HAL_GetTick>
 80019cc:	0003      	movs	r3, r0
 80019ce:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80019d0:	e009      	b.n	80019e6 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019d2:	f7ff f9eb 	bl	8000dac <HAL_GetTick>
 80019d6:	0002      	movs	r2, r0
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	1ad3      	subs	r3, r2, r3
 80019dc:	4a6a      	ldr	r2, [pc, #424]	; (8001b88 <HAL_RCC_ClockConfig+0x1f4>)
 80019de:	4293      	cmp	r3, r2
 80019e0:	d901      	bls.n	80019e6 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80019e2:	2303      	movs	r3, #3
 80019e4:	e0ca      	b.n	8001b7c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80019e6:	4b67      	ldr	r3, [pc, #412]	; (8001b84 <HAL_RCC_ClockConfig+0x1f0>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	2207      	movs	r2, #7
 80019ec:	4013      	ands	r3, r2
 80019ee:	683a      	ldr	r2, [r7, #0]
 80019f0:	429a      	cmp	r2, r3
 80019f2:	d1ee      	bne.n	80019d2 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	2202      	movs	r2, #2
 80019fa:	4013      	ands	r3, r2
 80019fc:	d015      	beq.n	8001a2a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	2204      	movs	r2, #4
 8001a04:	4013      	ands	r3, r2
 8001a06:	d006      	beq.n	8001a16 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001a08:	4b60      	ldr	r3, [pc, #384]	; (8001b8c <HAL_RCC_ClockConfig+0x1f8>)
 8001a0a:	689a      	ldr	r2, [r3, #8]
 8001a0c:	4b5f      	ldr	r3, [pc, #380]	; (8001b8c <HAL_RCC_ClockConfig+0x1f8>)
 8001a0e:	21e0      	movs	r1, #224	; 0xe0
 8001a10:	01c9      	lsls	r1, r1, #7
 8001a12:	430a      	orrs	r2, r1
 8001a14:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a16:	4b5d      	ldr	r3, [pc, #372]	; (8001b8c <HAL_RCC_ClockConfig+0x1f8>)
 8001a18:	689b      	ldr	r3, [r3, #8]
 8001a1a:	4a5d      	ldr	r2, [pc, #372]	; (8001b90 <HAL_RCC_ClockConfig+0x1fc>)
 8001a1c:	4013      	ands	r3, r2
 8001a1e:	0019      	movs	r1, r3
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	689a      	ldr	r2, [r3, #8]
 8001a24:	4b59      	ldr	r3, [pc, #356]	; (8001b8c <HAL_RCC_ClockConfig+0x1f8>)
 8001a26:	430a      	orrs	r2, r1
 8001a28:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	2201      	movs	r2, #1
 8001a30:	4013      	ands	r3, r2
 8001a32:	d057      	beq.n	8001ae4 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	685b      	ldr	r3, [r3, #4]
 8001a38:	2b01      	cmp	r3, #1
 8001a3a:	d107      	bne.n	8001a4c <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a3c:	4b53      	ldr	r3, [pc, #332]	; (8001b8c <HAL_RCC_ClockConfig+0x1f8>)
 8001a3e:	681a      	ldr	r2, [r3, #0]
 8001a40:	2380      	movs	r3, #128	; 0x80
 8001a42:	029b      	lsls	r3, r3, #10
 8001a44:	4013      	ands	r3, r2
 8001a46:	d12b      	bne.n	8001aa0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001a48:	2301      	movs	r3, #1
 8001a4a:	e097      	b.n	8001b7c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	685b      	ldr	r3, [r3, #4]
 8001a50:	2b02      	cmp	r3, #2
 8001a52:	d107      	bne.n	8001a64 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a54:	4b4d      	ldr	r3, [pc, #308]	; (8001b8c <HAL_RCC_ClockConfig+0x1f8>)
 8001a56:	681a      	ldr	r2, [r3, #0]
 8001a58:	2380      	movs	r3, #128	; 0x80
 8001a5a:	049b      	lsls	r3, r3, #18
 8001a5c:	4013      	ands	r3, r2
 8001a5e:	d11f      	bne.n	8001aa0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001a60:	2301      	movs	r3, #1
 8001a62:	e08b      	b.n	8001b7c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	685b      	ldr	r3, [r3, #4]
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d107      	bne.n	8001a7c <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a6c:	4b47      	ldr	r3, [pc, #284]	; (8001b8c <HAL_RCC_ClockConfig+0x1f8>)
 8001a6e:	681a      	ldr	r2, [r3, #0]
 8001a70:	2380      	movs	r3, #128	; 0x80
 8001a72:	00db      	lsls	r3, r3, #3
 8001a74:	4013      	ands	r3, r2
 8001a76:	d113      	bne.n	8001aa0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001a78:	2301      	movs	r3, #1
 8001a7a:	e07f      	b.n	8001b7c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	685b      	ldr	r3, [r3, #4]
 8001a80:	2b03      	cmp	r3, #3
 8001a82:	d106      	bne.n	8001a92 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001a84:	4b41      	ldr	r3, [pc, #260]	; (8001b8c <HAL_RCC_ClockConfig+0x1f8>)
 8001a86:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a88:	2202      	movs	r2, #2
 8001a8a:	4013      	ands	r3, r2
 8001a8c:	d108      	bne.n	8001aa0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001a8e:	2301      	movs	r3, #1
 8001a90:	e074      	b.n	8001b7c <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001a92:	4b3e      	ldr	r3, [pc, #248]	; (8001b8c <HAL_RCC_ClockConfig+0x1f8>)
 8001a94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a96:	2202      	movs	r2, #2
 8001a98:	4013      	ands	r3, r2
 8001a9a:	d101      	bne.n	8001aa0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001a9c:	2301      	movs	r3, #1
 8001a9e:	e06d      	b.n	8001b7c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001aa0:	4b3a      	ldr	r3, [pc, #232]	; (8001b8c <HAL_RCC_ClockConfig+0x1f8>)
 8001aa2:	689b      	ldr	r3, [r3, #8]
 8001aa4:	2207      	movs	r2, #7
 8001aa6:	4393      	bics	r3, r2
 8001aa8:	0019      	movs	r1, r3
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	685a      	ldr	r2, [r3, #4]
 8001aae:	4b37      	ldr	r3, [pc, #220]	; (8001b8c <HAL_RCC_ClockConfig+0x1f8>)
 8001ab0:	430a      	orrs	r2, r1
 8001ab2:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001ab4:	f7ff f97a 	bl	8000dac <HAL_GetTick>
 8001ab8:	0003      	movs	r3, r0
 8001aba:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001abc:	e009      	b.n	8001ad2 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001abe:	f7ff f975 	bl	8000dac <HAL_GetTick>
 8001ac2:	0002      	movs	r2, r0
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	1ad3      	subs	r3, r2, r3
 8001ac8:	4a2f      	ldr	r2, [pc, #188]	; (8001b88 <HAL_RCC_ClockConfig+0x1f4>)
 8001aca:	4293      	cmp	r3, r2
 8001acc:	d901      	bls.n	8001ad2 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8001ace:	2303      	movs	r3, #3
 8001ad0:	e054      	b.n	8001b7c <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ad2:	4b2e      	ldr	r3, [pc, #184]	; (8001b8c <HAL_RCC_ClockConfig+0x1f8>)
 8001ad4:	689b      	ldr	r3, [r3, #8]
 8001ad6:	2238      	movs	r2, #56	; 0x38
 8001ad8:	401a      	ands	r2, r3
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	685b      	ldr	r3, [r3, #4]
 8001ade:	00db      	lsls	r3, r3, #3
 8001ae0:	429a      	cmp	r2, r3
 8001ae2:	d1ec      	bne.n	8001abe <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001ae4:	4b27      	ldr	r3, [pc, #156]	; (8001b84 <HAL_RCC_ClockConfig+0x1f0>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	2207      	movs	r2, #7
 8001aea:	4013      	ands	r3, r2
 8001aec:	683a      	ldr	r2, [r7, #0]
 8001aee:	429a      	cmp	r2, r3
 8001af0:	d21e      	bcs.n	8001b30 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001af2:	4b24      	ldr	r3, [pc, #144]	; (8001b84 <HAL_RCC_ClockConfig+0x1f0>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	2207      	movs	r2, #7
 8001af8:	4393      	bics	r3, r2
 8001afa:	0019      	movs	r1, r3
 8001afc:	4b21      	ldr	r3, [pc, #132]	; (8001b84 <HAL_RCC_ClockConfig+0x1f0>)
 8001afe:	683a      	ldr	r2, [r7, #0]
 8001b00:	430a      	orrs	r2, r1
 8001b02:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001b04:	f7ff f952 	bl	8000dac <HAL_GetTick>
 8001b08:	0003      	movs	r3, r0
 8001b0a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001b0c:	e009      	b.n	8001b22 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b0e:	f7ff f94d 	bl	8000dac <HAL_GetTick>
 8001b12:	0002      	movs	r2, r0
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	1ad3      	subs	r3, r2, r3
 8001b18:	4a1b      	ldr	r2, [pc, #108]	; (8001b88 <HAL_RCC_ClockConfig+0x1f4>)
 8001b1a:	4293      	cmp	r3, r2
 8001b1c:	d901      	bls.n	8001b22 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8001b1e:	2303      	movs	r3, #3
 8001b20:	e02c      	b.n	8001b7c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001b22:	4b18      	ldr	r3, [pc, #96]	; (8001b84 <HAL_RCC_ClockConfig+0x1f0>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	2207      	movs	r2, #7
 8001b28:	4013      	ands	r3, r2
 8001b2a:	683a      	ldr	r2, [r7, #0]
 8001b2c:	429a      	cmp	r2, r3
 8001b2e:	d1ee      	bne.n	8001b0e <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	2204      	movs	r2, #4
 8001b36:	4013      	ands	r3, r2
 8001b38:	d009      	beq.n	8001b4e <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001b3a:	4b14      	ldr	r3, [pc, #80]	; (8001b8c <HAL_RCC_ClockConfig+0x1f8>)
 8001b3c:	689b      	ldr	r3, [r3, #8]
 8001b3e:	4a15      	ldr	r2, [pc, #84]	; (8001b94 <HAL_RCC_ClockConfig+0x200>)
 8001b40:	4013      	ands	r3, r2
 8001b42:	0019      	movs	r1, r3
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	68da      	ldr	r2, [r3, #12]
 8001b48:	4b10      	ldr	r3, [pc, #64]	; (8001b8c <HAL_RCC_ClockConfig+0x1f8>)
 8001b4a:	430a      	orrs	r2, r1
 8001b4c:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001b4e:	f000 f829 	bl	8001ba4 <HAL_RCC_GetSysClockFreq>
 8001b52:	0001      	movs	r1, r0
 8001b54:	4b0d      	ldr	r3, [pc, #52]	; (8001b8c <HAL_RCC_ClockConfig+0x1f8>)
 8001b56:	689b      	ldr	r3, [r3, #8]
 8001b58:	0a1b      	lsrs	r3, r3, #8
 8001b5a:	220f      	movs	r2, #15
 8001b5c:	401a      	ands	r2, r3
 8001b5e:	4b0e      	ldr	r3, [pc, #56]	; (8001b98 <HAL_RCC_ClockConfig+0x204>)
 8001b60:	0092      	lsls	r2, r2, #2
 8001b62:	58d3      	ldr	r3, [r2, r3]
 8001b64:	221f      	movs	r2, #31
 8001b66:	4013      	ands	r3, r2
 8001b68:	000a      	movs	r2, r1
 8001b6a:	40da      	lsrs	r2, r3
 8001b6c:	4b0b      	ldr	r3, [pc, #44]	; (8001b9c <HAL_RCC_ClockConfig+0x208>)
 8001b6e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001b70:	4b0b      	ldr	r3, [pc, #44]	; (8001ba0 <HAL_RCC_ClockConfig+0x20c>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	0018      	movs	r0, r3
 8001b76:	f7ff f8bd 	bl	8000cf4 <HAL_InitTick>
 8001b7a:	0003      	movs	r3, r0
}
 8001b7c:	0018      	movs	r0, r3
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	b004      	add	sp, #16
 8001b82:	bd80      	pop	{r7, pc}
 8001b84:	40022000 	.word	0x40022000
 8001b88:	00001388 	.word	0x00001388
 8001b8c:	40021000 	.word	0x40021000
 8001b90:	fffff0ff 	.word	0xfffff0ff
 8001b94:	ffff8fff 	.word	0xffff8fff
 8001b98:	08003208 	.word	0x08003208
 8001b9c:	20000004 	.word	0x20000004
 8001ba0:	20000008 	.word	0x20000008

08001ba4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b086      	sub	sp, #24
 8001ba8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001baa:	4b3c      	ldr	r3, [pc, #240]	; (8001c9c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001bac:	689b      	ldr	r3, [r3, #8]
 8001bae:	2238      	movs	r2, #56	; 0x38
 8001bb0:	4013      	ands	r3, r2
 8001bb2:	d10f      	bne.n	8001bd4 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001bb4:	4b39      	ldr	r3, [pc, #228]	; (8001c9c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	0adb      	lsrs	r3, r3, #11
 8001bba:	2207      	movs	r2, #7
 8001bbc:	4013      	ands	r3, r2
 8001bbe:	2201      	movs	r2, #1
 8001bc0:	409a      	lsls	r2, r3
 8001bc2:	0013      	movs	r3, r2
 8001bc4:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8001bc6:	6839      	ldr	r1, [r7, #0]
 8001bc8:	4835      	ldr	r0, [pc, #212]	; (8001ca0 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001bca:	f7fe faa3 	bl	8000114 <__udivsi3>
 8001bce:	0003      	movs	r3, r0
 8001bd0:	613b      	str	r3, [r7, #16]
 8001bd2:	e05d      	b.n	8001c90 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001bd4:	4b31      	ldr	r3, [pc, #196]	; (8001c9c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001bd6:	689b      	ldr	r3, [r3, #8]
 8001bd8:	2238      	movs	r2, #56	; 0x38
 8001bda:	4013      	ands	r3, r2
 8001bdc:	2b08      	cmp	r3, #8
 8001bde:	d102      	bne.n	8001be6 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001be0:	4b30      	ldr	r3, [pc, #192]	; (8001ca4 <HAL_RCC_GetSysClockFreq+0x100>)
 8001be2:	613b      	str	r3, [r7, #16]
 8001be4:	e054      	b.n	8001c90 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001be6:	4b2d      	ldr	r3, [pc, #180]	; (8001c9c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001be8:	689b      	ldr	r3, [r3, #8]
 8001bea:	2238      	movs	r2, #56	; 0x38
 8001bec:	4013      	ands	r3, r2
 8001bee:	2b10      	cmp	r3, #16
 8001bf0:	d138      	bne.n	8001c64 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8001bf2:	4b2a      	ldr	r3, [pc, #168]	; (8001c9c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001bf4:	68db      	ldr	r3, [r3, #12]
 8001bf6:	2203      	movs	r2, #3
 8001bf8:	4013      	ands	r3, r2
 8001bfa:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001bfc:	4b27      	ldr	r3, [pc, #156]	; (8001c9c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001bfe:	68db      	ldr	r3, [r3, #12]
 8001c00:	091b      	lsrs	r3, r3, #4
 8001c02:	2207      	movs	r2, #7
 8001c04:	4013      	ands	r3, r2
 8001c06:	3301      	adds	r3, #1
 8001c08:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	2b03      	cmp	r3, #3
 8001c0e:	d10d      	bne.n	8001c2c <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001c10:	68b9      	ldr	r1, [r7, #8]
 8001c12:	4824      	ldr	r0, [pc, #144]	; (8001ca4 <HAL_RCC_GetSysClockFreq+0x100>)
 8001c14:	f7fe fa7e 	bl	8000114 <__udivsi3>
 8001c18:	0003      	movs	r3, r0
 8001c1a:	0019      	movs	r1, r3
 8001c1c:	4b1f      	ldr	r3, [pc, #124]	; (8001c9c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001c1e:	68db      	ldr	r3, [r3, #12]
 8001c20:	0a1b      	lsrs	r3, r3, #8
 8001c22:	227f      	movs	r2, #127	; 0x7f
 8001c24:	4013      	ands	r3, r2
 8001c26:	434b      	muls	r3, r1
 8001c28:	617b      	str	r3, [r7, #20]
        break;
 8001c2a:	e00d      	b.n	8001c48 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8001c2c:	68b9      	ldr	r1, [r7, #8]
 8001c2e:	481c      	ldr	r0, [pc, #112]	; (8001ca0 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001c30:	f7fe fa70 	bl	8000114 <__udivsi3>
 8001c34:	0003      	movs	r3, r0
 8001c36:	0019      	movs	r1, r3
 8001c38:	4b18      	ldr	r3, [pc, #96]	; (8001c9c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001c3a:	68db      	ldr	r3, [r3, #12]
 8001c3c:	0a1b      	lsrs	r3, r3, #8
 8001c3e:	227f      	movs	r2, #127	; 0x7f
 8001c40:	4013      	ands	r3, r2
 8001c42:	434b      	muls	r3, r1
 8001c44:	617b      	str	r3, [r7, #20]
        break;
 8001c46:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8001c48:	4b14      	ldr	r3, [pc, #80]	; (8001c9c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001c4a:	68db      	ldr	r3, [r3, #12]
 8001c4c:	0f5b      	lsrs	r3, r3, #29
 8001c4e:	2207      	movs	r2, #7
 8001c50:	4013      	ands	r3, r2
 8001c52:	3301      	adds	r3, #1
 8001c54:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8001c56:	6879      	ldr	r1, [r7, #4]
 8001c58:	6978      	ldr	r0, [r7, #20]
 8001c5a:	f7fe fa5b 	bl	8000114 <__udivsi3>
 8001c5e:	0003      	movs	r3, r0
 8001c60:	613b      	str	r3, [r7, #16]
 8001c62:	e015      	b.n	8001c90 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001c64:	4b0d      	ldr	r3, [pc, #52]	; (8001c9c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001c66:	689b      	ldr	r3, [r3, #8]
 8001c68:	2238      	movs	r2, #56	; 0x38
 8001c6a:	4013      	ands	r3, r2
 8001c6c:	2b20      	cmp	r3, #32
 8001c6e:	d103      	bne.n	8001c78 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8001c70:	2380      	movs	r3, #128	; 0x80
 8001c72:	021b      	lsls	r3, r3, #8
 8001c74:	613b      	str	r3, [r7, #16]
 8001c76:	e00b      	b.n	8001c90 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001c78:	4b08      	ldr	r3, [pc, #32]	; (8001c9c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001c7a:	689b      	ldr	r3, [r3, #8]
 8001c7c:	2238      	movs	r2, #56	; 0x38
 8001c7e:	4013      	ands	r3, r2
 8001c80:	2b18      	cmp	r3, #24
 8001c82:	d103      	bne.n	8001c8c <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8001c84:	23fa      	movs	r3, #250	; 0xfa
 8001c86:	01db      	lsls	r3, r3, #7
 8001c88:	613b      	str	r3, [r7, #16]
 8001c8a:	e001      	b.n	8001c90 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001c90:	693b      	ldr	r3, [r7, #16]
}
 8001c92:	0018      	movs	r0, r3
 8001c94:	46bd      	mov	sp, r7
 8001c96:	b006      	add	sp, #24
 8001c98:	bd80      	pop	{r7, pc}
 8001c9a:	46c0      	nop			; (mov r8, r8)
 8001c9c:	40021000 	.word	0x40021000
 8001ca0:	00f42400 	.word	0x00f42400
 8001ca4:	007a1200 	.word	0x007a1200

08001ca8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001cac:	4b02      	ldr	r3, [pc, #8]	; (8001cb8 <HAL_RCC_GetHCLKFreq+0x10>)
 8001cae:	681b      	ldr	r3, [r3, #0]
}
 8001cb0:	0018      	movs	r0, r3
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bd80      	pop	{r7, pc}
 8001cb6:	46c0      	nop			; (mov r8, r8)
 8001cb8:	20000004 	.word	0x20000004

08001cbc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001cbc:	b5b0      	push	{r4, r5, r7, lr}
 8001cbe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8001cc0:	f7ff fff2 	bl	8001ca8 <HAL_RCC_GetHCLKFreq>
 8001cc4:	0004      	movs	r4, r0
 8001cc6:	f7ff faf9 	bl	80012bc <LL_RCC_GetAPB1Prescaler>
 8001cca:	0003      	movs	r3, r0
 8001ccc:	0b1a      	lsrs	r2, r3, #12
 8001cce:	4b05      	ldr	r3, [pc, #20]	; (8001ce4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001cd0:	0092      	lsls	r2, r2, #2
 8001cd2:	58d3      	ldr	r3, [r2, r3]
 8001cd4:	221f      	movs	r2, #31
 8001cd6:	4013      	ands	r3, r2
 8001cd8:	40dc      	lsrs	r4, r3
 8001cda:	0023      	movs	r3, r4
}
 8001cdc:	0018      	movs	r0, r3
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bdb0      	pop	{r4, r5, r7, pc}
 8001ce2:	46c0      	nop			; (mov r8, r8)
 8001ce4:	08003248 	.word	0x08003248

08001ce8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b086      	sub	sp, #24
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8001cf0:	2313      	movs	r3, #19
 8001cf2:	18fb      	adds	r3, r7, r3
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001cf8:	2312      	movs	r3, #18
 8001cfa:	18fb      	adds	r3, r7, r3
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681a      	ldr	r2, [r3, #0]
 8001d04:	2380      	movs	r3, #128	; 0x80
 8001d06:	029b      	lsls	r3, r3, #10
 8001d08:	4013      	ands	r3, r2
 8001d0a:	d100      	bne.n	8001d0e <HAL_RCCEx_PeriphCLKConfig+0x26>
 8001d0c:	e0ad      	b.n	8001e6a <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d0e:	2011      	movs	r0, #17
 8001d10:	183b      	adds	r3, r7, r0
 8001d12:	2200      	movs	r2, #0
 8001d14:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d16:	4b47      	ldr	r3, [pc, #284]	; (8001e34 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001d18:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001d1a:	2380      	movs	r3, #128	; 0x80
 8001d1c:	055b      	lsls	r3, r3, #21
 8001d1e:	4013      	ands	r3, r2
 8001d20:	d110      	bne.n	8001d44 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d22:	4b44      	ldr	r3, [pc, #272]	; (8001e34 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001d24:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001d26:	4b43      	ldr	r3, [pc, #268]	; (8001e34 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001d28:	2180      	movs	r1, #128	; 0x80
 8001d2a:	0549      	lsls	r1, r1, #21
 8001d2c:	430a      	orrs	r2, r1
 8001d2e:	63da      	str	r2, [r3, #60]	; 0x3c
 8001d30:	4b40      	ldr	r3, [pc, #256]	; (8001e34 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001d32:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001d34:	2380      	movs	r3, #128	; 0x80
 8001d36:	055b      	lsls	r3, r3, #21
 8001d38:	4013      	ands	r3, r2
 8001d3a:	60bb      	str	r3, [r7, #8]
 8001d3c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d3e:	183b      	adds	r3, r7, r0
 8001d40:	2201      	movs	r2, #1
 8001d42:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001d44:	4b3c      	ldr	r3, [pc, #240]	; (8001e38 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8001d46:	681a      	ldr	r2, [r3, #0]
 8001d48:	4b3b      	ldr	r3, [pc, #236]	; (8001e38 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8001d4a:	2180      	movs	r1, #128	; 0x80
 8001d4c:	0049      	lsls	r1, r1, #1
 8001d4e:	430a      	orrs	r2, r1
 8001d50:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001d52:	f7ff f82b 	bl	8000dac <HAL_GetTick>
 8001d56:	0003      	movs	r3, r0
 8001d58:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001d5a:	e00b      	b.n	8001d74 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d5c:	f7ff f826 	bl	8000dac <HAL_GetTick>
 8001d60:	0002      	movs	r2, r0
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	1ad3      	subs	r3, r2, r3
 8001d66:	2b02      	cmp	r3, #2
 8001d68:	d904      	bls.n	8001d74 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8001d6a:	2313      	movs	r3, #19
 8001d6c:	18fb      	adds	r3, r7, r3
 8001d6e:	2203      	movs	r2, #3
 8001d70:	701a      	strb	r2, [r3, #0]
        break;
 8001d72:	e005      	b.n	8001d80 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001d74:	4b30      	ldr	r3, [pc, #192]	; (8001e38 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8001d76:	681a      	ldr	r2, [r3, #0]
 8001d78:	2380      	movs	r3, #128	; 0x80
 8001d7a:	005b      	lsls	r3, r3, #1
 8001d7c:	4013      	ands	r3, r2
 8001d7e:	d0ed      	beq.n	8001d5c <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8001d80:	2313      	movs	r3, #19
 8001d82:	18fb      	adds	r3, r7, r3
 8001d84:	781b      	ldrb	r3, [r3, #0]
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d15e      	bne.n	8001e48 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001d8a:	4b2a      	ldr	r3, [pc, #168]	; (8001e34 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001d8c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001d8e:	23c0      	movs	r3, #192	; 0xc0
 8001d90:	009b      	lsls	r3, r3, #2
 8001d92:	4013      	ands	r3, r2
 8001d94:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001d96:	697b      	ldr	r3, [r7, #20]
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d019      	beq.n	8001dd0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001da0:	697a      	ldr	r2, [r7, #20]
 8001da2:	429a      	cmp	r2, r3
 8001da4:	d014      	beq.n	8001dd0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001da6:	4b23      	ldr	r3, [pc, #140]	; (8001e34 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001da8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001daa:	4a24      	ldr	r2, [pc, #144]	; (8001e3c <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8001dac:	4013      	ands	r3, r2
 8001dae:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001db0:	4b20      	ldr	r3, [pc, #128]	; (8001e34 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001db2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001db4:	4b1f      	ldr	r3, [pc, #124]	; (8001e34 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001db6:	2180      	movs	r1, #128	; 0x80
 8001db8:	0249      	lsls	r1, r1, #9
 8001dba:	430a      	orrs	r2, r1
 8001dbc:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001dbe:	4b1d      	ldr	r3, [pc, #116]	; (8001e34 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001dc0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001dc2:	4b1c      	ldr	r3, [pc, #112]	; (8001e34 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001dc4:	491e      	ldr	r1, [pc, #120]	; (8001e40 <HAL_RCCEx_PeriphCLKConfig+0x158>)
 8001dc6:	400a      	ands	r2, r1
 8001dc8:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001dca:	4b1a      	ldr	r3, [pc, #104]	; (8001e34 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001dcc:	697a      	ldr	r2, [r7, #20]
 8001dce:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001dd0:	697b      	ldr	r3, [r7, #20]
 8001dd2:	2201      	movs	r2, #1
 8001dd4:	4013      	ands	r3, r2
 8001dd6:	d016      	beq.n	8001e06 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dd8:	f7fe ffe8 	bl	8000dac <HAL_GetTick>
 8001ddc:	0003      	movs	r3, r0
 8001dde:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001de0:	e00c      	b.n	8001dfc <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001de2:	f7fe ffe3 	bl	8000dac <HAL_GetTick>
 8001de6:	0002      	movs	r2, r0
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	1ad3      	subs	r3, r2, r3
 8001dec:	4a15      	ldr	r2, [pc, #84]	; (8001e44 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8001dee:	4293      	cmp	r3, r2
 8001df0:	d904      	bls.n	8001dfc <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8001df2:	2313      	movs	r3, #19
 8001df4:	18fb      	adds	r3, r7, r3
 8001df6:	2203      	movs	r2, #3
 8001df8:	701a      	strb	r2, [r3, #0]
            break;
 8001dfa:	e004      	b.n	8001e06 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001dfc:	4b0d      	ldr	r3, [pc, #52]	; (8001e34 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001dfe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e00:	2202      	movs	r2, #2
 8001e02:	4013      	ands	r3, r2
 8001e04:	d0ed      	beq.n	8001de2 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8001e06:	2313      	movs	r3, #19
 8001e08:	18fb      	adds	r3, r7, r3
 8001e0a:	781b      	ldrb	r3, [r3, #0]
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d10a      	bne.n	8001e26 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001e10:	4b08      	ldr	r3, [pc, #32]	; (8001e34 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001e12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e14:	4a09      	ldr	r2, [pc, #36]	; (8001e3c <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8001e16:	4013      	ands	r3, r2
 8001e18:	0019      	movs	r1, r3
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001e1e:	4b05      	ldr	r3, [pc, #20]	; (8001e34 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001e20:	430a      	orrs	r2, r1
 8001e22:	65da      	str	r2, [r3, #92]	; 0x5c
 8001e24:	e016      	b.n	8001e54 <HAL_RCCEx_PeriphCLKConfig+0x16c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001e26:	2312      	movs	r3, #18
 8001e28:	18fb      	adds	r3, r7, r3
 8001e2a:	2213      	movs	r2, #19
 8001e2c:	18ba      	adds	r2, r7, r2
 8001e2e:	7812      	ldrb	r2, [r2, #0]
 8001e30:	701a      	strb	r2, [r3, #0]
 8001e32:	e00f      	b.n	8001e54 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8001e34:	40021000 	.word	0x40021000
 8001e38:	40007000 	.word	0x40007000
 8001e3c:	fffffcff 	.word	0xfffffcff
 8001e40:	fffeffff 	.word	0xfffeffff
 8001e44:	00001388 	.word	0x00001388
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001e48:	2312      	movs	r3, #18
 8001e4a:	18fb      	adds	r3, r7, r3
 8001e4c:	2213      	movs	r2, #19
 8001e4e:	18ba      	adds	r2, r7, r2
 8001e50:	7812      	ldrb	r2, [r2, #0]
 8001e52:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001e54:	2311      	movs	r3, #17
 8001e56:	18fb      	adds	r3, r7, r3
 8001e58:	781b      	ldrb	r3, [r3, #0]
 8001e5a:	2b01      	cmp	r3, #1
 8001e5c:	d105      	bne.n	8001e6a <HAL_RCCEx_PeriphCLKConfig+0x182>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e5e:	4bb6      	ldr	r3, [pc, #728]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001e60:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001e62:	4bb5      	ldr	r3, [pc, #724]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001e64:	49b5      	ldr	r1, [pc, #724]	; (800213c <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8001e66:	400a      	ands	r2, r1
 8001e68:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	2201      	movs	r2, #1
 8001e70:	4013      	ands	r3, r2
 8001e72:	d009      	beq.n	8001e88 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001e74:	4bb0      	ldr	r3, [pc, #704]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001e76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e78:	2203      	movs	r2, #3
 8001e7a:	4393      	bics	r3, r2
 8001e7c:	0019      	movs	r1, r3
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	685a      	ldr	r2, [r3, #4]
 8001e82:	4bad      	ldr	r3, [pc, #692]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001e84:	430a      	orrs	r2, r1
 8001e86:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	2202      	movs	r2, #2
 8001e8e:	4013      	ands	r3, r2
 8001e90:	d009      	beq.n	8001ea6 <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001e92:	4ba9      	ldr	r3, [pc, #676]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001e94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e96:	220c      	movs	r2, #12
 8001e98:	4393      	bics	r3, r2
 8001e9a:	0019      	movs	r1, r3
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	689a      	ldr	r2, [r3, #8]
 8001ea0:	4ba5      	ldr	r3, [pc, #660]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001ea2:	430a      	orrs	r2, r1
 8001ea4:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART2SEL */

#if defined(RCC_CCIPR_USART3SEL)
  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	2204      	movs	r2, #4
 8001eac:	4013      	ands	r3, r2
 8001eae:	d009      	beq.n	8001ec4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001eb0:	4ba1      	ldr	r3, [pc, #644]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001eb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001eb4:	2230      	movs	r2, #48	; 0x30
 8001eb6:	4393      	bics	r3, r2
 8001eb8:	0019      	movs	r1, r3
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	68da      	ldr	r2, [r3, #12]
 8001ebe:	4b9e      	ldr	r3, [pc, #632]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001ec0:	430a      	orrs	r2, r1
 8001ec2:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	2210      	movs	r2, #16
 8001eca:	4013      	ands	r3, r2
 8001ecc:	d009      	beq.n	8001ee2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001ece:	4b9a      	ldr	r3, [pc, #616]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001ed0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ed2:	4a9b      	ldr	r2, [pc, #620]	; (8002140 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8001ed4:	4013      	ands	r3, r2
 8001ed6:	0019      	movs	r1, r3
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	691a      	ldr	r2, [r3, #16]
 8001edc:	4b96      	ldr	r3, [pc, #600]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001ede:	430a      	orrs	r2, r1
 8001ee0:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART1 */

#if defined(LPUART2)
  /*-------------------------- LPUART2 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART2) == RCC_PERIPHCLK_LPUART2)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681a      	ldr	r2, [r3, #0]
 8001ee6:	2380      	movs	r3, #128	; 0x80
 8001ee8:	015b      	lsls	r3, r3, #5
 8001eea:	4013      	ands	r3, r2
 8001eec:	d009      	beq.n	8001f02 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART2CLKSOURCE(PeriphClkInit->Lpuart2ClockSelection));

    /* Configure the LPUART clock source */
    __HAL_RCC_LPUART2_CONFIG(PeriphClkInit->Lpuart2ClockSelection);
 8001eee:	4b92      	ldr	r3, [pc, #584]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001ef0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ef2:	4a94      	ldr	r2, [pc, #592]	; (8002144 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8001ef4:	4013      	ands	r3, r2
 8001ef6:	0019      	movs	r1, r3
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	695a      	ldr	r2, [r3, #20]
 8001efc:	4b8e      	ldr	r3, [pc, #568]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001efe:	430a      	orrs	r2, r1
 8001f00:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681a      	ldr	r2, [r3, #0]
 8001f06:	2380      	movs	r3, #128	; 0x80
 8001f08:	009b      	lsls	r3, r3, #2
 8001f0a:	4013      	ands	r3, r2
 8001f0c:	d009      	beq.n	8001f22 <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001f0e:	4b8a      	ldr	r3, [pc, #552]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001f10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f12:	4a8d      	ldr	r2, [pc, #564]	; (8002148 <HAL_RCCEx_PeriphCLKConfig+0x460>)
 8001f14:	4013      	ands	r3, r2
 8001f16:	0019      	movs	r1, r3
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001f1c:	4b86      	ldr	r3, [pc, #536]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001f1e:	430a      	orrs	r2, r1
 8001f20:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681a      	ldr	r2, [r3, #0]
 8001f26:	2380      	movs	r3, #128	; 0x80
 8001f28:	00db      	lsls	r3, r3, #3
 8001f2a:	4013      	ands	r3, r2
 8001f2c:	d009      	beq.n	8001f42 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8001f2e:	4b82      	ldr	r3, [pc, #520]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001f30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f32:	4a86      	ldr	r2, [pc, #536]	; (800214c <HAL_RCCEx_PeriphCLKConfig+0x464>)
 8001f34:	4013      	ands	r3, r2
 8001f36:	0019      	movs	r1, r3
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f3c:	4b7e      	ldr	r3, [pc, #504]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001f3e:	430a      	orrs	r2, r1
 8001f40:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	2220      	movs	r2, #32
 8001f48:	4013      	ands	r3, r2
 8001f4a:	d009      	beq.n	8001f60 <HAL_RCCEx_PeriphCLKConfig+0x278>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001f4c:	4b7a      	ldr	r3, [pc, #488]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001f4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f50:	4a7f      	ldr	r2, [pc, #508]	; (8002150 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8001f52:	4013      	ands	r3, r2
 8001f54:	0019      	movs	r1, r3
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	699a      	ldr	r2, [r3, #24]
 8001f5a:	4b77      	ldr	r3, [pc, #476]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001f5c:	430a      	orrs	r2, r1
 8001f5e:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_I2C2SEL)
  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	2240      	movs	r2, #64	; 0x40
 8001f66:	4013      	ands	r3, r2
 8001f68:	d009      	beq.n	8001f7e <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001f6a:	4b73      	ldr	r3, [pc, #460]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001f6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f6e:	4a79      	ldr	r2, [pc, #484]	; (8002154 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 8001f70:	4013      	ands	r3, r2
 8001f72:	0019      	movs	r1, r3
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	69da      	ldr	r2, [r3, #28]
 8001f78:	4b6f      	ldr	r3, [pc, #444]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001f7a:	430a      	orrs	r2, r1
 8001f7c:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681a      	ldr	r2, [r3, #0]
 8001f82:	2380      	movs	r3, #128	; 0x80
 8001f84:	01db      	lsls	r3, r3, #7
 8001f86:	4013      	ands	r3, r2
 8001f88:	d015      	beq.n	8001fb6 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001f8a:	4b6b      	ldr	r3, [pc, #428]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001f8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f8e:	009b      	lsls	r3, r3, #2
 8001f90:	0899      	lsrs	r1, r3, #2
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001f96:	4b68      	ldr	r3, [pc, #416]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001f98:	430a      	orrs	r2, r1
 8001f9a:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001fa0:	2380      	movs	r3, #128	; 0x80
 8001fa2:	05db      	lsls	r3, r3, #23
 8001fa4:	429a      	cmp	r2, r3
 8001fa6:	d106      	bne.n	8001fb6 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8001fa8:	4b63      	ldr	r3, [pc, #396]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001faa:	68da      	ldr	r2, [r3, #12]
 8001fac:	4b62      	ldr	r3, [pc, #392]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001fae:	2180      	movs	r1, #128	; 0x80
 8001fb0:	0249      	lsls	r1, r1, #9
 8001fb2:	430a      	orrs	r2, r1
 8001fb4:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681a      	ldr	r2, [r3, #0]
 8001fba:	2380      	movs	r3, #128	; 0x80
 8001fbc:	031b      	lsls	r3, r3, #12
 8001fbe:	4013      	ands	r3, r2
 8001fc0:	d009      	beq.n	8001fd6 <HAL_RCCEx_PeriphCLKConfig+0x2ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001fc2:	4b5d      	ldr	r3, [pc, #372]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001fc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fc6:	2240      	movs	r2, #64	; 0x40
 8001fc8:	4393      	bics	r3, r2
 8001fca:	0019      	movs	r1, r3
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001fd0:	4b59      	ldr	r3, [pc, #356]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001fd2:	430a      	orrs	r2, r1
 8001fd4:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681a      	ldr	r2, [r3, #0]
 8001fda:	2380      	movs	r3, #128	; 0x80
 8001fdc:	039b      	lsls	r3, r3, #14
 8001fde:	4013      	ands	r3, r2
 8001fe0:	d016      	beq.n	8002010 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8001fe2:	4b55      	ldr	r3, [pc, #340]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001fe4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fe6:	4a5c      	ldr	r2, [pc, #368]	; (8002158 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8001fe8:	4013      	ands	r3, r2
 8001fea:	0019      	movs	r1, r3
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001ff0:	4b51      	ldr	r3, [pc, #324]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001ff2:	430a      	orrs	r2, r1
 8001ff4:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001ffa:	2380      	movs	r3, #128	; 0x80
 8001ffc:	03db      	lsls	r3, r3, #15
 8001ffe:	429a      	cmp	r2, r3
 8002000:	d106      	bne.n	8002010 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002002:	4b4d      	ldr	r3, [pc, #308]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002004:	68da      	ldr	r2, [r3, #12]
 8002006:	4b4c      	ldr	r3, [pc, #304]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002008:	2180      	movs	r1, #128	; 0x80
 800200a:	0449      	lsls	r1, r1, #17
 800200c:	430a      	orrs	r2, r1
 800200e:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681a      	ldr	r2, [r3, #0]
 8002014:	2380      	movs	r3, #128	; 0x80
 8002016:	03db      	lsls	r3, r3, #15
 8002018:	4013      	ands	r3, r2
 800201a:	d016      	beq.n	800204a <HAL_RCCEx_PeriphCLKConfig+0x362>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 800201c:	4b46      	ldr	r3, [pc, #280]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800201e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002020:	4a4e      	ldr	r2, [pc, #312]	; (800215c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8002022:	4013      	ands	r3, r2
 8002024:	0019      	movs	r1, r3
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800202a:	4b43      	ldr	r3, [pc, #268]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800202c:	430a      	orrs	r2, r1
 800202e:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002034:	2380      	movs	r3, #128	; 0x80
 8002036:	045b      	lsls	r3, r3, #17
 8002038:	429a      	cmp	r2, r3
 800203a:	d106      	bne.n	800204a <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800203c:	4b3e      	ldr	r3, [pc, #248]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800203e:	68da      	ldr	r2, [r3, #12]
 8002040:	4b3d      	ldr	r3, [pc, #244]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002042:	2180      	movs	r1, #128	; 0x80
 8002044:	0449      	lsls	r1, r1, #17
 8002046:	430a      	orrs	r2, r1
 8002048:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681a      	ldr	r2, [r3, #0]
 800204e:	2380      	movs	r3, #128	; 0x80
 8002050:	011b      	lsls	r3, r3, #4
 8002052:	4013      	ands	r3, r2
 8002054:	d014      	beq.n	8002080 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8002056:	4b38      	ldr	r3, [pc, #224]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002058:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800205a:	2203      	movs	r2, #3
 800205c:	4393      	bics	r3, r2
 800205e:	0019      	movs	r1, r3
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	6a1a      	ldr	r2, [r3, #32]
 8002064:	4b34      	ldr	r3, [pc, #208]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002066:	430a      	orrs	r2, r1
 8002068:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	6a1b      	ldr	r3, [r3, #32]
 800206e:	2b01      	cmp	r3, #1
 8002070:	d106      	bne.n	8002080 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002072:	4b31      	ldr	r3, [pc, #196]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002074:	68da      	ldr	r2, [r3, #12]
 8002076:	4b30      	ldr	r3, [pc, #192]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002078:	2180      	movs	r1, #128	; 0x80
 800207a:	0249      	lsls	r1, r1, #9
 800207c:	430a      	orrs	r2, r1
 800207e:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(RCC_CCIPR2_I2S2SEL)
  /*-------------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681a      	ldr	r2, [r3, #0]
 8002084:	2380      	movs	r3, #128	; 0x80
 8002086:	019b      	lsls	r3, r3, #6
 8002088:	4013      	ands	r3, r2
 800208a:	d014      	beq.n	80020b6 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 800208c:	4b2a      	ldr	r3, [pc, #168]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800208e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002090:	220c      	movs	r2, #12
 8002092:	4393      	bics	r3, r2
 8002094:	0019      	movs	r1, r3
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800209a:	4b27      	ldr	r3, [pc, #156]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800209c:	430a      	orrs	r2, r1
 800209e:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020a4:	2b04      	cmp	r3, #4
 80020a6:	d106      	bne.n	80020b6 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80020a8:	4b23      	ldr	r3, [pc, #140]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80020aa:	68da      	ldr	r2, [r3, #12]
 80020ac:	4b22      	ldr	r3, [pc, #136]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80020ae:	2180      	movs	r1, #128	; 0x80
 80020b0:	0249      	lsls	r1, r1, #9
 80020b2:	430a      	orrs	r2, r1
 80020b4:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR2_I2S2SEL */

#if defined(STM32G0C1xx) || defined(STM32G0B1xx)  || defined(STM32G0B0xx)
  /*-------------------------- USB clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681a      	ldr	r2, [r3, #0]
 80020ba:	2380      	movs	r3, #128	; 0x80
 80020bc:	045b      	lsls	r3, r3, #17
 80020be:	4013      	ands	r3, r2
 80020c0:	d016      	beq.n	80020f0 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80020c2:	4b1d      	ldr	r3, [pc, #116]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80020c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020c6:	4a22      	ldr	r2, [pc, #136]	; (8002150 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80020c8:	4013      	ands	r3, r2
 80020ca:	0019      	movs	r1, r3
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80020d0:	4b19      	ldr	r3, [pc, #100]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80020d2:	430a      	orrs	r2, r1
 80020d4:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80020da:	2380      	movs	r3, #128	; 0x80
 80020dc:	019b      	lsls	r3, r3, #6
 80020de:	429a      	cmp	r2, r3
 80020e0:	d106      	bne.n	80020f0 <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80020e2:	4b15      	ldr	r3, [pc, #84]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80020e4:	68da      	ldr	r2, [r3, #12]
 80020e6:	4b14      	ldr	r3, [pc, #80]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80020e8:	2180      	movs	r1, #128	; 0x80
 80020ea:	0449      	lsls	r1, r1, #17
 80020ec:	430a      	orrs	r2, r1
 80020ee:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32G0C1xx || STM32G0B1xx || STM32G0B0xx */

#if defined(FDCAN1) || defined(FDCAN2)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681a      	ldr	r2, [r3, #0]
 80020f4:	2380      	movs	r3, #128	; 0x80
 80020f6:	049b      	lsls	r3, r3, #18
 80020f8:	4013      	ands	r3, r2
 80020fa:	d016      	beq.n	800212a <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80020fc:	4b0e      	ldr	r3, [pc, #56]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80020fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002100:	4a10      	ldr	r2, [pc, #64]	; (8002144 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002102:	4013      	ands	r3, r2
 8002104:	0019      	movs	r1, r3
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800210a:	4b0b      	ldr	r3, [pc, #44]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800210c:	430a      	orrs	r2, r1
 800210e:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002114:	2380      	movs	r3, #128	; 0x80
 8002116:	005b      	lsls	r3, r3, #1
 8002118:	429a      	cmp	r2, r3
 800211a:	d106      	bne.n	800212a <HAL_RCCEx_PeriphCLKConfig+0x442>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800211c:	4b06      	ldr	r3, [pc, #24]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800211e:	68da      	ldr	r2, [r3, #12]
 8002120:	4b05      	ldr	r3, [pc, #20]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002122:	2180      	movs	r1, #128	; 0x80
 8002124:	0449      	lsls	r1, r1, #17
 8002126:	430a      	orrs	r2, r1
 8002128:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 800212a:	2312      	movs	r3, #18
 800212c:	18fb      	adds	r3, r7, r3
 800212e:	781b      	ldrb	r3, [r3, #0]
}
 8002130:	0018      	movs	r0, r3
 8002132:	46bd      	mov	sp, r7
 8002134:	b006      	add	sp, #24
 8002136:	bd80      	pop	{r7, pc}
 8002138:	40021000 	.word	0x40021000
 800213c:	efffffff 	.word	0xefffffff
 8002140:	fffff3ff 	.word	0xfffff3ff
 8002144:	fffffcff 	.word	0xfffffcff
 8002148:	fff3ffff 	.word	0xfff3ffff
 800214c:	ffcfffff 	.word	0xffcfffff
 8002150:	ffffcfff 	.word	0xffffcfff
 8002154:	ffff3fff 	.word	0xffff3fff
 8002158:	ffbfffff 	.word	0xffbfffff
 800215c:	feffffff 	.word	0xfeffffff

08002160 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b082      	sub	sp, #8
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2b00      	cmp	r3, #0
 800216c:	d101      	bne.n	8002172 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800216e:	2301      	movs	r3, #1
 8002170:	e046      	b.n	8002200 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	2288      	movs	r2, #136	; 0x88
 8002176:	589b      	ldr	r3, [r3, r2]
 8002178:	2b00      	cmp	r3, #0
 800217a:	d107      	bne.n	800218c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	2284      	movs	r2, #132	; 0x84
 8002180:	2100      	movs	r1, #0
 8002182:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	0018      	movs	r0, r3
 8002188:	f7fe fc6c 	bl	8000a64 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	2288      	movs	r2, #136	; 0x88
 8002190:	2124      	movs	r1, #36	; 0x24
 8002192:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	681a      	ldr	r2, [r3, #0]
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	2101      	movs	r1, #1
 80021a0:	438a      	bics	r2, r1
 80021a2:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	0018      	movs	r0, r3
 80021a8:	f000 f9ae 	bl	8002508 <UART_SetConfig>
 80021ac:	0003      	movs	r3, r0
 80021ae:	2b01      	cmp	r3, #1
 80021b0:	d101      	bne.n	80021b6 <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 80021b2:	2301      	movs	r3, #1
 80021b4:	e024      	b.n	8002200 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d003      	beq.n	80021c6 <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	0018      	movs	r0, r3
 80021c2:	f000 fcf7 	bl	8002bb4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	685a      	ldr	r2, [r3, #4]
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	490d      	ldr	r1, [pc, #52]	; (8002208 <HAL_UART_Init+0xa8>)
 80021d2:	400a      	ands	r2, r1
 80021d4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	689a      	ldr	r2, [r3, #8]
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	212a      	movs	r1, #42	; 0x2a
 80021e2:	438a      	bics	r2, r1
 80021e4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	681a      	ldr	r2, [r3, #0]
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	2101      	movs	r1, #1
 80021f2:	430a      	orrs	r2, r1
 80021f4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	0018      	movs	r0, r3
 80021fa:	f000 fd8f 	bl	8002d1c <UART_CheckIdleState>
 80021fe:	0003      	movs	r3, r0
}
 8002200:	0018      	movs	r0, r3
 8002202:	46bd      	mov	sp, r7
 8002204:	b002      	add	sp, #8
 8002206:	bd80      	pop	{r7, pc}
 8002208:	ffffb7ff 	.word	0xffffb7ff

0800220c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b08a      	sub	sp, #40	; 0x28
 8002210:	af02      	add	r7, sp, #8
 8002212:	60f8      	str	r0, [r7, #12]
 8002214:	60b9      	str	r1, [r7, #8]
 8002216:	603b      	str	r3, [r7, #0]
 8002218:	1dbb      	adds	r3, r7, #6
 800221a:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	2288      	movs	r2, #136	; 0x88
 8002220:	589b      	ldr	r3, [r3, r2]
 8002222:	2b20      	cmp	r3, #32
 8002224:	d000      	beq.n	8002228 <HAL_UART_Transmit+0x1c>
 8002226:	e088      	b.n	800233a <HAL_UART_Transmit+0x12e>
  {
    if ((pData == NULL) || (Size == 0U))
 8002228:	68bb      	ldr	r3, [r7, #8]
 800222a:	2b00      	cmp	r3, #0
 800222c:	d003      	beq.n	8002236 <HAL_UART_Transmit+0x2a>
 800222e:	1dbb      	adds	r3, r7, #6
 8002230:	881b      	ldrh	r3, [r3, #0]
 8002232:	2b00      	cmp	r3, #0
 8002234:	d101      	bne.n	800223a <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8002236:	2301      	movs	r3, #1
 8002238:	e080      	b.n	800233c <HAL_UART_Transmit+0x130>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	689a      	ldr	r2, [r3, #8]
 800223e:	2380      	movs	r3, #128	; 0x80
 8002240:	015b      	lsls	r3, r3, #5
 8002242:	429a      	cmp	r2, r3
 8002244:	d109      	bne.n	800225a <HAL_UART_Transmit+0x4e>
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	691b      	ldr	r3, [r3, #16]
 800224a:	2b00      	cmp	r3, #0
 800224c:	d105      	bne.n	800225a <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800224e:	68bb      	ldr	r3, [r7, #8]
 8002250:	2201      	movs	r2, #1
 8002252:	4013      	ands	r3, r2
 8002254:	d001      	beq.n	800225a <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8002256:	2301      	movs	r3, #1
 8002258:	e070      	b.n	800233c <HAL_UART_Transmit+0x130>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	2290      	movs	r2, #144	; 0x90
 800225e:	2100      	movs	r1, #0
 8002260:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	2288      	movs	r2, #136	; 0x88
 8002266:	2121      	movs	r1, #33	; 0x21
 8002268:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800226a:	f7fe fd9f 	bl	8000dac <HAL_GetTick>
 800226e:	0003      	movs	r3, r0
 8002270:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	1dba      	adds	r2, r7, #6
 8002276:	2154      	movs	r1, #84	; 0x54
 8002278:	8812      	ldrh	r2, [r2, #0]
 800227a:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	1dba      	adds	r2, r7, #6
 8002280:	2156      	movs	r1, #86	; 0x56
 8002282:	8812      	ldrh	r2, [r2, #0]
 8002284:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	689a      	ldr	r2, [r3, #8]
 800228a:	2380      	movs	r3, #128	; 0x80
 800228c:	015b      	lsls	r3, r3, #5
 800228e:	429a      	cmp	r2, r3
 8002290:	d108      	bne.n	80022a4 <HAL_UART_Transmit+0x98>
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	691b      	ldr	r3, [r3, #16]
 8002296:	2b00      	cmp	r3, #0
 8002298:	d104      	bne.n	80022a4 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 800229a:	2300      	movs	r3, #0
 800229c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800229e:	68bb      	ldr	r3, [r7, #8]
 80022a0:	61bb      	str	r3, [r7, #24]
 80022a2:	e003      	b.n	80022ac <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 80022a4:	68bb      	ldr	r3, [r7, #8]
 80022a6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80022a8:	2300      	movs	r3, #0
 80022aa:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80022ac:	e02c      	b.n	8002308 <HAL_UART_Transmit+0xfc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80022ae:	697a      	ldr	r2, [r7, #20]
 80022b0:	68f8      	ldr	r0, [r7, #12]
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	9300      	str	r3, [sp, #0]
 80022b6:	0013      	movs	r3, r2
 80022b8:	2200      	movs	r2, #0
 80022ba:	2180      	movs	r1, #128	; 0x80
 80022bc:	f000 fd7c 	bl	8002db8 <UART_WaitOnFlagUntilTimeout>
 80022c0:	1e03      	subs	r3, r0, #0
 80022c2:	d001      	beq.n	80022c8 <HAL_UART_Transmit+0xbc>
      {
        return HAL_TIMEOUT;
 80022c4:	2303      	movs	r3, #3
 80022c6:	e039      	b.n	800233c <HAL_UART_Transmit+0x130>
      }
      if (pdata8bits == NULL)
 80022c8:	69fb      	ldr	r3, [r7, #28]
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d10b      	bne.n	80022e6 <HAL_UART_Transmit+0xda>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80022ce:	69bb      	ldr	r3, [r7, #24]
 80022d0:	881b      	ldrh	r3, [r3, #0]
 80022d2:	001a      	movs	r2, r3
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	05d2      	lsls	r2, r2, #23
 80022da:	0dd2      	lsrs	r2, r2, #23
 80022dc:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80022de:	69bb      	ldr	r3, [r7, #24]
 80022e0:	3302      	adds	r3, #2
 80022e2:	61bb      	str	r3, [r7, #24]
 80022e4:	e007      	b.n	80022f6 <HAL_UART_Transmit+0xea>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80022e6:	69fb      	ldr	r3, [r7, #28]
 80022e8:	781a      	ldrb	r2, [r3, #0]
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80022f0:	69fb      	ldr	r3, [r7, #28]
 80022f2:	3301      	adds	r3, #1
 80022f4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	2256      	movs	r2, #86	; 0x56
 80022fa:	5a9b      	ldrh	r3, [r3, r2]
 80022fc:	b29b      	uxth	r3, r3
 80022fe:	3b01      	subs	r3, #1
 8002300:	b299      	uxth	r1, r3
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	2256      	movs	r2, #86	; 0x56
 8002306:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	2256      	movs	r2, #86	; 0x56
 800230c:	5a9b      	ldrh	r3, [r3, r2]
 800230e:	b29b      	uxth	r3, r3
 8002310:	2b00      	cmp	r3, #0
 8002312:	d1cc      	bne.n	80022ae <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002314:	697a      	ldr	r2, [r7, #20]
 8002316:	68f8      	ldr	r0, [r7, #12]
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	9300      	str	r3, [sp, #0]
 800231c:	0013      	movs	r3, r2
 800231e:	2200      	movs	r2, #0
 8002320:	2140      	movs	r1, #64	; 0x40
 8002322:	f000 fd49 	bl	8002db8 <UART_WaitOnFlagUntilTimeout>
 8002326:	1e03      	subs	r3, r0, #0
 8002328:	d001      	beq.n	800232e <HAL_UART_Transmit+0x122>
    {
      return HAL_TIMEOUT;
 800232a:	2303      	movs	r3, #3
 800232c:	e006      	b.n	800233c <HAL_UART_Transmit+0x130>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	2288      	movs	r2, #136	; 0x88
 8002332:	2120      	movs	r1, #32
 8002334:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8002336:	2300      	movs	r3, #0
 8002338:	e000      	b.n	800233c <HAL_UART_Transmit+0x130>
  }
  else
  {
    return HAL_BUSY;
 800233a:	2302      	movs	r3, #2
  }
}
 800233c:	0018      	movs	r0, r3
 800233e:	46bd      	mov	sp, r7
 8002340:	b008      	add	sp, #32
 8002342:	bd80      	pop	{r7, pc}

08002344 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	b08a      	sub	sp, #40	; 0x28
 8002348:	af02      	add	r7, sp, #8
 800234a:	60f8      	str	r0, [r7, #12]
 800234c:	60b9      	str	r1, [r7, #8]
 800234e:	603b      	str	r3, [r7, #0]
 8002350:	1dbb      	adds	r3, r7, #6
 8002352:	801a      	strh	r2, [r3, #0]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	228c      	movs	r2, #140	; 0x8c
 8002358:	589b      	ldr	r3, [r3, r2]
 800235a:	2b20      	cmp	r3, #32
 800235c:	d000      	beq.n	8002360 <HAL_UART_Receive+0x1c>
 800235e:	e0cc      	b.n	80024fa <HAL_UART_Receive+0x1b6>
  {
    if ((pData == NULL) || (Size == 0U))
 8002360:	68bb      	ldr	r3, [r7, #8]
 8002362:	2b00      	cmp	r3, #0
 8002364:	d003      	beq.n	800236e <HAL_UART_Receive+0x2a>
 8002366:	1dbb      	adds	r3, r7, #6
 8002368:	881b      	ldrh	r3, [r3, #0]
 800236a:	2b00      	cmp	r3, #0
 800236c:	d101      	bne.n	8002372 <HAL_UART_Receive+0x2e>
    {
      return  HAL_ERROR;
 800236e:	2301      	movs	r3, #1
 8002370:	e0c4      	b.n	80024fc <HAL_UART_Receive+0x1b8>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	689a      	ldr	r2, [r3, #8]
 8002376:	2380      	movs	r3, #128	; 0x80
 8002378:	015b      	lsls	r3, r3, #5
 800237a:	429a      	cmp	r2, r3
 800237c:	d109      	bne.n	8002392 <HAL_UART_Receive+0x4e>
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	691b      	ldr	r3, [r3, #16]
 8002382:	2b00      	cmp	r3, #0
 8002384:	d105      	bne.n	8002392 <HAL_UART_Receive+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002386:	68bb      	ldr	r3, [r7, #8]
 8002388:	2201      	movs	r2, #1
 800238a:	4013      	ands	r3, r2
 800238c:	d001      	beq.n	8002392 <HAL_UART_Receive+0x4e>
      {
        return  HAL_ERROR;
 800238e:	2301      	movs	r3, #1
 8002390:	e0b4      	b.n	80024fc <HAL_UART_Receive+0x1b8>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	2290      	movs	r2, #144	; 0x90
 8002396:	2100      	movs	r1, #0
 8002398:	5099      	str	r1, [r3, r2]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	228c      	movs	r2, #140	; 0x8c
 800239e:	2122      	movs	r1, #34	; 0x22
 80023a0:	5099      	str	r1, [r3, r2]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	2200      	movs	r2, #0
 80023a6:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80023a8:	f7fe fd00 	bl	8000dac <HAL_GetTick>
 80023ac:	0003      	movs	r3, r0
 80023ae:	617b      	str	r3, [r7, #20]

    huart->RxXferSize  = Size;
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	1dba      	adds	r2, r7, #6
 80023b4:	215c      	movs	r1, #92	; 0x5c
 80023b6:	8812      	ldrh	r2, [r2, #0]
 80023b8:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	1dba      	adds	r2, r7, #6
 80023be:	215e      	movs	r1, #94	; 0x5e
 80023c0:	8812      	ldrh	r2, [r2, #0]
 80023c2:	525a      	strh	r2, [r3, r1]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	689a      	ldr	r2, [r3, #8]
 80023c8:	2380      	movs	r3, #128	; 0x80
 80023ca:	015b      	lsls	r3, r3, #5
 80023cc:	429a      	cmp	r2, r3
 80023ce:	d10d      	bne.n	80023ec <HAL_UART_Receive+0xa8>
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	691b      	ldr	r3, [r3, #16]
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d104      	bne.n	80023e2 <HAL_UART_Receive+0x9e>
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	2260      	movs	r2, #96	; 0x60
 80023dc:	4949      	ldr	r1, [pc, #292]	; (8002504 <HAL_UART_Receive+0x1c0>)
 80023de:	5299      	strh	r1, [r3, r2]
 80023e0:	e02e      	b.n	8002440 <HAL_UART_Receive+0xfc>
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	2260      	movs	r2, #96	; 0x60
 80023e6:	21ff      	movs	r1, #255	; 0xff
 80023e8:	5299      	strh	r1, [r3, r2]
 80023ea:	e029      	b.n	8002440 <HAL_UART_Receive+0xfc>
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	689b      	ldr	r3, [r3, #8]
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d10d      	bne.n	8002410 <HAL_UART_Receive+0xcc>
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	691b      	ldr	r3, [r3, #16]
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d104      	bne.n	8002406 <HAL_UART_Receive+0xc2>
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	2260      	movs	r2, #96	; 0x60
 8002400:	21ff      	movs	r1, #255	; 0xff
 8002402:	5299      	strh	r1, [r3, r2]
 8002404:	e01c      	b.n	8002440 <HAL_UART_Receive+0xfc>
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	2260      	movs	r2, #96	; 0x60
 800240a:	217f      	movs	r1, #127	; 0x7f
 800240c:	5299      	strh	r1, [r3, r2]
 800240e:	e017      	b.n	8002440 <HAL_UART_Receive+0xfc>
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	689a      	ldr	r2, [r3, #8]
 8002414:	2380      	movs	r3, #128	; 0x80
 8002416:	055b      	lsls	r3, r3, #21
 8002418:	429a      	cmp	r2, r3
 800241a:	d10d      	bne.n	8002438 <HAL_UART_Receive+0xf4>
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	691b      	ldr	r3, [r3, #16]
 8002420:	2b00      	cmp	r3, #0
 8002422:	d104      	bne.n	800242e <HAL_UART_Receive+0xea>
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	2260      	movs	r2, #96	; 0x60
 8002428:	217f      	movs	r1, #127	; 0x7f
 800242a:	5299      	strh	r1, [r3, r2]
 800242c:	e008      	b.n	8002440 <HAL_UART_Receive+0xfc>
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	2260      	movs	r2, #96	; 0x60
 8002432:	213f      	movs	r1, #63	; 0x3f
 8002434:	5299      	strh	r1, [r3, r2]
 8002436:	e003      	b.n	8002440 <HAL_UART_Receive+0xfc>
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	2260      	movs	r2, #96	; 0x60
 800243c:	2100      	movs	r1, #0
 800243e:	5299      	strh	r1, [r3, r2]
    uhMask = huart->Mask;
 8002440:	2312      	movs	r3, #18
 8002442:	18fb      	adds	r3, r7, r3
 8002444:	68fa      	ldr	r2, [r7, #12]
 8002446:	2160      	movs	r1, #96	; 0x60
 8002448:	5a52      	ldrh	r2, [r2, r1]
 800244a:	801a      	strh	r2, [r3, #0]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	689a      	ldr	r2, [r3, #8]
 8002450:	2380      	movs	r3, #128	; 0x80
 8002452:	015b      	lsls	r3, r3, #5
 8002454:	429a      	cmp	r2, r3
 8002456:	d108      	bne.n	800246a <HAL_UART_Receive+0x126>
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	691b      	ldr	r3, [r3, #16]
 800245c:	2b00      	cmp	r3, #0
 800245e:	d104      	bne.n	800246a <HAL_UART_Receive+0x126>
    {
      pdata8bits  = NULL;
 8002460:	2300      	movs	r3, #0
 8002462:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002464:	68bb      	ldr	r3, [r7, #8]
 8002466:	61bb      	str	r3, [r7, #24]
 8002468:	e003      	b.n	8002472 <HAL_UART_Receive+0x12e>
    }
    else
    {
      pdata8bits  = pData;
 800246a:	68bb      	ldr	r3, [r7, #8]
 800246c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800246e:	2300      	movs	r3, #0
 8002470:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8002472:	e036      	b.n	80024e2 <HAL_UART_Receive+0x19e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002474:	697a      	ldr	r2, [r7, #20]
 8002476:	68f8      	ldr	r0, [r7, #12]
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	9300      	str	r3, [sp, #0]
 800247c:	0013      	movs	r3, r2
 800247e:	2200      	movs	r2, #0
 8002480:	2120      	movs	r1, #32
 8002482:	f000 fc99 	bl	8002db8 <UART_WaitOnFlagUntilTimeout>
 8002486:	1e03      	subs	r3, r0, #0
 8002488:	d001      	beq.n	800248e <HAL_UART_Receive+0x14a>
      {
        return HAL_TIMEOUT;
 800248a:	2303      	movs	r3, #3
 800248c:	e036      	b.n	80024fc <HAL_UART_Receive+0x1b8>
      }
      if (pdata8bits == NULL)
 800248e:	69fb      	ldr	r3, [r7, #28]
 8002490:	2b00      	cmp	r3, #0
 8002492:	d10e      	bne.n	80024b2 <HAL_UART_Receive+0x16e>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800249a:	b29b      	uxth	r3, r3
 800249c:	2212      	movs	r2, #18
 800249e:	18ba      	adds	r2, r7, r2
 80024a0:	8812      	ldrh	r2, [r2, #0]
 80024a2:	4013      	ands	r3, r2
 80024a4:	b29a      	uxth	r2, r3
 80024a6:	69bb      	ldr	r3, [r7, #24]
 80024a8:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80024aa:	69bb      	ldr	r3, [r7, #24]
 80024ac:	3302      	adds	r3, #2
 80024ae:	61bb      	str	r3, [r7, #24]
 80024b0:	e00e      	b.n	80024d0 <HAL_UART_Receive+0x18c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024b8:	b2db      	uxtb	r3, r3
 80024ba:	2212      	movs	r2, #18
 80024bc:	18ba      	adds	r2, r7, r2
 80024be:	8812      	ldrh	r2, [r2, #0]
 80024c0:	b2d2      	uxtb	r2, r2
 80024c2:	4013      	ands	r3, r2
 80024c4:	b2da      	uxtb	r2, r3
 80024c6:	69fb      	ldr	r3, [r7, #28]
 80024c8:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80024ca:	69fb      	ldr	r3, [r7, #28]
 80024cc:	3301      	adds	r3, #1
 80024ce:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	225e      	movs	r2, #94	; 0x5e
 80024d4:	5a9b      	ldrh	r3, [r3, r2]
 80024d6:	b29b      	uxth	r3, r3
 80024d8:	3b01      	subs	r3, #1
 80024da:	b299      	uxth	r1, r3
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	225e      	movs	r2, #94	; 0x5e
 80024e0:	5299      	strh	r1, [r3, r2]
    while (huart->RxXferCount > 0U)
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	225e      	movs	r2, #94	; 0x5e
 80024e6:	5a9b      	ldrh	r3, [r3, r2]
 80024e8:	b29b      	uxth	r3, r3
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d1c2      	bne.n	8002474 <HAL_UART_Receive+0x130>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	228c      	movs	r2, #140	; 0x8c
 80024f2:	2120      	movs	r1, #32
 80024f4:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 80024f6:	2300      	movs	r3, #0
 80024f8:	e000      	b.n	80024fc <HAL_UART_Receive+0x1b8>
  }
  else
  {
    return HAL_BUSY;
 80024fa:	2302      	movs	r3, #2
  }
}
 80024fc:	0018      	movs	r0, r3
 80024fe:	46bd      	mov	sp, r7
 8002500:	b008      	add	sp, #32
 8002502:	bd80      	pop	{r7, pc}
 8002504:	000001ff 	.word	0x000001ff

08002508 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002508:	b5b0      	push	{r4, r5, r7, lr}
 800250a:	b090      	sub	sp, #64	; 0x40
 800250c:	af00      	add	r7, sp, #0
 800250e:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002510:	231a      	movs	r3, #26
 8002512:	2220      	movs	r2, #32
 8002514:	189b      	adds	r3, r3, r2
 8002516:	19db      	adds	r3, r3, r7
 8002518:	2200      	movs	r2, #0
 800251a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800251c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800251e:	689a      	ldr	r2, [r3, #8]
 8002520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002522:	691b      	ldr	r3, [r3, #16]
 8002524:	431a      	orrs	r2, r3
 8002526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002528:	695b      	ldr	r3, [r3, #20]
 800252a:	431a      	orrs	r2, r3
 800252c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800252e:	69db      	ldr	r3, [r3, #28]
 8002530:	4313      	orrs	r3, r2
 8002532:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	4ac1      	ldr	r2, [pc, #772]	; (8002840 <UART_SetConfig+0x338>)
 800253c:	4013      	ands	r3, r2
 800253e:	0019      	movs	r1, r3
 8002540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002542:	681a      	ldr	r2, [r3, #0]
 8002544:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002546:	430b      	orrs	r3, r1
 8002548:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800254a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	685b      	ldr	r3, [r3, #4]
 8002550:	4abc      	ldr	r2, [pc, #752]	; (8002844 <UART_SetConfig+0x33c>)
 8002552:	4013      	ands	r3, r2
 8002554:	0018      	movs	r0, r3
 8002556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002558:	68d9      	ldr	r1, [r3, #12]
 800255a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800255c:	681a      	ldr	r2, [r3, #0]
 800255e:	0003      	movs	r3, r0
 8002560:	430b      	orrs	r3, r1
 8002562:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002566:	699b      	ldr	r3, [r3, #24]
 8002568:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800256a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	4ab6      	ldr	r2, [pc, #728]	; (8002848 <UART_SetConfig+0x340>)
 8002570:	4293      	cmp	r3, r2
 8002572:	d009      	beq.n	8002588 <UART_SetConfig+0x80>
 8002574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	4ab4      	ldr	r2, [pc, #720]	; (800284c <UART_SetConfig+0x344>)
 800257a:	4293      	cmp	r3, r2
 800257c:	d004      	beq.n	8002588 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800257e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002580:	6a1b      	ldr	r3, [r3, #32]
 8002582:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002584:	4313      	orrs	r3, r2
 8002586:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	689b      	ldr	r3, [r3, #8]
 800258e:	4ab0      	ldr	r2, [pc, #704]	; (8002850 <UART_SetConfig+0x348>)
 8002590:	4013      	ands	r3, r2
 8002592:	0019      	movs	r1, r3
 8002594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002596:	681a      	ldr	r2, [r3, #0]
 8002598:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800259a:	430b      	orrs	r3, r1
 800259c:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800259e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025a4:	220f      	movs	r2, #15
 80025a6:	4393      	bics	r3, r2
 80025a8:	0018      	movs	r0, r3
 80025aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ac:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80025ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025b0:	681a      	ldr	r2, [r3, #0]
 80025b2:	0003      	movs	r3, r0
 80025b4:	430b      	orrs	r3, r1
 80025b6:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80025b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	4aa5      	ldr	r2, [pc, #660]	; (8002854 <UART_SetConfig+0x34c>)
 80025be:	4293      	cmp	r3, r2
 80025c0:	d131      	bne.n	8002626 <UART_SetConfig+0x11e>
 80025c2:	4ba5      	ldr	r3, [pc, #660]	; (8002858 <UART_SetConfig+0x350>)
 80025c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025c6:	2203      	movs	r2, #3
 80025c8:	4013      	ands	r3, r2
 80025ca:	2b03      	cmp	r3, #3
 80025cc:	d01d      	beq.n	800260a <UART_SetConfig+0x102>
 80025ce:	d823      	bhi.n	8002618 <UART_SetConfig+0x110>
 80025d0:	2b02      	cmp	r3, #2
 80025d2:	d00c      	beq.n	80025ee <UART_SetConfig+0xe6>
 80025d4:	d820      	bhi.n	8002618 <UART_SetConfig+0x110>
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d002      	beq.n	80025e0 <UART_SetConfig+0xd8>
 80025da:	2b01      	cmp	r3, #1
 80025dc:	d00e      	beq.n	80025fc <UART_SetConfig+0xf4>
 80025de:	e01b      	b.n	8002618 <UART_SetConfig+0x110>
 80025e0:	231b      	movs	r3, #27
 80025e2:	2220      	movs	r2, #32
 80025e4:	189b      	adds	r3, r3, r2
 80025e6:	19db      	adds	r3, r3, r7
 80025e8:	2200      	movs	r2, #0
 80025ea:	701a      	strb	r2, [r3, #0]
 80025ec:	e154      	b.n	8002898 <UART_SetConfig+0x390>
 80025ee:	231b      	movs	r3, #27
 80025f0:	2220      	movs	r2, #32
 80025f2:	189b      	adds	r3, r3, r2
 80025f4:	19db      	adds	r3, r3, r7
 80025f6:	2202      	movs	r2, #2
 80025f8:	701a      	strb	r2, [r3, #0]
 80025fa:	e14d      	b.n	8002898 <UART_SetConfig+0x390>
 80025fc:	231b      	movs	r3, #27
 80025fe:	2220      	movs	r2, #32
 8002600:	189b      	adds	r3, r3, r2
 8002602:	19db      	adds	r3, r3, r7
 8002604:	2204      	movs	r2, #4
 8002606:	701a      	strb	r2, [r3, #0]
 8002608:	e146      	b.n	8002898 <UART_SetConfig+0x390>
 800260a:	231b      	movs	r3, #27
 800260c:	2220      	movs	r2, #32
 800260e:	189b      	adds	r3, r3, r2
 8002610:	19db      	adds	r3, r3, r7
 8002612:	2208      	movs	r2, #8
 8002614:	701a      	strb	r2, [r3, #0]
 8002616:	e13f      	b.n	8002898 <UART_SetConfig+0x390>
 8002618:	231b      	movs	r3, #27
 800261a:	2220      	movs	r2, #32
 800261c:	189b      	adds	r3, r3, r2
 800261e:	19db      	adds	r3, r3, r7
 8002620:	2210      	movs	r2, #16
 8002622:	701a      	strb	r2, [r3, #0]
 8002624:	e138      	b.n	8002898 <UART_SetConfig+0x390>
 8002626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	4a8c      	ldr	r2, [pc, #560]	; (800285c <UART_SetConfig+0x354>)
 800262c:	4293      	cmp	r3, r2
 800262e:	d131      	bne.n	8002694 <UART_SetConfig+0x18c>
 8002630:	4b89      	ldr	r3, [pc, #548]	; (8002858 <UART_SetConfig+0x350>)
 8002632:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002634:	220c      	movs	r2, #12
 8002636:	4013      	ands	r3, r2
 8002638:	2b0c      	cmp	r3, #12
 800263a:	d01d      	beq.n	8002678 <UART_SetConfig+0x170>
 800263c:	d823      	bhi.n	8002686 <UART_SetConfig+0x17e>
 800263e:	2b08      	cmp	r3, #8
 8002640:	d00c      	beq.n	800265c <UART_SetConfig+0x154>
 8002642:	d820      	bhi.n	8002686 <UART_SetConfig+0x17e>
 8002644:	2b00      	cmp	r3, #0
 8002646:	d002      	beq.n	800264e <UART_SetConfig+0x146>
 8002648:	2b04      	cmp	r3, #4
 800264a:	d00e      	beq.n	800266a <UART_SetConfig+0x162>
 800264c:	e01b      	b.n	8002686 <UART_SetConfig+0x17e>
 800264e:	231b      	movs	r3, #27
 8002650:	2220      	movs	r2, #32
 8002652:	189b      	adds	r3, r3, r2
 8002654:	19db      	adds	r3, r3, r7
 8002656:	2200      	movs	r2, #0
 8002658:	701a      	strb	r2, [r3, #0]
 800265a:	e11d      	b.n	8002898 <UART_SetConfig+0x390>
 800265c:	231b      	movs	r3, #27
 800265e:	2220      	movs	r2, #32
 8002660:	189b      	adds	r3, r3, r2
 8002662:	19db      	adds	r3, r3, r7
 8002664:	2202      	movs	r2, #2
 8002666:	701a      	strb	r2, [r3, #0]
 8002668:	e116      	b.n	8002898 <UART_SetConfig+0x390>
 800266a:	231b      	movs	r3, #27
 800266c:	2220      	movs	r2, #32
 800266e:	189b      	adds	r3, r3, r2
 8002670:	19db      	adds	r3, r3, r7
 8002672:	2204      	movs	r2, #4
 8002674:	701a      	strb	r2, [r3, #0]
 8002676:	e10f      	b.n	8002898 <UART_SetConfig+0x390>
 8002678:	231b      	movs	r3, #27
 800267a:	2220      	movs	r2, #32
 800267c:	189b      	adds	r3, r3, r2
 800267e:	19db      	adds	r3, r3, r7
 8002680:	2208      	movs	r2, #8
 8002682:	701a      	strb	r2, [r3, #0]
 8002684:	e108      	b.n	8002898 <UART_SetConfig+0x390>
 8002686:	231b      	movs	r3, #27
 8002688:	2220      	movs	r2, #32
 800268a:	189b      	adds	r3, r3, r2
 800268c:	19db      	adds	r3, r3, r7
 800268e:	2210      	movs	r2, #16
 8002690:	701a      	strb	r2, [r3, #0]
 8002692:	e101      	b.n	8002898 <UART_SetConfig+0x390>
 8002694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	4a71      	ldr	r2, [pc, #452]	; (8002860 <UART_SetConfig+0x358>)
 800269a:	4293      	cmp	r3, r2
 800269c:	d131      	bne.n	8002702 <UART_SetConfig+0x1fa>
 800269e:	4b6e      	ldr	r3, [pc, #440]	; (8002858 <UART_SetConfig+0x350>)
 80026a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026a2:	2230      	movs	r2, #48	; 0x30
 80026a4:	4013      	ands	r3, r2
 80026a6:	2b30      	cmp	r3, #48	; 0x30
 80026a8:	d01d      	beq.n	80026e6 <UART_SetConfig+0x1de>
 80026aa:	d823      	bhi.n	80026f4 <UART_SetConfig+0x1ec>
 80026ac:	2b20      	cmp	r3, #32
 80026ae:	d00c      	beq.n	80026ca <UART_SetConfig+0x1c2>
 80026b0:	d820      	bhi.n	80026f4 <UART_SetConfig+0x1ec>
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d002      	beq.n	80026bc <UART_SetConfig+0x1b4>
 80026b6:	2b10      	cmp	r3, #16
 80026b8:	d00e      	beq.n	80026d8 <UART_SetConfig+0x1d0>
 80026ba:	e01b      	b.n	80026f4 <UART_SetConfig+0x1ec>
 80026bc:	231b      	movs	r3, #27
 80026be:	2220      	movs	r2, #32
 80026c0:	189b      	adds	r3, r3, r2
 80026c2:	19db      	adds	r3, r3, r7
 80026c4:	2200      	movs	r2, #0
 80026c6:	701a      	strb	r2, [r3, #0]
 80026c8:	e0e6      	b.n	8002898 <UART_SetConfig+0x390>
 80026ca:	231b      	movs	r3, #27
 80026cc:	2220      	movs	r2, #32
 80026ce:	189b      	adds	r3, r3, r2
 80026d0:	19db      	adds	r3, r3, r7
 80026d2:	2202      	movs	r2, #2
 80026d4:	701a      	strb	r2, [r3, #0]
 80026d6:	e0df      	b.n	8002898 <UART_SetConfig+0x390>
 80026d8:	231b      	movs	r3, #27
 80026da:	2220      	movs	r2, #32
 80026dc:	189b      	adds	r3, r3, r2
 80026de:	19db      	adds	r3, r3, r7
 80026e0:	2204      	movs	r2, #4
 80026e2:	701a      	strb	r2, [r3, #0]
 80026e4:	e0d8      	b.n	8002898 <UART_SetConfig+0x390>
 80026e6:	231b      	movs	r3, #27
 80026e8:	2220      	movs	r2, #32
 80026ea:	189b      	adds	r3, r3, r2
 80026ec:	19db      	adds	r3, r3, r7
 80026ee:	2208      	movs	r2, #8
 80026f0:	701a      	strb	r2, [r3, #0]
 80026f2:	e0d1      	b.n	8002898 <UART_SetConfig+0x390>
 80026f4:	231b      	movs	r3, #27
 80026f6:	2220      	movs	r2, #32
 80026f8:	189b      	adds	r3, r3, r2
 80026fa:	19db      	adds	r3, r3, r7
 80026fc:	2210      	movs	r2, #16
 80026fe:	701a      	strb	r2, [r3, #0]
 8002700:	e0ca      	b.n	8002898 <UART_SetConfig+0x390>
 8002702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	4a57      	ldr	r2, [pc, #348]	; (8002864 <UART_SetConfig+0x35c>)
 8002708:	4293      	cmp	r3, r2
 800270a:	d106      	bne.n	800271a <UART_SetConfig+0x212>
 800270c:	231b      	movs	r3, #27
 800270e:	2220      	movs	r2, #32
 8002710:	189b      	adds	r3, r3, r2
 8002712:	19db      	adds	r3, r3, r7
 8002714:	2200      	movs	r2, #0
 8002716:	701a      	strb	r2, [r3, #0]
 8002718:	e0be      	b.n	8002898 <UART_SetConfig+0x390>
 800271a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	4a52      	ldr	r2, [pc, #328]	; (8002868 <UART_SetConfig+0x360>)
 8002720:	4293      	cmp	r3, r2
 8002722:	d106      	bne.n	8002732 <UART_SetConfig+0x22a>
 8002724:	231b      	movs	r3, #27
 8002726:	2220      	movs	r2, #32
 8002728:	189b      	adds	r3, r3, r2
 800272a:	19db      	adds	r3, r3, r7
 800272c:	2200      	movs	r2, #0
 800272e:	701a      	strb	r2, [r3, #0]
 8002730:	e0b2      	b.n	8002898 <UART_SetConfig+0x390>
 8002732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	4a4d      	ldr	r2, [pc, #308]	; (800286c <UART_SetConfig+0x364>)
 8002738:	4293      	cmp	r3, r2
 800273a:	d106      	bne.n	800274a <UART_SetConfig+0x242>
 800273c:	231b      	movs	r3, #27
 800273e:	2220      	movs	r2, #32
 8002740:	189b      	adds	r3, r3, r2
 8002742:	19db      	adds	r3, r3, r7
 8002744:	2200      	movs	r2, #0
 8002746:	701a      	strb	r2, [r3, #0]
 8002748:	e0a6      	b.n	8002898 <UART_SetConfig+0x390>
 800274a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	4a3e      	ldr	r2, [pc, #248]	; (8002848 <UART_SetConfig+0x340>)
 8002750:	4293      	cmp	r3, r2
 8002752:	d13e      	bne.n	80027d2 <UART_SetConfig+0x2ca>
 8002754:	4b40      	ldr	r3, [pc, #256]	; (8002858 <UART_SetConfig+0x350>)
 8002756:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002758:	23c0      	movs	r3, #192	; 0xc0
 800275a:	011b      	lsls	r3, r3, #4
 800275c:	4013      	ands	r3, r2
 800275e:	22c0      	movs	r2, #192	; 0xc0
 8002760:	0112      	lsls	r2, r2, #4
 8002762:	4293      	cmp	r3, r2
 8002764:	d027      	beq.n	80027b6 <UART_SetConfig+0x2ae>
 8002766:	22c0      	movs	r2, #192	; 0xc0
 8002768:	0112      	lsls	r2, r2, #4
 800276a:	4293      	cmp	r3, r2
 800276c:	d82a      	bhi.n	80027c4 <UART_SetConfig+0x2bc>
 800276e:	2280      	movs	r2, #128	; 0x80
 8002770:	0112      	lsls	r2, r2, #4
 8002772:	4293      	cmp	r3, r2
 8002774:	d011      	beq.n	800279a <UART_SetConfig+0x292>
 8002776:	2280      	movs	r2, #128	; 0x80
 8002778:	0112      	lsls	r2, r2, #4
 800277a:	4293      	cmp	r3, r2
 800277c:	d822      	bhi.n	80027c4 <UART_SetConfig+0x2bc>
 800277e:	2b00      	cmp	r3, #0
 8002780:	d004      	beq.n	800278c <UART_SetConfig+0x284>
 8002782:	2280      	movs	r2, #128	; 0x80
 8002784:	00d2      	lsls	r2, r2, #3
 8002786:	4293      	cmp	r3, r2
 8002788:	d00e      	beq.n	80027a8 <UART_SetConfig+0x2a0>
 800278a:	e01b      	b.n	80027c4 <UART_SetConfig+0x2bc>
 800278c:	231b      	movs	r3, #27
 800278e:	2220      	movs	r2, #32
 8002790:	189b      	adds	r3, r3, r2
 8002792:	19db      	adds	r3, r3, r7
 8002794:	2200      	movs	r2, #0
 8002796:	701a      	strb	r2, [r3, #0]
 8002798:	e07e      	b.n	8002898 <UART_SetConfig+0x390>
 800279a:	231b      	movs	r3, #27
 800279c:	2220      	movs	r2, #32
 800279e:	189b      	adds	r3, r3, r2
 80027a0:	19db      	adds	r3, r3, r7
 80027a2:	2202      	movs	r2, #2
 80027a4:	701a      	strb	r2, [r3, #0]
 80027a6:	e077      	b.n	8002898 <UART_SetConfig+0x390>
 80027a8:	231b      	movs	r3, #27
 80027aa:	2220      	movs	r2, #32
 80027ac:	189b      	adds	r3, r3, r2
 80027ae:	19db      	adds	r3, r3, r7
 80027b0:	2204      	movs	r2, #4
 80027b2:	701a      	strb	r2, [r3, #0]
 80027b4:	e070      	b.n	8002898 <UART_SetConfig+0x390>
 80027b6:	231b      	movs	r3, #27
 80027b8:	2220      	movs	r2, #32
 80027ba:	189b      	adds	r3, r3, r2
 80027bc:	19db      	adds	r3, r3, r7
 80027be:	2208      	movs	r2, #8
 80027c0:	701a      	strb	r2, [r3, #0]
 80027c2:	e069      	b.n	8002898 <UART_SetConfig+0x390>
 80027c4:	231b      	movs	r3, #27
 80027c6:	2220      	movs	r2, #32
 80027c8:	189b      	adds	r3, r3, r2
 80027ca:	19db      	adds	r3, r3, r7
 80027cc:	2210      	movs	r2, #16
 80027ce:	701a      	strb	r2, [r3, #0]
 80027d0:	e062      	b.n	8002898 <UART_SetConfig+0x390>
 80027d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	4a1d      	ldr	r2, [pc, #116]	; (800284c <UART_SetConfig+0x344>)
 80027d8:	4293      	cmp	r3, r2
 80027da:	d157      	bne.n	800288c <UART_SetConfig+0x384>
 80027dc:	4b1e      	ldr	r3, [pc, #120]	; (8002858 <UART_SetConfig+0x350>)
 80027de:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80027e0:	23c0      	movs	r3, #192	; 0xc0
 80027e2:	009b      	lsls	r3, r3, #2
 80027e4:	4013      	ands	r3, r2
 80027e6:	22c0      	movs	r2, #192	; 0xc0
 80027e8:	0092      	lsls	r2, r2, #2
 80027ea:	4293      	cmp	r3, r2
 80027ec:	d040      	beq.n	8002870 <UART_SetConfig+0x368>
 80027ee:	22c0      	movs	r2, #192	; 0xc0
 80027f0:	0092      	lsls	r2, r2, #2
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d843      	bhi.n	800287e <UART_SetConfig+0x376>
 80027f6:	2280      	movs	r2, #128	; 0x80
 80027f8:	0092      	lsls	r2, r2, #2
 80027fa:	4293      	cmp	r3, r2
 80027fc:	d011      	beq.n	8002822 <UART_SetConfig+0x31a>
 80027fe:	2280      	movs	r2, #128	; 0x80
 8002800:	0092      	lsls	r2, r2, #2
 8002802:	4293      	cmp	r3, r2
 8002804:	d83b      	bhi.n	800287e <UART_SetConfig+0x376>
 8002806:	2b00      	cmp	r3, #0
 8002808:	d004      	beq.n	8002814 <UART_SetConfig+0x30c>
 800280a:	2280      	movs	r2, #128	; 0x80
 800280c:	0052      	lsls	r2, r2, #1
 800280e:	4293      	cmp	r3, r2
 8002810:	d00e      	beq.n	8002830 <UART_SetConfig+0x328>
 8002812:	e034      	b.n	800287e <UART_SetConfig+0x376>
 8002814:	231b      	movs	r3, #27
 8002816:	2220      	movs	r2, #32
 8002818:	189b      	adds	r3, r3, r2
 800281a:	19db      	adds	r3, r3, r7
 800281c:	2200      	movs	r2, #0
 800281e:	701a      	strb	r2, [r3, #0]
 8002820:	e03a      	b.n	8002898 <UART_SetConfig+0x390>
 8002822:	231b      	movs	r3, #27
 8002824:	2220      	movs	r2, #32
 8002826:	189b      	adds	r3, r3, r2
 8002828:	19db      	adds	r3, r3, r7
 800282a:	2202      	movs	r2, #2
 800282c:	701a      	strb	r2, [r3, #0]
 800282e:	e033      	b.n	8002898 <UART_SetConfig+0x390>
 8002830:	231b      	movs	r3, #27
 8002832:	2220      	movs	r2, #32
 8002834:	189b      	adds	r3, r3, r2
 8002836:	19db      	adds	r3, r3, r7
 8002838:	2204      	movs	r2, #4
 800283a:	701a      	strb	r2, [r3, #0]
 800283c:	e02c      	b.n	8002898 <UART_SetConfig+0x390>
 800283e:	46c0      	nop			; (mov r8, r8)
 8002840:	cfff69f3 	.word	0xcfff69f3
 8002844:	ffffcfff 	.word	0xffffcfff
 8002848:	40008000 	.word	0x40008000
 800284c:	40008400 	.word	0x40008400
 8002850:	11fff4ff 	.word	0x11fff4ff
 8002854:	40013800 	.word	0x40013800
 8002858:	40021000 	.word	0x40021000
 800285c:	40004400 	.word	0x40004400
 8002860:	40004800 	.word	0x40004800
 8002864:	40004c00 	.word	0x40004c00
 8002868:	40005000 	.word	0x40005000
 800286c:	40013c00 	.word	0x40013c00
 8002870:	231b      	movs	r3, #27
 8002872:	2220      	movs	r2, #32
 8002874:	189b      	adds	r3, r3, r2
 8002876:	19db      	adds	r3, r3, r7
 8002878:	2208      	movs	r2, #8
 800287a:	701a      	strb	r2, [r3, #0]
 800287c:	e00c      	b.n	8002898 <UART_SetConfig+0x390>
 800287e:	231b      	movs	r3, #27
 8002880:	2220      	movs	r2, #32
 8002882:	189b      	adds	r3, r3, r2
 8002884:	19db      	adds	r3, r3, r7
 8002886:	2210      	movs	r2, #16
 8002888:	701a      	strb	r2, [r3, #0]
 800288a:	e005      	b.n	8002898 <UART_SetConfig+0x390>
 800288c:	231b      	movs	r3, #27
 800288e:	2220      	movs	r2, #32
 8002890:	189b      	adds	r3, r3, r2
 8002892:	19db      	adds	r3, r3, r7
 8002894:	2210      	movs	r2, #16
 8002896:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	4ac1      	ldr	r2, [pc, #772]	; (8002ba4 <UART_SetConfig+0x69c>)
 800289e:	4293      	cmp	r3, r2
 80028a0:	d005      	beq.n	80028ae <UART_SetConfig+0x3a6>
 80028a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	4ac0      	ldr	r2, [pc, #768]	; (8002ba8 <UART_SetConfig+0x6a0>)
 80028a8:	4293      	cmp	r3, r2
 80028aa:	d000      	beq.n	80028ae <UART_SetConfig+0x3a6>
 80028ac:	e093      	b.n	80029d6 <UART_SetConfig+0x4ce>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80028ae:	231b      	movs	r3, #27
 80028b0:	2220      	movs	r2, #32
 80028b2:	189b      	adds	r3, r3, r2
 80028b4:	19db      	adds	r3, r3, r7
 80028b6:	781b      	ldrb	r3, [r3, #0]
 80028b8:	2b08      	cmp	r3, #8
 80028ba:	d015      	beq.n	80028e8 <UART_SetConfig+0x3e0>
 80028bc:	dc18      	bgt.n	80028f0 <UART_SetConfig+0x3e8>
 80028be:	2b04      	cmp	r3, #4
 80028c0:	d00d      	beq.n	80028de <UART_SetConfig+0x3d6>
 80028c2:	dc15      	bgt.n	80028f0 <UART_SetConfig+0x3e8>
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d002      	beq.n	80028ce <UART_SetConfig+0x3c6>
 80028c8:	2b02      	cmp	r3, #2
 80028ca:	d005      	beq.n	80028d8 <UART_SetConfig+0x3d0>
 80028cc:	e010      	b.n	80028f0 <UART_SetConfig+0x3e8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80028ce:	f7ff f9f5 	bl	8001cbc <HAL_RCC_GetPCLK1Freq>
 80028d2:	0003      	movs	r3, r0
 80028d4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80028d6:	e014      	b.n	8002902 <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80028d8:	4bb4      	ldr	r3, [pc, #720]	; (8002bac <UART_SetConfig+0x6a4>)
 80028da:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80028dc:	e011      	b.n	8002902 <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80028de:	f7ff f961 	bl	8001ba4 <HAL_RCC_GetSysClockFreq>
 80028e2:	0003      	movs	r3, r0
 80028e4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80028e6:	e00c      	b.n	8002902 <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80028e8:	2380      	movs	r3, #128	; 0x80
 80028ea:	021b      	lsls	r3, r3, #8
 80028ec:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80028ee:	e008      	b.n	8002902 <UART_SetConfig+0x3fa>
      default:
        pclk = 0U;
 80028f0:	2300      	movs	r3, #0
 80028f2:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 80028f4:	231a      	movs	r3, #26
 80028f6:	2220      	movs	r2, #32
 80028f8:	189b      	adds	r3, r3, r2
 80028fa:	19db      	adds	r3, r3, r7
 80028fc:	2201      	movs	r2, #1
 80028fe:	701a      	strb	r2, [r3, #0]
        break;
 8002900:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002902:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002904:	2b00      	cmp	r3, #0
 8002906:	d100      	bne.n	800290a <UART_SetConfig+0x402>
 8002908:	e135      	b.n	8002b76 <UART_SetConfig+0x66e>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800290a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800290c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800290e:	4ba8      	ldr	r3, [pc, #672]	; (8002bb0 <UART_SetConfig+0x6a8>)
 8002910:	0052      	lsls	r2, r2, #1
 8002912:	5ad3      	ldrh	r3, [r2, r3]
 8002914:	0019      	movs	r1, r3
 8002916:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002918:	f7fd fbfc 	bl	8000114 <__udivsi3>
 800291c:	0003      	movs	r3, r0
 800291e:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002922:	685a      	ldr	r2, [r3, #4]
 8002924:	0013      	movs	r3, r2
 8002926:	005b      	lsls	r3, r3, #1
 8002928:	189b      	adds	r3, r3, r2
 800292a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800292c:	429a      	cmp	r2, r3
 800292e:	d305      	bcc.n	800293c <UART_SetConfig+0x434>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8002930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002932:	685b      	ldr	r3, [r3, #4]
 8002934:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002936:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002938:	429a      	cmp	r2, r3
 800293a:	d906      	bls.n	800294a <UART_SetConfig+0x442>
      {
        ret = HAL_ERROR;
 800293c:	231a      	movs	r3, #26
 800293e:	2220      	movs	r2, #32
 8002940:	189b      	adds	r3, r3, r2
 8002942:	19db      	adds	r3, r3, r7
 8002944:	2201      	movs	r2, #1
 8002946:	701a      	strb	r2, [r3, #0]
 8002948:	e044      	b.n	80029d4 <UART_SetConfig+0x4cc>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800294a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800294c:	61bb      	str	r3, [r7, #24]
 800294e:	2300      	movs	r3, #0
 8002950:	61fb      	str	r3, [r7, #28]
 8002952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002954:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002956:	4b96      	ldr	r3, [pc, #600]	; (8002bb0 <UART_SetConfig+0x6a8>)
 8002958:	0052      	lsls	r2, r2, #1
 800295a:	5ad3      	ldrh	r3, [r2, r3]
 800295c:	613b      	str	r3, [r7, #16]
 800295e:	2300      	movs	r3, #0
 8002960:	617b      	str	r3, [r7, #20]
 8002962:	693a      	ldr	r2, [r7, #16]
 8002964:	697b      	ldr	r3, [r7, #20]
 8002966:	69b8      	ldr	r0, [r7, #24]
 8002968:	69f9      	ldr	r1, [r7, #28]
 800296a:	f7fd fd49 	bl	8000400 <__aeabi_uldivmod>
 800296e:	0002      	movs	r2, r0
 8002970:	000b      	movs	r3, r1
 8002972:	0e11      	lsrs	r1, r2, #24
 8002974:	021d      	lsls	r5, r3, #8
 8002976:	430d      	orrs	r5, r1
 8002978:	0214      	lsls	r4, r2, #8
 800297a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800297c:	685b      	ldr	r3, [r3, #4]
 800297e:	085b      	lsrs	r3, r3, #1
 8002980:	60bb      	str	r3, [r7, #8]
 8002982:	2300      	movs	r3, #0
 8002984:	60fb      	str	r3, [r7, #12]
 8002986:	68b8      	ldr	r0, [r7, #8]
 8002988:	68f9      	ldr	r1, [r7, #12]
 800298a:	1900      	adds	r0, r0, r4
 800298c:	4169      	adcs	r1, r5
 800298e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002990:	685b      	ldr	r3, [r3, #4]
 8002992:	603b      	str	r3, [r7, #0]
 8002994:	2300      	movs	r3, #0
 8002996:	607b      	str	r3, [r7, #4]
 8002998:	683a      	ldr	r2, [r7, #0]
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	f7fd fd30 	bl	8000400 <__aeabi_uldivmod>
 80029a0:	0002      	movs	r2, r0
 80029a2:	000b      	movs	r3, r1
 80029a4:	0013      	movs	r3, r2
 80029a6:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80029a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80029aa:	23c0      	movs	r3, #192	; 0xc0
 80029ac:	009b      	lsls	r3, r3, #2
 80029ae:	429a      	cmp	r2, r3
 80029b0:	d309      	bcc.n	80029c6 <UART_SetConfig+0x4be>
 80029b2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80029b4:	2380      	movs	r3, #128	; 0x80
 80029b6:	035b      	lsls	r3, r3, #13
 80029b8:	429a      	cmp	r2, r3
 80029ba:	d204      	bcs.n	80029c6 <UART_SetConfig+0x4be>
        {
          huart->Instance->BRR = usartdiv;
 80029bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80029c2:	60da      	str	r2, [r3, #12]
 80029c4:	e006      	b.n	80029d4 <UART_SetConfig+0x4cc>
        }
        else
        {
          ret = HAL_ERROR;
 80029c6:	231a      	movs	r3, #26
 80029c8:	2220      	movs	r2, #32
 80029ca:	189b      	adds	r3, r3, r2
 80029cc:	19db      	adds	r3, r3, r7
 80029ce:	2201      	movs	r2, #1
 80029d0:	701a      	strb	r2, [r3, #0]
    if (pclk != 0U)
 80029d2:	e0d0      	b.n	8002b76 <UART_SetConfig+0x66e>
 80029d4:	e0cf      	b.n	8002b76 <UART_SetConfig+0x66e>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80029d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029d8:	69da      	ldr	r2, [r3, #28]
 80029da:	2380      	movs	r3, #128	; 0x80
 80029dc:	021b      	lsls	r3, r3, #8
 80029de:	429a      	cmp	r2, r3
 80029e0:	d000      	beq.n	80029e4 <UART_SetConfig+0x4dc>
 80029e2:	e070      	b.n	8002ac6 <UART_SetConfig+0x5be>
  {
    switch (clocksource)
 80029e4:	231b      	movs	r3, #27
 80029e6:	2220      	movs	r2, #32
 80029e8:	189b      	adds	r3, r3, r2
 80029ea:	19db      	adds	r3, r3, r7
 80029ec:	781b      	ldrb	r3, [r3, #0]
 80029ee:	2b08      	cmp	r3, #8
 80029f0:	d015      	beq.n	8002a1e <UART_SetConfig+0x516>
 80029f2:	dc18      	bgt.n	8002a26 <UART_SetConfig+0x51e>
 80029f4:	2b04      	cmp	r3, #4
 80029f6:	d00d      	beq.n	8002a14 <UART_SetConfig+0x50c>
 80029f8:	dc15      	bgt.n	8002a26 <UART_SetConfig+0x51e>
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d002      	beq.n	8002a04 <UART_SetConfig+0x4fc>
 80029fe:	2b02      	cmp	r3, #2
 8002a00:	d005      	beq.n	8002a0e <UART_SetConfig+0x506>
 8002a02:	e010      	b.n	8002a26 <UART_SetConfig+0x51e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002a04:	f7ff f95a 	bl	8001cbc <HAL_RCC_GetPCLK1Freq>
 8002a08:	0003      	movs	r3, r0
 8002a0a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002a0c:	e014      	b.n	8002a38 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002a0e:	4b67      	ldr	r3, [pc, #412]	; (8002bac <UART_SetConfig+0x6a4>)
 8002a10:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002a12:	e011      	b.n	8002a38 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002a14:	f7ff f8c6 	bl	8001ba4 <HAL_RCC_GetSysClockFreq>
 8002a18:	0003      	movs	r3, r0
 8002a1a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002a1c:	e00c      	b.n	8002a38 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002a1e:	2380      	movs	r3, #128	; 0x80
 8002a20:	021b      	lsls	r3, r3, #8
 8002a22:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002a24:	e008      	b.n	8002a38 <UART_SetConfig+0x530>
      default:
        pclk = 0U;
 8002a26:	2300      	movs	r3, #0
 8002a28:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8002a2a:	231a      	movs	r3, #26
 8002a2c:	2220      	movs	r2, #32
 8002a2e:	189b      	adds	r3, r3, r2
 8002a30:	19db      	adds	r3, r3, r7
 8002a32:	2201      	movs	r2, #1
 8002a34:	701a      	strb	r2, [r3, #0]
        break;
 8002a36:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002a38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d100      	bne.n	8002a40 <UART_SetConfig+0x538>
 8002a3e:	e09a      	b.n	8002b76 <UART_SetConfig+0x66e>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a42:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002a44:	4b5a      	ldr	r3, [pc, #360]	; (8002bb0 <UART_SetConfig+0x6a8>)
 8002a46:	0052      	lsls	r2, r2, #1
 8002a48:	5ad3      	ldrh	r3, [r2, r3]
 8002a4a:	0019      	movs	r1, r3
 8002a4c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002a4e:	f7fd fb61 	bl	8000114 <__udivsi3>
 8002a52:	0003      	movs	r3, r0
 8002a54:	005a      	lsls	r2, r3, #1
 8002a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a58:	685b      	ldr	r3, [r3, #4]
 8002a5a:	085b      	lsrs	r3, r3, #1
 8002a5c:	18d2      	adds	r2, r2, r3
 8002a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a60:	685b      	ldr	r3, [r3, #4]
 8002a62:	0019      	movs	r1, r3
 8002a64:	0010      	movs	r0, r2
 8002a66:	f7fd fb55 	bl	8000114 <__udivsi3>
 8002a6a:	0003      	movs	r3, r0
 8002a6c:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002a6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a70:	2b0f      	cmp	r3, #15
 8002a72:	d921      	bls.n	8002ab8 <UART_SetConfig+0x5b0>
 8002a74:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002a76:	2380      	movs	r3, #128	; 0x80
 8002a78:	025b      	lsls	r3, r3, #9
 8002a7a:	429a      	cmp	r2, r3
 8002a7c:	d21c      	bcs.n	8002ab8 <UART_SetConfig+0x5b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002a7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a80:	b29a      	uxth	r2, r3
 8002a82:	200e      	movs	r0, #14
 8002a84:	2420      	movs	r4, #32
 8002a86:	1903      	adds	r3, r0, r4
 8002a88:	19db      	adds	r3, r3, r7
 8002a8a:	210f      	movs	r1, #15
 8002a8c:	438a      	bics	r2, r1
 8002a8e:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002a90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a92:	085b      	lsrs	r3, r3, #1
 8002a94:	b29b      	uxth	r3, r3
 8002a96:	2207      	movs	r2, #7
 8002a98:	4013      	ands	r3, r2
 8002a9a:	b299      	uxth	r1, r3
 8002a9c:	1903      	adds	r3, r0, r4
 8002a9e:	19db      	adds	r3, r3, r7
 8002aa0:	1902      	adds	r2, r0, r4
 8002aa2:	19d2      	adds	r2, r2, r7
 8002aa4:	8812      	ldrh	r2, [r2, #0]
 8002aa6:	430a      	orrs	r2, r1
 8002aa8:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8002aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	1902      	adds	r2, r0, r4
 8002ab0:	19d2      	adds	r2, r2, r7
 8002ab2:	8812      	ldrh	r2, [r2, #0]
 8002ab4:	60da      	str	r2, [r3, #12]
 8002ab6:	e05e      	b.n	8002b76 <UART_SetConfig+0x66e>
      }
      else
      {
        ret = HAL_ERROR;
 8002ab8:	231a      	movs	r3, #26
 8002aba:	2220      	movs	r2, #32
 8002abc:	189b      	adds	r3, r3, r2
 8002abe:	19db      	adds	r3, r3, r7
 8002ac0:	2201      	movs	r2, #1
 8002ac2:	701a      	strb	r2, [r3, #0]
 8002ac4:	e057      	b.n	8002b76 <UART_SetConfig+0x66e>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002ac6:	231b      	movs	r3, #27
 8002ac8:	2220      	movs	r2, #32
 8002aca:	189b      	adds	r3, r3, r2
 8002acc:	19db      	adds	r3, r3, r7
 8002ace:	781b      	ldrb	r3, [r3, #0]
 8002ad0:	2b08      	cmp	r3, #8
 8002ad2:	d015      	beq.n	8002b00 <UART_SetConfig+0x5f8>
 8002ad4:	dc18      	bgt.n	8002b08 <UART_SetConfig+0x600>
 8002ad6:	2b04      	cmp	r3, #4
 8002ad8:	d00d      	beq.n	8002af6 <UART_SetConfig+0x5ee>
 8002ada:	dc15      	bgt.n	8002b08 <UART_SetConfig+0x600>
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d002      	beq.n	8002ae6 <UART_SetConfig+0x5de>
 8002ae0:	2b02      	cmp	r3, #2
 8002ae2:	d005      	beq.n	8002af0 <UART_SetConfig+0x5e8>
 8002ae4:	e010      	b.n	8002b08 <UART_SetConfig+0x600>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002ae6:	f7ff f8e9 	bl	8001cbc <HAL_RCC_GetPCLK1Freq>
 8002aea:	0003      	movs	r3, r0
 8002aec:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002aee:	e014      	b.n	8002b1a <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002af0:	4b2e      	ldr	r3, [pc, #184]	; (8002bac <UART_SetConfig+0x6a4>)
 8002af2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002af4:	e011      	b.n	8002b1a <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002af6:	f7ff f855 	bl	8001ba4 <HAL_RCC_GetSysClockFreq>
 8002afa:	0003      	movs	r3, r0
 8002afc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002afe:	e00c      	b.n	8002b1a <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002b00:	2380      	movs	r3, #128	; 0x80
 8002b02:	021b      	lsls	r3, r3, #8
 8002b04:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002b06:	e008      	b.n	8002b1a <UART_SetConfig+0x612>
      default:
        pclk = 0U;
 8002b08:	2300      	movs	r3, #0
 8002b0a:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8002b0c:	231a      	movs	r3, #26
 8002b0e:	2220      	movs	r2, #32
 8002b10:	189b      	adds	r3, r3, r2
 8002b12:	19db      	adds	r3, r3, r7
 8002b14:	2201      	movs	r2, #1
 8002b16:	701a      	strb	r2, [r3, #0]
        break;
 8002b18:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8002b1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d02a      	beq.n	8002b76 <UART_SetConfig+0x66e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b22:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002b24:	4b22      	ldr	r3, [pc, #136]	; (8002bb0 <UART_SetConfig+0x6a8>)
 8002b26:	0052      	lsls	r2, r2, #1
 8002b28:	5ad3      	ldrh	r3, [r2, r3]
 8002b2a:	0019      	movs	r1, r3
 8002b2c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002b2e:	f7fd faf1 	bl	8000114 <__udivsi3>
 8002b32:	0003      	movs	r3, r0
 8002b34:	001a      	movs	r2, r3
 8002b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b38:	685b      	ldr	r3, [r3, #4]
 8002b3a:	085b      	lsrs	r3, r3, #1
 8002b3c:	18d2      	adds	r2, r2, r3
 8002b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b40:	685b      	ldr	r3, [r3, #4]
 8002b42:	0019      	movs	r1, r3
 8002b44:	0010      	movs	r0, r2
 8002b46:	f7fd fae5 	bl	8000114 <__udivsi3>
 8002b4a:	0003      	movs	r3, r0
 8002b4c:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002b4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b50:	2b0f      	cmp	r3, #15
 8002b52:	d90a      	bls.n	8002b6a <UART_SetConfig+0x662>
 8002b54:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002b56:	2380      	movs	r3, #128	; 0x80
 8002b58:	025b      	lsls	r3, r3, #9
 8002b5a:	429a      	cmp	r2, r3
 8002b5c:	d205      	bcs.n	8002b6a <UART_SetConfig+0x662>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002b5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b60:	b29a      	uxth	r2, r3
 8002b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	60da      	str	r2, [r3, #12]
 8002b68:	e005      	b.n	8002b76 <UART_SetConfig+0x66e>
      }
      else
      {
        ret = HAL_ERROR;
 8002b6a:	231a      	movs	r3, #26
 8002b6c:	2220      	movs	r2, #32
 8002b6e:	189b      	adds	r3, r3, r2
 8002b70:	19db      	adds	r3, r3, r7
 8002b72:	2201      	movs	r2, #1
 8002b74:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8002b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b78:	226a      	movs	r2, #106	; 0x6a
 8002b7a:	2101      	movs	r1, #1
 8002b7c:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8002b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b80:	2268      	movs	r2, #104	; 0x68
 8002b82:	2101      	movs	r1, #1
 8002b84:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b88:	2200      	movs	r2, #0
 8002b8a:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8002b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b8e:	2200      	movs	r2, #0
 8002b90:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8002b92:	231a      	movs	r3, #26
 8002b94:	2220      	movs	r2, #32
 8002b96:	189b      	adds	r3, r3, r2
 8002b98:	19db      	adds	r3, r3, r7
 8002b9a:	781b      	ldrb	r3, [r3, #0]
}
 8002b9c:	0018      	movs	r0, r3
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	b010      	add	sp, #64	; 0x40
 8002ba2:	bdb0      	pop	{r4, r5, r7, pc}
 8002ba4:	40008000 	.word	0x40008000
 8002ba8:	40008400 	.word	0x40008400
 8002bac:	00f42400 	.word	0x00f42400
 8002bb0:	08003268 	.word	0x08003268

08002bb4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b082      	sub	sp, #8
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bc0:	2201      	movs	r2, #1
 8002bc2:	4013      	ands	r3, r2
 8002bc4:	d00b      	beq.n	8002bde <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	685b      	ldr	r3, [r3, #4]
 8002bcc:	4a4a      	ldr	r2, [pc, #296]	; (8002cf8 <UART_AdvFeatureConfig+0x144>)
 8002bce:	4013      	ands	r3, r2
 8002bd0:	0019      	movs	r1, r3
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	430a      	orrs	r2, r1
 8002bdc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002be2:	2202      	movs	r2, #2
 8002be4:	4013      	ands	r3, r2
 8002be6:	d00b      	beq.n	8002c00 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	685b      	ldr	r3, [r3, #4]
 8002bee:	4a43      	ldr	r2, [pc, #268]	; (8002cfc <UART_AdvFeatureConfig+0x148>)
 8002bf0:	4013      	ands	r3, r2
 8002bf2:	0019      	movs	r1, r3
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	430a      	orrs	r2, r1
 8002bfe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c04:	2204      	movs	r2, #4
 8002c06:	4013      	ands	r3, r2
 8002c08:	d00b      	beq.n	8002c22 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	685b      	ldr	r3, [r3, #4]
 8002c10:	4a3b      	ldr	r2, [pc, #236]	; (8002d00 <UART_AdvFeatureConfig+0x14c>)
 8002c12:	4013      	ands	r3, r2
 8002c14:	0019      	movs	r1, r3
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	430a      	orrs	r2, r1
 8002c20:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c26:	2208      	movs	r2, #8
 8002c28:	4013      	ands	r3, r2
 8002c2a:	d00b      	beq.n	8002c44 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	685b      	ldr	r3, [r3, #4]
 8002c32:	4a34      	ldr	r2, [pc, #208]	; (8002d04 <UART_AdvFeatureConfig+0x150>)
 8002c34:	4013      	ands	r3, r2
 8002c36:	0019      	movs	r1, r3
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	430a      	orrs	r2, r1
 8002c42:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c48:	2210      	movs	r2, #16
 8002c4a:	4013      	ands	r3, r2
 8002c4c:	d00b      	beq.n	8002c66 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	689b      	ldr	r3, [r3, #8]
 8002c54:	4a2c      	ldr	r2, [pc, #176]	; (8002d08 <UART_AdvFeatureConfig+0x154>)
 8002c56:	4013      	ands	r3, r2
 8002c58:	0019      	movs	r1, r3
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	430a      	orrs	r2, r1
 8002c64:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c6a:	2220      	movs	r2, #32
 8002c6c:	4013      	ands	r3, r2
 8002c6e:	d00b      	beq.n	8002c88 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	689b      	ldr	r3, [r3, #8]
 8002c76:	4a25      	ldr	r2, [pc, #148]	; (8002d0c <UART_AdvFeatureConfig+0x158>)
 8002c78:	4013      	ands	r3, r2
 8002c7a:	0019      	movs	r1, r3
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	430a      	orrs	r2, r1
 8002c86:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c8c:	2240      	movs	r2, #64	; 0x40
 8002c8e:	4013      	ands	r3, r2
 8002c90:	d01d      	beq.n	8002cce <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	685b      	ldr	r3, [r3, #4]
 8002c98:	4a1d      	ldr	r2, [pc, #116]	; (8002d10 <UART_AdvFeatureConfig+0x15c>)
 8002c9a:	4013      	ands	r3, r2
 8002c9c:	0019      	movs	r1, r3
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	430a      	orrs	r2, r1
 8002ca8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002cae:	2380      	movs	r3, #128	; 0x80
 8002cb0:	035b      	lsls	r3, r3, #13
 8002cb2:	429a      	cmp	r2, r3
 8002cb4:	d10b      	bne.n	8002cce <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	685b      	ldr	r3, [r3, #4]
 8002cbc:	4a15      	ldr	r2, [pc, #84]	; (8002d14 <UART_AdvFeatureConfig+0x160>)
 8002cbe:	4013      	ands	r3, r2
 8002cc0:	0019      	movs	r1, r3
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	430a      	orrs	r2, r1
 8002ccc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cd2:	2280      	movs	r2, #128	; 0x80
 8002cd4:	4013      	ands	r3, r2
 8002cd6:	d00b      	beq.n	8002cf0 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	685b      	ldr	r3, [r3, #4]
 8002cde:	4a0e      	ldr	r2, [pc, #56]	; (8002d18 <UART_AdvFeatureConfig+0x164>)
 8002ce0:	4013      	ands	r3, r2
 8002ce2:	0019      	movs	r1, r3
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	430a      	orrs	r2, r1
 8002cee:	605a      	str	r2, [r3, #4]
  }
}
 8002cf0:	46c0      	nop			; (mov r8, r8)
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	b002      	add	sp, #8
 8002cf6:	bd80      	pop	{r7, pc}
 8002cf8:	fffdffff 	.word	0xfffdffff
 8002cfc:	fffeffff 	.word	0xfffeffff
 8002d00:	fffbffff 	.word	0xfffbffff
 8002d04:	ffff7fff 	.word	0xffff7fff
 8002d08:	ffffefff 	.word	0xffffefff
 8002d0c:	ffffdfff 	.word	0xffffdfff
 8002d10:	ffefffff 	.word	0xffefffff
 8002d14:	ff9fffff 	.word	0xff9fffff
 8002d18:	fff7ffff 	.word	0xfff7ffff

08002d1c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b086      	sub	sp, #24
 8002d20:	af02      	add	r7, sp, #8
 8002d22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	2290      	movs	r2, #144	; 0x90
 8002d28:	2100      	movs	r1, #0
 8002d2a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002d2c:	f7fe f83e 	bl	8000dac <HAL_GetTick>
 8002d30:	0003      	movs	r3, r0
 8002d32:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	2208      	movs	r2, #8
 8002d3c:	4013      	ands	r3, r2
 8002d3e:	2b08      	cmp	r3, #8
 8002d40:	d10c      	bne.n	8002d5c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	2280      	movs	r2, #128	; 0x80
 8002d46:	0391      	lsls	r1, r2, #14
 8002d48:	6878      	ldr	r0, [r7, #4]
 8002d4a:	4a1a      	ldr	r2, [pc, #104]	; (8002db4 <UART_CheckIdleState+0x98>)
 8002d4c:	9200      	str	r2, [sp, #0]
 8002d4e:	2200      	movs	r2, #0
 8002d50:	f000 f832 	bl	8002db8 <UART_WaitOnFlagUntilTimeout>
 8002d54:	1e03      	subs	r3, r0, #0
 8002d56:	d001      	beq.n	8002d5c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002d58:	2303      	movs	r3, #3
 8002d5a:	e026      	b.n	8002daa <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	2204      	movs	r2, #4
 8002d64:	4013      	ands	r3, r2
 8002d66:	2b04      	cmp	r3, #4
 8002d68:	d10c      	bne.n	8002d84 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	2280      	movs	r2, #128	; 0x80
 8002d6e:	03d1      	lsls	r1, r2, #15
 8002d70:	6878      	ldr	r0, [r7, #4]
 8002d72:	4a10      	ldr	r2, [pc, #64]	; (8002db4 <UART_CheckIdleState+0x98>)
 8002d74:	9200      	str	r2, [sp, #0]
 8002d76:	2200      	movs	r2, #0
 8002d78:	f000 f81e 	bl	8002db8 <UART_WaitOnFlagUntilTimeout>
 8002d7c:	1e03      	subs	r3, r0, #0
 8002d7e:	d001      	beq.n	8002d84 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002d80:	2303      	movs	r3, #3
 8002d82:	e012      	b.n	8002daa <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2288      	movs	r2, #136	; 0x88
 8002d88:	2120      	movs	r1, #32
 8002d8a:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	228c      	movs	r2, #140	; 0x8c
 8002d90:	2120      	movs	r1, #32
 8002d92:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2200      	movs	r2, #0
 8002d98:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2284      	movs	r2, #132	; 0x84
 8002da4:	2100      	movs	r1, #0
 8002da6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002da8:	2300      	movs	r3, #0
}
 8002daa:	0018      	movs	r0, r3
 8002dac:	46bd      	mov	sp, r7
 8002dae:	b004      	add	sp, #16
 8002db0:	bd80      	pop	{r7, pc}
 8002db2:	46c0      	nop			; (mov r8, r8)
 8002db4:	01ffffff 	.word	0x01ffffff

08002db8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b094      	sub	sp, #80	; 0x50
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	60f8      	str	r0, [r7, #12]
 8002dc0:	60b9      	str	r1, [r7, #8]
 8002dc2:	603b      	str	r3, [r7, #0]
 8002dc4:	1dfb      	adds	r3, r7, #7
 8002dc6:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002dc8:	e0a7      	b.n	8002f1a <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002dca:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002dcc:	3301      	adds	r3, #1
 8002dce:	d100      	bne.n	8002dd2 <UART_WaitOnFlagUntilTimeout+0x1a>
 8002dd0:	e0a3      	b.n	8002f1a <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002dd2:	f7fd ffeb 	bl	8000dac <HAL_GetTick>
 8002dd6:	0002      	movs	r2, r0
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	1ad3      	subs	r3, r2, r3
 8002ddc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002dde:	429a      	cmp	r2, r3
 8002de0:	d302      	bcc.n	8002de8 <UART_WaitOnFlagUntilTimeout+0x30>
 8002de2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d13f      	bne.n	8002e68 <UART_WaitOnFlagUntilTimeout+0xb0>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002de8:	f3ef 8310 	mrs	r3, PRIMASK
 8002dec:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8002dee:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8002df0:	647b      	str	r3, [r7, #68]	; 0x44
 8002df2:	2301      	movs	r3, #1
 8002df4:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002df6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002df8:	f383 8810 	msr	PRIMASK, r3
}
 8002dfc:	46c0      	nop			; (mov r8, r8)
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	681a      	ldr	r2, [r3, #0]
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	494e      	ldr	r1, [pc, #312]	; (8002f44 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8002e0a:	400a      	ands	r2, r1
 8002e0c:	601a      	str	r2, [r3, #0]
 8002e0e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e10:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e14:	f383 8810 	msr	PRIMASK, r3
}
 8002e18:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002e1a:	f3ef 8310 	mrs	r3, PRIMASK
 8002e1e:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8002e20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e22:	643b      	str	r3, [r7, #64]	; 0x40
 8002e24:	2301      	movs	r3, #1
 8002e26:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e2a:	f383 8810 	msr	PRIMASK, r3
}
 8002e2e:	46c0      	nop			; (mov r8, r8)
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	689a      	ldr	r2, [r3, #8]
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	2101      	movs	r1, #1
 8002e3c:	438a      	bics	r2, r1
 8002e3e:	609a      	str	r2, [r3, #8]
 8002e40:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002e42:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e46:	f383 8810 	msr	PRIMASK, r3
}
 8002e4a:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	2288      	movs	r2, #136	; 0x88
 8002e50:	2120      	movs	r1, #32
 8002e52:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	228c      	movs	r2, #140	; 0x8c
 8002e58:	2120      	movs	r1, #32
 8002e5a:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	2284      	movs	r2, #132	; 0x84
 8002e60:	2100      	movs	r1, #0
 8002e62:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002e64:	2303      	movs	r3, #3
 8002e66:	e069      	b.n	8002f3c <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	2204      	movs	r2, #4
 8002e70:	4013      	ands	r3, r2
 8002e72:	d052      	beq.n	8002f1a <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	69da      	ldr	r2, [r3, #28]
 8002e7a:	2380      	movs	r3, #128	; 0x80
 8002e7c:	011b      	lsls	r3, r3, #4
 8002e7e:	401a      	ands	r2, r3
 8002e80:	2380      	movs	r3, #128	; 0x80
 8002e82:	011b      	lsls	r3, r3, #4
 8002e84:	429a      	cmp	r2, r3
 8002e86:	d148      	bne.n	8002f1a <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	2280      	movs	r2, #128	; 0x80
 8002e8e:	0112      	lsls	r2, r2, #4
 8002e90:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002e92:	f3ef 8310 	mrs	r3, PRIMASK
 8002e96:	613b      	str	r3, [r7, #16]
  return(result);
 8002e98:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8002e9a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002e9c:	2301      	movs	r3, #1
 8002e9e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ea0:	697b      	ldr	r3, [r7, #20]
 8002ea2:	f383 8810 	msr	PRIMASK, r3
}
 8002ea6:	46c0      	nop			; (mov r8, r8)
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	681a      	ldr	r2, [r3, #0]
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	4924      	ldr	r1, [pc, #144]	; (8002f44 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8002eb4:	400a      	ands	r2, r1
 8002eb6:	601a      	str	r2, [r3, #0]
 8002eb8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002eba:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ebc:	69bb      	ldr	r3, [r7, #24]
 8002ebe:	f383 8810 	msr	PRIMASK, r3
}
 8002ec2:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002ec4:	f3ef 8310 	mrs	r3, PRIMASK
 8002ec8:	61fb      	str	r3, [r7, #28]
  return(result);
 8002eca:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ecc:	64bb      	str	r3, [r7, #72]	; 0x48
 8002ece:	2301      	movs	r3, #1
 8002ed0:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ed2:	6a3b      	ldr	r3, [r7, #32]
 8002ed4:	f383 8810 	msr	PRIMASK, r3
}
 8002ed8:	46c0      	nop			; (mov r8, r8)
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	689a      	ldr	r2, [r3, #8]
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	2101      	movs	r1, #1
 8002ee6:	438a      	bics	r2, r1
 8002ee8:	609a      	str	r2, [r3, #8]
 8002eea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002eec:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ef0:	f383 8810 	msr	PRIMASK, r3
}
 8002ef4:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	2288      	movs	r2, #136	; 0x88
 8002efa:	2120      	movs	r1, #32
 8002efc:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	228c      	movs	r2, #140	; 0x8c
 8002f02:	2120      	movs	r1, #32
 8002f04:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	2290      	movs	r2, #144	; 0x90
 8002f0a:	2120      	movs	r1, #32
 8002f0c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	2284      	movs	r2, #132	; 0x84
 8002f12:	2100      	movs	r1, #0
 8002f14:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8002f16:	2303      	movs	r3, #3
 8002f18:	e010      	b.n	8002f3c <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	69db      	ldr	r3, [r3, #28]
 8002f20:	68ba      	ldr	r2, [r7, #8]
 8002f22:	4013      	ands	r3, r2
 8002f24:	68ba      	ldr	r2, [r7, #8]
 8002f26:	1ad3      	subs	r3, r2, r3
 8002f28:	425a      	negs	r2, r3
 8002f2a:	4153      	adcs	r3, r2
 8002f2c:	b2db      	uxtb	r3, r3
 8002f2e:	001a      	movs	r2, r3
 8002f30:	1dfb      	adds	r3, r7, #7
 8002f32:	781b      	ldrb	r3, [r3, #0]
 8002f34:	429a      	cmp	r2, r3
 8002f36:	d100      	bne.n	8002f3a <UART_WaitOnFlagUntilTimeout+0x182>
 8002f38:	e747      	b.n	8002dca <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002f3a:	2300      	movs	r3, #0
}
 8002f3c:	0018      	movs	r0, r3
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	b014      	add	sp, #80	; 0x50
 8002f42:	bd80      	pop	{r7, pc}
 8002f44:	fffffe5f 	.word	0xfffffe5f

08002f48 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b084      	sub	sp, #16
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2284      	movs	r2, #132	; 0x84
 8002f54:	5c9b      	ldrb	r3, [r3, r2]
 8002f56:	2b01      	cmp	r3, #1
 8002f58:	d101      	bne.n	8002f5e <HAL_UARTEx_DisableFifoMode+0x16>
 8002f5a:	2302      	movs	r3, #2
 8002f5c:	e027      	b.n	8002fae <HAL_UARTEx_DisableFifoMode+0x66>
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	2284      	movs	r2, #132	; 0x84
 8002f62:	2101      	movs	r1, #1
 8002f64:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	2288      	movs	r2, #136	; 0x88
 8002f6a:	2124      	movs	r1, #36	; 0x24
 8002f6c:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	681a      	ldr	r2, [r3, #0]
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	2101      	movs	r1, #1
 8002f82:	438a      	bics	r2, r1
 8002f84:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	4a0b      	ldr	r2, [pc, #44]	; (8002fb8 <HAL_UARTEx_DisableFifoMode+0x70>)
 8002f8a:	4013      	ands	r3, r2
 8002f8c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	2200      	movs	r2, #0
 8002f92:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	68fa      	ldr	r2, [r7, #12]
 8002f9a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2288      	movs	r2, #136	; 0x88
 8002fa0:	2120      	movs	r1, #32
 8002fa2:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2284      	movs	r2, #132	; 0x84
 8002fa8:	2100      	movs	r1, #0
 8002faa:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002fac:	2300      	movs	r3, #0
}
 8002fae:	0018      	movs	r0, r3
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	b004      	add	sp, #16
 8002fb4:	bd80      	pop	{r7, pc}
 8002fb6:	46c0      	nop			; (mov r8, r8)
 8002fb8:	dfffffff 	.word	0xdfffffff

08002fbc <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b084      	sub	sp, #16
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
 8002fc4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	2284      	movs	r2, #132	; 0x84
 8002fca:	5c9b      	ldrb	r3, [r3, r2]
 8002fcc:	2b01      	cmp	r3, #1
 8002fce:	d101      	bne.n	8002fd4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8002fd0:	2302      	movs	r3, #2
 8002fd2:	e02e      	b.n	8003032 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2284      	movs	r2, #132	; 0x84
 8002fd8:	2101      	movs	r1, #1
 8002fda:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2288      	movs	r2, #136	; 0x88
 8002fe0:	2124      	movs	r1, #36	; 0x24
 8002fe2:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	681a      	ldr	r2, [r3, #0]
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	2101      	movs	r1, #1
 8002ff8:	438a      	bics	r2, r1
 8002ffa:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	689b      	ldr	r3, [r3, #8]
 8003002:	00db      	lsls	r3, r3, #3
 8003004:	08d9      	lsrs	r1, r3, #3
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	683a      	ldr	r2, [r7, #0]
 800300c:	430a      	orrs	r2, r1
 800300e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	0018      	movs	r0, r3
 8003014:	f000 f854 	bl	80030c0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	68fa      	ldr	r2, [r7, #12]
 800301e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2288      	movs	r2, #136	; 0x88
 8003024:	2120      	movs	r1, #32
 8003026:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2284      	movs	r2, #132	; 0x84
 800302c:	2100      	movs	r1, #0
 800302e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003030:	2300      	movs	r3, #0
}
 8003032:	0018      	movs	r0, r3
 8003034:	46bd      	mov	sp, r7
 8003036:	b004      	add	sp, #16
 8003038:	bd80      	pop	{r7, pc}
	...

0800303c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	b084      	sub	sp, #16
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
 8003044:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	2284      	movs	r2, #132	; 0x84
 800304a:	5c9b      	ldrb	r3, [r3, r2]
 800304c:	2b01      	cmp	r3, #1
 800304e:	d101      	bne.n	8003054 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8003050:	2302      	movs	r3, #2
 8003052:	e02f      	b.n	80030b4 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2284      	movs	r2, #132	; 0x84
 8003058:	2101      	movs	r1, #1
 800305a:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2288      	movs	r2, #136	; 0x88
 8003060:	2124      	movs	r1, #36	; 0x24
 8003062:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	681a      	ldr	r2, [r3, #0]
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	2101      	movs	r1, #1
 8003078:	438a      	bics	r2, r1
 800307a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	689b      	ldr	r3, [r3, #8]
 8003082:	4a0e      	ldr	r2, [pc, #56]	; (80030bc <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8003084:	4013      	ands	r3, r2
 8003086:	0019      	movs	r1, r3
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	683a      	ldr	r2, [r7, #0]
 800308e:	430a      	orrs	r2, r1
 8003090:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	0018      	movs	r0, r3
 8003096:	f000 f813 	bl	80030c0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	68fa      	ldr	r2, [r7, #12]
 80030a0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	2288      	movs	r2, #136	; 0x88
 80030a6:	2120      	movs	r1, #32
 80030a8:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	2284      	movs	r2, #132	; 0x84
 80030ae:	2100      	movs	r1, #0
 80030b0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80030b2:	2300      	movs	r3, #0
}
 80030b4:	0018      	movs	r0, r3
 80030b6:	46bd      	mov	sp, r7
 80030b8:	b004      	add	sp, #16
 80030ba:	bd80      	pop	{r7, pc}
 80030bc:	f1ffffff 	.word	0xf1ffffff

080030c0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80030c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80030c2:	b085      	sub	sp, #20
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d108      	bne.n	80030e2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	226a      	movs	r2, #106	; 0x6a
 80030d4:	2101      	movs	r1, #1
 80030d6:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2268      	movs	r2, #104	; 0x68
 80030dc:	2101      	movs	r1, #1
 80030de:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80030e0:	e043      	b.n	800316a <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80030e2:	260f      	movs	r6, #15
 80030e4:	19bb      	adds	r3, r7, r6
 80030e6:	2208      	movs	r2, #8
 80030e8:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80030ea:	200e      	movs	r0, #14
 80030ec:	183b      	adds	r3, r7, r0
 80030ee:	2208      	movs	r2, #8
 80030f0:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	689b      	ldr	r3, [r3, #8]
 80030f8:	0e5b      	lsrs	r3, r3, #25
 80030fa:	b2da      	uxtb	r2, r3
 80030fc:	240d      	movs	r4, #13
 80030fe:	193b      	adds	r3, r7, r4
 8003100:	2107      	movs	r1, #7
 8003102:	400a      	ands	r2, r1
 8003104:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	689b      	ldr	r3, [r3, #8]
 800310c:	0f5b      	lsrs	r3, r3, #29
 800310e:	b2da      	uxtb	r2, r3
 8003110:	250c      	movs	r5, #12
 8003112:	197b      	adds	r3, r7, r5
 8003114:	2107      	movs	r1, #7
 8003116:	400a      	ands	r2, r1
 8003118:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800311a:	183b      	adds	r3, r7, r0
 800311c:	781b      	ldrb	r3, [r3, #0]
 800311e:	197a      	adds	r2, r7, r5
 8003120:	7812      	ldrb	r2, [r2, #0]
 8003122:	4914      	ldr	r1, [pc, #80]	; (8003174 <UARTEx_SetNbDataToProcess+0xb4>)
 8003124:	5c8a      	ldrb	r2, [r1, r2]
 8003126:	435a      	muls	r2, r3
 8003128:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 800312a:	197b      	adds	r3, r7, r5
 800312c:	781b      	ldrb	r3, [r3, #0]
 800312e:	4a12      	ldr	r2, [pc, #72]	; (8003178 <UARTEx_SetNbDataToProcess+0xb8>)
 8003130:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003132:	0019      	movs	r1, r3
 8003134:	f7fd f878 	bl	8000228 <__divsi3>
 8003138:	0003      	movs	r3, r0
 800313a:	b299      	uxth	r1, r3
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	226a      	movs	r2, #106	; 0x6a
 8003140:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003142:	19bb      	adds	r3, r7, r6
 8003144:	781b      	ldrb	r3, [r3, #0]
 8003146:	193a      	adds	r2, r7, r4
 8003148:	7812      	ldrb	r2, [r2, #0]
 800314a:	490a      	ldr	r1, [pc, #40]	; (8003174 <UARTEx_SetNbDataToProcess+0xb4>)
 800314c:	5c8a      	ldrb	r2, [r1, r2]
 800314e:	435a      	muls	r2, r3
 8003150:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8003152:	193b      	adds	r3, r7, r4
 8003154:	781b      	ldrb	r3, [r3, #0]
 8003156:	4a08      	ldr	r2, [pc, #32]	; (8003178 <UARTEx_SetNbDataToProcess+0xb8>)
 8003158:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800315a:	0019      	movs	r1, r3
 800315c:	f7fd f864 	bl	8000228 <__divsi3>
 8003160:	0003      	movs	r3, r0
 8003162:	b299      	uxth	r1, r3
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2268      	movs	r2, #104	; 0x68
 8003168:	5299      	strh	r1, [r3, r2]
}
 800316a:	46c0      	nop			; (mov r8, r8)
 800316c:	46bd      	mov	sp, r7
 800316e:	b005      	add	sp, #20
 8003170:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003172:	46c0      	nop			; (mov r8, r8)
 8003174:	08003280 	.word	0x08003280
 8003178:	08003288 	.word	0x08003288

0800317c <memset>:
 800317c:	0003      	movs	r3, r0
 800317e:	1882      	adds	r2, r0, r2
 8003180:	4293      	cmp	r3, r2
 8003182:	d100      	bne.n	8003186 <memset+0xa>
 8003184:	4770      	bx	lr
 8003186:	7019      	strb	r1, [r3, #0]
 8003188:	3301      	adds	r3, #1
 800318a:	e7f9      	b.n	8003180 <memset+0x4>

0800318c <__libc_init_array>:
 800318c:	b570      	push	{r4, r5, r6, lr}
 800318e:	2600      	movs	r6, #0
 8003190:	4c0c      	ldr	r4, [pc, #48]	; (80031c4 <__libc_init_array+0x38>)
 8003192:	4d0d      	ldr	r5, [pc, #52]	; (80031c8 <__libc_init_array+0x3c>)
 8003194:	1b64      	subs	r4, r4, r5
 8003196:	10a4      	asrs	r4, r4, #2
 8003198:	42a6      	cmp	r6, r4
 800319a:	d109      	bne.n	80031b0 <__libc_init_array+0x24>
 800319c:	2600      	movs	r6, #0
 800319e:	f000 f819 	bl	80031d4 <_init>
 80031a2:	4c0a      	ldr	r4, [pc, #40]	; (80031cc <__libc_init_array+0x40>)
 80031a4:	4d0a      	ldr	r5, [pc, #40]	; (80031d0 <__libc_init_array+0x44>)
 80031a6:	1b64      	subs	r4, r4, r5
 80031a8:	10a4      	asrs	r4, r4, #2
 80031aa:	42a6      	cmp	r6, r4
 80031ac:	d105      	bne.n	80031ba <__libc_init_array+0x2e>
 80031ae:	bd70      	pop	{r4, r5, r6, pc}
 80031b0:	00b3      	lsls	r3, r6, #2
 80031b2:	58eb      	ldr	r3, [r5, r3]
 80031b4:	4798      	blx	r3
 80031b6:	3601      	adds	r6, #1
 80031b8:	e7ee      	b.n	8003198 <__libc_init_array+0xc>
 80031ba:	00b3      	lsls	r3, r6, #2
 80031bc:	58eb      	ldr	r3, [r5, r3]
 80031be:	4798      	blx	r3
 80031c0:	3601      	adds	r6, #1
 80031c2:	e7f2      	b.n	80031aa <__libc_init_array+0x1e>
 80031c4:	08003298 	.word	0x08003298
 80031c8:	08003298 	.word	0x08003298
 80031cc:	0800329c 	.word	0x0800329c
 80031d0:	08003298 	.word	0x08003298

080031d4 <_init>:
 80031d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031d6:	46c0      	nop			; (mov r8, r8)
 80031d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80031da:	bc08      	pop	{r3}
 80031dc:	469e      	mov	lr, r3
 80031de:	4770      	bx	lr

080031e0 <_fini>:
 80031e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031e2:	46c0      	nop			; (mov r8, r8)
 80031e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80031e6:	bc08      	pop	{r3}
 80031e8:	469e      	mov	lr, r3
 80031ea:	4770      	bx	lr
