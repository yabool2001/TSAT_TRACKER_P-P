
TSAT_TRACKER_P-P.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003cb4  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000016c  08003d70  08003d70  00013d70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003edc  08003edc  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08003edc  08003edc  00013edc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003ee4  08003ee4  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003ee4  08003ee4  00013ee4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003ee8  08003ee8  00013ee8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08003eec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000290  20000010  08003efc  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002a0  08003efc  000202a0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY
 13 .debug_info   000127d2  00000000  00000000  0002007b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002451  00000000  00000000  0003284d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001090  00000000  00000000  00034ca0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d17  00000000  00000000  00035d30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001d035  00000000  00000000  00036a47  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013aa5  00000000  00000000  00053a7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000be3f6  00000000  00000000  00067521  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003cbc  00000000  00000000  00125918  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000057  00000000  00000000  001295d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000010 	.word	0x20000010
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08003d58 	.word	0x08003d58

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000014 	.word	0x20000014
 8000100:	08003d58 	.word	0x08003d58

08000104 <strlen>:
 8000104:	2300      	movs	r3, #0
 8000106:	5cc2      	ldrb	r2, [r0, r3]
 8000108:	3301      	adds	r3, #1
 800010a:	2a00      	cmp	r2, #0
 800010c:	d1fb      	bne.n	8000106 <strlen+0x2>
 800010e:	1e58      	subs	r0, r3, #1
 8000110:	4770      	bx	lr
	...

08000114 <__udivsi3>:
 8000114:	2200      	movs	r2, #0
 8000116:	0843      	lsrs	r3, r0, #1
 8000118:	428b      	cmp	r3, r1
 800011a:	d374      	bcc.n	8000206 <__udivsi3+0xf2>
 800011c:	0903      	lsrs	r3, r0, #4
 800011e:	428b      	cmp	r3, r1
 8000120:	d35f      	bcc.n	80001e2 <__udivsi3+0xce>
 8000122:	0a03      	lsrs	r3, r0, #8
 8000124:	428b      	cmp	r3, r1
 8000126:	d344      	bcc.n	80001b2 <__udivsi3+0x9e>
 8000128:	0b03      	lsrs	r3, r0, #12
 800012a:	428b      	cmp	r3, r1
 800012c:	d328      	bcc.n	8000180 <__udivsi3+0x6c>
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d30d      	bcc.n	8000150 <__udivsi3+0x3c>
 8000134:	22ff      	movs	r2, #255	; 0xff
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	ba12      	rev	r2, r2
 800013a:	0c03      	lsrs	r3, r0, #16
 800013c:	428b      	cmp	r3, r1
 800013e:	d302      	bcc.n	8000146 <__udivsi3+0x32>
 8000140:	1212      	asrs	r2, r2, #8
 8000142:	0209      	lsls	r1, r1, #8
 8000144:	d065      	beq.n	8000212 <__udivsi3+0xfe>
 8000146:	0b03      	lsrs	r3, r0, #12
 8000148:	428b      	cmp	r3, r1
 800014a:	d319      	bcc.n	8000180 <__udivsi3+0x6c>
 800014c:	e000      	b.n	8000150 <__udivsi3+0x3c>
 800014e:	0a09      	lsrs	r1, r1, #8
 8000150:	0bc3      	lsrs	r3, r0, #15
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x46>
 8000156:	03cb      	lsls	r3, r1, #15
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b83      	lsrs	r3, r0, #14
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x52>
 8000162:	038b      	lsls	r3, r1, #14
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b43      	lsrs	r3, r0, #13
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x5e>
 800016e:	034b      	lsls	r3, r1, #13
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b03      	lsrs	r3, r0, #12
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x6a>
 800017a:	030b      	lsls	r3, r1, #12
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0ac3      	lsrs	r3, r0, #11
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x76>
 8000186:	02cb      	lsls	r3, r1, #11
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a83      	lsrs	r3, r0, #10
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x82>
 8000192:	028b      	lsls	r3, r1, #10
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a43      	lsrs	r3, r0, #9
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x8e>
 800019e:	024b      	lsls	r3, r1, #9
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a03      	lsrs	r3, r0, #8
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x9a>
 80001aa:	020b      	lsls	r3, r1, #8
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	d2cd      	bcs.n	800014e <__udivsi3+0x3a>
 80001b2:	09c3      	lsrs	r3, r0, #7
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xa8>
 80001b8:	01cb      	lsls	r3, r1, #7
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0983      	lsrs	r3, r0, #6
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xb4>
 80001c4:	018b      	lsls	r3, r1, #6
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0943      	lsrs	r3, r0, #5
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xc0>
 80001d0:	014b      	lsls	r3, r1, #5
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0903      	lsrs	r3, r0, #4
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xcc>
 80001dc:	010b      	lsls	r3, r1, #4
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	08c3      	lsrs	r3, r0, #3
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xd8>
 80001e8:	00cb      	lsls	r3, r1, #3
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0883      	lsrs	r3, r0, #2
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xe4>
 80001f4:	008b      	lsls	r3, r1, #2
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	0843      	lsrs	r3, r0, #1
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xf0>
 8000200:	004b      	lsls	r3, r1, #1
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	1a41      	subs	r1, r0, r1
 8000208:	d200      	bcs.n	800020c <__udivsi3+0xf8>
 800020a:	4601      	mov	r1, r0
 800020c:	4152      	adcs	r2, r2
 800020e:	4610      	mov	r0, r2
 8000210:	4770      	bx	lr
 8000212:	e7ff      	b.n	8000214 <__udivsi3+0x100>
 8000214:	b501      	push	{r0, lr}
 8000216:	2000      	movs	r0, #0
 8000218:	f000 f8f0 	bl	80003fc <__aeabi_idiv0>
 800021c:	bd02      	pop	{r1, pc}
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uidivmod>:
 8000220:	2900      	cmp	r1, #0
 8000222:	d0f7      	beq.n	8000214 <__udivsi3+0x100>
 8000224:	e776      	b.n	8000114 <__udivsi3>
 8000226:	4770      	bx	lr

08000228 <__divsi3>:
 8000228:	4603      	mov	r3, r0
 800022a:	430b      	orrs	r3, r1
 800022c:	d47f      	bmi.n	800032e <__divsi3+0x106>
 800022e:	2200      	movs	r2, #0
 8000230:	0843      	lsrs	r3, r0, #1
 8000232:	428b      	cmp	r3, r1
 8000234:	d374      	bcc.n	8000320 <__divsi3+0xf8>
 8000236:	0903      	lsrs	r3, r0, #4
 8000238:	428b      	cmp	r3, r1
 800023a:	d35f      	bcc.n	80002fc <__divsi3+0xd4>
 800023c:	0a03      	lsrs	r3, r0, #8
 800023e:	428b      	cmp	r3, r1
 8000240:	d344      	bcc.n	80002cc <__divsi3+0xa4>
 8000242:	0b03      	lsrs	r3, r0, #12
 8000244:	428b      	cmp	r3, r1
 8000246:	d328      	bcc.n	800029a <__divsi3+0x72>
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d30d      	bcc.n	800026a <__divsi3+0x42>
 800024e:	22ff      	movs	r2, #255	; 0xff
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	ba12      	rev	r2, r2
 8000254:	0c03      	lsrs	r3, r0, #16
 8000256:	428b      	cmp	r3, r1
 8000258:	d302      	bcc.n	8000260 <__divsi3+0x38>
 800025a:	1212      	asrs	r2, r2, #8
 800025c:	0209      	lsls	r1, r1, #8
 800025e:	d065      	beq.n	800032c <__divsi3+0x104>
 8000260:	0b03      	lsrs	r3, r0, #12
 8000262:	428b      	cmp	r3, r1
 8000264:	d319      	bcc.n	800029a <__divsi3+0x72>
 8000266:	e000      	b.n	800026a <__divsi3+0x42>
 8000268:	0a09      	lsrs	r1, r1, #8
 800026a:	0bc3      	lsrs	r3, r0, #15
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x4c>
 8000270:	03cb      	lsls	r3, r1, #15
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b83      	lsrs	r3, r0, #14
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x58>
 800027c:	038b      	lsls	r3, r1, #14
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b43      	lsrs	r3, r0, #13
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x64>
 8000288:	034b      	lsls	r3, r1, #13
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0b03      	lsrs	r3, r0, #12
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x70>
 8000294:	030b      	lsls	r3, r1, #12
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0ac3      	lsrs	r3, r0, #11
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x7c>
 80002a0:	02cb      	lsls	r3, r1, #11
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a83      	lsrs	r3, r0, #10
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x88>
 80002ac:	028b      	lsls	r3, r1, #10
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a43      	lsrs	r3, r0, #9
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x94>
 80002b8:	024b      	lsls	r3, r1, #9
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0a03      	lsrs	r3, r0, #8
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0xa0>
 80002c4:	020b      	lsls	r3, r1, #8
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	d2cd      	bcs.n	8000268 <__divsi3+0x40>
 80002cc:	09c3      	lsrs	r3, r0, #7
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xae>
 80002d2:	01cb      	lsls	r3, r1, #7
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0983      	lsrs	r3, r0, #6
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xba>
 80002de:	018b      	lsls	r3, r1, #6
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0943      	lsrs	r3, r0, #5
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xc6>
 80002ea:	014b      	lsls	r3, r1, #5
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	0903      	lsrs	r3, r0, #4
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xd2>
 80002f6:	010b      	lsls	r3, r1, #4
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	08c3      	lsrs	r3, r0, #3
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xde>
 8000302:	00cb      	lsls	r3, r1, #3
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0883      	lsrs	r3, r0, #2
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xea>
 800030e:	008b      	lsls	r3, r1, #2
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	0843      	lsrs	r3, r0, #1
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xf6>
 800031a:	004b      	lsls	r3, r1, #1
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	1a41      	subs	r1, r0, r1
 8000322:	d200      	bcs.n	8000326 <__divsi3+0xfe>
 8000324:	4601      	mov	r1, r0
 8000326:	4152      	adcs	r2, r2
 8000328:	4610      	mov	r0, r2
 800032a:	4770      	bx	lr
 800032c:	e05d      	b.n	80003ea <__divsi3+0x1c2>
 800032e:	0fca      	lsrs	r2, r1, #31
 8000330:	d000      	beq.n	8000334 <__divsi3+0x10c>
 8000332:	4249      	negs	r1, r1
 8000334:	1003      	asrs	r3, r0, #32
 8000336:	d300      	bcc.n	800033a <__divsi3+0x112>
 8000338:	4240      	negs	r0, r0
 800033a:	4053      	eors	r3, r2
 800033c:	2200      	movs	r2, #0
 800033e:	469c      	mov	ip, r3
 8000340:	0903      	lsrs	r3, r0, #4
 8000342:	428b      	cmp	r3, r1
 8000344:	d32d      	bcc.n	80003a2 <__divsi3+0x17a>
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d312      	bcc.n	8000372 <__divsi3+0x14a>
 800034c:	22fc      	movs	r2, #252	; 0xfc
 800034e:	0189      	lsls	r1, r1, #6
 8000350:	ba12      	rev	r2, r2
 8000352:	0a03      	lsrs	r3, r0, #8
 8000354:	428b      	cmp	r3, r1
 8000356:	d30c      	bcc.n	8000372 <__divsi3+0x14a>
 8000358:	0189      	lsls	r1, r1, #6
 800035a:	1192      	asrs	r2, r2, #6
 800035c:	428b      	cmp	r3, r1
 800035e:	d308      	bcc.n	8000372 <__divsi3+0x14a>
 8000360:	0189      	lsls	r1, r1, #6
 8000362:	1192      	asrs	r2, r2, #6
 8000364:	428b      	cmp	r3, r1
 8000366:	d304      	bcc.n	8000372 <__divsi3+0x14a>
 8000368:	0189      	lsls	r1, r1, #6
 800036a:	d03a      	beq.n	80003e2 <__divsi3+0x1ba>
 800036c:	1192      	asrs	r2, r2, #6
 800036e:	e000      	b.n	8000372 <__divsi3+0x14a>
 8000370:	0989      	lsrs	r1, r1, #6
 8000372:	09c3      	lsrs	r3, r0, #7
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x154>
 8000378:	01cb      	lsls	r3, r1, #7
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0983      	lsrs	r3, r0, #6
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x160>
 8000384:	018b      	lsls	r3, r1, #6
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0943      	lsrs	r3, r0, #5
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x16c>
 8000390:	014b      	lsls	r3, r1, #5
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	0903      	lsrs	r3, r0, #4
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x178>
 800039c:	010b      	lsls	r3, r1, #4
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	08c3      	lsrs	r3, r0, #3
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x184>
 80003a8:	00cb      	lsls	r3, r1, #3
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	0883      	lsrs	r3, r0, #2
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x190>
 80003b4:	008b      	lsls	r3, r1, #2
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	d2d9      	bcs.n	8000370 <__divsi3+0x148>
 80003bc:	0843      	lsrs	r3, r0, #1
 80003be:	428b      	cmp	r3, r1
 80003c0:	d301      	bcc.n	80003c6 <__divsi3+0x19e>
 80003c2:	004b      	lsls	r3, r1, #1
 80003c4:	1ac0      	subs	r0, r0, r3
 80003c6:	4152      	adcs	r2, r2
 80003c8:	1a41      	subs	r1, r0, r1
 80003ca:	d200      	bcs.n	80003ce <__divsi3+0x1a6>
 80003cc:	4601      	mov	r1, r0
 80003ce:	4663      	mov	r3, ip
 80003d0:	4152      	adcs	r2, r2
 80003d2:	105b      	asrs	r3, r3, #1
 80003d4:	4610      	mov	r0, r2
 80003d6:	d301      	bcc.n	80003dc <__divsi3+0x1b4>
 80003d8:	4240      	negs	r0, r0
 80003da:	2b00      	cmp	r3, #0
 80003dc:	d500      	bpl.n	80003e0 <__divsi3+0x1b8>
 80003de:	4249      	negs	r1, r1
 80003e0:	4770      	bx	lr
 80003e2:	4663      	mov	r3, ip
 80003e4:	105b      	asrs	r3, r3, #1
 80003e6:	d300      	bcc.n	80003ea <__divsi3+0x1c2>
 80003e8:	4240      	negs	r0, r0
 80003ea:	b501      	push	{r0, lr}
 80003ec:	2000      	movs	r0, #0
 80003ee:	f000 f805 	bl	80003fc <__aeabi_idiv0>
 80003f2:	bd02      	pop	{r1, pc}

080003f4 <__aeabi_idivmod>:
 80003f4:	2900      	cmp	r1, #0
 80003f6:	d0f8      	beq.n	80003ea <__divsi3+0x1c2>
 80003f8:	e716      	b.n	8000228 <__divsi3>
 80003fa:	4770      	bx	lr

080003fc <__aeabi_idiv0>:
 80003fc:	4770      	bx	lr
 80003fe:	46c0      	nop			; (mov r8, r8)

08000400 <__aeabi_uldivmod>:
 8000400:	2b00      	cmp	r3, #0
 8000402:	d111      	bne.n	8000428 <__aeabi_uldivmod+0x28>
 8000404:	2a00      	cmp	r2, #0
 8000406:	d10f      	bne.n	8000428 <__aeabi_uldivmod+0x28>
 8000408:	2900      	cmp	r1, #0
 800040a:	d100      	bne.n	800040e <__aeabi_uldivmod+0xe>
 800040c:	2800      	cmp	r0, #0
 800040e:	d002      	beq.n	8000416 <__aeabi_uldivmod+0x16>
 8000410:	2100      	movs	r1, #0
 8000412:	43c9      	mvns	r1, r1
 8000414:	0008      	movs	r0, r1
 8000416:	b407      	push	{r0, r1, r2}
 8000418:	4802      	ldr	r0, [pc, #8]	; (8000424 <__aeabi_uldivmod+0x24>)
 800041a:	a102      	add	r1, pc, #8	; (adr r1, 8000424 <__aeabi_uldivmod+0x24>)
 800041c:	1840      	adds	r0, r0, r1
 800041e:	9002      	str	r0, [sp, #8]
 8000420:	bd03      	pop	{r0, r1, pc}
 8000422:	46c0      	nop			; (mov r8, r8)
 8000424:	ffffffd9 	.word	0xffffffd9
 8000428:	b403      	push	{r0, r1}
 800042a:	4668      	mov	r0, sp
 800042c:	b501      	push	{r0, lr}
 800042e:	9802      	ldr	r0, [sp, #8]
 8000430:	f000 f806 	bl	8000440 <__udivmoddi4>
 8000434:	9b01      	ldr	r3, [sp, #4]
 8000436:	469e      	mov	lr, r3
 8000438:	b002      	add	sp, #8
 800043a:	bc0c      	pop	{r2, r3}
 800043c:	4770      	bx	lr
 800043e:	46c0      	nop			; (mov r8, r8)

08000440 <__udivmoddi4>:
 8000440:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000442:	4657      	mov	r7, sl
 8000444:	464e      	mov	r6, r9
 8000446:	4645      	mov	r5, r8
 8000448:	46de      	mov	lr, fp
 800044a:	b5e0      	push	{r5, r6, r7, lr}
 800044c:	0004      	movs	r4, r0
 800044e:	000d      	movs	r5, r1
 8000450:	4692      	mov	sl, r2
 8000452:	4699      	mov	r9, r3
 8000454:	b083      	sub	sp, #12
 8000456:	428b      	cmp	r3, r1
 8000458:	d830      	bhi.n	80004bc <__udivmoddi4+0x7c>
 800045a:	d02d      	beq.n	80004b8 <__udivmoddi4+0x78>
 800045c:	4649      	mov	r1, r9
 800045e:	4650      	mov	r0, sl
 8000460:	f000 f8d8 	bl	8000614 <__clzdi2>
 8000464:	0029      	movs	r1, r5
 8000466:	0006      	movs	r6, r0
 8000468:	0020      	movs	r0, r4
 800046a:	f000 f8d3 	bl	8000614 <__clzdi2>
 800046e:	1a33      	subs	r3, r6, r0
 8000470:	4698      	mov	r8, r3
 8000472:	3b20      	subs	r3, #32
 8000474:	d434      	bmi.n	80004e0 <__udivmoddi4+0xa0>
 8000476:	469b      	mov	fp, r3
 8000478:	4653      	mov	r3, sl
 800047a:	465a      	mov	r2, fp
 800047c:	4093      	lsls	r3, r2
 800047e:	4642      	mov	r2, r8
 8000480:	001f      	movs	r7, r3
 8000482:	4653      	mov	r3, sl
 8000484:	4093      	lsls	r3, r2
 8000486:	001e      	movs	r6, r3
 8000488:	42af      	cmp	r7, r5
 800048a:	d83b      	bhi.n	8000504 <__udivmoddi4+0xc4>
 800048c:	42af      	cmp	r7, r5
 800048e:	d100      	bne.n	8000492 <__udivmoddi4+0x52>
 8000490:	e079      	b.n	8000586 <__udivmoddi4+0x146>
 8000492:	465b      	mov	r3, fp
 8000494:	1ba4      	subs	r4, r4, r6
 8000496:	41bd      	sbcs	r5, r7
 8000498:	2b00      	cmp	r3, #0
 800049a:	da00      	bge.n	800049e <__udivmoddi4+0x5e>
 800049c:	e076      	b.n	800058c <__udivmoddi4+0x14c>
 800049e:	2200      	movs	r2, #0
 80004a0:	2300      	movs	r3, #0
 80004a2:	9200      	str	r2, [sp, #0]
 80004a4:	9301      	str	r3, [sp, #4]
 80004a6:	2301      	movs	r3, #1
 80004a8:	465a      	mov	r2, fp
 80004aa:	4093      	lsls	r3, r2
 80004ac:	9301      	str	r3, [sp, #4]
 80004ae:	2301      	movs	r3, #1
 80004b0:	4642      	mov	r2, r8
 80004b2:	4093      	lsls	r3, r2
 80004b4:	9300      	str	r3, [sp, #0]
 80004b6:	e029      	b.n	800050c <__udivmoddi4+0xcc>
 80004b8:	4282      	cmp	r2, r0
 80004ba:	d9cf      	bls.n	800045c <__udivmoddi4+0x1c>
 80004bc:	2200      	movs	r2, #0
 80004be:	2300      	movs	r3, #0
 80004c0:	9200      	str	r2, [sp, #0]
 80004c2:	9301      	str	r3, [sp, #4]
 80004c4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80004c6:	2b00      	cmp	r3, #0
 80004c8:	d001      	beq.n	80004ce <__udivmoddi4+0x8e>
 80004ca:	601c      	str	r4, [r3, #0]
 80004cc:	605d      	str	r5, [r3, #4]
 80004ce:	9800      	ldr	r0, [sp, #0]
 80004d0:	9901      	ldr	r1, [sp, #4]
 80004d2:	b003      	add	sp, #12
 80004d4:	bcf0      	pop	{r4, r5, r6, r7}
 80004d6:	46bb      	mov	fp, r7
 80004d8:	46b2      	mov	sl, r6
 80004da:	46a9      	mov	r9, r5
 80004dc:	46a0      	mov	r8, r4
 80004de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004e0:	4642      	mov	r2, r8
 80004e2:	469b      	mov	fp, r3
 80004e4:	2320      	movs	r3, #32
 80004e6:	1a9b      	subs	r3, r3, r2
 80004e8:	4652      	mov	r2, sl
 80004ea:	40da      	lsrs	r2, r3
 80004ec:	4641      	mov	r1, r8
 80004ee:	0013      	movs	r3, r2
 80004f0:	464a      	mov	r2, r9
 80004f2:	408a      	lsls	r2, r1
 80004f4:	0017      	movs	r7, r2
 80004f6:	4642      	mov	r2, r8
 80004f8:	431f      	orrs	r7, r3
 80004fa:	4653      	mov	r3, sl
 80004fc:	4093      	lsls	r3, r2
 80004fe:	001e      	movs	r6, r3
 8000500:	42af      	cmp	r7, r5
 8000502:	d9c3      	bls.n	800048c <__udivmoddi4+0x4c>
 8000504:	2200      	movs	r2, #0
 8000506:	2300      	movs	r3, #0
 8000508:	9200      	str	r2, [sp, #0]
 800050a:	9301      	str	r3, [sp, #4]
 800050c:	4643      	mov	r3, r8
 800050e:	2b00      	cmp	r3, #0
 8000510:	d0d8      	beq.n	80004c4 <__udivmoddi4+0x84>
 8000512:	07fb      	lsls	r3, r7, #31
 8000514:	0872      	lsrs	r2, r6, #1
 8000516:	431a      	orrs	r2, r3
 8000518:	4646      	mov	r6, r8
 800051a:	087b      	lsrs	r3, r7, #1
 800051c:	e00e      	b.n	800053c <__udivmoddi4+0xfc>
 800051e:	42ab      	cmp	r3, r5
 8000520:	d101      	bne.n	8000526 <__udivmoddi4+0xe6>
 8000522:	42a2      	cmp	r2, r4
 8000524:	d80c      	bhi.n	8000540 <__udivmoddi4+0x100>
 8000526:	1aa4      	subs	r4, r4, r2
 8000528:	419d      	sbcs	r5, r3
 800052a:	2001      	movs	r0, #1
 800052c:	1924      	adds	r4, r4, r4
 800052e:	416d      	adcs	r5, r5
 8000530:	2100      	movs	r1, #0
 8000532:	3e01      	subs	r6, #1
 8000534:	1824      	adds	r4, r4, r0
 8000536:	414d      	adcs	r5, r1
 8000538:	2e00      	cmp	r6, #0
 800053a:	d006      	beq.n	800054a <__udivmoddi4+0x10a>
 800053c:	42ab      	cmp	r3, r5
 800053e:	d9ee      	bls.n	800051e <__udivmoddi4+0xde>
 8000540:	3e01      	subs	r6, #1
 8000542:	1924      	adds	r4, r4, r4
 8000544:	416d      	adcs	r5, r5
 8000546:	2e00      	cmp	r6, #0
 8000548:	d1f8      	bne.n	800053c <__udivmoddi4+0xfc>
 800054a:	9800      	ldr	r0, [sp, #0]
 800054c:	9901      	ldr	r1, [sp, #4]
 800054e:	465b      	mov	r3, fp
 8000550:	1900      	adds	r0, r0, r4
 8000552:	4169      	adcs	r1, r5
 8000554:	2b00      	cmp	r3, #0
 8000556:	db24      	blt.n	80005a2 <__udivmoddi4+0x162>
 8000558:	002b      	movs	r3, r5
 800055a:	465a      	mov	r2, fp
 800055c:	4644      	mov	r4, r8
 800055e:	40d3      	lsrs	r3, r2
 8000560:	002a      	movs	r2, r5
 8000562:	40e2      	lsrs	r2, r4
 8000564:	001c      	movs	r4, r3
 8000566:	465b      	mov	r3, fp
 8000568:	0015      	movs	r5, r2
 800056a:	2b00      	cmp	r3, #0
 800056c:	db2a      	blt.n	80005c4 <__udivmoddi4+0x184>
 800056e:	0026      	movs	r6, r4
 8000570:	409e      	lsls	r6, r3
 8000572:	0033      	movs	r3, r6
 8000574:	0026      	movs	r6, r4
 8000576:	4647      	mov	r7, r8
 8000578:	40be      	lsls	r6, r7
 800057a:	0032      	movs	r2, r6
 800057c:	1a80      	subs	r0, r0, r2
 800057e:	4199      	sbcs	r1, r3
 8000580:	9000      	str	r0, [sp, #0]
 8000582:	9101      	str	r1, [sp, #4]
 8000584:	e79e      	b.n	80004c4 <__udivmoddi4+0x84>
 8000586:	42a3      	cmp	r3, r4
 8000588:	d8bc      	bhi.n	8000504 <__udivmoddi4+0xc4>
 800058a:	e782      	b.n	8000492 <__udivmoddi4+0x52>
 800058c:	4642      	mov	r2, r8
 800058e:	2320      	movs	r3, #32
 8000590:	2100      	movs	r1, #0
 8000592:	1a9b      	subs	r3, r3, r2
 8000594:	2200      	movs	r2, #0
 8000596:	9100      	str	r1, [sp, #0]
 8000598:	9201      	str	r2, [sp, #4]
 800059a:	2201      	movs	r2, #1
 800059c:	40da      	lsrs	r2, r3
 800059e:	9201      	str	r2, [sp, #4]
 80005a0:	e785      	b.n	80004ae <__udivmoddi4+0x6e>
 80005a2:	4642      	mov	r2, r8
 80005a4:	2320      	movs	r3, #32
 80005a6:	1a9b      	subs	r3, r3, r2
 80005a8:	002a      	movs	r2, r5
 80005aa:	4646      	mov	r6, r8
 80005ac:	409a      	lsls	r2, r3
 80005ae:	0023      	movs	r3, r4
 80005b0:	40f3      	lsrs	r3, r6
 80005b2:	4644      	mov	r4, r8
 80005b4:	4313      	orrs	r3, r2
 80005b6:	002a      	movs	r2, r5
 80005b8:	40e2      	lsrs	r2, r4
 80005ba:	001c      	movs	r4, r3
 80005bc:	465b      	mov	r3, fp
 80005be:	0015      	movs	r5, r2
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	dad4      	bge.n	800056e <__udivmoddi4+0x12e>
 80005c4:	4642      	mov	r2, r8
 80005c6:	002f      	movs	r7, r5
 80005c8:	2320      	movs	r3, #32
 80005ca:	0026      	movs	r6, r4
 80005cc:	4097      	lsls	r7, r2
 80005ce:	1a9b      	subs	r3, r3, r2
 80005d0:	40de      	lsrs	r6, r3
 80005d2:	003b      	movs	r3, r7
 80005d4:	4333      	orrs	r3, r6
 80005d6:	e7cd      	b.n	8000574 <__udivmoddi4+0x134>

080005d8 <__clzsi2>:
 80005d8:	211c      	movs	r1, #28
 80005da:	2301      	movs	r3, #1
 80005dc:	041b      	lsls	r3, r3, #16
 80005de:	4298      	cmp	r0, r3
 80005e0:	d301      	bcc.n	80005e6 <__clzsi2+0xe>
 80005e2:	0c00      	lsrs	r0, r0, #16
 80005e4:	3910      	subs	r1, #16
 80005e6:	0a1b      	lsrs	r3, r3, #8
 80005e8:	4298      	cmp	r0, r3
 80005ea:	d301      	bcc.n	80005f0 <__clzsi2+0x18>
 80005ec:	0a00      	lsrs	r0, r0, #8
 80005ee:	3908      	subs	r1, #8
 80005f0:	091b      	lsrs	r3, r3, #4
 80005f2:	4298      	cmp	r0, r3
 80005f4:	d301      	bcc.n	80005fa <__clzsi2+0x22>
 80005f6:	0900      	lsrs	r0, r0, #4
 80005f8:	3904      	subs	r1, #4
 80005fa:	a202      	add	r2, pc, #8	; (adr r2, 8000604 <__clzsi2+0x2c>)
 80005fc:	5c10      	ldrb	r0, [r2, r0]
 80005fe:	1840      	adds	r0, r0, r1
 8000600:	4770      	bx	lr
 8000602:	46c0      	nop			; (mov r8, r8)
 8000604:	02020304 	.word	0x02020304
 8000608:	01010101 	.word	0x01010101
	...

08000614 <__clzdi2>:
 8000614:	b510      	push	{r4, lr}
 8000616:	2900      	cmp	r1, #0
 8000618:	d103      	bne.n	8000622 <__clzdi2+0xe>
 800061a:	f7ff ffdd 	bl	80005d8 <__clzsi2>
 800061e:	3020      	adds	r0, #32
 8000620:	e002      	b.n	8000628 <__clzdi2+0x14>
 8000622:	0008      	movs	r0, r1
 8000624:	f7ff ffd8 	bl	80005d8 <__clzsi2>
 8000628:	bd10      	pop	{r4, pc}
 800062a:	46c0      	nop			; (mov r8, r8)

0800062c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800062c:	b5b0      	push	{r4, r5, r7, lr}
 800062e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000630:	f000 fd0a 	bl	8001048 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000634:	f000 f83c 	bl	80006b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000638:	f000 f9ce 	bl	80009d8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800063c:	f000 f8fc 	bl	8000838 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000640:	f000 f948 	bl	80008d4 <MX_USART3_UART_Init>
  MX_USART5_UART_Init();
 8000644:	f000 f994 	bl	8000970 <MX_USART5_UART_Init>
  MX_SPI1_Init();
 8000648:	f000 f87a 	bl	8000740 <MX_SPI1_Init>
  MX_TIM6_Init();
 800064c:	f000 f8b6 	bl	80007bc <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Transmit ( HUART_DBG , (uint8_t*) hello , strlen ( hello ) , UART_TIMEOUT ) ;
 8000650:	4b12      	ldr	r3, [pc, #72]	; (800069c <main+0x70>)
 8000652:	681c      	ldr	r4, [r3, #0]
 8000654:	4b11      	ldr	r3, [pc, #68]	; (800069c <main+0x70>)
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	0018      	movs	r0, r3
 800065a:	f7ff fd53 	bl	8000104 <strlen>
 800065e:	0003      	movs	r3, r0
 8000660:	b29a      	uxth	r2, r3
 8000662:	23fa      	movs	r3, #250	; 0xfa
 8000664:	009b      	lsls	r3, r3, #2
 8000666:	480e      	ldr	r0, [pc, #56]	; (80006a0 <main+0x74>)
 8000668:	0021      	movs	r1, r4
 800066a:	f002 fb91 	bl	8002d90 <HAL_UART_Transmit>
  my_tim_init () ;
 800066e:	f000 fae1 	bl	8000c34 <my_tim_init>
  send_debug_logs ( "The device test started. You have max. 10 minutes to complete all steps.\n" ) ;
 8000672:	4b0c      	ldr	r3, [pc, #48]	; (80006a4 <main+0x78>)
 8000674:	0018      	movs	r0, r3
 8000676:	f000 fa6f 	bl	8000b58 <send_debug_logs>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  my_gnss_on () ;
 800067a:	f000 fa9d 	bl	8000bb8 <my_gnss_on>
  while (1)
  {
	  HAL_UART_Receive	( HUART_GNSS, &c , 1 , UART_TIMEOUT ) ;
 800067e:	23fa      	movs	r3, #250	; 0xfa
 8000680:	009b      	lsls	r3, r3, #2
 8000682:	4909      	ldr	r1, [pc, #36]	; (80006a8 <main+0x7c>)
 8000684:	4809      	ldr	r0, [pc, #36]	; (80006ac <main+0x80>)
 8000686:	2201      	movs	r2, #1
 8000688:	f002 fc1e 	bl	8002ec8 <HAL_UART_Receive>
	  HAL_UART_Transmit ( HUART_DBG, &c , 1 , UART_TIMEOUT ) ;
 800068c:	23fa      	movs	r3, #250	; 0xfa
 800068e:	009b      	lsls	r3, r3, #2
 8000690:	4905      	ldr	r1, [pc, #20]	; (80006a8 <main+0x7c>)
 8000692:	4803      	ldr	r0, [pc, #12]	; (80006a0 <main+0x74>)
 8000694:	2201      	movs	r2, #1
 8000696:	f002 fb7b 	bl	8002d90 <HAL_UART_Transmit>
	  HAL_UART_Receive	( HUART_GNSS, &c , 1 , UART_TIMEOUT ) ;
 800069a:	e7f0      	b.n	800067e <main+0x52>
 800069c:	20000000 	.word	0x20000000
 80006a0:	200000dc 	.word	0x200000dc
 80006a4:	08003db4 	.word	0x08003db4
 80006a8:	20000298 	.word	0x20000298
 80006ac:	20000204 	.word	0x20000204

080006b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006b0:	b590      	push	{r4, r7, lr}
 80006b2:	b095      	sub	sp, #84	; 0x54
 80006b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006b6:	2414      	movs	r4, #20
 80006b8:	193b      	adds	r3, r7, r4
 80006ba:	0018      	movs	r0, r3
 80006bc:	233c      	movs	r3, #60	; 0x3c
 80006be:	001a      	movs	r2, r3
 80006c0:	2100      	movs	r1, #0
 80006c2:	f003 fb1d 	bl	8003d00 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006c6:	1d3b      	adds	r3, r7, #4
 80006c8:	0018      	movs	r0, r3
 80006ca:	2310      	movs	r3, #16
 80006cc:	001a      	movs	r2, r3
 80006ce:	2100      	movs	r1, #0
 80006d0:	f003 fb16 	bl	8003d00 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006d4:	2380      	movs	r3, #128	; 0x80
 80006d6:	009b      	lsls	r3, r3, #2
 80006d8:	0018      	movs	r0, r3
 80006da:	f000 fff7 	bl	80016cc <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006de:	193b      	adds	r3, r7, r4
 80006e0:	2202      	movs	r2, #2
 80006e2:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006e4:	193b      	adds	r3, r7, r4
 80006e6:	2280      	movs	r2, #128	; 0x80
 80006e8:	0052      	lsls	r2, r2, #1
 80006ea:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80006ec:	193b      	adds	r3, r7, r4
 80006ee:	2200      	movs	r2, #0
 80006f0:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006f2:	193b      	adds	r3, r7, r4
 80006f4:	2240      	movs	r2, #64	; 0x40
 80006f6:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80006f8:	193b      	adds	r3, r7, r4
 80006fa:	2200      	movs	r2, #0
 80006fc:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006fe:	193b      	adds	r3, r7, r4
 8000700:	0018      	movs	r0, r3
 8000702:	f001 f82f 	bl	8001764 <HAL_RCC_OscConfig>
 8000706:	1e03      	subs	r3, r0, #0
 8000708:	d001      	beq.n	800070e <SystemClock_Config+0x5e>
  {
    Error_Handler();
 800070a:	f000 fa9f 	bl	8000c4c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800070e:	1d3b      	adds	r3, r7, #4
 8000710:	2207      	movs	r2, #7
 8000712:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000714:	1d3b      	adds	r3, r7, #4
 8000716:	2200      	movs	r2, #0
 8000718:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800071a:	1d3b      	adds	r3, r7, #4
 800071c:	2200      	movs	r2, #0
 800071e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000720:	1d3b      	adds	r3, r7, #4
 8000722:	2200      	movs	r2, #0
 8000724:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000726:	1d3b      	adds	r3, r7, #4
 8000728:	2100      	movs	r1, #0
 800072a:	0018      	movs	r0, r3
 800072c:	f001 fb7a 	bl	8001e24 <HAL_RCC_ClockConfig>
 8000730:	1e03      	subs	r3, r0, #0
 8000732:	d001      	beq.n	8000738 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8000734:	f000 fa8a 	bl	8000c4c <Error_Handler>
  }
}
 8000738:	46c0      	nop			; (mov r8, r8)
 800073a:	46bd      	mov	sp, r7
 800073c:	b015      	add	sp, #84	; 0x54
 800073e:	bd90      	pop	{r4, r7, pc}

08000740 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000744:	4b1b      	ldr	r3, [pc, #108]	; (80007b4 <MX_SPI1_Init+0x74>)
 8000746:	4a1c      	ldr	r2, [pc, #112]	; (80007b8 <MX_SPI1_Init+0x78>)
 8000748:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800074a:	4b1a      	ldr	r3, [pc, #104]	; (80007b4 <MX_SPI1_Init+0x74>)
 800074c:	2282      	movs	r2, #130	; 0x82
 800074e:	0052      	lsls	r2, r2, #1
 8000750:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000752:	4b18      	ldr	r3, [pc, #96]	; (80007b4 <MX_SPI1_Init+0x74>)
 8000754:	2200      	movs	r2, #0
 8000756:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000758:	4b16      	ldr	r3, [pc, #88]	; (80007b4 <MX_SPI1_Init+0x74>)
 800075a:	22e0      	movs	r2, #224	; 0xe0
 800075c:	00d2      	lsls	r2, r2, #3
 800075e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000760:	4b14      	ldr	r3, [pc, #80]	; (80007b4 <MX_SPI1_Init+0x74>)
 8000762:	2200      	movs	r2, #0
 8000764:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000766:	4b13      	ldr	r3, [pc, #76]	; (80007b4 <MX_SPI1_Init+0x74>)
 8000768:	2200      	movs	r2, #0
 800076a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800076c:	4b11      	ldr	r3, [pc, #68]	; (80007b4 <MX_SPI1_Init+0x74>)
 800076e:	2280      	movs	r2, #128	; 0x80
 8000770:	0092      	lsls	r2, r2, #2
 8000772:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000774:	4b0f      	ldr	r3, [pc, #60]	; (80007b4 <MX_SPI1_Init+0x74>)
 8000776:	2210      	movs	r2, #16
 8000778:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800077a:	4b0e      	ldr	r3, [pc, #56]	; (80007b4 <MX_SPI1_Init+0x74>)
 800077c:	2200      	movs	r2, #0
 800077e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000780:	4b0c      	ldr	r3, [pc, #48]	; (80007b4 <MX_SPI1_Init+0x74>)
 8000782:	2200      	movs	r2, #0
 8000784:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000786:	4b0b      	ldr	r3, [pc, #44]	; (80007b4 <MX_SPI1_Init+0x74>)
 8000788:	2200      	movs	r2, #0
 800078a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 800078c:	4b09      	ldr	r3, [pc, #36]	; (80007b4 <MX_SPI1_Init+0x74>)
 800078e:	2207      	movs	r2, #7
 8000790:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000792:	4b08      	ldr	r3, [pc, #32]	; (80007b4 <MX_SPI1_Init+0x74>)
 8000794:	2200      	movs	r2, #0
 8000796:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000798:	4b06      	ldr	r3, [pc, #24]	; (80007b4 <MX_SPI1_Init+0x74>)
 800079a:	2208      	movs	r2, #8
 800079c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800079e:	4b05      	ldr	r3, [pc, #20]	; (80007b4 <MX_SPI1_Init+0x74>)
 80007a0:	0018      	movs	r0, r3
 80007a2:	f001 ff25 	bl	80025f0 <HAL_SPI_Init>
 80007a6:	1e03      	subs	r3, r0, #0
 80007a8:	d001      	beq.n	80007ae <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80007aa:	f000 fa4f 	bl	8000c4c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80007ae:	46c0      	nop			; (mov r8, r8)
 80007b0:	46bd      	mov	sp, r7
 80007b2:	bd80      	pop	{r7, pc}
 80007b4:	2000002c 	.word	0x2000002c
 80007b8:	40013000 	.word	0x40013000

080007bc <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b084      	sub	sp, #16
 80007c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007c2:	1d3b      	adds	r3, r7, #4
 80007c4:	0018      	movs	r0, r3
 80007c6:	230c      	movs	r3, #12
 80007c8:	001a      	movs	r2, r3
 80007ca:	2100      	movs	r1, #0
 80007cc:	f003 fa98 	bl	8003d00 <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80007d0:	4b15      	ldr	r3, [pc, #84]	; (8000828 <MX_TIM6_Init+0x6c>)
 80007d2:	4a16      	ldr	r2, [pc, #88]	; (800082c <MX_TIM6_Init+0x70>)
 80007d4:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 16000-1;
 80007d6:	4b14      	ldr	r3, [pc, #80]	; (8000828 <MX_TIM6_Init+0x6c>)
 80007d8:	4a15      	ldr	r2, [pc, #84]	; (8000830 <MX_TIM6_Init+0x74>)
 80007da:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007dc:	4b12      	ldr	r3, [pc, #72]	; (8000828 <MX_TIM6_Init+0x6c>)
 80007de:	2200      	movs	r2, #0
 80007e0:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000-1;
 80007e2:	4b11      	ldr	r3, [pc, #68]	; (8000828 <MX_TIM6_Init+0x6c>)
 80007e4:	4a13      	ldr	r2, [pc, #76]	; (8000834 <MX_TIM6_Init+0x78>)
 80007e6:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007e8:	4b0f      	ldr	r3, [pc, #60]	; (8000828 <MX_TIM6_Init+0x6c>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80007ee:	4b0e      	ldr	r3, [pc, #56]	; (8000828 <MX_TIM6_Init+0x6c>)
 80007f0:	0018      	movs	r0, r3
 80007f2:	f001 ffb5 	bl	8002760 <HAL_TIM_Base_Init>
 80007f6:	1e03      	subs	r3, r0, #0
 80007f8:	d001      	beq.n	80007fe <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 80007fa:	f000 fa27 	bl	8000c4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007fe:	1d3b      	adds	r3, r7, #4
 8000800:	2200      	movs	r2, #0
 8000802:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000804:	1d3b      	adds	r3, r7, #4
 8000806:	2200      	movs	r2, #0
 8000808:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800080a:	1d3a      	adds	r2, r7, #4
 800080c:	4b06      	ldr	r3, [pc, #24]	; (8000828 <MX_TIM6_Init+0x6c>)
 800080e:	0011      	movs	r1, r2
 8000810:	0018      	movs	r0, r3
 8000812:	f002 f9d9 	bl	8002bc8 <HAL_TIMEx_MasterConfigSynchronization>
 8000816:	1e03      	subs	r3, r0, #0
 8000818:	d001      	beq.n	800081e <MX_TIM6_Init+0x62>
  {
    Error_Handler();
 800081a:	f000 fa17 	bl	8000c4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800081e:	46c0      	nop			; (mov r8, r8)
 8000820:	46bd      	mov	sp, r7
 8000822:	b004      	add	sp, #16
 8000824:	bd80      	pop	{r7, pc}
 8000826:	46c0      	nop			; (mov r8, r8)
 8000828:	20000090 	.word	0x20000090
 800082c:	40001000 	.word	0x40001000
 8000830:	00003e7f 	.word	0x00003e7f
 8000834:	000003e7 	.word	0x000003e7

08000838 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800083c:	4b23      	ldr	r3, [pc, #140]	; (80008cc <MX_USART2_UART_Init+0x94>)
 800083e:	4a24      	ldr	r2, [pc, #144]	; (80008d0 <MX_USART2_UART_Init+0x98>)
 8000840:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000842:	4b22      	ldr	r3, [pc, #136]	; (80008cc <MX_USART2_UART_Init+0x94>)
 8000844:	22e1      	movs	r2, #225	; 0xe1
 8000846:	0252      	lsls	r2, r2, #9
 8000848:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800084a:	4b20      	ldr	r3, [pc, #128]	; (80008cc <MX_USART2_UART_Init+0x94>)
 800084c:	2200      	movs	r2, #0
 800084e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000850:	4b1e      	ldr	r3, [pc, #120]	; (80008cc <MX_USART2_UART_Init+0x94>)
 8000852:	2200      	movs	r2, #0
 8000854:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000856:	4b1d      	ldr	r3, [pc, #116]	; (80008cc <MX_USART2_UART_Init+0x94>)
 8000858:	2200      	movs	r2, #0
 800085a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800085c:	4b1b      	ldr	r3, [pc, #108]	; (80008cc <MX_USART2_UART_Init+0x94>)
 800085e:	220c      	movs	r2, #12
 8000860:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000862:	4b1a      	ldr	r3, [pc, #104]	; (80008cc <MX_USART2_UART_Init+0x94>)
 8000864:	2200      	movs	r2, #0
 8000866:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000868:	4b18      	ldr	r3, [pc, #96]	; (80008cc <MX_USART2_UART_Init+0x94>)
 800086a:	2200      	movs	r2, #0
 800086c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800086e:	4b17      	ldr	r3, [pc, #92]	; (80008cc <MX_USART2_UART_Init+0x94>)
 8000870:	2200      	movs	r2, #0
 8000872:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000874:	4b15      	ldr	r3, [pc, #84]	; (80008cc <MX_USART2_UART_Init+0x94>)
 8000876:	2200      	movs	r2, #0
 8000878:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800087a:	4b14      	ldr	r3, [pc, #80]	; (80008cc <MX_USART2_UART_Init+0x94>)
 800087c:	2200      	movs	r2, #0
 800087e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000880:	4b12      	ldr	r3, [pc, #72]	; (80008cc <MX_USART2_UART_Init+0x94>)
 8000882:	0018      	movs	r0, r3
 8000884:	f002 fa2e 	bl	8002ce4 <HAL_UART_Init>
 8000888:	1e03      	subs	r3, r0, #0
 800088a:	d001      	beq.n	8000890 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 800088c:	f000 f9de 	bl	8000c4c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000890:	4b0e      	ldr	r3, [pc, #56]	; (80008cc <MX_USART2_UART_Init+0x94>)
 8000892:	2100      	movs	r1, #0
 8000894:	0018      	movs	r0, r3
 8000896:	f003 f953 	bl	8003b40 <HAL_UARTEx_SetTxFifoThreshold>
 800089a:	1e03      	subs	r3, r0, #0
 800089c:	d001      	beq.n	80008a2 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800089e:	f000 f9d5 	bl	8000c4c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008a2:	4b0a      	ldr	r3, [pc, #40]	; (80008cc <MX_USART2_UART_Init+0x94>)
 80008a4:	2100      	movs	r1, #0
 80008a6:	0018      	movs	r0, r3
 80008a8:	f003 f98a 	bl	8003bc0 <HAL_UARTEx_SetRxFifoThreshold>
 80008ac:	1e03      	subs	r3, r0, #0
 80008ae:	d001      	beq.n	80008b4 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80008b0:	f000 f9cc 	bl	8000c4c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80008b4:	4b05      	ldr	r3, [pc, #20]	; (80008cc <MX_USART2_UART_Init+0x94>)
 80008b6:	0018      	movs	r0, r3
 80008b8:	f003 f908 	bl	8003acc <HAL_UARTEx_DisableFifoMode>
 80008bc:	1e03      	subs	r3, r0, #0
 80008be:	d001      	beq.n	80008c4 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80008c0:	f000 f9c4 	bl	8000c4c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80008c4:	46c0      	nop			; (mov r8, r8)
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bd80      	pop	{r7, pc}
 80008ca:	46c0      	nop			; (mov r8, r8)
 80008cc:	200000dc 	.word	0x200000dc
 80008d0:	40004400 	.word	0x40004400

080008d4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80008d8:	4b23      	ldr	r3, [pc, #140]	; (8000968 <MX_USART3_UART_Init+0x94>)
 80008da:	4a24      	ldr	r2, [pc, #144]	; (800096c <MX_USART3_UART_Init+0x98>)
 80008dc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 80008de:	4b22      	ldr	r3, [pc, #136]	; (8000968 <MX_USART3_UART_Init+0x94>)
 80008e0:	2296      	movs	r2, #150	; 0x96
 80008e2:	0192      	lsls	r2, r2, #6
 80008e4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80008e6:	4b20      	ldr	r3, [pc, #128]	; (8000968 <MX_USART3_UART_Init+0x94>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80008ec:	4b1e      	ldr	r3, [pc, #120]	; (8000968 <MX_USART3_UART_Init+0x94>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80008f2:	4b1d      	ldr	r3, [pc, #116]	; (8000968 <MX_USART3_UART_Init+0x94>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80008f8:	4b1b      	ldr	r3, [pc, #108]	; (8000968 <MX_USART3_UART_Init+0x94>)
 80008fa:	220c      	movs	r2, #12
 80008fc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008fe:	4b1a      	ldr	r3, [pc, #104]	; (8000968 <MX_USART3_UART_Init+0x94>)
 8000900:	2200      	movs	r2, #0
 8000902:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000904:	4b18      	ldr	r3, [pc, #96]	; (8000968 <MX_USART3_UART_Init+0x94>)
 8000906:	2200      	movs	r2, #0
 8000908:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800090a:	4b17      	ldr	r3, [pc, #92]	; (8000968 <MX_USART3_UART_Init+0x94>)
 800090c:	2200      	movs	r2, #0
 800090e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000910:	4b15      	ldr	r3, [pc, #84]	; (8000968 <MX_USART3_UART_Init+0x94>)
 8000912:	2200      	movs	r2, #0
 8000914:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000916:	4b14      	ldr	r3, [pc, #80]	; (8000968 <MX_USART3_UART_Init+0x94>)
 8000918:	2200      	movs	r2, #0
 800091a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800091c:	4b12      	ldr	r3, [pc, #72]	; (8000968 <MX_USART3_UART_Init+0x94>)
 800091e:	0018      	movs	r0, r3
 8000920:	f002 f9e0 	bl	8002ce4 <HAL_UART_Init>
 8000924:	1e03      	subs	r3, r0, #0
 8000926:	d001      	beq.n	800092c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000928:	f000 f990 	bl	8000c4c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800092c:	4b0e      	ldr	r3, [pc, #56]	; (8000968 <MX_USART3_UART_Init+0x94>)
 800092e:	2100      	movs	r1, #0
 8000930:	0018      	movs	r0, r3
 8000932:	f003 f905 	bl	8003b40 <HAL_UARTEx_SetTxFifoThreshold>
 8000936:	1e03      	subs	r3, r0, #0
 8000938:	d001      	beq.n	800093e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800093a:	f000 f987 	bl	8000c4c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800093e:	4b0a      	ldr	r3, [pc, #40]	; (8000968 <MX_USART3_UART_Init+0x94>)
 8000940:	2100      	movs	r1, #0
 8000942:	0018      	movs	r0, r3
 8000944:	f003 f93c 	bl	8003bc0 <HAL_UARTEx_SetRxFifoThreshold>
 8000948:	1e03      	subs	r3, r0, #0
 800094a:	d001      	beq.n	8000950 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 800094c:	f000 f97e 	bl	8000c4c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000950:	4b05      	ldr	r3, [pc, #20]	; (8000968 <MX_USART3_UART_Init+0x94>)
 8000952:	0018      	movs	r0, r3
 8000954:	f003 f8ba 	bl	8003acc <HAL_UARTEx_DisableFifoMode>
 8000958:	1e03      	subs	r3, r0, #0
 800095a:	d001      	beq.n	8000960 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 800095c:	f000 f976 	bl	8000c4c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000960:	46c0      	nop			; (mov r8, r8)
 8000962:	46bd      	mov	sp, r7
 8000964:	bd80      	pop	{r7, pc}
 8000966:	46c0      	nop			; (mov r8, r8)
 8000968:	20000170 	.word	0x20000170
 800096c:	40004800 	.word	0x40004800

08000970 <MX_USART5_UART_Init>:
  * @brief USART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART5_UART_Init(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	af00      	add	r7, sp, #0
  /* USER CODE END USART5_Init 0 */

  /* USER CODE BEGIN USART5_Init 1 */

  /* USER CODE END USART5_Init 1 */
  huart5.Instance = USART5;
 8000974:	4b16      	ldr	r3, [pc, #88]	; (80009d0 <MX_USART5_UART_Init+0x60>)
 8000976:	4a17      	ldr	r2, [pc, #92]	; (80009d4 <MX_USART5_UART_Init+0x64>)
 8000978:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 9600;
 800097a:	4b15      	ldr	r3, [pc, #84]	; (80009d0 <MX_USART5_UART_Init+0x60>)
 800097c:	2296      	movs	r2, #150	; 0x96
 800097e:	0192      	lsls	r2, r2, #6
 8000980:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8000982:	4b13      	ldr	r3, [pc, #76]	; (80009d0 <MX_USART5_UART_Init+0x60>)
 8000984:	2200      	movs	r2, #0
 8000986:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8000988:	4b11      	ldr	r3, [pc, #68]	; (80009d0 <MX_USART5_UART_Init+0x60>)
 800098a:	2200      	movs	r2, #0
 800098c:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 800098e:	4b10      	ldr	r3, [pc, #64]	; (80009d0 <MX_USART5_UART_Init+0x60>)
 8000990:	2200      	movs	r2, #0
 8000992:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8000994:	4b0e      	ldr	r3, [pc, #56]	; (80009d0 <MX_USART5_UART_Init+0x60>)
 8000996:	220c      	movs	r2, #12
 8000998:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800099a:	4b0d      	ldr	r3, [pc, #52]	; (80009d0 <MX_USART5_UART_Init+0x60>)
 800099c:	2200      	movs	r2, #0
 800099e:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 80009a0:	4b0b      	ldr	r3, [pc, #44]	; (80009d0 <MX_USART5_UART_Init+0x60>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009a6:	4b0a      	ldr	r3, [pc, #40]	; (80009d0 <MX_USART5_UART_Init+0x60>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	621a      	str	r2, [r3, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80009ac:	4b08      	ldr	r3, [pc, #32]	; (80009d0 <MX_USART5_UART_Init+0x60>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	625a      	str	r2, [r3, #36]	; 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009b2:	4b07      	ldr	r3, [pc, #28]	; (80009d0 <MX_USART5_UART_Init+0x60>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart5) != HAL_OK)
 80009b8:	4b05      	ldr	r3, [pc, #20]	; (80009d0 <MX_USART5_UART_Init+0x60>)
 80009ba:	0018      	movs	r0, r3
 80009bc:	f002 f992 	bl	8002ce4 <HAL_UART_Init>
 80009c0:	1e03      	subs	r3, r0, #0
 80009c2:	d001      	beq.n	80009c8 <MX_USART5_UART_Init+0x58>
  {
    Error_Handler();
 80009c4:	f000 f942 	bl	8000c4c <Error_Handler>
  }
  /* USER CODE BEGIN USART5_Init 2 */

  /* USER CODE END USART5_Init 2 */

}
 80009c8:	46c0      	nop			; (mov r8, r8)
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	46c0      	nop			; (mov r8, r8)
 80009d0:	20000204 	.word	0x20000204
 80009d4:	40005000 	.word	0x40005000

080009d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009d8:	b590      	push	{r4, r7, lr}
 80009da:	b08b      	sub	sp, #44	; 0x2c
 80009dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009de:	2414      	movs	r4, #20
 80009e0:	193b      	adds	r3, r7, r4
 80009e2:	0018      	movs	r0, r3
 80009e4:	2314      	movs	r3, #20
 80009e6:	001a      	movs	r2, r3
 80009e8:	2100      	movs	r1, #0
 80009ea:	f003 f989 	bl	8003d00 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009ee:	4b57      	ldr	r3, [pc, #348]	; (8000b4c <MX_GPIO_Init+0x174>)
 80009f0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80009f2:	4b56      	ldr	r3, [pc, #344]	; (8000b4c <MX_GPIO_Init+0x174>)
 80009f4:	2104      	movs	r1, #4
 80009f6:	430a      	orrs	r2, r1
 80009f8:	635a      	str	r2, [r3, #52]	; 0x34
 80009fa:	4b54      	ldr	r3, [pc, #336]	; (8000b4c <MX_GPIO_Init+0x174>)
 80009fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80009fe:	2204      	movs	r2, #4
 8000a00:	4013      	ands	r3, r2
 8000a02:	613b      	str	r3, [r7, #16]
 8000a04:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000a06:	4b51      	ldr	r3, [pc, #324]	; (8000b4c <MX_GPIO_Init+0x174>)
 8000a08:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000a0a:	4b50      	ldr	r3, [pc, #320]	; (8000b4c <MX_GPIO_Init+0x174>)
 8000a0c:	2120      	movs	r1, #32
 8000a0e:	430a      	orrs	r2, r1
 8000a10:	635a      	str	r2, [r3, #52]	; 0x34
 8000a12:	4b4e      	ldr	r3, [pc, #312]	; (8000b4c <MX_GPIO_Init+0x174>)
 8000a14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a16:	2220      	movs	r2, #32
 8000a18:	4013      	ands	r3, r2
 8000a1a:	60fb      	str	r3, [r7, #12]
 8000a1c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a1e:	4b4b      	ldr	r3, [pc, #300]	; (8000b4c <MX_GPIO_Init+0x174>)
 8000a20:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000a22:	4b4a      	ldr	r3, [pc, #296]	; (8000b4c <MX_GPIO_Init+0x174>)
 8000a24:	2101      	movs	r1, #1
 8000a26:	430a      	orrs	r2, r1
 8000a28:	635a      	str	r2, [r3, #52]	; 0x34
 8000a2a:	4b48      	ldr	r3, [pc, #288]	; (8000b4c <MX_GPIO_Init+0x174>)
 8000a2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a2e:	2201      	movs	r2, #1
 8000a30:	4013      	ands	r3, r2
 8000a32:	60bb      	str	r3, [r7, #8]
 8000a34:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a36:	4b45      	ldr	r3, [pc, #276]	; (8000b4c <MX_GPIO_Init+0x174>)
 8000a38:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000a3a:	4b44      	ldr	r3, [pc, #272]	; (8000b4c <MX_GPIO_Init+0x174>)
 8000a3c:	2102      	movs	r1, #2
 8000a3e:	430a      	orrs	r2, r1
 8000a40:	635a      	str	r2, [r3, #52]	; 0x34
 8000a42:	4b42      	ldr	r3, [pc, #264]	; (8000b4c <MX_GPIO_Init+0x174>)
 8000a44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a46:	2202      	movs	r2, #2
 8000a48:	4013      	ands	r3, r2
 8000a4a:	607b      	str	r3, [r7, #4]
 8000a4c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a4e:	4b3f      	ldr	r3, [pc, #252]	; (8000b4c <MX_GPIO_Init+0x174>)
 8000a50:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000a52:	4b3e      	ldr	r3, [pc, #248]	; (8000b4c <MX_GPIO_Init+0x174>)
 8000a54:	2108      	movs	r1, #8
 8000a56:	430a      	orrs	r2, r1
 8000a58:	635a      	str	r2, [r3, #52]	; 0x34
 8000a5a:	4b3c      	ldr	r3, [pc, #240]	; (8000b4c <MX_GPIO_Init+0x174>)
 8000a5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a5e:	2208      	movs	r2, #8
 8000a60:	4013      	ands	r3, r2
 8000a62:	603b      	str	r3, [r7, #0]
 8000a64:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ACC_CS_Pin|LDG_Pin, GPIO_PIN_RESET);
 8000a66:	23a0      	movs	r3, #160	; 0xa0
 8000a68:	05db      	lsls	r3, r3, #23
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	2130      	movs	r1, #48	; 0x30
 8000a6e:	0018      	movs	r0, r3
 8000a70:	f000 fdd0 	bl	8001614 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ASTRO_WKUP_Pin|ASTRO_RST_Pin|GNSS_RST_Pin|GNSS_PWR_SW_Pin, GPIO_PIN_RESET);
 8000a74:	4936      	ldr	r1, [pc, #216]	; (8000b50 <MX_GPIO_Init+0x178>)
 8000a76:	4b37      	ldr	r3, [pc, #220]	; (8000b54 <MX_GPIO_Init+0x17c>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	0018      	movs	r0, r3
 8000a7c:	f000 fdca 	bl	8001614 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ACC_INT1_Pin ACC_INT2_Pin */
  GPIO_InitStruct.Pin = ACC_INT1_Pin|ACC_INT2_Pin;
 8000a80:	193b      	adds	r3, r7, r4
 8000a82:	2203      	movs	r2, #3
 8000a84:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a86:	193b      	adds	r3, r7, r4
 8000a88:	2288      	movs	r2, #136	; 0x88
 8000a8a:	0352      	lsls	r2, r2, #13
 8000a8c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a8e:	193b      	adds	r3, r7, r4
 8000a90:	2200      	movs	r2, #0
 8000a92:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a94:	193a      	adds	r2, r7, r4
 8000a96:	23a0      	movs	r3, #160	; 0xa0
 8000a98:	05db      	lsls	r3, r3, #23
 8000a9a:	0011      	movs	r1, r2
 8000a9c:	0018      	movs	r0, r3
 8000a9e:	f000 fc4d 	bl	800133c <HAL_GPIO_Init>

  /*Configure GPIO pins : ACC_CS_Pin LDG_Pin */
  GPIO_InitStruct.Pin = ACC_CS_Pin|LDG_Pin;
 8000aa2:	193b      	adds	r3, r7, r4
 8000aa4:	2230      	movs	r2, #48	; 0x30
 8000aa6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aa8:	193b      	adds	r3, r7, r4
 8000aaa:	2201      	movs	r2, #1
 8000aac:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aae:	193b      	adds	r3, r7, r4
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ab4:	193b      	adds	r3, r7, r4
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aba:	193a      	adds	r2, r7, r4
 8000abc:	23a0      	movs	r3, #160	; 0xa0
 8000abe:	05db      	lsls	r3, r3, #23
 8000ac0:	0011      	movs	r1, r2
 8000ac2:	0018      	movs	r0, r3
 8000ac4:	f000 fc3a 	bl	800133c <HAL_GPIO_Init>

  /*Configure GPIO pins : ASTRO_WKUP_Pin ASTRO_RST_Pin GNSS_RST_Pin GNSS_PWR_SW_Pin */
  GPIO_InitStruct.Pin = ASTRO_WKUP_Pin|ASTRO_RST_Pin|GNSS_RST_Pin|GNSS_PWR_SW_Pin;
 8000ac8:	193b      	adds	r3, r7, r4
 8000aca:	4a21      	ldr	r2, [pc, #132]	; (8000b50 <MX_GPIO_Init+0x178>)
 8000acc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ace:	193b      	adds	r3, r7, r4
 8000ad0:	2201      	movs	r2, #1
 8000ad2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad4:	193b      	adds	r3, r7, r4
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ada:	193b      	adds	r3, r7, r4
 8000adc:	2200      	movs	r2, #0
 8000ade:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ae0:	193b      	adds	r3, r7, r4
 8000ae2:	4a1c      	ldr	r2, [pc, #112]	; (8000b54 <MX_GPIO_Init+0x17c>)
 8000ae4:	0019      	movs	r1, r3
 8000ae6:	0010      	movs	r0, r2
 8000ae8:	f000 fc28 	bl	800133c <HAL_GPIO_Init>

  /*Configure GPIO pins : ASTRO_EVT_Pin GNSS_3DFIX_Pin GNSS_JAM_Pin */
  GPIO_InitStruct.Pin = ASTRO_EVT_Pin|GNSS_3DFIX_Pin|GNSS_JAM_Pin;
 8000aec:	0021      	movs	r1, r4
 8000aee:	187b      	adds	r3, r7, r1
 8000af0:	2264      	movs	r2, #100	; 0x64
 8000af2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000af4:	187b      	adds	r3, r7, r1
 8000af6:	2288      	movs	r2, #136	; 0x88
 8000af8:	0352      	lsls	r2, r2, #13
 8000afa:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000afc:	187b      	adds	r3, r7, r1
 8000afe:	2200      	movs	r2, #0
 8000b00:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b02:	000c      	movs	r4, r1
 8000b04:	187b      	adds	r3, r7, r1
 8000b06:	4a13      	ldr	r2, [pc, #76]	; (8000b54 <MX_GPIO_Init+0x17c>)
 8000b08:	0019      	movs	r1, r3
 8000b0a:	0010      	movs	r0, r2
 8000b0c:	f000 fc16 	bl	800133c <HAL_GPIO_Init>

  /*Configure GPIO pin : GNSS_GEOF_Pin */
  GPIO_InitStruct.Pin = GNSS_GEOF_Pin;
 8000b10:	0021      	movs	r1, r4
 8000b12:	187b      	adds	r3, r7, r1
 8000b14:	2280      	movs	r2, #128	; 0x80
 8000b16:	00d2      	lsls	r2, r2, #3
 8000b18:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b1a:	187b      	adds	r3, r7, r1
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b20:	187b      	adds	r3, r7, r1
 8000b22:	2200      	movs	r2, #0
 8000b24:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GNSS_GEOF_GPIO_Port, &GPIO_InitStruct);
 8000b26:	187b      	adds	r3, r7, r1
 8000b28:	4a0a      	ldr	r2, [pc, #40]	; (8000b54 <MX_GPIO_Init+0x17c>)
 8000b2a:	0019      	movs	r1, r3
 8000b2c:	0010      	movs	r0, r2
 8000b2e:	f000 fc05 	bl	800133c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 3, 0);
 8000b32:	2200      	movs	r2, #0
 8000b34:	2103      	movs	r1, #3
 8000b36:	2005      	movs	r0, #5
 8000b38:	f000 fbca 	bl	80012d0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 8000b3c:	2005      	movs	r0, #5
 8000b3e:	f000 fbdc 	bl	80012fa <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b42:	46c0      	nop			; (mov r8, r8)
 8000b44:	46bd      	mov	sp, r7
 8000b46:	b00b      	add	sp, #44	; 0x2c
 8000b48:	bd90      	pop	{r4, r7, pc}
 8000b4a:	46c0      	nop			; (mov r8, r8)
 8000b4c:	40021000 	.word	0x40021000
 8000b50:	0000a003 	.word	0x0000a003
 8000b54:	50000400 	.word	0x50000400

08000b58 <send_debug_logs>:
/* USER CODE BEGIN 4 */


// FUNCTIONS REQUIRED BY astronode-stm32-example-asset library
void send_debug_logs ( char* p_tx_buffer )
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b084      	sub	sp, #16
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
    uint32_t length = strlen ( p_tx_buffer ) ;
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	0018      	movs	r0, r3
 8000b64:	f7ff face 	bl	8000104 <strlen>
 8000b68:	0003      	movs	r3, r0
 8000b6a:	60fb      	str	r3, [r7, #12]

    if ( length > UART_TX_MAX_BUFF_SIZE )
 8000b6c:	68fb      	ldr	r3, [r7, #12]
 8000b6e:	2bfa      	cmp	r3, #250	; 0xfa
 8000b70:	d908      	bls.n	8000b84 <send_debug_logs+0x2c>
    {
        HAL_UART_Transmit ( HUART_DBG , ( uint8_t* ) "[ERROR] UART buffer reached max length.\n" , 42 , UART_TIMEOUT ) ;
 8000b72:	23fa      	movs	r3, #250	; 0xfa
 8000b74:	009b      	lsls	r3, r3, #2
 8000b76:	490d      	ldr	r1, [pc, #52]	; (8000bac <send_debug_logs+0x54>)
 8000b78:	480d      	ldr	r0, [pc, #52]	; (8000bb0 <send_debug_logs+0x58>)
 8000b7a:	222a      	movs	r2, #42	; 0x2a
 8000b7c:	f002 f908 	bl	8002d90 <HAL_UART_Transmit>
        length = UART_TX_MAX_BUFF_SIZE;
 8000b80:	23fa      	movs	r3, #250	; 0xfa
 8000b82:	60fb      	str	r3, [r7, #12]
    }

    HAL_UART_Transmit ( HUART_DBG , ( uint8_t* ) p_tx_buffer , length , UART_TIMEOUT ) ;
 8000b84:	68fb      	ldr	r3, [r7, #12]
 8000b86:	b29a      	uxth	r2, r3
 8000b88:	23fa      	movs	r3, #250	; 0xfa
 8000b8a:	009b      	lsls	r3, r3, #2
 8000b8c:	6879      	ldr	r1, [r7, #4]
 8000b8e:	4808      	ldr	r0, [pc, #32]	; (8000bb0 <send_debug_logs+0x58>)
 8000b90:	f002 f8fe 	bl	8002d90 <HAL_UART_Transmit>
    HAL_UART_Transmit ( HUART_DBG , ( uint8_t* ) "\n" , 1 , UART_TIMEOUT ) ;
 8000b94:	23fa      	movs	r3, #250	; 0xfa
 8000b96:	009b      	lsls	r3, r3, #2
 8000b98:	4906      	ldr	r1, [pc, #24]	; (8000bb4 <send_debug_logs+0x5c>)
 8000b9a:	4805      	ldr	r0, [pc, #20]	; (8000bb0 <send_debug_logs+0x58>)
 8000b9c:	2201      	movs	r2, #1
 8000b9e:	f002 f8f7 	bl	8002d90 <HAL_UART_Transmit>
}
 8000ba2:	46c0      	nop			; (mov r8, r8)
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	b004      	add	sp, #16
 8000ba8:	bd80      	pop	{r7, pc}
 8000baa:	46c0      	nop			; (mov r8, r8)
 8000bac:	08003e00 	.word	0x08003e00
 8000bb0:	200000dc 	.word	0x200000dc
 8000bb4:	08003e2c 	.word	0x08003e2c

08000bb8 <my_gnss_on>:
	return 0;
}

// GNSS LL Function
void my_gnss_on ( void )
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin ( GPIOB , GNSS_PWR_SW_Pin , GPIO_PIN_SET ) ;
 8000bbc:	2380      	movs	r3, #128	; 0x80
 8000bbe:	021b      	lsls	r3, r3, #8
 8000bc0:	4808      	ldr	r0, [pc, #32]	; (8000be4 <my_gnss_on+0x2c>)
 8000bc2:	2201      	movs	r2, #1
 8000bc4:	0019      	movs	r1, r3
 8000bc6:	f000 fd25 	bl	8001614 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin ( GPIOB , GNSS_RST_Pin , GPIO_PIN_SET ) ;
 8000bca:	2380      	movs	r3, #128	; 0x80
 8000bcc:	019b      	lsls	r3, r3, #6
 8000bce:	4805      	ldr	r0, [pc, #20]	; (8000be4 <my_gnss_on+0x2c>)
 8000bd0:	2201      	movs	r2, #1
 8000bd2:	0019      	movs	r1, r3
 8000bd4:	f000 fd1e 	bl	8001614 <HAL_GPIO_WritePin>
	MX_USART3_UART_Init () ;
 8000bd8:	f7ff fe7c 	bl	80008d4 <MX_USART3_UART_Init>
}
 8000bdc:	46c0      	nop			; (mov r8, r8)
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bd80      	pop	{r7, pc}
 8000be2:	46c0      	nop			; (mov r8, r8)
 8000be4:	50000400 	.word	0x50000400

08000be8 <HAL_TIM_PeriodElapsedCallback>:
	HAL_GPIO_WritePin ( GPIOB , GNSS_RST_Pin , GPIO_PIN_RESET ) ;
	HAL_UART_DeInit ( HUART_GNSS ) ;
}

void HAL_TIM_PeriodElapsedCallback ( TIM_HandleTypeDef *htim )
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b082      	sub	sp, #8
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
	if ( htim->Instance == TIM6 )
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	4a0c      	ldr	r2, [pc, #48]	; (8000c28 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8000bf6:	4293      	cmp	r3, r2
 8000bf8:	d111      	bne.n	8000c1e <HAL_TIM_PeriodElapsedCallback+0x36>
	{
		tim_seconds++ ;
 8000bfa:	4b0c      	ldr	r3, [pc, #48]	; (8000c2c <HAL_TIM_PeriodElapsedCallback+0x44>)
 8000bfc:	881b      	ldrh	r3, [r3, #0]
 8000bfe:	3301      	adds	r3, #1
 8000c00:	b29a      	uxth	r2, r3
 8000c02:	4b0a      	ldr	r3, [pc, #40]	; (8000c2c <HAL_TIM_PeriodElapsedCallback+0x44>)
 8000c04:	801a      	strh	r2, [r3, #0]
		if ( tim_seconds > TIM_SECONDS_THS_SYSTEM_RESET )
 8000c06:	4b09      	ldr	r3, [pc, #36]	; (8000c2c <HAL_TIM_PeriodElapsedCallback+0x44>)
 8000c08:	881a      	ldrh	r2, [r3, #0]
 8000c0a:	2396      	movs	r3, #150	; 0x96
 8000c0c:	009b      	lsls	r3, r3, #2
 8000c0e:	429a      	cmp	r2, r3
 8000c10:	d905      	bls.n	8000c1e <HAL_TIM_PeriodElapsedCallback+0x36>
		{
			send_debug_logs ( "Watchdog activated! System restart!" ) ;
 8000c12:	4b07      	ldr	r3, [pc, #28]	; (8000c30 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8000c14:	0018      	movs	r0, r3
 8000c16:	f7ff ff9f 	bl	8000b58 <send_debug_logs>
			HAL_NVIC_SystemReset () ;
 8000c1a:	f000 fb7e 	bl	800131a <HAL_NVIC_SystemReset>
		}
	}
}
 8000c1e:	46c0      	nop			; (mov r8, r8)
 8000c20:	46bd      	mov	sp, r7
 8000c22:	b002      	add	sp, #8
 8000c24:	bd80      	pop	{r7, pc}
 8000c26:	46c0      	nop			; (mov r8, r8)
 8000c28:	40001000 	.word	0x40001000
 8000c2c:	2000029a 	.word	0x2000029a
 8000c30:	08003e30 	.word	0x08003e30

08000c34 <my_tim_init>:

void my_tim_init (void )
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	af00      	add	r7, sp, #0
	__HAL_TIM_CLEAR_IT ( HTIM , TIM_IT_UPDATE ) ;
 8000c38:	4b03      	ldr	r3, [pc, #12]	; (8000c48 <my_tim_init+0x14>)
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	2202      	movs	r2, #2
 8000c3e:	4252      	negs	r2, r2
 8000c40:	611a      	str	r2, [r3, #16]
}
 8000c42:	46c0      	nop			; (mov r8, r8)
 8000c44:	46bd      	mov	sp, r7
 8000c46:	bd80      	pop	{r7, pc}
 8000c48:	20000090 	.word	0x20000090

08000c4c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c50:	b672      	cpsid	i
}
 8000c52:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c54:	e7fe      	b.n	8000c54 <Error_Handler+0x8>
	...

08000c58 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b082      	sub	sp, #8
 8000c5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c5e:	4b0f      	ldr	r3, [pc, #60]	; (8000c9c <HAL_MspInit+0x44>)
 8000c60:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000c62:	4b0e      	ldr	r3, [pc, #56]	; (8000c9c <HAL_MspInit+0x44>)
 8000c64:	2101      	movs	r1, #1
 8000c66:	430a      	orrs	r2, r1
 8000c68:	641a      	str	r2, [r3, #64]	; 0x40
 8000c6a:	4b0c      	ldr	r3, [pc, #48]	; (8000c9c <HAL_MspInit+0x44>)
 8000c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c6e:	2201      	movs	r2, #1
 8000c70:	4013      	ands	r3, r2
 8000c72:	607b      	str	r3, [r7, #4]
 8000c74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c76:	4b09      	ldr	r3, [pc, #36]	; (8000c9c <HAL_MspInit+0x44>)
 8000c78:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000c7a:	4b08      	ldr	r3, [pc, #32]	; (8000c9c <HAL_MspInit+0x44>)
 8000c7c:	2180      	movs	r1, #128	; 0x80
 8000c7e:	0549      	lsls	r1, r1, #21
 8000c80:	430a      	orrs	r2, r1
 8000c82:	63da      	str	r2, [r3, #60]	; 0x3c
 8000c84:	4b05      	ldr	r3, [pc, #20]	; (8000c9c <HAL_MspInit+0x44>)
 8000c86:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000c88:	2380      	movs	r3, #128	; 0x80
 8000c8a:	055b      	lsls	r3, r3, #21
 8000c8c:	4013      	ands	r3, r2
 8000c8e:	603b      	str	r3, [r7, #0]
 8000c90:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c92:	46c0      	nop			; (mov r8, r8)
 8000c94:	46bd      	mov	sp, r7
 8000c96:	b002      	add	sp, #8
 8000c98:	bd80      	pop	{r7, pc}
 8000c9a:	46c0      	nop			; (mov r8, r8)
 8000c9c:	40021000 	.word	0x40021000

08000ca0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000ca0:	b590      	push	{r4, r7, lr}
 8000ca2:	b08b      	sub	sp, #44	; 0x2c
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ca8:	2414      	movs	r4, #20
 8000caa:	193b      	adds	r3, r7, r4
 8000cac:	0018      	movs	r0, r3
 8000cae:	2314      	movs	r3, #20
 8000cb0:	001a      	movs	r2, r3
 8000cb2:	2100      	movs	r1, #0
 8000cb4:	f003 f824 	bl	8003d00 <memset>
  if(hspi->Instance==SPI1)
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	4a2c      	ldr	r2, [pc, #176]	; (8000d70 <HAL_SPI_MspInit+0xd0>)
 8000cbe:	4293      	cmp	r3, r2
 8000cc0:	d152      	bne.n	8000d68 <HAL_SPI_MspInit+0xc8>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000cc2:	4b2c      	ldr	r3, [pc, #176]	; (8000d74 <HAL_SPI_MspInit+0xd4>)
 8000cc4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000cc6:	4b2b      	ldr	r3, [pc, #172]	; (8000d74 <HAL_SPI_MspInit+0xd4>)
 8000cc8:	2180      	movs	r1, #128	; 0x80
 8000cca:	0149      	lsls	r1, r1, #5
 8000ccc:	430a      	orrs	r2, r1
 8000cce:	641a      	str	r2, [r3, #64]	; 0x40
 8000cd0:	4b28      	ldr	r3, [pc, #160]	; (8000d74 <HAL_SPI_MspInit+0xd4>)
 8000cd2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000cd4:	2380      	movs	r3, #128	; 0x80
 8000cd6:	015b      	lsls	r3, r3, #5
 8000cd8:	4013      	ands	r3, r2
 8000cda:	613b      	str	r3, [r7, #16]
 8000cdc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cde:	4b25      	ldr	r3, [pc, #148]	; (8000d74 <HAL_SPI_MspInit+0xd4>)
 8000ce0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000ce2:	4b24      	ldr	r3, [pc, #144]	; (8000d74 <HAL_SPI_MspInit+0xd4>)
 8000ce4:	2101      	movs	r1, #1
 8000ce6:	430a      	orrs	r2, r1
 8000ce8:	635a      	str	r2, [r3, #52]	; 0x34
 8000cea:	4b22      	ldr	r3, [pc, #136]	; (8000d74 <HAL_SPI_MspInit+0xd4>)
 8000cec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000cee:	2201      	movs	r2, #1
 8000cf0:	4013      	ands	r3, r2
 8000cf2:	60fb      	str	r3, [r7, #12]
 8000cf4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cf6:	4b1f      	ldr	r3, [pc, #124]	; (8000d74 <HAL_SPI_MspInit+0xd4>)
 8000cf8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000cfa:	4b1e      	ldr	r3, [pc, #120]	; (8000d74 <HAL_SPI_MspInit+0xd4>)
 8000cfc:	2108      	movs	r1, #8
 8000cfe:	430a      	orrs	r2, r1
 8000d00:	635a      	str	r2, [r3, #52]	; 0x34
 8000d02:	4b1c      	ldr	r3, [pc, #112]	; (8000d74 <HAL_SPI_MspInit+0xd4>)
 8000d04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d06:	2208      	movs	r2, #8
 8000d08:	4013      	ands	r3, r2
 8000d0a:	60bb      	str	r3, [r7, #8]
 8000d0c:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PD8     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = ACC_MISO_Pin|ACC_MOSI_Pin;
 8000d0e:	193b      	adds	r3, r7, r4
 8000d10:	22c0      	movs	r2, #192	; 0xc0
 8000d12:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d14:	193b      	adds	r3, r7, r4
 8000d16:	2202      	movs	r2, #2
 8000d18:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d1a:	193b      	adds	r3, r7, r4
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d20:	193b      	adds	r3, r7, r4
 8000d22:	2200      	movs	r2, #0
 8000d24:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8000d26:	193b      	adds	r3, r7, r4
 8000d28:	2200      	movs	r2, #0
 8000d2a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d2c:	193a      	adds	r2, r7, r4
 8000d2e:	23a0      	movs	r3, #160	; 0xa0
 8000d30:	05db      	lsls	r3, r3, #23
 8000d32:	0011      	movs	r1, r2
 8000d34:	0018      	movs	r0, r3
 8000d36:	f000 fb01 	bl	800133c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ACC_SCK_Pin;
 8000d3a:	0021      	movs	r1, r4
 8000d3c:	187b      	adds	r3, r7, r1
 8000d3e:	2280      	movs	r2, #128	; 0x80
 8000d40:	0052      	lsls	r2, r2, #1
 8000d42:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d44:	187b      	adds	r3, r7, r1
 8000d46:	2202      	movs	r2, #2
 8000d48:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d4a:	187b      	adds	r3, r7, r1
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d50:	187b      	adds	r3, r7, r1
 8000d52:	2200      	movs	r2, #0
 8000d54:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_SPI1;
 8000d56:	187b      	adds	r3, r7, r1
 8000d58:	2201      	movs	r2, #1
 8000d5a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(ACC_SCK_GPIO_Port, &GPIO_InitStruct);
 8000d5c:	187b      	adds	r3, r7, r1
 8000d5e:	4a06      	ldr	r2, [pc, #24]	; (8000d78 <HAL_SPI_MspInit+0xd8>)
 8000d60:	0019      	movs	r1, r3
 8000d62:	0010      	movs	r0, r2
 8000d64:	f000 faea 	bl	800133c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000d68:	46c0      	nop			; (mov r8, r8)
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	b00b      	add	sp, #44	; 0x2c
 8000d6e:	bd90      	pop	{r4, r7, pc}
 8000d70:	40013000 	.word	0x40013000
 8000d74:	40021000 	.word	0x40021000
 8000d78:	50000c00 	.word	0x50000c00

08000d7c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b084      	sub	sp, #16
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	4a0d      	ldr	r2, [pc, #52]	; (8000dc0 <HAL_TIM_Base_MspInit+0x44>)
 8000d8a:	4293      	cmp	r3, r2
 8000d8c:	d113      	bne.n	8000db6 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000d8e:	4b0d      	ldr	r3, [pc, #52]	; (8000dc4 <HAL_TIM_Base_MspInit+0x48>)
 8000d90:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000d92:	4b0c      	ldr	r3, [pc, #48]	; (8000dc4 <HAL_TIM_Base_MspInit+0x48>)
 8000d94:	2110      	movs	r1, #16
 8000d96:	430a      	orrs	r2, r1
 8000d98:	63da      	str	r2, [r3, #60]	; 0x3c
 8000d9a:	4b0a      	ldr	r3, [pc, #40]	; (8000dc4 <HAL_TIM_Base_MspInit+0x48>)
 8000d9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000d9e:	2210      	movs	r2, #16
 8000da0:	4013      	ands	r3, r2
 8000da2:	60fb      	str	r3, [r7, #12]
 8000da4:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_LPTIM1_IRQn, 1, 0);
 8000da6:	2200      	movs	r2, #0
 8000da8:	2101      	movs	r1, #1
 8000daa:	2011      	movs	r0, #17
 8000dac:	f000 fa90 	bl	80012d0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_LPTIM1_IRQn);
 8000db0:	2011      	movs	r0, #17
 8000db2:	f000 faa2 	bl	80012fa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8000db6:	46c0      	nop			; (mov r8, r8)
 8000db8:	46bd      	mov	sp, r7
 8000dba:	b004      	add	sp, #16
 8000dbc:	bd80      	pop	{r7, pc}
 8000dbe:	46c0      	nop			; (mov r8, r8)
 8000dc0:	40001000 	.word	0x40001000
 8000dc4:	40021000 	.word	0x40021000

08000dc8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000dc8:	b590      	push	{r4, r7, lr}
 8000dca:	b0a1      	sub	sp, #132	; 0x84
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dd0:	236c      	movs	r3, #108	; 0x6c
 8000dd2:	18fb      	adds	r3, r7, r3
 8000dd4:	0018      	movs	r0, r3
 8000dd6:	2314      	movs	r3, #20
 8000dd8:	001a      	movs	r2, r3
 8000dda:	2100      	movs	r1, #0
 8000ddc:	f002 ff90 	bl	8003d00 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000de0:	2420      	movs	r4, #32
 8000de2:	193b      	adds	r3, r7, r4
 8000de4:	0018      	movs	r0, r3
 8000de6:	234c      	movs	r3, #76	; 0x4c
 8000de8:	001a      	movs	r2, r3
 8000dea:	2100      	movs	r1, #0
 8000dec:	f002 ff88 	bl	8003d00 <memset>
  if(huart->Instance==USART2)
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	4a60      	ldr	r2, [pc, #384]	; (8000f78 <HAL_UART_MspInit+0x1b0>)
 8000df6:	4293      	cmp	r3, r2
 8000df8:	d13f      	bne.n	8000e7a <HAL_UART_MspInit+0xb2>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000dfa:	193b      	adds	r3, r7, r4
 8000dfc:	2202      	movs	r2, #2
 8000dfe:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000e00:	193b      	adds	r3, r7, r4
 8000e02:	2200      	movs	r2, #0
 8000e04:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e06:	193b      	adds	r3, r7, r4
 8000e08:	0018      	movs	r0, r3
 8000e0a:	f001 f9b5 	bl	8002178 <HAL_RCCEx_PeriphCLKConfig>
 8000e0e:	1e03      	subs	r3, r0, #0
 8000e10:	d001      	beq.n	8000e16 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000e12:	f7ff ff1b 	bl	8000c4c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e16:	4b59      	ldr	r3, [pc, #356]	; (8000f7c <HAL_UART_MspInit+0x1b4>)
 8000e18:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000e1a:	4b58      	ldr	r3, [pc, #352]	; (8000f7c <HAL_UART_MspInit+0x1b4>)
 8000e1c:	2180      	movs	r1, #128	; 0x80
 8000e1e:	0289      	lsls	r1, r1, #10
 8000e20:	430a      	orrs	r2, r1
 8000e22:	63da      	str	r2, [r3, #60]	; 0x3c
 8000e24:	4b55      	ldr	r3, [pc, #340]	; (8000f7c <HAL_UART_MspInit+0x1b4>)
 8000e26:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000e28:	2380      	movs	r3, #128	; 0x80
 8000e2a:	029b      	lsls	r3, r3, #10
 8000e2c:	4013      	ands	r3, r2
 8000e2e:	61fb      	str	r3, [r7, #28]
 8000e30:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e32:	4b52      	ldr	r3, [pc, #328]	; (8000f7c <HAL_UART_MspInit+0x1b4>)
 8000e34:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000e36:	4b51      	ldr	r3, [pc, #324]	; (8000f7c <HAL_UART_MspInit+0x1b4>)
 8000e38:	2101      	movs	r1, #1
 8000e3a:	430a      	orrs	r2, r1
 8000e3c:	635a      	str	r2, [r3, #52]	; 0x34
 8000e3e:	4b4f      	ldr	r3, [pc, #316]	; (8000f7c <HAL_UART_MspInit+0x1b4>)
 8000e40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e42:	2201      	movs	r2, #1
 8000e44:	4013      	ands	r3, r2
 8000e46:	61bb      	str	r3, [r7, #24]
 8000e48:	69bb      	ldr	r3, [r7, #24]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = DBG_TX_Pin|DBG_RX_Pin;
 8000e4a:	216c      	movs	r1, #108	; 0x6c
 8000e4c:	187b      	adds	r3, r7, r1
 8000e4e:	220c      	movs	r2, #12
 8000e50:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e52:	187b      	adds	r3, r7, r1
 8000e54:	2202      	movs	r2, #2
 8000e56:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e58:	187b      	adds	r3, r7, r1
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e5e:	187b      	adds	r3, r7, r1
 8000e60:	2200      	movs	r2, #0
 8000e62:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000e64:	187b      	adds	r3, r7, r1
 8000e66:	2201      	movs	r2, #1
 8000e68:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e6a:	187a      	adds	r2, r7, r1
 8000e6c:	23a0      	movs	r3, #160	; 0xa0
 8000e6e:	05db      	lsls	r3, r3, #23
 8000e70:	0011      	movs	r1, r2
 8000e72:	0018      	movs	r0, r3
 8000e74:	f000 fa62 	bl	800133c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART5_MspInit 1 */

  /* USER CODE END USART5_MspInit 1 */
  }

}
 8000e78:	e07a      	b.n	8000f70 <HAL_UART_MspInit+0x1a8>
  else if(huart->Instance==USART3)
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	4a40      	ldr	r2, [pc, #256]	; (8000f80 <HAL_UART_MspInit+0x1b8>)
 8000e80:	4293      	cmp	r3, r2
 8000e82:	d140      	bne.n	8000f06 <HAL_UART_MspInit+0x13e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000e84:	2120      	movs	r1, #32
 8000e86:	187b      	adds	r3, r7, r1
 8000e88:	2204      	movs	r2, #4
 8000e8a:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000e8c:	187b      	adds	r3, r7, r1
 8000e8e:	2200      	movs	r2, #0
 8000e90:	60da      	str	r2, [r3, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e92:	187b      	adds	r3, r7, r1
 8000e94:	0018      	movs	r0, r3
 8000e96:	f001 f96f 	bl	8002178 <HAL_RCCEx_PeriphCLKConfig>
 8000e9a:	1e03      	subs	r3, r0, #0
 8000e9c:	d001      	beq.n	8000ea2 <HAL_UART_MspInit+0xda>
      Error_Handler();
 8000e9e:	f7ff fed5 	bl	8000c4c <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000ea2:	4b36      	ldr	r3, [pc, #216]	; (8000f7c <HAL_UART_MspInit+0x1b4>)
 8000ea4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000ea6:	4b35      	ldr	r3, [pc, #212]	; (8000f7c <HAL_UART_MspInit+0x1b4>)
 8000ea8:	2180      	movs	r1, #128	; 0x80
 8000eaa:	02c9      	lsls	r1, r1, #11
 8000eac:	430a      	orrs	r2, r1
 8000eae:	63da      	str	r2, [r3, #60]	; 0x3c
 8000eb0:	4b32      	ldr	r3, [pc, #200]	; (8000f7c <HAL_UART_MspInit+0x1b4>)
 8000eb2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000eb4:	2380      	movs	r3, #128	; 0x80
 8000eb6:	02db      	lsls	r3, r3, #11
 8000eb8:	4013      	ands	r3, r2
 8000eba:	617b      	str	r3, [r7, #20]
 8000ebc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ebe:	4b2f      	ldr	r3, [pc, #188]	; (8000f7c <HAL_UART_MspInit+0x1b4>)
 8000ec0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000ec2:	4b2e      	ldr	r3, [pc, #184]	; (8000f7c <HAL_UART_MspInit+0x1b4>)
 8000ec4:	2102      	movs	r1, #2
 8000ec6:	430a      	orrs	r2, r1
 8000ec8:	635a      	str	r2, [r3, #52]	; 0x34
 8000eca:	4b2c      	ldr	r3, [pc, #176]	; (8000f7c <HAL_UART_MspInit+0x1b4>)
 8000ecc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ece:	2202      	movs	r2, #2
 8000ed0:	4013      	ands	r3, r2
 8000ed2:	613b      	str	r3, [r7, #16]
 8000ed4:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ASTRO_TX_Pin|ASTRO_RX_Pin;
 8000ed6:	216c      	movs	r1, #108	; 0x6c
 8000ed8:	187b      	adds	r3, r7, r1
 8000eda:	22c0      	movs	r2, #192	; 0xc0
 8000edc:	0092      	lsls	r2, r2, #2
 8000ede:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ee0:	187b      	adds	r3, r7, r1
 8000ee2:	2202      	movs	r2, #2
 8000ee4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee6:	187b      	adds	r3, r7, r1
 8000ee8:	2200      	movs	r2, #0
 8000eea:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eec:	187b      	adds	r3, r7, r1
 8000eee:	2200      	movs	r2, #0
 8000ef0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART3;
 8000ef2:	187b      	adds	r3, r7, r1
 8000ef4:	2204      	movs	r2, #4
 8000ef6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ef8:	187b      	adds	r3, r7, r1
 8000efa:	4a22      	ldr	r2, [pc, #136]	; (8000f84 <HAL_UART_MspInit+0x1bc>)
 8000efc:	0019      	movs	r1, r3
 8000efe:	0010      	movs	r0, r2
 8000f00:	f000 fa1c 	bl	800133c <HAL_GPIO_Init>
}
 8000f04:	e034      	b.n	8000f70 <HAL_UART_MspInit+0x1a8>
  else if(huart->Instance==USART5)
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	4a1f      	ldr	r2, [pc, #124]	; (8000f88 <HAL_UART_MspInit+0x1c0>)
 8000f0c:	4293      	cmp	r3, r2
 8000f0e:	d12f      	bne.n	8000f70 <HAL_UART_MspInit+0x1a8>
    __HAL_RCC_USART5_CLK_ENABLE();
 8000f10:	4b1a      	ldr	r3, [pc, #104]	; (8000f7c <HAL_UART_MspInit+0x1b4>)
 8000f12:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000f14:	4b19      	ldr	r3, [pc, #100]	; (8000f7c <HAL_UART_MspInit+0x1b4>)
 8000f16:	2180      	movs	r1, #128	; 0x80
 8000f18:	0049      	lsls	r1, r1, #1
 8000f1a:	430a      	orrs	r2, r1
 8000f1c:	63da      	str	r2, [r3, #60]	; 0x3c
 8000f1e:	4b17      	ldr	r3, [pc, #92]	; (8000f7c <HAL_UART_MspInit+0x1b4>)
 8000f20:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000f22:	2380      	movs	r3, #128	; 0x80
 8000f24:	005b      	lsls	r3, r3, #1
 8000f26:	4013      	ands	r3, r2
 8000f28:	60fb      	str	r3, [r7, #12]
 8000f2a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f2c:	4b13      	ldr	r3, [pc, #76]	; (8000f7c <HAL_UART_MspInit+0x1b4>)
 8000f2e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000f30:	4b12      	ldr	r3, [pc, #72]	; (8000f7c <HAL_UART_MspInit+0x1b4>)
 8000f32:	2102      	movs	r1, #2
 8000f34:	430a      	orrs	r2, r1
 8000f36:	635a      	str	r2, [r3, #52]	; 0x34
 8000f38:	4b10      	ldr	r3, [pc, #64]	; (8000f7c <HAL_UART_MspInit+0x1b4>)
 8000f3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f3c:	2202      	movs	r2, #2
 8000f3e:	4013      	ands	r3, r2
 8000f40:	60bb      	str	r3, [r7, #8]
 8000f42:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GNSS_TX_Pin|GNSS_RX_Pin;
 8000f44:	216c      	movs	r1, #108	; 0x6c
 8000f46:	187b      	adds	r3, r7, r1
 8000f48:	2218      	movs	r2, #24
 8000f4a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f4c:	187b      	adds	r3, r7, r1
 8000f4e:	2202      	movs	r2, #2
 8000f50:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f52:	187b      	adds	r3, r7, r1
 8000f54:	2200      	movs	r2, #0
 8000f56:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f58:	187b      	adds	r3, r7, r1
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF3_USART5;
 8000f5e:	187b      	adds	r3, r7, r1
 8000f60:	2203      	movs	r2, #3
 8000f62:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f64:	187b      	adds	r3, r7, r1
 8000f66:	4a07      	ldr	r2, [pc, #28]	; (8000f84 <HAL_UART_MspInit+0x1bc>)
 8000f68:	0019      	movs	r1, r3
 8000f6a:	0010      	movs	r0, r2
 8000f6c:	f000 f9e6 	bl	800133c <HAL_GPIO_Init>
}
 8000f70:	46c0      	nop			; (mov r8, r8)
 8000f72:	46bd      	mov	sp, r7
 8000f74:	b021      	add	sp, #132	; 0x84
 8000f76:	bd90      	pop	{r4, r7, pc}
 8000f78:	40004400 	.word	0x40004400
 8000f7c:	40021000 	.word	0x40021000
 8000f80:	40004800 	.word	0x40004800
 8000f84:	50000400 	.word	0x50000400
 8000f88:	40005000 	.word	0x40005000

08000f8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f90:	e7fe      	b.n	8000f90 <NMI_Handler+0x4>

08000f92 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f92:	b580      	push	{r7, lr}
 8000f94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f96:	e7fe      	b.n	8000f96 <HardFault_Handler+0x4>

08000f98 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000f9c:	46c0      	nop			; (mov r8, r8)
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bd80      	pop	{r7, pc}

08000fa2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fa2:	b580      	push	{r7, lr}
 8000fa4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fa6:	46c0      	nop			; (mov r8, r8)
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bd80      	pop	{r7, pc}

08000fac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fb0:	f000 f8b4 	bl	800111c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fb4:	46c0      	nop			; (mov r8, r8)
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}

08000fba <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and line 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 8000fba:	b580      	push	{r7, lr}
 8000fbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ACC_INT1_Pin);
 8000fbe:	2001      	movs	r0, #1
 8000fc0:	f000 fb46 	bl	8001650 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ACC_INT2_Pin);
 8000fc4:	2002      	movs	r0, #2
 8000fc6:	f000 fb43 	bl	8001650 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 8000fca:	46c0      	nop			; (mov r8, r8)
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bd80      	pop	{r7, pc}

08000fd0 <TIM6_DAC_LPTIM1_IRQHandler>:

/**
  * @brief This function handles TIM6, DAC and LPTIM1 global Interrupts.
  */
void TIM6_DAC_LPTIM1_IRQHandler(void)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_LPTIM1_IRQn 0 */

  /* USER CODE END TIM6_DAC_LPTIM1_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000fd4:	4b03      	ldr	r3, [pc, #12]	; (8000fe4 <TIM6_DAC_LPTIM1_IRQHandler+0x14>)
 8000fd6:	0018      	movs	r0, r3
 8000fd8:	f001 fc1a 	bl	8002810 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_LPTIM1_IRQn 1 */

  /* USER CODE END TIM6_DAC_LPTIM1_IRQn 1 */
}
 8000fdc:	46c0      	nop			; (mov r8, r8)
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	46c0      	nop			; (mov r8, r8)
 8000fe4:	20000090 	.word	0x20000090

08000fe8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fec:	46c0      	nop			; (mov r8, r8)
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}
	...

08000ff4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000ff4:	480d      	ldr	r0, [pc, #52]	; (800102c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000ff6:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000ff8:	f7ff fff6 	bl	8000fe8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ffc:	480c      	ldr	r0, [pc, #48]	; (8001030 <LoopForever+0x6>)
  ldr r1, =_edata
 8000ffe:	490d      	ldr	r1, [pc, #52]	; (8001034 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001000:	4a0d      	ldr	r2, [pc, #52]	; (8001038 <LoopForever+0xe>)
  movs r3, #0
 8001002:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001004:	e002      	b.n	800100c <LoopCopyDataInit>

08001006 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001006:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001008:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800100a:	3304      	adds	r3, #4

0800100c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800100c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800100e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001010:	d3f9      	bcc.n	8001006 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001012:	4a0a      	ldr	r2, [pc, #40]	; (800103c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001014:	4c0a      	ldr	r4, [pc, #40]	; (8001040 <LoopForever+0x16>)
  movs r3, #0
 8001016:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001018:	e001      	b.n	800101e <LoopFillZerobss>

0800101a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800101a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800101c:	3204      	adds	r2, #4

0800101e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800101e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001020:	d3fb      	bcc.n	800101a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001022:	f002 fe75 	bl	8003d10 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8001026:	f7ff fb01 	bl	800062c <main>

0800102a <LoopForever>:

LoopForever:
  b LoopForever
 800102a:	e7fe      	b.n	800102a <LoopForever>
  ldr   r0, =_estack
 800102c:	20024000 	.word	0x20024000
  ldr r0, =_sdata
 8001030:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001034:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001038:	08003eec 	.word	0x08003eec
  ldr r2, =_sbss
 800103c:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001040:	200002a0 	.word	0x200002a0

08001044 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001044:	e7fe      	b.n	8001044 <ADC1_COMP_IRQHandler>
	...

08001048 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b082      	sub	sp, #8
 800104c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800104e:	1dfb      	adds	r3, r7, #7
 8001050:	2200      	movs	r2, #0
 8001052:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001054:	4b0b      	ldr	r3, [pc, #44]	; (8001084 <HAL_Init+0x3c>)
 8001056:	681a      	ldr	r2, [r3, #0]
 8001058:	4b0a      	ldr	r3, [pc, #40]	; (8001084 <HAL_Init+0x3c>)
 800105a:	2180      	movs	r1, #128	; 0x80
 800105c:	0049      	lsls	r1, r1, #1
 800105e:	430a      	orrs	r2, r1
 8001060:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001062:	2000      	movs	r0, #0
 8001064:	f000 f810 	bl	8001088 <HAL_InitTick>
 8001068:	1e03      	subs	r3, r0, #0
 800106a:	d003      	beq.n	8001074 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 800106c:	1dfb      	adds	r3, r7, #7
 800106e:	2201      	movs	r2, #1
 8001070:	701a      	strb	r2, [r3, #0]
 8001072:	e001      	b.n	8001078 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8001074:	f7ff fdf0 	bl	8000c58 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001078:	1dfb      	adds	r3, r7, #7
 800107a:	781b      	ldrb	r3, [r3, #0]
}
 800107c:	0018      	movs	r0, r3
 800107e:	46bd      	mov	sp, r7
 8001080:	b002      	add	sp, #8
 8001082:	bd80      	pop	{r7, pc}
 8001084:	40022000 	.word	0x40022000

08001088 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001088:	b590      	push	{r4, r7, lr}
 800108a:	b085      	sub	sp, #20
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001090:	230f      	movs	r3, #15
 8001092:	18fb      	adds	r3, r7, r3
 8001094:	2200      	movs	r2, #0
 8001096:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8001098:	4b1d      	ldr	r3, [pc, #116]	; (8001110 <HAL_InitTick+0x88>)
 800109a:	781b      	ldrb	r3, [r3, #0]
 800109c:	2b00      	cmp	r3, #0
 800109e:	d02b      	beq.n	80010f8 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 80010a0:	4b1c      	ldr	r3, [pc, #112]	; (8001114 <HAL_InitTick+0x8c>)
 80010a2:	681c      	ldr	r4, [r3, #0]
 80010a4:	4b1a      	ldr	r3, [pc, #104]	; (8001110 <HAL_InitTick+0x88>)
 80010a6:	781b      	ldrb	r3, [r3, #0]
 80010a8:	0019      	movs	r1, r3
 80010aa:	23fa      	movs	r3, #250	; 0xfa
 80010ac:	0098      	lsls	r0, r3, #2
 80010ae:	f7ff f831 	bl	8000114 <__udivsi3>
 80010b2:	0003      	movs	r3, r0
 80010b4:	0019      	movs	r1, r3
 80010b6:	0020      	movs	r0, r4
 80010b8:	f7ff f82c 	bl	8000114 <__udivsi3>
 80010bc:	0003      	movs	r3, r0
 80010be:	0018      	movs	r0, r3
 80010c0:	f000 f92f 	bl	8001322 <HAL_SYSTICK_Config>
 80010c4:	1e03      	subs	r3, r0, #0
 80010c6:	d112      	bne.n	80010ee <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	2b03      	cmp	r3, #3
 80010cc:	d80a      	bhi.n	80010e4 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010ce:	6879      	ldr	r1, [r7, #4]
 80010d0:	2301      	movs	r3, #1
 80010d2:	425b      	negs	r3, r3
 80010d4:	2200      	movs	r2, #0
 80010d6:	0018      	movs	r0, r3
 80010d8:	f000 f8fa 	bl	80012d0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80010dc:	4b0e      	ldr	r3, [pc, #56]	; (8001118 <HAL_InitTick+0x90>)
 80010de:	687a      	ldr	r2, [r7, #4]
 80010e0:	601a      	str	r2, [r3, #0]
 80010e2:	e00d      	b.n	8001100 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 80010e4:	230f      	movs	r3, #15
 80010e6:	18fb      	adds	r3, r7, r3
 80010e8:	2201      	movs	r2, #1
 80010ea:	701a      	strb	r2, [r3, #0]
 80010ec:	e008      	b.n	8001100 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 80010ee:	230f      	movs	r3, #15
 80010f0:	18fb      	adds	r3, r7, r3
 80010f2:	2201      	movs	r2, #1
 80010f4:	701a      	strb	r2, [r3, #0]
 80010f6:	e003      	b.n	8001100 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80010f8:	230f      	movs	r3, #15
 80010fa:	18fb      	adds	r3, r7, r3
 80010fc:	2201      	movs	r2, #1
 80010fe:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8001100:	230f      	movs	r3, #15
 8001102:	18fb      	adds	r3, r7, r3
 8001104:	781b      	ldrb	r3, [r3, #0]
}
 8001106:	0018      	movs	r0, r3
 8001108:	46bd      	mov	sp, r7
 800110a:	b005      	add	sp, #20
 800110c:	bd90      	pop	{r4, r7, pc}
 800110e:	46c0      	nop			; (mov r8, r8)
 8001110:	2000000c 	.word	0x2000000c
 8001114:	20000004 	.word	0x20000004
 8001118:	20000008 	.word	0x20000008

0800111c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001120:	4b05      	ldr	r3, [pc, #20]	; (8001138 <HAL_IncTick+0x1c>)
 8001122:	781b      	ldrb	r3, [r3, #0]
 8001124:	001a      	movs	r2, r3
 8001126:	4b05      	ldr	r3, [pc, #20]	; (800113c <HAL_IncTick+0x20>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	18d2      	adds	r2, r2, r3
 800112c:	4b03      	ldr	r3, [pc, #12]	; (800113c <HAL_IncTick+0x20>)
 800112e:	601a      	str	r2, [r3, #0]
}
 8001130:	46c0      	nop			; (mov r8, r8)
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}
 8001136:	46c0      	nop			; (mov r8, r8)
 8001138:	2000000c 	.word	0x2000000c
 800113c:	2000029c 	.word	0x2000029c

08001140 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	af00      	add	r7, sp, #0
  return uwTick;
 8001144:	4b02      	ldr	r3, [pc, #8]	; (8001150 <HAL_GetTick+0x10>)
 8001146:	681b      	ldr	r3, [r3, #0]
}
 8001148:	0018      	movs	r0, r3
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}
 800114e:	46c0      	nop			; (mov r8, r8)
 8001150:	2000029c 	.word	0x2000029c

08001154 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b082      	sub	sp, #8
 8001158:	af00      	add	r7, sp, #0
 800115a:	0002      	movs	r2, r0
 800115c:	1dfb      	adds	r3, r7, #7
 800115e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001160:	1dfb      	adds	r3, r7, #7
 8001162:	781b      	ldrb	r3, [r3, #0]
 8001164:	2b7f      	cmp	r3, #127	; 0x7f
 8001166:	d809      	bhi.n	800117c <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001168:	1dfb      	adds	r3, r7, #7
 800116a:	781b      	ldrb	r3, [r3, #0]
 800116c:	001a      	movs	r2, r3
 800116e:	231f      	movs	r3, #31
 8001170:	401a      	ands	r2, r3
 8001172:	4b04      	ldr	r3, [pc, #16]	; (8001184 <__NVIC_EnableIRQ+0x30>)
 8001174:	2101      	movs	r1, #1
 8001176:	4091      	lsls	r1, r2
 8001178:	000a      	movs	r2, r1
 800117a:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 800117c:	46c0      	nop			; (mov r8, r8)
 800117e:	46bd      	mov	sp, r7
 8001180:	b002      	add	sp, #8
 8001182:	bd80      	pop	{r7, pc}
 8001184:	e000e100 	.word	0xe000e100

08001188 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001188:	b590      	push	{r4, r7, lr}
 800118a:	b083      	sub	sp, #12
 800118c:	af00      	add	r7, sp, #0
 800118e:	0002      	movs	r2, r0
 8001190:	6039      	str	r1, [r7, #0]
 8001192:	1dfb      	adds	r3, r7, #7
 8001194:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001196:	1dfb      	adds	r3, r7, #7
 8001198:	781b      	ldrb	r3, [r3, #0]
 800119a:	2b7f      	cmp	r3, #127	; 0x7f
 800119c:	d828      	bhi.n	80011f0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800119e:	4a2f      	ldr	r2, [pc, #188]	; (800125c <__NVIC_SetPriority+0xd4>)
 80011a0:	1dfb      	adds	r3, r7, #7
 80011a2:	781b      	ldrb	r3, [r3, #0]
 80011a4:	b25b      	sxtb	r3, r3
 80011a6:	089b      	lsrs	r3, r3, #2
 80011a8:	33c0      	adds	r3, #192	; 0xc0
 80011aa:	009b      	lsls	r3, r3, #2
 80011ac:	589b      	ldr	r3, [r3, r2]
 80011ae:	1dfa      	adds	r2, r7, #7
 80011b0:	7812      	ldrb	r2, [r2, #0]
 80011b2:	0011      	movs	r1, r2
 80011b4:	2203      	movs	r2, #3
 80011b6:	400a      	ands	r2, r1
 80011b8:	00d2      	lsls	r2, r2, #3
 80011ba:	21ff      	movs	r1, #255	; 0xff
 80011bc:	4091      	lsls	r1, r2
 80011be:	000a      	movs	r2, r1
 80011c0:	43d2      	mvns	r2, r2
 80011c2:	401a      	ands	r2, r3
 80011c4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80011c6:	683b      	ldr	r3, [r7, #0]
 80011c8:	019b      	lsls	r3, r3, #6
 80011ca:	22ff      	movs	r2, #255	; 0xff
 80011cc:	401a      	ands	r2, r3
 80011ce:	1dfb      	adds	r3, r7, #7
 80011d0:	781b      	ldrb	r3, [r3, #0]
 80011d2:	0018      	movs	r0, r3
 80011d4:	2303      	movs	r3, #3
 80011d6:	4003      	ands	r3, r0
 80011d8:	00db      	lsls	r3, r3, #3
 80011da:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80011dc:	481f      	ldr	r0, [pc, #124]	; (800125c <__NVIC_SetPriority+0xd4>)
 80011de:	1dfb      	adds	r3, r7, #7
 80011e0:	781b      	ldrb	r3, [r3, #0]
 80011e2:	b25b      	sxtb	r3, r3
 80011e4:	089b      	lsrs	r3, r3, #2
 80011e6:	430a      	orrs	r2, r1
 80011e8:	33c0      	adds	r3, #192	; 0xc0
 80011ea:	009b      	lsls	r3, r3, #2
 80011ec:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80011ee:	e031      	b.n	8001254 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80011f0:	4a1b      	ldr	r2, [pc, #108]	; (8001260 <__NVIC_SetPriority+0xd8>)
 80011f2:	1dfb      	adds	r3, r7, #7
 80011f4:	781b      	ldrb	r3, [r3, #0]
 80011f6:	0019      	movs	r1, r3
 80011f8:	230f      	movs	r3, #15
 80011fa:	400b      	ands	r3, r1
 80011fc:	3b08      	subs	r3, #8
 80011fe:	089b      	lsrs	r3, r3, #2
 8001200:	3306      	adds	r3, #6
 8001202:	009b      	lsls	r3, r3, #2
 8001204:	18d3      	adds	r3, r2, r3
 8001206:	3304      	adds	r3, #4
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	1dfa      	adds	r2, r7, #7
 800120c:	7812      	ldrb	r2, [r2, #0]
 800120e:	0011      	movs	r1, r2
 8001210:	2203      	movs	r2, #3
 8001212:	400a      	ands	r2, r1
 8001214:	00d2      	lsls	r2, r2, #3
 8001216:	21ff      	movs	r1, #255	; 0xff
 8001218:	4091      	lsls	r1, r2
 800121a:	000a      	movs	r2, r1
 800121c:	43d2      	mvns	r2, r2
 800121e:	401a      	ands	r2, r3
 8001220:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001222:	683b      	ldr	r3, [r7, #0]
 8001224:	019b      	lsls	r3, r3, #6
 8001226:	22ff      	movs	r2, #255	; 0xff
 8001228:	401a      	ands	r2, r3
 800122a:	1dfb      	adds	r3, r7, #7
 800122c:	781b      	ldrb	r3, [r3, #0]
 800122e:	0018      	movs	r0, r3
 8001230:	2303      	movs	r3, #3
 8001232:	4003      	ands	r3, r0
 8001234:	00db      	lsls	r3, r3, #3
 8001236:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001238:	4809      	ldr	r0, [pc, #36]	; (8001260 <__NVIC_SetPriority+0xd8>)
 800123a:	1dfb      	adds	r3, r7, #7
 800123c:	781b      	ldrb	r3, [r3, #0]
 800123e:	001c      	movs	r4, r3
 8001240:	230f      	movs	r3, #15
 8001242:	4023      	ands	r3, r4
 8001244:	3b08      	subs	r3, #8
 8001246:	089b      	lsrs	r3, r3, #2
 8001248:	430a      	orrs	r2, r1
 800124a:	3306      	adds	r3, #6
 800124c:	009b      	lsls	r3, r3, #2
 800124e:	18c3      	adds	r3, r0, r3
 8001250:	3304      	adds	r3, #4
 8001252:	601a      	str	r2, [r3, #0]
}
 8001254:	46c0      	nop			; (mov r8, r8)
 8001256:	46bd      	mov	sp, r7
 8001258:	b003      	add	sp, #12
 800125a:	bd90      	pop	{r4, r7, pc}
 800125c:	e000e100 	.word	0xe000e100
 8001260:	e000ed00 	.word	0xe000ed00

08001264 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001268:	f3bf 8f4f 	dsb	sy
}
 800126c:	46c0      	nop			; (mov r8, r8)
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800126e:	4b04      	ldr	r3, [pc, #16]	; (8001280 <__NVIC_SystemReset+0x1c>)
 8001270:	4a04      	ldr	r2, [pc, #16]	; (8001284 <__NVIC_SystemReset+0x20>)
 8001272:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8001274:	f3bf 8f4f 	dsb	sy
}
 8001278:	46c0      	nop			; (mov r8, r8)
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800127a:	46c0      	nop			; (mov r8, r8)
 800127c:	e7fd      	b.n	800127a <__NVIC_SystemReset+0x16>
 800127e:	46c0      	nop			; (mov r8, r8)
 8001280:	e000ed00 	.word	0xe000ed00
 8001284:	05fa0004 	.word	0x05fa0004

08001288 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b082      	sub	sp, #8
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	1e5a      	subs	r2, r3, #1
 8001294:	2380      	movs	r3, #128	; 0x80
 8001296:	045b      	lsls	r3, r3, #17
 8001298:	429a      	cmp	r2, r3
 800129a:	d301      	bcc.n	80012a0 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800129c:	2301      	movs	r3, #1
 800129e:	e010      	b.n	80012c2 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012a0:	4b0a      	ldr	r3, [pc, #40]	; (80012cc <SysTick_Config+0x44>)
 80012a2:	687a      	ldr	r2, [r7, #4]
 80012a4:	3a01      	subs	r2, #1
 80012a6:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012a8:	2301      	movs	r3, #1
 80012aa:	425b      	negs	r3, r3
 80012ac:	2103      	movs	r1, #3
 80012ae:	0018      	movs	r0, r3
 80012b0:	f7ff ff6a 	bl	8001188 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012b4:	4b05      	ldr	r3, [pc, #20]	; (80012cc <SysTick_Config+0x44>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012ba:	4b04      	ldr	r3, [pc, #16]	; (80012cc <SysTick_Config+0x44>)
 80012bc:	2207      	movs	r2, #7
 80012be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012c0:	2300      	movs	r3, #0
}
 80012c2:	0018      	movs	r0, r3
 80012c4:	46bd      	mov	sp, r7
 80012c6:	b002      	add	sp, #8
 80012c8:	bd80      	pop	{r7, pc}
 80012ca:	46c0      	nop			; (mov r8, r8)
 80012cc:	e000e010 	.word	0xe000e010

080012d0 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b084      	sub	sp, #16
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	60b9      	str	r1, [r7, #8]
 80012d8:	607a      	str	r2, [r7, #4]
 80012da:	210f      	movs	r1, #15
 80012dc:	187b      	adds	r3, r7, r1
 80012de:	1c02      	adds	r2, r0, #0
 80012e0:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 80012e2:	68ba      	ldr	r2, [r7, #8]
 80012e4:	187b      	adds	r3, r7, r1
 80012e6:	781b      	ldrb	r3, [r3, #0]
 80012e8:	b25b      	sxtb	r3, r3
 80012ea:	0011      	movs	r1, r2
 80012ec:	0018      	movs	r0, r3
 80012ee:	f7ff ff4b 	bl	8001188 <__NVIC_SetPriority>
}
 80012f2:	46c0      	nop			; (mov r8, r8)
 80012f4:	46bd      	mov	sp, r7
 80012f6:	b004      	add	sp, #16
 80012f8:	bd80      	pop	{r7, pc}

080012fa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012fa:	b580      	push	{r7, lr}
 80012fc:	b082      	sub	sp, #8
 80012fe:	af00      	add	r7, sp, #0
 8001300:	0002      	movs	r2, r0
 8001302:	1dfb      	adds	r3, r7, #7
 8001304:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001306:	1dfb      	adds	r3, r7, #7
 8001308:	781b      	ldrb	r3, [r3, #0]
 800130a:	b25b      	sxtb	r3, r3
 800130c:	0018      	movs	r0, r3
 800130e:	f7ff ff21 	bl	8001154 <__NVIC_EnableIRQ>
}
 8001312:	46c0      	nop			; (mov r8, r8)
 8001314:	46bd      	mov	sp, r7
 8001316:	b002      	add	sp, #8
 8001318:	bd80      	pop	{r7, pc}

0800131a <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiate a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 800131a:	b580      	push	{r7, lr}
 800131c:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 800131e:	f7ff ffa1 	bl	8001264 <__NVIC_SystemReset>

08001322 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001322:	b580      	push	{r7, lr}
 8001324:	b082      	sub	sp, #8
 8001326:	af00      	add	r7, sp, #0
 8001328:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	0018      	movs	r0, r3
 800132e:	f7ff ffab 	bl	8001288 <SysTick_Config>
 8001332:	0003      	movs	r3, r0
}
 8001334:	0018      	movs	r0, r3
 8001336:	46bd      	mov	sp, r7
 8001338:	b002      	add	sp, #8
 800133a:	bd80      	pop	{r7, pc}

0800133c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b086      	sub	sp, #24
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
 8001344:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001346:	2300      	movs	r3, #0
 8001348:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800134a:	e14d      	b.n	80015e8 <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800134c:	683b      	ldr	r3, [r7, #0]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	2101      	movs	r1, #1
 8001352:	697a      	ldr	r2, [r7, #20]
 8001354:	4091      	lsls	r1, r2
 8001356:	000a      	movs	r2, r1
 8001358:	4013      	ands	r3, r2
 800135a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	2b00      	cmp	r3, #0
 8001360:	d100      	bne.n	8001364 <HAL_GPIO_Init+0x28>
 8001362:	e13e      	b.n	80015e2 <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	685b      	ldr	r3, [r3, #4]
 8001368:	2203      	movs	r2, #3
 800136a:	4013      	ands	r3, r2
 800136c:	2b01      	cmp	r3, #1
 800136e:	d005      	beq.n	800137c <HAL_GPIO_Init+0x40>
 8001370:	683b      	ldr	r3, [r7, #0]
 8001372:	685b      	ldr	r3, [r3, #4]
 8001374:	2203      	movs	r2, #3
 8001376:	4013      	ands	r3, r2
 8001378:	2b02      	cmp	r3, #2
 800137a:	d130      	bne.n	80013de <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	689b      	ldr	r3, [r3, #8]
 8001380:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001382:	697b      	ldr	r3, [r7, #20]
 8001384:	005b      	lsls	r3, r3, #1
 8001386:	2203      	movs	r2, #3
 8001388:	409a      	lsls	r2, r3
 800138a:	0013      	movs	r3, r2
 800138c:	43da      	mvns	r2, r3
 800138e:	693b      	ldr	r3, [r7, #16]
 8001390:	4013      	ands	r3, r2
 8001392:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001394:	683b      	ldr	r3, [r7, #0]
 8001396:	68da      	ldr	r2, [r3, #12]
 8001398:	697b      	ldr	r3, [r7, #20]
 800139a:	005b      	lsls	r3, r3, #1
 800139c:	409a      	lsls	r2, r3
 800139e:	0013      	movs	r3, r2
 80013a0:	693a      	ldr	r2, [r7, #16]
 80013a2:	4313      	orrs	r3, r2
 80013a4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	693a      	ldr	r2, [r7, #16]
 80013aa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	685b      	ldr	r3, [r3, #4]
 80013b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80013b2:	2201      	movs	r2, #1
 80013b4:	697b      	ldr	r3, [r7, #20]
 80013b6:	409a      	lsls	r2, r3
 80013b8:	0013      	movs	r3, r2
 80013ba:	43da      	mvns	r2, r3
 80013bc:	693b      	ldr	r3, [r7, #16]
 80013be:	4013      	ands	r3, r2
 80013c0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80013c2:	683b      	ldr	r3, [r7, #0]
 80013c4:	685b      	ldr	r3, [r3, #4]
 80013c6:	091b      	lsrs	r3, r3, #4
 80013c8:	2201      	movs	r2, #1
 80013ca:	401a      	ands	r2, r3
 80013cc:	697b      	ldr	r3, [r7, #20]
 80013ce:	409a      	lsls	r2, r3
 80013d0:	0013      	movs	r3, r2
 80013d2:	693a      	ldr	r2, [r7, #16]
 80013d4:	4313      	orrs	r3, r2
 80013d6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	693a      	ldr	r2, [r7, #16]
 80013dc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80013de:	683b      	ldr	r3, [r7, #0]
 80013e0:	685b      	ldr	r3, [r3, #4]
 80013e2:	2203      	movs	r2, #3
 80013e4:	4013      	ands	r3, r2
 80013e6:	2b03      	cmp	r3, #3
 80013e8:	d017      	beq.n	800141a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	68db      	ldr	r3, [r3, #12]
 80013ee:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80013f0:	697b      	ldr	r3, [r7, #20]
 80013f2:	005b      	lsls	r3, r3, #1
 80013f4:	2203      	movs	r2, #3
 80013f6:	409a      	lsls	r2, r3
 80013f8:	0013      	movs	r3, r2
 80013fa:	43da      	mvns	r2, r3
 80013fc:	693b      	ldr	r3, [r7, #16]
 80013fe:	4013      	ands	r3, r2
 8001400:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001402:	683b      	ldr	r3, [r7, #0]
 8001404:	689a      	ldr	r2, [r3, #8]
 8001406:	697b      	ldr	r3, [r7, #20]
 8001408:	005b      	lsls	r3, r3, #1
 800140a:	409a      	lsls	r2, r3
 800140c:	0013      	movs	r3, r2
 800140e:	693a      	ldr	r2, [r7, #16]
 8001410:	4313      	orrs	r3, r2
 8001412:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	693a      	ldr	r2, [r7, #16]
 8001418:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800141a:	683b      	ldr	r3, [r7, #0]
 800141c:	685b      	ldr	r3, [r3, #4]
 800141e:	2203      	movs	r2, #3
 8001420:	4013      	ands	r3, r2
 8001422:	2b02      	cmp	r3, #2
 8001424:	d123      	bne.n	800146e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001426:	697b      	ldr	r3, [r7, #20]
 8001428:	08da      	lsrs	r2, r3, #3
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	3208      	adds	r2, #8
 800142e:	0092      	lsls	r2, r2, #2
 8001430:	58d3      	ldr	r3, [r2, r3]
 8001432:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001434:	697b      	ldr	r3, [r7, #20]
 8001436:	2207      	movs	r2, #7
 8001438:	4013      	ands	r3, r2
 800143a:	009b      	lsls	r3, r3, #2
 800143c:	220f      	movs	r2, #15
 800143e:	409a      	lsls	r2, r3
 8001440:	0013      	movs	r3, r2
 8001442:	43da      	mvns	r2, r3
 8001444:	693b      	ldr	r3, [r7, #16]
 8001446:	4013      	ands	r3, r2
 8001448:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800144a:	683b      	ldr	r3, [r7, #0]
 800144c:	691a      	ldr	r2, [r3, #16]
 800144e:	697b      	ldr	r3, [r7, #20]
 8001450:	2107      	movs	r1, #7
 8001452:	400b      	ands	r3, r1
 8001454:	009b      	lsls	r3, r3, #2
 8001456:	409a      	lsls	r2, r3
 8001458:	0013      	movs	r3, r2
 800145a:	693a      	ldr	r2, [r7, #16]
 800145c:	4313      	orrs	r3, r2
 800145e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001460:	697b      	ldr	r3, [r7, #20]
 8001462:	08da      	lsrs	r2, r3, #3
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	3208      	adds	r2, #8
 8001468:	0092      	lsls	r2, r2, #2
 800146a:	6939      	ldr	r1, [r7, #16]
 800146c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001474:	697b      	ldr	r3, [r7, #20]
 8001476:	005b      	lsls	r3, r3, #1
 8001478:	2203      	movs	r2, #3
 800147a:	409a      	lsls	r2, r3
 800147c:	0013      	movs	r3, r2
 800147e:	43da      	mvns	r2, r3
 8001480:	693b      	ldr	r3, [r7, #16]
 8001482:	4013      	ands	r3, r2
 8001484:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	685b      	ldr	r3, [r3, #4]
 800148a:	2203      	movs	r2, #3
 800148c:	401a      	ands	r2, r3
 800148e:	697b      	ldr	r3, [r7, #20]
 8001490:	005b      	lsls	r3, r3, #1
 8001492:	409a      	lsls	r2, r3
 8001494:	0013      	movs	r3, r2
 8001496:	693a      	ldr	r2, [r7, #16]
 8001498:	4313      	orrs	r3, r2
 800149a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	693a      	ldr	r2, [r7, #16]
 80014a0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80014a2:	683b      	ldr	r3, [r7, #0]
 80014a4:	685a      	ldr	r2, [r3, #4]
 80014a6:	23c0      	movs	r3, #192	; 0xc0
 80014a8:	029b      	lsls	r3, r3, #10
 80014aa:	4013      	ands	r3, r2
 80014ac:	d100      	bne.n	80014b0 <HAL_GPIO_Init+0x174>
 80014ae:	e098      	b.n	80015e2 <HAL_GPIO_Init+0x2a6>
      {
        temp = EXTI->EXTICR[position >> 2u];
 80014b0:	4a53      	ldr	r2, [pc, #332]	; (8001600 <HAL_GPIO_Init+0x2c4>)
 80014b2:	697b      	ldr	r3, [r7, #20]
 80014b4:	089b      	lsrs	r3, r3, #2
 80014b6:	3318      	adds	r3, #24
 80014b8:	009b      	lsls	r3, r3, #2
 80014ba:	589b      	ldr	r3, [r3, r2]
 80014bc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80014be:	697b      	ldr	r3, [r7, #20]
 80014c0:	2203      	movs	r2, #3
 80014c2:	4013      	ands	r3, r2
 80014c4:	00db      	lsls	r3, r3, #3
 80014c6:	220f      	movs	r2, #15
 80014c8:	409a      	lsls	r2, r3
 80014ca:	0013      	movs	r3, r2
 80014cc:	43da      	mvns	r2, r3
 80014ce:	693b      	ldr	r3, [r7, #16]
 80014d0:	4013      	ands	r3, r2
 80014d2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80014d4:	687a      	ldr	r2, [r7, #4]
 80014d6:	23a0      	movs	r3, #160	; 0xa0
 80014d8:	05db      	lsls	r3, r3, #23
 80014da:	429a      	cmp	r2, r3
 80014dc:	d019      	beq.n	8001512 <HAL_GPIO_Init+0x1d6>
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	4a48      	ldr	r2, [pc, #288]	; (8001604 <HAL_GPIO_Init+0x2c8>)
 80014e2:	4293      	cmp	r3, r2
 80014e4:	d013      	beq.n	800150e <HAL_GPIO_Init+0x1d2>
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	4a47      	ldr	r2, [pc, #284]	; (8001608 <HAL_GPIO_Init+0x2cc>)
 80014ea:	4293      	cmp	r3, r2
 80014ec:	d00d      	beq.n	800150a <HAL_GPIO_Init+0x1ce>
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	4a46      	ldr	r2, [pc, #280]	; (800160c <HAL_GPIO_Init+0x2d0>)
 80014f2:	4293      	cmp	r3, r2
 80014f4:	d007      	beq.n	8001506 <HAL_GPIO_Init+0x1ca>
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	4a45      	ldr	r2, [pc, #276]	; (8001610 <HAL_GPIO_Init+0x2d4>)
 80014fa:	4293      	cmp	r3, r2
 80014fc:	d101      	bne.n	8001502 <HAL_GPIO_Init+0x1c6>
 80014fe:	2304      	movs	r3, #4
 8001500:	e008      	b.n	8001514 <HAL_GPIO_Init+0x1d8>
 8001502:	2305      	movs	r3, #5
 8001504:	e006      	b.n	8001514 <HAL_GPIO_Init+0x1d8>
 8001506:	2303      	movs	r3, #3
 8001508:	e004      	b.n	8001514 <HAL_GPIO_Init+0x1d8>
 800150a:	2302      	movs	r3, #2
 800150c:	e002      	b.n	8001514 <HAL_GPIO_Init+0x1d8>
 800150e:	2301      	movs	r3, #1
 8001510:	e000      	b.n	8001514 <HAL_GPIO_Init+0x1d8>
 8001512:	2300      	movs	r3, #0
 8001514:	697a      	ldr	r2, [r7, #20]
 8001516:	2103      	movs	r1, #3
 8001518:	400a      	ands	r2, r1
 800151a:	00d2      	lsls	r2, r2, #3
 800151c:	4093      	lsls	r3, r2
 800151e:	693a      	ldr	r2, [r7, #16]
 8001520:	4313      	orrs	r3, r2
 8001522:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8001524:	4936      	ldr	r1, [pc, #216]	; (8001600 <HAL_GPIO_Init+0x2c4>)
 8001526:	697b      	ldr	r3, [r7, #20]
 8001528:	089b      	lsrs	r3, r3, #2
 800152a:	3318      	adds	r3, #24
 800152c:	009b      	lsls	r3, r3, #2
 800152e:	693a      	ldr	r2, [r7, #16]
 8001530:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001532:	4b33      	ldr	r3, [pc, #204]	; (8001600 <HAL_GPIO_Init+0x2c4>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	43da      	mvns	r2, r3
 800153c:	693b      	ldr	r3, [r7, #16]
 800153e:	4013      	ands	r3, r2
 8001540:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	685a      	ldr	r2, [r3, #4]
 8001546:	2380      	movs	r3, #128	; 0x80
 8001548:	035b      	lsls	r3, r3, #13
 800154a:	4013      	ands	r3, r2
 800154c:	d003      	beq.n	8001556 <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 800154e:	693a      	ldr	r2, [r7, #16]
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	4313      	orrs	r3, r2
 8001554:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001556:	4b2a      	ldr	r3, [pc, #168]	; (8001600 <HAL_GPIO_Init+0x2c4>)
 8001558:	693a      	ldr	r2, [r7, #16]
 800155a:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 800155c:	4b28      	ldr	r3, [pc, #160]	; (8001600 <HAL_GPIO_Init+0x2c4>)
 800155e:	685b      	ldr	r3, [r3, #4]
 8001560:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	43da      	mvns	r2, r3
 8001566:	693b      	ldr	r3, [r7, #16]
 8001568:	4013      	ands	r3, r2
 800156a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800156c:	683b      	ldr	r3, [r7, #0]
 800156e:	685a      	ldr	r2, [r3, #4]
 8001570:	2380      	movs	r3, #128	; 0x80
 8001572:	039b      	lsls	r3, r3, #14
 8001574:	4013      	ands	r3, r2
 8001576:	d003      	beq.n	8001580 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 8001578:	693a      	ldr	r2, [r7, #16]
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	4313      	orrs	r3, r2
 800157e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001580:	4b1f      	ldr	r3, [pc, #124]	; (8001600 <HAL_GPIO_Init+0x2c4>)
 8001582:	693a      	ldr	r2, [r7, #16]
 8001584:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001586:	4a1e      	ldr	r2, [pc, #120]	; (8001600 <HAL_GPIO_Init+0x2c4>)
 8001588:	2384      	movs	r3, #132	; 0x84
 800158a:	58d3      	ldr	r3, [r2, r3]
 800158c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	43da      	mvns	r2, r3
 8001592:	693b      	ldr	r3, [r7, #16]
 8001594:	4013      	ands	r3, r2
 8001596:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001598:	683b      	ldr	r3, [r7, #0]
 800159a:	685a      	ldr	r2, [r3, #4]
 800159c:	2380      	movs	r3, #128	; 0x80
 800159e:	029b      	lsls	r3, r3, #10
 80015a0:	4013      	ands	r3, r2
 80015a2:	d003      	beq.n	80015ac <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80015a4:	693a      	ldr	r2, [r7, #16]
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	4313      	orrs	r3, r2
 80015aa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80015ac:	4914      	ldr	r1, [pc, #80]	; (8001600 <HAL_GPIO_Init+0x2c4>)
 80015ae:	2284      	movs	r2, #132	; 0x84
 80015b0:	693b      	ldr	r3, [r7, #16]
 80015b2:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 80015b4:	4a12      	ldr	r2, [pc, #72]	; (8001600 <HAL_GPIO_Init+0x2c4>)
 80015b6:	2380      	movs	r3, #128	; 0x80
 80015b8:	58d3      	ldr	r3, [r2, r3]
 80015ba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	43da      	mvns	r2, r3
 80015c0:	693b      	ldr	r3, [r7, #16]
 80015c2:	4013      	ands	r3, r2
 80015c4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80015c6:	683b      	ldr	r3, [r7, #0]
 80015c8:	685a      	ldr	r2, [r3, #4]
 80015ca:	2380      	movs	r3, #128	; 0x80
 80015cc:	025b      	lsls	r3, r3, #9
 80015ce:	4013      	ands	r3, r2
 80015d0:	d003      	beq.n	80015da <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 80015d2:	693a      	ldr	r2, [r7, #16]
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	4313      	orrs	r3, r2
 80015d8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80015da:	4909      	ldr	r1, [pc, #36]	; (8001600 <HAL_GPIO_Init+0x2c4>)
 80015dc:	2280      	movs	r2, #128	; 0x80
 80015de:	693b      	ldr	r3, [r7, #16]
 80015e0:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 80015e2:	697b      	ldr	r3, [r7, #20]
 80015e4:	3301      	adds	r3, #1
 80015e6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015e8:	683b      	ldr	r3, [r7, #0]
 80015ea:	681a      	ldr	r2, [r3, #0]
 80015ec:	697b      	ldr	r3, [r7, #20]
 80015ee:	40da      	lsrs	r2, r3
 80015f0:	1e13      	subs	r3, r2, #0
 80015f2:	d000      	beq.n	80015f6 <HAL_GPIO_Init+0x2ba>
 80015f4:	e6aa      	b.n	800134c <HAL_GPIO_Init+0x10>
  }
}
 80015f6:	46c0      	nop			; (mov r8, r8)
 80015f8:	46c0      	nop			; (mov r8, r8)
 80015fa:	46bd      	mov	sp, r7
 80015fc:	b006      	add	sp, #24
 80015fe:	bd80      	pop	{r7, pc}
 8001600:	40021800 	.word	0x40021800
 8001604:	50000400 	.word	0x50000400
 8001608:	50000800 	.word	0x50000800
 800160c:	50000c00 	.word	0x50000c00
 8001610:	50001000 	.word	0x50001000

08001614 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b082      	sub	sp, #8
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
 800161c:	0008      	movs	r0, r1
 800161e:	0011      	movs	r1, r2
 8001620:	1cbb      	adds	r3, r7, #2
 8001622:	1c02      	adds	r2, r0, #0
 8001624:	801a      	strh	r2, [r3, #0]
 8001626:	1c7b      	adds	r3, r7, #1
 8001628:	1c0a      	adds	r2, r1, #0
 800162a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800162c:	1c7b      	adds	r3, r7, #1
 800162e:	781b      	ldrb	r3, [r3, #0]
 8001630:	2b00      	cmp	r3, #0
 8001632:	d004      	beq.n	800163e <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001634:	1cbb      	adds	r3, r7, #2
 8001636:	881a      	ldrh	r2, [r3, #0]
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800163c:	e003      	b.n	8001646 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800163e:	1cbb      	adds	r3, r7, #2
 8001640:	881a      	ldrh	r2, [r3, #0]
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001646:	46c0      	nop			; (mov r8, r8)
 8001648:	46bd      	mov	sp, r7
 800164a:	b002      	add	sp, #8
 800164c:	bd80      	pop	{r7, pc}
	...

08001650 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b082      	sub	sp, #8
 8001654:	af00      	add	r7, sp, #0
 8001656:	0002      	movs	r2, r0
 8001658:	1dbb      	adds	r3, r7, #6
 800165a:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 800165c:	4b10      	ldr	r3, [pc, #64]	; (80016a0 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 800165e:	68db      	ldr	r3, [r3, #12]
 8001660:	1dba      	adds	r2, r7, #6
 8001662:	8812      	ldrh	r2, [r2, #0]
 8001664:	4013      	ands	r3, r2
 8001666:	d008      	beq.n	800167a <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8001668:	4b0d      	ldr	r3, [pc, #52]	; (80016a0 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 800166a:	1dba      	adds	r2, r7, #6
 800166c:	8812      	ldrh	r2, [r2, #0]
 800166e:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8001670:	1dbb      	adds	r3, r7, #6
 8001672:	881b      	ldrh	r3, [r3, #0]
 8001674:	0018      	movs	r0, r3
 8001676:	f000 f815 	bl	80016a4 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 800167a:	4b09      	ldr	r3, [pc, #36]	; (80016a0 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 800167c:	691b      	ldr	r3, [r3, #16]
 800167e:	1dba      	adds	r2, r7, #6
 8001680:	8812      	ldrh	r2, [r2, #0]
 8001682:	4013      	ands	r3, r2
 8001684:	d008      	beq.n	8001698 <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8001686:	4b06      	ldr	r3, [pc, #24]	; (80016a0 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8001688:	1dba      	adds	r2, r7, #6
 800168a:	8812      	ldrh	r2, [r2, #0]
 800168c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 800168e:	1dbb      	adds	r3, r7, #6
 8001690:	881b      	ldrh	r3, [r3, #0]
 8001692:	0018      	movs	r0, r3
 8001694:	f000 f810 	bl	80016b8 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8001698:	46c0      	nop			; (mov r8, r8)
 800169a:	46bd      	mov	sp, r7
 800169c:	b002      	add	sp, #8
 800169e:	bd80      	pop	{r7, pc}
 80016a0:	40021800 	.word	0x40021800

080016a4 <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b082      	sub	sp, #8
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	0002      	movs	r2, r0
 80016ac:	1dbb      	adds	r3, r7, #6
 80016ae:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 80016b0:	46c0      	nop			; (mov r8, r8)
 80016b2:	46bd      	mov	sp, r7
 80016b4:	b002      	add	sp, #8
 80016b6:	bd80      	pop	{r7, pc}

080016b8 <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b082      	sub	sp, #8
 80016bc:	af00      	add	r7, sp, #0
 80016be:	0002      	movs	r2, r0
 80016c0:	1dbb      	adds	r3, r7, #6
 80016c2:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 80016c4:	46c0      	nop			; (mov r8, r8)
 80016c6:	46bd      	mov	sp, r7
 80016c8:	b002      	add	sp, #8
 80016ca:	bd80      	pop	{r7, pc}

080016cc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b084      	sub	sp, #16
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80016d4:	4b19      	ldr	r3, [pc, #100]	; (800173c <HAL_PWREx_ControlVoltageScaling+0x70>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	4a19      	ldr	r2, [pc, #100]	; (8001740 <HAL_PWREx_ControlVoltageScaling+0x74>)
 80016da:	4013      	ands	r3, r2
 80016dc:	0019      	movs	r1, r3
 80016de:	4b17      	ldr	r3, [pc, #92]	; (800173c <HAL_PWREx_ControlVoltageScaling+0x70>)
 80016e0:	687a      	ldr	r2, [r7, #4]
 80016e2:	430a      	orrs	r2, r1
 80016e4:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80016e6:	687a      	ldr	r2, [r7, #4]
 80016e8:	2380      	movs	r3, #128	; 0x80
 80016ea:	009b      	lsls	r3, r3, #2
 80016ec:	429a      	cmp	r2, r3
 80016ee:	d11f      	bne.n	8001730 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 80016f0:	4b14      	ldr	r3, [pc, #80]	; (8001744 <HAL_PWREx_ControlVoltageScaling+0x78>)
 80016f2:	681a      	ldr	r2, [r3, #0]
 80016f4:	0013      	movs	r3, r2
 80016f6:	005b      	lsls	r3, r3, #1
 80016f8:	189b      	adds	r3, r3, r2
 80016fa:	005b      	lsls	r3, r3, #1
 80016fc:	4912      	ldr	r1, [pc, #72]	; (8001748 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 80016fe:	0018      	movs	r0, r3
 8001700:	f7fe fd08 	bl	8000114 <__udivsi3>
 8001704:	0003      	movs	r3, r0
 8001706:	3301      	adds	r3, #1
 8001708:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800170a:	e008      	b.n	800171e <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	2b00      	cmp	r3, #0
 8001710:	d003      	beq.n	800171a <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	3b01      	subs	r3, #1
 8001716:	60fb      	str	r3, [r7, #12]
 8001718:	e001      	b.n	800171e <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 800171a:	2303      	movs	r3, #3
 800171c:	e009      	b.n	8001732 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800171e:	4b07      	ldr	r3, [pc, #28]	; (800173c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001720:	695a      	ldr	r2, [r3, #20]
 8001722:	2380      	movs	r3, #128	; 0x80
 8001724:	00db      	lsls	r3, r3, #3
 8001726:	401a      	ands	r2, r3
 8001728:	2380      	movs	r3, #128	; 0x80
 800172a:	00db      	lsls	r3, r3, #3
 800172c:	429a      	cmp	r2, r3
 800172e:	d0ed      	beq.n	800170c <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8001730:	2300      	movs	r3, #0
}
 8001732:	0018      	movs	r0, r3
 8001734:	46bd      	mov	sp, r7
 8001736:	b004      	add	sp, #16
 8001738:	bd80      	pop	{r7, pc}
 800173a:	46c0      	nop			; (mov r8, r8)
 800173c:	40007000 	.word	0x40007000
 8001740:	fffff9ff 	.word	0xfffff9ff
 8001744:	20000004 	.word	0x20000004
 8001748:	000f4240 	.word	0x000f4240

0800174c <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8001750:	4b03      	ldr	r3, [pc, #12]	; (8001760 <LL_RCC_GetAPB1Prescaler+0x14>)
 8001752:	689a      	ldr	r2, [r3, #8]
 8001754:	23e0      	movs	r3, #224	; 0xe0
 8001756:	01db      	lsls	r3, r3, #7
 8001758:	4013      	ands	r3, r2
}
 800175a:	0018      	movs	r0, r3
 800175c:	46bd      	mov	sp, r7
 800175e:	bd80      	pop	{r7, pc}
 8001760:	40021000 	.word	0x40021000

08001764 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b088      	sub	sp, #32
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	2b00      	cmp	r3, #0
 8001770:	d102      	bne.n	8001778 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001772:	2301      	movs	r3, #1
 8001774:	f000 fb50 	bl	8001e18 <HAL_RCC_OscConfig+0x6b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	2201      	movs	r2, #1
 800177e:	4013      	ands	r3, r2
 8001780:	d100      	bne.n	8001784 <HAL_RCC_OscConfig+0x20>
 8001782:	e07c      	b.n	800187e <HAL_RCC_OscConfig+0x11a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001784:	4bc3      	ldr	r3, [pc, #780]	; (8001a94 <HAL_RCC_OscConfig+0x330>)
 8001786:	689b      	ldr	r3, [r3, #8]
 8001788:	2238      	movs	r2, #56	; 0x38
 800178a:	4013      	ands	r3, r2
 800178c:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800178e:	4bc1      	ldr	r3, [pc, #772]	; (8001a94 <HAL_RCC_OscConfig+0x330>)
 8001790:	68db      	ldr	r3, [r3, #12]
 8001792:	2203      	movs	r2, #3
 8001794:	4013      	ands	r3, r2
 8001796:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8001798:	69bb      	ldr	r3, [r7, #24]
 800179a:	2b10      	cmp	r3, #16
 800179c:	d102      	bne.n	80017a4 <HAL_RCC_OscConfig+0x40>
 800179e:	697b      	ldr	r3, [r7, #20]
 80017a0:	2b03      	cmp	r3, #3
 80017a2:	d002      	beq.n	80017aa <HAL_RCC_OscConfig+0x46>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 80017a4:	69bb      	ldr	r3, [r7, #24]
 80017a6:	2b08      	cmp	r3, #8
 80017a8:	d10b      	bne.n	80017c2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017aa:	4bba      	ldr	r3, [pc, #744]	; (8001a94 <HAL_RCC_OscConfig+0x330>)
 80017ac:	681a      	ldr	r2, [r3, #0]
 80017ae:	2380      	movs	r3, #128	; 0x80
 80017b0:	029b      	lsls	r3, r3, #10
 80017b2:	4013      	ands	r3, r2
 80017b4:	d062      	beq.n	800187c <HAL_RCC_OscConfig+0x118>
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	685b      	ldr	r3, [r3, #4]
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d15e      	bne.n	800187c <HAL_RCC_OscConfig+0x118>
      {
        return HAL_ERROR;
 80017be:	2301      	movs	r3, #1
 80017c0:	e32a      	b.n	8001e18 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	685a      	ldr	r2, [r3, #4]
 80017c6:	2380      	movs	r3, #128	; 0x80
 80017c8:	025b      	lsls	r3, r3, #9
 80017ca:	429a      	cmp	r2, r3
 80017cc:	d107      	bne.n	80017de <HAL_RCC_OscConfig+0x7a>
 80017ce:	4bb1      	ldr	r3, [pc, #708]	; (8001a94 <HAL_RCC_OscConfig+0x330>)
 80017d0:	681a      	ldr	r2, [r3, #0]
 80017d2:	4bb0      	ldr	r3, [pc, #704]	; (8001a94 <HAL_RCC_OscConfig+0x330>)
 80017d4:	2180      	movs	r1, #128	; 0x80
 80017d6:	0249      	lsls	r1, r1, #9
 80017d8:	430a      	orrs	r2, r1
 80017da:	601a      	str	r2, [r3, #0]
 80017dc:	e020      	b.n	8001820 <HAL_RCC_OscConfig+0xbc>
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	685a      	ldr	r2, [r3, #4]
 80017e2:	23a0      	movs	r3, #160	; 0xa0
 80017e4:	02db      	lsls	r3, r3, #11
 80017e6:	429a      	cmp	r2, r3
 80017e8:	d10e      	bne.n	8001808 <HAL_RCC_OscConfig+0xa4>
 80017ea:	4baa      	ldr	r3, [pc, #680]	; (8001a94 <HAL_RCC_OscConfig+0x330>)
 80017ec:	681a      	ldr	r2, [r3, #0]
 80017ee:	4ba9      	ldr	r3, [pc, #676]	; (8001a94 <HAL_RCC_OscConfig+0x330>)
 80017f0:	2180      	movs	r1, #128	; 0x80
 80017f2:	02c9      	lsls	r1, r1, #11
 80017f4:	430a      	orrs	r2, r1
 80017f6:	601a      	str	r2, [r3, #0]
 80017f8:	4ba6      	ldr	r3, [pc, #664]	; (8001a94 <HAL_RCC_OscConfig+0x330>)
 80017fa:	681a      	ldr	r2, [r3, #0]
 80017fc:	4ba5      	ldr	r3, [pc, #660]	; (8001a94 <HAL_RCC_OscConfig+0x330>)
 80017fe:	2180      	movs	r1, #128	; 0x80
 8001800:	0249      	lsls	r1, r1, #9
 8001802:	430a      	orrs	r2, r1
 8001804:	601a      	str	r2, [r3, #0]
 8001806:	e00b      	b.n	8001820 <HAL_RCC_OscConfig+0xbc>
 8001808:	4ba2      	ldr	r3, [pc, #648]	; (8001a94 <HAL_RCC_OscConfig+0x330>)
 800180a:	681a      	ldr	r2, [r3, #0]
 800180c:	4ba1      	ldr	r3, [pc, #644]	; (8001a94 <HAL_RCC_OscConfig+0x330>)
 800180e:	49a2      	ldr	r1, [pc, #648]	; (8001a98 <HAL_RCC_OscConfig+0x334>)
 8001810:	400a      	ands	r2, r1
 8001812:	601a      	str	r2, [r3, #0]
 8001814:	4b9f      	ldr	r3, [pc, #636]	; (8001a94 <HAL_RCC_OscConfig+0x330>)
 8001816:	681a      	ldr	r2, [r3, #0]
 8001818:	4b9e      	ldr	r3, [pc, #632]	; (8001a94 <HAL_RCC_OscConfig+0x330>)
 800181a:	49a0      	ldr	r1, [pc, #640]	; (8001a9c <HAL_RCC_OscConfig+0x338>)
 800181c:	400a      	ands	r2, r1
 800181e:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	685b      	ldr	r3, [r3, #4]
 8001824:	2b00      	cmp	r3, #0
 8001826:	d014      	beq.n	8001852 <HAL_RCC_OscConfig+0xee>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001828:	f7ff fc8a 	bl	8001140 <HAL_GetTick>
 800182c:	0003      	movs	r3, r0
 800182e:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001830:	e008      	b.n	8001844 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001832:	f7ff fc85 	bl	8001140 <HAL_GetTick>
 8001836:	0002      	movs	r2, r0
 8001838:	693b      	ldr	r3, [r7, #16]
 800183a:	1ad3      	subs	r3, r2, r3
 800183c:	2b64      	cmp	r3, #100	; 0x64
 800183e:	d901      	bls.n	8001844 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 8001840:	2303      	movs	r3, #3
 8001842:	e2e9      	b.n	8001e18 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001844:	4b93      	ldr	r3, [pc, #588]	; (8001a94 <HAL_RCC_OscConfig+0x330>)
 8001846:	681a      	ldr	r2, [r3, #0]
 8001848:	2380      	movs	r3, #128	; 0x80
 800184a:	029b      	lsls	r3, r3, #10
 800184c:	4013      	ands	r3, r2
 800184e:	d0f0      	beq.n	8001832 <HAL_RCC_OscConfig+0xce>
 8001850:	e015      	b.n	800187e <HAL_RCC_OscConfig+0x11a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001852:	f7ff fc75 	bl	8001140 <HAL_GetTick>
 8001856:	0003      	movs	r3, r0
 8001858:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800185a:	e008      	b.n	800186e <HAL_RCC_OscConfig+0x10a>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800185c:	f7ff fc70 	bl	8001140 <HAL_GetTick>
 8001860:	0002      	movs	r2, r0
 8001862:	693b      	ldr	r3, [r7, #16]
 8001864:	1ad3      	subs	r3, r2, r3
 8001866:	2b64      	cmp	r3, #100	; 0x64
 8001868:	d901      	bls.n	800186e <HAL_RCC_OscConfig+0x10a>
          {
            return HAL_TIMEOUT;
 800186a:	2303      	movs	r3, #3
 800186c:	e2d4      	b.n	8001e18 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800186e:	4b89      	ldr	r3, [pc, #548]	; (8001a94 <HAL_RCC_OscConfig+0x330>)
 8001870:	681a      	ldr	r2, [r3, #0]
 8001872:	2380      	movs	r3, #128	; 0x80
 8001874:	029b      	lsls	r3, r3, #10
 8001876:	4013      	ands	r3, r2
 8001878:	d1f0      	bne.n	800185c <HAL_RCC_OscConfig+0xf8>
 800187a:	e000      	b.n	800187e <HAL_RCC_OscConfig+0x11a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800187c:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	2202      	movs	r2, #2
 8001884:	4013      	ands	r3, r2
 8001886:	d100      	bne.n	800188a <HAL_RCC_OscConfig+0x126>
 8001888:	e099      	b.n	80019be <HAL_RCC_OscConfig+0x25a>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800188a:	4b82      	ldr	r3, [pc, #520]	; (8001a94 <HAL_RCC_OscConfig+0x330>)
 800188c:	689b      	ldr	r3, [r3, #8]
 800188e:	2238      	movs	r2, #56	; 0x38
 8001890:	4013      	ands	r3, r2
 8001892:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001894:	4b7f      	ldr	r3, [pc, #508]	; (8001a94 <HAL_RCC_OscConfig+0x330>)
 8001896:	68db      	ldr	r3, [r3, #12]
 8001898:	2203      	movs	r2, #3
 800189a:	4013      	ands	r3, r2
 800189c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 800189e:	69bb      	ldr	r3, [r7, #24]
 80018a0:	2b10      	cmp	r3, #16
 80018a2:	d102      	bne.n	80018aa <HAL_RCC_OscConfig+0x146>
 80018a4:	697b      	ldr	r3, [r7, #20]
 80018a6:	2b02      	cmp	r3, #2
 80018a8:	d002      	beq.n	80018b0 <HAL_RCC_OscConfig+0x14c>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 80018aa:	69bb      	ldr	r3, [r7, #24]
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d135      	bne.n	800191c <HAL_RCC_OscConfig+0x1b8>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80018b0:	4b78      	ldr	r3, [pc, #480]	; (8001a94 <HAL_RCC_OscConfig+0x330>)
 80018b2:	681a      	ldr	r2, [r3, #0]
 80018b4:	2380      	movs	r3, #128	; 0x80
 80018b6:	00db      	lsls	r3, r3, #3
 80018b8:	4013      	ands	r3, r2
 80018ba:	d005      	beq.n	80018c8 <HAL_RCC_OscConfig+0x164>
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	68db      	ldr	r3, [r3, #12]
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d101      	bne.n	80018c8 <HAL_RCC_OscConfig+0x164>
      {
        return HAL_ERROR;
 80018c4:	2301      	movs	r3, #1
 80018c6:	e2a7      	b.n	8001e18 <HAL_RCC_OscConfig+0x6b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018c8:	4b72      	ldr	r3, [pc, #456]	; (8001a94 <HAL_RCC_OscConfig+0x330>)
 80018ca:	685b      	ldr	r3, [r3, #4]
 80018cc:	4a74      	ldr	r2, [pc, #464]	; (8001aa0 <HAL_RCC_OscConfig+0x33c>)
 80018ce:	4013      	ands	r3, r2
 80018d0:	0019      	movs	r1, r3
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	695b      	ldr	r3, [r3, #20]
 80018d6:	021a      	lsls	r2, r3, #8
 80018d8:	4b6e      	ldr	r3, [pc, #440]	; (8001a94 <HAL_RCC_OscConfig+0x330>)
 80018da:	430a      	orrs	r2, r1
 80018dc:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80018de:	69bb      	ldr	r3, [r7, #24]
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d112      	bne.n	800190a <HAL_RCC_OscConfig+0x1a6>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80018e4:	4b6b      	ldr	r3, [pc, #428]	; (8001a94 <HAL_RCC_OscConfig+0x330>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	4a6e      	ldr	r2, [pc, #440]	; (8001aa4 <HAL_RCC_OscConfig+0x340>)
 80018ea:	4013      	ands	r3, r2
 80018ec:	0019      	movs	r1, r3
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	691a      	ldr	r2, [r3, #16]
 80018f2:	4b68      	ldr	r3, [pc, #416]	; (8001a94 <HAL_RCC_OscConfig+0x330>)
 80018f4:	430a      	orrs	r2, r1
 80018f6:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80018f8:	4b66      	ldr	r3, [pc, #408]	; (8001a94 <HAL_RCC_OscConfig+0x330>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	0adb      	lsrs	r3, r3, #11
 80018fe:	2207      	movs	r2, #7
 8001900:	4013      	ands	r3, r2
 8001902:	4a69      	ldr	r2, [pc, #420]	; (8001aa8 <HAL_RCC_OscConfig+0x344>)
 8001904:	40da      	lsrs	r2, r3
 8001906:	4b69      	ldr	r3, [pc, #420]	; (8001aac <HAL_RCC_OscConfig+0x348>)
 8001908:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800190a:	4b69      	ldr	r3, [pc, #420]	; (8001ab0 <HAL_RCC_OscConfig+0x34c>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	0018      	movs	r0, r3
 8001910:	f7ff fbba 	bl	8001088 <HAL_InitTick>
 8001914:	1e03      	subs	r3, r0, #0
 8001916:	d051      	beq.n	80019bc <HAL_RCC_OscConfig+0x258>
        {
          return HAL_ERROR;
 8001918:	2301      	movs	r3, #1
 800191a:	e27d      	b.n	8001e18 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	68db      	ldr	r3, [r3, #12]
 8001920:	2b00      	cmp	r3, #0
 8001922:	d030      	beq.n	8001986 <HAL_RCC_OscConfig+0x222>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001924:	4b5b      	ldr	r3, [pc, #364]	; (8001a94 <HAL_RCC_OscConfig+0x330>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	4a5e      	ldr	r2, [pc, #376]	; (8001aa4 <HAL_RCC_OscConfig+0x340>)
 800192a:	4013      	ands	r3, r2
 800192c:	0019      	movs	r1, r3
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	691a      	ldr	r2, [r3, #16]
 8001932:	4b58      	ldr	r3, [pc, #352]	; (8001a94 <HAL_RCC_OscConfig+0x330>)
 8001934:	430a      	orrs	r2, r1
 8001936:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8001938:	4b56      	ldr	r3, [pc, #344]	; (8001a94 <HAL_RCC_OscConfig+0x330>)
 800193a:	681a      	ldr	r2, [r3, #0]
 800193c:	4b55      	ldr	r3, [pc, #340]	; (8001a94 <HAL_RCC_OscConfig+0x330>)
 800193e:	2180      	movs	r1, #128	; 0x80
 8001940:	0049      	lsls	r1, r1, #1
 8001942:	430a      	orrs	r2, r1
 8001944:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001946:	f7ff fbfb 	bl	8001140 <HAL_GetTick>
 800194a:	0003      	movs	r3, r0
 800194c:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800194e:	e008      	b.n	8001962 <HAL_RCC_OscConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001950:	f7ff fbf6 	bl	8001140 <HAL_GetTick>
 8001954:	0002      	movs	r2, r0
 8001956:	693b      	ldr	r3, [r7, #16]
 8001958:	1ad3      	subs	r3, r2, r3
 800195a:	2b02      	cmp	r3, #2
 800195c:	d901      	bls.n	8001962 <HAL_RCC_OscConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 800195e:	2303      	movs	r3, #3
 8001960:	e25a      	b.n	8001e18 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001962:	4b4c      	ldr	r3, [pc, #304]	; (8001a94 <HAL_RCC_OscConfig+0x330>)
 8001964:	681a      	ldr	r2, [r3, #0]
 8001966:	2380      	movs	r3, #128	; 0x80
 8001968:	00db      	lsls	r3, r3, #3
 800196a:	4013      	ands	r3, r2
 800196c:	d0f0      	beq.n	8001950 <HAL_RCC_OscConfig+0x1ec>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800196e:	4b49      	ldr	r3, [pc, #292]	; (8001a94 <HAL_RCC_OscConfig+0x330>)
 8001970:	685b      	ldr	r3, [r3, #4]
 8001972:	4a4b      	ldr	r2, [pc, #300]	; (8001aa0 <HAL_RCC_OscConfig+0x33c>)
 8001974:	4013      	ands	r3, r2
 8001976:	0019      	movs	r1, r3
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	695b      	ldr	r3, [r3, #20]
 800197c:	021a      	lsls	r2, r3, #8
 800197e:	4b45      	ldr	r3, [pc, #276]	; (8001a94 <HAL_RCC_OscConfig+0x330>)
 8001980:	430a      	orrs	r2, r1
 8001982:	605a      	str	r2, [r3, #4]
 8001984:	e01b      	b.n	80019be <HAL_RCC_OscConfig+0x25a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8001986:	4b43      	ldr	r3, [pc, #268]	; (8001a94 <HAL_RCC_OscConfig+0x330>)
 8001988:	681a      	ldr	r2, [r3, #0]
 800198a:	4b42      	ldr	r3, [pc, #264]	; (8001a94 <HAL_RCC_OscConfig+0x330>)
 800198c:	4949      	ldr	r1, [pc, #292]	; (8001ab4 <HAL_RCC_OscConfig+0x350>)
 800198e:	400a      	ands	r2, r1
 8001990:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001992:	f7ff fbd5 	bl	8001140 <HAL_GetTick>
 8001996:	0003      	movs	r3, r0
 8001998:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800199a:	e008      	b.n	80019ae <HAL_RCC_OscConfig+0x24a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800199c:	f7ff fbd0 	bl	8001140 <HAL_GetTick>
 80019a0:	0002      	movs	r2, r0
 80019a2:	693b      	ldr	r3, [r7, #16]
 80019a4:	1ad3      	subs	r3, r2, r3
 80019a6:	2b02      	cmp	r3, #2
 80019a8:	d901      	bls.n	80019ae <HAL_RCC_OscConfig+0x24a>
          {
            return HAL_TIMEOUT;
 80019aa:	2303      	movs	r3, #3
 80019ac:	e234      	b.n	8001e18 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80019ae:	4b39      	ldr	r3, [pc, #228]	; (8001a94 <HAL_RCC_OscConfig+0x330>)
 80019b0:	681a      	ldr	r2, [r3, #0]
 80019b2:	2380      	movs	r3, #128	; 0x80
 80019b4:	00db      	lsls	r3, r3, #3
 80019b6:	4013      	ands	r3, r2
 80019b8:	d1f0      	bne.n	800199c <HAL_RCC_OscConfig+0x238>
 80019ba:	e000      	b.n	80019be <HAL_RCC_OscConfig+0x25a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80019bc:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	2208      	movs	r2, #8
 80019c4:	4013      	ands	r3, r2
 80019c6:	d047      	beq.n	8001a58 <HAL_RCC_OscConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80019c8:	4b32      	ldr	r3, [pc, #200]	; (8001a94 <HAL_RCC_OscConfig+0x330>)
 80019ca:	689b      	ldr	r3, [r3, #8]
 80019cc:	2238      	movs	r2, #56	; 0x38
 80019ce:	4013      	ands	r3, r2
 80019d0:	2b18      	cmp	r3, #24
 80019d2:	d10a      	bne.n	80019ea <HAL_RCC_OscConfig+0x286>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80019d4:	4b2f      	ldr	r3, [pc, #188]	; (8001a94 <HAL_RCC_OscConfig+0x330>)
 80019d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019d8:	2202      	movs	r2, #2
 80019da:	4013      	ands	r3, r2
 80019dc:	d03c      	beq.n	8001a58 <HAL_RCC_OscConfig+0x2f4>
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	699b      	ldr	r3, [r3, #24]
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d138      	bne.n	8001a58 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 80019e6:	2301      	movs	r3, #1
 80019e8:	e216      	b.n	8001e18 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	699b      	ldr	r3, [r3, #24]
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d019      	beq.n	8001a26 <HAL_RCC_OscConfig+0x2c2>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80019f2:	4b28      	ldr	r3, [pc, #160]	; (8001a94 <HAL_RCC_OscConfig+0x330>)
 80019f4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80019f6:	4b27      	ldr	r3, [pc, #156]	; (8001a94 <HAL_RCC_OscConfig+0x330>)
 80019f8:	2101      	movs	r1, #1
 80019fa:	430a      	orrs	r2, r1
 80019fc:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019fe:	f7ff fb9f 	bl	8001140 <HAL_GetTick>
 8001a02:	0003      	movs	r3, r0
 8001a04:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001a06:	e008      	b.n	8001a1a <HAL_RCC_OscConfig+0x2b6>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a08:	f7ff fb9a 	bl	8001140 <HAL_GetTick>
 8001a0c:	0002      	movs	r2, r0
 8001a0e:	693b      	ldr	r3, [r7, #16]
 8001a10:	1ad3      	subs	r3, r2, r3
 8001a12:	2b02      	cmp	r3, #2
 8001a14:	d901      	bls.n	8001a1a <HAL_RCC_OscConfig+0x2b6>
          {
            return HAL_TIMEOUT;
 8001a16:	2303      	movs	r3, #3
 8001a18:	e1fe      	b.n	8001e18 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001a1a:	4b1e      	ldr	r3, [pc, #120]	; (8001a94 <HAL_RCC_OscConfig+0x330>)
 8001a1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a1e:	2202      	movs	r2, #2
 8001a20:	4013      	ands	r3, r2
 8001a22:	d0f1      	beq.n	8001a08 <HAL_RCC_OscConfig+0x2a4>
 8001a24:	e018      	b.n	8001a58 <HAL_RCC_OscConfig+0x2f4>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8001a26:	4b1b      	ldr	r3, [pc, #108]	; (8001a94 <HAL_RCC_OscConfig+0x330>)
 8001a28:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001a2a:	4b1a      	ldr	r3, [pc, #104]	; (8001a94 <HAL_RCC_OscConfig+0x330>)
 8001a2c:	2101      	movs	r1, #1
 8001a2e:	438a      	bics	r2, r1
 8001a30:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a32:	f7ff fb85 	bl	8001140 <HAL_GetTick>
 8001a36:	0003      	movs	r3, r0
 8001a38:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001a3a:	e008      	b.n	8001a4e <HAL_RCC_OscConfig+0x2ea>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a3c:	f7ff fb80 	bl	8001140 <HAL_GetTick>
 8001a40:	0002      	movs	r2, r0
 8001a42:	693b      	ldr	r3, [r7, #16]
 8001a44:	1ad3      	subs	r3, r2, r3
 8001a46:	2b02      	cmp	r3, #2
 8001a48:	d901      	bls.n	8001a4e <HAL_RCC_OscConfig+0x2ea>
          {
            return HAL_TIMEOUT;
 8001a4a:	2303      	movs	r3, #3
 8001a4c:	e1e4      	b.n	8001e18 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001a4e:	4b11      	ldr	r3, [pc, #68]	; (8001a94 <HAL_RCC_OscConfig+0x330>)
 8001a50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a52:	2202      	movs	r2, #2
 8001a54:	4013      	ands	r3, r2
 8001a56:	d1f1      	bne.n	8001a3c <HAL_RCC_OscConfig+0x2d8>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	2204      	movs	r2, #4
 8001a5e:	4013      	ands	r3, r2
 8001a60:	d100      	bne.n	8001a64 <HAL_RCC_OscConfig+0x300>
 8001a62:	e0c7      	b.n	8001bf4 <HAL_RCC_OscConfig+0x490>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a64:	231f      	movs	r3, #31
 8001a66:	18fb      	adds	r3, r7, r3
 8001a68:	2200      	movs	r2, #0
 8001a6a:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001a6c:	4b09      	ldr	r3, [pc, #36]	; (8001a94 <HAL_RCC_OscConfig+0x330>)
 8001a6e:	689b      	ldr	r3, [r3, #8]
 8001a70:	2238      	movs	r2, #56	; 0x38
 8001a72:	4013      	ands	r3, r2
 8001a74:	2b20      	cmp	r3, #32
 8001a76:	d11f      	bne.n	8001ab8 <HAL_RCC_OscConfig+0x354>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8001a78:	4b06      	ldr	r3, [pc, #24]	; (8001a94 <HAL_RCC_OscConfig+0x330>)
 8001a7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a7c:	2202      	movs	r2, #2
 8001a7e:	4013      	ands	r3, r2
 8001a80:	d100      	bne.n	8001a84 <HAL_RCC_OscConfig+0x320>
 8001a82:	e0b7      	b.n	8001bf4 <HAL_RCC_OscConfig+0x490>
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	689b      	ldr	r3, [r3, #8]
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d000      	beq.n	8001a8e <HAL_RCC_OscConfig+0x32a>
 8001a8c:	e0b2      	b.n	8001bf4 <HAL_RCC_OscConfig+0x490>
      {
        return HAL_ERROR;
 8001a8e:	2301      	movs	r3, #1
 8001a90:	e1c2      	b.n	8001e18 <HAL_RCC_OscConfig+0x6b4>
 8001a92:	46c0      	nop			; (mov r8, r8)
 8001a94:	40021000 	.word	0x40021000
 8001a98:	fffeffff 	.word	0xfffeffff
 8001a9c:	fffbffff 	.word	0xfffbffff
 8001aa0:	ffff80ff 	.word	0xffff80ff
 8001aa4:	ffffc7ff 	.word	0xffffc7ff
 8001aa8:	00f42400 	.word	0x00f42400
 8001aac:	20000004 	.word	0x20000004
 8001ab0:	20000008 	.word	0x20000008
 8001ab4:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001ab8:	4bb5      	ldr	r3, [pc, #724]	; (8001d90 <HAL_RCC_OscConfig+0x62c>)
 8001aba:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001abc:	2380      	movs	r3, #128	; 0x80
 8001abe:	055b      	lsls	r3, r3, #21
 8001ac0:	4013      	ands	r3, r2
 8001ac2:	d101      	bne.n	8001ac8 <HAL_RCC_OscConfig+0x364>
 8001ac4:	2301      	movs	r3, #1
 8001ac6:	e000      	b.n	8001aca <HAL_RCC_OscConfig+0x366>
 8001ac8:	2300      	movs	r3, #0
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d011      	beq.n	8001af2 <HAL_RCC_OscConfig+0x38e>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8001ace:	4bb0      	ldr	r3, [pc, #704]	; (8001d90 <HAL_RCC_OscConfig+0x62c>)
 8001ad0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001ad2:	4baf      	ldr	r3, [pc, #700]	; (8001d90 <HAL_RCC_OscConfig+0x62c>)
 8001ad4:	2180      	movs	r1, #128	; 0x80
 8001ad6:	0549      	lsls	r1, r1, #21
 8001ad8:	430a      	orrs	r2, r1
 8001ada:	63da      	str	r2, [r3, #60]	; 0x3c
 8001adc:	4bac      	ldr	r3, [pc, #688]	; (8001d90 <HAL_RCC_OscConfig+0x62c>)
 8001ade:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001ae0:	2380      	movs	r3, #128	; 0x80
 8001ae2:	055b      	lsls	r3, r3, #21
 8001ae4:	4013      	ands	r3, r2
 8001ae6:	60fb      	str	r3, [r7, #12]
 8001ae8:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8001aea:	231f      	movs	r3, #31
 8001aec:	18fb      	adds	r3, r7, r3
 8001aee:	2201      	movs	r2, #1
 8001af0:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001af2:	4ba8      	ldr	r3, [pc, #672]	; (8001d94 <HAL_RCC_OscConfig+0x630>)
 8001af4:	681a      	ldr	r2, [r3, #0]
 8001af6:	2380      	movs	r3, #128	; 0x80
 8001af8:	005b      	lsls	r3, r3, #1
 8001afa:	4013      	ands	r3, r2
 8001afc:	d11a      	bne.n	8001b34 <HAL_RCC_OscConfig+0x3d0>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001afe:	4ba5      	ldr	r3, [pc, #660]	; (8001d94 <HAL_RCC_OscConfig+0x630>)
 8001b00:	681a      	ldr	r2, [r3, #0]
 8001b02:	4ba4      	ldr	r3, [pc, #656]	; (8001d94 <HAL_RCC_OscConfig+0x630>)
 8001b04:	2180      	movs	r1, #128	; 0x80
 8001b06:	0049      	lsls	r1, r1, #1
 8001b08:	430a      	orrs	r2, r1
 8001b0a:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8001b0c:	f7ff fb18 	bl	8001140 <HAL_GetTick>
 8001b10:	0003      	movs	r3, r0
 8001b12:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b14:	e008      	b.n	8001b28 <HAL_RCC_OscConfig+0x3c4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b16:	f7ff fb13 	bl	8001140 <HAL_GetTick>
 8001b1a:	0002      	movs	r2, r0
 8001b1c:	693b      	ldr	r3, [r7, #16]
 8001b1e:	1ad3      	subs	r3, r2, r3
 8001b20:	2b02      	cmp	r3, #2
 8001b22:	d901      	bls.n	8001b28 <HAL_RCC_OscConfig+0x3c4>
          {
            return HAL_TIMEOUT;
 8001b24:	2303      	movs	r3, #3
 8001b26:	e177      	b.n	8001e18 <HAL_RCC_OscConfig+0x6b4>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b28:	4b9a      	ldr	r3, [pc, #616]	; (8001d94 <HAL_RCC_OscConfig+0x630>)
 8001b2a:	681a      	ldr	r2, [r3, #0]
 8001b2c:	2380      	movs	r3, #128	; 0x80
 8001b2e:	005b      	lsls	r3, r3, #1
 8001b30:	4013      	ands	r3, r2
 8001b32:	d0f0      	beq.n	8001b16 <HAL_RCC_OscConfig+0x3b2>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	689b      	ldr	r3, [r3, #8]
 8001b38:	2b01      	cmp	r3, #1
 8001b3a:	d106      	bne.n	8001b4a <HAL_RCC_OscConfig+0x3e6>
 8001b3c:	4b94      	ldr	r3, [pc, #592]	; (8001d90 <HAL_RCC_OscConfig+0x62c>)
 8001b3e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001b40:	4b93      	ldr	r3, [pc, #588]	; (8001d90 <HAL_RCC_OscConfig+0x62c>)
 8001b42:	2101      	movs	r1, #1
 8001b44:	430a      	orrs	r2, r1
 8001b46:	65da      	str	r2, [r3, #92]	; 0x5c
 8001b48:	e01c      	b.n	8001b84 <HAL_RCC_OscConfig+0x420>
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	689b      	ldr	r3, [r3, #8]
 8001b4e:	2b05      	cmp	r3, #5
 8001b50:	d10c      	bne.n	8001b6c <HAL_RCC_OscConfig+0x408>
 8001b52:	4b8f      	ldr	r3, [pc, #572]	; (8001d90 <HAL_RCC_OscConfig+0x62c>)
 8001b54:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001b56:	4b8e      	ldr	r3, [pc, #568]	; (8001d90 <HAL_RCC_OscConfig+0x62c>)
 8001b58:	2104      	movs	r1, #4
 8001b5a:	430a      	orrs	r2, r1
 8001b5c:	65da      	str	r2, [r3, #92]	; 0x5c
 8001b5e:	4b8c      	ldr	r3, [pc, #560]	; (8001d90 <HAL_RCC_OscConfig+0x62c>)
 8001b60:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001b62:	4b8b      	ldr	r3, [pc, #556]	; (8001d90 <HAL_RCC_OscConfig+0x62c>)
 8001b64:	2101      	movs	r1, #1
 8001b66:	430a      	orrs	r2, r1
 8001b68:	65da      	str	r2, [r3, #92]	; 0x5c
 8001b6a:	e00b      	b.n	8001b84 <HAL_RCC_OscConfig+0x420>
 8001b6c:	4b88      	ldr	r3, [pc, #544]	; (8001d90 <HAL_RCC_OscConfig+0x62c>)
 8001b6e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001b70:	4b87      	ldr	r3, [pc, #540]	; (8001d90 <HAL_RCC_OscConfig+0x62c>)
 8001b72:	2101      	movs	r1, #1
 8001b74:	438a      	bics	r2, r1
 8001b76:	65da      	str	r2, [r3, #92]	; 0x5c
 8001b78:	4b85      	ldr	r3, [pc, #532]	; (8001d90 <HAL_RCC_OscConfig+0x62c>)
 8001b7a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001b7c:	4b84      	ldr	r3, [pc, #528]	; (8001d90 <HAL_RCC_OscConfig+0x62c>)
 8001b7e:	2104      	movs	r1, #4
 8001b80:	438a      	bics	r2, r1
 8001b82:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	689b      	ldr	r3, [r3, #8]
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d014      	beq.n	8001bb6 <HAL_RCC_OscConfig+0x452>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b8c:	f7ff fad8 	bl	8001140 <HAL_GetTick>
 8001b90:	0003      	movs	r3, r0
 8001b92:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001b94:	e009      	b.n	8001baa <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b96:	f7ff fad3 	bl	8001140 <HAL_GetTick>
 8001b9a:	0002      	movs	r2, r0
 8001b9c:	693b      	ldr	r3, [r7, #16]
 8001b9e:	1ad3      	subs	r3, r2, r3
 8001ba0:	4a7d      	ldr	r2, [pc, #500]	; (8001d98 <HAL_RCC_OscConfig+0x634>)
 8001ba2:	4293      	cmp	r3, r2
 8001ba4:	d901      	bls.n	8001baa <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 8001ba6:	2303      	movs	r3, #3
 8001ba8:	e136      	b.n	8001e18 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001baa:	4b79      	ldr	r3, [pc, #484]	; (8001d90 <HAL_RCC_OscConfig+0x62c>)
 8001bac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bae:	2202      	movs	r2, #2
 8001bb0:	4013      	ands	r3, r2
 8001bb2:	d0f0      	beq.n	8001b96 <HAL_RCC_OscConfig+0x432>
 8001bb4:	e013      	b.n	8001bde <HAL_RCC_OscConfig+0x47a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bb6:	f7ff fac3 	bl	8001140 <HAL_GetTick>
 8001bba:	0003      	movs	r3, r0
 8001bbc:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001bbe:	e009      	b.n	8001bd4 <HAL_RCC_OscConfig+0x470>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bc0:	f7ff fabe 	bl	8001140 <HAL_GetTick>
 8001bc4:	0002      	movs	r2, r0
 8001bc6:	693b      	ldr	r3, [r7, #16]
 8001bc8:	1ad3      	subs	r3, r2, r3
 8001bca:	4a73      	ldr	r2, [pc, #460]	; (8001d98 <HAL_RCC_OscConfig+0x634>)
 8001bcc:	4293      	cmp	r3, r2
 8001bce:	d901      	bls.n	8001bd4 <HAL_RCC_OscConfig+0x470>
          {
            return HAL_TIMEOUT;
 8001bd0:	2303      	movs	r3, #3
 8001bd2:	e121      	b.n	8001e18 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001bd4:	4b6e      	ldr	r3, [pc, #440]	; (8001d90 <HAL_RCC_OscConfig+0x62c>)
 8001bd6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bd8:	2202      	movs	r2, #2
 8001bda:	4013      	ands	r3, r2
 8001bdc:	d1f0      	bne.n	8001bc0 <HAL_RCC_OscConfig+0x45c>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8001bde:	231f      	movs	r3, #31
 8001be0:	18fb      	adds	r3, r7, r3
 8001be2:	781b      	ldrb	r3, [r3, #0]
 8001be4:	2b01      	cmp	r3, #1
 8001be6:	d105      	bne.n	8001bf4 <HAL_RCC_OscConfig+0x490>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8001be8:	4b69      	ldr	r3, [pc, #420]	; (8001d90 <HAL_RCC_OscConfig+0x62c>)
 8001bea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001bec:	4b68      	ldr	r3, [pc, #416]	; (8001d90 <HAL_RCC_OscConfig+0x62c>)
 8001bee:	496b      	ldr	r1, [pc, #428]	; (8001d9c <HAL_RCC_OscConfig+0x638>)
 8001bf0:	400a      	ands	r2, r1
 8001bf2:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	2220      	movs	r2, #32
 8001bfa:	4013      	ands	r3, r2
 8001bfc:	d039      	beq.n	8001c72 <HAL_RCC_OscConfig+0x50e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	69db      	ldr	r3, [r3, #28]
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d01b      	beq.n	8001c3e <HAL_RCC_OscConfig+0x4da>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001c06:	4b62      	ldr	r3, [pc, #392]	; (8001d90 <HAL_RCC_OscConfig+0x62c>)
 8001c08:	681a      	ldr	r2, [r3, #0]
 8001c0a:	4b61      	ldr	r3, [pc, #388]	; (8001d90 <HAL_RCC_OscConfig+0x62c>)
 8001c0c:	2180      	movs	r1, #128	; 0x80
 8001c0e:	03c9      	lsls	r1, r1, #15
 8001c10:	430a      	orrs	r2, r1
 8001c12:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c14:	f7ff fa94 	bl	8001140 <HAL_GetTick>
 8001c18:	0003      	movs	r3, r0
 8001c1a:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8001c1c:	e008      	b.n	8001c30 <HAL_RCC_OscConfig+0x4cc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001c1e:	f7ff fa8f 	bl	8001140 <HAL_GetTick>
 8001c22:	0002      	movs	r2, r0
 8001c24:	693b      	ldr	r3, [r7, #16]
 8001c26:	1ad3      	subs	r3, r2, r3
 8001c28:	2b02      	cmp	r3, #2
 8001c2a:	d901      	bls.n	8001c30 <HAL_RCC_OscConfig+0x4cc>
        {
          return HAL_TIMEOUT;
 8001c2c:	2303      	movs	r3, #3
 8001c2e:	e0f3      	b.n	8001e18 <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8001c30:	4b57      	ldr	r3, [pc, #348]	; (8001d90 <HAL_RCC_OscConfig+0x62c>)
 8001c32:	681a      	ldr	r2, [r3, #0]
 8001c34:	2380      	movs	r3, #128	; 0x80
 8001c36:	041b      	lsls	r3, r3, #16
 8001c38:	4013      	ands	r3, r2
 8001c3a:	d0f0      	beq.n	8001c1e <HAL_RCC_OscConfig+0x4ba>
 8001c3c:	e019      	b.n	8001c72 <HAL_RCC_OscConfig+0x50e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001c3e:	4b54      	ldr	r3, [pc, #336]	; (8001d90 <HAL_RCC_OscConfig+0x62c>)
 8001c40:	681a      	ldr	r2, [r3, #0]
 8001c42:	4b53      	ldr	r3, [pc, #332]	; (8001d90 <HAL_RCC_OscConfig+0x62c>)
 8001c44:	4956      	ldr	r1, [pc, #344]	; (8001da0 <HAL_RCC_OscConfig+0x63c>)
 8001c46:	400a      	ands	r2, r1
 8001c48:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c4a:	f7ff fa79 	bl	8001140 <HAL_GetTick>
 8001c4e:	0003      	movs	r3, r0
 8001c50:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8001c52:	e008      	b.n	8001c66 <HAL_RCC_OscConfig+0x502>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001c54:	f7ff fa74 	bl	8001140 <HAL_GetTick>
 8001c58:	0002      	movs	r2, r0
 8001c5a:	693b      	ldr	r3, [r7, #16]
 8001c5c:	1ad3      	subs	r3, r2, r3
 8001c5e:	2b02      	cmp	r3, #2
 8001c60:	d901      	bls.n	8001c66 <HAL_RCC_OscConfig+0x502>
        {
          return HAL_TIMEOUT;
 8001c62:	2303      	movs	r3, #3
 8001c64:	e0d8      	b.n	8001e18 <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8001c66:	4b4a      	ldr	r3, [pc, #296]	; (8001d90 <HAL_RCC_OscConfig+0x62c>)
 8001c68:	681a      	ldr	r2, [r3, #0]
 8001c6a:	2380      	movs	r3, #128	; 0x80
 8001c6c:	041b      	lsls	r3, r3, #16
 8001c6e:	4013      	ands	r3, r2
 8001c70:	d1f0      	bne.n	8001c54 <HAL_RCC_OscConfig+0x4f0>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	6a1b      	ldr	r3, [r3, #32]
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d100      	bne.n	8001c7c <HAL_RCC_OscConfig+0x518>
 8001c7a:	e0cc      	b.n	8001e16 <HAL_RCC_OscConfig+0x6b2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c7c:	4b44      	ldr	r3, [pc, #272]	; (8001d90 <HAL_RCC_OscConfig+0x62c>)
 8001c7e:	689b      	ldr	r3, [r3, #8]
 8001c80:	2238      	movs	r2, #56	; 0x38
 8001c82:	4013      	ands	r3, r2
 8001c84:	2b10      	cmp	r3, #16
 8001c86:	d100      	bne.n	8001c8a <HAL_RCC_OscConfig+0x526>
 8001c88:	e07b      	b.n	8001d82 <HAL_RCC_OscConfig+0x61e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	6a1b      	ldr	r3, [r3, #32]
 8001c8e:	2b02      	cmp	r3, #2
 8001c90:	d156      	bne.n	8001d40 <HAL_RCC_OscConfig+0x5dc>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c92:	4b3f      	ldr	r3, [pc, #252]	; (8001d90 <HAL_RCC_OscConfig+0x62c>)
 8001c94:	681a      	ldr	r2, [r3, #0]
 8001c96:	4b3e      	ldr	r3, [pc, #248]	; (8001d90 <HAL_RCC_OscConfig+0x62c>)
 8001c98:	4942      	ldr	r1, [pc, #264]	; (8001da4 <HAL_RCC_OscConfig+0x640>)
 8001c9a:	400a      	ands	r2, r1
 8001c9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c9e:	f7ff fa4f 	bl	8001140 <HAL_GetTick>
 8001ca2:	0003      	movs	r3, r0
 8001ca4:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ca6:	e008      	b.n	8001cba <HAL_RCC_OscConfig+0x556>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ca8:	f7ff fa4a 	bl	8001140 <HAL_GetTick>
 8001cac:	0002      	movs	r2, r0
 8001cae:	693b      	ldr	r3, [r7, #16]
 8001cb0:	1ad3      	subs	r3, r2, r3
 8001cb2:	2b02      	cmp	r3, #2
 8001cb4:	d901      	bls.n	8001cba <HAL_RCC_OscConfig+0x556>
          {
            return HAL_TIMEOUT;
 8001cb6:	2303      	movs	r3, #3
 8001cb8:	e0ae      	b.n	8001e18 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001cba:	4b35      	ldr	r3, [pc, #212]	; (8001d90 <HAL_RCC_OscConfig+0x62c>)
 8001cbc:	681a      	ldr	r2, [r3, #0]
 8001cbe:	2380      	movs	r3, #128	; 0x80
 8001cc0:	049b      	lsls	r3, r3, #18
 8001cc2:	4013      	ands	r3, r2
 8001cc4:	d1f0      	bne.n	8001ca8 <HAL_RCC_OscConfig+0x544>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001cc6:	4b32      	ldr	r3, [pc, #200]	; (8001d90 <HAL_RCC_OscConfig+0x62c>)
 8001cc8:	68db      	ldr	r3, [r3, #12]
 8001cca:	4a37      	ldr	r2, [pc, #220]	; (8001da8 <HAL_RCC_OscConfig+0x644>)
 8001ccc:	4013      	ands	r3, r2
 8001cce:	0019      	movs	r1, r3
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cd8:	431a      	orrs	r2, r3
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cde:	021b      	lsls	r3, r3, #8
 8001ce0:	431a      	orrs	r2, r3
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ce6:	431a      	orrs	r2, r3
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001cec:	431a      	orrs	r2, r3
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cf2:	431a      	orrs	r2, r3
 8001cf4:	4b26      	ldr	r3, [pc, #152]	; (8001d90 <HAL_RCC_OscConfig+0x62c>)
 8001cf6:	430a      	orrs	r2, r1
 8001cf8:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001cfa:	4b25      	ldr	r3, [pc, #148]	; (8001d90 <HAL_RCC_OscConfig+0x62c>)
 8001cfc:	681a      	ldr	r2, [r3, #0]
 8001cfe:	4b24      	ldr	r3, [pc, #144]	; (8001d90 <HAL_RCC_OscConfig+0x62c>)
 8001d00:	2180      	movs	r1, #128	; 0x80
 8001d02:	0449      	lsls	r1, r1, #17
 8001d04:	430a      	orrs	r2, r1
 8001d06:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8001d08:	4b21      	ldr	r3, [pc, #132]	; (8001d90 <HAL_RCC_OscConfig+0x62c>)
 8001d0a:	68da      	ldr	r2, [r3, #12]
 8001d0c:	4b20      	ldr	r3, [pc, #128]	; (8001d90 <HAL_RCC_OscConfig+0x62c>)
 8001d0e:	2180      	movs	r1, #128	; 0x80
 8001d10:	0549      	lsls	r1, r1, #21
 8001d12:	430a      	orrs	r2, r1
 8001d14:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d16:	f7ff fa13 	bl	8001140 <HAL_GetTick>
 8001d1a:	0003      	movs	r3, r0
 8001d1c:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d1e:	e008      	b.n	8001d32 <HAL_RCC_OscConfig+0x5ce>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d20:	f7ff fa0e 	bl	8001140 <HAL_GetTick>
 8001d24:	0002      	movs	r2, r0
 8001d26:	693b      	ldr	r3, [r7, #16]
 8001d28:	1ad3      	subs	r3, r2, r3
 8001d2a:	2b02      	cmp	r3, #2
 8001d2c:	d901      	bls.n	8001d32 <HAL_RCC_OscConfig+0x5ce>
          {
            return HAL_TIMEOUT;
 8001d2e:	2303      	movs	r3, #3
 8001d30:	e072      	b.n	8001e18 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d32:	4b17      	ldr	r3, [pc, #92]	; (8001d90 <HAL_RCC_OscConfig+0x62c>)
 8001d34:	681a      	ldr	r2, [r3, #0]
 8001d36:	2380      	movs	r3, #128	; 0x80
 8001d38:	049b      	lsls	r3, r3, #18
 8001d3a:	4013      	ands	r3, r2
 8001d3c:	d0f0      	beq.n	8001d20 <HAL_RCC_OscConfig+0x5bc>
 8001d3e:	e06a      	b.n	8001e16 <HAL_RCC_OscConfig+0x6b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d40:	4b13      	ldr	r3, [pc, #76]	; (8001d90 <HAL_RCC_OscConfig+0x62c>)
 8001d42:	681a      	ldr	r2, [r3, #0]
 8001d44:	4b12      	ldr	r3, [pc, #72]	; (8001d90 <HAL_RCC_OscConfig+0x62c>)
 8001d46:	4917      	ldr	r1, [pc, #92]	; (8001da4 <HAL_RCC_OscConfig+0x640>)
 8001d48:	400a      	ands	r2, r1
 8001d4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d4c:	f7ff f9f8 	bl	8001140 <HAL_GetTick>
 8001d50:	0003      	movs	r3, r0
 8001d52:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d54:	e008      	b.n	8001d68 <HAL_RCC_OscConfig+0x604>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d56:	f7ff f9f3 	bl	8001140 <HAL_GetTick>
 8001d5a:	0002      	movs	r2, r0
 8001d5c:	693b      	ldr	r3, [r7, #16]
 8001d5e:	1ad3      	subs	r3, r2, r3
 8001d60:	2b02      	cmp	r3, #2
 8001d62:	d901      	bls.n	8001d68 <HAL_RCC_OscConfig+0x604>
          {
            return HAL_TIMEOUT;
 8001d64:	2303      	movs	r3, #3
 8001d66:	e057      	b.n	8001e18 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d68:	4b09      	ldr	r3, [pc, #36]	; (8001d90 <HAL_RCC_OscConfig+0x62c>)
 8001d6a:	681a      	ldr	r2, [r3, #0]
 8001d6c:	2380      	movs	r3, #128	; 0x80
 8001d6e:	049b      	lsls	r3, r3, #18
 8001d70:	4013      	ands	r3, r2
 8001d72:	d1f0      	bne.n	8001d56 <HAL_RCC_OscConfig+0x5f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8001d74:	4b06      	ldr	r3, [pc, #24]	; (8001d90 <HAL_RCC_OscConfig+0x62c>)
 8001d76:	68da      	ldr	r2, [r3, #12]
 8001d78:	4b05      	ldr	r3, [pc, #20]	; (8001d90 <HAL_RCC_OscConfig+0x62c>)
 8001d7a:	490c      	ldr	r1, [pc, #48]	; (8001dac <HAL_RCC_OscConfig+0x648>)
 8001d7c:	400a      	ands	r2, r1
 8001d7e:	60da      	str	r2, [r3, #12]
 8001d80:	e049      	b.n	8001e16 <HAL_RCC_OscConfig+0x6b2>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	6a1b      	ldr	r3, [r3, #32]
 8001d86:	2b01      	cmp	r3, #1
 8001d88:	d112      	bne.n	8001db0 <HAL_RCC_OscConfig+0x64c>
      {
        return HAL_ERROR;
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	e044      	b.n	8001e18 <HAL_RCC_OscConfig+0x6b4>
 8001d8e:	46c0      	nop			; (mov r8, r8)
 8001d90:	40021000 	.word	0x40021000
 8001d94:	40007000 	.word	0x40007000
 8001d98:	00001388 	.word	0x00001388
 8001d9c:	efffffff 	.word	0xefffffff
 8001da0:	ffbfffff 	.word	0xffbfffff
 8001da4:	feffffff 	.word	0xfeffffff
 8001da8:	11c1808c 	.word	0x11c1808c
 8001dac:	eefefffc 	.word	0xeefefffc
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8001db0:	4b1b      	ldr	r3, [pc, #108]	; (8001e20 <HAL_RCC_OscConfig+0x6bc>)
 8001db2:	68db      	ldr	r3, [r3, #12]
 8001db4:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001db6:	697b      	ldr	r3, [r7, #20]
 8001db8:	2203      	movs	r2, #3
 8001dba:	401a      	ands	r2, r3
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dc0:	429a      	cmp	r2, r3
 8001dc2:	d126      	bne.n	8001e12 <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001dc4:	697b      	ldr	r3, [r7, #20]
 8001dc6:	2270      	movs	r2, #112	; 0x70
 8001dc8:	401a      	ands	r2, r3
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001dce:	429a      	cmp	r2, r3
 8001dd0:	d11f      	bne.n	8001e12 <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001dd2:	697a      	ldr	r2, [r7, #20]
 8001dd4:	23fe      	movs	r3, #254	; 0xfe
 8001dd6:	01db      	lsls	r3, r3, #7
 8001dd8:	401a      	ands	r2, r3
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dde:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001de0:	429a      	cmp	r2, r3
 8001de2:	d116      	bne.n	8001e12 <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001de4:	697a      	ldr	r2, [r7, #20]
 8001de6:	23f8      	movs	r3, #248	; 0xf8
 8001de8:	039b      	lsls	r3, r3, #14
 8001dea:	401a      	ands	r2, r3
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001df0:	429a      	cmp	r2, r3
 8001df2:	d10e      	bne.n	8001e12 <HAL_RCC_OscConfig+0x6ae>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001df4:	697a      	ldr	r2, [r7, #20]
 8001df6:	23e0      	movs	r3, #224	; 0xe0
 8001df8:	051b      	lsls	r3, r3, #20
 8001dfa:	401a      	ands	r2, r3
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001e00:	429a      	cmp	r2, r3
 8001e02:	d106      	bne.n	8001e12 <HAL_RCC_OscConfig+0x6ae>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8001e04:	697b      	ldr	r3, [r7, #20]
 8001e06:	0f5b      	lsrs	r3, r3, #29
 8001e08:	075a      	lsls	r2, r3, #29
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001e0e:	429a      	cmp	r2, r3
 8001e10:	d001      	beq.n	8001e16 <HAL_RCC_OscConfig+0x6b2>
        {
          return HAL_ERROR;
 8001e12:	2301      	movs	r3, #1
 8001e14:	e000      	b.n	8001e18 <HAL_RCC_OscConfig+0x6b4>
        }
      }
    }
  }
  return HAL_OK;
 8001e16:	2300      	movs	r3, #0
}
 8001e18:	0018      	movs	r0, r3
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	b008      	add	sp, #32
 8001e1e:	bd80      	pop	{r7, pc}
 8001e20:	40021000 	.word	0x40021000

08001e24 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b084      	sub	sp, #16
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
 8001e2c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d101      	bne.n	8001e38 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e34:	2301      	movs	r3, #1
 8001e36:	e0e9      	b.n	800200c <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001e38:	4b76      	ldr	r3, [pc, #472]	; (8002014 <HAL_RCC_ClockConfig+0x1f0>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	2207      	movs	r2, #7
 8001e3e:	4013      	ands	r3, r2
 8001e40:	683a      	ldr	r2, [r7, #0]
 8001e42:	429a      	cmp	r2, r3
 8001e44:	d91e      	bls.n	8001e84 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e46:	4b73      	ldr	r3, [pc, #460]	; (8002014 <HAL_RCC_ClockConfig+0x1f0>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	2207      	movs	r2, #7
 8001e4c:	4393      	bics	r3, r2
 8001e4e:	0019      	movs	r1, r3
 8001e50:	4b70      	ldr	r3, [pc, #448]	; (8002014 <HAL_RCC_ClockConfig+0x1f0>)
 8001e52:	683a      	ldr	r2, [r7, #0]
 8001e54:	430a      	orrs	r2, r1
 8001e56:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001e58:	f7ff f972 	bl	8001140 <HAL_GetTick>
 8001e5c:	0003      	movs	r3, r0
 8001e5e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001e60:	e009      	b.n	8001e76 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e62:	f7ff f96d 	bl	8001140 <HAL_GetTick>
 8001e66:	0002      	movs	r2, r0
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	1ad3      	subs	r3, r2, r3
 8001e6c:	4a6a      	ldr	r2, [pc, #424]	; (8002018 <HAL_RCC_ClockConfig+0x1f4>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d901      	bls.n	8001e76 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001e72:	2303      	movs	r3, #3
 8001e74:	e0ca      	b.n	800200c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001e76:	4b67      	ldr	r3, [pc, #412]	; (8002014 <HAL_RCC_ClockConfig+0x1f0>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	2207      	movs	r2, #7
 8001e7c:	4013      	ands	r3, r2
 8001e7e:	683a      	ldr	r2, [r7, #0]
 8001e80:	429a      	cmp	r2, r3
 8001e82:	d1ee      	bne.n	8001e62 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	2202      	movs	r2, #2
 8001e8a:	4013      	ands	r3, r2
 8001e8c:	d015      	beq.n	8001eba <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	2204      	movs	r2, #4
 8001e94:	4013      	ands	r3, r2
 8001e96:	d006      	beq.n	8001ea6 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001e98:	4b60      	ldr	r3, [pc, #384]	; (800201c <HAL_RCC_ClockConfig+0x1f8>)
 8001e9a:	689a      	ldr	r2, [r3, #8]
 8001e9c:	4b5f      	ldr	r3, [pc, #380]	; (800201c <HAL_RCC_ClockConfig+0x1f8>)
 8001e9e:	21e0      	movs	r1, #224	; 0xe0
 8001ea0:	01c9      	lsls	r1, r1, #7
 8001ea2:	430a      	orrs	r2, r1
 8001ea4:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ea6:	4b5d      	ldr	r3, [pc, #372]	; (800201c <HAL_RCC_ClockConfig+0x1f8>)
 8001ea8:	689b      	ldr	r3, [r3, #8]
 8001eaa:	4a5d      	ldr	r2, [pc, #372]	; (8002020 <HAL_RCC_ClockConfig+0x1fc>)
 8001eac:	4013      	ands	r3, r2
 8001eae:	0019      	movs	r1, r3
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	689a      	ldr	r2, [r3, #8]
 8001eb4:	4b59      	ldr	r3, [pc, #356]	; (800201c <HAL_RCC_ClockConfig+0x1f8>)
 8001eb6:	430a      	orrs	r2, r1
 8001eb8:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	2201      	movs	r2, #1
 8001ec0:	4013      	ands	r3, r2
 8001ec2:	d057      	beq.n	8001f74 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	685b      	ldr	r3, [r3, #4]
 8001ec8:	2b01      	cmp	r3, #1
 8001eca:	d107      	bne.n	8001edc <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001ecc:	4b53      	ldr	r3, [pc, #332]	; (800201c <HAL_RCC_ClockConfig+0x1f8>)
 8001ece:	681a      	ldr	r2, [r3, #0]
 8001ed0:	2380      	movs	r3, #128	; 0x80
 8001ed2:	029b      	lsls	r3, r3, #10
 8001ed4:	4013      	ands	r3, r2
 8001ed6:	d12b      	bne.n	8001f30 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001ed8:	2301      	movs	r3, #1
 8001eda:	e097      	b.n	800200c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	685b      	ldr	r3, [r3, #4]
 8001ee0:	2b02      	cmp	r3, #2
 8001ee2:	d107      	bne.n	8001ef4 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ee4:	4b4d      	ldr	r3, [pc, #308]	; (800201c <HAL_RCC_ClockConfig+0x1f8>)
 8001ee6:	681a      	ldr	r2, [r3, #0]
 8001ee8:	2380      	movs	r3, #128	; 0x80
 8001eea:	049b      	lsls	r3, r3, #18
 8001eec:	4013      	ands	r3, r2
 8001eee:	d11f      	bne.n	8001f30 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001ef0:	2301      	movs	r3, #1
 8001ef2:	e08b      	b.n	800200c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	685b      	ldr	r3, [r3, #4]
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d107      	bne.n	8001f0c <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001efc:	4b47      	ldr	r3, [pc, #284]	; (800201c <HAL_RCC_ClockConfig+0x1f8>)
 8001efe:	681a      	ldr	r2, [r3, #0]
 8001f00:	2380      	movs	r3, #128	; 0x80
 8001f02:	00db      	lsls	r3, r3, #3
 8001f04:	4013      	ands	r3, r2
 8001f06:	d113      	bne.n	8001f30 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001f08:	2301      	movs	r3, #1
 8001f0a:	e07f      	b.n	800200c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	685b      	ldr	r3, [r3, #4]
 8001f10:	2b03      	cmp	r3, #3
 8001f12:	d106      	bne.n	8001f22 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001f14:	4b41      	ldr	r3, [pc, #260]	; (800201c <HAL_RCC_ClockConfig+0x1f8>)
 8001f16:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f18:	2202      	movs	r2, #2
 8001f1a:	4013      	ands	r3, r2
 8001f1c:	d108      	bne.n	8001f30 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001f1e:	2301      	movs	r3, #1
 8001f20:	e074      	b.n	800200c <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f22:	4b3e      	ldr	r3, [pc, #248]	; (800201c <HAL_RCC_ClockConfig+0x1f8>)
 8001f24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f26:	2202      	movs	r2, #2
 8001f28:	4013      	ands	r3, r2
 8001f2a:	d101      	bne.n	8001f30 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001f2c:	2301      	movs	r3, #1
 8001f2e:	e06d      	b.n	800200c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001f30:	4b3a      	ldr	r3, [pc, #232]	; (800201c <HAL_RCC_ClockConfig+0x1f8>)
 8001f32:	689b      	ldr	r3, [r3, #8]
 8001f34:	2207      	movs	r2, #7
 8001f36:	4393      	bics	r3, r2
 8001f38:	0019      	movs	r1, r3
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	685a      	ldr	r2, [r3, #4]
 8001f3e:	4b37      	ldr	r3, [pc, #220]	; (800201c <HAL_RCC_ClockConfig+0x1f8>)
 8001f40:	430a      	orrs	r2, r1
 8001f42:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001f44:	f7ff f8fc 	bl	8001140 <HAL_GetTick>
 8001f48:	0003      	movs	r3, r0
 8001f4a:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f4c:	e009      	b.n	8001f62 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f4e:	f7ff f8f7 	bl	8001140 <HAL_GetTick>
 8001f52:	0002      	movs	r2, r0
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	1ad3      	subs	r3, r2, r3
 8001f58:	4a2f      	ldr	r2, [pc, #188]	; (8002018 <HAL_RCC_ClockConfig+0x1f4>)
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	d901      	bls.n	8001f62 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8001f5e:	2303      	movs	r3, #3
 8001f60:	e054      	b.n	800200c <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f62:	4b2e      	ldr	r3, [pc, #184]	; (800201c <HAL_RCC_ClockConfig+0x1f8>)
 8001f64:	689b      	ldr	r3, [r3, #8]
 8001f66:	2238      	movs	r2, #56	; 0x38
 8001f68:	401a      	ands	r2, r3
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	685b      	ldr	r3, [r3, #4]
 8001f6e:	00db      	lsls	r3, r3, #3
 8001f70:	429a      	cmp	r2, r3
 8001f72:	d1ec      	bne.n	8001f4e <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001f74:	4b27      	ldr	r3, [pc, #156]	; (8002014 <HAL_RCC_ClockConfig+0x1f0>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	2207      	movs	r2, #7
 8001f7a:	4013      	ands	r3, r2
 8001f7c:	683a      	ldr	r2, [r7, #0]
 8001f7e:	429a      	cmp	r2, r3
 8001f80:	d21e      	bcs.n	8001fc0 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f82:	4b24      	ldr	r3, [pc, #144]	; (8002014 <HAL_RCC_ClockConfig+0x1f0>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	2207      	movs	r2, #7
 8001f88:	4393      	bics	r3, r2
 8001f8a:	0019      	movs	r1, r3
 8001f8c:	4b21      	ldr	r3, [pc, #132]	; (8002014 <HAL_RCC_ClockConfig+0x1f0>)
 8001f8e:	683a      	ldr	r2, [r7, #0]
 8001f90:	430a      	orrs	r2, r1
 8001f92:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001f94:	f7ff f8d4 	bl	8001140 <HAL_GetTick>
 8001f98:	0003      	movs	r3, r0
 8001f9a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001f9c:	e009      	b.n	8001fb2 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f9e:	f7ff f8cf 	bl	8001140 <HAL_GetTick>
 8001fa2:	0002      	movs	r2, r0
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	1ad3      	subs	r3, r2, r3
 8001fa8:	4a1b      	ldr	r2, [pc, #108]	; (8002018 <HAL_RCC_ClockConfig+0x1f4>)
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d901      	bls.n	8001fb2 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8001fae:	2303      	movs	r3, #3
 8001fb0:	e02c      	b.n	800200c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001fb2:	4b18      	ldr	r3, [pc, #96]	; (8002014 <HAL_RCC_ClockConfig+0x1f0>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	2207      	movs	r2, #7
 8001fb8:	4013      	ands	r3, r2
 8001fba:	683a      	ldr	r2, [r7, #0]
 8001fbc:	429a      	cmp	r2, r3
 8001fbe:	d1ee      	bne.n	8001f9e <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	2204      	movs	r2, #4
 8001fc6:	4013      	ands	r3, r2
 8001fc8:	d009      	beq.n	8001fde <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001fca:	4b14      	ldr	r3, [pc, #80]	; (800201c <HAL_RCC_ClockConfig+0x1f8>)
 8001fcc:	689b      	ldr	r3, [r3, #8]
 8001fce:	4a15      	ldr	r2, [pc, #84]	; (8002024 <HAL_RCC_ClockConfig+0x200>)
 8001fd0:	4013      	ands	r3, r2
 8001fd2:	0019      	movs	r1, r3
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	68da      	ldr	r2, [r3, #12]
 8001fd8:	4b10      	ldr	r3, [pc, #64]	; (800201c <HAL_RCC_ClockConfig+0x1f8>)
 8001fda:	430a      	orrs	r2, r1
 8001fdc:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001fde:	f000 f829 	bl	8002034 <HAL_RCC_GetSysClockFreq>
 8001fe2:	0001      	movs	r1, r0
 8001fe4:	4b0d      	ldr	r3, [pc, #52]	; (800201c <HAL_RCC_ClockConfig+0x1f8>)
 8001fe6:	689b      	ldr	r3, [r3, #8]
 8001fe8:	0a1b      	lsrs	r3, r3, #8
 8001fea:	220f      	movs	r2, #15
 8001fec:	401a      	ands	r2, r3
 8001fee:	4b0e      	ldr	r3, [pc, #56]	; (8002028 <HAL_RCC_ClockConfig+0x204>)
 8001ff0:	0092      	lsls	r2, r2, #2
 8001ff2:	58d3      	ldr	r3, [r2, r3]
 8001ff4:	221f      	movs	r2, #31
 8001ff6:	4013      	ands	r3, r2
 8001ff8:	000a      	movs	r2, r1
 8001ffa:	40da      	lsrs	r2, r3
 8001ffc:	4b0b      	ldr	r3, [pc, #44]	; (800202c <HAL_RCC_ClockConfig+0x208>)
 8001ffe:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002000:	4b0b      	ldr	r3, [pc, #44]	; (8002030 <HAL_RCC_ClockConfig+0x20c>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	0018      	movs	r0, r3
 8002006:	f7ff f83f 	bl	8001088 <HAL_InitTick>
 800200a:	0003      	movs	r3, r0
}
 800200c:	0018      	movs	r0, r3
 800200e:	46bd      	mov	sp, r7
 8002010:	b004      	add	sp, #16
 8002012:	bd80      	pop	{r7, pc}
 8002014:	40022000 	.word	0x40022000
 8002018:	00001388 	.word	0x00001388
 800201c:	40021000 	.word	0x40021000
 8002020:	fffff0ff 	.word	0xfffff0ff
 8002024:	ffff8fff 	.word	0xffff8fff
 8002028:	08003e54 	.word	0x08003e54
 800202c:	20000004 	.word	0x20000004
 8002030:	20000008 	.word	0x20000008

08002034 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b086      	sub	sp, #24
 8002038:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800203a:	4b3c      	ldr	r3, [pc, #240]	; (800212c <HAL_RCC_GetSysClockFreq+0xf8>)
 800203c:	689b      	ldr	r3, [r3, #8]
 800203e:	2238      	movs	r2, #56	; 0x38
 8002040:	4013      	ands	r3, r2
 8002042:	d10f      	bne.n	8002064 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8002044:	4b39      	ldr	r3, [pc, #228]	; (800212c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	0adb      	lsrs	r3, r3, #11
 800204a:	2207      	movs	r2, #7
 800204c:	4013      	ands	r3, r2
 800204e:	2201      	movs	r2, #1
 8002050:	409a      	lsls	r2, r3
 8002052:	0013      	movs	r3, r2
 8002054:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8002056:	6839      	ldr	r1, [r7, #0]
 8002058:	4835      	ldr	r0, [pc, #212]	; (8002130 <HAL_RCC_GetSysClockFreq+0xfc>)
 800205a:	f7fe f85b 	bl	8000114 <__udivsi3>
 800205e:	0003      	movs	r3, r0
 8002060:	613b      	str	r3, [r7, #16]
 8002062:	e05d      	b.n	8002120 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002064:	4b31      	ldr	r3, [pc, #196]	; (800212c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002066:	689b      	ldr	r3, [r3, #8]
 8002068:	2238      	movs	r2, #56	; 0x38
 800206a:	4013      	ands	r3, r2
 800206c:	2b08      	cmp	r3, #8
 800206e:	d102      	bne.n	8002076 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002070:	4b30      	ldr	r3, [pc, #192]	; (8002134 <HAL_RCC_GetSysClockFreq+0x100>)
 8002072:	613b      	str	r3, [r7, #16]
 8002074:	e054      	b.n	8002120 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002076:	4b2d      	ldr	r3, [pc, #180]	; (800212c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002078:	689b      	ldr	r3, [r3, #8]
 800207a:	2238      	movs	r2, #56	; 0x38
 800207c:	4013      	ands	r3, r2
 800207e:	2b10      	cmp	r3, #16
 8002080:	d138      	bne.n	80020f4 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8002082:	4b2a      	ldr	r3, [pc, #168]	; (800212c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002084:	68db      	ldr	r3, [r3, #12]
 8002086:	2203      	movs	r2, #3
 8002088:	4013      	ands	r3, r2
 800208a:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800208c:	4b27      	ldr	r3, [pc, #156]	; (800212c <HAL_RCC_GetSysClockFreq+0xf8>)
 800208e:	68db      	ldr	r3, [r3, #12]
 8002090:	091b      	lsrs	r3, r3, #4
 8002092:	2207      	movs	r2, #7
 8002094:	4013      	ands	r3, r2
 8002096:	3301      	adds	r3, #1
 8002098:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	2b03      	cmp	r3, #3
 800209e:	d10d      	bne.n	80020bc <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80020a0:	68b9      	ldr	r1, [r7, #8]
 80020a2:	4824      	ldr	r0, [pc, #144]	; (8002134 <HAL_RCC_GetSysClockFreq+0x100>)
 80020a4:	f7fe f836 	bl	8000114 <__udivsi3>
 80020a8:	0003      	movs	r3, r0
 80020aa:	0019      	movs	r1, r3
 80020ac:	4b1f      	ldr	r3, [pc, #124]	; (800212c <HAL_RCC_GetSysClockFreq+0xf8>)
 80020ae:	68db      	ldr	r3, [r3, #12]
 80020b0:	0a1b      	lsrs	r3, r3, #8
 80020b2:	227f      	movs	r2, #127	; 0x7f
 80020b4:	4013      	ands	r3, r2
 80020b6:	434b      	muls	r3, r1
 80020b8:	617b      	str	r3, [r7, #20]
        break;
 80020ba:	e00d      	b.n	80020d8 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80020bc:	68b9      	ldr	r1, [r7, #8]
 80020be:	481c      	ldr	r0, [pc, #112]	; (8002130 <HAL_RCC_GetSysClockFreq+0xfc>)
 80020c0:	f7fe f828 	bl	8000114 <__udivsi3>
 80020c4:	0003      	movs	r3, r0
 80020c6:	0019      	movs	r1, r3
 80020c8:	4b18      	ldr	r3, [pc, #96]	; (800212c <HAL_RCC_GetSysClockFreq+0xf8>)
 80020ca:	68db      	ldr	r3, [r3, #12]
 80020cc:	0a1b      	lsrs	r3, r3, #8
 80020ce:	227f      	movs	r2, #127	; 0x7f
 80020d0:	4013      	ands	r3, r2
 80020d2:	434b      	muls	r3, r1
 80020d4:	617b      	str	r3, [r7, #20]
        break;
 80020d6:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80020d8:	4b14      	ldr	r3, [pc, #80]	; (800212c <HAL_RCC_GetSysClockFreq+0xf8>)
 80020da:	68db      	ldr	r3, [r3, #12]
 80020dc:	0f5b      	lsrs	r3, r3, #29
 80020de:	2207      	movs	r2, #7
 80020e0:	4013      	ands	r3, r2
 80020e2:	3301      	adds	r3, #1
 80020e4:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 80020e6:	6879      	ldr	r1, [r7, #4]
 80020e8:	6978      	ldr	r0, [r7, #20]
 80020ea:	f7fe f813 	bl	8000114 <__udivsi3>
 80020ee:	0003      	movs	r3, r0
 80020f0:	613b      	str	r3, [r7, #16]
 80020f2:	e015      	b.n	8002120 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80020f4:	4b0d      	ldr	r3, [pc, #52]	; (800212c <HAL_RCC_GetSysClockFreq+0xf8>)
 80020f6:	689b      	ldr	r3, [r3, #8]
 80020f8:	2238      	movs	r2, #56	; 0x38
 80020fa:	4013      	ands	r3, r2
 80020fc:	2b20      	cmp	r3, #32
 80020fe:	d103      	bne.n	8002108 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8002100:	2380      	movs	r3, #128	; 0x80
 8002102:	021b      	lsls	r3, r3, #8
 8002104:	613b      	str	r3, [r7, #16]
 8002106:	e00b      	b.n	8002120 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002108:	4b08      	ldr	r3, [pc, #32]	; (800212c <HAL_RCC_GetSysClockFreq+0xf8>)
 800210a:	689b      	ldr	r3, [r3, #8]
 800210c:	2238      	movs	r2, #56	; 0x38
 800210e:	4013      	ands	r3, r2
 8002110:	2b18      	cmp	r3, #24
 8002112:	d103      	bne.n	800211c <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8002114:	23fa      	movs	r3, #250	; 0xfa
 8002116:	01db      	lsls	r3, r3, #7
 8002118:	613b      	str	r3, [r7, #16]
 800211a:	e001      	b.n	8002120 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 800211c:	2300      	movs	r3, #0
 800211e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002120:	693b      	ldr	r3, [r7, #16]
}
 8002122:	0018      	movs	r0, r3
 8002124:	46bd      	mov	sp, r7
 8002126:	b006      	add	sp, #24
 8002128:	bd80      	pop	{r7, pc}
 800212a:	46c0      	nop			; (mov r8, r8)
 800212c:	40021000 	.word	0x40021000
 8002130:	00f42400 	.word	0x00f42400
 8002134:	007a1200 	.word	0x007a1200

08002138 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800213c:	4b02      	ldr	r3, [pc, #8]	; (8002148 <HAL_RCC_GetHCLKFreq+0x10>)
 800213e:	681b      	ldr	r3, [r3, #0]
}
 8002140:	0018      	movs	r0, r3
 8002142:	46bd      	mov	sp, r7
 8002144:	bd80      	pop	{r7, pc}
 8002146:	46c0      	nop			; (mov r8, r8)
 8002148:	20000004 	.word	0x20000004

0800214c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800214c:	b5b0      	push	{r4, r5, r7, lr}
 800214e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8002150:	f7ff fff2 	bl	8002138 <HAL_RCC_GetHCLKFreq>
 8002154:	0004      	movs	r4, r0
 8002156:	f7ff faf9 	bl	800174c <LL_RCC_GetAPB1Prescaler>
 800215a:	0003      	movs	r3, r0
 800215c:	0b1a      	lsrs	r2, r3, #12
 800215e:	4b05      	ldr	r3, [pc, #20]	; (8002174 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002160:	0092      	lsls	r2, r2, #2
 8002162:	58d3      	ldr	r3, [r2, r3]
 8002164:	221f      	movs	r2, #31
 8002166:	4013      	ands	r3, r2
 8002168:	40dc      	lsrs	r4, r3
 800216a:	0023      	movs	r3, r4
}
 800216c:	0018      	movs	r0, r3
 800216e:	46bd      	mov	sp, r7
 8002170:	bdb0      	pop	{r4, r5, r7, pc}
 8002172:	46c0      	nop			; (mov r8, r8)
 8002174:	08003e94 	.word	0x08003e94

08002178 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b086      	sub	sp, #24
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8002180:	2313      	movs	r3, #19
 8002182:	18fb      	adds	r3, r7, r3
 8002184:	2200      	movs	r2, #0
 8002186:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002188:	2312      	movs	r3, #18
 800218a:	18fb      	adds	r3, r7, r3
 800218c:	2200      	movs	r2, #0
 800218e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681a      	ldr	r2, [r3, #0]
 8002194:	2380      	movs	r3, #128	; 0x80
 8002196:	029b      	lsls	r3, r3, #10
 8002198:	4013      	ands	r3, r2
 800219a:	d100      	bne.n	800219e <HAL_RCCEx_PeriphCLKConfig+0x26>
 800219c:	e0ad      	b.n	80022fa <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    FlagStatus       pwrclkchanged = RESET;
 800219e:	2011      	movs	r0, #17
 80021a0:	183b      	adds	r3, r7, r0
 80021a2:	2200      	movs	r2, #0
 80021a4:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80021a6:	4b47      	ldr	r3, [pc, #284]	; (80022c4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80021a8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80021aa:	2380      	movs	r3, #128	; 0x80
 80021ac:	055b      	lsls	r3, r3, #21
 80021ae:	4013      	ands	r3, r2
 80021b0:	d110      	bne.n	80021d4 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80021b2:	4b44      	ldr	r3, [pc, #272]	; (80022c4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80021b4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80021b6:	4b43      	ldr	r3, [pc, #268]	; (80022c4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80021b8:	2180      	movs	r1, #128	; 0x80
 80021ba:	0549      	lsls	r1, r1, #21
 80021bc:	430a      	orrs	r2, r1
 80021be:	63da      	str	r2, [r3, #60]	; 0x3c
 80021c0:	4b40      	ldr	r3, [pc, #256]	; (80022c4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80021c2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80021c4:	2380      	movs	r3, #128	; 0x80
 80021c6:	055b      	lsls	r3, r3, #21
 80021c8:	4013      	ands	r3, r2
 80021ca:	60bb      	str	r3, [r7, #8]
 80021cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80021ce:	183b      	adds	r3, r7, r0
 80021d0:	2201      	movs	r2, #1
 80021d2:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80021d4:	4b3c      	ldr	r3, [pc, #240]	; (80022c8 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 80021d6:	681a      	ldr	r2, [r3, #0]
 80021d8:	4b3b      	ldr	r3, [pc, #236]	; (80022c8 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 80021da:	2180      	movs	r1, #128	; 0x80
 80021dc:	0049      	lsls	r1, r1, #1
 80021de:	430a      	orrs	r2, r1
 80021e0:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80021e2:	f7fe ffad 	bl	8001140 <HAL_GetTick>
 80021e6:	0003      	movs	r3, r0
 80021e8:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80021ea:	e00b      	b.n	8002204 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021ec:	f7fe ffa8 	bl	8001140 <HAL_GetTick>
 80021f0:	0002      	movs	r2, r0
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	1ad3      	subs	r3, r2, r3
 80021f6:	2b02      	cmp	r3, #2
 80021f8:	d904      	bls.n	8002204 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 80021fa:	2313      	movs	r3, #19
 80021fc:	18fb      	adds	r3, r7, r3
 80021fe:	2203      	movs	r2, #3
 8002200:	701a      	strb	r2, [r3, #0]
        break;
 8002202:	e005      	b.n	8002210 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002204:	4b30      	ldr	r3, [pc, #192]	; (80022c8 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8002206:	681a      	ldr	r2, [r3, #0]
 8002208:	2380      	movs	r3, #128	; 0x80
 800220a:	005b      	lsls	r3, r3, #1
 800220c:	4013      	ands	r3, r2
 800220e:	d0ed      	beq.n	80021ec <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8002210:	2313      	movs	r3, #19
 8002212:	18fb      	adds	r3, r7, r3
 8002214:	781b      	ldrb	r3, [r3, #0]
 8002216:	2b00      	cmp	r3, #0
 8002218:	d15e      	bne.n	80022d8 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800221a:	4b2a      	ldr	r3, [pc, #168]	; (80022c4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800221c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800221e:	23c0      	movs	r3, #192	; 0xc0
 8002220:	009b      	lsls	r3, r3, #2
 8002222:	4013      	ands	r3, r2
 8002224:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002226:	697b      	ldr	r3, [r7, #20]
 8002228:	2b00      	cmp	r3, #0
 800222a:	d019      	beq.n	8002260 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002230:	697a      	ldr	r2, [r7, #20]
 8002232:	429a      	cmp	r2, r3
 8002234:	d014      	beq.n	8002260 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002236:	4b23      	ldr	r3, [pc, #140]	; (80022c4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002238:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800223a:	4a24      	ldr	r2, [pc, #144]	; (80022cc <HAL_RCCEx_PeriphCLKConfig+0x154>)
 800223c:	4013      	ands	r3, r2
 800223e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002240:	4b20      	ldr	r3, [pc, #128]	; (80022c4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002242:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002244:	4b1f      	ldr	r3, [pc, #124]	; (80022c4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002246:	2180      	movs	r1, #128	; 0x80
 8002248:	0249      	lsls	r1, r1, #9
 800224a:	430a      	orrs	r2, r1
 800224c:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 800224e:	4b1d      	ldr	r3, [pc, #116]	; (80022c4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002250:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002252:	4b1c      	ldr	r3, [pc, #112]	; (80022c4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002254:	491e      	ldr	r1, [pc, #120]	; (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x158>)
 8002256:	400a      	ands	r2, r1
 8002258:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800225a:	4b1a      	ldr	r3, [pc, #104]	; (80022c4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800225c:	697a      	ldr	r2, [r7, #20]
 800225e:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002260:	697b      	ldr	r3, [r7, #20]
 8002262:	2201      	movs	r2, #1
 8002264:	4013      	ands	r3, r2
 8002266:	d016      	beq.n	8002296 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002268:	f7fe ff6a 	bl	8001140 <HAL_GetTick>
 800226c:	0003      	movs	r3, r0
 800226e:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002270:	e00c      	b.n	800228c <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002272:	f7fe ff65 	bl	8001140 <HAL_GetTick>
 8002276:	0002      	movs	r2, r0
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	1ad3      	subs	r3, r2, r3
 800227c:	4a15      	ldr	r2, [pc, #84]	; (80022d4 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 800227e:	4293      	cmp	r3, r2
 8002280:	d904      	bls.n	800228c <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8002282:	2313      	movs	r3, #19
 8002284:	18fb      	adds	r3, r7, r3
 8002286:	2203      	movs	r2, #3
 8002288:	701a      	strb	r2, [r3, #0]
            break;
 800228a:	e004      	b.n	8002296 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800228c:	4b0d      	ldr	r3, [pc, #52]	; (80022c4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800228e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002290:	2202      	movs	r2, #2
 8002292:	4013      	ands	r3, r2
 8002294:	d0ed      	beq.n	8002272 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8002296:	2313      	movs	r3, #19
 8002298:	18fb      	adds	r3, r7, r3
 800229a:	781b      	ldrb	r3, [r3, #0]
 800229c:	2b00      	cmp	r3, #0
 800229e:	d10a      	bne.n	80022b6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80022a0:	4b08      	ldr	r3, [pc, #32]	; (80022c4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80022a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022a4:	4a09      	ldr	r2, [pc, #36]	; (80022cc <HAL_RCCEx_PeriphCLKConfig+0x154>)
 80022a6:	4013      	ands	r3, r2
 80022a8:	0019      	movs	r1, r3
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80022ae:	4b05      	ldr	r3, [pc, #20]	; (80022c4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80022b0:	430a      	orrs	r2, r1
 80022b2:	65da      	str	r2, [r3, #92]	; 0x5c
 80022b4:	e016      	b.n	80022e4 <HAL_RCCEx_PeriphCLKConfig+0x16c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80022b6:	2312      	movs	r3, #18
 80022b8:	18fb      	adds	r3, r7, r3
 80022ba:	2213      	movs	r2, #19
 80022bc:	18ba      	adds	r2, r7, r2
 80022be:	7812      	ldrb	r2, [r2, #0]
 80022c0:	701a      	strb	r2, [r3, #0]
 80022c2:	e00f      	b.n	80022e4 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80022c4:	40021000 	.word	0x40021000
 80022c8:	40007000 	.word	0x40007000
 80022cc:	fffffcff 	.word	0xfffffcff
 80022d0:	fffeffff 	.word	0xfffeffff
 80022d4:	00001388 	.word	0x00001388
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80022d8:	2312      	movs	r3, #18
 80022da:	18fb      	adds	r3, r7, r3
 80022dc:	2213      	movs	r2, #19
 80022de:	18ba      	adds	r2, r7, r2
 80022e0:	7812      	ldrb	r2, [r2, #0]
 80022e2:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80022e4:	2311      	movs	r3, #17
 80022e6:	18fb      	adds	r3, r7, r3
 80022e8:	781b      	ldrb	r3, [r3, #0]
 80022ea:	2b01      	cmp	r3, #1
 80022ec:	d105      	bne.n	80022fa <HAL_RCCEx_PeriphCLKConfig+0x182>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80022ee:	4bb6      	ldr	r3, [pc, #728]	; (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80022f0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80022f2:	4bb5      	ldr	r3, [pc, #724]	; (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80022f4:	49b5      	ldr	r1, [pc, #724]	; (80025cc <HAL_RCCEx_PeriphCLKConfig+0x454>)
 80022f6:	400a      	ands	r2, r1
 80022f8:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	2201      	movs	r2, #1
 8002300:	4013      	ands	r3, r2
 8002302:	d009      	beq.n	8002318 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002304:	4bb0      	ldr	r3, [pc, #704]	; (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002306:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002308:	2203      	movs	r2, #3
 800230a:	4393      	bics	r3, r2
 800230c:	0019      	movs	r1, r3
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	685a      	ldr	r2, [r3, #4]
 8002312:	4bad      	ldr	r3, [pc, #692]	; (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002314:	430a      	orrs	r2, r1
 8002316:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	2202      	movs	r2, #2
 800231e:	4013      	ands	r3, r2
 8002320:	d009      	beq.n	8002336 <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002322:	4ba9      	ldr	r3, [pc, #676]	; (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002324:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002326:	220c      	movs	r2, #12
 8002328:	4393      	bics	r3, r2
 800232a:	0019      	movs	r1, r3
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	689a      	ldr	r2, [r3, #8]
 8002330:	4ba5      	ldr	r3, [pc, #660]	; (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002332:	430a      	orrs	r2, r1
 8002334:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART2SEL */

#if defined(RCC_CCIPR_USART3SEL)
  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	2204      	movs	r2, #4
 800233c:	4013      	ands	r3, r2
 800233e:	d009      	beq.n	8002354 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002340:	4ba1      	ldr	r3, [pc, #644]	; (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002342:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002344:	2230      	movs	r2, #48	; 0x30
 8002346:	4393      	bics	r3, r2
 8002348:	0019      	movs	r1, r3
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	68da      	ldr	r2, [r3, #12]
 800234e:	4b9e      	ldr	r3, [pc, #632]	; (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002350:	430a      	orrs	r2, r1
 8002352:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	2210      	movs	r2, #16
 800235a:	4013      	ands	r3, r2
 800235c:	d009      	beq.n	8002372 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800235e:	4b9a      	ldr	r3, [pc, #616]	; (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002360:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002362:	4a9b      	ldr	r2, [pc, #620]	; (80025d0 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8002364:	4013      	ands	r3, r2
 8002366:	0019      	movs	r1, r3
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	691a      	ldr	r2, [r3, #16]
 800236c:	4b96      	ldr	r3, [pc, #600]	; (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800236e:	430a      	orrs	r2, r1
 8002370:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART1 */

#if defined(LPUART2)
  /*-------------------------- LPUART2 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART2) == RCC_PERIPHCLK_LPUART2)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681a      	ldr	r2, [r3, #0]
 8002376:	2380      	movs	r3, #128	; 0x80
 8002378:	015b      	lsls	r3, r3, #5
 800237a:	4013      	ands	r3, r2
 800237c:	d009      	beq.n	8002392 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART2CLKSOURCE(PeriphClkInit->Lpuart2ClockSelection));

    /* Configure the LPUART clock source */
    __HAL_RCC_LPUART2_CONFIG(PeriphClkInit->Lpuart2ClockSelection);
 800237e:	4b92      	ldr	r3, [pc, #584]	; (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002380:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002382:	4a94      	ldr	r2, [pc, #592]	; (80025d4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002384:	4013      	ands	r3, r2
 8002386:	0019      	movs	r1, r3
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	695a      	ldr	r2, [r3, #20]
 800238c:	4b8e      	ldr	r3, [pc, #568]	; (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800238e:	430a      	orrs	r2, r1
 8002390:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681a      	ldr	r2, [r3, #0]
 8002396:	2380      	movs	r3, #128	; 0x80
 8002398:	009b      	lsls	r3, r3, #2
 800239a:	4013      	ands	r3, r2
 800239c:	d009      	beq.n	80023b2 <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800239e:	4b8a      	ldr	r3, [pc, #552]	; (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80023a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023a2:	4a8d      	ldr	r2, [pc, #564]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x460>)
 80023a4:	4013      	ands	r3, r2
 80023a6:	0019      	movs	r1, r3
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80023ac:	4b86      	ldr	r3, [pc, #536]	; (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80023ae:	430a      	orrs	r2, r1
 80023b0:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681a      	ldr	r2, [r3, #0]
 80023b6:	2380      	movs	r3, #128	; 0x80
 80023b8:	00db      	lsls	r3, r3, #3
 80023ba:	4013      	ands	r3, r2
 80023bc:	d009      	beq.n	80023d2 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80023be:	4b82      	ldr	r3, [pc, #520]	; (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80023c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023c2:	4a86      	ldr	r2, [pc, #536]	; (80025dc <HAL_RCCEx_PeriphCLKConfig+0x464>)
 80023c4:	4013      	ands	r3, r2
 80023c6:	0019      	movs	r1, r3
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023cc:	4b7e      	ldr	r3, [pc, #504]	; (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80023ce:	430a      	orrs	r2, r1
 80023d0:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	2220      	movs	r2, #32
 80023d8:	4013      	ands	r3, r2
 80023da:	d009      	beq.n	80023f0 <HAL_RCCEx_PeriphCLKConfig+0x278>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80023dc:	4b7a      	ldr	r3, [pc, #488]	; (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80023de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023e0:	4a7f      	ldr	r2, [pc, #508]	; (80025e0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80023e2:	4013      	ands	r3, r2
 80023e4:	0019      	movs	r1, r3
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	699a      	ldr	r2, [r3, #24]
 80023ea:	4b77      	ldr	r3, [pc, #476]	; (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80023ec:	430a      	orrs	r2, r1
 80023ee:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_I2C2SEL)
  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	2240      	movs	r2, #64	; 0x40
 80023f6:	4013      	ands	r3, r2
 80023f8:	d009      	beq.n	800240e <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80023fa:	4b73      	ldr	r3, [pc, #460]	; (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80023fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023fe:	4a79      	ldr	r2, [pc, #484]	; (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 8002400:	4013      	ands	r3, r2
 8002402:	0019      	movs	r1, r3
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	69da      	ldr	r2, [r3, #28]
 8002408:	4b6f      	ldr	r3, [pc, #444]	; (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800240a:	430a      	orrs	r2, r1
 800240c:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681a      	ldr	r2, [r3, #0]
 8002412:	2380      	movs	r3, #128	; 0x80
 8002414:	01db      	lsls	r3, r3, #7
 8002416:	4013      	ands	r3, r2
 8002418:	d015      	beq.n	8002446 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800241a:	4b6b      	ldr	r3, [pc, #428]	; (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800241c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800241e:	009b      	lsls	r3, r3, #2
 8002420:	0899      	lsrs	r1, r3, #2
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002426:	4b68      	ldr	r3, [pc, #416]	; (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002428:	430a      	orrs	r2, r1
 800242a:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002430:	2380      	movs	r3, #128	; 0x80
 8002432:	05db      	lsls	r3, r3, #23
 8002434:	429a      	cmp	r2, r3
 8002436:	d106      	bne.n	8002446 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002438:	4b63      	ldr	r3, [pc, #396]	; (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800243a:	68da      	ldr	r2, [r3, #12]
 800243c:	4b62      	ldr	r3, [pc, #392]	; (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800243e:	2180      	movs	r1, #128	; 0x80
 8002440:	0249      	lsls	r1, r1, #9
 8002442:	430a      	orrs	r2, r1
 8002444:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681a      	ldr	r2, [r3, #0]
 800244a:	2380      	movs	r3, #128	; 0x80
 800244c:	031b      	lsls	r3, r3, #12
 800244e:	4013      	ands	r3, r2
 8002450:	d009      	beq.n	8002466 <HAL_RCCEx_PeriphCLKConfig+0x2ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002452:	4b5d      	ldr	r3, [pc, #372]	; (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002454:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002456:	2240      	movs	r2, #64	; 0x40
 8002458:	4393      	bics	r3, r2
 800245a:	0019      	movs	r1, r3
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002460:	4b59      	ldr	r3, [pc, #356]	; (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002462:	430a      	orrs	r2, r1
 8002464:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681a      	ldr	r2, [r3, #0]
 800246a:	2380      	movs	r3, #128	; 0x80
 800246c:	039b      	lsls	r3, r3, #14
 800246e:	4013      	ands	r3, r2
 8002470:	d016      	beq.n	80024a0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002472:	4b55      	ldr	r3, [pc, #340]	; (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002474:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002476:	4a5c      	ldr	r2, [pc, #368]	; (80025e8 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8002478:	4013      	ands	r3, r2
 800247a:	0019      	movs	r1, r3
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002480:	4b51      	ldr	r3, [pc, #324]	; (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002482:	430a      	orrs	r2, r1
 8002484:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800248a:	2380      	movs	r3, #128	; 0x80
 800248c:	03db      	lsls	r3, r3, #15
 800248e:	429a      	cmp	r2, r3
 8002490:	d106      	bne.n	80024a0 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002492:	4b4d      	ldr	r3, [pc, #308]	; (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002494:	68da      	ldr	r2, [r3, #12]
 8002496:	4b4c      	ldr	r3, [pc, #304]	; (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002498:	2180      	movs	r1, #128	; 0x80
 800249a:	0449      	lsls	r1, r1, #17
 800249c:	430a      	orrs	r2, r1
 800249e:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681a      	ldr	r2, [r3, #0]
 80024a4:	2380      	movs	r3, #128	; 0x80
 80024a6:	03db      	lsls	r3, r3, #15
 80024a8:	4013      	ands	r3, r2
 80024aa:	d016      	beq.n	80024da <HAL_RCCEx_PeriphCLKConfig+0x362>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80024ac:	4b46      	ldr	r3, [pc, #280]	; (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80024ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024b0:	4a4e      	ldr	r2, [pc, #312]	; (80025ec <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80024b2:	4013      	ands	r3, r2
 80024b4:	0019      	movs	r1, r3
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80024ba:	4b43      	ldr	r3, [pc, #268]	; (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80024bc:	430a      	orrs	r2, r1
 80024be:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80024c4:	2380      	movs	r3, #128	; 0x80
 80024c6:	045b      	lsls	r3, r3, #17
 80024c8:	429a      	cmp	r2, r3
 80024ca:	d106      	bne.n	80024da <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80024cc:	4b3e      	ldr	r3, [pc, #248]	; (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80024ce:	68da      	ldr	r2, [r3, #12]
 80024d0:	4b3d      	ldr	r3, [pc, #244]	; (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80024d2:	2180      	movs	r1, #128	; 0x80
 80024d4:	0449      	lsls	r1, r1, #17
 80024d6:	430a      	orrs	r2, r1
 80024d8:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681a      	ldr	r2, [r3, #0]
 80024de:	2380      	movs	r3, #128	; 0x80
 80024e0:	011b      	lsls	r3, r3, #4
 80024e2:	4013      	ands	r3, r2
 80024e4:	d014      	beq.n	8002510 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 80024e6:	4b38      	ldr	r3, [pc, #224]	; (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80024e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024ea:	2203      	movs	r2, #3
 80024ec:	4393      	bics	r3, r2
 80024ee:	0019      	movs	r1, r3
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6a1a      	ldr	r2, [r3, #32]
 80024f4:	4b34      	ldr	r3, [pc, #208]	; (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80024f6:	430a      	orrs	r2, r1
 80024f8:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6a1b      	ldr	r3, [r3, #32]
 80024fe:	2b01      	cmp	r3, #1
 8002500:	d106      	bne.n	8002510 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002502:	4b31      	ldr	r3, [pc, #196]	; (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002504:	68da      	ldr	r2, [r3, #12]
 8002506:	4b30      	ldr	r3, [pc, #192]	; (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002508:	2180      	movs	r1, #128	; 0x80
 800250a:	0249      	lsls	r1, r1, #9
 800250c:	430a      	orrs	r2, r1
 800250e:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(RCC_CCIPR2_I2S2SEL)
  /*-------------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681a      	ldr	r2, [r3, #0]
 8002514:	2380      	movs	r3, #128	; 0x80
 8002516:	019b      	lsls	r3, r3, #6
 8002518:	4013      	ands	r3, r2
 800251a:	d014      	beq.n	8002546 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 800251c:	4b2a      	ldr	r3, [pc, #168]	; (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800251e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002520:	220c      	movs	r2, #12
 8002522:	4393      	bics	r3, r2
 8002524:	0019      	movs	r1, r3
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800252a:	4b27      	ldr	r3, [pc, #156]	; (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800252c:	430a      	orrs	r2, r1
 800252e:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002534:	2b04      	cmp	r3, #4
 8002536:	d106      	bne.n	8002546 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002538:	4b23      	ldr	r3, [pc, #140]	; (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800253a:	68da      	ldr	r2, [r3, #12]
 800253c:	4b22      	ldr	r3, [pc, #136]	; (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800253e:	2180      	movs	r1, #128	; 0x80
 8002540:	0249      	lsls	r1, r1, #9
 8002542:	430a      	orrs	r2, r1
 8002544:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR2_I2S2SEL */

#if defined(STM32G0C1xx) || defined(STM32G0B1xx)  || defined(STM32G0B0xx)
  /*-------------------------- USB clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681a      	ldr	r2, [r3, #0]
 800254a:	2380      	movs	r3, #128	; 0x80
 800254c:	045b      	lsls	r3, r3, #17
 800254e:	4013      	ands	r3, r2
 8002550:	d016      	beq.n	8002580 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002552:	4b1d      	ldr	r3, [pc, #116]	; (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002554:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002556:	4a22      	ldr	r2, [pc, #136]	; (80025e0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8002558:	4013      	ands	r3, r2
 800255a:	0019      	movs	r1, r3
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002560:	4b19      	ldr	r3, [pc, #100]	; (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002562:	430a      	orrs	r2, r1
 8002564:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800256a:	2380      	movs	r3, #128	; 0x80
 800256c:	019b      	lsls	r3, r3, #6
 800256e:	429a      	cmp	r2, r3
 8002570:	d106      	bne.n	8002580 <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002572:	4b15      	ldr	r3, [pc, #84]	; (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002574:	68da      	ldr	r2, [r3, #12]
 8002576:	4b14      	ldr	r3, [pc, #80]	; (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002578:	2180      	movs	r1, #128	; 0x80
 800257a:	0449      	lsls	r1, r1, #17
 800257c:	430a      	orrs	r2, r1
 800257e:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32G0C1xx || STM32G0B1xx || STM32G0B0xx */

#if defined(FDCAN1) || defined(FDCAN2)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681a      	ldr	r2, [r3, #0]
 8002584:	2380      	movs	r3, #128	; 0x80
 8002586:	049b      	lsls	r3, r3, #18
 8002588:	4013      	ands	r3, r2
 800258a:	d016      	beq.n	80025ba <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800258c:	4b0e      	ldr	r3, [pc, #56]	; (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800258e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002590:	4a10      	ldr	r2, [pc, #64]	; (80025d4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002592:	4013      	ands	r3, r2
 8002594:	0019      	movs	r1, r3
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800259a:	4b0b      	ldr	r3, [pc, #44]	; (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800259c:	430a      	orrs	r2, r1
 800259e:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80025a4:	2380      	movs	r3, #128	; 0x80
 80025a6:	005b      	lsls	r3, r3, #1
 80025a8:	429a      	cmp	r2, r3
 80025aa:	d106      	bne.n	80025ba <HAL_RCCEx_PeriphCLKConfig+0x442>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80025ac:	4b06      	ldr	r3, [pc, #24]	; (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80025ae:	68da      	ldr	r2, [r3, #12]
 80025b0:	4b05      	ldr	r3, [pc, #20]	; (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80025b2:	2180      	movs	r1, #128	; 0x80
 80025b4:	0449      	lsls	r1, r1, #17
 80025b6:	430a      	orrs	r2, r1
 80025b8:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 80025ba:	2312      	movs	r3, #18
 80025bc:	18fb      	adds	r3, r7, r3
 80025be:	781b      	ldrb	r3, [r3, #0]
}
 80025c0:	0018      	movs	r0, r3
 80025c2:	46bd      	mov	sp, r7
 80025c4:	b006      	add	sp, #24
 80025c6:	bd80      	pop	{r7, pc}
 80025c8:	40021000 	.word	0x40021000
 80025cc:	efffffff 	.word	0xefffffff
 80025d0:	fffff3ff 	.word	0xfffff3ff
 80025d4:	fffffcff 	.word	0xfffffcff
 80025d8:	fff3ffff 	.word	0xfff3ffff
 80025dc:	ffcfffff 	.word	0xffcfffff
 80025e0:	ffffcfff 	.word	0xffffcfff
 80025e4:	ffff3fff 	.word	0xffff3fff
 80025e8:	ffbfffff 	.word	0xffbfffff
 80025ec:	feffffff 	.word	0xfeffffff

080025f0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b084      	sub	sp, #16
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d101      	bne.n	8002602 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80025fe:	2301      	movs	r3, #1
 8002600:	e0a8      	b.n	8002754 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002606:	2b00      	cmp	r3, #0
 8002608:	d109      	bne.n	800261e <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	685a      	ldr	r2, [r3, #4]
 800260e:	2382      	movs	r3, #130	; 0x82
 8002610:	005b      	lsls	r3, r3, #1
 8002612:	429a      	cmp	r2, r3
 8002614:	d009      	beq.n	800262a <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	2200      	movs	r2, #0
 800261a:	61da      	str	r2, [r3, #28]
 800261c:	e005      	b.n	800262a <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	2200      	movs	r2, #0
 8002622:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2200      	movs	r2, #0
 8002628:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	2200      	movs	r2, #0
 800262e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	225d      	movs	r2, #93	; 0x5d
 8002634:	5c9b      	ldrb	r3, [r3, r2]
 8002636:	b2db      	uxtb	r3, r3
 8002638:	2b00      	cmp	r3, #0
 800263a:	d107      	bne.n	800264c <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	225c      	movs	r2, #92	; 0x5c
 8002640:	2100      	movs	r1, #0
 8002642:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	0018      	movs	r0, r3
 8002648:	f7fe fb2a 	bl	8000ca0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	225d      	movs	r2, #93	; 0x5d
 8002650:	2102      	movs	r1, #2
 8002652:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	681a      	ldr	r2, [r3, #0]
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	2140      	movs	r1, #64	; 0x40
 8002660:	438a      	bics	r2, r1
 8002662:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	68da      	ldr	r2, [r3, #12]
 8002668:	23e0      	movs	r3, #224	; 0xe0
 800266a:	00db      	lsls	r3, r3, #3
 800266c:	429a      	cmp	r2, r3
 800266e:	d902      	bls.n	8002676 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002670:	2300      	movs	r3, #0
 8002672:	60fb      	str	r3, [r7, #12]
 8002674:	e002      	b.n	800267c <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002676:	2380      	movs	r3, #128	; 0x80
 8002678:	015b      	lsls	r3, r3, #5
 800267a:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	68da      	ldr	r2, [r3, #12]
 8002680:	23f0      	movs	r3, #240	; 0xf0
 8002682:	011b      	lsls	r3, r3, #4
 8002684:	429a      	cmp	r2, r3
 8002686:	d008      	beq.n	800269a <HAL_SPI_Init+0xaa>
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	68da      	ldr	r2, [r3, #12]
 800268c:	23e0      	movs	r3, #224	; 0xe0
 800268e:	00db      	lsls	r3, r3, #3
 8002690:	429a      	cmp	r2, r3
 8002692:	d002      	beq.n	800269a <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	2200      	movs	r2, #0
 8002698:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	685a      	ldr	r2, [r3, #4]
 800269e:	2382      	movs	r3, #130	; 0x82
 80026a0:	005b      	lsls	r3, r3, #1
 80026a2:	401a      	ands	r2, r3
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	6899      	ldr	r1, [r3, #8]
 80026a8:	2384      	movs	r3, #132	; 0x84
 80026aa:	021b      	lsls	r3, r3, #8
 80026ac:	400b      	ands	r3, r1
 80026ae:	431a      	orrs	r2, r3
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	691b      	ldr	r3, [r3, #16]
 80026b4:	2102      	movs	r1, #2
 80026b6:	400b      	ands	r3, r1
 80026b8:	431a      	orrs	r2, r3
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	695b      	ldr	r3, [r3, #20]
 80026be:	2101      	movs	r1, #1
 80026c0:	400b      	ands	r3, r1
 80026c2:	431a      	orrs	r2, r3
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6999      	ldr	r1, [r3, #24]
 80026c8:	2380      	movs	r3, #128	; 0x80
 80026ca:	009b      	lsls	r3, r3, #2
 80026cc:	400b      	ands	r3, r1
 80026ce:	431a      	orrs	r2, r3
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	69db      	ldr	r3, [r3, #28]
 80026d4:	2138      	movs	r1, #56	; 0x38
 80026d6:	400b      	ands	r3, r1
 80026d8:	431a      	orrs	r2, r3
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6a1b      	ldr	r3, [r3, #32]
 80026de:	2180      	movs	r1, #128	; 0x80
 80026e0:	400b      	ands	r3, r1
 80026e2:	431a      	orrs	r2, r3
 80026e4:	0011      	movs	r1, r2
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80026ea:	2380      	movs	r3, #128	; 0x80
 80026ec:	019b      	lsls	r3, r3, #6
 80026ee:	401a      	ands	r2, r3
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	430a      	orrs	r2, r1
 80026f6:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	699b      	ldr	r3, [r3, #24]
 80026fc:	0c1b      	lsrs	r3, r3, #16
 80026fe:	2204      	movs	r2, #4
 8002700:	401a      	ands	r2, r3
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002706:	2110      	movs	r1, #16
 8002708:	400b      	ands	r3, r1
 800270a:	431a      	orrs	r2, r3
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002710:	2108      	movs	r1, #8
 8002712:	400b      	ands	r3, r1
 8002714:	431a      	orrs	r2, r3
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	68d9      	ldr	r1, [r3, #12]
 800271a:	23f0      	movs	r3, #240	; 0xf0
 800271c:	011b      	lsls	r3, r3, #4
 800271e:	400b      	ands	r3, r1
 8002720:	431a      	orrs	r2, r3
 8002722:	0011      	movs	r1, r2
 8002724:	68fa      	ldr	r2, [r7, #12]
 8002726:	2380      	movs	r3, #128	; 0x80
 8002728:	015b      	lsls	r3, r3, #5
 800272a:	401a      	ands	r2, r3
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	430a      	orrs	r2, r1
 8002732:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	69da      	ldr	r2, [r3, #28]
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	4907      	ldr	r1, [pc, #28]	; (800275c <HAL_SPI_Init+0x16c>)
 8002740:	400a      	ands	r2, r1
 8002742:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	2200      	movs	r2, #0
 8002748:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	225d      	movs	r2, #93	; 0x5d
 800274e:	2101      	movs	r1, #1
 8002750:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002752:	2300      	movs	r3, #0
}
 8002754:	0018      	movs	r0, r3
 8002756:	46bd      	mov	sp, r7
 8002758:	b004      	add	sp, #16
 800275a:	bd80      	pop	{r7, pc}
 800275c:	fffff7ff 	.word	0xfffff7ff

08002760 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b082      	sub	sp, #8
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2b00      	cmp	r3, #0
 800276c:	d101      	bne.n	8002772 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800276e:	2301      	movs	r3, #1
 8002770:	e04a      	b.n	8002808 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	223d      	movs	r2, #61	; 0x3d
 8002776:	5c9b      	ldrb	r3, [r3, r2]
 8002778:	b2db      	uxtb	r3, r3
 800277a:	2b00      	cmp	r3, #0
 800277c:	d107      	bne.n	800278e <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	223c      	movs	r2, #60	; 0x3c
 8002782:	2100      	movs	r1, #0
 8002784:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	0018      	movs	r0, r3
 800278a:	f7fe faf7 	bl	8000d7c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	223d      	movs	r2, #61	; 0x3d
 8002792:	2102      	movs	r1, #2
 8002794:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681a      	ldr	r2, [r3, #0]
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	3304      	adds	r3, #4
 800279e:	0019      	movs	r1, r3
 80027a0:	0010      	movs	r0, r2
 80027a2:	f000 f987 	bl	8002ab4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	2248      	movs	r2, #72	; 0x48
 80027aa:	2101      	movs	r1, #1
 80027ac:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	223e      	movs	r2, #62	; 0x3e
 80027b2:	2101      	movs	r1, #1
 80027b4:	5499      	strb	r1, [r3, r2]
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	223f      	movs	r2, #63	; 0x3f
 80027ba:	2101      	movs	r1, #1
 80027bc:	5499      	strb	r1, [r3, r2]
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	2240      	movs	r2, #64	; 0x40
 80027c2:	2101      	movs	r1, #1
 80027c4:	5499      	strb	r1, [r3, r2]
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	2241      	movs	r2, #65	; 0x41
 80027ca:	2101      	movs	r1, #1
 80027cc:	5499      	strb	r1, [r3, r2]
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	2242      	movs	r2, #66	; 0x42
 80027d2:	2101      	movs	r1, #1
 80027d4:	5499      	strb	r1, [r3, r2]
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	2243      	movs	r2, #67	; 0x43
 80027da:	2101      	movs	r1, #1
 80027dc:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	2244      	movs	r2, #68	; 0x44
 80027e2:	2101      	movs	r1, #1
 80027e4:	5499      	strb	r1, [r3, r2]
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	2245      	movs	r2, #69	; 0x45
 80027ea:	2101      	movs	r1, #1
 80027ec:	5499      	strb	r1, [r3, r2]
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	2246      	movs	r2, #70	; 0x46
 80027f2:	2101      	movs	r1, #1
 80027f4:	5499      	strb	r1, [r3, r2]
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	2247      	movs	r2, #71	; 0x47
 80027fa:	2101      	movs	r1, #1
 80027fc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	223d      	movs	r2, #61	; 0x3d
 8002802:	2101      	movs	r1, #1
 8002804:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002806:	2300      	movs	r3, #0
}
 8002808:	0018      	movs	r0, r3
 800280a:	46bd      	mov	sp, r7
 800280c:	b002      	add	sp, #8
 800280e:	bd80      	pop	{r7, pc}

08002810 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	b082      	sub	sp, #8
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	691b      	ldr	r3, [r3, #16]
 800281e:	2202      	movs	r2, #2
 8002820:	4013      	ands	r3, r2
 8002822:	2b02      	cmp	r3, #2
 8002824:	d124      	bne.n	8002870 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	68db      	ldr	r3, [r3, #12]
 800282c:	2202      	movs	r2, #2
 800282e:	4013      	ands	r3, r2
 8002830:	2b02      	cmp	r3, #2
 8002832:	d11d      	bne.n	8002870 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	2203      	movs	r2, #3
 800283a:	4252      	negs	r2, r2
 800283c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	2201      	movs	r2, #1
 8002842:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	699b      	ldr	r3, [r3, #24]
 800284a:	2203      	movs	r2, #3
 800284c:	4013      	ands	r3, r2
 800284e:	d004      	beq.n	800285a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	0018      	movs	r0, r3
 8002854:	f000 f916 	bl	8002a84 <HAL_TIM_IC_CaptureCallback>
 8002858:	e007      	b.n	800286a <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	0018      	movs	r0, r3
 800285e:	f000 f909 	bl	8002a74 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	0018      	movs	r0, r3
 8002866:	f000 f915 	bl	8002a94 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	2200      	movs	r2, #0
 800286e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	691b      	ldr	r3, [r3, #16]
 8002876:	2204      	movs	r2, #4
 8002878:	4013      	ands	r3, r2
 800287a:	2b04      	cmp	r3, #4
 800287c:	d125      	bne.n	80028ca <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	68db      	ldr	r3, [r3, #12]
 8002884:	2204      	movs	r2, #4
 8002886:	4013      	ands	r3, r2
 8002888:	2b04      	cmp	r3, #4
 800288a:	d11e      	bne.n	80028ca <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	2205      	movs	r2, #5
 8002892:	4252      	negs	r2, r2
 8002894:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	2202      	movs	r2, #2
 800289a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	699a      	ldr	r2, [r3, #24]
 80028a2:	23c0      	movs	r3, #192	; 0xc0
 80028a4:	009b      	lsls	r3, r3, #2
 80028a6:	4013      	ands	r3, r2
 80028a8:	d004      	beq.n	80028b4 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	0018      	movs	r0, r3
 80028ae:	f000 f8e9 	bl	8002a84 <HAL_TIM_IC_CaptureCallback>
 80028b2:	e007      	b.n	80028c4 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	0018      	movs	r0, r3
 80028b8:	f000 f8dc 	bl	8002a74 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	0018      	movs	r0, r3
 80028c0:	f000 f8e8 	bl	8002a94 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2200      	movs	r2, #0
 80028c8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	691b      	ldr	r3, [r3, #16]
 80028d0:	2208      	movs	r2, #8
 80028d2:	4013      	ands	r3, r2
 80028d4:	2b08      	cmp	r3, #8
 80028d6:	d124      	bne.n	8002922 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	68db      	ldr	r3, [r3, #12]
 80028de:	2208      	movs	r2, #8
 80028e0:	4013      	ands	r3, r2
 80028e2:	2b08      	cmp	r3, #8
 80028e4:	d11d      	bne.n	8002922 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	2209      	movs	r2, #9
 80028ec:	4252      	negs	r2, r2
 80028ee:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2204      	movs	r2, #4
 80028f4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	69db      	ldr	r3, [r3, #28]
 80028fc:	2203      	movs	r2, #3
 80028fe:	4013      	ands	r3, r2
 8002900:	d004      	beq.n	800290c <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	0018      	movs	r0, r3
 8002906:	f000 f8bd 	bl	8002a84 <HAL_TIM_IC_CaptureCallback>
 800290a:	e007      	b.n	800291c <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	0018      	movs	r0, r3
 8002910:	f000 f8b0 	bl	8002a74 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	0018      	movs	r0, r3
 8002918:	f000 f8bc 	bl	8002a94 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2200      	movs	r2, #0
 8002920:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	691b      	ldr	r3, [r3, #16]
 8002928:	2210      	movs	r2, #16
 800292a:	4013      	ands	r3, r2
 800292c:	2b10      	cmp	r3, #16
 800292e:	d125      	bne.n	800297c <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	68db      	ldr	r3, [r3, #12]
 8002936:	2210      	movs	r2, #16
 8002938:	4013      	ands	r3, r2
 800293a:	2b10      	cmp	r3, #16
 800293c:	d11e      	bne.n	800297c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	2211      	movs	r2, #17
 8002944:	4252      	negs	r2, r2
 8002946:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2208      	movs	r2, #8
 800294c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	69da      	ldr	r2, [r3, #28]
 8002954:	23c0      	movs	r3, #192	; 0xc0
 8002956:	009b      	lsls	r3, r3, #2
 8002958:	4013      	ands	r3, r2
 800295a:	d004      	beq.n	8002966 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	0018      	movs	r0, r3
 8002960:	f000 f890 	bl	8002a84 <HAL_TIM_IC_CaptureCallback>
 8002964:	e007      	b.n	8002976 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	0018      	movs	r0, r3
 800296a:	f000 f883 	bl	8002a74 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	0018      	movs	r0, r3
 8002972:	f000 f88f 	bl	8002a94 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	2200      	movs	r2, #0
 800297a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	691b      	ldr	r3, [r3, #16]
 8002982:	2201      	movs	r2, #1
 8002984:	4013      	ands	r3, r2
 8002986:	2b01      	cmp	r3, #1
 8002988:	d10f      	bne.n	80029aa <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	68db      	ldr	r3, [r3, #12]
 8002990:	2201      	movs	r2, #1
 8002992:	4013      	ands	r3, r2
 8002994:	2b01      	cmp	r3, #1
 8002996:	d108      	bne.n	80029aa <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	2202      	movs	r2, #2
 800299e:	4252      	negs	r2, r2
 80029a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	0018      	movs	r0, r3
 80029a6:	f7fe f91f 	bl	8000be8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	691b      	ldr	r3, [r3, #16]
 80029b0:	2280      	movs	r2, #128	; 0x80
 80029b2:	4013      	ands	r3, r2
 80029b4:	2b80      	cmp	r3, #128	; 0x80
 80029b6:	d10f      	bne.n	80029d8 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	68db      	ldr	r3, [r3, #12]
 80029be:	2280      	movs	r2, #128	; 0x80
 80029c0:	4013      	ands	r3, r2
 80029c2:	2b80      	cmp	r3, #128	; 0x80
 80029c4:	d108      	bne.n	80029d8 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	2281      	movs	r2, #129	; 0x81
 80029cc:	4252      	negs	r2, r2
 80029ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	0018      	movs	r0, r3
 80029d4:	f000 f976 	bl	8002cc4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	691a      	ldr	r2, [r3, #16]
 80029de:	2380      	movs	r3, #128	; 0x80
 80029e0:	005b      	lsls	r3, r3, #1
 80029e2:	401a      	ands	r2, r3
 80029e4:	2380      	movs	r3, #128	; 0x80
 80029e6:	005b      	lsls	r3, r3, #1
 80029e8:	429a      	cmp	r2, r3
 80029ea:	d10e      	bne.n	8002a0a <HAL_TIM_IRQHandler+0x1fa>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	68db      	ldr	r3, [r3, #12]
 80029f2:	2280      	movs	r2, #128	; 0x80
 80029f4:	4013      	ands	r3, r2
 80029f6:	2b80      	cmp	r3, #128	; 0x80
 80029f8:	d107      	bne.n	8002a0a <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	4a1c      	ldr	r2, [pc, #112]	; (8002a70 <HAL_TIM_IRQHandler+0x260>)
 8002a00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	0018      	movs	r0, r3
 8002a06:	f000 f965 	bl	8002cd4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	691b      	ldr	r3, [r3, #16]
 8002a10:	2240      	movs	r2, #64	; 0x40
 8002a12:	4013      	ands	r3, r2
 8002a14:	2b40      	cmp	r3, #64	; 0x40
 8002a16:	d10f      	bne.n	8002a38 <HAL_TIM_IRQHandler+0x228>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	68db      	ldr	r3, [r3, #12]
 8002a1e:	2240      	movs	r2, #64	; 0x40
 8002a20:	4013      	ands	r3, r2
 8002a22:	2b40      	cmp	r3, #64	; 0x40
 8002a24:	d108      	bne.n	8002a38 <HAL_TIM_IRQHandler+0x228>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	2241      	movs	r2, #65	; 0x41
 8002a2c:	4252      	negs	r2, r2
 8002a2e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	0018      	movs	r0, r3
 8002a34:	f000 f836 	bl	8002aa4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	691b      	ldr	r3, [r3, #16]
 8002a3e:	2220      	movs	r2, #32
 8002a40:	4013      	ands	r3, r2
 8002a42:	2b20      	cmp	r3, #32
 8002a44:	d10f      	bne.n	8002a66 <HAL_TIM_IRQHandler+0x256>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	68db      	ldr	r3, [r3, #12]
 8002a4c:	2220      	movs	r2, #32
 8002a4e:	4013      	ands	r3, r2
 8002a50:	2b20      	cmp	r3, #32
 8002a52:	d108      	bne.n	8002a66 <HAL_TIM_IRQHandler+0x256>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	2221      	movs	r2, #33	; 0x21
 8002a5a:	4252      	negs	r2, r2
 8002a5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	0018      	movs	r0, r3
 8002a62:	f000 f927 	bl	8002cb4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002a66:	46c0      	nop			; (mov r8, r8)
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	b002      	add	sp, #8
 8002a6c:	bd80      	pop	{r7, pc}
 8002a6e:	46c0      	nop			; (mov r8, r8)
 8002a70:	fffffeff 	.word	0xfffffeff

08002a74 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b082      	sub	sp, #8
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002a7c:	46c0      	nop			; (mov r8, r8)
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	b002      	add	sp, #8
 8002a82:	bd80      	pop	{r7, pc}

08002a84 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b082      	sub	sp, #8
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002a8c:	46c0      	nop			; (mov r8, r8)
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	b002      	add	sp, #8
 8002a92:	bd80      	pop	{r7, pc}

08002a94 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b082      	sub	sp, #8
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002a9c:	46c0      	nop			; (mov r8, r8)
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	b002      	add	sp, #8
 8002aa2:	bd80      	pop	{r7, pc}

08002aa4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b082      	sub	sp, #8
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002aac:	46c0      	nop			; (mov r8, r8)
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	b002      	add	sp, #8
 8002ab2:	bd80      	pop	{r7, pc}

08002ab4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b084      	sub	sp, #16
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
 8002abc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	4a38      	ldr	r2, [pc, #224]	; (8002ba8 <TIM_Base_SetConfig+0xf4>)
 8002ac8:	4293      	cmp	r3, r2
 8002aca:	d00c      	beq.n	8002ae6 <TIM_Base_SetConfig+0x32>
 8002acc:	687a      	ldr	r2, [r7, #4]
 8002ace:	2380      	movs	r3, #128	; 0x80
 8002ad0:	05db      	lsls	r3, r3, #23
 8002ad2:	429a      	cmp	r2, r3
 8002ad4:	d007      	beq.n	8002ae6 <TIM_Base_SetConfig+0x32>
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	4a34      	ldr	r2, [pc, #208]	; (8002bac <TIM_Base_SetConfig+0xf8>)
 8002ada:	4293      	cmp	r3, r2
 8002adc:	d003      	beq.n	8002ae6 <TIM_Base_SetConfig+0x32>
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	4a33      	ldr	r2, [pc, #204]	; (8002bb0 <TIM_Base_SetConfig+0xfc>)
 8002ae2:	4293      	cmp	r3, r2
 8002ae4:	d108      	bne.n	8002af8 <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	2270      	movs	r2, #112	; 0x70
 8002aea:	4393      	bics	r3, r2
 8002aec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	685b      	ldr	r3, [r3, #4]
 8002af2:	68fa      	ldr	r2, [r7, #12]
 8002af4:	4313      	orrs	r3, r2
 8002af6:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	4a2b      	ldr	r2, [pc, #172]	; (8002ba8 <TIM_Base_SetConfig+0xf4>)
 8002afc:	4293      	cmp	r3, r2
 8002afe:	d01c      	beq.n	8002b3a <TIM_Base_SetConfig+0x86>
 8002b00:	687a      	ldr	r2, [r7, #4]
 8002b02:	2380      	movs	r3, #128	; 0x80
 8002b04:	05db      	lsls	r3, r3, #23
 8002b06:	429a      	cmp	r2, r3
 8002b08:	d017      	beq.n	8002b3a <TIM_Base_SetConfig+0x86>
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	4a27      	ldr	r2, [pc, #156]	; (8002bac <TIM_Base_SetConfig+0xf8>)
 8002b0e:	4293      	cmp	r3, r2
 8002b10:	d013      	beq.n	8002b3a <TIM_Base_SetConfig+0x86>
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	4a26      	ldr	r2, [pc, #152]	; (8002bb0 <TIM_Base_SetConfig+0xfc>)
 8002b16:	4293      	cmp	r3, r2
 8002b18:	d00f      	beq.n	8002b3a <TIM_Base_SetConfig+0x86>
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	4a25      	ldr	r2, [pc, #148]	; (8002bb4 <TIM_Base_SetConfig+0x100>)
 8002b1e:	4293      	cmp	r3, r2
 8002b20:	d00b      	beq.n	8002b3a <TIM_Base_SetConfig+0x86>
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	4a24      	ldr	r2, [pc, #144]	; (8002bb8 <TIM_Base_SetConfig+0x104>)
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d007      	beq.n	8002b3a <TIM_Base_SetConfig+0x86>
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	4a23      	ldr	r2, [pc, #140]	; (8002bbc <TIM_Base_SetConfig+0x108>)
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	d003      	beq.n	8002b3a <TIM_Base_SetConfig+0x86>
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	4a22      	ldr	r2, [pc, #136]	; (8002bc0 <TIM_Base_SetConfig+0x10c>)
 8002b36:	4293      	cmp	r3, r2
 8002b38:	d108      	bne.n	8002b4c <TIM_Base_SetConfig+0x98>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	4a21      	ldr	r2, [pc, #132]	; (8002bc4 <TIM_Base_SetConfig+0x110>)
 8002b3e:	4013      	ands	r3, r2
 8002b40:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	68db      	ldr	r3, [r3, #12]
 8002b46:	68fa      	ldr	r2, [r7, #12]
 8002b48:	4313      	orrs	r3, r2
 8002b4a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	2280      	movs	r2, #128	; 0x80
 8002b50:	4393      	bics	r3, r2
 8002b52:	001a      	movs	r2, r3
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	695b      	ldr	r3, [r3, #20]
 8002b58:	4313      	orrs	r3, r2
 8002b5a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	68fa      	ldr	r2, [r7, #12]
 8002b60:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002b62:	683b      	ldr	r3, [r7, #0]
 8002b64:	689a      	ldr	r2, [r3, #8]
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	681a      	ldr	r2, [r3, #0]
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	4a0c      	ldr	r2, [pc, #48]	; (8002ba8 <TIM_Base_SetConfig+0xf4>)
 8002b76:	4293      	cmp	r3, r2
 8002b78:	d00b      	beq.n	8002b92 <TIM_Base_SetConfig+0xde>
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	4a0e      	ldr	r2, [pc, #56]	; (8002bb8 <TIM_Base_SetConfig+0x104>)
 8002b7e:	4293      	cmp	r3, r2
 8002b80:	d007      	beq.n	8002b92 <TIM_Base_SetConfig+0xde>
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	4a0d      	ldr	r2, [pc, #52]	; (8002bbc <TIM_Base_SetConfig+0x108>)
 8002b86:	4293      	cmp	r3, r2
 8002b88:	d003      	beq.n	8002b92 <TIM_Base_SetConfig+0xde>
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	4a0c      	ldr	r2, [pc, #48]	; (8002bc0 <TIM_Base_SetConfig+0x10c>)
 8002b8e:	4293      	cmp	r3, r2
 8002b90:	d103      	bne.n	8002b9a <TIM_Base_SetConfig+0xe6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002b92:	683b      	ldr	r3, [r7, #0]
 8002b94:	691a      	ldr	r2, [r3, #16]
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	2201      	movs	r2, #1
 8002b9e:	615a      	str	r2, [r3, #20]
}
 8002ba0:	46c0      	nop			; (mov r8, r8)
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	b004      	add	sp, #16
 8002ba6:	bd80      	pop	{r7, pc}
 8002ba8:	40012c00 	.word	0x40012c00
 8002bac:	40000400 	.word	0x40000400
 8002bb0:	40000800 	.word	0x40000800
 8002bb4:	40002000 	.word	0x40002000
 8002bb8:	40014000 	.word	0x40014000
 8002bbc:	40014400 	.word	0x40014400
 8002bc0:	40014800 	.word	0x40014800
 8002bc4:	fffffcff 	.word	0xfffffcff

08002bc8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b084      	sub	sp, #16
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
 8002bd0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	223c      	movs	r2, #60	; 0x3c
 8002bd6:	5c9b      	ldrb	r3, [r3, r2]
 8002bd8:	2b01      	cmp	r3, #1
 8002bda:	d101      	bne.n	8002be0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002bdc:	2302      	movs	r3, #2
 8002bde:	e05a      	b.n	8002c96 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	223c      	movs	r2, #60	; 0x3c
 8002be4:	2101      	movs	r1, #1
 8002be6:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	223d      	movs	r2, #61	; 0x3d
 8002bec:	2102      	movs	r1, #2
 8002bee:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	685b      	ldr	r3, [r3, #4]
 8002bf6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	689b      	ldr	r3, [r3, #8]
 8002bfe:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	4a26      	ldr	r2, [pc, #152]	; (8002ca0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d108      	bne.n	8002c1c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	4a25      	ldr	r2, [pc, #148]	; (8002ca4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8002c0e:	4013      	ands	r3, r2
 8002c10:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002c12:	683b      	ldr	r3, [r7, #0]
 8002c14:	685b      	ldr	r3, [r3, #4]
 8002c16:	68fa      	ldr	r2, [r7, #12]
 8002c18:	4313      	orrs	r3, r2
 8002c1a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	2270      	movs	r2, #112	; 0x70
 8002c20:	4393      	bics	r3, r2
 8002c22:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	68fa      	ldr	r2, [r7, #12]
 8002c2a:	4313      	orrs	r3, r2
 8002c2c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	68fa      	ldr	r2, [r7, #12]
 8002c34:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	4a19      	ldr	r2, [pc, #100]	; (8002ca0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8002c3c:	4293      	cmp	r3, r2
 8002c3e:	d014      	beq.n	8002c6a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681a      	ldr	r2, [r3, #0]
 8002c44:	2380      	movs	r3, #128	; 0x80
 8002c46:	05db      	lsls	r3, r3, #23
 8002c48:	429a      	cmp	r2, r3
 8002c4a:	d00e      	beq.n	8002c6a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	4a15      	ldr	r2, [pc, #84]	; (8002ca8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d009      	beq.n	8002c6a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	4a14      	ldr	r2, [pc, #80]	; (8002cac <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8002c5c:	4293      	cmp	r3, r2
 8002c5e:	d004      	beq.n	8002c6a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	4a12      	ldr	r2, [pc, #72]	; (8002cb0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8002c66:	4293      	cmp	r3, r2
 8002c68:	d10c      	bne.n	8002c84 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002c6a:	68bb      	ldr	r3, [r7, #8]
 8002c6c:	2280      	movs	r2, #128	; 0x80
 8002c6e:	4393      	bics	r3, r2
 8002c70:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	689b      	ldr	r3, [r3, #8]
 8002c76:	68ba      	ldr	r2, [r7, #8]
 8002c78:	4313      	orrs	r3, r2
 8002c7a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	68ba      	ldr	r2, [r7, #8]
 8002c82:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	223d      	movs	r2, #61	; 0x3d
 8002c88:	2101      	movs	r1, #1
 8002c8a:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	223c      	movs	r2, #60	; 0x3c
 8002c90:	2100      	movs	r1, #0
 8002c92:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002c94:	2300      	movs	r3, #0
}
 8002c96:	0018      	movs	r0, r3
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	b004      	add	sp, #16
 8002c9c:	bd80      	pop	{r7, pc}
 8002c9e:	46c0      	nop			; (mov r8, r8)
 8002ca0:	40012c00 	.word	0x40012c00
 8002ca4:	ff0fffff 	.word	0xff0fffff
 8002ca8:	40000400 	.word	0x40000400
 8002cac:	40000800 	.word	0x40000800
 8002cb0:	40014000 	.word	0x40014000

08002cb4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	b082      	sub	sp, #8
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002cbc:	46c0      	nop			; (mov r8, r8)
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	b002      	add	sp, #8
 8002cc2:	bd80      	pop	{r7, pc}

08002cc4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b082      	sub	sp, #8
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002ccc:	46c0      	nop			; (mov r8, r8)
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	b002      	add	sp, #8
 8002cd2:	bd80      	pop	{r7, pc}

08002cd4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b082      	sub	sp, #8
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002cdc:	46c0      	nop			; (mov r8, r8)
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	b002      	add	sp, #8
 8002ce2:	bd80      	pop	{r7, pc}

08002ce4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b082      	sub	sp, #8
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d101      	bne.n	8002cf6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002cf2:	2301      	movs	r3, #1
 8002cf4:	e046      	b.n	8002d84 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	2288      	movs	r2, #136	; 0x88
 8002cfa:	589b      	ldr	r3, [r3, r2]
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d107      	bne.n	8002d10 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2284      	movs	r2, #132	; 0x84
 8002d04:	2100      	movs	r1, #0
 8002d06:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	0018      	movs	r0, r3
 8002d0c:	f7fe f85c 	bl	8000dc8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2288      	movs	r2, #136	; 0x88
 8002d14:	2124      	movs	r1, #36	; 0x24
 8002d16:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	681a      	ldr	r2, [r3, #0]
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	2101      	movs	r1, #1
 8002d24:	438a      	bics	r2, r1
 8002d26:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	0018      	movs	r0, r3
 8002d2c:	f000 f9ae 	bl	800308c <UART_SetConfig>
 8002d30:	0003      	movs	r3, r0
 8002d32:	2b01      	cmp	r3, #1
 8002d34:	d101      	bne.n	8002d3a <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 8002d36:	2301      	movs	r3, #1
 8002d38:	e024      	b.n	8002d84 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d003      	beq.n	8002d4a <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	0018      	movs	r0, r3
 8002d46:	f000 fcf7 	bl	8003738 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	685a      	ldr	r2, [r3, #4]
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	490d      	ldr	r1, [pc, #52]	; (8002d8c <HAL_UART_Init+0xa8>)
 8002d56:	400a      	ands	r2, r1
 8002d58:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	689a      	ldr	r2, [r3, #8]
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	212a      	movs	r1, #42	; 0x2a
 8002d66:	438a      	bics	r2, r1
 8002d68:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	681a      	ldr	r2, [r3, #0]
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	2101      	movs	r1, #1
 8002d76:	430a      	orrs	r2, r1
 8002d78:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	0018      	movs	r0, r3
 8002d7e:	f000 fd8f 	bl	80038a0 <UART_CheckIdleState>
 8002d82:	0003      	movs	r3, r0
}
 8002d84:	0018      	movs	r0, r3
 8002d86:	46bd      	mov	sp, r7
 8002d88:	b002      	add	sp, #8
 8002d8a:	bd80      	pop	{r7, pc}
 8002d8c:	ffffb7ff 	.word	0xffffb7ff

08002d90 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b08a      	sub	sp, #40	; 0x28
 8002d94:	af02      	add	r7, sp, #8
 8002d96:	60f8      	str	r0, [r7, #12]
 8002d98:	60b9      	str	r1, [r7, #8]
 8002d9a:	603b      	str	r3, [r7, #0]
 8002d9c:	1dbb      	adds	r3, r7, #6
 8002d9e:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	2288      	movs	r2, #136	; 0x88
 8002da4:	589b      	ldr	r3, [r3, r2]
 8002da6:	2b20      	cmp	r3, #32
 8002da8:	d000      	beq.n	8002dac <HAL_UART_Transmit+0x1c>
 8002daa:	e088      	b.n	8002ebe <HAL_UART_Transmit+0x12e>
  {
    if ((pData == NULL) || (Size == 0U))
 8002dac:	68bb      	ldr	r3, [r7, #8]
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d003      	beq.n	8002dba <HAL_UART_Transmit+0x2a>
 8002db2:	1dbb      	adds	r3, r7, #6
 8002db4:	881b      	ldrh	r3, [r3, #0]
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d101      	bne.n	8002dbe <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8002dba:	2301      	movs	r3, #1
 8002dbc:	e080      	b.n	8002ec0 <HAL_UART_Transmit+0x130>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	689a      	ldr	r2, [r3, #8]
 8002dc2:	2380      	movs	r3, #128	; 0x80
 8002dc4:	015b      	lsls	r3, r3, #5
 8002dc6:	429a      	cmp	r2, r3
 8002dc8:	d109      	bne.n	8002dde <HAL_UART_Transmit+0x4e>
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	691b      	ldr	r3, [r3, #16]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d105      	bne.n	8002dde <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002dd2:	68bb      	ldr	r3, [r7, #8]
 8002dd4:	2201      	movs	r2, #1
 8002dd6:	4013      	ands	r3, r2
 8002dd8:	d001      	beq.n	8002dde <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8002dda:	2301      	movs	r3, #1
 8002ddc:	e070      	b.n	8002ec0 <HAL_UART_Transmit+0x130>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	2290      	movs	r2, #144	; 0x90
 8002de2:	2100      	movs	r1, #0
 8002de4:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	2288      	movs	r2, #136	; 0x88
 8002dea:	2121      	movs	r1, #33	; 0x21
 8002dec:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002dee:	f7fe f9a7 	bl	8001140 <HAL_GetTick>
 8002df2:	0003      	movs	r3, r0
 8002df4:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	1dba      	adds	r2, r7, #6
 8002dfa:	2154      	movs	r1, #84	; 0x54
 8002dfc:	8812      	ldrh	r2, [r2, #0]
 8002dfe:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	1dba      	adds	r2, r7, #6
 8002e04:	2156      	movs	r1, #86	; 0x56
 8002e06:	8812      	ldrh	r2, [r2, #0]
 8002e08:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	689a      	ldr	r2, [r3, #8]
 8002e0e:	2380      	movs	r3, #128	; 0x80
 8002e10:	015b      	lsls	r3, r3, #5
 8002e12:	429a      	cmp	r2, r3
 8002e14:	d108      	bne.n	8002e28 <HAL_UART_Transmit+0x98>
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	691b      	ldr	r3, [r3, #16]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d104      	bne.n	8002e28 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 8002e1e:	2300      	movs	r3, #0
 8002e20:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002e22:	68bb      	ldr	r3, [r7, #8]
 8002e24:	61bb      	str	r3, [r7, #24]
 8002e26:	e003      	b.n	8002e30 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8002e28:	68bb      	ldr	r3, [r7, #8]
 8002e2a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002e30:	e02c      	b.n	8002e8c <HAL_UART_Transmit+0xfc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002e32:	697a      	ldr	r2, [r7, #20]
 8002e34:	68f8      	ldr	r0, [r7, #12]
 8002e36:	683b      	ldr	r3, [r7, #0]
 8002e38:	9300      	str	r3, [sp, #0]
 8002e3a:	0013      	movs	r3, r2
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	2180      	movs	r1, #128	; 0x80
 8002e40:	f000 fd7c 	bl	800393c <UART_WaitOnFlagUntilTimeout>
 8002e44:	1e03      	subs	r3, r0, #0
 8002e46:	d001      	beq.n	8002e4c <HAL_UART_Transmit+0xbc>
      {
        return HAL_TIMEOUT;
 8002e48:	2303      	movs	r3, #3
 8002e4a:	e039      	b.n	8002ec0 <HAL_UART_Transmit+0x130>
      }
      if (pdata8bits == NULL)
 8002e4c:	69fb      	ldr	r3, [r7, #28]
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d10b      	bne.n	8002e6a <HAL_UART_Transmit+0xda>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002e52:	69bb      	ldr	r3, [r7, #24]
 8002e54:	881b      	ldrh	r3, [r3, #0]
 8002e56:	001a      	movs	r2, r3
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	05d2      	lsls	r2, r2, #23
 8002e5e:	0dd2      	lsrs	r2, r2, #23
 8002e60:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002e62:	69bb      	ldr	r3, [r7, #24]
 8002e64:	3302      	adds	r3, #2
 8002e66:	61bb      	str	r3, [r7, #24]
 8002e68:	e007      	b.n	8002e7a <HAL_UART_Transmit+0xea>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002e6a:	69fb      	ldr	r3, [r7, #28]
 8002e6c:	781a      	ldrb	r2, [r3, #0]
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002e74:	69fb      	ldr	r3, [r7, #28]
 8002e76:	3301      	adds	r3, #1
 8002e78:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	2256      	movs	r2, #86	; 0x56
 8002e7e:	5a9b      	ldrh	r3, [r3, r2]
 8002e80:	b29b      	uxth	r3, r3
 8002e82:	3b01      	subs	r3, #1
 8002e84:	b299      	uxth	r1, r3
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	2256      	movs	r2, #86	; 0x56
 8002e8a:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	2256      	movs	r2, #86	; 0x56
 8002e90:	5a9b      	ldrh	r3, [r3, r2]
 8002e92:	b29b      	uxth	r3, r3
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d1cc      	bne.n	8002e32 <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002e98:	697a      	ldr	r2, [r7, #20]
 8002e9a:	68f8      	ldr	r0, [r7, #12]
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	9300      	str	r3, [sp, #0]
 8002ea0:	0013      	movs	r3, r2
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	2140      	movs	r1, #64	; 0x40
 8002ea6:	f000 fd49 	bl	800393c <UART_WaitOnFlagUntilTimeout>
 8002eaa:	1e03      	subs	r3, r0, #0
 8002eac:	d001      	beq.n	8002eb2 <HAL_UART_Transmit+0x122>
    {
      return HAL_TIMEOUT;
 8002eae:	2303      	movs	r3, #3
 8002eb0:	e006      	b.n	8002ec0 <HAL_UART_Transmit+0x130>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	2288      	movs	r2, #136	; 0x88
 8002eb6:	2120      	movs	r1, #32
 8002eb8:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8002eba:	2300      	movs	r3, #0
 8002ebc:	e000      	b.n	8002ec0 <HAL_UART_Transmit+0x130>
  }
  else
  {
    return HAL_BUSY;
 8002ebe:	2302      	movs	r3, #2
  }
}
 8002ec0:	0018      	movs	r0, r3
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	b008      	add	sp, #32
 8002ec6:	bd80      	pop	{r7, pc}

08002ec8 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b08a      	sub	sp, #40	; 0x28
 8002ecc:	af02      	add	r7, sp, #8
 8002ece:	60f8      	str	r0, [r7, #12]
 8002ed0:	60b9      	str	r1, [r7, #8]
 8002ed2:	603b      	str	r3, [r7, #0]
 8002ed4:	1dbb      	adds	r3, r7, #6
 8002ed6:	801a      	strh	r2, [r3, #0]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	228c      	movs	r2, #140	; 0x8c
 8002edc:	589b      	ldr	r3, [r3, r2]
 8002ede:	2b20      	cmp	r3, #32
 8002ee0:	d000      	beq.n	8002ee4 <HAL_UART_Receive+0x1c>
 8002ee2:	e0cc      	b.n	800307e <HAL_UART_Receive+0x1b6>
  {
    if ((pData == NULL) || (Size == 0U))
 8002ee4:	68bb      	ldr	r3, [r7, #8]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d003      	beq.n	8002ef2 <HAL_UART_Receive+0x2a>
 8002eea:	1dbb      	adds	r3, r7, #6
 8002eec:	881b      	ldrh	r3, [r3, #0]
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d101      	bne.n	8002ef6 <HAL_UART_Receive+0x2e>
    {
      return  HAL_ERROR;
 8002ef2:	2301      	movs	r3, #1
 8002ef4:	e0c4      	b.n	8003080 <HAL_UART_Receive+0x1b8>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	689a      	ldr	r2, [r3, #8]
 8002efa:	2380      	movs	r3, #128	; 0x80
 8002efc:	015b      	lsls	r3, r3, #5
 8002efe:	429a      	cmp	r2, r3
 8002f00:	d109      	bne.n	8002f16 <HAL_UART_Receive+0x4e>
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	691b      	ldr	r3, [r3, #16]
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d105      	bne.n	8002f16 <HAL_UART_Receive+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002f0a:	68bb      	ldr	r3, [r7, #8]
 8002f0c:	2201      	movs	r2, #1
 8002f0e:	4013      	ands	r3, r2
 8002f10:	d001      	beq.n	8002f16 <HAL_UART_Receive+0x4e>
      {
        return  HAL_ERROR;
 8002f12:	2301      	movs	r3, #1
 8002f14:	e0b4      	b.n	8003080 <HAL_UART_Receive+0x1b8>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	2290      	movs	r2, #144	; 0x90
 8002f1a:	2100      	movs	r1, #0
 8002f1c:	5099      	str	r1, [r3, r2]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	228c      	movs	r2, #140	; 0x8c
 8002f22:	2122      	movs	r1, #34	; 0x22
 8002f24:	5099      	str	r1, [r3, r2]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	2200      	movs	r2, #0
 8002f2a:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002f2c:	f7fe f908 	bl	8001140 <HAL_GetTick>
 8002f30:	0003      	movs	r3, r0
 8002f32:	617b      	str	r3, [r7, #20]

    huart->RxXferSize  = Size;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	1dba      	adds	r2, r7, #6
 8002f38:	215c      	movs	r1, #92	; 0x5c
 8002f3a:	8812      	ldrh	r2, [r2, #0]
 8002f3c:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	1dba      	adds	r2, r7, #6
 8002f42:	215e      	movs	r1, #94	; 0x5e
 8002f44:	8812      	ldrh	r2, [r2, #0]
 8002f46:	525a      	strh	r2, [r3, r1]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	689a      	ldr	r2, [r3, #8]
 8002f4c:	2380      	movs	r3, #128	; 0x80
 8002f4e:	015b      	lsls	r3, r3, #5
 8002f50:	429a      	cmp	r2, r3
 8002f52:	d10d      	bne.n	8002f70 <HAL_UART_Receive+0xa8>
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	691b      	ldr	r3, [r3, #16]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d104      	bne.n	8002f66 <HAL_UART_Receive+0x9e>
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	2260      	movs	r2, #96	; 0x60
 8002f60:	4949      	ldr	r1, [pc, #292]	; (8003088 <HAL_UART_Receive+0x1c0>)
 8002f62:	5299      	strh	r1, [r3, r2]
 8002f64:	e02e      	b.n	8002fc4 <HAL_UART_Receive+0xfc>
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	2260      	movs	r2, #96	; 0x60
 8002f6a:	21ff      	movs	r1, #255	; 0xff
 8002f6c:	5299      	strh	r1, [r3, r2]
 8002f6e:	e029      	b.n	8002fc4 <HAL_UART_Receive+0xfc>
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	689b      	ldr	r3, [r3, #8]
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d10d      	bne.n	8002f94 <HAL_UART_Receive+0xcc>
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	691b      	ldr	r3, [r3, #16]
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d104      	bne.n	8002f8a <HAL_UART_Receive+0xc2>
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	2260      	movs	r2, #96	; 0x60
 8002f84:	21ff      	movs	r1, #255	; 0xff
 8002f86:	5299      	strh	r1, [r3, r2]
 8002f88:	e01c      	b.n	8002fc4 <HAL_UART_Receive+0xfc>
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	2260      	movs	r2, #96	; 0x60
 8002f8e:	217f      	movs	r1, #127	; 0x7f
 8002f90:	5299      	strh	r1, [r3, r2]
 8002f92:	e017      	b.n	8002fc4 <HAL_UART_Receive+0xfc>
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	689a      	ldr	r2, [r3, #8]
 8002f98:	2380      	movs	r3, #128	; 0x80
 8002f9a:	055b      	lsls	r3, r3, #21
 8002f9c:	429a      	cmp	r2, r3
 8002f9e:	d10d      	bne.n	8002fbc <HAL_UART_Receive+0xf4>
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	691b      	ldr	r3, [r3, #16]
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d104      	bne.n	8002fb2 <HAL_UART_Receive+0xea>
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	2260      	movs	r2, #96	; 0x60
 8002fac:	217f      	movs	r1, #127	; 0x7f
 8002fae:	5299      	strh	r1, [r3, r2]
 8002fb0:	e008      	b.n	8002fc4 <HAL_UART_Receive+0xfc>
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	2260      	movs	r2, #96	; 0x60
 8002fb6:	213f      	movs	r1, #63	; 0x3f
 8002fb8:	5299      	strh	r1, [r3, r2]
 8002fba:	e003      	b.n	8002fc4 <HAL_UART_Receive+0xfc>
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	2260      	movs	r2, #96	; 0x60
 8002fc0:	2100      	movs	r1, #0
 8002fc2:	5299      	strh	r1, [r3, r2]
    uhMask = huart->Mask;
 8002fc4:	2312      	movs	r3, #18
 8002fc6:	18fb      	adds	r3, r7, r3
 8002fc8:	68fa      	ldr	r2, [r7, #12]
 8002fca:	2160      	movs	r1, #96	; 0x60
 8002fcc:	5a52      	ldrh	r2, [r2, r1]
 8002fce:	801a      	strh	r2, [r3, #0]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	689a      	ldr	r2, [r3, #8]
 8002fd4:	2380      	movs	r3, #128	; 0x80
 8002fd6:	015b      	lsls	r3, r3, #5
 8002fd8:	429a      	cmp	r2, r3
 8002fda:	d108      	bne.n	8002fee <HAL_UART_Receive+0x126>
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	691b      	ldr	r3, [r3, #16]
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d104      	bne.n	8002fee <HAL_UART_Receive+0x126>
    {
      pdata8bits  = NULL;
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002fe8:	68bb      	ldr	r3, [r7, #8]
 8002fea:	61bb      	str	r3, [r7, #24]
 8002fec:	e003      	b.n	8002ff6 <HAL_UART_Receive+0x12e>
    }
    else
    {
      pdata8bits  = pData;
 8002fee:	68bb      	ldr	r3, [r7, #8]
 8002ff0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8002ff6:	e036      	b.n	8003066 <HAL_UART_Receive+0x19e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002ff8:	697a      	ldr	r2, [r7, #20]
 8002ffa:	68f8      	ldr	r0, [r7, #12]
 8002ffc:	683b      	ldr	r3, [r7, #0]
 8002ffe:	9300      	str	r3, [sp, #0]
 8003000:	0013      	movs	r3, r2
 8003002:	2200      	movs	r2, #0
 8003004:	2120      	movs	r1, #32
 8003006:	f000 fc99 	bl	800393c <UART_WaitOnFlagUntilTimeout>
 800300a:	1e03      	subs	r3, r0, #0
 800300c:	d001      	beq.n	8003012 <HAL_UART_Receive+0x14a>
      {
        return HAL_TIMEOUT;
 800300e:	2303      	movs	r3, #3
 8003010:	e036      	b.n	8003080 <HAL_UART_Receive+0x1b8>
      }
      if (pdata8bits == NULL)
 8003012:	69fb      	ldr	r3, [r7, #28]
 8003014:	2b00      	cmp	r3, #0
 8003016:	d10e      	bne.n	8003036 <HAL_UART_Receive+0x16e>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800301e:	b29b      	uxth	r3, r3
 8003020:	2212      	movs	r2, #18
 8003022:	18ba      	adds	r2, r7, r2
 8003024:	8812      	ldrh	r2, [r2, #0]
 8003026:	4013      	ands	r3, r2
 8003028:	b29a      	uxth	r2, r3
 800302a:	69bb      	ldr	r3, [r7, #24]
 800302c:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800302e:	69bb      	ldr	r3, [r7, #24]
 8003030:	3302      	adds	r3, #2
 8003032:	61bb      	str	r3, [r7, #24]
 8003034:	e00e      	b.n	8003054 <HAL_UART_Receive+0x18c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800303c:	b2db      	uxtb	r3, r3
 800303e:	2212      	movs	r2, #18
 8003040:	18ba      	adds	r2, r7, r2
 8003042:	8812      	ldrh	r2, [r2, #0]
 8003044:	b2d2      	uxtb	r2, r2
 8003046:	4013      	ands	r3, r2
 8003048:	b2da      	uxtb	r2, r3
 800304a:	69fb      	ldr	r3, [r7, #28]
 800304c:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800304e:	69fb      	ldr	r3, [r7, #28]
 8003050:	3301      	adds	r3, #1
 8003052:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	225e      	movs	r2, #94	; 0x5e
 8003058:	5a9b      	ldrh	r3, [r3, r2]
 800305a:	b29b      	uxth	r3, r3
 800305c:	3b01      	subs	r3, #1
 800305e:	b299      	uxth	r1, r3
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	225e      	movs	r2, #94	; 0x5e
 8003064:	5299      	strh	r1, [r3, r2]
    while (huart->RxXferCount > 0U)
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	225e      	movs	r2, #94	; 0x5e
 800306a:	5a9b      	ldrh	r3, [r3, r2]
 800306c:	b29b      	uxth	r3, r3
 800306e:	2b00      	cmp	r3, #0
 8003070:	d1c2      	bne.n	8002ff8 <HAL_UART_Receive+0x130>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	228c      	movs	r2, #140	; 0x8c
 8003076:	2120      	movs	r1, #32
 8003078:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 800307a:	2300      	movs	r3, #0
 800307c:	e000      	b.n	8003080 <HAL_UART_Receive+0x1b8>
  }
  else
  {
    return HAL_BUSY;
 800307e:	2302      	movs	r3, #2
  }
}
 8003080:	0018      	movs	r0, r3
 8003082:	46bd      	mov	sp, r7
 8003084:	b008      	add	sp, #32
 8003086:	bd80      	pop	{r7, pc}
 8003088:	000001ff 	.word	0x000001ff

0800308c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800308c:	b5b0      	push	{r4, r5, r7, lr}
 800308e:	b090      	sub	sp, #64	; 0x40
 8003090:	af00      	add	r7, sp, #0
 8003092:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003094:	231a      	movs	r3, #26
 8003096:	2220      	movs	r2, #32
 8003098:	189b      	adds	r3, r3, r2
 800309a:	19db      	adds	r3, r3, r7
 800309c:	2200      	movs	r2, #0
 800309e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80030a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030a2:	689a      	ldr	r2, [r3, #8]
 80030a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030a6:	691b      	ldr	r3, [r3, #16]
 80030a8:	431a      	orrs	r2, r3
 80030aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ac:	695b      	ldr	r3, [r3, #20]
 80030ae:	431a      	orrs	r2, r3
 80030b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030b2:	69db      	ldr	r3, [r3, #28]
 80030b4:	4313      	orrs	r3, r2
 80030b6:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80030b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	4ac1      	ldr	r2, [pc, #772]	; (80033c4 <UART_SetConfig+0x338>)
 80030c0:	4013      	ands	r3, r2
 80030c2:	0019      	movs	r1, r3
 80030c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030c6:	681a      	ldr	r2, [r3, #0]
 80030c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80030ca:	430b      	orrs	r3, r1
 80030cc:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80030ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	685b      	ldr	r3, [r3, #4]
 80030d4:	4abc      	ldr	r2, [pc, #752]	; (80033c8 <UART_SetConfig+0x33c>)
 80030d6:	4013      	ands	r3, r2
 80030d8:	0018      	movs	r0, r3
 80030da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030dc:	68d9      	ldr	r1, [r3, #12]
 80030de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030e0:	681a      	ldr	r2, [r3, #0]
 80030e2:	0003      	movs	r3, r0
 80030e4:	430b      	orrs	r3, r1
 80030e6:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80030e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ea:	699b      	ldr	r3, [r3, #24]
 80030ec:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80030ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	4ab6      	ldr	r2, [pc, #728]	; (80033cc <UART_SetConfig+0x340>)
 80030f4:	4293      	cmp	r3, r2
 80030f6:	d009      	beq.n	800310c <UART_SetConfig+0x80>
 80030f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	4ab4      	ldr	r2, [pc, #720]	; (80033d0 <UART_SetConfig+0x344>)
 80030fe:	4293      	cmp	r3, r2
 8003100:	d004      	beq.n	800310c <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003104:	6a1b      	ldr	r3, [r3, #32]
 8003106:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003108:	4313      	orrs	r3, r2
 800310a:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800310c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	689b      	ldr	r3, [r3, #8]
 8003112:	4ab0      	ldr	r2, [pc, #704]	; (80033d4 <UART_SetConfig+0x348>)
 8003114:	4013      	ands	r3, r2
 8003116:	0019      	movs	r1, r3
 8003118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800311a:	681a      	ldr	r2, [r3, #0]
 800311c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800311e:	430b      	orrs	r3, r1
 8003120:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003128:	220f      	movs	r2, #15
 800312a:	4393      	bics	r3, r2
 800312c:	0018      	movs	r0, r3
 800312e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003130:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003134:	681a      	ldr	r2, [r3, #0]
 8003136:	0003      	movs	r3, r0
 8003138:	430b      	orrs	r3, r1
 800313a:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800313c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	4aa5      	ldr	r2, [pc, #660]	; (80033d8 <UART_SetConfig+0x34c>)
 8003142:	4293      	cmp	r3, r2
 8003144:	d131      	bne.n	80031aa <UART_SetConfig+0x11e>
 8003146:	4ba5      	ldr	r3, [pc, #660]	; (80033dc <UART_SetConfig+0x350>)
 8003148:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800314a:	2203      	movs	r2, #3
 800314c:	4013      	ands	r3, r2
 800314e:	2b03      	cmp	r3, #3
 8003150:	d01d      	beq.n	800318e <UART_SetConfig+0x102>
 8003152:	d823      	bhi.n	800319c <UART_SetConfig+0x110>
 8003154:	2b02      	cmp	r3, #2
 8003156:	d00c      	beq.n	8003172 <UART_SetConfig+0xe6>
 8003158:	d820      	bhi.n	800319c <UART_SetConfig+0x110>
 800315a:	2b00      	cmp	r3, #0
 800315c:	d002      	beq.n	8003164 <UART_SetConfig+0xd8>
 800315e:	2b01      	cmp	r3, #1
 8003160:	d00e      	beq.n	8003180 <UART_SetConfig+0xf4>
 8003162:	e01b      	b.n	800319c <UART_SetConfig+0x110>
 8003164:	231b      	movs	r3, #27
 8003166:	2220      	movs	r2, #32
 8003168:	189b      	adds	r3, r3, r2
 800316a:	19db      	adds	r3, r3, r7
 800316c:	2200      	movs	r2, #0
 800316e:	701a      	strb	r2, [r3, #0]
 8003170:	e154      	b.n	800341c <UART_SetConfig+0x390>
 8003172:	231b      	movs	r3, #27
 8003174:	2220      	movs	r2, #32
 8003176:	189b      	adds	r3, r3, r2
 8003178:	19db      	adds	r3, r3, r7
 800317a:	2202      	movs	r2, #2
 800317c:	701a      	strb	r2, [r3, #0]
 800317e:	e14d      	b.n	800341c <UART_SetConfig+0x390>
 8003180:	231b      	movs	r3, #27
 8003182:	2220      	movs	r2, #32
 8003184:	189b      	adds	r3, r3, r2
 8003186:	19db      	adds	r3, r3, r7
 8003188:	2204      	movs	r2, #4
 800318a:	701a      	strb	r2, [r3, #0]
 800318c:	e146      	b.n	800341c <UART_SetConfig+0x390>
 800318e:	231b      	movs	r3, #27
 8003190:	2220      	movs	r2, #32
 8003192:	189b      	adds	r3, r3, r2
 8003194:	19db      	adds	r3, r3, r7
 8003196:	2208      	movs	r2, #8
 8003198:	701a      	strb	r2, [r3, #0]
 800319a:	e13f      	b.n	800341c <UART_SetConfig+0x390>
 800319c:	231b      	movs	r3, #27
 800319e:	2220      	movs	r2, #32
 80031a0:	189b      	adds	r3, r3, r2
 80031a2:	19db      	adds	r3, r3, r7
 80031a4:	2210      	movs	r2, #16
 80031a6:	701a      	strb	r2, [r3, #0]
 80031a8:	e138      	b.n	800341c <UART_SetConfig+0x390>
 80031aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	4a8c      	ldr	r2, [pc, #560]	; (80033e0 <UART_SetConfig+0x354>)
 80031b0:	4293      	cmp	r3, r2
 80031b2:	d131      	bne.n	8003218 <UART_SetConfig+0x18c>
 80031b4:	4b89      	ldr	r3, [pc, #548]	; (80033dc <UART_SetConfig+0x350>)
 80031b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031b8:	220c      	movs	r2, #12
 80031ba:	4013      	ands	r3, r2
 80031bc:	2b0c      	cmp	r3, #12
 80031be:	d01d      	beq.n	80031fc <UART_SetConfig+0x170>
 80031c0:	d823      	bhi.n	800320a <UART_SetConfig+0x17e>
 80031c2:	2b08      	cmp	r3, #8
 80031c4:	d00c      	beq.n	80031e0 <UART_SetConfig+0x154>
 80031c6:	d820      	bhi.n	800320a <UART_SetConfig+0x17e>
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d002      	beq.n	80031d2 <UART_SetConfig+0x146>
 80031cc:	2b04      	cmp	r3, #4
 80031ce:	d00e      	beq.n	80031ee <UART_SetConfig+0x162>
 80031d0:	e01b      	b.n	800320a <UART_SetConfig+0x17e>
 80031d2:	231b      	movs	r3, #27
 80031d4:	2220      	movs	r2, #32
 80031d6:	189b      	adds	r3, r3, r2
 80031d8:	19db      	adds	r3, r3, r7
 80031da:	2200      	movs	r2, #0
 80031dc:	701a      	strb	r2, [r3, #0]
 80031de:	e11d      	b.n	800341c <UART_SetConfig+0x390>
 80031e0:	231b      	movs	r3, #27
 80031e2:	2220      	movs	r2, #32
 80031e4:	189b      	adds	r3, r3, r2
 80031e6:	19db      	adds	r3, r3, r7
 80031e8:	2202      	movs	r2, #2
 80031ea:	701a      	strb	r2, [r3, #0]
 80031ec:	e116      	b.n	800341c <UART_SetConfig+0x390>
 80031ee:	231b      	movs	r3, #27
 80031f0:	2220      	movs	r2, #32
 80031f2:	189b      	adds	r3, r3, r2
 80031f4:	19db      	adds	r3, r3, r7
 80031f6:	2204      	movs	r2, #4
 80031f8:	701a      	strb	r2, [r3, #0]
 80031fa:	e10f      	b.n	800341c <UART_SetConfig+0x390>
 80031fc:	231b      	movs	r3, #27
 80031fe:	2220      	movs	r2, #32
 8003200:	189b      	adds	r3, r3, r2
 8003202:	19db      	adds	r3, r3, r7
 8003204:	2208      	movs	r2, #8
 8003206:	701a      	strb	r2, [r3, #0]
 8003208:	e108      	b.n	800341c <UART_SetConfig+0x390>
 800320a:	231b      	movs	r3, #27
 800320c:	2220      	movs	r2, #32
 800320e:	189b      	adds	r3, r3, r2
 8003210:	19db      	adds	r3, r3, r7
 8003212:	2210      	movs	r2, #16
 8003214:	701a      	strb	r2, [r3, #0]
 8003216:	e101      	b.n	800341c <UART_SetConfig+0x390>
 8003218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	4a71      	ldr	r2, [pc, #452]	; (80033e4 <UART_SetConfig+0x358>)
 800321e:	4293      	cmp	r3, r2
 8003220:	d131      	bne.n	8003286 <UART_SetConfig+0x1fa>
 8003222:	4b6e      	ldr	r3, [pc, #440]	; (80033dc <UART_SetConfig+0x350>)
 8003224:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003226:	2230      	movs	r2, #48	; 0x30
 8003228:	4013      	ands	r3, r2
 800322a:	2b30      	cmp	r3, #48	; 0x30
 800322c:	d01d      	beq.n	800326a <UART_SetConfig+0x1de>
 800322e:	d823      	bhi.n	8003278 <UART_SetConfig+0x1ec>
 8003230:	2b20      	cmp	r3, #32
 8003232:	d00c      	beq.n	800324e <UART_SetConfig+0x1c2>
 8003234:	d820      	bhi.n	8003278 <UART_SetConfig+0x1ec>
 8003236:	2b00      	cmp	r3, #0
 8003238:	d002      	beq.n	8003240 <UART_SetConfig+0x1b4>
 800323a:	2b10      	cmp	r3, #16
 800323c:	d00e      	beq.n	800325c <UART_SetConfig+0x1d0>
 800323e:	e01b      	b.n	8003278 <UART_SetConfig+0x1ec>
 8003240:	231b      	movs	r3, #27
 8003242:	2220      	movs	r2, #32
 8003244:	189b      	adds	r3, r3, r2
 8003246:	19db      	adds	r3, r3, r7
 8003248:	2200      	movs	r2, #0
 800324a:	701a      	strb	r2, [r3, #0]
 800324c:	e0e6      	b.n	800341c <UART_SetConfig+0x390>
 800324e:	231b      	movs	r3, #27
 8003250:	2220      	movs	r2, #32
 8003252:	189b      	adds	r3, r3, r2
 8003254:	19db      	adds	r3, r3, r7
 8003256:	2202      	movs	r2, #2
 8003258:	701a      	strb	r2, [r3, #0]
 800325a:	e0df      	b.n	800341c <UART_SetConfig+0x390>
 800325c:	231b      	movs	r3, #27
 800325e:	2220      	movs	r2, #32
 8003260:	189b      	adds	r3, r3, r2
 8003262:	19db      	adds	r3, r3, r7
 8003264:	2204      	movs	r2, #4
 8003266:	701a      	strb	r2, [r3, #0]
 8003268:	e0d8      	b.n	800341c <UART_SetConfig+0x390>
 800326a:	231b      	movs	r3, #27
 800326c:	2220      	movs	r2, #32
 800326e:	189b      	adds	r3, r3, r2
 8003270:	19db      	adds	r3, r3, r7
 8003272:	2208      	movs	r2, #8
 8003274:	701a      	strb	r2, [r3, #0]
 8003276:	e0d1      	b.n	800341c <UART_SetConfig+0x390>
 8003278:	231b      	movs	r3, #27
 800327a:	2220      	movs	r2, #32
 800327c:	189b      	adds	r3, r3, r2
 800327e:	19db      	adds	r3, r3, r7
 8003280:	2210      	movs	r2, #16
 8003282:	701a      	strb	r2, [r3, #0]
 8003284:	e0ca      	b.n	800341c <UART_SetConfig+0x390>
 8003286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	4a57      	ldr	r2, [pc, #348]	; (80033e8 <UART_SetConfig+0x35c>)
 800328c:	4293      	cmp	r3, r2
 800328e:	d106      	bne.n	800329e <UART_SetConfig+0x212>
 8003290:	231b      	movs	r3, #27
 8003292:	2220      	movs	r2, #32
 8003294:	189b      	adds	r3, r3, r2
 8003296:	19db      	adds	r3, r3, r7
 8003298:	2200      	movs	r2, #0
 800329a:	701a      	strb	r2, [r3, #0]
 800329c:	e0be      	b.n	800341c <UART_SetConfig+0x390>
 800329e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	4a52      	ldr	r2, [pc, #328]	; (80033ec <UART_SetConfig+0x360>)
 80032a4:	4293      	cmp	r3, r2
 80032a6:	d106      	bne.n	80032b6 <UART_SetConfig+0x22a>
 80032a8:	231b      	movs	r3, #27
 80032aa:	2220      	movs	r2, #32
 80032ac:	189b      	adds	r3, r3, r2
 80032ae:	19db      	adds	r3, r3, r7
 80032b0:	2200      	movs	r2, #0
 80032b2:	701a      	strb	r2, [r3, #0]
 80032b4:	e0b2      	b.n	800341c <UART_SetConfig+0x390>
 80032b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	4a4d      	ldr	r2, [pc, #308]	; (80033f0 <UART_SetConfig+0x364>)
 80032bc:	4293      	cmp	r3, r2
 80032be:	d106      	bne.n	80032ce <UART_SetConfig+0x242>
 80032c0:	231b      	movs	r3, #27
 80032c2:	2220      	movs	r2, #32
 80032c4:	189b      	adds	r3, r3, r2
 80032c6:	19db      	adds	r3, r3, r7
 80032c8:	2200      	movs	r2, #0
 80032ca:	701a      	strb	r2, [r3, #0]
 80032cc:	e0a6      	b.n	800341c <UART_SetConfig+0x390>
 80032ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	4a3e      	ldr	r2, [pc, #248]	; (80033cc <UART_SetConfig+0x340>)
 80032d4:	4293      	cmp	r3, r2
 80032d6:	d13e      	bne.n	8003356 <UART_SetConfig+0x2ca>
 80032d8:	4b40      	ldr	r3, [pc, #256]	; (80033dc <UART_SetConfig+0x350>)
 80032da:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80032dc:	23c0      	movs	r3, #192	; 0xc0
 80032de:	011b      	lsls	r3, r3, #4
 80032e0:	4013      	ands	r3, r2
 80032e2:	22c0      	movs	r2, #192	; 0xc0
 80032e4:	0112      	lsls	r2, r2, #4
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d027      	beq.n	800333a <UART_SetConfig+0x2ae>
 80032ea:	22c0      	movs	r2, #192	; 0xc0
 80032ec:	0112      	lsls	r2, r2, #4
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d82a      	bhi.n	8003348 <UART_SetConfig+0x2bc>
 80032f2:	2280      	movs	r2, #128	; 0x80
 80032f4:	0112      	lsls	r2, r2, #4
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d011      	beq.n	800331e <UART_SetConfig+0x292>
 80032fa:	2280      	movs	r2, #128	; 0x80
 80032fc:	0112      	lsls	r2, r2, #4
 80032fe:	4293      	cmp	r3, r2
 8003300:	d822      	bhi.n	8003348 <UART_SetConfig+0x2bc>
 8003302:	2b00      	cmp	r3, #0
 8003304:	d004      	beq.n	8003310 <UART_SetConfig+0x284>
 8003306:	2280      	movs	r2, #128	; 0x80
 8003308:	00d2      	lsls	r2, r2, #3
 800330a:	4293      	cmp	r3, r2
 800330c:	d00e      	beq.n	800332c <UART_SetConfig+0x2a0>
 800330e:	e01b      	b.n	8003348 <UART_SetConfig+0x2bc>
 8003310:	231b      	movs	r3, #27
 8003312:	2220      	movs	r2, #32
 8003314:	189b      	adds	r3, r3, r2
 8003316:	19db      	adds	r3, r3, r7
 8003318:	2200      	movs	r2, #0
 800331a:	701a      	strb	r2, [r3, #0]
 800331c:	e07e      	b.n	800341c <UART_SetConfig+0x390>
 800331e:	231b      	movs	r3, #27
 8003320:	2220      	movs	r2, #32
 8003322:	189b      	adds	r3, r3, r2
 8003324:	19db      	adds	r3, r3, r7
 8003326:	2202      	movs	r2, #2
 8003328:	701a      	strb	r2, [r3, #0]
 800332a:	e077      	b.n	800341c <UART_SetConfig+0x390>
 800332c:	231b      	movs	r3, #27
 800332e:	2220      	movs	r2, #32
 8003330:	189b      	adds	r3, r3, r2
 8003332:	19db      	adds	r3, r3, r7
 8003334:	2204      	movs	r2, #4
 8003336:	701a      	strb	r2, [r3, #0]
 8003338:	e070      	b.n	800341c <UART_SetConfig+0x390>
 800333a:	231b      	movs	r3, #27
 800333c:	2220      	movs	r2, #32
 800333e:	189b      	adds	r3, r3, r2
 8003340:	19db      	adds	r3, r3, r7
 8003342:	2208      	movs	r2, #8
 8003344:	701a      	strb	r2, [r3, #0]
 8003346:	e069      	b.n	800341c <UART_SetConfig+0x390>
 8003348:	231b      	movs	r3, #27
 800334a:	2220      	movs	r2, #32
 800334c:	189b      	adds	r3, r3, r2
 800334e:	19db      	adds	r3, r3, r7
 8003350:	2210      	movs	r2, #16
 8003352:	701a      	strb	r2, [r3, #0]
 8003354:	e062      	b.n	800341c <UART_SetConfig+0x390>
 8003356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	4a1d      	ldr	r2, [pc, #116]	; (80033d0 <UART_SetConfig+0x344>)
 800335c:	4293      	cmp	r3, r2
 800335e:	d157      	bne.n	8003410 <UART_SetConfig+0x384>
 8003360:	4b1e      	ldr	r3, [pc, #120]	; (80033dc <UART_SetConfig+0x350>)
 8003362:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003364:	23c0      	movs	r3, #192	; 0xc0
 8003366:	009b      	lsls	r3, r3, #2
 8003368:	4013      	ands	r3, r2
 800336a:	22c0      	movs	r2, #192	; 0xc0
 800336c:	0092      	lsls	r2, r2, #2
 800336e:	4293      	cmp	r3, r2
 8003370:	d040      	beq.n	80033f4 <UART_SetConfig+0x368>
 8003372:	22c0      	movs	r2, #192	; 0xc0
 8003374:	0092      	lsls	r2, r2, #2
 8003376:	4293      	cmp	r3, r2
 8003378:	d843      	bhi.n	8003402 <UART_SetConfig+0x376>
 800337a:	2280      	movs	r2, #128	; 0x80
 800337c:	0092      	lsls	r2, r2, #2
 800337e:	4293      	cmp	r3, r2
 8003380:	d011      	beq.n	80033a6 <UART_SetConfig+0x31a>
 8003382:	2280      	movs	r2, #128	; 0x80
 8003384:	0092      	lsls	r2, r2, #2
 8003386:	4293      	cmp	r3, r2
 8003388:	d83b      	bhi.n	8003402 <UART_SetConfig+0x376>
 800338a:	2b00      	cmp	r3, #0
 800338c:	d004      	beq.n	8003398 <UART_SetConfig+0x30c>
 800338e:	2280      	movs	r2, #128	; 0x80
 8003390:	0052      	lsls	r2, r2, #1
 8003392:	4293      	cmp	r3, r2
 8003394:	d00e      	beq.n	80033b4 <UART_SetConfig+0x328>
 8003396:	e034      	b.n	8003402 <UART_SetConfig+0x376>
 8003398:	231b      	movs	r3, #27
 800339a:	2220      	movs	r2, #32
 800339c:	189b      	adds	r3, r3, r2
 800339e:	19db      	adds	r3, r3, r7
 80033a0:	2200      	movs	r2, #0
 80033a2:	701a      	strb	r2, [r3, #0]
 80033a4:	e03a      	b.n	800341c <UART_SetConfig+0x390>
 80033a6:	231b      	movs	r3, #27
 80033a8:	2220      	movs	r2, #32
 80033aa:	189b      	adds	r3, r3, r2
 80033ac:	19db      	adds	r3, r3, r7
 80033ae:	2202      	movs	r2, #2
 80033b0:	701a      	strb	r2, [r3, #0]
 80033b2:	e033      	b.n	800341c <UART_SetConfig+0x390>
 80033b4:	231b      	movs	r3, #27
 80033b6:	2220      	movs	r2, #32
 80033b8:	189b      	adds	r3, r3, r2
 80033ba:	19db      	adds	r3, r3, r7
 80033bc:	2204      	movs	r2, #4
 80033be:	701a      	strb	r2, [r3, #0]
 80033c0:	e02c      	b.n	800341c <UART_SetConfig+0x390>
 80033c2:	46c0      	nop			; (mov r8, r8)
 80033c4:	cfff69f3 	.word	0xcfff69f3
 80033c8:	ffffcfff 	.word	0xffffcfff
 80033cc:	40008000 	.word	0x40008000
 80033d0:	40008400 	.word	0x40008400
 80033d4:	11fff4ff 	.word	0x11fff4ff
 80033d8:	40013800 	.word	0x40013800
 80033dc:	40021000 	.word	0x40021000
 80033e0:	40004400 	.word	0x40004400
 80033e4:	40004800 	.word	0x40004800
 80033e8:	40004c00 	.word	0x40004c00
 80033ec:	40005000 	.word	0x40005000
 80033f0:	40013c00 	.word	0x40013c00
 80033f4:	231b      	movs	r3, #27
 80033f6:	2220      	movs	r2, #32
 80033f8:	189b      	adds	r3, r3, r2
 80033fa:	19db      	adds	r3, r3, r7
 80033fc:	2208      	movs	r2, #8
 80033fe:	701a      	strb	r2, [r3, #0]
 8003400:	e00c      	b.n	800341c <UART_SetConfig+0x390>
 8003402:	231b      	movs	r3, #27
 8003404:	2220      	movs	r2, #32
 8003406:	189b      	adds	r3, r3, r2
 8003408:	19db      	adds	r3, r3, r7
 800340a:	2210      	movs	r2, #16
 800340c:	701a      	strb	r2, [r3, #0]
 800340e:	e005      	b.n	800341c <UART_SetConfig+0x390>
 8003410:	231b      	movs	r3, #27
 8003412:	2220      	movs	r2, #32
 8003414:	189b      	adds	r3, r3, r2
 8003416:	19db      	adds	r3, r3, r7
 8003418:	2210      	movs	r2, #16
 800341a:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800341c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	4ac1      	ldr	r2, [pc, #772]	; (8003728 <UART_SetConfig+0x69c>)
 8003422:	4293      	cmp	r3, r2
 8003424:	d005      	beq.n	8003432 <UART_SetConfig+0x3a6>
 8003426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	4ac0      	ldr	r2, [pc, #768]	; (800372c <UART_SetConfig+0x6a0>)
 800342c:	4293      	cmp	r3, r2
 800342e:	d000      	beq.n	8003432 <UART_SetConfig+0x3a6>
 8003430:	e093      	b.n	800355a <UART_SetConfig+0x4ce>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003432:	231b      	movs	r3, #27
 8003434:	2220      	movs	r2, #32
 8003436:	189b      	adds	r3, r3, r2
 8003438:	19db      	adds	r3, r3, r7
 800343a:	781b      	ldrb	r3, [r3, #0]
 800343c:	2b08      	cmp	r3, #8
 800343e:	d015      	beq.n	800346c <UART_SetConfig+0x3e0>
 8003440:	dc18      	bgt.n	8003474 <UART_SetConfig+0x3e8>
 8003442:	2b04      	cmp	r3, #4
 8003444:	d00d      	beq.n	8003462 <UART_SetConfig+0x3d6>
 8003446:	dc15      	bgt.n	8003474 <UART_SetConfig+0x3e8>
 8003448:	2b00      	cmp	r3, #0
 800344a:	d002      	beq.n	8003452 <UART_SetConfig+0x3c6>
 800344c:	2b02      	cmp	r3, #2
 800344e:	d005      	beq.n	800345c <UART_SetConfig+0x3d0>
 8003450:	e010      	b.n	8003474 <UART_SetConfig+0x3e8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003452:	f7fe fe7b 	bl	800214c <HAL_RCC_GetPCLK1Freq>
 8003456:	0003      	movs	r3, r0
 8003458:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800345a:	e014      	b.n	8003486 <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800345c:	4bb4      	ldr	r3, [pc, #720]	; (8003730 <UART_SetConfig+0x6a4>)
 800345e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003460:	e011      	b.n	8003486 <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003462:	f7fe fde7 	bl	8002034 <HAL_RCC_GetSysClockFreq>
 8003466:	0003      	movs	r3, r0
 8003468:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800346a:	e00c      	b.n	8003486 <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800346c:	2380      	movs	r3, #128	; 0x80
 800346e:	021b      	lsls	r3, r3, #8
 8003470:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003472:	e008      	b.n	8003486 <UART_SetConfig+0x3fa>
      default:
        pclk = 0U;
 8003474:	2300      	movs	r3, #0
 8003476:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8003478:	231a      	movs	r3, #26
 800347a:	2220      	movs	r2, #32
 800347c:	189b      	adds	r3, r3, r2
 800347e:	19db      	adds	r3, r3, r7
 8003480:	2201      	movs	r2, #1
 8003482:	701a      	strb	r2, [r3, #0]
        break;
 8003484:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003486:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003488:	2b00      	cmp	r3, #0
 800348a:	d100      	bne.n	800348e <UART_SetConfig+0x402>
 800348c:	e135      	b.n	80036fa <UART_SetConfig+0x66e>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800348e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003490:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003492:	4ba8      	ldr	r3, [pc, #672]	; (8003734 <UART_SetConfig+0x6a8>)
 8003494:	0052      	lsls	r2, r2, #1
 8003496:	5ad3      	ldrh	r3, [r2, r3]
 8003498:	0019      	movs	r1, r3
 800349a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800349c:	f7fc fe3a 	bl	8000114 <__udivsi3>
 80034a0:	0003      	movs	r3, r0
 80034a2:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80034a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034a6:	685a      	ldr	r2, [r3, #4]
 80034a8:	0013      	movs	r3, r2
 80034aa:	005b      	lsls	r3, r3, #1
 80034ac:	189b      	adds	r3, r3, r2
 80034ae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80034b0:	429a      	cmp	r2, r3
 80034b2:	d305      	bcc.n	80034c0 <UART_SetConfig+0x434>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80034b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034b6:	685b      	ldr	r3, [r3, #4]
 80034b8:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80034ba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80034bc:	429a      	cmp	r2, r3
 80034be:	d906      	bls.n	80034ce <UART_SetConfig+0x442>
      {
        ret = HAL_ERROR;
 80034c0:	231a      	movs	r3, #26
 80034c2:	2220      	movs	r2, #32
 80034c4:	189b      	adds	r3, r3, r2
 80034c6:	19db      	adds	r3, r3, r7
 80034c8:	2201      	movs	r2, #1
 80034ca:	701a      	strb	r2, [r3, #0]
 80034cc:	e044      	b.n	8003558 <UART_SetConfig+0x4cc>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80034ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034d0:	61bb      	str	r3, [r7, #24]
 80034d2:	2300      	movs	r3, #0
 80034d4:	61fb      	str	r3, [r7, #28]
 80034d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034d8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80034da:	4b96      	ldr	r3, [pc, #600]	; (8003734 <UART_SetConfig+0x6a8>)
 80034dc:	0052      	lsls	r2, r2, #1
 80034de:	5ad3      	ldrh	r3, [r2, r3]
 80034e0:	613b      	str	r3, [r7, #16]
 80034e2:	2300      	movs	r3, #0
 80034e4:	617b      	str	r3, [r7, #20]
 80034e6:	693a      	ldr	r2, [r7, #16]
 80034e8:	697b      	ldr	r3, [r7, #20]
 80034ea:	69b8      	ldr	r0, [r7, #24]
 80034ec:	69f9      	ldr	r1, [r7, #28]
 80034ee:	f7fc ff87 	bl	8000400 <__aeabi_uldivmod>
 80034f2:	0002      	movs	r2, r0
 80034f4:	000b      	movs	r3, r1
 80034f6:	0e11      	lsrs	r1, r2, #24
 80034f8:	021d      	lsls	r5, r3, #8
 80034fa:	430d      	orrs	r5, r1
 80034fc:	0214      	lsls	r4, r2, #8
 80034fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003500:	685b      	ldr	r3, [r3, #4]
 8003502:	085b      	lsrs	r3, r3, #1
 8003504:	60bb      	str	r3, [r7, #8]
 8003506:	2300      	movs	r3, #0
 8003508:	60fb      	str	r3, [r7, #12]
 800350a:	68b8      	ldr	r0, [r7, #8]
 800350c:	68f9      	ldr	r1, [r7, #12]
 800350e:	1900      	adds	r0, r0, r4
 8003510:	4169      	adcs	r1, r5
 8003512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003514:	685b      	ldr	r3, [r3, #4]
 8003516:	603b      	str	r3, [r7, #0]
 8003518:	2300      	movs	r3, #0
 800351a:	607b      	str	r3, [r7, #4]
 800351c:	683a      	ldr	r2, [r7, #0]
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	f7fc ff6e 	bl	8000400 <__aeabi_uldivmod>
 8003524:	0002      	movs	r2, r0
 8003526:	000b      	movs	r3, r1
 8003528:	0013      	movs	r3, r2
 800352a:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800352c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800352e:	23c0      	movs	r3, #192	; 0xc0
 8003530:	009b      	lsls	r3, r3, #2
 8003532:	429a      	cmp	r2, r3
 8003534:	d309      	bcc.n	800354a <UART_SetConfig+0x4be>
 8003536:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003538:	2380      	movs	r3, #128	; 0x80
 800353a:	035b      	lsls	r3, r3, #13
 800353c:	429a      	cmp	r2, r3
 800353e:	d204      	bcs.n	800354a <UART_SetConfig+0x4be>
        {
          huart->Instance->BRR = usartdiv;
 8003540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003546:	60da      	str	r2, [r3, #12]
 8003548:	e006      	b.n	8003558 <UART_SetConfig+0x4cc>
        }
        else
        {
          ret = HAL_ERROR;
 800354a:	231a      	movs	r3, #26
 800354c:	2220      	movs	r2, #32
 800354e:	189b      	adds	r3, r3, r2
 8003550:	19db      	adds	r3, r3, r7
 8003552:	2201      	movs	r2, #1
 8003554:	701a      	strb	r2, [r3, #0]
    if (pclk != 0U)
 8003556:	e0d0      	b.n	80036fa <UART_SetConfig+0x66e>
 8003558:	e0cf      	b.n	80036fa <UART_SetConfig+0x66e>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800355a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800355c:	69da      	ldr	r2, [r3, #28]
 800355e:	2380      	movs	r3, #128	; 0x80
 8003560:	021b      	lsls	r3, r3, #8
 8003562:	429a      	cmp	r2, r3
 8003564:	d000      	beq.n	8003568 <UART_SetConfig+0x4dc>
 8003566:	e070      	b.n	800364a <UART_SetConfig+0x5be>
  {
    switch (clocksource)
 8003568:	231b      	movs	r3, #27
 800356a:	2220      	movs	r2, #32
 800356c:	189b      	adds	r3, r3, r2
 800356e:	19db      	adds	r3, r3, r7
 8003570:	781b      	ldrb	r3, [r3, #0]
 8003572:	2b08      	cmp	r3, #8
 8003574:	d015      	beq.n	80035a2 <UART_SetConfig+0x516>
 8003576:	dc18      	bgt.n	80035aa <UART_SetConfig+0x51e>
 8003578:	2b04      	cmp	r3, #4
 800357a:	d00d      	beq.n	8003598 <UART_SetConfig+0x50c>
 800357c:	dc15      	bgt.n	80035aa <UART_SetConfig+0x51e>
 800357e:	2b00      	cmp	r3, #0
 8003580:	d002      	beq.n	8003588 <UART_SetConfig+0x4fc>
 8003582:	2b02      	cmp	r3, #2
 8003584:	d005      	beq.n	8003592 <UART_SetConfig+0x506>
 8003586:	e010      	b.n	80035aa <UART_SetConfig+0x51e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003588:	f7fe fde0 	bl	800214c <HAL_RCC_GetPCLK1Freq>
 800358c:	0003      	movs	r3, r0
 800358e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003590:	e014      	b.n	80035bc <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003592:	4b67      	ldr	r3, [pc, #412]	; (8003730 <UART_SetConfig+0x6a4>)
 8003594:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003596:	e011      	b.n	80035bc <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003598:	f7fe fd4c 	bl	8002034 <HAL_RCC_GetSysClockFreq>
 800359c:	0003      	movs	r3, r0
 800359e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80035a0:	e00c      	b.n	80035bc <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80035a2:	2380      	movs	r3, #128	; 0x80
 80035a4:	021b      	lsls	r3, r3, #8
 80035a6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80035a8:	e008      	b.n	80035bc <UART_SetConfig+0x530>
      default:
        pclk = 0U;
 80035aa:	2300      	movs	r3, #0
 80035ac:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 80035ae:	231a      	movs	r3, #26
 80035b0:	2220      	movs	r2, #32
 80035b2:	189b      	adds	r3, r3, r2
 80035b4:	19db      	adds	r3, r3, r7
 80035b6:	2201      	movs	r2, #1
 80035b8:	701a      	strb	r2, [r3, #0]
        break;
 80035ba:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80035bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d100      	bne.n	80035c4 <UART_SetConfig+0x538>
 80035c2:	e09a      	b.n	80036fa <UART_SetConfig+0x66e>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80035c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035c6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80035c8:	4b5a      	ldr	r3, [pc, #360]	; (8003734 <UART_SetConfig+0x6a8>)
 80035ca:	0052      	lsls	r2, r2, #1
 80035cc:	5ad3      	ldrh	r3, [r2, r3]
 80035ce:	0019      	movs	r1, r3
 80035d0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80035d2:	f7fc fd9f 	bl	8000114 <__udivsi3>
 80035d6:	0003      	movs	r3, r0
 80035d8:	005a      	lsls	r2, r3, #1
 80035da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035dc:	685b      	ldr	r3, [r3, #4]
 80035de:	085b      	lsrs	r3, r3, #1
 80035e0:	18d2      	adds	r2, r2, r3
 80035e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035e4:	685b      	ldr	r3, [r3, #4]
 80035e6:	0019      	movs	r1, r3
 80035e8:	0010      	movs	r0, r2
 80035ea:	f7fc fd93 	bl	8000114 <__udivsi3>
 80035ee:	0003      	movs	r3, r0
 80035f0:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80035f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035f4:	2b0f      	cmp	r3, #15
 80035f6:	d921      	bls.n	800363c <UART_SetConfig+0x5b0>
 80035f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80035fa:	2380      	movs	r3, #128	; 0x80
 80035fc:	025b      	lsls	r3, r3, #9
 80035fe:	429a      	cmp	r2, r3
 8003600:	d21c      	bcs.n	800363c <UART_SetConfig+0x5b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003602:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003604:	b29a      	uxth	r2, r3
 8003606:	200e      	movs	r0, #14
 8003608:	2420      	movs	r4, #32
 800360a:	1903      	adds	r3, r0, r4
 800360c:	19db      	adds	r3, r3, r7
 800360e:	210f      	movs	r1, #15
 8003610:	438a      	bics	r2, r1
 8003612:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003614:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003616:	085b      	lsrs	r3, r3, #1
 8003618:	b29b      	uxth	r3, r3
 800361a:	2207      	movs	r2, #7
 800361c:	4013      	ands	r3, r2
 800361e:	b299      	uxth	r1, r3
 8003620:	1903      	adds	r3, r0, r4
 8003622:	19db      	adds	r3, r3, r7
 8003624:	1902      	adds	r2, r0, r4
 8003626:	19d2      	adds	r2, r2, r7
 8003628:	8812      	ldrh	r2, [r2, #0]
 800362a:	430a      	orrs	r2, r1
 800362c:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800362e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	1902      	adds	r2, r0, r4
 8003634:	19d2      	adds	r2, r2, r7
 8003636:	8812      	ldrh	r2, [r2, #0]
 8003638:	60da      	str	r2, [r3, #12]
 800363a:	e05e      	b.n	80036fa <UART_SetConfig+0x66e>
      }
      else
      {
        ret = HAL_ERROR;
 800363c:	231a      	movs	r3, #26
 800363e:	2220      	movs	r2, #32
 8003640:	189b      	adds	r3, r3, r2
 8003642:	19db      	adds	r3, r3, r7
 8003644:	2201      	movs	r2, #1
 8003646:	701a      	strb	r2, [r3, #0]
 8003648:	e057      	b.n	80036fa <UART_SetConfig+0x66e>
      }
    }
  }
  else
  {
    switch (clocksource)
 800364a:	231b      	movs	r3, #27
 800364c:	2220      	movs	r2, #32
 800364e:	189b      	adds	r3, r3, r2
 8003650:	19db      	adds	r3, r3, r7
 8003652:	781b      	ldrb	r3, [r3, #0]
 8003654:	2b08      	cmp	r3, #8
 8003656:	d015      	beq.n	8003684 <UART_SetConfig+0x5f8>
 8003658:	dc18      	bgt.n	800368c <UART_SetConfig+0x600>
 800365a:	2b04      	cmp	r3, #4
 800365c:	d00d      	beq.n	800367a <UART_SetConfig+0x5ee>
 800365e:	dc15      	bgt.n	800368c <UART_SetConfig+0x600>
 8003660:	2b00      	cmp	r3, #0
 8003662:	d002      	beq.n	800366a <UART_SetConfig+0x5de>
 8003664:	2b02      	cmp	r3, #2
 8003666:	d005      	beq.n	8003674 <UART_SetConfig+0x5e8>
 8003668:	e010      	b.n	800368c <UART_SetConfig+0x600>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800366a:	f7fe fd6f 	bl	800214c <HAL_RCC_GetPCLK1Freq>
 800366e:	0003      	movs	r3, r0
 8003670:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003672:	e014      	b.n	800369e <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003674:	4b2e      	ldr	r3, [pc, #184]	; (8003730 <UART_SetConfig+0x6a4>)
 8003676:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003678:	e011      	b.n	800369e <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800367a:	f7fe fcdb 	bl	8002034 <HAL_RCC_GetSysClockFreq>
 800367e:	0003      	movs	r3, r0
 8003680:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003682:	e00c      	b.n	800369e <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003684:	2380      	movs	r3, #128	; 0x80
 8003686:	021b      	lsls	r3, r3, #8
 8003688:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800368a:	e008      	b.n	800369e <UART_SetConfig+0x612>
      default:
        pclk = 0U;
 800368c:	2300      	movs	r3, #0
 800368e:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8003690:	231a      	movs	r3, #26
 8003692:	2220      	movs	r2, #32
 8003694:	189b      	adds	r3, r3, r2
 8003696:	19db      	adds	r3, r3, r7
 8003698:	2201      	movs	r2, #1
 800369a:	701a      	strb	r2, [r3, #0]
        break;
 800369c:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 800369e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d02a      	beq.n	80036fa <UART_SetConfig+0x66e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80036a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036a6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80036a8:	4b22      	ldr	r3, [pc, #136]	; (8003734 <UART_SetConfig+0x6a8>)
 80036aa:	0052      	lsls	r2, r2, #1
 80036ac:	5ad3      	ldrh	r3, [r2, r3]
 80036ae:	0019      	movs	r1, r3
 80036b0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80036b2:	f7fc fd2f 	bl	8000114 <__udivsi3>
 80036b6:	0003      	movs	r3, r0
 80036b8:	001a      	movs	r2, r3
 80036ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036bc:	685b      	ldr	r3, [r3, #4]
 80036be:	085b      	lsrs	r3, r3, #1
 80036c0:	18d2      	adds	r2, r2, r3
 80036c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036c4:	685b      	ldr	r3, [r3, #4]
 80036c6:	0019      	movs	r1, r3
 80036c8:	0010      	movs	r0, r2
 80036ca:	f7fc fd23 	bl	8000114 <__udivsi3>
 80036ce:	0003      	movs	r3, r0
 80036d0:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80036d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036d4:	2b0f      	cmp	r3, #15
 80036d6:	d90a      	bls.n	80036ee <UART_SetConfig+0x662>
 80036d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80036da:	2380      	movs	r3, #128	; 0x80
 80036dc:	025b      	lsls	r3, r3, #9
 80036de:	429a      	cmp	r2, r3
 80036e0:	d205      	bcs.n	80036ee <UART_SetConfig+0x662>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80036e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036e4:	b29a      	uxth	r2, r3
 80036e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	60da      	str	r2, [r3, #12]
 80036ec:	e005      	b.n	80036fa <UART_SetConfig+0x66e>
      }
      else
      {
        ret = HAL_ERROR;
 80036ee:	231a      	movs	r3, #26
 80036f0:	2220      	movs	r2, #32
 80036f2:	189b      	adds	r3, r3, r2
 80036f4:	19db      	adds	r3, r3, r7
 80036f6:	2201      	movs	r2, #1
 80036f8:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80036fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036fc:	226a      	movs	r2, #106	; 0x6a
 80036fe:	2101      	movs	r1, #1
 8003700:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8003702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003704:	2268      	movs	r2, #104	; 0x68
 8003706:	2101      	movs	r1, #1
 8003708:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800370a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800370c:	2200      	movs	r2, #0
 800370e:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8003710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003712:	2200      	movs	r2, #0
 8003714:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8003716:	231a      	movs	r3, #26
 8003718:	2220      	movs	r2, #32
 800371a:	189b      	adds	r3, r3, r2
 800371c:	19db      	adds	r3, r3, r7
 800371e:	781b      	ldrb	r3, [r3, #0]
}
 8003720:	0018      	movs	r0, r3
 8003722:	46bd      	mov	sp, r7
 8003724:	b010      	add	sp, #64	; 0x40
 8003726:	bdb0      	pop	{r4, r5, r7, pc}
 8003728:	40008000 	.word	0x40008000
 800372c:	40008400 	.word	0x40008400
 8003730:	00f42400 	.word	0x00f42400
 8003734:	08003eb4 	.word	0x08003eb4

08003738 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003738:	b580      	push	{r7, lr}
 800373a:	b082      	sub	sp, #8
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003744:	2201      	movs	r2, #1
 8003746:	4013      	ands	r3, r2
 8003748:	d00b      	beq.n	8003762 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	685b      	ldr	r3, [r3, #4]
 8003750:	4a4a      	ldr	r2, [pc, #296]	; (800387c <UART_AdvFeatureConfig+0x144>)
 8003752:	4013      	ands	r3, r2
 8003754:	0019      	movs	r1, r3
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	430a      	orrs	r2, r1
 8003760:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003766:	2202      	movs	r2, #2
 8003768:	4013      	ands	r3, r2
 800376a:	d00b      	beq.n	8003784 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	685b      	ldr	r3, [r3, #4]
 8003772:	4a43      	ldr	r2, [pc, #268]	; (8003880 <UART_AdvFeatureConfig+0x148>)
 8003774:	4013      	ands	r3, r2
 8003776:	0019      	movs	r1, r3
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	430a      	orrs	r2, r1
 8003782:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003788:	2204      	movs	r2, #4
 800378a:	4013      	ands	r3, r2
 800378c:	d00b      	beq.n	80037a6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	685b      	ldr	r3, [r3, #4]
 8003794:	4a3b      	ldr	r2, [pc, #236]	; (8003884 <UART_AdvFeatureConfig+0x14c>)
 8003796:	4013      	ands	r3, r2
 8003798:	0019      	movs	r1, r3
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	430a      	orrs	r2, r1
 80037a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037aa:	2208      	movs	r2, #8
 80037ac:	4013      	ands	r3, r2
 80037ae:	d00b      	beq.n	80037c8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	685b      	ldr	r3, [r3, #4]
 80037b6:	4a34      	ldr	r2, [pc, #208]	; (8003888 <UART_AdvFeatureConfig+0x150>)
 80037b8:	4013      	ands	r3, r2
 80037ba:	0019      	movs	r1, r3
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	430a      	orrs	r2, r1
 80037c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037cc:	2210      	movs	r2, #16
 80037ce:	4013      	ands	r3, r2
 80037d0:	d00b      	beq.n	80037ea <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	689b      	ldr	r3, [r3, #8]
 80037d8:	4a2c      	ldr	r2, [pc, #176]	; (800388c <UART_AdvFeatureConfig+0x154>)
 80037da:	4013      	ands	r3, r2
 80037dc:	0019      	movs	r1, r3
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	430a      	orrs	r2, r1
 80037e8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037ee:	2220      	movs	r2, #32
 80037f0:	4013      	ands	r3, r2
 80037f2:	d00b      	beq.n	800380c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	689b      	ldr	r3, [r3, #8]
 80037fa:	4a25      	ldr	r2, [pc, #148]	; (8003890 <UART_AdvFeatureConfig+0x158>)
 80037fc:	4013      	ands	r3, r2
 80037fe:	0019      	movs	r1, r3
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	430a      	orrs	r2, r1
 800380a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003810:	2240      	movs	r2, #64	; 0x40
 8003812:	4013      	ands	r3, r2
 8003814:	d01d      	beq.n	8003852 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	685b      	ldr	r3, [r3, #4]
 800381c:	4a1d      	ldr	r2, [pc, #116]	; (8003894 <UART_AdvFeatureConfig+0x15c>)
 800381e:	4013      	ands	r3, r2
 8003820:	0019      	movs	r1, r3
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	430a      	orrs	r2, r1
 800382c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003832:	2380      	movs	r3, #128	; 0x80
 8003834:	035b      	lsls	r3, r3, #13
 8003836:	429a      	cmp	r2, r3
 8003838:	d10b      	bne.n	8003852 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	685b      	ldr	r3, [r3, #4]
 8003840:	4a15      	ldr	r2, [pc, #84]	; (8003898 <UART_AdvFeatureConfig+0x160>)
 8003842:	4013      	ands	r3, r2
 8003844:	0019      	movs	r1, r3
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	430a      	orrs	r2, r1
 8003850:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003856:	2280      	movs	r2, #128	; 0x80
 8003858:	4013      	ands	r3, r2
 800385a:	d00b      	beq.n	8003874 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	685b      	ldr	r3, [r3, #4]
 8003862:	4a0e      	ldr	r2, [pc, #56]	; (800389c <UART_AdvFeatureConfig+0x164>)
 8003864:	4013      	ands	r3, r2
 8003866:	0019      	movs	r1, r3
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	430a      	orrs	r2, r1
 8003872:	605a      	str	r2, [r3, #4]
  }
}
 8003874:	46c0      	nop			; (mov r8, r8)
 8003876:	46bd      	mov	sp, r7
 8003878:	b002      	add	sp, #8
 800387a:	bd80      	pop	{r7, pc}
 800387c:	fffdffff 	.word	0xfffdffff
 8003880:	fffeffff 	.word	0xfffeffff
 8003884:	fffbffff 	.word	0xfffbffff
 8003888:	ffff7fff 	.word	0xffff7fff
 800388c:	ffffefff 	.word	0xffffefff
 8003890:	ffffdfff 	.word	0xffffdfff
 8003894:	ffefffff 	.word	0xffefffff
 8003898:	ff9fffff 	.word	0xff9fffff
 800389c:	fff7ffff 	.word	0xfff7ffff

080038a0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b086      	sub	sp, #24
 80038a4:	af02      	add	r7, sp, #8
 80038a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2290      	movs	r2, #144	; 0x90
 80038ac:	2100      	movs	r1, #0
 80038ae:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80038b0:	f7fd fc46 	bl	8001140 <HAL_GetTick>
 80038b4:	0003      	movs	r3, r0
 80038b6:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	2208      	movs	r2, #8
 80038c0:	4013      	ands	r3, r2
 80038c2:	2b08      	cmp	r3, #8
 80038c4:	d10c      	bne.n	80038e0 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	2280      	movs	r2, #128	; 0x80
 80038ca:	0391      	lsls	r1, r2, #14
 80038cc:	6878      	ldr	r0, [r7, #4]
 80038ce:	4a1a      	ldr	r2, [pc, #104]	; (8003938 <UART_CheckIdleState+0x98>)
 80038d0:	9200      	str	r2, [sp, #0]
 80038d2:	2200      	movs	r2, #0
 80038d4:	f000 f832 	bl	800393c <UART_WaitOnFlagUntilTimeout>
 80038d8:	1e03      	subs	r3, r0, #0
 80038da:	d001      	beq.n	80038e0 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80038dc:	2303      	movs	r3, #3
 80038de:	e026      	b.n	800392e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	2204      	movs	r2, #4
 80038e8:	4013      	ands	r3, r2
 80038ea:	2b04      	cmp	r3, #4
 80038ec:	d10c      	bne.n	8003908 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	2280      	movs	r2, #128	; 0x80
 80038f2:	03d1      	lsls	r1, r2, #15
 80038f4:	6878      	ldr	r0, [r7, #4]
 80038f6:	4a10      	ldr	r2, [pc, #64]	; (8003938 <UART_CheckIdleState+0x98>)
 80038f8:	9200      	str	r2, [sp, #0]
 80038fa:	2200      	movs	r2, #0
 80038fc:	f000 f81e 	bl	800393c <UART_WaitOnFlagUntilTimeout>
 8003900:	1e03      	subs	r3, r0, #0
 8003902:	d001      	beq.n	8003908 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003904:	2303      	movs	r3, #3
 8003906:	e012      	b.n	800392e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2288      	movs	r2, #136	; 0x88
 800390c:	2120      	movs	r1, #32
 800390e:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	228c      	movs	r2, #140	; 0x8c
 8003914:	2120      	movs	r1, #32
 8003916:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2200      	movs	r2, #0
 800391c:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	2200      	movs	r2, #0
 8003922:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2284      	movs	r2, #132	; 0x84
 8003928:	2100      	movs	r1, #0
 800392a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800392c:	2300      	movs	r3, #0
}
 800392e:	0018      	movs	r0, r3
 8003930:	46bd      	mov	sp, r7
 8003932:	b004      	add	sp, #16
 8003934:	bd80      	pop	{r7, pc}
 8003936:	46c0      	nop			; (mov r8, r8)
 8003938:	01ffffff 	.word	0x01ffffff

0800393c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800393c:	b580      	push	{r7, lr}
 800393e:	b094      	sub	sp, #80	; 0x50
 8003940:	af00      	add	r7, sp, #0
 8003942:	60f8      	str	r0, [r7, #12]
 8003944:	60b9      	str	r1, [r7, #8]
 8003946:	603b      	str	r3, [r7, #0]
 8003948:	1dfb      	adds	r3, r7, #7
 800394a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800394c:	e0a7      	b.n	8003a9e <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800394e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003950:	3301      	adds	r3, #1
 8003952:	d100      	bne.n	8003956 <UART_WaitOnFlagUntilTimeout+0x1a>
 8003954:	e0a3      	b.n	8003a9e <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003956:	f7fd fbf3 	bl	8001140 <HAL_GetTick>
 800395a:	0002      	movs	r2, r0
 800395c:	683b      	ldr	r3, [r7, #0]
 800395e:	1ad3      	subs	r3, r2, r3
 8003960:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003962:	429a      	cmp	r2, r3
 8003964:	d302      	bcc.n	800396c <UART_WaitOnFlagUntilTimeout+0x30>
 8003966:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003968:	2b00      	cmp	r3, #0
 800396a:	d13f      	bne.n	80039ec <UART_WaitOnFlagUntilTimeout+0xb0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800396c:	f3ef 8310 	mrs	r3, PRIMASK
 8003970:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8003972:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8003974:	647b      	str	r3, [r7, #68]	; 0x44
 8003976:	2301      	movs	r3, #1
 8003978:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800397a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800397c:	f383 8810 	msr	PRIMASK, r3
}
 8003980:	46c0      	nop			; (mov r8, r8)
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	681a      	ldr	r2, [r3, #0]
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	494e      	ldr	r1, [pc, #312]	; (8003ac8 <UART_WaitOnFlagUntilTimeout+0x18c>)
 800398e:	400a      	ands	r2, r1
 8003990:	601a      	str	r2, [r3, #0]
 8003992:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003994:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003996:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003998:	f383 8810 	msr	PRIMASK, r3
}
 800399c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800399e:	f3ef 8310 	mrs	r3, PRIMASK
 80039a2:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 80039a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039a6:	643b      	str	r3, [r7, #64]	; 0x40
 80039a8:	2301      	movs	r3, #1
 80039aa:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039ae:	f383 8810 	msr	PRIMASK, r3
}
 80039b2:	46c0      	nop			; (mov r8, r8)
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	689a      	ldr	r2, [r3, #8]
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	2101      	movs	r1, #1
 80039c0:	438a      	bics	r2, r1
 80039c2:	609a      	str	r2, [r3, #8]
 80039c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80039c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80039ca:	f383 8810 	msr	PRIMASK, r3
}
 80039ce:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	2288      	movs	r2, #136	; 0x88
 80039d4:	2120      	movs	r1, #32
 80039d6:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	228c      	movs	r2, #140	; 0x8c
 80039dc:	2120      	movs	r1, #32
 80039de:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	2284      	movs	r2, #132	; 0x84
 80039e4:	2100      	movs	r1, #0
 80039e6:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80039e8:	2303      	movs	r3, #3
 80039ea:	e069      	b.n	8003ac0 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	2204      	movs	r2, #4
 80039f4:	4013      	ands	r3, r2
 80039f6:	d052      	beq.n	8003a9e <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	69da      	ldr	r2, [r3, #28]
 80039fe:	2380      	movs	r3, #128	; 0x80
 8003a00:	011b      	lsls	r3, r3, #4
 8003a02:	401a      	ands	r2, r3
 8003a04:	2380      	movs	r3, #128	; 0x80
 8003a06:	011b      	lsls	r3, r3, #4
 8003a08:	429a      	cmp	r2, r3
 8003a0a:	d148      	bne.n	8003a9e <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	2280      	movs	r2, #128	; 0x80
 8003a12:	0112      	lsls	r2, r2, #4
 8003a14:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a16:	f3ef 8310 	mrs	r3, PRIMASK
 8003a1a:	613b      	str	r3, [r7, #16]
  return(result);
 8003a1c:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8003a1e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003a20:	2301      	movs	r3, #1
 8003a22:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a24:	697b      	ldr	r3, [r7, #20]
 8003a26:	f383 8810 	msr	PRIMASK, r3
}
 8003a2a:	46c0      	nop			; (mov r8, r8)
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	681a      	ldr	r2, [r3, #0]
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	4924      	ldr	r1, [pc, #144]	; (8003ac8 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8003a38:	400a      	ands	r2, r1
 8003a3a:	601a      	str	r2, [r3, #0]
 8003a3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a3e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a40:	69bb      	ldr	r3, [r7, #24]
 8003a42:	f383 8810 	msr	PRIMASK, r3
}
 8003a46:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a48:	f3ef 8310 	mrs	r3, PRIMASK
 8003a4c:	61fb      	str	r3, [r7, #28]
  return(result);
 8003a4e:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a50:	64bb      	str	r3, [r7, #72]	; 0x48
 8003a52:	2301      	movs	r3, #1
 8003a54:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a56:	6a3b      	ldr	r3, [r7, #32]
 8003a58:	f383 8810 	msr	PRIMASK, r3
}
 8003a5c:	46c0      	nop			; (mov r8, r8)
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	689a      	ldr	r2, [r3, #8]
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	2101      	movs	r1, #1
 8003a6a:	438a      	bics	r2, r1
 8003a6c:	609a      	str	r2, [r3, #8]
 8003a6e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003a70:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a74:	f383 8810 	msr	PRIMASK, r3
}
 8003a78:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	2288      	movs	r2, #136	; 0x88
 8003a7e:	2120      	movs	r1, #32
 8003a80:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	228c      	movs	r2, #140	; 0x8c
 8003a86:	2120      	movs	r1, #32
 8003a88:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	2290      	movs	r2, #144	; 0x90
 8003a8e:	2120      	movs	r1, #32
 8003a90:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	2284      	movs	r2, #132	; 0x84
 8003a96:	2100      	movs	r1, #0
 8003a98:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003a9a:	2303      	movs	r3, #3
 8003a9c:	e010      	b.n	8003ac0 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	69db      	ldr	r3, [r3, #28]
 8003aa4:	68ba      	ldr	r2, [r7, #8]
 8003aa6:	4013      	ands	r3, r2
 8003aa8:	68ba      	ldr	r2, [r7, #8]
 8003aaa:	1ad3      	subs	r3, r2, r3
 8003aac:	425a      	negs	r2, r3
 8003aae:	4153      	adcs	r3, r2
 8003ab0:	b2db      	uxtb	r3, r3
 8003ab2:	001a      	movs	r2, r3
 8003ab4:	1dfb      	adds	r3, r7, #7
 8003ab6:	781b      	ldrb	r3, [r3, #0]
 8003ab8:	429a      	cmp	r2, r3
 8003aba:	d100      	bne.n	8003abe <UART_WaitOnFlagUntilTimeout+0x182>
 8003abc:	e747      	b.n	800394e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003abe:	2300      	movs	r3, #0
}
 8003ac0:	0018      	movs	r0, r3
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	b014      	add	sp, #80	; 0x50
 8003ac6:	bd80      	pop	{r7, pc}
 8003ac8:	fffffe5f 	.word	0xfffffe5f

08003acc <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	b084      	sub	sp, #16
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2284      	movs	r2, #132	; 0x84
 8003ad8:	5c9b      	ldrb	r3, [r3, r2]
 8003ada:	2b01      	cmp	r3, #1
 8003adc:	d101      	bne.n	8003ae2 <HAL_UARTEx_DisableFifoMode+0x16>
 8003ade:	2302      	movs	r3, #2
 8003ae0:	e027      	b.n	8003b32 <HAL_UARTEx_DisableFifoMode+0x66>
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	2284      	movs	r2, #132	; 0x84
 8003ae6:	2101      	movs	r1, #1
 8003ae8:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	2288      	movs	r2, #136	; 0x88
 8003aee:	2124      	movs	r1, #36	; 0x24
 8003af0:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	681a      	ldr	r2, [r3, #0]
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	2101      	movs	r1, #1
 8003b06:	438a      	bics	r2, r1
 8003b08:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	4a0b      	ldr	r2, [pc, #44]	; (8003b3c <HAL_UARTEx_DisableFifoMode+0x70>)
 8003b0e:	4013      	ands	r3, r2
 8003b10:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	2200      	movs	r2, #0
 8003b16:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	68fa      	ldr	r2, [r7, #12]
 8003b1e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2288      	movs	r2, #136	; 0x88
 8003b24:	2120      	movs	r1, #32
 8003b26:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2284      	movs	r2, #132	; 0x84
 8003b2c:	2100      	movs	r1, #0
 8003b2e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003b30:	2300      	movs	r3, #0
}
 8003b32:	0018      	movs	r0, r3
 8003b34:	46bd      	mov	sp, r7
 8003b36:	b004      	add	sp, #16
 8003b38:	bd80      	pop	{r7, pc}
 8003b3a:	46c0      	nop			; (mov r8, r8)
 8003b3c:	dfffffff 	.word	0xdfffffff

08003b40 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	b084      	sub	sp, #16
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
 8003b48:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	2284      	movs	r2, #132	; 0x84
 8003b4e:	5c9b      	ldrb	r3, [r3, r2]
 8003b50:	2b01      	cmp	r3, #1
 8003b52:	d101      	bne.n	8003b58 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8003b54:	2302      	movs	r3, #2
 8003b56:	e02e      	b.n	8003bb6 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2284      	movs	r2, #132	; 0x84
 8003b5c:	2101      	movs	r1, #1
 8003b5e:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2288      	movs	r2, #136	; 0x88
 8003b64:	2124      	movs	r1, #36	; 0x24
 8003b66:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	681a      	ldr	r2, [r3, #0]
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	2101      	movs	r1, #1
 8003b7c:	438a      	bics	r2, r1
 8003b7e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	689b      	ldr	r3, [r3, #8]
 8003b86:	00db      	lsls	r3, r3, #3
 8003b88:	08d9      	lsrs	r1, r3, #3
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	683a      	ldr	r2, [r7, #0]
 8003b90:	430a      	orrs	r2, r1
 8003b92:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	0018      	movs	r0, r3
 8003b98:	f000 f854 	bl	8003c44 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	68fa      	ldr	r2, [r7, #12]
 8003ba2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2288      	movs	r2, #136	; 0x88
 8003ba8:	2120      	movs	r1, #32
 8003baa:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2284      	movs	r2, #132	; 0x84
 8003bb0:	2100      	movs	r1, #0
 8003bb2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003bb4:	2300      	movs	r3, #0
}
 8003bb6:	0018      	movs	r0, r3
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	b004      	add	sp, #16
 8003bbc:	bd80      	pop	{r7, pc}
	...

08003bc0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	b084      	sub	sp, #16
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]
 8003bc8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	2284      	movs	r2, #132	; 0x84
 8003bce:	5c9b      	ldrb	r3, [r3, r2]
 8003bd0:	2b01      	cmp	r3, #1
 8003bd2:	d101      	bne.n	8003bd8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8003bd4:	2302      	movs	r3, #2
 8003bd6:	e02f      	b.n	8003c38 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2284      	movs	r2, #132	; 0x84
 8003bdc:	2101      	movs	r1, #1
 8003bde:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2288      	movs	r2, #136	; 0x88
 8003be4:	2124      	movs	r1, #36	; 0x24
 8003be6:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	681a      	ldr	r2, [r3, #0]
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	2101      	movs	r1, #1
 8003bfc:	438a      	bics	r2, r1
 8003bfe:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	689b      	ldr	r3, [r3, #8]
 8003c06:	4a0e      	ldr	r2, [pc, #56]	; (8003c40 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8003c08:	4013      	ands	r3, r2
 8003c0a:	0019      	movs	r1, r3
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	683a      	ldr	r2, [r7, #0]
 8003c12:	430a      	orrs	r2, r1
 8003c14:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	0018      	movs	r0, r3
 8003c1a:	f000 f813 	bl	8003c44 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	68fa      	ldr	r2, [r7, #12]
 8003c24:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	2288      	movs	r2, #136	; 0x88
 8003c2a:	2120      	movs	r1, #32
 8003c2c:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	2284      	movs	r2, #132	; 0x84
 8003c32:	2100      	movs	r1, #0
 8003c34:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003c36:	2300      	movs	r3, #0
}
 8003c38:	0018      	movs	r0, r3
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	b004      	add	sp, #16
 8003c3e:	bd80      	pop	{r7, pc}
 8003c40:	f1ffffff 	.word	0xf1ffffff

08003c44 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8003c44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003c46:	b085      	sub	sp, #20
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d108      	bne.n	8003c66 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	226a      	movs	r2, #106	; 0x6a
 8003c58:	2101      	movs	r1, #1
 8003c5a:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2268      	movs	r2, #104	; 0x68
 8003c60:	2101      	movs	r1, #1
 8003c62:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8003c64:	e043      	b.n	8003cee <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8003c66:	260f      	movs	r6, #15
 8003c68:	19bb      	adds	r3, r7, r6
 8003c6a:	2208      	movs	r2, #8
 8003c6c:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8003c6e:	200e      	movs	r0, #14
 8003c70:	183b      	adds	r3, r7, r0
 8003c72:	2208      	movs	r2, #8
 8003c74:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	689b      	ldr	r3, [r3, #8]
 8003c7c:	0e5b      	lsrs	r3, r3, #25
 8003c7e:	b2da      	uxtb	r2, r3
 8003c80:	240d      	movs	r4, #13
 8003c82:	193b      	adds	r3, r7, r4
 8003c84:	2107      	movs	r1, #7
 8003c86:	400a      	ands	r2, r1
 8003c88:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	689b      	ldr	r3, [r3, #8]
 8003c90:	0f5b      	lsrs	r3, r3, #29
 8003c92:	b2da      	uxtb	r2, r3
 8003c94:	250c      	movs	r5, #12
 8003c96:	197b      	adds	r3, r7, r5
 8003c98:	2107      	movs	r1, #7
 8003c9a:	400a      	ands	r2, r1
 8003c9c:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003c9e:	183b      	adds	r3, r7, r0
 8003ca0:	781b      	ldrb	r3, [r3, #0]
 8003ca2:	197a      	adds	r2, r7, r5
 8003ca4:	7812      	ldrb	r2, [r2, #0]
 8003ca6:	4914      	ldr	r1, [pc, #80]	; (8003cf8 <UARTEx_SetNbDataToProcess+0xb4>)
 8003ca8:	5c8a      	ldrb	r2, [r1, r2]
 8003caa:	435a      	muls	r2, r3
 8003cac:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8003cae:	197b      	adds	r3, r7, r5
 8003cb0:	781b      	ldrb	r3, [r3, #0]
 8003cb2:	4a12      	ldr	r2, [pc, #72]	; (8003cfc <UARTEx_SetNbDataToProcess+0xb8>)
 8003cb4:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003cb6:	0019      	movs	r1, r3
 8003cb8:	f7fc fab6 	bl	8000228 <__divsi3>
 8003cbc:	0003      	movs	r3, r0
 8003cbe:	b299      	uxth	r1, r3
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	226a      	movs	r2, #106	; 0x6a
 8003cc4:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003cc6:	19bb      	adds	r3, r7, r6
 8003cc8:	781b      	ldrb	r3, [r3, #0]
 8003cca:	193a      	adds	r2, r7, r4
 8003ccc:	7812      	ldrb	r2, [r2, #0]
 8003cce:	490a      	ldr	r1, [pc, #40]	; (8003cf8 <UARTEx_SetNbDataToProcess+0xb4>)
 8003cd0:	5c8a      	ldrb	r2, [r1, r2]
 8003cd2:	435a      	muls	r2, r3
 8003cd4:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8003cd6:	193b      	adds	r3, r7, r4
 8003cd8:	781b      	ldrb	r3, [r3, #0]
 8003cda:	4a08      	ldr	r2, [pc, #32]	; (8003cfc <UARTEx_SetNbDataToProcess+0xb8>)
 8003cdc:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003cde:	0019      	movs	r1, r3
 8003ce0:	f7fc faa2 	bl	8000228 <__divsi3>
 8003ce4:	0003      	movs	r3, r0
 8003ce6:	b299      	uxth	r1, r3
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2268      	movs	r2, #104	; 0x68
 8003cec:	5299      	strh	r1, [r3, r2]
}
 8003cee:	46c0      	nop			; (mov r8, r8)
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	b005      	add	sp, #20
 8003cf4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003cf6:	46c0      	nop			; (mov r8, r8)
 8003cf8:	08003ecc 	.word	0x08003ecc
 8003cfc:	08003ed4 	.word	0x08003ed4

08003d00 <memset>:
 8003d00:	0003      	movs	r3, r0
 8003d02:	1882      	adds	r2, r0, r2
 8003d04:	4293      	cmp	r3, r2
 8003d06:	d100      	bne.n	8003d0a <memset+0xa>
 8003d08:	4770      	bx	lr
 8003d0a:	7019      	strb	r1, [r3, #0]
 8003d0c:	3301      	adds	r3, #1
 8003d0e:	e7f9      	b.n	8003d04 <memset+0x4>

08003d10 <__libc_init_array>:
 8003d10:	b570      	push	{r4, r5, r6, lr}
 8003d12:	2600      	movs	r6, #0
 8003d14:	4c0c      	ldr	r4, [pc, #48]	; (8003d48 <__libc_init_array+0x38>)
 8003d16:	4d0d      	ldr	r5, [pc, #52]	; (8003d4c <__libc_init_array+0x3c>)
 8003d18:	1b64      	subs	r4, r4, r5
 8003d1a:	10a4      	asrs	r4, r4, #2
 8003d1c:	42a6      	cmp	r6, r4
 8003d1e:	d109      	bne.n	8003d34 <__libc_init_array+0x24>
 8003d20:	2600      	movs	r6, #0
 8003d22:	f000 f819 	bl	8003d58 <_init>
 8003d26:	4c0a      	ldr	r4, [pc, #40]	; (8003d50 <__libc_init_array+0x40>)
 8003d28:	4d0a      	ldr	r5, [pc, #40]	; (8003d54 <__libc_init_array+0x44>)
 8003d2a:	1b64      	subs	r4, r4, r5
 8003d2c:	10a4      	asrs	r4, r4, #2
 8003d2e:	42a6      	cmp	r6, r4
 8003d30:	d105      	bne.n	8003d3e <__libc_init_array+0x2e>
 8003d32:	bd70      	pop	{r4, r5, r6, pc}
 8003d34:	00b3      	lsls	r3, r6, #2
 8003d36:	58eb      	ldr	r3, [r5, r3]
 8003d38:	4798      	blx	r3
 8003d3a:	3601      	adds	r6, #1
 8003d3c:	e7ee      	b.n	8003d1c <__libc_init_array+0xc>
 8003d3e:	00b3      	lsls	r3, r6, #2
 8003d40:	58eb      	ldr	r3, [r5, r3]
 8003d42:	4798      	blx	r3
 8003d44:	3601      	adds	r6, #1
 8003d46:	e7f2      	b.n	8003d2e <__libc_init_array+0x1e>
 8003d48:	08003ee4 	.word	0x08003ee4
 8003d4c:	08003ee4 	.word	0x08003ee4
 8003d50:	08003ee8 	.word	0x08003ee8
 8003d54:	08003ee4 	.word	0x08003ee4

08003d58 <_init>:
 8003d58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d5a:	46c0      	nop			; (mov r8, r8)
 8003d5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d5e:	bc08      	pop	{r3}
 8003d60:	469e      	mov	lr, r3
 8003d62:	4770      	bx	lr

08003d64 <_fini>:
 8003d64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d66:	46c0      	nop			; (mov r8, r8)
 8003d68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d6a:	bc08      	pop	{r3}
 8003d6c:	469e      	mov	lr, r3
 8003d6e:	4770      	bx	lr
